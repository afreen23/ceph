{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-content-switcher_mjs.js","mappings":"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","names":["_c1","a0","a1","a2","ContentSwitcherOption","constructor","renderer","hostElement","this","name","selected","EventEmitter","onClick","onFocus","switcherClass","selectedClass","role","ariaSelected","tabindex","_active","active","value","hostClick","event","emit","doFocus","ngOnInit","hostNativeElement","nativeElement","spanWrapper","createElement","addClass","hostChildren","childNodes","forEach","node","push","removeChild","appendChild","ɵfac","__ngFactoryType__","i0","ɵdir","type","selectors","hostVars","hostBindings","rf","ctx","$event","inputs","outputs","ContentSwitcher","elementRef","ariaLabel","size","ngAfterViewInit","options","find","option","setTimeout","first","subscribe","_","hostkeys","buttonList","Array","from","querySelectorAll","key","preventDefault","isFocusInLastItem","focus","index","findIndex","item","target","isFocusInFirstItem","length","ɵcmp","contentQueries","dirIndex","_t","ngContentSelectors","decls","vars","consts","template","dependencies","i1","encapsulation","ContentSwitcherModule","ɵmod","ɵinj","imports","CommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-content-switcher.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, HostBinding, HostListener, Component, ContentChildren, NgModule } from '@angular/core';\nimport { isFocusInFirstItem, isFocusInLastItem } from 'carbon-components-angular/common';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass ContentSwitcherOption {\n    constructor(renderer, hostElement) {\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        /**\n         * Internal name for the option.\n         * Should be something that identifies the option to the application.\n         * Accessible from the `ContentSwitcher` `selected` emitter\n         */\n        this.name = \"option\";\n        /**\n         * Emits when the option is selected.\n         */\n        this.selected = new EventEmitter();\n        this.onClick = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.switcherClass = \"cds--content-switcher-btn\";\n        this.selectedClass = false;\n        this.role = \"tab\";\n        this.ariaSelected = false;\n        this.tabindex = \"-1\";\n        this._active = false;\n    }\n    /**\n     * Used to activate the option. Only one option may be `active` at a time\n     */\n    set active(value) {\n        this._active = value;\n        this.selectedClass = value;\n        this.ariaSelected = value;\n        this.tabindex = value ? \"0\" : \"-1\";\n    }\n    get active() {\n        return this._active;\n    }\n    hostClick(event) {\n        this.onClick.emit(event);\n        // skip setting and emitting if the option is already active\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this.selected.emit(true);\n    }\n    doFocus(event) {\n        this.onFocus.emit(event);\n        // skip setting and emitting if the option is already active\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this.selected.emit(true);\n    }\n    /*\n    * encapsulating the content in a span with cds--content-switcher__label class\n    * to mimic what is done in the react version\n    */\n    ngOnInit() {\n        const hostNativeElement = this.hostElement.nativeElement;\n        const spanWrapper = this.renderer.createElement(\"span\");\n        this.renderer.addClass(spanWrapper, \"cds--content-switcher__label\");\n        const hostChildren = [];\n        hostNativeElement.childNodes.forEach(node => hostChildren.push(node));\n        hostChildren.forEach(node => {\n            this.renderer.removeChild(hostNativeElement, node);\n            this.renderer.appendChild(spanWrapper, node);\n        });\n        this.renderer.appendChild(hostNativeElement, spanWrapper);\n    }\n}\nContentSwitcherOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherOption, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nContentSwitcherOption.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContentSwitcherOption, selector: \"[cdsContentOption], [ibmContentOption]\", inputs: { active: \"active\", name: \"name\" }, outputs: { selected: \"selected\", onClick: \"onClick\", onFocus: \"onFocus\" }, host: { listeners: { \"click\": \"hostClick($event)\", \"focus\": \"doFocus($event)\" }, properties: { \"class\": \"this.switcherClass\", \"class.cds--content-switcher--selected\": \"this.selectedClass\", \"attr.role\": \"this.role\", \"attr.aria-selected\": \"this.ariaSelected\", \"attr.tabIndex\": \"this.tabindex\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherOption, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsContentOption], [ibmContentOption]\"\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { active: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], onClick: [{\n                type: Output\n            }], onFocus: [{\n                type: Output\n            }], switcherClass: [{\n                type: HostBinding,\n                args: [\"class\"]\n            }], selectedClass: [{\n                type: HostBinding,\n                args: [\"class.cds--content-switcher--selected\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], ariaSelected: [{\n                type: HostBinding,\n                args: [\"attr.aria-selected\"]\n            }], tabindex: [{\n                type: HostBinding,\n                args: [\"attr.tabIndex\"]\n            }], hostClick: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], doFocus: [{\n                type: HostListener,\n                args: [\"focus\", [\"$event\"]]\n            }] } });\n\n/**\n * The content switcher can be used for toggling between distinct options.\n * Similar to tabs, but without an associated content panel.\n *\n * Get started with importing the module:\n *\n * ```typescript\n * import { ContentSwitcherModule } from 'carbon-components-angular';\n * ```\n *\n * ```html\n * <cds-content-switcher (selected)=\"selected($event)\">\n *\t\t<button cdsContentOption>First section</button>\n *\t\t<button cdsContentOption>Second section</button>\n *\t\t<button cdsContentOption>Third section</button>\n * </cds-content-switcher>\n * ```\n *\n * [See demo](../../?path=/story/components-content-switcher--basic)\n */\nclass ContentSwitcher {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.ariaLabel = \"content switcher\";\n        /**\n         * Set content switcher size\n         */\n        this.size = \"md\";\n        /**\n         * Emits the activated `ContentSwitcherOption`\n         */\n        this.selected = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const firstActive = this.options.find(option => option.active);\n        // delay setting active until the DOM has settled\n        if (!firstActive) {\n            setTimeout(() => this.options.first.active = true);\n        }\n        // subscribe to each item, emit when one is selected, and reset the active states\n        this.options.forEach(option => {\n            option.selected.subscribe((_) => {\n                const active = option;\n                this.options.forEach(option => {\n                    if (option !== active) {\n                        option.active = false;\n                    }\n                });\n                this.selected.emit(active);\n            });\n        });\n    }\n    hostkeys(event) {\n        const buttonList = Array.from(this.elementRef.nativeElement.querySelectorAll(\"[cdsContentOption], [ibmContentOption]\"));\n        switch (event.key) {\n            case \"ArrowRight\":\n                event.preventDefault();\n                if (!isFocusInLastItem(event, buttonList)) {\n                    const index = buttonList.findIndex(item => item === event.target);\n                    buttonList[index + 1].focus();\n                }\n                else {\n                    buttonList[0].focus();\n                }\n                break;\n            case \"ArrowLeft\":\n                event.preventDefault();\n                if (!isFocusInFirstItem(event, buttonList)) {\n                    const index = buttonList.findIndex(item => item === event.target);\n                    buttonList[index - 1].focus();\n                }\n                else {\n                    buttonList[buttonList.length - 1].focus();\n                }\n                break;\n            case \"Home\":\n                event.preventDefault();\n                buttonList[0].focus();\n                break;\n            case \"End\":\n                event.preventDefault();\n                buttonList[buttonList.length - 1].focus();\n                break;\n        }\n    }\n}\nContentSwitcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcher, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nContentSwitcher.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContentSwitcher, selector: \"cds-content-switcher, ibm-content-switcher\", inputs: { ariaLabel: \"ariaLabel\", size: \"size\" }, outputs: { selected: \"selected\" }, host: { listeners: { \"keydown\": \"hostkeys($event)\" } }, queries: [{ propertyName: \"options\", predicate: ContentSwitcherOption }], ngImport: i0, template: `\n\t\t<div\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"cds--content-switcher\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--content-switcher--sm': size === 'sm',\n\t\t\t\t'cds--content-switcher--md': size === 'md',\n\t\t\t\t'cds--content-switcher--lg': size === 'lg'\n\t\t\t}\"\n\t\t\trole=\"tablist\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcher, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-content-switcher, ibm-content-switcher\",\n                    template: `\n\t\t<div\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"cds--content-switcher\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--content-switcher--sm': size === 'sm',\n\t\t\t\t'cds--content-switcher--md': size === 'md',\n\t\t\t\t'cds--content-switcher--lg': size === 'lg'\n\t\t\t}\"\n\t\t\trole=\"tablist\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { ariaLabel: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], options: [{\n                type: ContentChildren,\n                args: [ContentSwitcherOption]\n            }], hostkeys: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\nclass ContentSwitcherModule {\n}\nContentSwitcherModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nContentSwitcherModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherModule, declarations: [ContentSwitcher,\n        ContentSwitcherOption], imports: [CommonModule], exports: [ContentSwitcher,\n        ContentSwitcherOption] });\nContentSwitcherModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContentSwitcherModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ContentSwitcher,\n                        ContentSwitcherOption\n                    ],\n                    exports: [\n                        ContentSwitcher,\n                        ContentSwitcherOption\n                    ],\n                    imports: [CommonModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ContentSwitcher, ContentSwitcherModule, ContentSwitcherOption };\n"],"x_google_ignoreList":[0]}