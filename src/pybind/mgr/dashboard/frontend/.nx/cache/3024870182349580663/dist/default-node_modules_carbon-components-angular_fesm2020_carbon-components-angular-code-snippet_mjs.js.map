{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-code-snippet_mjs.js","mappings":"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","names":["_c0","_c1","_c2","_c4","a0","_c5","a1","a2","a3","a4","a5","a6","_c6","tabindex","CodeSnippet_ng_container_0_ng_container_1_ng_container_1_Template","rf","ctx","i0","CodeSnippet_ng_container_0_ng_container_1_Template","buttonTemplate_r1","CodeSnippet_ng_container_0_ng_template_2_ng_container_3_Template","CodeSnippet_ng_container_0_ng_template_2_Template","ctx_r1","codeTemplate_r3","theme","CodeSnippet_ng_container_0_Template","noBtnInline_r4","hideCopyButton","CodeSnippet_ng_template_1_ng_container_2_span_1_Template","CodeSnippet_ng_template_1_ng_container_2_ng_template_2_Template","CodeSnippet_ng_template_1_ng_container_2_Template","multiSkeleton_r6","display","CodeSnippet_ng_template_1_pre_3_ng_container_4_Template","CodeSnippet_ng_template_1_pre_3_Template","_r7","handleScroll","CodeSnippet_ng_template_1_div_4_Template","CodeSnippet_ng_template_1_div_5_Template","CodeSnippet_ng_template_1_ng_container_6_ng_container_1_Template","CodeSnippet_ng_template_1_ng_container_6_Template","CodeSnippet_ng_template_1_button_7_Template","_r8","toggleSnippetExpansion","expanded","translations","SHOW_LESS","SHOW_MORE","SHOW_MORE_ICON","CodeSnippet_ng_template_1_Template","_r5","styles","CODE_SNIPPET_TEXT","disabled","skeleton","hasLeft","hasRight","isExpandable","CodeSnippet_ng_template_3_cds_icon_button_0_ng_container_1_ng_container_3_Template","CodeSnippet_ng_template_3_cds_icon_button_0_ng_container_1_Template","CodeSnippet_ng_template_3_cds_icon_button_0_ng_container_2_Template","CodeSnippet_ng_template_3_cds_icon_button_0_Template","_r9","$event","onCopyButtonClicked","showFeedback","feedbackText","copyButtonDescription","align","dropShadow","caret","highContrast","isOpen","enterDelayMs","leaveDelayMs","animating","COPY_CODE","CodeSnippet_ng_template_3_Template","CodeSnippet_ng_template_5_Template","SnippetType","single","multi","inline","CodeSnippet","BaseIconButton","constructor","i18n","eventService","super","this","rowHeightInPixel","get","CODE_SNIPPET","maxCollapsedNumberOfRows","minCollapsedNumberOfRows","maxExpandedNumberOfRows","minExpandedNumberOfRows","wrapText","COPIED","feedbackTimeout","hasExpandButton","hasRightOverflow","snippetClass","snippetSingleClass","snippetMultiClass","snippetDisabledClass","snippetInlineLightClass","ref","codeContent","nativeElement","codeContainer","scrollWidth","clientWidth","scrollLeft","horizontalOverflow","calculateContainerHeight","window","navigator","clipboard","writeText","code","innerText","textContent","then","setTimeout","ngOnInit","ngAfterViewInit","canExpand","on","height","getBoundingClientRect","ɵfac","__ngFactoryType__","i1","i2","ɵcmp","type","selectors","viewQuery","_t","first","hostVars","hostBindings","inputs","features","ngContentSelectors","decls","vars","consts","template","notInline_r10","dependencies","i3","i4","i5","encapsulation","CodeSnippetModule","ɵmod","ɵinj","imports","CommonModule","ButtonModule","I18nModule","UtilsModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-code-snippet.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, HostBinding, Input, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from 'carbon-components-angular/button';\nimport { BaseIconButton, ButtonModule } from 'carbon-components-angular/button';\nimport * as i1 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport * as i2 from 'carbon-components-angular/utils';\nimport { UtilsModule } from 'carbon-components-angular/utils';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\n\nvar SnippetType;\n(function (SnippetType) {\n    SnippetType[\"single\"] = \"single\";\n    SnippetType[\"multi\"] = \"multi\";\n    SnippetType[\"inline\"] = \"inline\";\n})(SnippetType || (SnippetType = {}));\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { CodeSnippetModule } from 'carbon-components-angular';\n * ```\n *\n * ```html\n * <cds-code-snippet>Code</cds-code-snippet>\n * ```\n *\n * [See demo](../../?path=/story/components-code-snippet--basic)\n */\nclass CodeSnippet extends BaseIconButton {\n    /**\n     * Creates an instance of CodeSnippet.\n     */\n    constructor(i18n, eventService) {\n        super();\n        this.i18n = i18n;\n        this.eventService = eventService;\n        this.rowHeightInPixel = 16;\n        /**\n         * It can be `\"single\"`, `\"multi\"` or `\"inline\"`\n         */\n        this.display = SnippetType.single;\n        this.translations = this.i18n.get().CODE_SNIPPET;\n        /**\n         * Set to `true` to hide copy button\n         */\n        this.hideCopyButton = false;\n        /**\n         * Set to `true` to disable the code snippet\n         */\n        this.disabled = false;\n        /**\n         * Specify the max number of rows to show when collapsed\n         * Default is `15`\n         */\n        this.maxCollapsedNumberOfRows = 15;\n        /**\n         * Specify the min number of rows to show when collapsed\n         * Default is `3`\n         */\n        this.minCollapsedNumberOfRows = 3;\n        /**\n         * Specify the max number of rows to show when expanded\n         * Default is `0`, hence all content will be visible when expanded\n         */\n        this.maxExpandedNumberOfRows = 0;\n        /**\n         * Specify the min number of rows to show when expanded\n         * Default is `16`, hence height of expanded row will be 16 * rowHeightInPixel (16) =  256px\n         */\n        this.minExpandedNumberOfRows = 16;\n        /**\n         * Set to `true` to wrap the text\n         */\n        this.wrapText = false;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * Set to `\"light\"` to apply the light style\n         */\n        this.theme = \"dark\";\n        /**\n         * Text displayed in the tooltip when user clicks button to copy code.\n         */\n        this.feedbackText = this.translations.COPIED;\n        /**\n         * Time in miliseconds to keep the feedback tooltip displayed.\n         * Defaults to 2 seconds\n         */\n        this.feedbackTimeout = 2000;\n        this.expanded = false;\n        this.skeleton = false;\n        this.styles = {};\n        this.showFeedback = false;\n        this.animating = false;\n        this.hasExpandButton = null;\n        this.isExpandable = false;\n        this.hasRightOverflow = false;\n        this.hasRight = false;\n        this.hasLeft = false;\n        this.dropShadow = false;\n    }\n    get snippetClass() {\n        return this.display !== SnippetType.inline;\n    }\n    get snippetSingleClass() {\n        return this.display === SnippetType.single;\n    }\n    get snippetMultiClass() {\n        return this.display === SnippetType.multi;\n    }\n    get snippetDisabledClass() {\n        return this.display !== \"inline\" && this.disabled;\n    }\n    get snippetInlineLightClass() {\n        return this.theme === \"light\";\n    }\n    handleScroll() {\n        if (this.skeleton) {\n            return;\n        }\n        let ref;\n        switch (this.display) {\n            case \"multi\":\n                ref = this.codeContent.nativeElement;\n                break;\n            case \"single\":\n                ref = this.codeContainer.nativeElement;\n                break;\n            default:\n                return;\n        }\n        if (ref) {\n            const { scrollWidth, clientWidth, scrollLeft } = ref;\n            const horizontalOverflow = scrollWidth > clientWidth;\n            this.hasLeft = horizontalOverflow && !!scrollLeft;\n            this.hasRight = horizontalOverflow && scrollLeft + clientWidth !== scrollWidth;\n        }\n    }\n    toggleSnippetExpansion() {\n        this.expanded = !this.expanded;\n        this.calculateContainerHeight();\n    }\n    onCopyButtonClicked() {\n        if (!this.disabled) {\n            window.navigator.clipboard\n                .writeText(this.code.nativeElement.innerText || this.code.nativeElement.textContent).then(() => {\n                this.showFeedback = true;\n                this.animating = true;\n                setTimeout(() => {\n                    this.showFeedback = false;\n                    this.animating = false;\n                }, this.feedbackTimeout);\n            });\n        }\n    }\n    ngOnInit() {\n        this.calculateContainerHeight();\n    }\n    ngAfterViewInit() {\n        this.canExpand();\n        this.handleScroll();\n        if (window) {\n            this.eventService.on(window, \"resize\", () => {\n                this.canExpand();\n                this.handleScroll();\n            });\n        }\n    }\n    calculateContainerHeight() {\n        if (this.display === \"multi\" && !this.skeleton) {\n            this.styles = {};\n            if (this.expanded) {\n                if (this.maxExpandedNumberOfRows > 0) {\n                    this.styles[\"max-height\"] = `${this.maxExpandedNumberOfRows * this.rowHeightInPixel}px`;\n                }\n                if (this.minExpandedNumberOfRows > 0) {\n                    this.styles[\"min-height\"] = `${this.minExpandedNumberOfRows * this.rowHeightInPixel}px`;\n                }\n            }\n            else {\n                if (this.maxCollapsedNumberOfRows > 0) {\n                    this.styles[\"max-height\"] = `${this.maxCollapsedNumberOfRows * this.rowHeightInPixel}px`;\n                }\n                if (this.minCollapsedNumberOfRows > 0) {\n                    this.styles[\"min-height\"] = `${this.minCollapsedNumberOfRows * this.rowHeightInPixel}px`;\n                }\n            }\n        }\n    }\n    canExpand() {\n        if (this.display === \"multi\" && !this.skeleton) {\n            const height = this.codeContent.nativeElement.getBoundingClientRect().height;\n            if (this.maxCollapsedNumberOfRows > 0 &&\n                (this.maxExpandedNumberOfRows <= 0 ||\n                    this.maxExpandedNumberOfRows > this.maxCollapsedNumberOfRows) &&\n                height > this.maxCollapsedNumberOfRows * this.rowHeightInPixel) {\n                this.isExpandable = true;\n            }\n            else {\n                this.isExpandable = false;\n            }\n            if (this.expanded &&\n                this.minExpandedNumberOfRows > 0 &&\n                height <= this.minExpandedNumberOfRows * this.rowHeightInPixel) {\n                this.isExpandable = false;\n            }\n        }\n    }\n}\nCodeSnippet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippet, deps: [{ token: i1.I18n }, { token: i2.EventService }], target: i0.ɵɵFactoryTarget.Component });\nCodeSnippet.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: CodeSnippet, selector: \"cds-code-snippet, ibm-code-snippet\", inputs: { display: \"display\", translations: \"translations\", copyButtonDescription: \"copyButtonDescription\", hideCopyButton: \"hideCopyButton\", disabled: \"disabled\", maxCollapsedNumberOfRows: \"maxCollapsedNumberOfRows\", minCollapsedNumberOfRows: \"minCollapsedNumberOfRows\", maxExpandedNumberOfRows: \"maxExpandedNumberOfRows\", minExpandedNumberOfRows: \"minExpandedNumberOfRows\", wrapText: \"wrapText\", theme: \"theme\", feedbackText: \"feedbackText\", feedbackTimeout: \"feedbackTimeout\", expanded: \"expanded\", skeleton: \"skeleton\" }, host: { properties: { \"class.cds--snippet\": \"this.snippetClass\", \"class.cds--snippet--single\": \"this.snippetSingleClass\", \"class.cds--snippet--multi\": \"this.snippetMultiClass\", \"class.cds--snippet--disabled\": \"this.snippetDisabledClass\", \"class.cds--snippet--light\": \"this.snippetInlineLightClass\", \"class.cds--snippet--wraptext\": \"this.wrapText\", \"class.cds--snippet--expand\": \"this.expanded\", \"class.cds--skeleton\": \"this.skeleton\" } }, viewQueries: [{ propertyName: \"code\", first: true, predicate: [\"code\"], descendants: true }, { propertyName: \"codeContent\", first: true, predicate: [\"codeContent\"], descendants: true }, { propertyName: \"codeContainer\", first: true, predicate: [\"codeContainer\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n\t\t<ng-container *ngIf=\"display === 'inline'; else notInline\">\n\t\t\t<ng-container *ngIf=\"!hideCopyButton; else noBtnInline\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"buttonTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t\t<ng-template #noBtnInline>\n\t\t\t\t<span\n\t\t\t\t\tclass=\"cds--snippet cds--snippet--inline cds--snippet--no-copy\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--snippet--light': theme === 'light'\n\t\t\t\t\t}\">\n\t\t\t\t\t<code #code>\n\t\t\t\t\t\t<ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container>\n\t\t\t\t\t</code>\n\t\t\t\t</span>\n\t\t\t</ng-template>\n\t\t</ng-container>\n\n\t\t<ng-template #notInline>\n\t\t\t<div\n\t\t\t\t#codeContainer\n\t\t\t\tclass=\"cds--snippet-container\"\n\t\t\t\t[attr.aria-label]=\"translations.CODE_SNIPPET_TEXT\"\n\t\t\t\t[attr.tabindex]=\"display === 'single' && !disabled ? '0' : null\"\n\t\t\t\t[attr.role]=\"display==='single' ? 'textarea' : null\"\n\t\t\t\t[ngStyle]=\"styles\"\n\t\t\t\t(scroll)=\"(display === 'single' ? handleScroll() : null)\">\n\t\t\t\t<ng-container *ngIf=\"skeleton\">\n\t\t\t\t\t<span *ngIf=\"display === 'single'; else multiSkeleton\"></span>\n\t\t\t\t\t<ng-template #multiSkeleton>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ng-container>\n\t\t\t\t<pre\n\t\t\t\t\t#codeContent\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\t(scroll)=\"(display === 'multi' ? handleScroll() : null)\"><code #code><ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container></code></pre>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"hasLeft\" class=\"cds--snippet__overflow-indicator--left\"></div>\n\t\t\t<div *ngIf=\"hasRight\" class=\"cds--snippet__overflow-indicator--right\"></div>\n\t\t\t<ng-container *ngIf=\"!hideCopyButton;\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"buttonTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t\t<button\n\t\t\t\t*ngIf=\"isExpandable\"\n\t\t\t\tclass=\"cds--btn cds--btn--ghost cds--btn--sm cds--snippet-btn--expand\"\n\t\t\t\t(click)=\"toggleSnippetExpansion()\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t<span class=\"cds--snippet-btn--text\">{{expanded ? translations.SHOW_LESS : translations.SHOW_MORE}}</span>\n\t\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\" class=\"cds--icon-chevron--down\" [attr.aria-label]=\"translations.SHOW_MORE_ICON\"></svg>\n\t\t\t</button>\n\t\t</ng-template>\n\n\t\t<ng-template #buttonTemplate>\n\t\t\t<cds-icon-button\n\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t[description]=\"showFeedback ? feedbackText : copyButtonDescription\"\n\t\t\t\t[align]=\"align\"\n\t\t\t\t[dropShadow]=\"dropShadow\"\n\t\t\t\t[caret]=\"caret\"\n\t\t\t\t[highContrast]=\"highContrast\"\n\t\t\t\t[isOpen]=\"isOpen\"\n\t\t\t\t[enterDelayMs]=\"enterDelayMs\"\n\t\t\t\t[leaveDelayMs]=\"leaveDelayMs\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tkind=\"primary\"\n\t\t\t\tsize=\"md\"\n\t\t\t\t(click)=\"onCopyButtonClicked($event)\"\n\t\t\t\t[buttonNgClass]=\"{\n\t\t\t\t\t'cds--snippet--light': theme === 'light',\n\t\t\t\t\t'cds--snippet--inline': display === 'inline',\n\t\t\t\t\t'cds--btn--icon-only': display !== 'inline',\n\t\t\t\t\t'cds--copy-btn': display !== 'inline',\n\t\t\t\t\t'cds--copy-btn--animating': animating,\n\t\t\t\t\t'cds--copy-btn--fade-in': showFeedback,\n\t\t\t\t\t'cds--copy-btn--fade-out': !showFeedback && animating,\n\t\t\t\t\t'cds--snippet cds--copy': true\n\t\t\t\t}\"\n\t\t\t\t[buttonAttributes]=\"{\n\t\t\t\t\t'aria-label': translations.COPY_CODE,\n\t\t\t\t\t'aria-live': 'polite',\n\t\t\t\t\t'tabindex': '0'\n\t\t\t\t}\">\n\t\t\t\t<ng-container *ngIf=\"display === 'inline'\">\n\t\t\t\t\t<code #code>\n\t\t\t\t\t\t<ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container>\n\t\t\t\t\t</code>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-container *ngIf=\"display !== 'inline'\">\n\t\t\t\t\t<svg cdsIcon=\"copy\" size=\"16\" class=\"cds--snippet__icon\"></svg>\n\t\t\t\t</ng-container>\n\t\t\t</cds-icon-button>\n\t\t</ng-template>\n\n\t\t<ng-template #codeTemplate>\n\t\t\t<ng-content></ng-content>\n\t\t</ng-template>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i4.IconButton, selector: \"cds-icon-button, ibm-icon-button\", inputs: [\"buttonNgClass\", \"buttonAttributes\", \"buttonId\", \"kind\", \"size\", \"type\", \"isExpressive\", \"disabled\", \"description\", \"showTooltipWhenDisabled\"], outputs: [\"click\", \"focus\", \"blur\", \"tooltipClick\"] }, { kind: \"directive\", type: i5.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippet, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-code-snippet, ibm-code-snippet\",\n                    template: `\n\t\t<ng-container *ngIf=\"display === 'inline'; else notInline\">\n\t\t\t<ng-container *ngIf=\"!hideCopyButton; else noBtnInline\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"buttonTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t\t<ng-template #noBtnInline>\n\t\t\t\t<span\n\t\t\t\t\tclass=\"cds--snippet cds--snippet--inline cds--snippet--no-copy\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--snippet--light': theme === 'light'\n\t\t\t\t\t}\">\n\t\t\t\t\t<code #code>\n\t\t\t\t\t\t<ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container>\n\t\t\t\t\t</code>\n\t\t\t\t</span>\n\t\t\t</ng-template>\n\t\t</ng-container>\n\n\t\t<ng-template #notInline>\n\t\t\t<div\n\t\t\t\t#codeContainer\n\t\t\t\tclass=\"cds--snippet-container\"\n\t\t\t\t[attr.aria-label]=\"translations.CODE_SNIPPET_TEXT\"\n\t\t\t\t[attr.tabindex]=\"display === 'single' && !disabled ? '0' : null\"\n\t\t\t\t[attr.role]=\"display==='single' ? 'textarea' : null\"\n\t\t\t\t[ngStyle]=\"styles\"\n\t\t\t\t(scroll)=\"(display === 'single' ? handleScroll() : null)\">\n\t\t\t\t<ng-container *ngIf=\"skeleton\">\n\t\t\t\t\t<span *ngIf=\"display === 'single'; else multiSkeleton\"></span>\n\t\t\t\t\t<ng-template #multiSkeleton>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ng-container>\n\t\t\t\t<pre\n\t\t\t\t\t#codeContent\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\t(scroll)=\"(display === 'multi' ? handleScroll() : null)\"><code #code><ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container></code></pre>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"hasLeft\" class=\"cds--snippet__overflow-indicator--left\"></div>\n\t\t\t<div *ngIf=\"hasRight\" class=\"cds--snippet__overflow-indicator--right\"></div>\n\t\t\t<ng-container *ngIf=\"!hideCopyButton;\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"buttonTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t\t<button\n\t\t\t\t*ngIf=\"isExpandable\"\n\t\t\t\tclass=\"cds--btn cds--btn--ghost cds--btn--sm cds--snippet-btn--expand\"\n\t\t\t\t(click)=\"toggleSnippetExpansion()\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t<span class=\"cds--snippet-btn--text\">{{expanded ? translations.SHOW_LESS : translations.SHOW_MORE}}</span>\n\t\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\" class=\"cds--icon-chevron--down\" [attr.aria-label]=\"translations.SHOW_MORE_ICON\"></svg>\n\t\t\t</button>\n\t\t</ng-template>\n\n\t\t<ng-template #buttonTemplate>\n\t\t\t<cds-icon-button\n\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t[description]=\"showFeedback ? feedbackText : copyButtonDescription\"\n\t\t\t\t[align]=\"align\"\n\t\t\t\t[dropShadow]=\"dropShadow\"\n\t\t\t\t[caret]=\"caret\"\n\t\t\t\t[highContrast]=\"highContrast\"\n\t\t\t\t[isOpen]=\"isOpen\"\n\t\t\t\t[enterDelayMs]=\"enterDelayMs\"\n\t\t\t\t[leaveDelayMs]=\"leaveDelayMs\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tkind=\"primary\"\n\t\t\t\tsize=\"md\"\n\t\t\t\t(click)=\"onCopyButtonClicked($event)\"\n\t\t\t\t[buttonNgClass]=\"{\n\t\t\t\t\t'cds--snippet--light': theme === 'light',\n\t\t\t\t\t'cds--snippet--inline': display === 'inline',\n\t\t\t\t\t'cds--btn--icon-only': display !== 'inline',\n\t\t\t\t\t'cds--copy-btn': display !== 'inline',\n\t\t\t\t\t'cds--copy-btn--animating': animating,\n\t\t\t\t\t'cds--copy-btn--fade-in': showFeedback,\n\t\t\t\t\t'cds--copy-btn--fade-out': !showFeedback && animating,\n\t\t\t\t\t'cds--snippet cds--copy': true\n\t\t\t\t}\"\n\t\t\t\t[buttonAttributes]=\"{\n\t\t\t\t\t'aria-label': translations.COPY_CODE,\n\t\t\t\t\t'aria-live': 'polite',\n\t\t\t\t\t'tabindex': '0'\n\t\t\t\t}\">\n\t\t\t\t<ng-container *ngIf=\"display === 'inline'\">\n\t\t\t\t\t<code #code>\n\t\t\t\t\t\t<ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container>\n\t\t\t\t\t</code>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-container *ngIf=\"display !== 'inline'\">\n\t\t\t\t\t<svg cdsIcon=\"copy\" size=\"16\" class=\"cds--snippet__icon\"></svg>\n\t\t\t\t</ng-container>\n\t\t\t</cds-icon-button>\n\t\t</ng-template>\n\n\t\t<ng-template #codeTemplate>\n\t\t\t<ng-content></ng-content>\n\t\t</ng-template>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i1.I18n }, { type: i2.EventService }]; }, propDecorators: { snippetClass: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet\"]\n            }], snippetSingleClass: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--single\"]\n            }], snippetMultiClass: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--multi\"]\n            }], snippetDisabledClass: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--disabled\"]\n            }], snippetInlineLightClass: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--light\"]\n            }], display: [{\n                type: Input\n            }], translations: [{\n                type: Input\n            }], copyButtonDescription: [{\n                type: Input\n            }], hideCopyButton: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], maxCollapsedNumberOfRows: [{\n                type: Input\n            }], minCollapsedNumberOfRows: [{\n                type: Input\n            }], maxExpandedNumberOfRows: [{\n                type: Input\n            }], minExpandedNumberOfRows: [{\n                type: Input\n            }], wrapText: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--wraptext\"]\n            }, {\n                type: Input\n            }], theme: [{\n                type: Input\n            }], feedbackText: [{\n                type: Input\n            }], feedbackTimeout: [{\n                type: Input\n            }], expanded: [{\n                type: HostBinding,\n                args: [\"class.cds--snippet--expand\"]\n            }, {\n                type: Input\n            }], skeleton: [{\n                type: HostBinding,\n                args: [\"class.cds--skeleton\"]\n            }, {\n                type: Input\n            }], code: [{\n                type: ViewChild,\n                args: [\"code\"]\n            }], codeContent: [{\n                type: ViewChild,\n                args: [\"codeContent\"]\n            }], codeContainer: [{\n                type: ViewChild,\n                args: [\"codeContainer\"]\n            }] } });\n\n// modules\nclass CodeSnippetModule {\n}\nCodeSnippetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCodeSnippetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippetModule, declarations: [CodeSnippet], imports: [CommonModule,\n        ButtonModule,\n        I18nModule,\n        UtilsModule,\n        IconModule], exports: [CodeSnippet] });\nCodeSnippetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippetModule, imports: [CommonModule,\n        ButtonModule,\n        I18nModule,\n        UtilsModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CodeSnippetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        CodeSnippet\n                    ],\n                    exports: [\n                        CodeSnippet\n                    ],\n                    imports: [\n                        CommonModule,\n                        ButtonModule,\n                        I18nModule,\n                        UtilsModule,\n                        IconModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodeSnippet, CodeSnippetModule, SnippetType };\n"],"x_google_ignoreList":[0]}