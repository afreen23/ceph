{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-structured--bcaf2f.js","mappings":"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","names":["_c0","ListColumn_span_0_Template","rf","ctx","i0","ListHeader_div_2_Template","_c1","ListRow_ng_container_1_Template","_r1","ctx_r1","handleFocus","$event","onChange","value","name","label","selected","_c2","_c4","a0","a1","a2","a3","ListColumn","constructor","this","skeleton","role","isHeaderColumn","isBodyColumn","nowrap","ɵfac","__ngFactoryType__","ɵcmp","type","selectors","hostVars","hostBindings","inputs","ngContentSelectors","decls","vars","consts","template","dependencies","i1","encapsulation","ListHeader","wrapper","selection","_skeleton","updateChildren","ngAfterContentInit","columns","forEach","column","toArray","child","contentQueries","dirIndex","_t","ListRow","change","EventEmitter","isFocused","focusClass","onclick","input","nativeElement","click","event","emit","viewQuery","first","outputs","i2","StructuredList","flushed","condensed","listCount","_","onTouched","setSelection","rowOrHeader","headers","rows","row","subscribe","writeValue","registerOnChange","fn","registerOnTouched","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","StructuredListModule","ɵmod","ɵinj","imports","CommonModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-structured-list.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Input, HostBinding, ContentChildren, EventEmitter, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * `ListColumn` represents a single column in a `StructuredList`.\n *\n * `ListColumn`s can be used in a `ListHeader` to specify the column headers, or in `ListRow`s to specify the column data.\n *\n * Example:\n * ```html\n * <cds-list-column nowrap=\"true\">Column 1</cds-list-column>\n * ```\n */\nclass ListColumn {\n    constructor() {\n        this.skeleton = false;\n        this.role = \"cell\";\n        this.isHeaderColumn = true;\n        this.isBodyColumn = true;\n        /**\n         * Applies `white-space: nowrap` to the content of this `ListColumn`\n         */\n        this.nowrap = false;\n    }\n}\nListColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });\nListColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ListColumn, selector: \"cds-list-column, ibm-list-column\", inputs: { skeleton: \"skeleton\", nowrap: \"nowrap\" }, host: { properties: { \"attr.role\": \"this.role\", \"class.cds--structured-list-th\": \"this.isHeaderColumn\", \"class.cds--structured-list-td\": \"this.isBodyColumn\", \"class.cds--structured-list-content--nowrap\": \"this.nowrap\" } }, ngImport: i0, template: `\n\t\t<span *ngIf=\"skeleton\"></span>\n\t\t<ng-content></ng-content>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-list-column, ibm-list-column\",\n                    template: `\n\t\t<span *ngIf=\"skeleton\"></span>\n\t\t<ng-content></ng-content>\n\t`\n                }]\n        }], propDecorators: { skeleton: [{\n                type: Input\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], isHeaderColumn: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-th\"]\n            }], isBodyColumn: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-td\"]\n            }], nowrap: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-content--nowrap\"]\n            }, {\n                type: Input\n            }] } });\n\n/**\n * `ListHeader` provides a container for the `ListColumn`s that make up the header of a structured list.\n *\n * Example:\n * ```html\n * \t<cds-list-header>\n *\t\t<cds-list-column nowrap=\"true\">Column 1</cds-list-column>\n *\t\t<cds-list-column nowrap=\"true\">Column 2</cds-list-column>\n *\t\t<cds-list-column>Column 3</cds-list-column>\n *\t</cds-list-header>\n * ```\n */\nclass ListHeader {\n    constructor() {\n        this.wrapper = true;\n        this.role = \"rowgroup\";\n        /**\n         * Set by the containing `StructuredList`. Adds a dummy header for the selection column when set to true.\n         */\n        this.selection = false;\n        this._skeleton = false;\n    }\n    set skeleton(value) {\n        this._skeleton = value;\n        this.updateChildren();\n    }\n    get skeleton() {\n        return this._skeleton;\n    }\n    ngAfterContentInit() {\n        this.columns.forEach(column => {\n            column.isBodyColumn = false;\n            column.isHeaderColumn = true;\n        });\n        this.updateChildren();\n    }\n    updateChildren() {\n        if (this.columns) {\n            this.columns.toArray().forEach(child => child.skeleton = this.skeleton);\n        }\n    }\n}\nListHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListHeader, deps: [], target: i0.ɵɵFactoryTarget.Component });\nListHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ListHeader, selector: \"cds-list-header, ibm-list-header\", inputs: { skeleton: \"skeleton\" }, host: { properties: { \"class.cds--structured-list-thead\": \"this.wrapper\", \"attr.role\": \"this.role\" } }, queries: [{ propertyName: \"columns\", predicate: ListColumn }], ngImport: i0, template: `\n\t\t<div class=\"cds--structured-list-row cds--structured-list-row--header-row\" role=\"row\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"selection\" class=\"cds--structured-list-th\"></div>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListHeader, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-list-header, ibm-list-header\",\n                    template: `\n\t\t<div class=\"cds--structured-list-row cds--structured-list-row--header-row\" role=\"row\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"selection\" class=\"cds--structured-list-th\"></div>\n\t\t</div>\n\t`\n                }]\n        }], propDecorators: { wrapper: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-thead\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], skeleton: [{\n                type: Input\n            }], columns: [{\n                type: ContentChildren,\n                args: [ListColumn]\n            }] } });\n\n/**\n * `ListRow` provides a container for the `ListColumn`s that make up the body of a structured list.\n *\n * Example:\n * ```html\n * \t<cds-list-row>\n *\t\t<cds-list-column>Row 1</cds-list-column>\n *\t\t<cds-list-column nowrap=\"true\">Row One</cds-list-column>\n *\t\t<cds-list-column>\n *\t\t\tLorem ipsum dolor sit amet,\n *\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t</cds-list-column>\n *\t</cds-list-row>\n * ```\n */\nclass ListRow {\n    constructor() {\n        this.selected = false;\n        /**\n         * Internal event used to notify the containing `StructuredList` of changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Set by the containing `StructuredList`. Enables or disables row level selection features.\n         */\n        this.selection = false;\n        /**\n         * Set by the containing `StructuredList`. When `selection = true`, used for the `name` property on the radio input.\n         */\n        this.name = \"list\";\n        this.wrapper = true;\n        this.role = \"row\";\n        this.isFocused = false;\n    }\n    get focusClass() {\n        return this.isFocused;\n    }\n    ngAfterContentInit() {\n        this.columns.forEach(column => {\n            column.isBodyColumn = true;\n            column.isHeaderColumn = false;\n        });\n    }\n    onclick() {\n        if (this.selection) {\n            this.input.nativeElement.click();\n        }\n    }\n    onChange(event) {\n        this.change.emit(event);\n    }\n    handleFocus(isFocused) {\n        if (this.selection) {\n            this.isFocused = isFocused;\n            if (this.isFocused) {\n                this.input.nativeElement.click();\n            }\n        }\n    }\n}\nListRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nListRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ListRow, selector: \"cds-list-row, ibm-list-row\", inputs: { selected: \"selected\", label: \"label\", value: \"value\" }, outputs: { change: \"change\" }, host: { listeners: { \"click\": \"onclick()\" }, properties: { \"class.cds--structured-list-row--focused-within\": \"this.focusClass\", \"class.cds--structured-list-row--selected\": \"this.selected\", \"attr.aria-label\": \"this.label\", \"class.cds--structured-list-row\": \"this.wrapper\", \"attr.role\": \"this.role\" } }, queries: [{ propertyName: \"columns\", predicate: ListColumn }], viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true }], ngImport: i0, template: `\n\t\t<ng-content></ng-content>\n\t\t<ng-container *ngIf=\"selection\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\tclass=\"cds--structured-list-input cds--visually-hidden\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[title]=\"label\"\n\t\t\t\t(focus)=\"handleFocus(true)\"\n\t\t\t\t(blur)=\"handleFocus(false)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t[checked]=\"selected\"/>\n\t\t\t<div class=\"cds--structured-list-td\">\n\t\t\t\t<svg cdsIcon=\"checkmark--filled\" size=\"16\" class=\"cds--structured-list-svg\"></svg>\n\t\t\t</div>\n\t\t</ng-container>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ListRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-list-row, ibm-list-row\",\n                    template: `\n\t\t<ng-content></ng-content>\n\t\t<ng-container *ngIf=\"selection\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\tclass=\"cds--structured-list-input cds--visually-hidden\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[title]=\"label\"\n\t\t\t\t(focus)=\"handleFocus(true)\"\n\t\t\t\t(blur)=\"handleFocus(false)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t[checked]=\"selected\"/>\n\t\t\t<div class=\"cds--structured-list-td\">\n\t\t\t\t<svg cdsIcon=\"checkmark--filled\" size=\"16\" class=\"cds--structured-list-svg\"></svg>\n\t\t\t</div>\n\t\t</ng-container>\n\t`\n                }]\n        }], propDecorators: { focusClass: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-row--focused-within\"]\n            }], selected: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"class.cds--structured-list-row--selected\"]\n            }], label: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"attr.aria-label\"]\n            }], value: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], wrapper: [{\n                type: HostBinding,\n                args: [\"class.cds--structured-list-row\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], columns: [{\n                type: ContentChildren,\n                args: [ListColumn]\n            }], input: [{\n                type: ViewChild,\n                args: [\"input\"]\n            }], onclick: [{\n                type: HostListener,\n                args: [\"click\"]\n            }] } });\n\n/**\n * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.\n *\n * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.\n *\n * Get started with importing the module:\n *\n * ```typescript\n * import { StructuredListModule } from 'carbon-components-angular';\n * ```\n *\n * ```html\n *\t<cds-structured-list>\n *\t\t<cds-list-header>\n *\t\t\t<cds-list-column nowrap=\"true\">Column 1</cds-list-column>\n *\t\t\t<cds-list-column nowrap=\"true\">Column 2</cds-list-column>\n *\t\t\t<cds-list-column>Column 3</cds-list-column>\n *\t\t</cds-list-header>\n *\t\t<cds-list-row>\n *\t\t\t<cds-list-column>Row 1</cds-list-column>\n *\t\t\t<cds-list-column nowrap=\"true\">Row One</cds-list-column>\n *\t\t\t<cds-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</cds-list-column>\n *\t\t</cds-list-row>\n *\t\t<cds-list-row>\n *\t\t\t<cds-list-column>Row 2</cds-list-column>\n *\t\t\t<cds-list-column nowrap=\"true\">Row Two</cds-list-column>\n *\t\t\t<cds-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</cds-list-column>\n *\t\t</cds-list-row>\n *\t</cds-structured-list>\n * ```\n *\n * [See demo](../../?path=/story/components-structured-list--basic)\n */\nclass StructuredList {\n    constructor() {\n        /**\n         * Set to `true` to enable radio like selection of the rows.\n         */\n        this.selection = false;\n        /**\n         * Set to `true` to align content with margin\n         */\n        this.flushed = false;\n        /**\n         * Set to `true` to apply a condensed style to the headers and rows.\n         */\n        this.condensed = false;\n        /**\n         * Used when `selection = true` as the row radio group `name`\n         */\n        this.name = `structured-list-${StructuredList.listCount++}`;\n        /**\n         * Emits an event when the row selection changes.\n         *\n         * Emits an object that looks like:\n         * ```javascript\n         * {\n         * \tvalue: \"something\",\n         * \tselected: true,\n         * \tname: \"structured-list-1\"\n         * }\n         * ```\n         */\n        this.selected = new EventEmitter();\n        this._skeleton = false;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.\n     */\n    set skeleton(value) {\n        this._skeleton = value;\n        this.updateChildren();\n    }\n    /**\n     * Returns the skeleton value in the `StructuredList` if there is one.\n     */\n    get skeleton() {\n        return this._skeleton;\n    }\n    ngAfterContentInit() {\n        const setSelection = (rowOrHeader) => {\n            rowOrHeader.selection = this.selection;\n        };\n        this.headers.forEach(setSelection);\n        this.rows.forEach(row => {\n            setSelection(row);\n            row.name = this.name;\n            row.change.subscribe(() => {\n                this.selected.emit({\n                    value: row.value,\n                    selected: row.selected,\n                    name: this.name\n                });\n                this.onChange(row.value);\n                this.writeValue(row.value);\n            });\n        });\n        this.updateChildren();\n    }\n    writeValue(value) {\n        if (!this.rows) {\n            return;\n        }\n        this.rows.forEach(row => {\n            if (row.value === value) {\n                row.selected = true;\n            }\n            else {\n                row.selected = false;\n            }\n        });\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    updateChildren() {\n        if (this.headers) {\n            this.headers.toArray().forEach(child => child.skeleton = this.skeleton);\n        }\n    }\n}\n/**\n * A counter to provide unique default values.\n */\nStructuredList.listCount = 0;\nStructuredList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredList, deps: [], target: i0.ɵɵFactoryTarget.Component });\nStructuredList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: StructuredList, selector: \"cds-structured-list, ibm-structured-list\", inputs: { selection: \"selection\", flushed: \"flushed\", condensed: \"condensed\", name: \"name\", skeleton: \"skeleton\" }, outputs: { selected: \"selected\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: StructuredList,\n            multi: true\n        }\n    ], queries: [{ propertyName: \"rows\", predicate: ListRow }, { propertyName: \"headers\", predicate: ListHeader }], ngImport: i0, template: `\n\t\t<div\n\t\t\tclass=\"cds--structured-list\"\n\t\t\trole=\"table\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--structured-list--flush': flushed,\n\t\t\t\t'cds--structured-list--selection': selection,\n\t\t\t\t'cds--structured-list--condensed': condensed,\n\t\t\t\t'cds--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content select=\"cds-list-header,ibm-list-header\"></ng-content>\n\t\t\t<div class=\"cds--structured-list-tbody\" role=\"rowgroup\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredList, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-structured-list, ibm-structured-list\",\n                    template: `\n\t\t<div\n\t\t\tclass=\"cds--structured-list\"\n\t\t\trole=\"table\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--structured-list--flush': flushed,\n\t\t\t\t'cds--structured-list--selection': selection,\n\t\t\t\t'cds--structured-list--condensed': condensed,\n\t\t\t\t'cds--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content select=\"cds-list-header,ibm-list-header\"></ng-content>\n\t\t\t<div class=\"cds--structured-list-tbody\" role=\"rowgroup\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: StructuredList,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { selection: [{\n                type: Input\n            }], flushed: [{\n                type: Input\n            }], condensed: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], rows: [{\n                type: ContentChildren,\n                args: [ListRow]\n            }], headers: [{\n                type: ContentChildren,\n                args: [ListHeader]\n            }] } });\n\nclass StructuredListModule {\n}\nStructuredListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nStructuredListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredListModule, declarations: [StructuredList,\n        ListRow,\n        ListHeader,\n        ListColumn], imports: [CommonModule,\n        IconModule], exports: [StructuredList,\n        ListRow,\n        ListHeader,\n        ListColumn] });\nStructuredListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredListModule, imports: [CommonModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: StructuredListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        StructuredList,\n                        ListRow,\n                        ListHeader,\n                        ListColumn\n                    ],\n                    exports: [\n                        StructuredList,\n                        ListRow,\n                        ListHeader,\n                        ListColumn\n                    ],\n                    imports: [\n                        CommonModule,\n                        IconModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ListColumn, ListHeader, ListRow, StructuredList, StructuredListModule };\n"],"x_google_ignoreList":[0]}