{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-dropdown_mjs.js","mappings":"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","names":["_a","PLACEMENTS","LEFT","RIGHT","TOP","BOTTOM","defaultPositions","referenceOffset","target","referenceRect","top","Math","round","offsetHeight","height","left","offsetWidth","width","windowRef","window","innerHeight","scrollY","innerWidth","scrollX","Position","positions","this","Object","assign","prototype","getRelativeOffset","offsets","offsetLeft","offsetTop","offsetParent","getComputedStyle","position","getAbsoluteOffset","currentNode","margins","computed","marginLeft","marginTop","parseInt","targetRect","getBoundingClientRect","relativeRect","document","body","findRelative","reference","placement","calculatePosition","findAbsolute","findPosition","offsetFunction","bind","findPositionAt","offset","getPlacementBox","targetBottom","targetRight","bottom","right","addOffset","setElement","element","style","findBestPlacement","placements","containerFunction","positionFunction","_this","defaultContainerFunction","weightedPlacements","map","pos","box","hiddenHeight","hiddenWidth","container","area","weight","sort","a","b","findBestPlacementAt","_","console","error","__WEBPACK_DEFAULT_EXPORT__","_c0","_c1","_c3","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","a11","a12","a13","a14","a15","_c4","_c5","_c6","_c7","_c8","Dropdown_label_0_ng_container_1_Template","rf","ctx","i0","ctx_r1","label","Dropdown_label_0_2_ng_template_0_Template","Dropdown_label_0_2_Template","Dropdown_label_0_Template","id","disabled","hideLabel","isTemplate","Dropdown_div_2_Template","Dropdown_div_5_Template","_r3","clearSelected","clearText","getSelectedCount","Dropdown_span_6_Template","getDisplayStringValue","Dropdown_7_ng_template_0_Template","Dropdown_7_Template","getRenderTemplateContext","displayValue","Dropdown__svg_svg_9_Template","menuIsClosed","menuButtonLabel","Dropdown__svg_svg_10_Template","Dropdown__svg_svg_11_Template","Dropdown_ng_content_14_Template","Dropdown_hr_15_Template","Dropdown_div_16_ng_container_1_Template","helperText","Dropdown_div_16_2_ng_template_0_Template","Dropdown_div_16_2_Template","Dropdown_div_16_Template","Dropdown_div_17_ng_container_1_Template","invalidText","Dropdown_div_17_2_ng_template_0_Template","Dropdown_div_17_2_Template","Dropdown_div_17_Template","Dropdown_div_18_ng_container_1_Template","warnText","Dropdown_div_18_2_ng_template_0_Template","Dropdown_div_18_2_Template","Dropdown_div_18_Template","_c9","_c10","_c11","_c12","item","DropdownList_li_2_div_3_Template","item_r3","$implicit","selected","content","DropdownList_li_2_ng_container_4_Template","DropdownList_li_2__svg_svg_5_Template","DropdownList_li_2_6_ng_template_0_Template","DropdownList_li_2_6_Template","ctx_r3","listTpl","DropdownList_li_2_Template","_r2","$event","doClick","i_r5","index","getItemId","highlightedItem","showTitles","type","AbstractDropdownView","constructor","size","items","value","getNextItem","hasNextElement","getNextElement","getPrevItem","hasPrevElement","getPrevElement","getSelected","getCurrentItem","getCurrentElement","getListItems","propagateSelected","filterBy","initFocus","onItemsReady","subcription","reorderSelected","moveFocus","ɵfac","__ngFactoryType__","ɵdir","selectors","inputs","outputs","select","blurIntent","defaultOffset","DropdownService","placeholderService","animationFrameService","animationFrameSubscription","Subscription","_offset","appendToBody","parentRef","menuRef","classList","display","dropdownWrapper","createElement","className","appendChild","hasPlaceholderRef","appendElement","menuInstance","tick","subscribe","positionDropdown","appendToDropdown","hostRef","instance","menu","firstElementChild","unsubscribe","hasElement","removeElement","contains","removeChild","updatePosition","ngOnDestroy","leftOffset","boxMenu","querySelector","documentElement","clientWidth","closestMenuWithPos","closestAttr","parentElement","topPos","leftPos","i1","i2","ɵprov","token","factory","Dropdown","elementRef","i18n","dropdownService","elementService","dropdownCount","placeholder","get","DROPDOWN","CLEAR","theme","readonly","skeleton","inline","disableArrowKeys","invalid","warn","appendInline","selectionFeedback","OPEN","selectedLabel","SELECTED","EventEmitter","onClose","close","hostClass","hostWrapperClass","fluid","_dropUp","noop","_noop","outsideClick","_outsideClick","outsideKey","_outsideKey","keyboardNav","_keyboardNav","visibilitySubscription","onTouchedCallback","_isFocused","_writtenValue","propagateChange","fluidInvalidClass","fluidFocusClass","writtenValue","val","length","ngOnInit","view","ngAfterContentInit","writeValue","isUpdate","event","Array","isArray","closeMenu","itemValueKey","values","checkForReorder","emit","ngAfterViewInit","hasScrollableParents","nativeElement","_appendToDropdown","newValue","find","newValues","v","push","onBlur","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","onKeyDown","key","stopImmediatePropagation","preventDefault","dropdownButton","focus","openMenu","dropdownMenu","shiftKey","closedDropdownNavigation","isRenderString","of","valueSelected","dispatchEvent","KeyboardEvent","bubbles","cancelable","removeEventListener","_appendToBody","lightClass","expandedClass","addEventListener","_shouldDropUp","menuRect","getScrollableParents","reduce","shouldDropUp","parent","parentRect","isBelowParent","visibility","visible","setTimeout","dropUp","undefined","disableScroll","toggleMenu","TemplateRef","handleFocus","topAfterReopen","i1$1","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostVars","hostBindings","scrollableContainer","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","ngContentSelectors","decls","vars","consts","template","_r1","stopPropagation","dependencies","i4","i5","encapsulation","DropdownList","appRef","ariaLabel","DROPDOWN_LIST","LABEL","scroll","listId","listCount","displayItems","_items","isObservable","_itemsSubscription","_itemsReady","Observable","observer","updateList","next","complete","_originalItems","findIndex","setupFocusObservable","doEmitSelect","focusJump","updateIndex","query","filter","toLowerCase","includes","list","elList","from","querySelectorAll","watchFocusJump","elements","fromEvent","pipe","debounceTime","ev","el","itemEl","textContent","trim","startsWith","elemList","listElementList","toArray","i","name","JSON","stringify","selectedNewItems","newItem","tempNewItem","oldItem","tempOldItem","selectedNewItem","indexOf","navigateList","some","option","scrollIntoView","block","otherItem","onItemFocus","add","tabIndex","onItemBlur","remove","emitScroll","customScrollEvent","atTop","srcElement","scrollTop","atBottom","scrollHeight","clientHeight","ScrollableList","nScrollableList","scrollEnabled","scrollBy","canScrollUp","canScrollDown","ngOnChanges","changes","currentValue","overflow","scrollUpTarget","scrollDownTarget","updateScrollHeight","checkScrollArrows","clearInterval","hoverScrollInterval","onHoverUp","onHoverDown","containerRect","innerHeightDiff","scrollUpHeight","scrollDownHeight","scrollTopMax","onWheel","deltaY","onTouchStart","touches","lastTouch","clientY","onTouchMove","touch","hoverScrollBy","hovering","amount","setInterval","exportAs","DropdownModule","ɵmod","ɵinj","providers","imports","CommonModule","FormsModule","I18nModule","PlaceholderModule","UtilsModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/node_modules/@carbon/utils-position/index.js","./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-dropdown.mjs"],"sourcesContent":["/**\n * Utilites to manipulate the position of elements relative to other elements\n */\nvar _a;\nexport var PLACEMENTS;\n(function (PLACEMENTS) {\n    PLACEMENTS[\"LEFT\"] = \"left\";\n    PLACEMENTS[\"RIGHT\"] = \"right\";\n    PLACEMENTS[\"TOP\"] = \"top\";\n    PLACEMENTS[\"BOTTOM\"] = \"bottom\";\n})(PLACEMENTS || (PLACEMENTS = {}));\nexport var defaultPositions = (_a = {},\n    _a[PLACEMENTS.LEFT] = function (referenceOffset, target, referenceRect) { return ({\n        top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),\n        left: Math.round(referenceOffset.left - target.offsetWidth)\n    }); },\n    _a[PLACEMENTS.RIGHT] = function (referenceOffset, target, referenceRect) { return ({\n        top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),\n        left: Math.round(referenceOffset.left + referenceRect.width)\n    }); },\n    _a[PLACEMENTS.TOP] = function (referenceOffset, target, referenceRect) { return ({\n        top: Math.round(referenceOffset.top - target.offsetHeight),\n        left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)\n    }); },\n    _a[PLACEMENTS.BOTTOM] = function (referenceOffset, target, referenceRect) { return ({\n        top: Math.round(referenceOffset.top + referenceRect.height),\n        left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)\n    }); },\n    _a);\nvar windowRef = typeof window !== \"undefined\" ? window : {\n    innerHeight: 0,\n    scrollY: 0,\n    innerWidth: 0,\n    scrollX: 0\n};\nvar Position = /** @class */ (function () {\n    function Position(positions) {\n        if (positions === void 0) { positions = {}; }\n        this.positions = defaultPositions;\n        this.positions = Object.assign({}, defaultPositions, positions);\n    }\n    Position.prototype.getRelativeOffset = function (target) {\n        // start with the initial element offsets\n        var offsets = {\n            left: target.offsetLeft,\n            top: target.offsetTop\n        };\n        // get each static (i.e. not absolute or relative) offsetParent and sum the left/right offsets\n        while (target.offsetParent && getComputedStyle(target.offsetParent).position === \"static\") {\n            offsets.left += target.offsetLeft;\n            offsets.top += target.offsetTop;\n            target = target.offsetParent;\n        }\n        return offsets;\n    };\n    Position.prototype.getAbsoluteOffset = function (target) {\n        var currentNode = target;\n        var margins = {\n            top: 0,\n            left: 0\n        };\n        // searches for containing elements with additional margins\n        while (currentNode.offsetParent) {\n            var computed = getComputedStyle(currentNode.offsetParent);\n            // find static elements with additional margins\n            // since they tend to throw off our positioning\n            // (usually this is just the body)\n            if (computed.position === \"static\" &&\n                computed.marginLeft &&\n                computed.marginTop) {\n                if (parseInt(computed.marginTop, 10)) {\n                    margins.top += parseInt(computed.marginTop, 10);\n                }\n                if (parseInt(computed.marginLeft, 10)) {\n                    margins.left += parseInt(computed.marginLeft, 10);\n                }\n            }\n            currentNode = currentNode.offsetParent;\n        }\n        var targetRect = target.getBoundingClientRect();\n        var relativeRect = document.body.getBoundingClientRect();\n        return {\n            top: targetRect.top - relativeRect.top + margins.top,\n            left: targetRect.left - relativeRect.left + margins.left\n        };\n    };\n    // finds the position relative to the `reference` element\n    Position.prototype.findRelative = function (reference, target, placement) {\n        var referenceOffset = this.getRelativeOffset(reference);\n        var referenceRect = reference.getBoundingClientRect();\n        return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n    };\n    Position.prototype.findAbsolute = function (reference, target, placement) {\n        var referenceOffset = this.getAbsoluteOffset(reference);\n        var referenceRect = reference.getBoundingClientRect();\n        return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n    };\n    Position.prototype.findPosition = function (reference, target, placement, offsetFunction) {\n        if (offsetFunction === void 0) { offsetFunction = this.getAbsoluteOffset.bind(this); }\n        var referenceOffset = offsetFunction(reference);\n        var referenceRect = reference.getBoundingClientRect();\n        return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n    };\n    Position.prototype.findPositionAt = function (offset, target, placement) {\n        return this.calculatePosition(offset, { top: 0, left: 0, height: 0, width: 0 }, target, placement);\n    };\n    /**\n     * Get the dimensions of an element from an AbsolutePosition and a reference element\n     */\n    Position.prototype.getPlacementBox = function (target, position) {\n        var targetBottom = target.offsetHeight + position.top;\n        var targetRight = target.offsetWidth + position.left;\n        return {\n            top: position.top,\n            bottom: targetBottom,\n            left: position.left,\n            right: targetRight\n        };\n    };\n    Position.prototype.addOffset = function (position, top, left) {\n        if (top === void 0) { top = 0; }\n        if (left === void 0) { left = 0; }\n        return Object.assign({}, position, {\n            top: position.top + top,\n            left: position.left + left\n        });\n    };\n    Position.prototype.setElement = function (element, position) {\n        element.style.top = position.top + \"px\";\n        element.style.left = position.left + \"px\";\n    };\n    Position.prototype.findBestPlacement = function (reference, target, placements, containerFunction, positionFunction) {\n        var _this = this;\n        if (containerFunction === void 0) { containerFunction = this.defaultContainerFunction.bind(this); }\n        if (positionFunction === void 0) { positionFunction = this.findPosition.bind(this); }\n        /**\n         * map over the array of placements and weight them based on the percentage of visible area\n         * where visible area is defined as the area not obscured by the window borders\n         */\n        var weightedPlacements = placements.map(function (placement) {\n            var pos = positionFunction(reference, target, placement);\n            var box = _this.getPlacementBox(target, pos);\n            var hiddenHeight = 0;\n            var hiddenWidth = 0;\n            var container = containerFunction();\n            // the element is exceeding from top or bottom of its container\n            if (box.top < container.top) {\n                hiddenHeight = container.top - box.top;\n            }\n            else if (box.bottom > container.height) {\n                hiddenHeight = box.bottom - container.height;\n            }\n            // the element is exceeding from left or right of its container\n            if (box.left < container.left) {\n                hiddenWidth = container.left - box.left;\n            }\n            else if (box.right > container.width) {\n                hiddenWidth = box.right - container.width;\n            }\n            // if one of the hidden dimensions is 0 but the other is > 0\n            // we want to have a positive area, so setting the null one to 1\n            if (hiddenHeight && !hiddenWidth) {\n                hiddenWidth = 1;\n            }\n            else if (hiddenWidth && !hiddenHeight) {\n                hiddenHeight = 1;\n            }\n            var area = target.offsetHeight * target.offsetWidth;\n            var hiddenArea = hiddenHeight * hiddenWidth;\n            // if visibleArea is 0 it means the element is fully outside container bounds\n            // and visiblePercent will then be 0\n            var visibleArea = area - hiddenArea;\n            var visiblePercent = visibleArea / area;\n            return {\n                placement: placement,\n                weight: visiblePercent\n            };\n        });\n        // sort the placements from best to worst\n        weightedPlacements.sort(function (a, b) { return b.weight - a.weight; });\n        // pick the best!\n        return weightedPlacements[0].placement;\n    };\n    Position.prototype.findBestPlacementAt = function (offset, target, placements, containerFunction) {\n        var _this = this;\n        if (containerFunction === void 0) { containerFunction = this.defaultContainerFunction.bind(this); }\n        var positionAt = function (_, target, placement) {\n            return _this.findPositionAt(offset, target, placement);\n        };\n        return this.findBestPlacement(null, target, placements, containerFunction, positionAt);\n    };\n    Position.prototype.defaultContainerFunction = function () {\n        return {\n            // we go with window here, because that's going to be the simple/common case\n            top: 0,\n            left: 0,\n            height: windowRef.innerHeight,\n            width: windowRef.innerWidth\n        };\n    };\n    Position.prototype.calculatePosition = function (referenceOffset, referenceRect, target, placement) {\n        if (this.positions[placement]) {\n            return this.positions[placement](referenceOffset, target, referenceRect);\n        }\n        console.error(\"No function found for placement, defaulting to 0,0\");\n        return { left: 0, top: 0 };\n    };\n    return Position;\n}());\nexport { Position };\nexport var position = new Position();\nexport default Position;\n","import * as i0 from '@angular/core';\nimport { Directive, Input, Output, Injectable, EventEmitter, TemplateRef, Component, HostBinding, ContentChild, ViewChild, HostListener, ViewChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subscription, of, fromEvent, isObservable, Observable } from 'rxjs';\nimport * as i2 from 'carbon-components-angular/utils';\nimport { closestAttr, hasScrollableParents, getScrollableParents, UtilsModule } from 'carbon-components-angular/utils';\nimport * as i1$1 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport { position } from '@carbon/utils-position';\nimport * as i1 from 'carbon-components-angular/placeholder';\nimport { PlaceholderModule } from 'carbon-components-angular/placeholder';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { debounceTime, map, filter, first } from 'rxjs/operators';\n\n/**\n * A component that intends to be used within `Dropdown` must provide an implementation that extends this base class.\n * It also must provide the base class in the `@Component` meta-data.\n * ex: `providers: [{provide: AbstractDropdownView, useExisting: forwardRef(() => MyDropdownView)}]`\n */\nclass AbstractDropdownView {\n    constructor() {\n        /**\n         * Specifies whether or not the `DropdownList` supports selecting multiple items as opposed to single\n         * item selection.\n         */\n        this.type = \"single\";\n        /**\n         * Specifies the render size of the items within the `AbstractDropdownView`.\n         */\n        this.size = \"md\";\n    }\n    /**\n     * The items to be displayed in the list within the `AbstractDropDownView`.\n     */\n    set items(value) { }\n    get items() { return; }\n    /**\n     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n     */\n    getNextItem() { return; }\n    /**\n     * Returns a boolean if the currently selected item is preceded by another\n     */\n    hasNextElement() { return; }\n    /**\n     * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n     */\n    getNextElement() { return; }\n    /**\n     * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n     */\n    getPrevItem() { return; }\n    /**\n     * Returns a boolean if the currently selected item is followed by another\n     */\n    hasPrevElement() { return; }\n    /**\n     * Returns the `HTMLElement` for the item that precedes the selected item.\n     */\n    getPrevElement() { return; }\n    /**\n     * Returns the selected leaf level item(s) within the `DropdownList`.\n     */\n    getSelected() { return; }\n    /**\n     * Returns the `ListItem` that is selected within `DropdownList`.\n     */\n    getCurrentItem() { return; }\n    /**\n     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n     */\n    getCurrentElement() { return; }\n    /**\n     * Guaranteed to return the current items as an Array.\n     */\n    getListItems() { return; }\n    /**\n     * Transforms array input list of items to the correct state by updating the selected item(s).\n     */\n    propagateSelected(value) { }\n    /**\n     *\n     * @param value value to filter the list by\n     */\n    filterBy(value) { }\n    /**\n     * Initializes focus in the list\n     * In most cases this just calls `getCurrentElement().focus()`\n     */\n    initFocus() { }\n    /**\n     * Subscribe the function passed to an internal observable that will resolve once the items are ready\n     */\n    onItemsReady(subcription) { }\n    /**\n     * Reorder selected items bringing them to the top of the list\n     */\n    reorderSelected(moveFocus) { }\n}\nAbstractDropdownView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: AbstractDropdownView, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nAbstractDropdownView.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: AbstractDropdownView, selector: \"[cdsAbstractDropdownView], [ibmAbstractDropdownView]\", inputs: { items: \"items\" }, outputs: { select: \"select\", blurIntent: \"blurIntent\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: AbstractDropdownView, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsAbstractDropdownView], [ibmAbstractDropdownView]\"\n                }]\n        }], propDecorators: { items: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], blurIntent: [{\n                type: Output\n            }] } });\n\nconst defaultOffset = { top: 0, left: 0 };\nclass DropdownService {\n    constructor(placeholderService, animationFrameService) {\n        this.placeholderService = placeholderService;\n        this.animationFrameService = animationFrameService;\n        /**\n         * Maintains an Event Observable Subscription for the global requestAnimationFrame.\n         * requestAnimationFrame is tracked only if the `Dropdown` is appended to the body otherwise we don't need it\n         */\n        this.animationFrameSubscription = new Subscription();\n        this._offset = defaultOffset;\n    }\n    set offset(value) {\n        this._offset = Object.assign({}, defaultOffset, value);\n    }\n    get offset() {\n        return this._offset;\n    }\n    /**\n     * Appends the menu to the body, or a `cds-placeholder` (if defined)\n     *\n     * @param parentRef container to position relative to\n     * @param menuRef menu to be appended to body\n     * @param classList any extra classes we should wrap the container with\n     */\n    appendToBody(parentRef, menuRef, classList) {\n        // build the dropdown list container\n        menuRef.style.display = \"block\";\n        const dropdownWrapper = document.createElement(\"div\");\n        dropdownWrapper.className = `dropdown ${classList}`;\n        dropdownWrapper.style.width = parentRef.offsetWidth + \"px\";\n        dropdownWrapper.style.position = \"absolute\";\n        dropdownWrapper.appendChild(menuRef);\n        // append it to the placeholder\n        if (this.placeholderService.hasPlaceholderRef()) {\n            this.placeholderService.appendElement(dropdownWrapper);\n            // or append it directly to the body\n        }\n        else {\n            document.body.appendChild(dropdownWrapper);\n        }\n        this.menuInstance = dropdownWrapper;\n        this.animationFrameSubscription = this.animationFrameService.tick.subscribe(() => {\n            this.positionDropdown(parentRef, dropdownWrapper);\n        });\n        // run one position in sync, so we're less likely to have the view \"jump\" as we focus\n        this.positionDropdown(parentRef, dropdownWrapper);\n        return dropdownWrapper;\n    }\n    /**\n     * Reattach the dropdown menu to the parent container\n     * @param hostRef container to append to\n     */\n    appendToDropdown(hostRef) {\n        // if the instance is already removed don't try and remove it again\n        if (!this.menuInstance) {\n            return;\n        }\n        const instance = this.menuInstance;\n        const menu = instance.firstElementChild;\n        // clean up the instance\n        this.menuInstance = null;\n        menu.style.display = \"none\";\n        hostRef.appendChild(menu);\n        this.animationFrameSubscription.unsubscribe();\n        if (this.placeholderService.hasPlaceholderRef() && this.placeholderService.hasElement(instance)) {\n            this.placeholderService.removeElement(instance);\n        }\n        else if (document.body.contains(instance)) {\n            document.body.removeChild(instance);\n        }\n        return instance;\n    }\n    /**\n     * position an open dropdown relative to the given parentRef\n     */\n    updatePosition(parentRef) {\n        this.positionDropdown(parentRef, this.menuInstance);\n    }\n    ngOnDestroy() {\n        this.animationFrameSubscription.unsubscribe();\n    }\n    positionDropdown(parentRef, menuRef) {\n        if (!menuRef) {\n            return;\n        }\n        let leftOffset = 0;\n        const boxMenu = menuRef.querySelector(\".cds--list-box__menu\");\n        if (boxMenu) {\n            // If the parentRef and boxMenu are in a different left position relative to the\n            // window, the the boxMenu position has already been flipped and a check needs to be done\n            // to see if it needs to stay flipped.\n            if (parentRef.getBoundingClientRect().left !== boxMenu.getBoundingClientRect().left) {\n                // The getBoundingClientRect().right of the boxMenu if it were hypothetically flipped\n                // back into the original position before the flip.\n                const testBoxMenuRightEdgePos = parentRef.getBoundingClientRect().left - boxMenu.getBoundingClientRect().left + boxMenu.getBoundingClientRect().right;\n                if (testBoxMenuRightEdgePos > (window.innerWidth || document.documentElement.clientWidth)) {\n                    leftOffset = parentRef.offsetWidth - boxMenu.offsetWidth;\n                }\n                // If it has not already been flipped, check if it is necessary to flip, ie. if the\n                // boxMenu is outside of the right viewPort.\n            }\n            else if (boxMenu.getBoundingClientRect().right > (window.innerWidth || document.documentElement.clientWidth)) {\n                leftOffset = parentRef.offsetWidth - boxMenu.offsetWidth;\n            }\n        }\n        // If cds-placeholder has a parent with a position(relative|fixed|absolute) account for the parent offset\n        const closestMenuWithPos = closestAttr(\"position\", [\"relative\", \"fixed\", \"absolute\"], menuRef.parentElement);\n        const topPos = closestMenuWithPos ? closestMenuWithPos.getBoundingClientRect().top * -1 : this.offset.top;\n        const leftPos = closestMenuWithPos ? closestMenuWithPos.getBoundingClientRect().left * -1 : this.offset.left + leftOffset;\n        let pos = position.findAbsolute(parentRef, menuRef, \"bottom\");\n        pos = position.addOffset(pos, topPos, leftPos);\n        position.setElement(menuRef, pos);\n    }\n}\nDropdownService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownService, deps: [{ token: i1.PlaceholderService }, { token: i2.AnimationFrameService }], target: i0.ɵɵFactoryTarget.Injectable });\nDropdownService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.PlaceholderService }, { type: i2.AnimationFrameService }]; } });\n\n/**\n * Drop-down lists enable users to select one or more items from a list.\n *\n * #### Opening behavior/List DOM placement\n * By default the dropdown will try to figure out the best placement for the dropdown list.\n *\n * If it's not contained within any scrolling elements, it will open inline, if it _is_\n * contained within a scrolling container it will try to open in the body, or an `cds-placeholder`.\n *\n * To control this behavior you can use the `appendInline` input:\n * - `[appendInline]=\"null\"` is the default (auto detection)\n * - `[appendInline]=\"false\"` will always append to the body/`cds-placeholder`\n * - `[appendInline]=\"true\"` will always append inline (next to the dropdown button)\n *\n * Get started with importing the module:\n *\n * ```typescript\n * import { DropdownModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-dropdown--basic)\n */\nclass Dropdown {\n    /**\n     * Creates an instance of Dropdown.\n     */\n    constructor(elementRef, i18n, dropdownService, elementService) {\n        this.elementRef = elementRef;\n        this.i18n = i18n;\n        this.dropdownService = dropdownService;\n        this.elementService = elementService;\n        this.id = `dropdown-${Dropdown.dropdownCount++}`;\n        /**\n         * Hide label while keeping it accessible for screen readers\n         */\n        this.hideLabel = false;\n        /**\n         * Value displayed if no item is selected.\n         */\n        this.placeholder = \"\";\n        /**\n         * The selected value from the `Dropdown`. Can be a string or template.\n         */\n        this.displayValue = \"\";\n        /**\n         * Sets the optional clear button tooltip text.\n         */\n        this.clearText = this.i18n.get().DROPDOWN.CLEAR;\n        /**\n         * Size to render the dropdown field.\n         */\n        this.size = \"md\";\n        /**\n         * Defines whether or not the `Dropdown` supports selecting multiple items as opposed to single\n         * item selection.\n         */\n        this.type = \"single\";\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * `light` or `dark` dropdown theme\n         */\n        this.theme = \"dark\";\n        /**\n         * Set to `true` to disable the dropdown.\n         */\n        this.disabled = false;\n        /**\n         * Set to `true` for a readonly state.\n         */\n        this.readonly = false;\n        /**\n         * Set to `true` for a loading dropdown.\n         */\n        this.skeleton = false;\n        /**\n         * Set to `true` for an inline dropdown.\n         */\n        this.inline = false;\n        /**\n         * Set to `true` for a dropdown without arrow key activation.\n         */\n        this.disableArrowKeys = false;\n        /**\n         * Set to `true` for invalid state.\n         */\n        this.invalid = false;\n        /**\n          * Set to `true` to show a warning (contents set by warningText)\n          */\n        this.warn = false;\n        /**\n         * set to `true` to place the dropdown view inline with the component\n         */\n        this.appendInline = null;\n        /**\n         * Specify feedback (mode) of the selection.\n         * `top`: selected item jumps to top\n         * `fixed`: selected item stays at it's position\n         * `top-after-reopen`: selected item jump to top after reopen dropdown\n         */\n        this.selectionFeedback = \"top-after-reopen\";\n        /**\n         * Accessible label for the button that opens the dropdown list.\n         * Defaults to the `DROPDOWN.OPEN` value from the i18n service.\n         */\n        this.menuButtonLabel = this.i18n.get().DROPDOWN.OPEN;\n        /**\n         * Provides the label for the \"# selected\" text.\n         * Defaults to the `DROPDOWN.SELECTED` value from the i18n service.\n         */\n        this.selectedLabel = this.i18n.get().DROPDOWN.SELECTED;\n        /**\n         * Emits selection events.\n         */\n        this.selected = new EventEmitter();\n        /**\n         * Emits event notifying to other classes that the `Dropdown` has been closed (collapsed).\n         */\n        this.onClose = new EventEmitter();\n        /**\n         * Emits event notifying to other classes that the `Dropdown` has been closed (collapsed).\n         */\n        this.close = new EventEmitter();\n        this.hostClass = true;\n        this.hostWrapperClass = true;\n        /**\n         * Experimental: enable fluid state\n         */\n        this.fluid = false;\n        /**\n         * Set to `true` if the dropdown is closed (not expanded).\n         */\n        this.menuIsClosed = true;\n        /**\n         * controls whether the `drop-up` class is applied\n         */\n        this._dropUp = false;\n        // .bind creates a new function, so we declare the methods below\n        // but .bind them up here\n        this.noop = this._noop.bind(this);\n        this.outsideClick = this._outsideClick.bind(this);\n        this.outsideKey = this._outsideKey.bind(this);\n        this.keyboardNav = this._keyboardNav.bind(this);\n        this.visibilitySubscription = new Subscription();\n        this.onTouchedCallback = this._noop;\n        this._isFocused = false;\n        // primarily used to capture and propagate input to `writeValue` before the content is available\n        this._writtenValue = [];\n        /**\n         * function passed in by `registerOnChange`\n         */\n        this.propagateChange = (_) => { };\n    }\n    get fluidInvalidClass() {\n        return this.invalid && this.fluid;\n    }\n    get fluidFocusClass() {\n        return this.fluid && this._isFocused && this.menuIsClosed;\n    }\n    get writtenValue() {\n        return this._writtenValue;\n    }\n    set writtenValue(val) {\n        if (val && val.length === 0) {\n            this.clearSelected();\n        }\n        this._writtenValue = val;\n    }\n    /**\n     * Updates the `type` property in the `@ContentChild`.\n     * The `type` property specifies whether the `Dropdown` allows single selection or multi selection.\n     */\n    ngOnInit() {\n        if (this.view) {\n            this.view.type = this.type;\n        }\n    }\n    /**\n     * Initializes classes and subscribes to events for single or multi selection.\n     */\n    ngAfterContentInit() {\n        if (!this.view) {\n            return;\n        }\n        if ((this.writtenValue && this.writtenValue.length) || typeof this.writtenValue === \"number\") {\n            this.writeValue(this.writtenValue);\n        }\n        this.view.type = this.type;\n        this.view.size = this.size;\n        // function to check if the event is organic (isUpdate === false) or programmatic\n        const isUpdate = event => event && event.isUpdate;\n        this.view.select.subscribe(event => {\n            if (this.type === \"single\" && !isUpdate(event) && !Array.isArray(event)) {\n                this.closeMenu();\n                if (event.item && event.item.selected) {\n                    if (this.itemValueKey) {\n                        this.propagateChange(event.item[this.itemValueKey]);\n                    }\n                    else {\n                        this.propagateChange(event.item);\n                    }\n                }\n                else {\n                    this.propagateChange(null);\n                }\n            }\n            if (this.type === \"multi\" && !isUpdate(event)) {\n                // if we have a `value` selector and selected items map them appropriately\n                if (this.itemValueKey && this.view.getSelected()) {\n                    const values = this.view.getSelected().map(item => item[this.itemValueKey]);\n                    this.propagateChange(values);\n                    // otherwise just pass up the values from `getSelected`\n                }\n                else {\n                    this.propagateChange(this.view.getSelected());\n                }\n            }\n            // only emit selected for \"organic\" selections\n            if (!isUpdate(event)) {\n                this.checkForReorder();\n                this.selected.emit(event);\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // if appendInline is default valued (null) we should:\n        // 1. if there are scrollable parents (not including body) don't append inline\n        //    this should also cover the case where the dropdown is in a modal\n        //    (where we _do_ want to append to the placeholder)\n        if (this.appendInline === null && hasScrollableParents(this.elementRef.nativeElement)) {\n            this.appendInline = false;\n            // 2. otherwise we should append inline\n        }\n        else if (this.appendInline === null) {\n            this.appendInline = true;\n        }\n        this.checkForReorder();\n    }\n    /**\n     * Removing the `Dropdown` from the body if it is appended to the body.\n     */\n    ngOnDestroy() {\n        if (!this.appendInline) {\n            this._appendToDropdown();\n        }\n    }\n    /**\n     * Propagates the injected `value`.\n     */\n    writeValue(value) {\n        // cache the written value so we can use it in `AfterContentInit`\n        this.writtenValue = value;\n        this.view.onItemsReady(() => {\n            // propagate null/falsey as an array (deselect everything)\n            if (!value) {\n                this.view.propagateSelected([value]);\n            }\n            else if (this.type === \"single\") {\n                if (this.itemValueKey) {\n                    // clone the specified item and update its state\n                    const newValue = Object.assign({}, this.view.getListItems().find(item => item[this.itemValueKey] === value));\n                    newValue.selected = true;\n                    this.view.propagateSelected([newValue]);\n                }\n                else {\n                    // pass the singular value as an array of ListItem\n                    this.view.propagateSelected([value]);\n                }\n            }\n            else {\n                if (this.itemValueKey) {\n                    // clone the items and update their state based on the received value array\n                    // this way we don't lose any additional metadata that may be passed in via the `items` Input\n                    let newValues = [];\n                    for (const v of value) {\n                        for (const item of this.view.getListItems()) {\n                            if (item[this.itemValueKey] === v) {\n                                newValues.push(Object.assign({}, item, { selected: true }));\n                            }\n                        }\n                    }\n                    this.view.propagateSelected(newValues);\n                }\n                else {\n                    // we can safely assume we're passing an array of `ListItem`s\n                    this.view.propagateSelected(value);\n                }\n            }\n            this.checkForReorder();\n        });\n    }\n    onBlur() {\n        this.onTouchedCallback();\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    /**\n     * Registering the function injected to control the touch use of the `Dropdown`.\n     */\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the dropdown.\n     *\n     * ex: `this.formGroup.get(\"myDropdown\").disable();`\n     *\n     * @param isDisabled `true` to disable the input\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Adds keyboard functionality for navigation, selection and closing of the `Dropdown`.\n     */\n    onKeyDown(event) {\n        if (this.readonly) {\n            return;\n        }\n        if ((event.key === \"Escape\") && !this.menuIsClosed) {\n            event.stopImmediatePropagation(); // don't unintentionally close other widgets that listen for Escape\n        }\n        if (event.key === \"Escape\") {\n            event.preventDefault();\n            this.closeMenu();\n            this.dropdownButton.nativeElement.focus();\n        }\n        else if (this.menuIsClosed && (event.key === \" \" || event.key === \"ArrowDown\" || event.key === \"ArrowUp\")) {\n            if (this.disableArrowKeys && (event.key === \"ArrowDown\" || event.key === \"ArrowUp\")) {\n                return;\n            }\n            event.preventDefault();\n            this.openMenu();\n        }\n        if (!this.menuIsClosed && event.key === \"Tab\" && this.dropdownMenu.nativeElement.contains(event.target)) {\n            this.closeMenu();\n        }\n        if (!this.menuIsClosed && event.key === \"Tab\" && event.shiftKey) {\n            this.closeMenu();\n        }\n        if (this.type === \"multi\") {\n            return;\n        }\n        if (this.menuIsClosed) {\n            this.closedDropdownNavigation(event);\n        }\n    }\n    closedDropdownNavigation(event) {\n        if (event.key === \"ArrowDown\") {\n            event.preventDefault();\n            this.view.getCurrentItem().selected = false;\n            let item = this.view.getNextItem();\n            if (item) {\n                item.selected = true;\n            }\n        }\n        else if (event.key === \"ArrowUp\") {\n            event.preventDefault();\n            this.view.getCurrentItem().selected = false;\n            let item = this.view.getPrevItem();\n            if (item) {\n                item.selected = true;\n            }\n        }\n    }\n    /**\n     * Returns the display value if there is a selection and displayValue is set,\n     * if there is just a selection the ListItem content property will be returned,\n     * otherwise the placeholder will be returned.\n     */\n    getDisplayStringValue() {\n        if (!this.view || this.skeleton) {\n            return;\n        }\n        let selected = this.view.getSelected();\n        if (selected.length && (!this.displayValue || !this.isRenderString())) {\n            if (this.type === \"multi\") {\n                return of(this.placeholder);\n            }\n            else {\n                return of(selected[0].content);\n            }\n        }\n        else if (selected.length && this.isRenderString()) {\n            return of(this.displayValue);\n        }\n        return of(this.placeholder);\n    }\n    isRenderString() {\n        return typeof this.displayValue === \"string\";\n    }\n    getRenderTemplateContext() {\n        if (!this.view) {\n            return;\n        }\n        let selected = this.view.getSelected();\n        if (this.type === \"multi\") {\n            return { items: selected };\n        }\n        else if (selected && selected.length > 0) {\n            return { item: selected[0] }; // this is to be compatible with the dropdown-list template\n        }\n        else {\n            return {};\n        }\n    }\n    getSelectedCount() {\n        if (this.view.getSelected()) {\n            return this.view.getSelected().length;\n        }\n    }\n    clearSelected() {\n        if (this.disabled || this.getSelectedCount() === 0) {\n            return;\n        }\n        for (const item of this.view.getListItems()) {\n            item.selected = false;\n        }\n        this.selected.emit([]);\n        this.propagateChange([]);\n    }\n    /**\n     * Returns `true` if there is a value selected.\n     */\n    valueSelected() {\n        if (this.view.getSelected()) {\n            return true;\n        }\n        return false;\n    }\n    _noop() { }\n    /**\n     * Handles clicks outside of the `Dropdown`.\n     */\n    _outsideClick(event) {\n        if (!this.elementRef.nativeElement.contains(event.target) &&\n            // if we're appendToBody the list isn't within the _elementRef,\n            // so we've got to check if our target is possibly in there too.\n            !this.dropdownMenu.nativeElement.contains(event.target)) {\n            this.closeMenu();\n        }\n    }\n    _outsideKey(event) {\n        if (!this.menuIsClosed && event.key === \"Tab\" && this.dropdownMenu.nativeElement.contains(event.target)) {\n            this.closeMenu();\n        }\n    }\n    /**\n     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.\n     */\n    _keyboardNav(event) {\n        if (event.key === \"Escape\" && !this.menuIsClosed) {\n            event.stopImmediatePropagation(); // don't unintentionally close modal if inside of it\n        }\n        if (event.key === \"Escape\") {\n            event.preventDefault();\n            this.closeMenu();\n            this.dropdownButton.nativeElement.focus();\n        }\n        else if (!this.menuIsClosed && event.key === \"Tab\") {\n            // this way focus will start on the next focusable item from the dropdown\n            // not the top of the body!\n            this.dropdownButton.nativeElement.focus();\n            this.dropdownButton.nativeElement.dispatchEvent(new KeyboardEvent(\"keydown\", { bubbles: true, cancelable: true, key: \"Tab\" }));\n            this.closeMenu();\n        }\n    }\n    /**\n     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.\n     */\n    _appendToDropdown() {\n        this.dropdownService.appendToDropdown(this.elementRef.nativeElement);\n        this.dropdownMenu.nativeElement.removeEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Creates the `Dropdown` list as an element that is appended to the DOM body.\n     */\n    _appendToBody() {\n        const lightClass = this.theme === \"light\" ? \" cds--list-box--light\" : \"\";\n        const expandedClass = !this.menuIsClosed ? \" cds--list-box--expanded\" : \"\";\n        this.dropdownService.appendToBody(this.dropdownButton.nativeElement, this.dropdownMenu.nativeElement, `${this.elementRef.nativeElement.className}${lightClass}${expandedClass}`);\n        this.dropdownMenu.nativeElement.addEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Detects whether or not the `Dropdown` list is visible within all scrollable parents.\n     * This can be overridden by passing in a value to the `dropUp` input.\n     */\n    _shouldDropUp() {\n        // check if dropdownMenu exists first.\n        const menu = this.dropdownMenu && this.dropdownMenu.nativeElement.querySelector(\".cds--list-box__menu\");\n        // check if menu exists first.\n        const menuRect = menu && menu.getBoundingClientRect();\n        if (menu && menuRect) {\n            const scrollableParents = getScrollableParents(menu);\n            return scrollableParents.reduce((shouldDropUp, parent) => {\n                const parentRect = parent.getBoundingClientRect();\n                const isBelowParent = !(menuRect.bottom <= parentRect.bottom);\n                return shouldDropUp || isBelowParent;\n            }, false);\n        }\n        return false;\n    }\n    /**\n     * Expands the dropdown menu in the view.\n     */\n    openMenu() {\n        // prevents the dropdown from opening when list of items is empty\n        if (this.view.getListItems().length === 0) {\n            return;\n        }\n        this._dropUp = false;\n        this.menuIsClosed = false;\n        // move the dropdown list to the body if we're not appending inline\n        // and position it relative to the dropdown wrapper\n        if (!this.appendInline) {\n            const target = this.dropdownButton.nativeElement;\n            const parent = this.elementRef.nativeElement;\n            this.visibilitySubscription = this.elementService\n                .visibility(target, parent)\n                .subscribe(value => {\n                if (!value.visible) {\n                    this.closeMenu();\n                }\n            });\n            this._appendToBody();\n        }\n        // set the dropdown menu to drop up if it's near the bottom of the screen\n        // setTimeout lets us measure after it's visible in the DOM\n        setTimeout(() => {\n            if (this.dropUp === null || this.dropUp === undefined) {\n                this._dropUp = this._shouldDropUp();\n            }\n        }, 0);\n        // we bind noop to document.body.firstElementChild to allow safari to fire events\n        // from document. Then we unbind everything later to keep things light.\n        document.body.firstElementChild.addEventListener(\"click\", this.noop, true);\n        document.body.firstElementChild.addEventListener(\"keydown\", this.noop, true);\n        document.addEventListener(\"click\", this.outsideClick, true);\n        document.addEventListener(\"keydown\", this.outsideKey, true);\n        setTimeout(() => this.view.initFocus(), 0);\n    }\n    /**\n     * Collapsing the dropdown menu and removing unnecessary `EventListeners`.\n     */\n    closeMenu() {\n        // return early if the menu is already closed\n        if (this.menuIsClosed) {\n            return;\n        }\n        this.menuIsClosed = true;\n        this.checkForReorder();\n        this.onClose.emit();\n        this.close.emit();\n        // focus the trigger button when we close ...\n        this.dropdownButton.nativeElement.focus();\n        // remove the conditional once this api is settled and part of abstract-dropdown-view.class\n        if (this.view[\"disableScroll\"]) {\n            this.view[\"disableScroll\"]();\n        }\n        // move the list back in the component on close\n        if (!this.appendInline) {\n            this.visibilitySubscription.unsubscribe();\n            this._appendToDropdown();\n        }\n        document.body.firstElementChild.removeEventListener(\"click\", this.noop, true);\n        document.body.firstElementChild.removeEventListener(\"keydown\", this.noop, true);\n        document.removeEventListener(\"click\", this.outsideClick, true);\n        document.removeEventListener(\"keydown\", this.outsideKey, true);\n    }\n    /**\n     * Controls toggling menu states between open/expanded and closed/collapsed.\n     */\n    toggleMenu() {\n        if (this.menuIsClosed) {\n            this.openMenu();\n        }\n        else {\n            this.closeMenu();\n        }\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    handleFocus(event) {\n        this._isFocused = event.type === \"focus\";\n        if (event.type === \"blur\") {\n            this.onBlur();\n        }\n    }\n    /**\n     * Controls when it's needed to apply the selection feedback\n     */\n    checkForReorder() {\n        const topAfterReopen = this.menuIsClosed && this.selectionFeedback === \"top-after-reopen\";\n        if ((this.type === \"multi\") && (topAfterReopen || this.selectionFeedback === \"top\")) {\n            this.view.reorderSelected();\n        }\n    }\n}\nDropdown.dropdownCount = 0;\nDropdown.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Dropdown, deps: [{ token: i0.ElementRef }, { token: i1$1.I18n }, { token: DropdownService }, { token: i2.ElementService }], target: i0.ɵɵFactoryTarget.Component });\nDropdown.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Dropdown, selector: \"cds-dropdown, ibm-dropdown\", inputs: { id: \"id\", label: \"label\", hideLabel: \"hideLabel\", helperText: \"helperText\", placeholder: \"placeholder\", displayValue: \"displayValue\", clearText: \"clearText\", size: \"size\", type: \"type\", theme: \"theme\", disabled: \"disabled\", readonly: \"readonly\", skeleton: \"skeleton\", inline: \"inline\", disableArrowKeys: \"disableArrowKeys\", invalid: \"invalid\", invalidText: \"invalidText\", warn: \"warn\", warnText: \"warnText\", appendInline: \"appendInline\", scrollableContainer: \"scrollableContainer\", itemValueKey: \"itemValueKey\", selectionFeedback: \"selectionFeedback\", menuButtonLabel: \"menuButtonLabel\", selectedLabel: \"selectedLabel\", dropUp: \"dropUp\", fluid: \"fluid\" }, outputs: { selected: \"selected\", onClose: \"onClose\", close: \"close\" }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"class.cds--list-box__wrapper--fluid--invalid\": \"this.fluidInvalidClass\", \"class.cds--list-box__wrapper--fluid--focus\": \"this.fluidFocusClass\", \"class.cds--dropdown__wrapper\": \"this.hostClass\", \"class.cds--list-box__wrapper\": \"this.hostWrapperClass\", \"class.cds--list-box__wrapper--fluid\": \"this.fluid\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: Dropdown,\n            multi: true\n        }\n    ], queries: [{ propertyName: \"view\", first: true, predicate: AbstractDropdownView, descendants: true, static: true }], viewQueries: [{ propertyName: \"dropdownButton\", first: true, predicate: [\"dropdownButton\"], descendants: true, static: true }, { propertyName: \"dropdownMenu\", first: true, predicate: [\"dropdownMenu\"], descendants: true, static: true }], ngImport: i0, template: `\n\t<label\n\t\t*ngIf=\"label && !skeleton\"\n\t\t[for]=\"id\"\n\t\tclass=\"cds--label\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--label--disabled': disabled,\n\t\t\t'cds--visually-hidden': hideLabel\n\t\t}\">\n\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t</label>\n\t<div\n\t\tclass=\"cds--list-box\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--dropdown': type !== 'multi' && !(skeleton && fluid),\n\t\t\t'cds--multiselect': type === 'multi',\n\t\t\t'cds--multi-select--selected': type === 'multi' && getSelectedCount() > 0,\n\t\t\t'cds--dropdown--light': theme === 'light',\n\t\t\t'cds--list-box--light': theme === 'light',\n\t\t\t'cds--list-box--inline': inline,\n\t\t\t'cds--skeleton': skeleton,\n\t\t\t'cds--dropdown--disabled cds--list-box--disabled': disabled,\n\t\t\t'cds--dropdown--readonly': readonly,\n\t\t\t'cds--dropdown--invalid': invalid,\n\t\t\t'cds--dropdown--warning cds--list-box--warning': warn,\n\t\t\t'cds--dropdown--sm cds--list-box--sm': size === 'sm',\n\t\t\t'cds--dropdown--md cds--list-box--md': size === 'md',\n\t\t\t'cds--dropdown--lg cds--list-box--lg': size === 'lg',\n\t\t\t'cds--list-box--expanded': !menuIsClosed,\n\t\t\t'cds--list-box--invalid': invalid\n\t\t}\"\n\t\t[attr.data-invalid]=\"invalid ? true : null\">\n\t\t<div *ngIf=\"skeleton && fluid\" class=\"cds--list-box__label\"></div>\n\t\t<button\n\t\t\t#dropdownButton\n\t\t\t[id]=\"id\"\n\t\t\ttype=\"button\"\n\t\t\tclass=\"cds--list-box__field\"\n\t\t\t[ngClass]=\"{'a': !menuIsClosed}\"\n\t\t\t[attr.aria-expanded]=\"!menuIsClosed\"\n\t\t\t[attr.aria-disabled]=\"disabled\"\n\t\t\t[attr.aria-readonly]=\"readonly\"\n\t\t\taria-haspopup=\"listbox\"\n\t\t\t(click)=\"disabled || readonly ? $event.stopPropagation() : toggleMenu()\"\n\t\t\t(focus)=\"fluid ? handleFocus($event) : null\"\n\t\t\t(blur)=\"fluid ? handleFocus($event) : onBlur()\"\n\t\t\t[attr.disabled]=\"disabled ? true : null\">\n\t\t\t<div\n\t\t\t\t(click)=\"clearSelected()\"\n\t\t\t\t(keydown.enter)=\"clearSelected()\"\n\t\t\t\t*ngIf=\"type === 'multi' && getSelectedCount() > 0\"\n\t\t\t\tclass=\"cds--list-box__selection cds--tag--filter cds--list-box__selection--multi\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t[title]=\"clearText\">\n\t\t\t\t{{getSelectedCount()}}\n\t\t\t\t<svg\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\trole=\"img\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8z\"></path>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<span *ngIf=\"isRenderString()\" class=\"cds--list-box__label\">{{getDisplayStringValue() | async}}</span>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"!isRenderString()\"\n\t\t\t\t[ngTemplateOutletContext]=\"getRenderTemplateContext()\"\n\t\t\t\t[ngTemplateOutlet]=\"displayValue\">\n\t\t\t</ng-template>\n\t\t\t<span class=\"cds--list-box__menu-icon\">\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tcdsIcon=\"chevron--down\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t[attr.aria-label]=\"menuButtonLabel\"\n\t\t\t\t\t[ngClass]=\"{'cds--list-box__menu-icon--open': !menuIsClosed }\">\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t</button>\n\t\t<svg\n\t\t\t*ngIf=\"invalid\"\n\t\t\tclass=\"cds--list-box__invalid-icon\"\n\t\t\tcdsIcon=\"warning--filled\"\n\t\t\tsize=\"16\">\n\t\t</svg>\n\t\t<svg\n\t\t\t*ngIf=\"!invalid && warn\"\n\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\tsize=\"16\"\n\t\t\tclass=\"cds--list-box__invalid-icon cds--list-box__invalid-icon--warning\">\n\t\t</svg>\n\t\t<div\n\t\t\t#dropdownMenu\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--list-box--up': this.dropUp !== null && this.dropUp !== undefined ? dropUp : _dropUp\n\t\t\t}\">\n\t\t\t<ng-content *ngIf=\"!menuIsClosed\"></ng-content>\n\t\t</div>\n\t</div>\n\t<hr *ngIf=\"fluid\" class=\"cds--list-box__divider\" />\n\t<div\n\t\t*ngIf=\"helperText && !invalid && !warn && !skeleton && !fluid\"\n\t\tclass=\"cds--form__helper-text\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--form__helper-text--disabled': disabled\n\t\t}\">\n\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t</div>\n\t<div *ngIf=\"invalid\" class=\"cds--form-requirement\">\n\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t</div>\n\t<div *ngIf=\"!invalid && warn\" class=\"cds--form-requirement\">\n\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i5.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"pipe\", type: i4.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Dropdown, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-dropdown, ibm-dropdown\",\n                    template: `\n\t<label\n\t\t*ngIf=\"label && !skeleton\"\n\t\t[for]=\"id\"\n\t\tclass=\"cds--label\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--label--disabled': disabled,\n\t\t\t'cds--visually-hidden': hideLabel\n\t\t}\">\n\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t</label>\n\t<div\n\t\tclass=\"cds--list-box\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--dropdown': type !== 'multi' && !(skeleton && fluid),\n\t\t\t'cds--multiselect': type === 'multi',\n\t\t\t'cds--multi-select--selected': type === 'multi' && getSelectedCount() > 0,\n\t\t\t'cds--dropdown--light': theme === 'light',\n\t\t\t'cds--list-box--light': theme === 'light',\n\t\t\t'cds--list-box--inline': inline,\n\t\t\t'cds--skeleton': skeleton,\n\t\t\t'cds--dropdown--disabled cds--list-box--disabled': disabled,\n\t\t\t'cds--dropdown--readonly': readonly,\n\t\t\t'cds--dropdown--invalid': invalid,\n\t\t\t'cds--dropdown--warning cds--list-box--warning': warn,\n\t\t\t'cds--dropdown--sm cds--list-box--sm': size === 'sm',\n\t\t\t'cds--dropdown--md cds--list-box--md': size === 'md',\n\t\t\t'cds--dropdown--lg cds--list-box--lg': size === 'lg',\n\t\t\t'cds--list-box--expanded': !menuIsClosed,\n\t\t\t'cds--list-box--invalid': invalid\n\t\t}\"\n\t\t[attr.data-invalid]=\"invalid ? true : null\">\n\t\t<div *ngIf=\"skeleton && fluid\" class=\"cds--list-box__label\"></div>\n\t\t<button\n\t\t\t#dropdownButton\n\t\t\t[id]=\"id\"\n\t\t\ttype=\"button\"\n\t\t\tclass=\"cds--list-box__field\"\n\t\t\t[ngClass]=\"{'a': !menuIsClosed}\"\n\t\t\t[attr.aria-expanded]=\"!menuIsClosed\"\n\t\t\t[attr.aria-disabled]=\"disabled\"\n\t\t\t[attr.aria-readonly]=\"readonly\"\n\t\t\taria-haspopup=\"listbox\"\n\t\t\t(click)=\"disabled || readonly ? $event.stopPropagation() : toggleMenu()\"\n\t\t\t(focus)=\"fluid ? handleFocus($event) : null\"\n\t\t\t(blur)=\"fluid ? handleFocus($event) : onBlur()\"\n\t\t\t[attr.disabled]=\"disabled ? true : null\">\n\t\t\t<div\n\t\t\t\t(click)=\"clearSelected()\"\n\t\t\t\t(keydown.enter)=\"clearSelected()\"\n\t\t\t\t*ngIf=\"type === 'multi' && getSelectedCount() > 0\"\n\t\t\t\tclass=\"cds--list-box__selection cds--tag--filter cds--list-box__selection--multi\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t[title]=\"clearText\">\n\t\t\t\t{{getSelectedCount()}}\n\t\t\t\t<svg\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\trole=\"img\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8z\"></path>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<span *ngIf=\"isRenderString()\" class=\"cds--list-box__label\">{{getDisplayStringValue() | async}}</span>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"!isRenderString()\"\n\t\t\t\t[ngTemplateOutletContext]=\"getRenderTemplateContext()\"\n\t\t\t\t[ngTemplateOutlet]=\"displayValue\">\n\t\t\t</ng-template>\n\t\t\t<span class=\"cds--list-box__menu-icon\">\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tcdsIcon=\"chevron--down\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t[attr.aria-label]=\"menuButtonLabel\"\n\t\t\t\t\t[ngClass]=\"{'cds--list-box__menu-icon--open': !menuIsClosed }\">\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t</button>\n\t\t<svg\n\t\t\t*ngIf=\"invalid\"\n\t\t\tclass=\"cds--list-box__invalid-icon\"\n\t\t\tcdsIcon=\"warning--filled\"\n\t\t\tsize=\"16\">\n\t\t</svg>\n\t\t<svg\n\t\t\t*ngIf=\"!invalid && warn\"\n\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\tsize=\"16\"\n\t\t\tclass=\"cds--list-box__invalid-icon cds--list-box__invalid-icon--warning\">\n\t\t</svg>\n\t\t<div\n\t\t\t#dropdownMenu\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--list-box--up': this.dropUp !== null && this.dropUp !== undefined ? dropUp : _dropUp\n\t\t\t}\">\n\t\t\t<ng-content *ngIf=\"!menuIsClosed\"></ng-content>\n\t\t</div>\n\t</div>\n\t<hr *ngIf=\"fluid\" class=\"cds--list-box__divider\" />\n\t<div\n\t\t*ngIf=\"helperText && !invalid && !warn && !skeleton && !fluid\"\n\t\tclass=\"cds--form__helper-text\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--form__helper-text--disabled': disabled\n\t\t}\">\n\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t</div>\n\t<div *ngIf=\"invalid\" class=\"cds--form-requirement\">\n\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t</div>\n\t<div *ngIf=\"!invalid && warn\" class=\"cds--form-requirement\">\n\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t</div>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: Dropdown,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.I18n }, { type: DropdownService }, { type: i2.ElementService }]; }, propDecorators: { fluidInvalidClass: [{\n                type: HostBinding,\n                args: [\"class.cds--list-box__wrapper--fluid--invalid\"]\n            }], fluidFocusClass: [{\n                type: HostBinding,\n                args: [\"class.cds--list-box__wrapper--fluid--focus\"]\n            }], id: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], hideLabel: [{\n                type: Input\n            }], helperText: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], displayValue: [{\n                type: Input\n            }], clearText: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], inline: [{\n                type: Input\n            }], disableArrowKeys: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], invalidText: [{\n                type: Input\n            }], warn: [{\n                type: Input\n            }], warnText: [{\n                type: Input\n            }], appendInline: [{\n                type: Input\n            }], scrollableContainer: [{\n                type: Input\n            }], itemValueKey: [{\n                type: Input\n            }], selectionFeedback: [{\n                type: Input\n            }], menuButtonLabel: [{\n                type: Input\n            }], selectedLabel: [{\n                type: Input\n            }], dropUp: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], onClose: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }], view: [{\n                type: ContentChild,\n                args: [AbstractDropdownView, { static: true }]\n            }], dropdownButton: [{\n                type: ViewChild,\n                args: [\"dropdownButton\", { static: true }]\n            }], dropdownMenu: [{\n                type: ViewChild,\n                args: [\"dropdownMenu\", { static: true }]\n            }], hostClass: [{\n                type: HostBinding,\n                args: [\"class.cds--dropdown__wrapper\"]\n            }], hostWrapperClass: [{\n                type: HostBinding,\n                args: [\"class.cds--list-box__wrapper\"]\n            }], fluid: [{\n                type: HostBinding,\n                args: [\"class.cds--list-box__wrapper--fluid\"]\n            }, {\n                type: Input\n            }], onKeyDown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\n/**\n * returns an observable bound to keydown events that\n * filters to a single element where the first letter of\n * it's textContent matches the key pressed\n *\n * @param target element to watch\n * @param elements elements to search\n */\nfunction watchFocusJump(target, elements) {\n    return fromEvent(target, \"keydown\")\n        .pipe(debounceTime(150), map((ev) => {\n        let el = elements.find((itemEl) => itemEl.textContent.trim().toLowerCase().startsWith(ev.key));\n        if (el) {\n            return el;\n        }\n    }), filter(el => !!el));\n}\n/** bundle of functions to aid in manipulating tree structures */\nconst treetools = {\n    /** finds an item in a set of items and returns the item and path to the item as an array */\n    find: function (items, itemToFind, path = []) {\n        let found;\n        for (let i of items) {\n            if (i === itemToFind) {\n                path.push(i);\n                found = i;\n            }\n            if (i.items && !found) {\n                path.push(i);\n                found = this.find(i.items, itemToFind, path).found;\n                if (!found) {\n                    path = [];\n                }\n            }\n        }\n        return { found, path };\n    }\n};\n\n/**\n * ```html\n * <cds-dropdown-list [items]=\"listItems\"></cds-dropdown-list>\n * ```\n * ```typescript\n * listItems = [\n * \t{\n * \t\tcontent: \"item one\",\n * \t\tselected: false\n * \t},\n * \t{\n * \t\tcontent: \"item two\",\n * \t\tselected: false,\n * \t},\n * \t{\n * \t\tcontent: \"item three\",\n * \t\tselected: false\n * \t},\n * \t{\n * \t\tcontent: \"item four\",\n * \t\tselected: false\n * \t}\n * ];\n * ```\n */\nclass DropdownList {\n    /**\n     * Creates an instance of `DropdownList`.\n     */\n    constructor(elementRef, i18n, appRef) {\n        this.elementRef = elementRef;\n        this.i18n = i18n;\n        this.appRef = appRef;\n        this.ariaLabel = this.i18n.get().DROPDOWN_LIST.LABEL;\n        /**\n         * Template to bind to items in the `DropdownList` (optional).\n         */\n        this.listTpl = null;\n        /**\n         * Event to emit selection of a list item within the `DropdownList`.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Event to emit scroll event of a list within the `DropdownList`.\n         */\n        this.scroll = new EventEmitter();\n        /**\n         * Event to suggest a blur on the view.\n         * Emits _after_ the first/last item has been focused.\n         * ex.\n         * ArrowUp -> focus first item\n         * ArrowUp -> emit event\n         *\n         * When this event fires focus should be placed on some element outside of the list - blurring the list as a result\n         */\n        this.blurIntent = new EventEmitter();\n        /**\n         * Defines whether or not the `DropdownList` supports selecting multiple items as opposed to single\n         * item selection.\n         */\n        this.type = \"single\";\n        /**\n         * Defines whether to show title attribute or not\n         */\n        this.showTitles = true;\n        /**\n         * Defines the rendering size of the `DropdownList` input component.\n         */\n        this.size = \"md\";\n        this.listId = `listbox-${DropdownList.listCount++}`;\n        this.highlightedItem = null;\n        /**\n         * Holds the list of items that will be displayed in the `DropdownList`.\n         * It differs from the the complete set of items when filtering is used (but\n         * it is always a subset of the total items in `DropdownList`).\n         */\n        this.displayItems = [];\n        /**\n         * Maintains the index for the selected item within the `DropdownList`.\n         */\n        this.index = -1;\n        /**\n         * Useful representation of the items, should be accessed via `getListItems`.\n         */\n        this._items = [];\n    }\n    /**\n     * The list items belonging to the `DropdownList`.\n     */\n    set items(value) {\n        if (isObservable(value)) {\n            if (this._itemsSubscription) {\n                this._itemsSubscription.unsubscribe();\n            }\n            this._itemsReady = new Observable((observer) => {\n                this._itemsSubscription = value.subscribe(v => {\n                    this.updateList(v);\n                    observer.next(true);\n                    observer.complete();\n                });\n            });\n            this.onItemsReady(null);\n        }\n        else {\n            this.updateList(value);\n        }\n        this._originalItems = value;\n    }\n    get items() {\n        return this._originalItems;\n    }\n    /**\n     * Retrieves array of list items and index of the selected item after view has rendered.\n     * Additionally, any Observables for the `DropdownList` are initialized.\n     */\n    ngAfterViewInit() {\n        this.index = this.getListItems().findIndex(item => item.selected);\n        this.setupFocusObservable();\n        setTimeout(() => {\n            this.doEmitSelect(true);\n        });\n    }\n    /**\n     * Removes any Observables on destruction of the component.\n     */\n    ngOnDestroy() {\n        if (this.focusJump) {\n            this.focusJump.unsubscribe();\n        }\n        if (this._itemsSubscription) {\n            this._itemsSubscription.unsubscribe();\n        }\n    }\n    doEmitSelect(isUpdate = true) {\n        if (this.type === \"single\") {\n            this.select.emit({ item: this._items.find(item => item.selected), isUpdate: isUpdate });\n        }\n        else {\n            // abuse javascripts object mutability until we can break the API and switch to\n            // { items: [], isUpdate: true }\n            const selected = this.getSelected() || [];\n            selected[\"isUpdate\"] = isUpdate;\n            this.select.emit(selected);\n        }\n    }\n    getItemId(index) {\n        return `${this.listId}-${index}`;\n    }\n    /**\n     * Updates the displayed list of items and then retrieves the most current properties for the `DropdownList` from the DOM.\n     */\n    updateList(items) {\n        this._items = items.map(item => Object.assign({}, item));\n        this.displayItems = this._items;\n        this.updateIndex();\n        this.setupFocusObservable();\n        this.doEmitSelect();\n    }\n    /**\n     * Filters the items being displayed in the DOM list.\n     */\n    filterBy(query = \"\") {\n        if (query) {\n            this.displayItems = this.getListItems().filter(item => item.content.toLowerCase().includes(query.toLowerCase()));\n            // Reset index if items were found\n            // Prevent selecting index in list that are undefined.\n            if (this.displayItems) {\n                this.index = 0;\n            }\n        }\n        else {\n            this.displayItems = this.getListItems();\n        }\n        this.updateIndex();\n    }\n    /**\n     * Initializes (or re-initializes) the Observable that handles switching focus to an element based on\n     * key input matching the first letter of the item in the list.\n     */\n    setupFocusObservable() {\n        if (!this.list) {\n            return;\n        }\n        if (this.focusJump) {\n            this.focusJump.unsubscribe();\n        }\n        let elList = Array.from(this.list.nativeElement.querySelectorAll(\"li\"));\n        this.focusJump = watchFocusJump(this.list.nativeElement, elList)\n            .subscribe(el => {\n            el.focus();\n        });\n    }\n    /**\n     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n     */\n    getNextItem() {\n        if (this.index < this.displayItems.length - 1) {\n            this.index++;\n        }\n        return this.displayItems[this.index];\n    }\n    /**\n     * Returns `true` if the selected item is not the last item in the `DropdownList`.\n     */\n    hasNextElement() {\n        return this.index < this.displayItems.length - 1 &&\n            (!(this.index === this.displayItems.length - 2) || !this.displayItems[this.index + 1].disabled);\n    }\n    /**\n     * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n     */\n    getNextElement() {\n        // Only return native elements if they are rendered\n        const elemList = this.listElementList ? this.listElementList.toArray() : [];\n        if (!elemList.length) {\n            return null;\n        }\n        /**\n         * Start checking from next index\n         * Continue looping through the list until a non disabeled element is found or\n         * end of list is reached\n         */\n        for (let i = this.index + 1; i < elemList.length; i++) {\n            // If the values in the list are not disabled\n            if (!this.displayItems[i].disabled) {\n                this.index = i;\n                return elemList[i].nativeElement;\n            }\n        }\n        return elemList[this.index]?.nativeElement;\n    }\n    /**\n     * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n     */\n    getPrevItem() {\n        if (this.index > 0) {\n            this.index--;\n        }\n        return this.displayItems[this.index];\n    }\n    /**\n     * Returns `true` if the selected item is not the first in the list.\n     */\n    hasPrevElement() {\n        return this.index > 0 && (!(this.index === 1) || !this.displayItems[0].disabled);\n    }\n    /**\n     * Returns the `HTMLElement` for the item that precedes the selected item.\n     */\n    getPrevElement() {\n        // Only return native elements if they are rendered\n        const elemList = this.listElementList ? this.listElementList.toArray() : [];\n        if (!elemList.length) {\n            return null;\n        }\n        /**\n         * Start checking from next index\n         * Continue looping through the list until a non disabeled element is found or\n         * end of list is reached\n         */\n        for (let i = this.index - 1; i < this.index && i >= 0; i--) {\n            // If the values in the list are not disabled\n            if (!this.displayItems[i].disabled) {\n                this.index = i;\n                return elemList[i].nativeElement;\n            }\n        }\n        return elemList[this.index].nativeElement;\n    }\n    /**\n     * Returns the `ListItem` that is selected within `DropdownList`.\n     */\n    getCurrentItem() {\n        if (this.index < 0) {\n            return this.displayItems[0];\n        }\n        return this.displayItems[this.index];\n    }\n    /**\n     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n     */\n    getCurrentElement() {\n        if (this.index < 0) {\n            return this.listElementList.first.nativeElement;\n        }\n        return this.listElementList.toArray()[this.index].nativeElement;\n    }\n    /**\n     * Returns the items as an Array\n     */\n    getListItems() {\n        return this._items;\n    }\n    /**\n     * Returns a list containing the selected item(s) in the `DropdownList`.\n     */\n    getSelected() {\n        let selected = this.getListItems().filter(item => item.selected);\n        if (selected.length === 0) {\n            return [];\n        }\n        return selected;\n    }\n    /**\n     * Transforms array input list of items to the correct state by updating the selected item(s).\n     */\n    propagateSelected(value) {\n        // if we get a non-array, log out an error (since it is one)\n        if (!Array.isArray(value)) {\n            console.error(`${this.constructor.name}.propagateSelected expects an Array<ListItem>, got ${JSON.stringify(value)}`);\n        }\n        this.onItemsReady(() => {\n            const selectedNewItems = [];\n            for (let newItem of value) {\n                if (newItem && newItem.selected) {\n                    // copy the item\n                    let tempNewItem = Object.assign({}, newItem);\n                    // deleted selected because it's what we _want_ to change\n                    delete tempNewItem.selected;\n                    // stringify for compare later\n                    tempNewItem = JSON.stringify(tempNewItem);\n                    // add to the list of selected items\n                    selectedNewItems.push(tempNewItem);\n                }\n            }\n            // loop through the list items and update the `selected` state for matching items in `value`\n            for (let oldItem of this.getListItems()) {\n                // fast path when no items are selected\n                if (selectedNewItems.length === 0) {\n                    oldItem.selected = false;\n                    continue;\n                }\n                // copy the item\n                let tempOldItem = Object.assign({}, oldItem);\n                // deleted selected because it's what we _want_ to change\n                delete tempOldItem.selected;\n                // stringify for compare\n                tempOldItem = JSON.stringify(tempOldItem);\n                for (let selectedNewItem of selectedNewItems) {\n                    // do the compare\n                    if (tempOldItem.includes(selectedNewItem)) {\n                        oldItem.selected = true;\n                        // if we've found a matching item, we can stop looping\n                        break;\n                    }\n                    else {\n                        oldItem.selected = false;\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Initializes focus in the list, effectively a wrapper for `getCurrentElement().focus()`\n     */\n    initFocus() {\n        if (this.index < 0) {\n            this.updateIndex();\n        }\n        this.list.nativeElement.focus();\n        setTimeout(() => {\n            this.highlightedItem = this.getItemId(this.index);\n        });\n    }\n    updateIndex() {\n        // initialize index on the first selected item or\n        // on the next non disabled item if no items are selected\n        // in case, if all items are disabled, the index value will remain same\n        const selected = this.getSelected();\n        if (selected.length) {\n            this.index = this.displayItems.indexOf(selected[0]);\n        }\n        else if (this.hasNextElement()) {\n            this.getNextElement();\n        }\n    }\n    /**\n     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.\n     */\n    navigateList(event) {\n        if (event.key === \"Enter\" || event.key === \" \") {\n            if (this.listElementList.some(option => option.nativeElement === event.target)) {\n                event.preventDefault();\n            }\n            if (event.key === \"Enter\") {\n                this.doClick(event, this.getCurrentItem());\n            }\n        }\n        else if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n            event.preventDefault();\n            if (event.key === \"ArrowDown\") {\n                if (this.hasNextElement()) {\n                    this.getNextElement()?.scrollIntoView({ block: \"end\" });\n                }\n                else {\n                    this.blurIntent.emit(\"bottom\");\n                }\n            }\n            else if (event.key === \"ArrowUp\") {\n                if (this.hasPrevElement()) {\n                    this.getPrevElement().scrollIntoView({ block: \"nearest\" });\n                }\n                else {\n                    this.blurIntent.emit(\"top\");\n                }\n            }\n            setTimeout(() => {\n                this.highlightedItem = this.getItemId(this.index);\n            });\n        }\n    }\n    /**\n     * Emits the selected item or items after a mouse click event has occurred.\n     */\n    doClick(event, item) {\n        event.preventDefault();\n        if (item && !item.disabled) {\n            this.list.nativeElement.focus();\n            if (this.type === \"single\") {\n                item.selected = true;\n                // reset the selection\n                for (let otherItem of this.getListItems()) {\n                    if (item !== otherItem) {\n                        otherItem.selected = false;\n                    }\n                }\n            }\n            else {\n                item.selected = !item.selected;\n            }\n            this.index = this.displayItems.indexOf(item);\n            this.highlightedItem = this.getItemId(this.index);\n            this.doEmitSelect(false);\n            this.appRef.tick();\n        }\n    }\n    onItemFocus(index) {\n        const element = this.listElementList.toArray()[index].nativeElement;\n        element.classList.add(\"cds--list-box__menu-item--highlighted\");\n        element.tabIndex = 0;\n    }\n    onItemBlur(index) {\n        const element = this.listElementList.toArray()[index].nativeElement;\n        element.classList.remove(\"cds--list-box__menu-item--highlighted\");\n        element.tabIndex = -1;\n    }\n    /**\n     * Emits the scroll event of the options list\n     */\n    emitScroll(event) {\n        const atTop = event.srcElement.scrollTop === 0;\n        const atBottom = event.srcElement.scrollHeight - event.srcElement.scrollTop === event.srcElement.clientHeight;\n        const customScrollEvent = { atTop, atBottom, event };\n        this.scroll.emit(customScrollEvent);\n    }\n    /**\n     * Subscribe the function passed to an internal observable that will resolve once the items are ready\n     */\n    onItemsReady(subcription) {\n        // this subscription will auto unsubscribe because of the `first()` pipe\n        (this._itemsReady || of(true)).pipe(first()).subscribe(subcription);\n    }\n    reorderSelected(moveFocus = true) {\n        this.displayItems = [...this.getSelected(), ...this.getListItems().filter(item => !item.selected)];\n        if (moveFocus) {\n            setTimeout(() => {\n                this.updateIndex();\n                this.highlightedItem = this.getItemId(this.index);\n            });\n        }\n    }\n}\nDropdownList.listCount = 0;\nDropdownList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownList, deps: [{ token: i0.ElementRef }, { token: i1$1.I18n }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\nDropdownList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: DropdownList, selector: \"cds-dropdown-list, ibm-dropdown-list\", inputs: { ariaLabel: \"ariaLabel\", items: \"items\", listTpl: \"listTpl\", type: \"type\", showTitles: \"showTitles\" }, outputs: { select: \"select\", scroll: \"scroll\", blurIntent: \"blurIntent\" }, providers: [\n        {\n            provide: AbstractDropdownView,\n            useExisting: DropdownList\n        }\n    ], viewQueries: [{ propertyName: \"list\", first: true, predicate: [\"list\"], descendants: true, static: true }, { propertyName: \"listElementList\", predicate: [\"listItem\"], descendants: true }], ngImport: i0, template: `\n\t\t<ul\n\t\t\t#list\n\t\t\t[id]=\"listId\"\n\t\t\trole=\"listbox\"\n\t\t\tclass=\"cds--list-box__menu cds--multi-select\"\n\t\t\t(scroll)=\"emitScroll($event)\"\n\t\t\t(keydown)=\"navigateList($event)\"\n\t\t\ttabindex=\"-1\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-activedescendant]=\"highlightedItem\">\n\t\t\t<li\n\t\t\t\trole=\"option\"\n\t\t\t\t*ngFor=\"let item of displayItems; let i = index\"\n\t\t\t\t(click)=\"doClick($event, item)\"\n\t\t\t\tclass=\"cds--list-box__menu-item\"\n\t\t\t\t[attr.aria-selected]=\"item.selected\"\n\t\t\t\t[id]=\"getItemId(i)\"\n\t\t\t\t[attr.title]=\" showTitles ? item.content : null\"\n\t\t\t\t[attr.disabled]=\"item.disabled ? true : null\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--list-box__menu-item--active': item.selected,\n\t\t\t\t\t'cds--list-box__menu-item--highlighted': highlightedItem === getItemId(i)\n\t\t\t\t}\">\n\t\t\t\t<div\n\t\t\t\t\t#listItem\n\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\tclass=\"cds--list-box__menu-item__option\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'multi'\"\n\t\t\t\t\t\tclass=\"cds--form-item cds--checkbox-wrapper\">\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t[attr.data-contained-checkbox-state]=\"item.selected\"\n\t\t\t\t\t\t\tclass=\"cds--checkbox-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\"cds--checkbox\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t[checked]=\"item.selected\"\n\t\t\t\t\t\t\t\t[disabled]=\"item.disabled\"\n\t\t\t\t\t\t\t\ttabindex=\"-1\">\n\t\t\t\t\t\t\t<span class=\"cds--checkbox-appearance\"></span>\n\t\t\t\t\t\t\t<span class=\"cds--checkbox-label-text\">{{item.content}}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-container *ngIf=\"!listTpl && type === 'single'\">{{item.content}}</ng-container>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'single'\"\n\t\t\t\t\t\tcdsIcon=\"checkmark\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__menu-item__selected-icon\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"listTpl\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{item: item}\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"listTpl\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t</ul>`, isInline: true, dependencies: [{ kind: \"directive\", type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i5.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownList, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-dropdown-list, ibm-dropdown-list\",\n                    template: `\n\t\t<ul\n\t\t\t#list\n\t\t\t[id]=\"listId\"\n\t\t\trole=\"listbox\"\n\t\t\tclass=\"cds--list-box__menu cds--multi-select\"\n\t\t\t(scroll)=\"emitScroll($event)\"\n\t\t\t(keydown)=\"navigateList($event)\"\n\t\t\ttabindex=\"-1\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-activedescendant]=\"highlightedItem\">\n\t\t\t<li\n\t\t\t\trole=\"option\"\n\t\t\t\t*ngFor=\"let item of displayItems; let i = index\"\n\t\t\t\t(click)=\"doClick($event, item)\"\n\t\t\t\tclass=\"cds--list-box__menu-item\"\n\t\t\t\t[attr.aria-selected]=\"item.selected\"\n\t\t\t\t[id]=\"getItemId(i)\"\n\t\t\t\t[attr.title]=\" showTitles ? item.content : null\"\n\t\t\t\t[attr.disabled]=\"item.disabled ? true : null\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--list-box__menu-item--active': item.selected,\n\t\t\t\t\t'cds--list-box__menu-item--highlighted': highlightedItem === getItemId(i)\n\t\t\t\t}\">\n\t\t\t\t<div\n\t\t\t\t\t#listItem\n\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\tclass=\"cds--list-box__menu-item__option\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'multi'\"\n\t\t\t\t\t\tclass=\"cds--form-item cds--checkbox-wrapper\">\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t[attr.data-contained-checkbox-state]=\"item.selected\"\n\t\t\t\t\t\t\tclass=\"cds--checkbox-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\"cds--checkbox\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t[checked]=\"item.selected\"\n\t\t\t\t\t\t\t\t[disabled]=\"item.disabled\"\n\t\t\t\t\t\t\t\ttabindex=\"-1\">\n\t\t\t\t\t\t\t<span class=\"cds--checkbox-appearance\"></span>\n\t\t\t\t\t\t\t<span class=\"cds--checkbox-label-text\">{{item.content}}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-container *ngIf=\"!listTpl && type === 'single'\">{{item.content}}</ng-container>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'single'\"\n\t\t\t\t\t\tcdsIcon=\"checkmark\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__menu-item__selected-icon\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"listTpl\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{item: item}\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"listTpl\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t</ul>`,\n                    providers: [\n                        {\n                            provide: AbstractDropdownView,\n                            useExisting: DropdownList\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.I18n }, { type: i0.ApplicationRef }]; }, propDecorators: { ariaLabel: [{\n                type: Input\n            }], items: [{\n                type: Input\n            }], listTpl: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], scroll: [{\n                type: Output\n            }], blurIntent: [{\n                type: Output\n            }], list: [{\n                type: ViewChild,\n                args: [\"list\", { static: true }]\n            }], type: [{\n                type: Input\n            }], showTitles: [{\n                type: Input\n            }], listElementList: [{\n                type: ViewChildren,\n                args: [\"listItem\"]\n            }] } });\n\nclass ScrollableList {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        /**\n         * Optional target list to scroll\n         */\n        this.nScrollableList = null;\n        /**\n         * Enables or disables scrolling for the whole directive\n         */\n        this.scrollEnabled = true;\n        /**\n         * How many lines to scroll by each time `wheel` fires\n         * Defaults to 10 - based on testing this isn't too fast or slow on any platform\n         */\n        this.scrollBy = 10;\n        this.canScrollUp = false;\n        this.canScrollDown = false;\n        this.list = this.elementRef.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.scrollEnabled) {\n            if (changes.scrollEnabled.currentValue) {\n                this.list.style.overflow = \"hidden\";\n                this.scrollUpTarget.style.display = \"flex\";\n                this.scrollDownTarget.style.display = \"flex\";\n                this.canScrollUp = true;\n                this.canScrollDown = true;\n                this.updateScrollHeight();\n                this.checkScrollArrows();\n                setTimeout(() => {\n                    this.checkScrollArrows();\n                });\n            }\n            else {\n                this.scrollUpTarget.style.display = \"none\";\n                this.scrollDownTarget.style.display = \"none\";\n                this.canScrollUp = false;\n                this.canScrollDown = false;\n                this.list.style.height = null;\n                this.list.style.overflow = null;\n                clearInterval(this.hoverScrollInterval);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        if (this.nScrollableList) {\n            this.list = this.elementRef.nativeElement.querySelector(this.nScrollableList);\n        }\n        this.scrollUpTarget.addEventListener(\"mouseover\", () => this.onHoverUp(true));\n        this.scrollUpTarget.addEventListener(\"mouseout\", () => this.onHoverUp(false));\n        this.scrollDownTarget.addEventListener(\"mouseover\", () => this.onHoverDown(true));\n        this.scrollDownTarget.addEventListener(\"mouseout\", () => this.onHoverDown(false));\n    }\n    updateScrollHeight() {\n        if (this.scrollEnabled) {\n            const container = this.elementRef.nativeElement.parentElement;\n            const containerRect = container.getBoundingClientRect();\n            const innerHeightDiff = this.list.getBoundingClientRect().top - containerRect.top;\n            const outerHeightDiff = containerRect.height - (containerRect.bottom - window.innerHeight);\n            // 40 gives us some padding between the bottom of the list,\n            // the bottom of the window, and the scroll down button\n            const height = outerHeightDiff - innerHeightDiff - 40;\n            this.list.style.height = `${height}px`;\n        }\n    }\n    checkScrollArrows() {\n        const scrollUpHeight = this.scrollUpTarget.offsetHeight;\n        const scrollDownHeight = this.scrollDownTarget.offsetHeight;\n        if (this.list.scrollTop === 0) {\n            if (this.canScrollUp) {\n                this.list.style.height = `${parseInt(this.list.style.height, 10) + scrollUpHeight}px`;\n            }\n            this.scrollUpTarget.style.display = \"none\";\n            this.canScrollUp = false;\n        }\n        else if (this.list.scrollTop === this.list.scrollTopMax) {\n            if (this.canScrollDown) {\n                this.list.style.height = `${parseInt(this.list.style.height, 10) + scrollDownHeight}px`;\n            }\n            this.scrollDownTarget.style.display = \"none\";\n            this.canScrollDown = false;\n        }\n        else {\n            if (!this.canScrollUp) {\n                this.list.style.height = `${parseInt(this.list.style.height, 10) - scrollUpHeight}px`;\n            }\n            if (!this.canScrollDown) {\n                this.list.style.height = `${parseInt(this.list.style.height, 10) - scrollDownHeight}px`;\n            }\n            this.scrollUpTarget.style.display = \"flex\";\n            this.scrollDownTarget.style.display = \"flex\";\n            this.canScrollUp = true;\n            this.canScrollDown = true;\n        }\n    }\n    onWheel(event) {\n        if (event.deltaY < 0) {\n            this.list.scrollTop -= this.scrollBy;\n        }\n        else {\n            this.list.scrollTop += this.scrollBy;\n        }\n        // only prevent the parent/window from scrolling if we can scroll\n        if (!(this.list.scrollTop === this.list.scrollTopMax || this.list.scrollTop === 0)) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.checkScrollArrows();\n    }\n    onTouchStart(event) {\n        if (event.touches[0]) {\n            this.lastTouch = event.touches[0].clientY;\n        }\n    }\n    onTouchMove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.touches[0]) {\n            const touch = event.touches[0];\n            this.list.scrollTop += this.lastTouch - touch.clientY;\n            this.lastTouch = touch.clientY;\n            this.checkScrollArrows();\n        }\n    }\n    hoverScrollBy(hovering, amount) {\n        if (hovering) {\n            this.hoverScrollInterval = setInterval(() => {\n                this.list.scrollTop += amount;\n                this.checkScrollArrows();\n            }, 1);\n        }\n        else {\n            clearInterval(this.hoverScrollInterval);\n        }\n    }\n    onHoverUp(hovering) {\n        // how many px/lines to scroll by on hover\n        // 3 is just a random number that felt good\n        // 1 and 2 are too slow, 4 works but it might be a tad fast\n        this.hoverScrollBy(hovering, -3);\n    }\n    onHoverDown(hovering) {\n        this.hoverScrollBy(hovering, 3);\n    }\n    onKeyDown(event) {\n        if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n            this.checkScrollArrows();\n        }\n    }\n}\nScrollableList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ScrollableList, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nScrollableList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ScrollableList, selector: \"[cdsScrollableList], [ibmScrollableList]\", inputs: { nScrollableList: \"nScrollableList\", scrollEnabled: \"scrollEnabled\", scrollUpTarget: \"scrollUpTarget\", scrollDownTarget: \"scrollDownTarget\", scrollBy: \"scrollBy\" }, host: { listeners: { \"wheel\": \"onWheel($event)\", \"touchstart\": \"onTouchStart($event)\", \"touchmove\": \"onTouchMove($event)\", \"keydown\": \"onKeyDown($event)\" } }, exportAs: [\"scrollable-list\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ScrollableList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsScrollableList], [ibmScrollableList]\",\n                    exportAs: \"scrollable-list\"\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { nScrollableList: [{\n                type: Input\n            }], scrollEnabled: [{\n                type: Input\n            }], scrollUpTarget: [{\n                type: Input\n            }], scrollDownTarget: [{\n                type: Input\n            }], scrollBy: [{\n                type: Input\n            }], onWheel: [{\n                type: HostListener,\n                args: [\"wheel\", [\"$event\"]]\n            }], onTouchStart: [{\n                type: HostListener,\n                args: [\"touchstart\", [\"$event\"]]\n            }], onTouchMove: [{\n                type: HostListener,\n                args: [\"touchmove\", [\"$event\"]]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\nclass DropdownModule {\n}\nDropdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDropdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownModule, declarations: [Dropdown,\n        DropdownList,\n        ScrollableList,\n        AbstractDropdownView], imports: [CommonModule,\n        FormsModule,\n        I18nModule,\n        PlaceholderModule,\n        UtilsModule,\n        IconModule], exports: [Dropdown,\n        DropdownList,\n        ScrollableList,\n        AbstractDropdownView] });\nDropdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownModule, providers: [DropdownService], imports: [CommonModule,\n        FormsModule,\n        I18nModule,\n        PlaceholderModule,\n        UtilsModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: DropdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        Dropdown,\n                        DropdownList,\n                        ScrollableList,\n                        AbstractDropdownView\n                    ],\n                    exports: [\n                        Dropdown,\n                        DropdownList,\n                        ScrollableList,\n                        AbstractDropdownView\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        I18nModule,\n                        PlaceholderModule,\n                        UtilsModule,\n                        IconModule\n                    ],\n                    providers: [DropdownService]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractDropdownView, Dropdown, DropdownList, DropdownModule, DropdownService, ScrollableList };\n"],"x_google_ignoreList":[0,1]}