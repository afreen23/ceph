{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-radio_mjs.js","mappings":"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","names":["_c0","_c1","a0","Radio_input_0_Template","rf","ctx","_r1","i0","$event","ctx_r1","onChange","onClick","checked","disabled","disabledFromGroup","name","id","required","value","ariaLabelledby","Radio_div_1_Template","_c2","a1","a2","a3","_c3","RadioGroup_legend_1_1_ng_template_0_Template","RadioGroup_legend_1_1_Template","ctx_r0","legend","RadioGroup_legend_1_ng_template_2_Template","RadioGroup_legend_1_Template","legendLabel_r2","isTemplate","RadioGroup_ng_container_4_ng_container_3_Template","invalidText","RadioGroup_ng_container_4_4_ng_template_0_Template","RadioGroup_ng_container_4_4_Template","RadioGroup_ng_container_4_Template","RadioGroup_ng_container_5_ng_container_3_Template","warnText","RadioGroup_ng_container_5_4_ng_template_0_Template","RadioGroup_ng_container_5_4_Template","RadioGroup_ng_container_5_Template","RadioGroup_div_6_ng_container_1_Template","helperText","RadioGroup_div_6_2_ng_template_0_Template","RadioGroup_div_6_2_Template","RadioGroup_div_6_Template","RadioChange","constructor","source","this","Radio","labelPlacement","skeleton","radioCount","change","EventEmitter","hostClass","_labelledby","radioChangeHandler","event","labelLeft","stopPropagation","target","radioEvent","emit","registerRadioChangeHandler","fn","setDisabledFromGroup","ɵfac","__ngFactoryType__","ɵcmp","type","selectors","hostVars","hostBindings","inputs","ariaLabel","outputs","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","ngContentSelectors","decls","vars","consts","template","dependencies","i1","encapsulation","RadioGroup","orientation","invalid","warn","radioButtonGroupClass","isInitialized","_disabled","_skeleton","_value","_selected","_name","radioGroupCount","onTouched","propagateChange","_","selected","checkSelectedRadio","newValue","updateSelectedRadioFromValue","updateRadios","updateChildren","alreadySelected","radios","forEach","radio","setDisabledState","isDisabled","emitChangeEvent","setTimeout","writeValue","ngAfterContentInit","changes","subscribe","updateRadioChangeHandler","ngAfterViewInit","registerOnChange","registerOnTouched","focusOut","TemplateRef","child","contentQueries","dirIndex","_t","i2","RadioModule","ɵmod","ɵinj","imports","CommonModule","FormsModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-radio.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, HostBinding, TemplateRef, ContentChildren, forwardRef, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\n\n/**\n * Used to emit changes performed on a `Radio`.\n */\nclass RadioChange {\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n\n/**\n * class: Radio (extends Checkbox)\n *\n * selector: `n-radio`\n *\n * source: `src/forms/radio.component.ts`\n *\n * ```html\n *\t<cds-radio [(ngModel)]=\"radioState\">Radio</cds-radio>\n * ```\n *\n * Also see: [`RadioGroup`](#cds-radio-group)\n */\nclass Radio {\n    constructor() {\n        this.checked = false;\n        this.name = \"\";\n        this.disabled = false;\n        this.labelPlacement = \"right\";\n        /**\n         * Sets the HTML required attribute\n         */\n        this.required = false;\n        /**\n         * Set to `true` for a loading table.\n         */\n        this.skeleton = false;\n        /**\n         * The id for the `Radio`.\n         */\n        this.id = `radio-${Radio.radioCount++}`;\n        /**\n         * emits when the state of the radio changes\n         */\n        this.change = new EventEmitter();\n        this.hostClass = true;\n        /**\n         * Reflects whether or not the input is disabled at `RadioGroup` level.\n         */\n        this.disabledFromGroup = false;\n        this._labelledby = \"\";\n        /**\n         * Handler provided by the `RadioGroup` to bubble events up\n         */\n        this.radioChangeHandler = (event) => { };\n    }\n    set ariaLabelledby(value) {\n        this._labelledby = value;\n    }\n    get ariaLabelledby() {\n        if (this._labelledby) {\n            return this._labelledby;\n        }\n        return `label-${this.id}`;\n    }\n    get labelLeft() {\n        return this.labelPlacement === \"left\";\n    }\n    /**\n     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.\n     * Emits the changes of both the `RadioGroup` and `Radio`.\n     */\n    onChange(event) {\n        event.stopPropagation();\n    }\n    onClick(event) {\n        this.checked = event.target.checked;\n        const radioEvent = new RadioChange(this, this.value);\n        this.change.emit(radioEvent);\n        this.radioChangeHandler(radioEvent);\n    }\n    /**\n     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events\n     * @param fn callback that expects a `RadioChange` as an argument\n     */\n    registerRadioChangeHandler(fn) {\n        this.radioChangeHandler = fn;\n    }\n    setDisabledFromGroup(disabled) {\n        this.disabledFromGroup = disabled;\n    }\n}\n/**\n * Used to dynamically create unique ids for the `Radio`.\n */\nRadio.radioCount = 0;\nRadio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Radio, deps: [], target: i0.ɵɵFactoryTarget.Component });\nRadio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Radio, selector: \"cds-radio, ibm-radio\", inputs: { checked: \"checked\", name: \"name\", disabled: \"disabled\", labelPlacement: \"labelPlacement\", ariaLabelledby: \"ariaLabelledby\", ariaLabel: \"ariaLabel\", required: \"required\", value: \"value\", skeleton: \"skeleton\", id: \"id\" }, outputs: { change: \"change\" }, host: { properties: { \"class.cds--radio-button-wrapper\": \"this.hostClass\", \"class.cds--radio-button-wrapper--label-left\": \"this.labelLeft\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: Radio,\n            multi: true\n        }\n    ], ngImport: i0, template: `\n\t\t<input\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tclass=\"cds--radio-button\"\n\t\t\ttype=\"radio\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled || disabledFromGroup\"\n\t\t\t[name]=\"name\"\n\t\t\t[id]=\"id\"\n\t\t\t[required]=\"required\"\n\t\t\t[attr.value]=\"value\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<div *ngIf=\"skeleton\" class=\"cds--radio-button cds--skeleton\"></div>\n\t\t<label\n\t\t\tclass=\"cds--radio-button__label\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[for]=\"id\"\n\t\t\tid=\"label-{{id}}\">\n\t\t\t<span class=\"cds--radio-button__appearance\"></span>\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Radio, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-radio, ibm-radio\",\n                    template: `\n\t\t<input\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tclass=\"cds--radio-button\"\n\t\t\ttype=\"radio\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled || disabledFromGroup\"\n\t\t\t[name]=\"name\"\n\t\t\t[id]=\"id\"\n\t\t\t[required]=\"required\"\n\t\t\t[attr.value]=\"value\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<div *ngIf=\"skeleton\" class=\"cds--radio-button cds--skeleton\"></div>\n\t\t<label\n\t\t\tclass=\"cds--radio-button__label\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[for]=\"id\"\n\t\t\tid=\"label-{{id}}\">\n\t\t\t<span class=\"cds--radio-button__appearance\"></span>\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: Radio,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { checked: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], labelPlacement: [{\n                type: Input\n            }], ariaLabelledby: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], hostClass: [{\n                type: HostBinding,\n                args: [\"class.cds--radio-button-wrapper\"]\n            }], labelLeft: [{\n                type: HostBinding,\n                args: [\"class.cds--radio-button-wrapper--label-left\"]\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { RadioModule } from 'carbon-components-angular';\n * ```\n *\n * Ex:\n *\n * ```html\n * <cds-radio-group [(ngModel)]=\"radio\">\n * \t<cds-radio *ngFor=\"let one of manyRadios\" [value]=\"one\">\n *\t\tRadio {{one}}\n * \t</cds-radio>\n * </cds-radio-group>\n *\n * Radio selected: {{radio}}\n * ```\n *\n * ```ts\n *\tconst manyRadios = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n * ```\n *\n * [See demo](../../?path=/story/components-radio--basic)\n */\nclass RadioGroup {\n    constructor() {\n        this.orientation = \"horizontal\";\n        this.labelPlacement = \"right\";\n        /**\n         * Set to `true` to show the invalid state.\n         */\n        this.invalid = false;\n        /**\n        * Set to `true` to show a warning (contents set by warnText)\n        */\n        this.warn = false;\n        /**\n         * Emits event notifying other classes of a change using a `RadioChange` class.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Binds 'cds--form-item' value to the class for `RadioGroup`.\n         */\n        this.radioButtonGroupClass = true;\n        /**\n         * To track whether the `RadioGroup` has been initialized.\n         */\n        this.isInitialized = false;\n        /**\n         * Reflects whether or not the input is disabled and cannot be selected.\n         */\n        this._disabled = false;\n        /**\n         * Reflects whether or not the dropdown is loading.\n         */\n        this._skeleton = false;\n        /**\n         * The value of the selected option within the `RadioGroup`.\n         */\n        this._value = null;\n        /**\n         * The `Radio` within the `RadioGroup` that is selected.\n         */\n        this._selected = null;\n        /**\n         * The name attribute associated with the `RadioGroup`.\n         */\n        this._name = `radio-group-${RadioGroup.radioGroupCount++}`;\n        /**\n         * Needed to properly implement ControlValueAccessor.\n         */\n        this.onTouched = () => { };\n        /**\n         * Method set in registerOnChange to propagate changes back to the form.\n         */\n        this.propagateChange = (_) => { };\n    }\n    /**\n     * Sets the passed in `Radio` item as the selected input within the `RadioGroup`.\n     */\n    set selected(selected) {\n        const alreadySelected = (this._selected && this._selected.value) === (selected && selected.value);\n        if (alreadySelected) {\n            // no need to redo\n            return;\n        }\n        if (this._selected) {\n            this._selected.checked = false;\n        }\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadio();\n    }\n    /**\n     * Returns the `Radio` that is selected within the `RadioGroup`.\n     */\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * Sets the value/state of the selected `Radio` within the `RadioGroup` to the passed in value.\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadio();\n        }\n    }\n    /**\n     * Returns the value/state of the selected `Radio` within the `RadioGroup`.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * Replaces the name associated with the `RadioGroup` with the provided parameter.\n     */\n    set name(name) {\n        this._name = name;\n        this.updateRadios();\n    }\n    /**\n     * Returns the associated name of the `RadioGroup`.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Set to true to disable the whole radio group\n     */\n    set disabled(disabled) {\n        this._disabled = disabled;\n        this.updateRadios();\n    }\n    /**\n     * Returns the disabled value for the `RadioGroup`.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * Returns the skeleton value in the `RadioGroup` if there is one.\n     */\n    get skeleton() {\n        return this._skeleton;\n    }\n    /**\n     * Sets the skeleton value for all `Radio` to the skeleton value of `RadioGroup`.\n     */\n    set skeleton(value) {\n        this._skeleton = value;\n        this.updateChildren();\n    }\n    /**\n     * Updates the selected `Radio` to be checked (selected).\n     */\n    checkSelectedRadio() {\n        if (this.selected && !this._selected.checked) {\n            this.selected.checked = true;\n        }\n    }\n    /**\n     * Use the value of the `RadioGroup` to update the selected radio to the right state (selected state).\n     */\n    updateSelectedRadioFromValue() {\n        let alreadySelected = this._selected != null && this._selected.value === this._value;\n        if (this.radios && !alreadySelected) {\n            if (this.selected && this.value) {\n                this.selected.checked = false;\n            }\n            this._selected = null;\n            this.radios.forEach(radio => {\n                if (radio.checked || radio.value === this._value) {\n                    this._selected = radio;\n                }\n            });\n            if (this.selected && !this.value) {\n                this._value = this.selected.value;\n            }\n        }\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the `RadioGroup`.\n     *\n     * ex: `this.formGroup.get(\"myRadioGroup\").disable();`\n     *\n     * @param isDisabled `true` to disable the inputs\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Creates a class of `RadioChange` to emit the change in the `RadioGroup`.\n     */\n    emitChangeEvent(event) {\n        this.change.emit(event);\n        this.propagateChange(event.value);\n        this.onTouched();\n    }\n    /**\n     * Synchronizes radio properties.\n     */\n    updateRadios() {\n        if (this.radios) {\n            setTimeout(() => {\n                this.radios.forEach(radio => {\n                    radio.name = this.name;\n                    radio.setDisabledFromGroup(this.disabled);\n                    if (this.labelPlacement === \"left\") {\n                        radio.labelPlacement = \"left\";\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * Updates the value of the `RadioGroup` using the provided parameter.\n     */\n    writeValue(value) {\n        this.value = value;\n        setTimeout(() => {\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadio();\n        });\n    }\n    ngAfterContentInit() {\n        this.radios.changes.subscribe(() => {\n            this.updateRadios();\n            this.updateRadioChangeHandler();\n        });\n        this.updateChildren();\n        this.updateRadioChangeHandler();\n    }\n    ngAfterViewInit() {\n        this.updateRadios();\n    }\n    /**\n     * Used to set method to propagate changes back to the form.\n     */\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    focusOut() {\n        this.onTouched();\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    updateChildren() {\n        if (this.radios) {\n            this.radios.forEach(child => child.skeleton = this.skeleton);\n        }\n    }\n    updateRadioChangeHandler() {\n        this.radios.forEach(radio => {\n            radio.registerRadioChangeHandler((event) => {\n                if ((this.selected && this.selected.value) === event.value) {\n                    // no need to redo\n                    return;\n                }\n                // deselect previous radio\n                if (this.selected) {\n                    this.selected.checked = false;\n                }\n                // update selected and value from the event\n                this._selected = event.source;\n                this._value = event.value;\n                // bubble the event\n                this.emitChangeEvent(event);\n            });\n        });\n    }\n}\n/**\n * Used for creating the `RadioGroup` 'name' property dynamically.\n */\nRadioGroup.radioGroupCount = 0;\nRadioGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioGroup, deps: [], target: i0.ɵɵFactoryTarget.Component });\nRadioGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: RadioGroup, selector: \"cds-radio-group, ibm-radio-group\", inputs: { selected: \"selected\", value: \"value\", name: \"name\", disabled: \"disabled\", skeleton: \"skeleton\", orientation: \"orientation\", labelPlacement: \"labelPlacement\", legend: \"legend\", ariaLabel: \"ariaLabel\", ariaLabelledby: \"ariaLabelledby\", helperText: \"helperText\", invalid: \"invalid\", invalidText: \"invalidText\", warn: \"warn\", warnText: \"warnText\" }, outputs: { change: \"change\" }, host: { listeners: { \"focusout\": \"focusOut()\" }, properties: { \"class.cds--form-item\": \"this.radioButtonGroupClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: RadioGroup,\n            multi: true\n        }\n    ], queries: [{ propertyName: \"radios\", predicate: i0.forwardRef(function () { return Radio; }) }], ngImport: i0, template: `\n\t\t<fieldset\n\t\t\tclass=\"cds--radio-button-group\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--radio-button-group--vertical': orientation === 'vertical',\n\t\t\t\t'cds--radio-button-group--label-left': labelPlacement === 'left',\n\t\t\t\t'cds--radio-button-group--invalid': invalid,\n\t\t\t\t'cds--radio-button-group--warning': !invalid && warn\n\t\t\t}\"\n\t\t\t[attr.data-invalid]=\"invalid ? true : null\">\n\t\t\t<legend *ngIf=\"legend\" class=\"cds--label\">\n\t\t\t\t<ng-template *ngIf=\"isTemplate(legend); else legendLabel;\" [ngTemplateOutlet]=\"legend\"></ng-template>\n\t\t\t\t<ng-template #legendLabel>{{legend}}</ng-template>\n\t\t\t</legend>\n\t\t\t<ng-content></ng-content>\n\t\t</fieldset>\n\t\t<div class=\"cds--radio-button__validation-msg\">\n\t\t\t<ng-container *ngIf=\"invalid\">\n\t\t\t\t<svg\n\t\t\t\t\tcdsIcon=\"warning--filled\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\tclass=\"cds--radio-button__invalid-icon\">\n\t\t\t\t</svg>\n\t\t\t\t<div class=\"cds--form-requirement\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t\t<ng-container *ngIf=\"!invalid && warn\">\n\t\t\t\t<svg\n\t\t\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\t\t\tclass=\"cds--radio-button__invalid-icon cds--radio-button__invalid-icon--warning\"\n\t\t\t\t\tsize=\"16\">\n\t\t\t\t</svg>\n\t\t\t\t<div class=\"cds--form-requirement\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<div\n\t\t\t*ngIf=\"helperText && !invalid && !warn\"\n\t\t\tclass=\"cds--form__helper-text\"\n\t\t\t[ngClass]=\"{'cds--form__helper-text--disabled': disabled}\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-radio-group, ibm-radio-group\",\n                    template: `\n\t\t<fieldset\n\t\t\tclass=\"cds--radio-button-group\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--radio-button-group--vertical': orientation === 'vertical',\n\t\t\t\t'cds--radio-button-group--label-left': labelPlacement === 'left',\n\t\t\t\t'cds--radio-button-group--invalid': invalid,\n\t\t\t\t'cds--radio-button-group--warning': !invalid && warn\n\t\t\t}\"\n\t\t\t[attr.data-invalid]=\"invalid ? true : null\">\n\t\t\t<legend *ngIf=\"legend\" class=\"cds--label\">\n\t\t\t\t<ng-template *ngIf=\"isTemplate(legend); else legendLabel;\" [ngTemplateOutlet]=\"legend\"></ng-template>\n\t\t\t\t<ng-template #legendLabel>{{legend}}</ng-template>\n\t\t\t</legend>\n\t\t\t<ng-content></ng-content>\n\t\t</fieldset>\n\t\t<div class=\"cds--radio-button__validation-msg\">\n\t\t\t<ng-container *ngIf=\"invalid\">\n\t\t\t\t<svg\n\t\t\t\t\tcdsIcon=\"warning--filled\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\tclass=\"cds--radio-button__invalid-icon\">\n\t\t\t\t</svg>\n\t\t\t\t<div class=\"cds--form-requirement\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t\t<ng-container *ngIf=\"!invalid && warn\">\n\t\t\t\t<svg\n\t\t\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\t\t\tclass=\"cds--radio-button__invalid-icon cds--radio-button__invalid-icon--warning\"\n\t\t\t\t\tsize=\"16\">\n\t\t\t\t</svg>\n\t\t\t\t<div class=\"cds--form-requirement\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<div\n\t\t\t*ngIf=\"helperText && !invalid && !warn\"\n\t\t\tclass=\"cds--form__helper-text\"\n\t\t\t[ngClass]=\"{'cds--form__helper-text--disabled': disabled}\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: RadioGroup,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], labelPlacement: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], ariaLabelledby: [{\n                type: Input\n            }], helperText: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], invalidText: [{\n                type: Input\n            }], warn: [{\n                type: Input\n            }], warnText: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => Radio)]\n            }], radioButtonGroupClass: [{\n                type: HostBinding,\n                args: [\"class.cds--form-item\"]\n            }], focusOut: [{\n                type: HostListener,\n                args: [\"focusout\"]\n            }] } });\n\n// modules\nclass RadioModule {\n}\nRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioModule, declarations: [Radio,\n        RadioGroup], imports: [CommonModule,\n        FormsModule,\n        IconModule], exports: [Radio,\n        RadioGroup] });\nRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioModule, imports: [CommonModule,\n        FormsModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        Radio,\n                        RadioGroup\n                    ],\n                    exports: [\n                        Radio,\n                        RadioGroup\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        IconModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Radio, RadioChange, RadioGroup, RadioModule };\n"],"x_google_ignoreList":[0]}