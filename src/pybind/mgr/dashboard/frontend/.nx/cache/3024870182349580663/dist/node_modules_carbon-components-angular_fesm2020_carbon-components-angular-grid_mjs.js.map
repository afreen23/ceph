{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-grid_mjs.js","mappings":"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","names":["GridService","constructor","this","gridSubject","BehaviorSubject","cssGridEnabled","gridObservable","asObservable","updateGridType","enableCssGrid","next","ɵfac","__ngFactoryType__","ɵprov","i0","token","factory","ColumnDirective","gridService","class","columnNumbers","offsets","columnHang","_columnClasses","isCssGrid","subscription","Subscription","columnClasses","join","classes","split","ngOnInit","subscribe","updateColumnClasses","ngOnChanges","ngOnDestroy","unsubscribe","columnKeys","Object","keys","push","forEach","key","start","end","span","length","err","console","error","ɵdir","type","selectors","hostVars","hostBindings","rf","ctx","inputs","features","RowDirective","baseClass","condensed","narrow","GridDirective","fullWidth","isSubgrid","useCssGrid","enable","flexGrid","flexCondensed","flexNarrow","flexFullWidth","ccsGrid","ccsCondensed","ccsNarrow","ccsFullWidth","subGrid","subCondensed","subNarrow","subFullWidth","cssGridChildren","list","grid","contentQueries","dirIndex","_t","provide","deps","Optional","SkipSelf","useFactory","parentService","GridModule","ɵmod","ɵinj","providers","imports","CommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-grid.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Directive, Optional, HostBinding, Input, SkipSelf, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nclass GridService {\n    constructor() {\n        this.gridSubject = new BehaviorSubject(false);\n        this.cssGridEnabled = false;\n        this.gridObservable = this.gridSubject.asObservable();\n    }\n    /**\n     * Ping all subscribers to update to use Css Grid\n     * @param enableCssGrid\n     */\n    updateGridType(enableCssGrid) {\n        if (this.cssGridEnabled === enableCssGrid) {\n            return;\n        }\n        this.cssGridEnabled = true;\n        this.gridSubject.next(enableCssGrid);\n    }\n}\nGridService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nGridService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass ColumnDirective {\n    constructor(gridService) {\n        this.gridService = gridService;\n        this.class = \"\";\n        /**\n         * Defines columns width for specified breakpoint\n         * Accepts the following formats:\n         * - {[breakpoint]: number}\n         * - {[breakpoint]: \"auto\"} - css only\n         * - {[breakpoint]: {[start|end]: number}} - css only\n         *\n         * Example:\n         * <div cdsCol [columnNumbers]={md: 3, lg: 4}></div>\n         */\n        this.columnNumbers = {};\n        /**\n         * Defines columns offset, which increases the left margin of the column.\n         * This field will only work with flexbox grid.\n         *\n         * Accepts the following formats:\n         * - {[breakpoint]: number}\n         *\n         * Example:\n         * <div cdsCol [offsets]={md: 3, lg: 4}></div>\n         */\n        this.offsets = {};\n        /**\n         * Set to `true` to use css grid column hang class\n         * This will only work when `isCss` property is set to true\n         *\n         * Useful when trying to align content across css grid/subgrid\n         */\n        this.columnHang = false;\n        this._columnClasses = [];\n        this.isCssGrid = false;\n        this.subscription = new Subscription();\n    }\n    get columnClasses() {\n        return this._columnClasses.join(\" \");\n    }\n    set columnClasses(classes) {\n        this._columnClasses = classes.split(\" \");\n    }\n    ngOnInit() {\n        if (this.gridService) {\n            this.subscription = this.gridService.gridObservable.subscribe((isCssGrid) => {\n                this.isCssGrid = isCssGrid;\n                this.updateColumnClasses();\n            });\n        }\n        else {\n            this.updateColumnClasses();\n        }\n    }\n    ngOnChanges() {\n        this.updateColumnClasses();\n    }\n    /**\n     * Unsubscribe from subscription\n     */\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    updateColumnClasses() {\n        try {\n            this._columnClasses = [];\n            const columnKeys = Object.keys(this.columnNumbers);\n            // Assign classes based on the type of grid used.\n            if (this.isCssGrid) {\n                // Default css grid class\n                this._columnClasses.push(\"cds--css-grid-column\");\n                if (this.columnHang) {\n                    this._columnClasses.push(\"cds--grid-column-hang\");\n                }\n                columnKeys.forEach(key => {\n                    /**\n                     * Passing in `auto` to a breakpoint as such: {'md': 'auto'}\n                     * will assign the element which will automatically determine the width of the column\n                     * for the breakpoint passed\n                     */\n                    if (this.columnNumbers[key] === \"auto\") {\n                        this._columnClasses.push(`cds--${key}:col-span-auto`);\n                    }\n                    else if (typeof this.columnNumbers[key] === \"object\") {\n                        /**\n                         * In css grid, objects can be passed to the keys in the following format:\n                         * {'md': {'start': 3}}\n                         *\n                         * These objects are used to position the column\n                         */\n                        if (this.columnNumbers[key][\"start\"]) {\n                            // col-start is simular equivalent of flex offset\n                            this._columnClasses.push(`cds--${key}:col-start-${this.columnNumbers[key].start}`);\n                        }\n                        if (this.columnNumbers[key][\"end\"]) {\n                            this._columnClasses.push(`cds--${key}:col-end-${this.columnNumbers[key].end}`);\n                        }\n                        if (this.columnNumbers[key][\"span\"]) {\n                            this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key].span}`);\n                        }\n                    }\n                    else {\n                        this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key]}`);\n                    }\n                });\n                Object.keys(this.offsets).forEach(key => {\n                    this._columnClasses.push(`cds--${key}:col-start${this.offsets[key] + 1}`);\n                });\n            }\n            else {\n                // Set column classes for flex grid\n                if (columnKeys.length <= 0) {\n                    this._columnClasses.push(\"cds--col\");\n                }\n                columnKeys.forEach(key => {\n                    if (this.columnNumbers[key] === \"nobreak\") {\n                        this._columnClasses.push(`cds--col-${key}`);\n                    }\n                    else {\n                        this._columnClasses.push(`cds--col-${key}-${this.columnNumbers[key]}`);\n                    }\n                });\n                Object.keys(this.offsets).forEach(key => {\n                    this._columnClasses.push(`cds--offset-${key}-${this.offsets[key]}`);\n                });\n            }\n        }\n        catch (err) {\n            console.error(`Malformed \\`offsets\\` or \\`columnNumbers\\`: ${err}`);\n        }\n        /**\n         * Append the classes passed so they aren't overriden when we set the column classes\n         * from host binding\n         */\n        if (this.class) {\n            this._columnClasses.push(this.class);\n        }\n    }\n}\nColumnDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ColumnDirective, deps: [{ token: GridService, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nColumnDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ColumnDirective, selector: \"[cdsCol], [ibmCol]\", inputs: { class: \"class\", columnNumbers: \"columnNumbers\", offsets: \"offsets\", columnHang: \"columnHang\" }, host: { properties: { \"class\": \"this.columnClasses\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ColumnDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsCol], [ibmCol]\"\n                }]\n        }], ctorParameters: function () { return [{ type: GridService, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { columnClasses: [{\n                type: HostBinding,\n                args: [\"class\"]\n            }], class: [{\n                type: Input\n            }], columnNumbers: [{\n                type: Input\n            }], offsets: [{\n                type: Input\n            }], columnHang: [{\n                type: Input\n            }] } });\n\nclass RowDirective {\n    constructor() {\n        this.baseClass = true;\n        this.condensed = false;\n        this.narrow = false;\n    }\n}\nRowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RowDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nRowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: RowDirective, selector: \"[cdsRow], [ibmRow]\", inputs: { condensed: \"condensed\", narrow: \"narrow\" }, host: { properties: { \"class.cds--row\": \"this.baseClass\", \"class.cds--row--condensed\": \"this.condensed\", \"class.cds--row--narrow\": \"this.narrow\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: RowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsRow], [ibmRow]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--row\"]\n            }], condensed: [{\n                type: HostBinding,\n                args: [\"class.cds--row--condensed\"]\n            }, {\n                type: Input\n            }], narrow: [{\n                type: HostBinding,\n                args: [\"class.cds--row--narrow\"]\n            }, {\n                type: Input\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { GridModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-grid--basic)\n */\nclass GridDirective {\n    constructor(gridService) {\n        this.gridService = gridService;\n        /**\n         * Set to `true` to condense the grid\n         */\n        this.condensed = false;\n        /**\n         * Set to `true` to use narrow grid\n         */\n        this.narrow = false;\n        /**\n         * Set to `true` to use the full width\n         */\n        this.fullWidth = false;\n        this.cssGridEnabled = false;\n        this.isSubgrid = false;\n        this.subscription = new Subscription();\n    }\n    /**\n     * Set to `true` to use css grid\n     */\n    set useCssGrid(enable) {\n        this.cssGridEnabled = enable;\n        this.gridService.updateGridType(enable);\n    }\n    // Flex grid\n    get flexGrid() {\n        return !this.cssGridEnabled;\n    }\n    get flexCondensed() {\n        return !this.cssGridEnabled && this.condensed;\n    }\n    get flexNarrow() {\n        return !this.cssGridEnabled && this.narrow;\n    }\n    get flexFullWidth() {\n        return !this.cssGridEnabled && this.fullWidth;\n    }\n    // CSS Grid\n    get ccsGrid() {\n        return this.cssGridEnabled && !this.isSubgrid;\n    }\n    get ccsCondensed() {\n        return this.cssGridEnabled && !this.isSubgrid && this.condensed;\n    }\n    get ccsNarrow() {\n        return this.cssGridEnabled && !this.isSubgrid && this.narrow;\n    }\n    get ccsFullWidth() {\n        return this.cssGridEnabled && !this.isSubgrid && this.fullWidth;\n    }\n    // CSS Sub Grid\n    get subGrid() {\n        return this.cssGridEnabled && this.isSubgrid;\n    }\n    get subCondensed() {\n        return this.cssGridEnabled && this.isSubgrid && this.condensed;\n    }\n    get subNarrow() {\n        return this.cssGridEnabled && this.isSubgrid && this.narrow;\n    }\n    get subFullWidth() {\n        return this.cssGridEnabled && this.isSubgrid && this.fullWidth;\n    }\n    ngOnInit() {\n        this.subscription = this.gridService.gridObservable.subscribe((isCssGrid) => {\n            this.cssGridEnabled = isCssGrid;\n        });\n    }\n    // Make all children grids a sub grid\n    set cssGridChildren(list) {\n        if (this.cssGridEnabled) {\n            list.forEach((grid) => {\n                // Prevents initial (parent) grid element from being turned into a subgrid\n                if (grid === this) {\n                    return;\n                }\n                grid.isSubgrid = true;\n            });\n        }\n    }\n    /**\n     * Unsubscribe from Grid Service subscription\n     */\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nGridDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridDirective, deps: [{ token: GridService }], target: i0.ɵɵFactoryTarget.Directive });\nGridDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: GridDirective, selector: \"[cdsGrid], [ibmGrid]\", inputs: { condensed: \"condensed\", narrow: \"narrow\", fullWidth: \"fullWidth\", useCssGrid: \"useCssGrid\" }, host: { properties: { \"class.cds--grid\": \"this.flexGrid\", \"class.cds--grid--condensed\": \"this.flexCondensed\", \"class.cds--grid--narrow\": \"this.flexNarrow\", \"class.cds--grid--full-width\": \"this.flexFullWidth\", \"class.cds--css-grid\": \"this.ccsGrid\", \"class.cds--css-grid--condensed\": \"this.ccsCondensed\", \"class.cds--css-grid--narrow\": \"this.ccsNarrow\", \"class.cds--css-grid--full-width\": \"this.ccsFullWidth\", \"class.cds--subgrid\": \"this.subGrid\", \"class.cds--subgrid--condensed\": \"this.subCondensed\", \"class.cds--subgrid--narrow\": \"this.subNarrow\", \"class.cds--subgrid--wide\": \"this.subFullWidth\" } }, providers: [\n        {\n            provide: GridService,\n            deps: [[new Optional(), new SkipSelf(), GridService]],\n            useFactory: (parentService) => {\n                return parentService || new GridService();\n            }\n        }\n    ], queries: [{ propertyName: \"cssGridChildren\", predicate: GridDirective, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsGrid], [ibmGrid]\",\n                    providers: [\n                        {\n                            provide: GridService,\n                            deps: [[new Optional(), new SkipSelf(), GridService]],\n                            useFactory: (parentService) => {\n                                return parentService || new GridService();\n                            }\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: GridService }]; }, propDecorators: { condensed: [{\n                type: Input\n            }], narrow: [{\n                type: Input\n            }], fullWidth: [{\n                type: Input\n            }], useCssGrid: [{\n                type: Input\n            }], flexGrid: [{\n                type: HostBinding,\n                args: [\"class.cds--grid\"]\n            }], flexCondensed: [{\n                type: HostBinding,\n                args: [\"class.cds--grid--condensed\"]\n            }], flexNarrow: [{\n                type: HostBinding,\n                args: [\"class.cds--grid--narrow\"]\n            }], flexFullWidth: [{\n                type: HostBinding,\n                args: [\"class.cds--grid--full-width\"]\n            }], ccsGrid: [{\n                type: HostBinding,\n                args: [\"class.cds--css-grid\"]\n            }], ccsCondensed: [{\n                type: HostBinding,\n                args: [\"class.cds--css-grid--condensed\"]\n            }], ccsNarrow: [{\n                type: HostBinding,\n                args: [\"class.cds--css-grid--narrow\"]\n            }], ccsFullWidth: [{\n                type: HostBinding,\n                args: [\"class.cds--css-grid--full-width\"]\n            }], subGrid: [{\n                type: HostBinding,\n                args: [\"class.cds--subgrid\"]\n            }], subCondensed: [{\n                type: HostBinding,\n                args: [\"class.cds--subgrid--condensed\"]\n            }], subNarrow: [{\n                type: HostBinding,\n                args: [\"class.cds--subgrid--narrow\"]\n            }], subFullWidth: [{\n                type: HostBinding,\n                args: [\"class.cds--subgrid--wide\"]\n            }], cssGridChildren: [{\n                type: ContentChildren,\n                args: [GridDirective, { descendants: true }]\n            }] } });\n\nclass GridModule {\n}\nGridModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGridModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: GridModule, declarations: [ColumnDirective,\n        GridDirective,\n        RowDirective], imports: [CommonModule], exports: [ColumnDirective,\n        GridDirective,\n        RowDirective] });\nGridModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridModule, providers: [GridService], imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: GridModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ColumnDirective,\n                        GridDirective,\n                        RowDirective\n                    ],\n                    exports: [\n                        ColumnDirective,\n                        GridDirective,\n                        RowDirective\n                    ],\n                    providers: [GridService],\n                    imports: [CommonModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ColumnDirective, GridDirective, GridModule, GridService, RowDirective };\n"],"x_google_ignoreList":[0]}