{"version":3,"file":"src_app_ceph_pool_pool_module_ts.js","mappings":"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","names":["ErasureCodeProfileService","constructor","http","this","apiPath","formTooltips","k","$localize","m","plugins","jerasure","description","technique","packetSize","lrc","l","crushLocality","isa","shec","c","clay","d","scalar_mds","crushRoot","crushFailureDomain","crushNumFailureDomains","crushOsdsPerFailureDomain","crushDeviceClass","directory","list","get","create","ecp","post","observe","delete","name","getInfo","i0","i1","factory","ɵfac","providedIn","CrushFailureDomains","ErasureCodeProfile","Osd","Host","CrushNodeSelectionClass","nodes","idTree","allDevices","buckets","failureDomains","failureDomainKeys","devices","deviceCount","autoDeviceUpdate","searchFailureDomains","s","getFailureDomains","search","deviceType","split","node","find","n","some","attr","getSubNodes","createIdTreeFromNodes","filterNodesByDeviceType","forEach","id","subNodes","children","childNode","concat","foundNewNode","doNotInclude","filter","device_class","map","childrenToRemove","includes","toRemoveNext","every","push","_","domains","type","initCrushNodeSelection","rootControl","failureControl","deviceControl","controls","root","failure","device","preSelectRoot","valueChanges","subscribe","onRootChange","onFailureDomainChange","onDeviceChange","rootNode","silentSet","control","value","setValue","emitEvent","Object","keys","length","sort","updateFailureDomain","failureDomain","getIncludedCustomValue","setMostCommonDomain","updateDevices","includedIn","dirty","winner","fD","bucket_r2","domain_r3","ctx_r3","deviceClass_r5","CrushRuleFormModalComponent","formBuilder","activeModal","taskWrapper","crushRuleService","actionLabels","super","submitAction","EventEmitter","action","CREATE","resource","createForm","form","group","Validators","required","pattern","CdValidators","custom","names","indexOf","failure_domain","ngOnInit","tooltips","onSubmit","invalid","setErrors","cdSubmitButton","rule","wrapTaskAroundCall","task","FinishedTask","call","error","complete","close","emit","i2","i3","i4","i5","selectors","outputs","features","decls","vars","consts","i18n_0","CrushRuleFormModalComponent_span_16_Template","CrushRuleFormModalComponent_span_17_Template","CrushRuleFormModalComponent_span_18_Template","CrushRuleFormModalComponent_option_27_Template","CrushRuleFormModalComponent_option_28_Template","CrushRuleFormModalComponent_span_29_Template","CrushRuleFormModalComponent_option_38_Template","CrushRuleFormModalComponent_option_39_Template","CrushRuleFormModalComponent_span_40_Template","CrushRuleFormModalComponent_option_49_Template","_r1","ctx","showError","frm_r6","plugin_r2","ctx_r2","lrcMultiK","ErasureCodeProfileFormModalComponent_div_52_span_7_Template","ErasureCodeProfileFormModalComponent_div_52_span_8_Template","frm_r4","getDMin","getDMax","ErasureCodeProfileFormModalComponent_div_53_ng_container_11_span_1_Template","ErasureCodeProfileFormModalComponent_div_53_ng_container_11_span_2_Template","_r5","toggleDCalc","ErasureCodeProfileFormModalComponent_div_53_span_10_Template","ErasureCodeProfileFormModalComponent_div_53_ng_container_11_Template","ErasureCodeProfileFormModalComponent_div_53_span_12_Template","ErasureCodeProfileFormModalComponent_div_53_span_13_Template","dCalc","icons","unlock","lock","size16","ErasureCodeProfileFormModalComponent_div_54_span_7_Template","ErasureCodeProfileFormModalComponent_div_54_span_8_Template","ErasureCodeProfileFormModalComponent_div_54_span_9_Template","lrcGroups","domain_r6","domain_r7","ErasureCodeProfileFormModalComponent_div_80_option_7_Template","ErasureCodeProfileFormModalComponent_div_80_option_8_Template","ErasureCodeProfileFormModalComponent_div_80_option_9_Template","plugin_r8","ErasureCodeProfileFormModalComponent_div_81_option_7_Template","_c0","PLUGIN","JERASURE","ISA","SHEC","technique_r9","ErasureCodeProfileFormModalComponent_div_82_option_7_Template","plugin","techniques","ErasureCodeProfileFormModalComponent_div_83_span_7_Template","bucket_r10","deviceClass_r11","ErasureCodeProfileFormModalComponent","ecpService","LRC","CLAY","Icons","setJerasureDefaults","baseValueValidation","v","lrcDataValidation","shecDataValidation","requiredIf","op","arg1","lrcLocalityValidation","shecDurabilityValidation","dMinValidation","dMaxValidation","updateValidityOnChange","onPluginChange","setClayDefaultsForScalar","dataChunk","validValidation","getKMSum","getValue","fn","km","calculateD","updateValueAndValidity","setLrcDefaults","setIsaDefaults","setShecDefaults","setClayDefaults","setDefaults","defaultTechnique","defaults","controlName","pristine","preValidateNumericInputFields","kml","markAsTouched","markAsDirty","profile","createJson","pluginControls","pluginControl","extendJson","onCrushFailureDomainChane","ErasureCodeProfileFormModalComponent_span_14_Template","ErasureCodeProfileFormModalComponent_span_15_Template","ErasureCodeProfileFormModalComponent_span_16_Template","ErasureCodeProfileFormModalComponent_option_24_Template","ErasureCodeProfileFormModalComponent_option_25_Template","ErasureCodeProfileFormModalComponent_span_26_Template","ErasureCodeProfileFormModalComponent_span_34_Template","ErasureCodeProfileFormModalComponent_span_35_Template","ErasureCodeProfileFormModalComponent_span_36_Template","ErasureCodeProfileFormModalComponent_span_37_Template","ErasureCodeProfileFormModalComponent_span_38_Template","ErasureCodeProfileFormModalComponent_span_39_Template","ErasureCodeProfileFormModalComponent_span_40_Template","ErasureCodeProfileFormModalComponent_span_48_Template","ErasureCodeProfileFormModalComponent_span_49_Template","ErasureCodeProfileFormModalComponent_span_50_Template","ErasureCodeProfileFormModalComponent_span_51_Template","ErasureCodeProfileFormModalComponent_div_52_Template","ErasureCodeProfileFormModalComponent_div_53_Template","ErasureCodeProfileFormModalComponent_div_54_Template","ErasureCodeProfileFormModalComponent_option_62_Template","ErasureCodeProfileFormModalComponent_option_63_Template","ErasureCodeProfileFormModalComponent_span_71_Template","ErasureCodeProfileFormModalComponent_span_79_Template","ErasureCodeProfileFormModalComponent_div_80_Template","ErasureCodeProfileFormModalComponent_div_81_Template","ErasureCodeProfileFormModalComponent_div_82_Template","ErasureCodeProfileFormModalComponent_div_83_Template","ErasureCodeProfileFormModalComponent_option_91_Template","ErasureCodeProfileFormModalComponent_option_92_Template","ErasureCodeProfileFormModalComponent_option_101_Template","PoolFormData","erasureInfo","crushInfo","APP_LABELS","cephfs","rbd","rgw","pgs","poolTypes","applications","selected","default","available","validators","maxLength","messages","SelectMessages","empty","selectionLimit","text","tooltip","customValidations","maxlength","add","poolType_r2","mode_r3","_r4","ctx_r4","externalPgChange","alignPgs","PoolFormComponent_div_0_div_27_div_7_span_5_Template","PoolFormComponent_div_0_div_27_div_7_span_6_Template","PoolFormComponent_div_0_div_27_div_7_span_7_Template","PoolFormComponent_div_0_div_27_div_7_span_10_Template","formDir_r6","getMinSize","getMaxSize","PoolFormComponent_div_0_div_27_div_8_span_5_Template","PoolFormComponent_div_0_div_27_div_8_span_6_Template","PoolFormComponent_div_0_div_27_div_8_span_7_Template","PoolFormComponent_div_0_div_27_option_6_Template","PoolFormComponent_div_0_div_27_div_7_Template","PoolFormComponent_div_0_div_27_div_8_Template","PoolFormComponent_div_0_div_27_div_9_Template","pgAutoscaleModes","isReplicated","info","is_all_bluestore","isErasure","warning","size20","ecp_r8","_r9","addErasureCodeProfile","_r10","deleteErasureCodeProfile","trash","_c5","pool_r11","PoolFormComponent_div_0_div_40_div_3_span_14_ng_template_10_ul_2_li_1_Template","ecpUsage","PoolFormComponent_div_0_div_40_div_3_span_14_ng_template_10_ng_template_0_Template","PoolFormComponent_div_0_div_40_div_3_span_14_ng_template_10_ul_2_Template","ecpIsNotUsed_r12","PoolFormComponent_div_0_div_40_div_3_span_14_ng_template_6_Template","PoolFormComponent_div_0_div_40_div_3_span_14_ng_template_10_Template","ecpInfoTabs_r13","_r7","erasureProfileChange","PoolFormComponent_div_0_div_40_div_3_option_6_Template","PoolFormComponent_div_0_div_40_div_3_option_7_Template","PoolFormComponent_div_0_div_40_div_3_option_8_Template","PoolFormComponent_div_0_div_40_div_3_option_9_Template","data","PoolFormComponent_div_0_div_40_div_3_button_12_Template","PoolFormComponent_div_0_div_40_div_3_button_13_Template","PoolFormComponent_div_0_div_40_div_3_span_14_Template","ecProfiles","_c4","questionCircle","editing","PoolFormComponent_div_0_div_40_div_4_span_4_Template","PoolFormComponent_div_0_div_40_div_4_ng_template_5_Template","msrCrush","msrCrushText_r14","rule_r16","rule_name","_r17","addCrushRule","_r18","deleteCrushRule","_c6","describeCrushStep","step_r19","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_10_li_1_Template","steps","pool_r20","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_14_ul_2_li_1_Template","crushUsage","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_14_ng_template_0_Template","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_14_ul_2_Template","ruleIsNotUsed_r21","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_6_Template","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_10_Template","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_ng_template_14_Template","crushInfoTabs_r22","PoolFormComponent_div_0_div_40_div_5_div_6_option_5_Template","_r15","PoolFormComponent_div_0_div_40_div_5_div_6_button_8_Template","PoolFormComponent_div_0_div_40_div_5_div_6_button_9_Template","PoolFormComponent_div_0_div_40_div_5_div_6_div_10_Template","PoolFormComponent_div_0_div_40_div_5_div_6_span_11_Template","PoolFormComponent_div_0_div_40_div_5_div_6_span_12_Template","current","rules","PoolFormComponent_div_0_div_40_div_5_ng_template_4_Template","PoolFormComponent_div_0_div_40_div_5_div_6_Template","noRules_r23","PoolFormComponent_div_0_div_40_div_3_Template","PoolFormComponent_div_0_div_40_div_4_Template","PoolFormComponent_div_0_div_40_div_5_Template","mode_r24","algorithm_r25","u_r26","u_r27","PoolFormComponent_div_0_div_41_div_11_option_7_Template","PoolFormComponent_div_0_div_41_div_11_option_8_Template","PoolFormComponent_div_0_div_41_div_11_option_9_Template","PoolFormComponent_div_0_div_41_div_11_option_21_Template","PoolFormComponent_div_0_div_41_div_11_span_25_Template","PoolFormComponent_div_0_div_41_div_11_span_26_Template","PoolFormComponent_div_0_div_41_div_11_span_27_Template","PoolFormComponent_div_0_div_41_div_11_option_36_Template","PoolFormComponent_div_0_div_41_div_11_span_40_Template","PoolFormComponent_div_0_div_41_div_11_span_41_Template","PoolFormComponent_div_0_div_41_div_11_span_42_Template","PoolFormComponent_div_0_div_41_div_11_span_52_Template","compression_algorithms","blobUnits","PoolFormComponent_div_0_div_41_option_8_Template","PoolFormComponent_div_0_div_41_div_11_Template","compression_modes","hasCompressionEnabled","u_r28","PoolFormComponent_div_0_span_14_Template","PoolFormComponent_div_0_span_15_Template","PoolFormComponent_div_0_span_16_Template","PoolFormComponent_div_0_span_17_Template","PoolFormComponent_div_0_option_25_Template","PoolFormComponent_div_0_span_26_Template","PoolFormComponent_div_0_div_27_Template","appSelection","PoolFormComponent_div_0__svg_svg_37_Template","PoolFormComponent_div_0_span_38_Template","PoolFormComponent_div_0_div_39_Template","PoolFormComponent_div_0_div_40_Template","PoolFormComponent_div_0_div_41_Template","PoolFormComponent_div_0_option_53_Template","PoolFormComponent_div_0_span_60_Template","PoolFormComponent_div_0_span_73_Template","$event","currentConfigurationValues","submit","isApplicationsSelected","maxBytesUnits","initializeConfigData","PoolFormComponent","CdForm","dimlessBinaryPipe","route","router","modalService","poolService","authStorageService","formatter","rbdMirroringService","ReplaySubject","undefined","crushRuleMaxSize","DEFAULT_RATIO","url","startsWith","URLVerbs","EDIT","authenticate","permission","getPermissions","pool","read","update","DashboardNotFoundError","compressionForm","CdFormGroup","mode","UntypedFormControl","algorithm","minBlobSize","updateOn","minBlobSizeUnit","maxBlobSize","maxBlobSizeUnit","ratio","poolType","crushRule","osd_count","crush_rules_replicated","size","erasureProfile","pgNum","pgAutoscaleMode","ecOverwrites","compression","max_bytes","maxBytesUnit","max_objects","rbdMirroring","initInfo","initEditMode","setAvailableApps","loadingReady","listenToChanges","setComplexValidators","pg_autoscale_modes","pg_autoscale_default_mode","bluestore_compression_algorithm","initEcp","erasure_code_profiles","setListControlStatus","arr","enabled","disable","disabled","enable","disableForEdit","routeParamsSubscribe","params","param","initEditFormData","next","initialData","configuration","sourceType","RbdConfigurationSourceField","maxBytesConverted","transform","quota_max_bytes","minBlobSizeConverted","options","compression_min_blob_size","maxBlobSizeConverted","compression_max_blob_size","poolTypeChange","crush_rules_erasure","dataMap","pool_name","crush_rule","erasure_code_profile","pg_autoscale_mode","pg_num","flags_names","compression_mode","compression_algorithm","compression_required_ratio","quota_max_objects","application_metadata","getPool","resp","mirror_mode","apps","x","SelectOption","listenToChangesDuringAddEdit","listenToChangesDuringAdd","change","Math","abs","doPgPowerJump","jump","power","calculatePgPower","setPgs","round","floor","log","pow","crushDeletionBtn","isOpen","setCorrectMaxSize","crushRuleIsUsedBy","replicatedRuleChange","pgCalc","ecpDeletionBtn","ecpIsUsedBy","setTypeBooleans","replicated","erasure","min","max","osds","usable_size","pgMax","replicatedPgCalc","erasurePgCalc","oldValue","newValue","currentDomain","item_name","usable","sizeControl","valid","ecpControl","setValidators","validator","pool_names","validateIf","setCompressionValidators","oddBlobSize","minimum","minUnit","maximum","maxUnit","toBytes","toLowerCase","step","replace","num","join","addModal","reloadECPs","modalComponent","reload","hideOpenTooltips","show","componentInstance","item","hideTooltip","btn","profileName","reloadList","newItemName","profiles","findNewItem","p","modalSubscription","unsubscribe","items","deletionModal","usage","deletionBtn","dataName","getTabs","ecpInfoTabs","tabPosition","nameAttribute","itemDescription","reloadFn","deleteFn","taskName","animation","toggle","setTimeout","tabs","select","DeleteConfirmationModalComponent","itemNames","submitActionObservable","deletion","reloadCrushRules","ruleName","crushInfoTabs","used_rules","used_profiles","assignFormFields","externalFieldName","formControlName","editable","replaceFn","unit","resetValue","assignFormField","rbd_mirroring","triggerApiTask","formFieldDescription","apiValue","poolName","hasOwnProperty","srcpool","UPDATE","code","navigate","onlySelf","i6","i7","i8","i9","i10","i11","viewQuery","rf","PoolFormComponent_div_0_Template","loading","Pool","ctx_r0","poolDetails","selection","PoolDetailsComponent_ng_container_0_ng_container_7_ng_template_3_Template","selectedPoolConfiguration","PoolDetailsComponent_ng_container_0_ng_container_8_ng_template_3_Template","cacheTiers","cacheTierColumns","PoolDetailsComponent_ng_container_0_ng_container_9_ng_template_3_Template","PoolDetailsComponent_ng_container_0_ng_template_6_Template","PoolDetailsComponent_ng_container_0_ng_container_7_Template","PoolDetailsComponent_ng_container_0_ng_container_8_Template","PoolDetailsComponent_ng_container_0_ng_container_9_Template","permissions","grafana","tiers","nav_r2","PoolDetailsComponent","omittedPoolAttributes","prop","flexGrow","ngOnChanges","getConfiguration","poolConf","CdHelperClass","updateChanged","inputs","PoolDetailsComponent_ng_container_0_Template","ctx_r1","expandedRow","taskListService","fetch","setExpandedRow","updateSelection","PoolListComponent_ng_template_5_cd_pool_details_3_Template","pools","columns","tableStatus","tableActions","PoolListComponent_ng_container_6_ng_template_3_Template","row_r3","stats","bytes_used","latest","avail_raw","PoolListComponent_ng_template_8_cd_usage_bar_0_Template","BASE_URL","PoolListComponent","ListWithDetails","pgCategoryService","dimlessPipe","urlBuilder","configurationService","CdTableSelection","executingTasks","TableStatusViewCache","monAllowPoolDelete","icon","routerLink","getCreate","edit","getEdit","encodeURIComponent","first","destroy","click","deletePoolModal","DELETE","getDisableDesc","bind","configOpt","monSection","section","compare","pool1","pool2","cellTransformation","CellTemplate","executing","badge","customTemplateConfig","class","cellClass","row","column","getPgStatusCellClass","isHidden","cellTemplate","poolUsageTpl","comparator","_valueA","_valueB","rowA","rowB","sparkline","pipe","perSecond","init","mergeMap","ecProfileList","getList","transformPoolsData","table","reset","ViewCacheStatus","ValueException","metadata","impact","DeletionImpact","high","_row","_column","getTypeByStates","getErasureCodeProfile","erasureCodeProfile","ecpInfo","ecpKey","requiredStats","emptyStat","rate","rates","pg_status","transformPgStatus","stat","percent_used","cdExecuting","pg_placement_num","pg_num_target","pg_placement_num_target","point","cdIsBinary","data_protection","pgStatus","strings","count","state","getSelectionTiers","cacheTierIds","hasSelection","TableComponent","TaskListService","provide","URLBuilderService","useValue","PoolListComponent_ng_template_5_Template","PoolListComponent_ng_container_6_Template","PoolListComponent_ng_template_8_Template","nav_r4","_16","elem","attrs","xmlns","viewBox","fill","width","height","content","cx","cy","r","PoolModule","iconService","registerAll","HelpIcon","UnlockedIcon","LockedIcon","CephSharedModule","CommonModule","NgbNavModule","SharedModule","RouterModule","ReactiveFormsModule","NgbTooltipModule","BlockModule","IconModule","routes","path","component","breadcrumbs","ActionLabels","RoutedPoolModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/shared/api/erasure-code-profile.service.ts","./src/app/shared/models/erasure-code-profile.ts","./src/app/shared/classes/crush.node.selection.class.ts","./src/app/ceph/pool/crush-rule-form-modal/crush-rule-form-modal.component.html","./src/app/ceph/pool/crush-rule-form-modal/crush-rule-form-modal.component.ts","./src/app/ceph/pool/erasure-code-profile-form/erasure-code-profile-form-modal.component.html","./src/app/ceph/pool/erasure-code-profile-form/erasure-code-profile-form-modal.component.ts","./src/app/ceph/pool/pool-form/pool-form-data.ts","./src/app/ceph/pool/pool-form/pool-form.component.html","./src/app/ceph/pool/pool-form/pool-form.component.ts","./src/app/ceph/pool/pool.ts","./src/app/ceph/pool/pool-details/pool-details.component.html","./src/app/ceph/pool/pool-details/pool-details.component.ts","./src/app/ceph/pool/pool-list/pool-list.component.html","./src/app/ceph/pool/pool-list/pool-list.component.ts","./node_modules/@carbon/icons/es/help/16.js","./node_modules/@carbon/icons/es/unlocked/16.js","./src/app/ceph/pool/pool.module.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ErasureCodeProfile } from '../models/erasure-code-profile';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErasureCodeProfileService {\n  apiPath = 'api/erasure_code_profile';\n\n  formTooltips = {\n    // Copied from /doc/rados/operations/erasure-code.*.rst\n    k: $localize`Each object is split in data-chunks parts, each stored on a different OSD.`,\n\n    m: $localize`Compute coding chunks for each object and store them on different OSDs.\n      The number of coding chunks is also the number of OSDs that can be down without losing data.`,\n\n    plugins: {\n      jerasure: {\n        description: $localize`The jerasure plugin is the most generic and flexible plugin,\n          it is also the default for Ceph erasure coded pools.`,\n        technique: $localize`The more flexible technique is reed_sol_van : it is enough to set k\n          and m. The cauchy_good technique can be faster but you need to chose the packetsize\n          carefully. All of reed_sol_r6_op, liberation, blaum_roth, liber8tion are RAID6 equivalents\n          in the sense that they can only be configured with m=2.`,\n        packetSize: $localize`The encoding will be done on packets of bytes size at a time.\n          Choosing the right packet size is difficult.\n          The jerasure documentation contains extensive information on this topic.`\n      },\n      lrc: {\n        description: $localize`With the jerasure plugin, when an erasure coded object is stored on\n          multiple OSDs, recovering from the loss of one OSD requires reading from all the others.\n          For instance if jerasure is configured with k=8 and m=4, losing one OSD requires reading\n          from the eleven others to repair.\n\n          The lrc erasure code plugin creates local parity chunks to be able to recover using\n          less OSDs. For instance if lrc is configured with k=8, m=4 and l=4, it will create\n          an additional parity chunk for every four OSDs. When a single OSD is lost, it can be\n          recovered with only four OSDs instead of eleven.`,\n        l: $localize`Group the coding and data chunks into sets of size locality. For instance,\n          for k=4 and m=2, when locality=3 two groups of three are created. Each set can\n          be recovered without reading chunks from another set.`,\n        crushLocality: $localize`The type of the crush bucket in which each set of chunks defined\n          by l will be stored. For instance, if it is set to rack, each group of l chunks will be\n          placed in a different rack. It is used to create a CRUSH rule step such as step choose\n          rack. If it is not set, no such grouping is done.`\n      },\n      isa: {\n        description: $localize`The isa plugin encapsulates the ISA library. It only runs on Intel processors.`,\n        technique: $localize`The ISA plugin comes in two Reed Solomon forms.\n          If reed_sol_van is set, it is Vandermonde, if cauchy is set, it is Cauchy.`\n      },\n      shec: {\n        description: $localize`The shec plugin encapsulates the multiple SHEC library.\n          It allows ceph to recover data more efficiently than Reed Solomon codes.`,\n        c: $localize`The number of parity chunks each of which includes each data chunk in its\n          calculation range. The number is used as a durability estimator. For instance, if c=2,\n          2 OSDs can be down without losing data.`\n      },\n      clay: {\n        description: $localize`CLAY (short for coupled-layer) codes are erasure codes designed to\n          bring about significant savings in terms of network bandwidth and disk IO when a failed\n          node/OSD/rack is being repaired.`,\n        d: $localize`Number of OSDs requested to send data during recovery of a single chunk.\n          d needs to be chosen such that k+1 <= d <= k+m-1. The larger the d, the better\n          the savings.`,\n        scalar_mds: $localize`scalar_mds specifies the plugin that is used as a building block\n          in the layered construction. It can be one of jerasure, isa, shec.`,\n        technique: $localize`technique specifies the technique that will be picked\n          within the 'scalar_mds' plugin specified. Supported techniques\n          are 'reed_sol_van', 'reed_sol_r6_op', 'cauchy_orig',\n          'cauchy_good', 'liber8tion' for jerasure, 'reed_sol_van',\n          'cauchy' for isa and 'single', 'multiple' for shec.`\n      }\n    },\n\n    crushRoot: $localize`The name of the crush bucket used for the first step of the CRUSH rule.\n      For instance step take default.`,\n\n    crushFailureDomain: $localize`Ensure that no two chunks are in a bucket with the same failure\n      domain. For instance, if the failure domain is host no two chunks will be stored on the same\n      host. It is used to create a CRUSH rule step such as step chooseleaf host.`,\n\n    crushNumFailureDomains: $localize` Number of failure domains to map. Results in a CRUSH MSR rule being created.\n    Must be specified if crush-osds-per-failure-domain is specified.`,\n\n    crushOsdsPerFailureDomain: $localize`Maximum number of OSDs to place in each failure domain --\n     defaults to 1. Using a value greater than one will cause a CRUSH MSR rule to be created.\n      Must be specified if crush-num-failure-domains is specified.`,\n\n    crushDeviceClass: $localize`The device class on which to place data.`,\n\n    directory: $localize`Set the directory name from which the erasure code plugin is loaded.`\n  };\n\n  constructor(private http: HttpClient) {}\n\n  list(): Observable<ErasureCodeProfile[]> {\n    return this.http.get<ErasureCodeProfile[]>(this.apiPath);\n  }\n\n  create(ecp: ErasureCodeProfile) {\n    return this.http.post(this.apiPath, ecp, { observe: 'response' });\n  }\n\n  delete(name: string) {\n    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\n  }\n\n  getInfo() {\n    return this.http.get(`ui-${this.apiPath}/info`);\n  }\n}\n","export class ErasureCodeProfile {\n  name: string;\n  plugin: string;\n  k?: number;\n  m?: number;\n  c?: number;\n  l?: number;\n  d?: number;\n  packetsize?: number;\n  technique?: string;\n  scalar_mds?: 'jerasure' | 'isa' | 'shec';\n  'crush-root'?: string;\n  'crush-locality'?: string;\n  'crush-failure-domain'?: string;\n  'crush-num-failure-domains'?: number;\n  'crush-osds-per-failure-domain'?: number;\n  'crush-device-class'?: string;\n  'directory'?: string;\n}\n\nexport enum CrushFailureDomains {\n  Osd = 'osd',\n  Host = 'host'\n}\n","import { AbstractControl } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { CrushNode } from '../models/crush-node';\nimport { CrushFailureDomains } from '../models/erasure-code-profile';\n\nexport class CrushNodeSelectionClass {\n  private nodes: CrushNode[] = [];\n  private idTree: { [id: number]: CrushNode } = {};\n  private allDevices: string[] = [];\n  private controls: {\n    root: AbstractControl;\n    failure: AbstractControl;\n    device: AbstractControl;\n  };\n\n  buckets: CrushNode[] = [];\n  failureDomains: { [type: string]: CrushNode[] } = {};\n  failureDomainKeys: string[] = [];\n  devices: string[] = [];\n  deviceCount = 0;\n  /**\n   * Handles manual or automatic update of device class.\n   *\n   * When set true, the device class form field is automatically\n   * updated with the first device in the list of devices.\n   * Otherwise, user manually selects a device class.\n   */\n  autoDeviceUpdate: boolean = true;\n\n  static searchFailureDomains(\n    nodes: CrushNode[],\n    s: string\n  ): { [failureDomain: string]: CrushNode[] } {\n    return this.getFailureDomains(this.search(nodes, s));\n  }\n\n  /**\n   * Filters crush map for a node and it's tree.\n   * The node name as provided in crush rules attribute item_name is supported.\n   * This means that '$name~$deviceType' can be used and will result in a crush map\n   * that only include buckets with the specified device in use as their leaf.\n   */\n  static search(nodes: CrushNode[], s: string): CrushNode[] {\n    const [search, deviceType] = s.split('~'); // Used inside item_name in crush rules\n    const node = nodes.find((n) => ['name', 'id', 'type'].some((attr) => n[attr] === search));\n    if (!node) {\n      return [];\n    }\n    nodes = this.getSubNodes(node, this.createIdTreeFromNodes(nodes));\n    if (deviceType) {\n      nodes = this.filterNodesByDeviceType(nodes, deviceType);\n    }\n    return nodes;\n  }\n\n  static createIdTreeFromNodes(nodes: CrushNode[]): { [id: number]: CrushNode } {\n    const idTree = {};\n    nodes.forEach((node) => {\n      idTree[node.id] = node;\n    });\n    return idTree;\n  }\n\n  static getSubNodes(node: CrushNode, idTree: { [id: number]: CrushNode }): CrushNode[] {\n    let subNodes = [node]; // Includes parent node\n    if (!node.children) {\n      return subNodes;\n    }\n    node.children.forEach((id) => {\n      const childNode = idTree[id];\n      subNodes = subNodes.concat(this.getSubNodes(childNode, idTree));\n    });\n    return subNodes;\n  }\n\n  static filterNodesByDeviceType(nodes: CrushNode[], deviceType: string): any {\n    let doNotInclude = nodes\n      .filter((n) => n.device_class && n.device_class !== deviceType)\n      .map((n) => n.id);\n    let foundNewNode: boolean;\n    let childrenToRemove = doNotInclude;\n\n    // Filters out all unwanted nodes\n    do {\n      foundNewNode = false;\n      nodes = nodes.filter((n) => !doNotInclude.includes(n.id)); // Unwanted nodes\n      // Find nodes where all children were filtered\n      const toRemoveNext: number[] = [];\n      nodes.forEach((n) => {\n        if (n.children && n.children.every((id) => doNotInclude.includes(id))) {\n          toRemoveNext.push(n.id);\n          foundNewNode = true;\n        }\n      });\n      if (foundNewNode) {\n        doNotInclude = toRemoveNext; // Reduces array length\n        childrenToRemove = childrenToRemove.concat(toRemoveNext);\n      }\n    } while (foundNewNode);\n\n    // Removes filtered out children in all left nodes with children\n    nodes = _.cloneDeep(nodes); // Clone objects to not change original objects\n    nodes = nodes.map((n) => {\n      if (!n.children) {\n        return n;\n      }\n      n.children = n.children.filter((id) => !childrenToRemove.includes(id));\n      return n;\n    });\n\n    return nodes;\n  }\n\n  static getFailureDomains(nodes: CrushNode[]): { [failureDomain: string]: CrushNode[] } {\n    const domains = {};\n    nodes.forEach((node) => {\n      const type = node.type;\n      if (!domains[type]) {\n        domains[type] = [];\n      }\n      domains[type].push(node);\n    });\n    return domains;\n  }\n\n  initCrushNodeSelection(\n    nodes: CrushNode[],\n    rootControl: AbstractControl,\n    failureControl: AbstractControl,\n    deviceControl: AbstractControl,\n    autoDeviceUpdate: boolean = true\n  ) {\n    this.autoDeviceUpdate = autoDeviceUpdate;\n    this.nodes = nodes;\n    this.idTree = CrushNodeSelectionClass.createIdTreeFromNodes(nodes);\n    nodes.forEach((node) => {\n      this.idTree[node.id] = node;\n    });\n    this.buckets = _.sortBy(\n      nodes.filter((n) => n.children),\n      'name'\n    );\n    this.controls = {\n      root: rootControl,\n      failure: failureControl,\n      device: deviceControl\n    };\n    this.preSelectRoot();\n    this.controls.root.valueChanges.subscribe(() => this.onRootChange());\n    this.controls.failure.valueChanges.subscribe(() => this.onFailureDomainChange());\n    this.controls.device.valueChanges.subscribe(() => this.onDeviceChange());\n  }\n\n  private preSelectRoot() {\n    const rootNode = this.nodes.find((node) => node.type === 'root');\n    this.silentSet(this.controls.root, rootNode);\n    this.onRootChange();\n  }\n\n  private silentSet(control: AbstractControl, value: any) {\n    control.setValue(value, { emitEvent: false });\n  }\n\n  private onRootChange() {\n    const nodes = CrushNodeSelectionClass.getSubNodes(this.controls.root.value, this.idTree);\n    const domains = CrushNodeSelectionClass.getFailureDomains(nodes);\n    Object.keys(domains).forEach((type) => {\n      if (domains[type].length <= 1) {\n        delete domains[type];\n      }\n    });\n    this.failureDomains = domains;\n    this.failureDomainKeys = Object.keys(domains).sort();\n    this.updateFailureDomain();\n  }\n\n  private updateFailureDomain() {\n    let failureDomain = this.getIncludedCustomValue(\n      this.controls.failure,\n      Object.keys(this.failureDomains)\n    );\n    if (failureDomain === '') {\n      failureDomain = this.setMostCommonDomain(this.controls.failure);\n    }\n    this.updateDevices(failureDomain);\n  }\n\n  private getIncludedCustomValue(control: AbstractControl, includedIn: string[]) {\n    return control.dirty && includedIn.includes(control.value) ? control.value : '';\n  }\n\n  private setMostCommonDomain(failureControl: AbstractControl): string {\n    let winner = { n: 0, type: '' };\n    Object.keys(this.failureDomains).forEach((type) => {\n      const n = this.failureDomains[type].length;\n      if (winner.n < n) {\n        winner = { n, type };\n      }\n    });\n    this.silentSet(failureControl, winner.type);\n    return winner.type;\n  }\n\n  private onFailureDomainChange() {\n    this.updateDevices();\n  }\n\n  private updateDevices(failureDomain: string = this.controls.failure.value) {\n    if (failureDomain === CrushFailureDomains.Host) {\n      this.allDevices = this.failureDomains[failureDomain]\n        .filter((fD) => fD.type)\n        .map((fD) => fD.type);\n      this.onDeviceChange('');\n    } else {\n      const subNodes = _.flatten(\n        this.failureDomains[failureDomain].map((node) =>\n          CrushNodeSelectionClass.getSubNodes(node, this.idTree)\n        )\n      );\n      this.allDevices = subNodes.filter((n) => n.device_class).map((n) => n.device_class);\n      this.devices = _.uniq(this.allDevices).sort();\n      const device =\n        this.devices.length === 1\n          ? this.devices[0]\n          : this.getIncludedCustomValue(this.controls.device, this.devices);\n      if (this.autoDeviceUpdate) this.silentSet(this.controls.device, device);\n      this.onDeviceChange(device);\n    }\n  }\n\n  private onDeviceChange(deviceType: string = this.controls.device.value) {\n    this.deviceCount =\n      deviceType === ''\n        ? this.allDevices.length\n        : this.allDevices.filter((type) => type === deviceType).length;\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} {{ resource | upperFirst }}</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #frm=\"ngForm\"\n          [formGroup]=\"form\"\n          novalidate>\n      <div class=\"modal-body\">\n        <div class=\"form-group row\">\n          <label for=\"name\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Name</ng-container>\n            <span class=\"required\"></span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"text\"\n                   id=\"name\"\n                   name=\"name\"\n                   class=\"form-control\"\n                   placeholder=\"Name...\"\n                   formControlName=\"name\"\n                   autofocus>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'pattern')\"\n                  i18n>The name can only consist of alphanumeric characters, dashes and underscores.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'uniqueName')\"\n                  i18n>The chosen erasure code profile name is already in use.</span>\n          </div>\n        </div>\n\n        <!-- Root -->\n        <div class=\"form-group row\">\n          <label for=\"root\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Root</ng-container>\n            <cd-helper [html]=\"tooltips.root\">\n            </cd-helper>\n            <span class=\"required\"></span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"root\"\n                    name=\"root\"\n                    formControlName=\"root\">\n              <option *ngIf=\"!buckets\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngFor=\"let bucket of buckets\"\n                      [ngValue]=\"bucket\">\n                {{ bucket.name }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('root', frm, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Failure Domain Type -->\n        <div class=\"form-group row\">\n          <label for=\"failure_domain\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Failure domain type</ng-container>\n            <cd-helper [html]=\"tooltips.failure_domain\">\n            </cd-helper>\n            <span class=\"required\"></span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"failure_domain\"\n                    name=\"failure_domain\"\n                    formControlName=\"failure_domain\">\n              <option *ngIf=\"!failureDomains\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngFor=\"let domain of failureDomainKeys\"\n                      [ngValue]=\"domain\">\n                {{ domain }} ( {{failureDomains[domain].length}} )\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('failure_domain', frm, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Class -->\n        <div class=\"form-group row\">\n          <label for=\"device_class\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Device class</ng-container>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"device_class\"\n                    name=\"device_class\"\n                    formControlName=\"device_class\">\n              <option ngValue=\"\"\n                      i18n>All devices</option>\n              <option *ngFor=\"let deviceClass of devices\"\n                      [ngValue]=\"deviceClass\">\n                {{ deviceClass }}\n              </option>\n            </select>\n            <cd-help-text>\n              <span i18n>{{tooltips.device_class}}</span>\n            </cd-help-text>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"form\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { CrushRuleService } from '~/app/shared/api/crush-rule.service';\nimport { CrushNodeSelectionClass } from '~/app/shared/classes/crush.node.selection.class';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CrushNode } from '~/app/shared/models/crush-node';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-crush-rule-form-modal',\n  templateUrl: './crush-rule-form-modal.component.html',\n  styleUrls: ['./crush-rule-form-modal.component.scss']\n})\nexport class CrushRuleFormModalComponent extends CrushNodeSelectionClass implements OnInit {\n  @Output()\n  submitAction = new EventEmitter();\n\n  tooltips!: Record<string, string>;\n\n  form: CdFormGroup;\n  names: string[];\n  action: string;\n  resource: string;\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    public activeModal: NgbActiveModal,\n    private taskWrapper: TaskWrapperService,\n    private crushRuleService: CrushRuleService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.action = this.actionLabels.CREATE;\n    this.resource = $localize`Crush Rule`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      // name: string\n      name: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('[A-Za-z0-9_-]+'),\n          CdValidators.custom(\n            'uniqueName',\n            (value: any) => this.names && this.names.indexOf(value) !== -1\n          )\n        ]\n      ],\n      // root: CrushNode\n      root: null, // Replaced with first root\n      // failure_domain: string\n      failure_domain: '', // Replaced with most common type\n      // device_class: string\n      device_class: '' // Replaced with device type if only one exists beneath domain\n    });\n  }\n\n  ngOnInit() {\n    this.tooltips = this.crushRuleService.formTooltips;\n\n    this.crushRuleService\n      .getInfo()\n      .subscribe(({ names, nodes }: { names: string[]; nodes: CrushNode[] }) => {\n        this.initCrushNodeSelection(\n          nodes,\n          this.form.get('root'),\n          this.form.get('failure_domain'),\n          this.form.get('device_class'),\n          false\n        );\n        this.names = names;\n      });\n  }\n\n  onSubmit() {\n    if (this.form.invalid) {\n      this.form.setErrors({ cdSubmitButton: true });\n      return;\n    }\n    const rule = _.cloneDeep(this.form.value);\n    rule.root = rule.root.name;\n    if (rule.device_class === '') {\n      delete rule.device_class;\n    }\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('crushRule/create', rule),\n        call: this.crushRuleService.create(rule)\n      })\n      .subscribe({\n        error: () => {\n          this.form.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.activeModal.close();\n          this.submitAction.emit(rule);\n        }\n      });\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} {{ resource | upperFirst }}</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #frm=\"ngForm\"\n          [formGroup]=\"form\"\n          novalidate>\n      <div class=\"modal-body\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"name\"\n                 i18n>Name</label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"text\"\n                   id=\"name\"\n                   name=\"name\"\n                   class=\"form-control\"\n                   placeholder=\"Name...\"\n                   formControlName=\"name\"\n                   autofocus>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'pattern')\"\n                  i18n>The name can only consist of alphanumeric characters, dashes and underscores.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'uniqueName')\"\n                  i18n>The chosen erasure code profile name is already in use.</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"plugin\"\n                 class=\"cd-col-form-label\">\n            <span class=\"required\"\n                  i18n>Plugin</span>\n            <cd-helper [html]=\"tooltips.plugins[plugin].description\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"plugin\"\n                    name=\"plugin\"\n                    formControlName=\"plugin\">\n              <option *ngIf=\"!plugins\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngFor=\"let plugin of plugins\"\n                      [ngValue]=\"plugin\">\n                {{ plugin }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', frm, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"k\"\n                 class=\"cd-col-form-label\">\n            <span class=\"required\"\n                  i18n>Data chunks (k)</span>\n            <cd-helper [html]=\"tooltips.k\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"k\"\n                   name=\"k\"\n                   class=\"form-control\"\n                   ng-model=\"$ctrl.erasureCodeProfile.k\"\n                   placeholder=\"Data chunks...\"\n                   formControlName=\"k\"\n                   min=\"2\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'min')\"\n                  i18n>Must be equal to or greater than 2.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'max') && form.getValue('crushFailureDomain') === CrushFailureDomains.Osd\"\n                  i18n>Chunks (k+m) have exceeded the available OSDs of {{deviceCount}}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'max') && form.getValue('crushFailureDomain') === CrushFailureDomains.Host\"\n                  i18n>Chunks (k+m+1) have exceeded the available hosts of {{deviceCount}}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'unequal')\"\n                  i18n>For an equal distribution k has to be a multiple of (k+m)/l.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('k', frm, 'kLowerM')\"\n                  i18n>K has to be equal to or greater than m in order to recover data correctly through c.</span>\n            <span *ngIf=\"plugin === 'lrc'\"\n                  class=\"form-text text-muted\"\n                  i18n>Distribution factor: {{lrcMultiK}}</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"m\"\n                 class=\"cd-col-form-label\">\n            <span class=\"required\"\n                  i18n>Coding chunks (m)</span>\n            <cd-helper [html]=\"tooltips.m\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"m\"\n                   name=\"m\"\n                   class=\"form-control\"\n                   placeholder=\"Coding chunks...\"\n                   formControlName=\"m\"\n                   min=\"1\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('m', frm, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('m', frm, 'min')\"\n                  i18n>Must be equal to or greater than 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('m', frm, 'max') && form.getValue('crushFailureDomain') ===  CrushFailureDomains.Osd\"\n                  i18n>Chunks (k+m) have exceeded the available OSDs of {{deviceCount}}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('m', frm, 'max') && form.getValue('crushFailureDomain') ===  CrushFailureDomains.Host\"\n                  i18n>Chunks (k+m+1) have exceeded the available hosts of {{deviceCount}}.</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"plugin === 'shec'\">\n          <label for=\"c\"\n                 class=\"cd-col-form-label\">\n            <span class=\"required\"\n                  i18n>Durability estimator (c)</span>\n            <cd-helper [html]=\"tooltips.plugins.shec.c\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"c\"\n                   name=\"c\"\n                   class=\"form-control\"\n                   placeholder=\"Coding chunks...\"\n                   formControlName=\"c\"\n                   min=\"1\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('c', frm, 'min')\"\n                  i18n>Must be equal to or greater than 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('c', frm, 'cGreaterM')\"\n                  i18n>C has to be equal to or lower than m as m defines the amount of chunks that can be used.</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"plugin === 'clay'\">\n          <label for=\"d\"\n                 class=\"cd-col-form-label\">\n            <span class=\"required\"\n                  i18n>Helper chunks (d)</span>\n            <cd-helper [html]=\"tooltips.plugins.clay.d\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input type=\"number\"\n                     id=\"d\"\n                     name=\"d\"\n                     class=\"form-control\"\n                     placeholder=\"Helper chunks...\"\n                     formControlName=\"d\">\n              <button class=\"btn btn-light\"\n                      id=\"d-calc-btn\"\n                      ngbTooltip=\"Set d manually or use the plugin's default calculation that maximizes d.\"\n                      i18n-ngbTooltip\n                      type=\"button\"\n                      (click)=\"toggleDCalc()\">\n                <svg [cdsIcon]=\"dCalc ? icons.unlock : icons.lock\"\n                     [size]=\"icons.size16\"\n                     class=\"cds-info-color\"></svg>\n              </button>\n            </div>\n            <span class=\"form-text text-muted\"\n                  *ngIf=\"dCalc\"\n                  i18n>D is automatically updated on k and m changes</span>\n            <ng-container\n              *ngIf=\"!dCalc\">\n              <span class=\"form-text text-muted\"\n                    *ngIf=\"getDMin() < getDMax()\"\n                    i18n>D can be set from {{getDMin()}} to {{getDMax()}}</span>\n              <span class=\"form-text text-muted\"\n                    *ngIf=\"getDMin() === getDMax()\"\n                    i18n>D can only be set to {{getDMax()}}</span>\n            </ng-container>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('d', frm, 'dMin')\"\n                  i18n>D has to be greater than k ({{getDMin()}}).</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('d', frm, 'dMax')\"\n                  i18n>D has to be lower than k + m ({{getDMax()}}).</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"plugin === PLUGIN.LRC\">\n          <label class=\"cd-col-form-label\"\n                 for=\"l\">\n            <span class=\"required\"\n                  i18n>Locality (l)</span>\n            <cd-helper [html]=\"tooltips.plugins.lrc.l\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"l\"\n                   name=\"l\"\n                   class=\"form-control\"\n                   placeholder=\"Coding chunks...\"\n                   formControlName=\"l\"\n                   min=\"1\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('l', frm, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('l', frm, 'min')\"\n                  i18n>Must be equal to or greater than 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('l', frm, 'unequal')\"\n                  i18n>Can't split up chunks (k+m) correctly with the current locality.</span>\n            <span class=\"form-text text-muted\"\n                  i18n>Locality groups: {{lrcGroups}}</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"crushFailureDomain\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush failure domain</ng-container>\n            <cd-helper [html]=\"tooltips.crushFailureDomain\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"crushFailureDomain\"\n                    name=\"crushFailureDomain\"\n                    formControlName=\"crushFailureDomain\"\n                    (change)=\"onCrushFailureDomainChane()\">\n              <option *ngIf=\"!failureDomains\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngFor=\"let domain of failureDomainKeys\"\n                      [ngValue]=\"domain\">\n                {{ domain }} ( {{failureDomains[domain].length}} )\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"crushNumFailureDomains\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush num failure domain</ng-container>\n            <cd-helper [html]=\"tooltips.crushNumFailureDomains\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"crushNumFailureDomains\"\n                   name=\"crushNumFailureDomains\"\n                   class=\"form-control\"\n                   formControlName=\"crushNumFailureDomains\"\n                   min=\"0\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('crushNumFailureDomains', frm, 'required')\"\n                  i18n>This field is required when crush osds per failure domain is set!</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"crushOsdsPerFailureDomain\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush osds per failure domain</ng-container>\n            <cd-helper [html]=\"tooltips.crushOsdsPerFailureDomain\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"crushOsdsPerFailureDomain\"\n                   name=\"crushOsdsPerFailureDomain\"\n                   class=\"form-control\"\n                   formControlName=\"crushOsdsPerFailureDomain\"\n                   min=\"0\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('crushOsdsPerFailureDomain', frm, 'required')\"\n                  i18n>This field is required when crush num failure domain is set!</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"plugin === PLUGIN.LRC\">\n          <label for=\"crushLocality\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush Locality</ng-container>\n            <cd-helper [html]=\"tooltips.plugins.lrc.crushLocality\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"crushLocality\"\n                    name=\"crushLocality\"\n                    formControlName=\"crushLocality\">\n              <option *ngIf=\"!failureDomains\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"failureDomainKeys.length > 0\"\n                      ngValue=\"\"\n                      i18n>None</option>\n              <option *ngFor=\"let domain of failureDomainKeys\"\n                      [ngValue]=\"domain\">\n                {{ domain }} ( {{failureDomains[domain].length}} )\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"PLUGIN.CLAY === plugin\">\n          <label for=\"scalar_mds\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Scalar mds</ng-container>\n            <cd-helper [html]=\"tooltips.plugins.clay.scalar_mds\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"scalar_mds\"\n                    name=\"scalar_mds\"\n                    formControlName=\"scalar_mds\">\n              <option *ngFor=\"let plugin of [PLUGIN.JERASURE, PLUGIN.ISA, PLUGIN.SHEC]\"\n                      [ngValue]=\"plugin\">\n                {{ plugin }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"[PLUGIN.JERASURE, PLUGIN.ISA, PLUGIN.CLAY].includes(plugin)\">\n          <label for=\"technique\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Technique</ng-container>\n            <cd-helper [html]=\"tooltips.plugins[plugin].technique\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"technique\"\n                    name=\"technique\"\n                    formControlName=\"technique\">\n              <option *ngFor=\"let technique of techniques\"\n                      [ngValue]=\"technique\">\n                {{ technique }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"plugin === PLUGIN.JERASURE\">\n          <label for=\"packetSize\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Packetsize</ng-container>\n            <cd-helper [html]=\"tooltips.plugins.jerasure.packetSize\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"number\"\n                   id=\"packetSize\"\n                   name=\"packetSize\"\n                   class=\"form-control\"\n                   placeholder=\"Packetsize...\"\n                   formControlName=\"packetSize\"\n                   min=\"1\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('packetSize', frm, 'min')\"\n                  i18n>Must be equal to or greater than 1.</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"crushRoot\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush root</ng-container>\n            <cd-helper [html]=\"tooltips.crushRoot\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"crushRoot\"\n                    name=\"crushRoot\"\n                    formControlName=\"crushRoot\">\n              <option *ngIf=\"!buckets\"\n                      ngValue=\"\"\n                      i18n>Loading...</option>\n              <option *ngFor=\"let bucket of buckets\"\n                      [ngValue]=\"bucket\">\n                {{ bucket.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"crushDeviceClass\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Crush device class</ng-container>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"crushDeviceClass\"\n                    name=\"crushDeviceClass\"\n                    formControlName=\"crushDeviceClass\">\n              <option ngValue=\"\"\n                      i18n>All devices</option>\n              <option *ngFor=\"let deviceClass of devices\"\n                      [ngValue]=\"deviceClass\">\n                {{ deviceClass }}\n              </option>\n            </select>\n            <cd-help-text>\n              <span i18n>{{tooltips.crushDeviceClass}}</span>\n            </cd-help-text>\n            <span class=\"form-text text-muted\"\n                  i18n>Available OSDs: {{deviceCount}}</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label for=\"directory\"\n                 class=\"cd-col-form-label\">\n            <ng-container i18n>Directory</ng-container>\n            <cd-helper [html]=\"tooltips.directory\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"text\"\n                   id=\"directory\"\n                   name=\"directory\"\n                   class=\"form-control\"\n                   placeholder=\"Path...\"\n                   formControlName=\"directory\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"form\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ErasureCodeProfileService } from '~/app/shared/api/erasure-code-profile.service';\nimport { CrushNodeSelectionClass } from '~/app/shared/classes/crush.node.selection.class';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CrushNode } from '~/app/shared/models/crush-node';\nimport { ErasureCodeProfile, CrushFailureDomains } from '~/app/shared/models/erasure-code-profile';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-erasure-code-profile-form-modal',\n  templateUrl: './erasure-code-profile-form-modal.component.html',\n  styleUrls: ['./erasure-code-profile-form-modal.component.scss']\n})\nexport class ErasureCodeProfileFormModalComponent\n  extends CrushNodeSelectionClass\n  implements OnInit {\n  @Output()\n  submitAction = new EventEmitter();\n\n  tooltips!: Record<string, any>;\n  PLUGIN = {\n    LRC: 'lrc', // Locally Repairable Erasure Code\n    SHEC: 'shec', // Shingled Erasure Code\n    CLAY: 'clay', // Coupled LAYer\n    JERASURE: 'jerasure', // default\n    ISA: 'isa' // Intel Storage Acceleration\n  };\n  plugin = this.PLUGIN.JERASURE;\n  icons = Icons;\n\n  form: CdFormGroup;\n  plugins: string[];\n  names: string[];\n  techniques: string[];\n  action: string;\n  resource: string;\n  dCalc: boolean;\n  lrcGroups: number;\n  lrcMultiK: number;\n\n  public CrushFailureDomains = CrushFailureDomains;\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    public activeModal: NgbActiveModal,\n    private taskWrapper: TaskWrapperService,\n    private ecpService: ErasureCodeProfileService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.action = this.actionLabels.CREATE;\n    this.resource = $localize`EC Profile`;\n    this.createForm();\n    this.setJerasureDefaults();\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      name: [\n        null,\n        [\n          Validators.required,\n          Validators.pattern('[A-Za-z0-9_-]+'),\n          CdValidators.custom(\n            'uniqueName',\n            (value: string) => this.names && this.names.indexOf(value) !== -1\n          )\n        ]\n      ],\n      plugin: [this.PLUGIN.JERASURE, [Validators.required]],\n      k: [\n        4, // Will be overwritten with plugin defaults\n        [\n          Validators.required,\n          CdValidators.custom('max', () => this.baseValueValidation(true)),\n          CdValidators.custom('unequal', (v: number) => this.lrcDataValidation(v)),\n          CdValidators.custom('kLowerM', (v: number) => this.shecDataValidation(v))\n        ]\n      ],\n      m: [\n        2, // Will be overwritten with plugin defaults\n        [Validators.required, CdValidators.custom('max', () => this.baseValueValidation())]\n      ],\n      crushFailureDomain: '', // Will be preselected\n      crushNumFailureDomains: [\n        0,\n        CdValidators.requiredIf({ crushOsdsPerFailureDomain: { op: 'minValue', arg1: 1 } })\n      ],\n      crushOsdsPerFailureDomain: [\n        0,\n        CdValidators.requiredIf({ crushNumFailureDomains: { op: 'minValue', arg1: 1 } })\n      ],\n      crushRoot: null, // Will be preselected\n      crushDeviceClass: '', // Will be preselected\n      directory: '',\n      // Only for 'jerasure', 'clay' and 'isa' use\n      technique: 'reed_sol_van',\n      // Only for 'jerasure' use\n      packetSize: [2048],\n      // Only for 'lrc' use\n      l: [\n        3, // Will be overwritten with plugin defaults\n        [\n          Validators.required,\n          CdValidators.custom('unequal', (v: number) => this.lrcLocalityValidation(v))\n        ]\n      ],\n      crushLocality: '', // set to none at the end (same list as for failure domains)\n      // Only for 'shec' use\n      c: [\n        2, // Will be overwritten with plugin defaults\n        [\n          Validators.required,\n          CdValidators.custom('cGreaterM', (v: number) => this.shecDurabilityValidation(v))\n        ]\n      ],\n      // Only for 'clay' use\n      d: [\n        5, // Will be overwritten with plugin defaults (k+m-1) = k+1 <= d <= k+m-1\n        [\n          Validators.required,\n          CdValidators.custom('dMin', (v: number) => this.dMinValidation(v)),\n          CdValidators.custom('dMax', (v: number) => this.dMaxValidation(v))\n        ]\n      ],\n      scalar_mds: [this.PLUGIN.JERASURE, [Validators.required]] // jerasure or isa or shec\n    });\n    this.toggleDCalc();\n    this.form.get('k').valueChanges.subscribe(() => this.updateValidityOnChange(['m', 'l', 'd']));\n    this.form\n      .get('m')\n      .valueChanges.subscribe(() => this.updateValidityOnChange(['k', 'l', 'c', 'd']));\n    this.form.get('l').valueChanges.subscribe(() => this.updateValidityOnChange(['k', 'm']));\n    this.form.get('plugin').valueChanges.subscribe((plugin) => this.onPluginChange(plugin));\n    this.form.get('scalar_mds').valueChanges.subscribe(() => this.setClayDefaultsForScalar());\n  }\n\n  private baseValueValidation(dataChunk: boolean = false): boolean {\n    return this.validValidation(() => {\n      const kMSum =\n        this.form.get('crushFailureDomain').value === CrushFailureDomains.Host\n          ? this.getKMSum() + 1\n          : this.getKMSum();\n      return (\n        kMSum > this.deviceCount && this.form.getValue('k') > this.form.getValue('m') === dataChunk\n      );\n    });\n  }\n\n  private validValidation(fn: () => boolean, plugin?: string): boolean {\n    if (!this.form || plugin ? this.plugin !== plugin : false) {\n      return false;\n    }\n    return fn();\n  }\n\n  private getKMSum(): number {\n    return this.form.getValue('k') + this.form.getValue('m');\n  }\n\n  private lrcDataValidation(k: number): boolean {\n    return this.validValidation(() => {\n      const m = this.form.getValue('m');\n      const l = this.form.getValue('l');\n      const km = k + m;\n      this.lrcMultiK = k / (km / l);\n      return k % (km / l) !== 0;\n    }, 'lrc');\n  }\n\n  private shecDataValidation(k: number): boolean {\n    return this.validValidation(() => {\n      const m = this.form.getValue('m');\n      return m > k;\n    }, 'shec');\n  }\n\n  private lrcLocalityValidation(l: number) {\n    return this.validValidation(() => {\n      const value = this.getKMSum();\n      this.lrcGroups = l > 0 ? value / l : 0;\n      return l > 0 && value % l !== 0;\n    }, 'lrc');\n  }\n\n  private shecDurabilityValidation(c: number): boolean {\n    return this.validValidation(() => {\n      const m = this.form.getValue('m');\n      return c > m;\n    }, 'shec');\n  }\n\n  private dMinValidation(d: number): boolean {\n    return this.validValidation(() => this.getDMin() > d, 'clay');\n  }\n\n  getDMin(): number {\n    return this.form.getValue('k') + 1;\n  }\n\n  private dMaxValidation(d: number): boolean {\n    return this.validValidation(() => d > this.getDMax(), 'clay');\n  }\n\n  getDMax(): number {\n    const m = this.form.getValue('m');\n    const k = this.form.getValue('k');\n    return k + m - 1;\n  }\n\n  toggleDCalc() {\n    this.dCalc = !this.dCalc;\n    this.form.get('d')[this.dCalc ? 'disable' : 'enable']();\n    this.calculateD();\n  }\n\n  private calculateD() {\n    if (this.plugin !== this.PLUGIN.CLAY || !this.dCalc) {\n      return;\n    }\n    this.form.silentSet('d', this.getDMax());\n  }\n\n  private updateValidityOnChange(names: string[]) {\n    names.forEach((name) => {\n      if (name === 'd') {\n        this.calculateD();\n      }\n      this.form.get(name).updateValueAndValidity({ emitEvent: false });\n    });\n  }\n\n  private onPluginChange(plugin: string) {\n    this.plugin = plugin;\n    if (plugin === this.PLUGIN.JERASURE) {\n      this.setJerasureDefaults();\n    } else if (plugin === this.PLUGIN.LRC) {\n      this.setLrcDefaults();\n    } else if (plugin === this.PLUGIN.ISA) {\n      this.setIsaDefaults();\n    } else if (plugin === this.PLUGIN.SHEC) {\n      this.setShecDefaults();\n    } else if (plugin === this.PLUGIN.CLAY) {\n      this.setClayDefaults();\n    }\n    this.updateValidityOnChange(['m']); // Triggers k, m, c, d and l\n  }\n\n  private setJerasureDefaults() {\n    this.techniques = [\n      'reed_sol_van',\n      'reed_sol_r6_op',\n      'cauchy_orig',\n      'cauchy_good',\n      'liberation',\n      'blaum_roth',\n      'liber8tion'\n    ];\n    this.setDefaults({\n      k: 4,\n      m: 2,\n      technique: 'reed_sol_van'\n    });\n  }\n\n  private setLrcDefaults() {\n    this.setDefaults({\n      k: 4,\n      m: 2,\n      l: 3\n    });\n  }\n\n  private setIsaDefaults() {\n    /**\n     * Actually k and m are not required - but they will be set to the default values in case\n     * if they are not set, therefore it's fine to mark them as required in order to get\n     * strange values that weren't set.\n     */\n    this.techniques = ['reed_sol_van', 'cauchy'];\n    this.setDefaults({\n      k: 7,\n      m: 3,\n      technique: 'reed_sol_van'\n    });\n  }\n\n  private setShecDefaults() {\n    /**\n     * Actually k, c and m are not required - but they will be set to the default values in case\n     * if they are not set, therefore it's fine to mark them as required in order to get\n     * strange values that weren't set.\n     */\n    this.setDefaults({\n      k: 4,\n      m: 3,\n      c: 2\n    });\n  }\n\n  private setClayDefaults() {\n    /**\n     * Actually d and scalar_mds are not required - but they will be set to show the default values\n     * in case if they are not set, therefore it's fine to mark them as required in order to not get\n     * strange values that weren't set.\n     *\n     * As d would be set to the value k+m-1 for the greatest savings, the form will\n     * automatically update d if the automatic calculation is activated (default).\n     */\n    this.setDefaults({\n      k: 4,\n      m: 2,\n      // d: 5, <- Will be automatically update to 5\n      scalar_mds: this.PLUGIN.JERASURE\n    });\n    this.setClayDefaultsForScalar();\n  }\n\n  private setClayDefaultsForScalar() {\n    const plugin = this.form.getValue('scalar_mds');\n    let defaultTechnique = 'reed_sol_van';\n    if (plugin === this.PLUGIN.JERASURE) {\n      this.techniques = [\n        'reed_sol_van',\n        'reed_sol_r6_op',\n        'cauchy_orig',\n        'cauchy_good',\n        'liber8tion'\n      ];\n    } else if (plugin === this.PLUGIN.ISA) {\n      this.techniques = ['reed_sol_van', 'cauchy'];\n    } else {\n      // this.PLUGIN.SHEC\n      defaultTechnique = 'single';\n      this.techniques = ['single', 'multiple'];\n    }\n    this.setDefaults({ technique: defaultTechnique });\n  }\n\n  private setDefaults(defaults: object) {\n    Object.keys(defaults).forEach((controlName) => {\n      const control = this.form.get(controlName);\n      const value = control.value;\n      /**\n       * As k, m, c and l are now set touched and dirty on the beginning, plugin change will\n       * overwrite their values as we can't determine if the user has changed anything.\n       * k and m can have two default values where as l and c can only have one,\n       * so there is no need to overwrite them.\n       */\n      const overwrite =\n        control.pristine ||\n        (controlName === 'technique' && !this.techniques.includes(value)) ||\n        (controlName === 'k' && [4, 7].includes(value)) ||\n        (controlName === 'm' && [2, 3].includes(value));\n      if (overwrite) {\n        control.setValue(defaults[controlName]); // also validates new value\n      } else {\n        control.updateValueAndValidity();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.tooltips = this.ecpService.formTooltips;\n\n    this.ecpService\n      .getInfo()\n      .subscribe(\n        ({\n          plugins,\n          names,\n          directory,\n          nodes\n        }: {\n          plugins: string[];\n          names: string[];\n          directory: string;\n          nodes: CrushNode[];\n        }) => {\n          this.initCrushNodeSelection(\n            nodes,\n            this.form.get('crushRoot'),\n            this.form.get('crushFailureDomain'),\n            this.form.get('crushDeviceClass'),\n            false\n          );\n          this.plugins = plugins;\n          this.names = names;\n          this.form.silentSet('directory', directory);\n          this.preValidateNumericInputFields();\n        }\n      );\n  }\n\n  /**\n   * This allows k, m, l and c to be validated instantly on change, before the\n   * fields got changed before by the user.\n   */\n  private preValidateNumericInputFields() {\n    const kml = ['k', 'm', 'l', 'c', 'd'].map((name) => this.form.get(name));\n    kml.forEach((control) => {\n      control.markAsTouched();\n      control.markAsDirty();\n    });\n    kml[1].updateValueAndValidity(); // Update validity of k, m, c, d and l\n  }\n\n  onSubmit() {\n    if (this.form.invalid) {\n      this.form.setErrors({ cdSubmitButton: true });\n      return;\n    }\n    const profile = this.createJson();\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('ecp/create', { name: profile.name }),\n        call: this.ecpService.create(profile)\n      })\n      .subscribe({\n        error: () => {\n          this.form.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.activeModal.close();\n          this.submitAction.emit(profile);\n        }\n      });\n  }\n\n  private createJson() {\n    const pluginControls = {\n      technique: [this.PLUGIN.ISA, this.PLUGIN.JERASURE, this.PLUGIN.CLAY],\n      packetSize: [this.PLUGIN.JERASURE],\n      l: [this.PLUGIN.LRC],\n      crushLocality: [this.PLUGIN.LRC],\n      c: [this.PLUGIN.SHEC],\n      d: [this.PLUGIN.CLAY],\n      scalar_mds: [this.PLUGIN.CLAY]\n    };\n    const ecp = new ErasureCodeProfile();\n    const plugin = this.form.getValue('plugin');\n    Object.keys(this.form.controls)\n      .filter((name) => {\n        const pluginControl = pluginControls[name];\n        const value = this.form.getValue(name);\n        const usable = (pluginControl && pluginControl.includes(plugin)) || !pluginControl;\n        return usable && value && value !== '';\n      })\n      .forEach((name) => {\n        this.extendJson(name, ecp);\n      });\n    return ecp;\n  }\n\n  private extendJson(name: string, ecp: ErasureCodeProfile) {\n    const differentApiAttributes = {\n      crushFailureDomain: 'crush-failure-domain',\n      crushNumFailureDomains: 'crush-num-failure-domains',\n      crushOsdsPerFailureDomain: 'crush-osds-per-failure-domain',\n      crushRoot: 'crush-root',\n      crushDeviceClass: 'crush-device-class',\n      packetSize: 'packetsize',\n      crushLocality: 'crush-locality'\n    };\n    const value = this.form.getValue(name);\n    ecp[differentApiAttributes[name] || name] = name === 'crushRoot' ? value.name : value;\n  }\n\n  onCrushFailureDomainChane() {\n    this.form.get('k').updateValueAndValidity();\n    this.form.get('m').updateValueAndValidity();\n  }\n}\n","import { Validators } from '@angular/forms';\n\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { Pool } from '../pool';\n\nexport class PoolFormData {\n  poolTypes: string[];\n  erasureInfo = false;\n  crushInfo = false;\n  applications: any;\n\n  readonly APP_LABELS: Record<string, string> = {\n    cephfs: 'Filesystem',\n    rbd: 'Block',\n    rgw: 'Object'\n  };\n\n  constructor() {\n    this.poolTypes = ['erasure', 'replicated'];\n    this.applications = {\n      selected: [],\n      default: ['cephfs', 'rbd', 'rgw'],\n      available: [], // Filled during runtime\n      validators: [Validators.pattern('[A-Za-z0-9_]+'), Validators.maxLength(128)],\n      messages: new SelectMessages({\n        empty: $localize`No applications added`,\n        selectionLimit: {\n          text: $localize`Applications limit reached`,\n          tooltip: $localize`A pool can only have up to four applications definitions.`\n        },\n        customValidations: {\n          pattern: $localize`Allowed characters '_a-zA-Z0-9'`,\n          maxlength: $localize`Maximum length is 128 characters`\n        },\n        filter: $localize`Filter or add applications`,\n        add: $localize`Add application`\n      })\n    };\n  }\n\n  pgs = 1;\n  pool: Pool; // Only available during edit mode\n}\n","<div class=\"cd-col-form\"\n     *cdFormLoading=\"loading\">\n  <form name=\"form\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"form\"\n        novalidate>\n    <div class=\"card\">\n      <div i18n=\"form title|Example: Create Pool@@formTitle\"\n           class=\"card-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n      <div class=\"card-body\">\n        <!-- Name -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"name\"\n                 i18n>Name</label>\n          <div class=\"cd-col-form-input\">\n            <input data-testid=\"pool-name\"\n                   id=\"name\"\n                   type=\"text\"\n                   class=\"form-control\"\n                   placeholder=\"Name...\"\n                   i18n-placeholder\n                   formControlName=\"name\"\n                   autofocus>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', formDir, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', formDir, 'uniqueName')\"\n                  i18n>The chosen Ceph pool name is already in use.</span>\n            <span *ngIf=\"form.showError('name', formDir, 'rbdPool')\"\n                  class=\"invalid-feedback\"\n                  i18n>It's not possible to create an RBD pool with '/' in the name.\n              Please change the name or remove 'rbd' from the applications list.</span>\n            <span *ngIf=\"form.showError('name', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>Pool name can only contain letters, numbers, '.', '-', '_' or '/'.</span>\n          </div>\n        </div>\n\n        <!-- Pool type selection -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"poolType\"\n                 i18n>Pool type</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    data-testid=\"pool-type-select\"\n                    id=\"poolType\"\n                    formControlName=\"poolType\">\n              <option ngValue=\"\"\n                      i18n>-- Select a pool type --</option>\n              <option *ngFor=\"let poolType of data.poolTypes\"\n                      [value]=\"poolType\">\n                {{ poolType }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('poolType', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <div *ngIf=\"isReplicated || isErasure\">\n          <!-- PG Autoscale Mode -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"pgAutoscaleMode\">PG Autoscale</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"pgAutoscaleMode\"\n                      formControlName=\"pgAutoscaleMode\">\n                <option *ngFor=\"let mode of pgAutoscaleModes\"\n                        [value]=\"mode\">\n                  {{ mode }}\n                </option>\n              </select>\n            </div>\n          </div>\n\n          <!-- Pg number -->\n          <div class=\"form-group row\"\n               *ngIf=\"form.getValue('pgAutoscaleMode') !== 'on'\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"pgNum\"\n                   i18n>Placement groups</label>\n            <div class=\"cd-col-form-input\">\n              <input class=\"form-control\"\n                     id=\"pgNum\"\n                     data-testid=\"pgNum\"\n                     formControlName=\"pgNum\"\n                     min=\"1\"\n                     type=\"number\"\n                     (focus)=\"externalPgChange = false\"\n                     (blur)=\"alignPgs()\"\n                     required>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('pgNum', formDir, 'required')\"\n                    i18n>This field is required!</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('pgNum', formDir, 'min')\"\n                    i18n>At least one placement group is needed!</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('pgNum', formDir, '34')\"\n                    i18n>Your cluster can't handle this many PGs. Please recalculate the PG amount needed.</span>\n              <span class=\"form-text text-muted\">\n                <cd-doc section=\"pgs\"\n                        docText=\"Calculation help\"\n                        i18n-docText></cd-doc>\n              </span>\n              <span class=\"form-text text-muted\"\n                    *ngIf=\"externalPgChange\"\n                    i18n>The current PGs settings were calculated for you, you\n                should make sure the values suit your needs before submit.</span>\n            </div>\n          </div>\n\n          <!-- Replica Size -->\n          <div class=\"form-group row\"\n               *ngIf=\"isReplicated\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"size\"\n                   i18n>Replicated size</label>\n            <div class=\"cd-col-form-input\">\n              <input class=\"form-control\"\n                     id=\"size\"\n                     [max]=\"getMaxSize()\"\n                     [min]=\"getMinSize()\"\n                     type=\"number\"\n                     formControlName=\"size\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('size', formDir)\">\n                <ul class=\"list-inline\">\n                  <li i18n>Minimum: {{ getMinSize() }}</li>\n                  <li i18n>Maximum: {{ getMaxSize() }}</li>\n                </ul>\n              </span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('size', formDir)\"\n                    i18n>The size specified is out of range. A value from\n                {{ getMinSize() }} to {{ getMaxSize() }} is usable.</span>\n              <span class=\"text-warning-dark\"\n                    *ngIf=\"form.getValue('size') === 1\"\n                    i18n>A size of 1 will not create a replication of the\n                object. The 'Replicated size' includes the object itself.</span>\n            </div>\n          </div>\n\n          <!-- Flags -->\n          <div class=\"form-group row\"\n               *ngIf=\"info.is_all_bluestore && isErasure\">\n            <label i18n\n                   class=\"cd-col-form-label\">Flags</label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"custom-control custom-checkbox\">\n                <input type=\"checkbox\"\n                       class=\"custom-control-input\"\n                       id=\"ec-overwrites\"\n                       formControlName=\"ecOverwrites\">\n                <label class=\"custom-control-label\"\n                       for=\"ec-overwrites\"\n                       i18n>EC Overwrites</label>\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <!-- Applications -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"applications\">\n            <ng-container i18n>Applications</ng-container>\n            <cd-helper>\n              <span i18n>Pools need to be associated with an application before use</span>\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <cd-select-badges id=\"applications\"\n                              [customBadges]=\"true\"\n                              [customBadgeValidators]=\"data.applications.validators\"\n                              [messages]=\"data.applications.messages\"\n                              [data]=\"data.applications.selected\"\n                              [options]=\"data.applications.available\"\n                              [selectionLimit]=\"4\"\n                              (selection)=\"appSelection()\">\n            </cd-select-badges>\n            <svg  *ngIf=\"data.applications.selected <= 0\"\n                  [cdsIcon]=\"icons.warning\"\n                  [size]=\"icons.size20\"\n                  title=\"Pools should be associated with an application tag\"\n                  class=\"cds-warning-color\"\n                  i18n-title></svg>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"!isApplicationsSelected && data.applications.selected <= 0\"\n                  i18n>Application selection is required!</span>\n          </div>\n        </div>\n        <!-- Mirroring -->\n        <div class=\"form-group row\"\n             *ngIf=\"data.applications.selected.includes('rbd')\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input class=\"custom-control-input\"\n                     id=\"rbdMirroring\"\n                     data-testid=\"rbd-mirroring-check\"\n                     type=\"checkbox\"\n                     formControlName=\"rbdMirroring\">\n              <label class=\"custom-control-label\"\n                     for=\"rbdMirroring\"\n                     i18n>Mirroring</label>\n              <cd-help-text>\n                <span i18n>Check this option to enable Pool based mirroring on a Block(RBD) pool.</span>\n              </cd-help-text>\n            </div>\n          </div>\n        </div>\n        <!-- CRUSH -->\n        <div *ngIf=\"isErasure || isReplicated\">\n          <legend i18n>CRUSH</legend>\n          <!-- Erasure Profile select -->\n          <div class=\"form-group row\"\n               *ngIf=\"isErasure\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"erasureProfile\">Erasure code profile</label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group mb-1\">\n                <select class=\"form-select\"\n                        id=\"erasureProfile\"\n                        formControlName=\"erasureProfile\"\n                        (change)=\"erasureProfileChange()\">\n                  <option *ngIf=\"!ecProfiles\"\n                          ngValue=\"\"\n                          i18n>Loading...</option>\n                  <option *ngIf=\"ecProfiles && ecProfiles.length === 0\"\n                          [ngValue]=\"null\"\n                          i18n>-- No erasure code profile available --</option>\n                  <option *ngIf=\"ecProfiles && ecProfiles.length > 0\"\n                          [ngValue]=\"null\"\n                          i18n>-- Select an erasure code profile --</option>\n                  <option *ngFor=\"let ecp of ecProfiles\"\n                          [ngValue]=\"ecp\">\n                    {{ ecp.name }}\n                  </option>\n                </select>\n                <button class=\"btn btn-light\"\n                        [ngClass]=\"{'active': data.erasureInfo}\"\n                        id=\"ecp-info-button\"\n                        type=\"button\"\n                        (click)=\"data.erasureInfo = !data.erasureInfo\">\n                  <svg [cdsIcon]=\"icons.questionCircle\"\n                       [size]=\"icons.size20\"\n                       class=\"cds-info-color \"></svg>\n                </button>\n                <button class=\"btn btn-light\"\n                        type=\"button\"\n                        *ngIf=\"!editing\"\n                        (click)=\"addErasureCodeProfile()\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size20\"\n                       class=\"cds-info-color \"></svg>\n                </button>\n                <button class=\"btn btn-light\"\n                        type=\"button\"\n                        *ngIf=\"!editing\"\n                        ngbTooltip=\"This profile can't be deleted as it is in use.\"\n                        i18n-ngbTooltip\n                        triggers=\"manual\"\n                        #ecpDeletionBtn=\"ngbTooltip\"\n                        (click)=\"deleteErasureCodeProfile()\">\n                  <svg [cdsIcon]=\"icons.trash\"\n                       [size]=\"icons.size16\"\n                       class=\"cds-info-color\"></svg>\n                </button>\n              </div>\n              <span class=\"form-text text-muted\"\n                    id=\"ecp-info-block\"\n                    *ngIf=\"data.erasureInfo && form.getValue('erasureProfile')\">\n                <nav ngbNav\n                     #ecpInfoTabs=\"ngbNav\"\n                     class=\"nav-tabs\">\n                  <ng-container ngbNavItem=\"ecp-info\">\n                    <a ngbNavLink\n                       i18n>Profile</a>\n                    <ng-template ngbNavContent>\n                      <cd-table-key-value [renderObjects]=\"true\"\n                                          [hideKeys]=\"['name']\"\n                                          [data]=\"form.getValue('erasureProfile')\"\n                                          [autoReload]=\"false\">\n                      </cd-table-key-value>\n                    </ng-template>\n                  </ng-container>\n                  <ng-container ngbNavItem=\"used-by-pools\">\n                    <a ngbNavLink\n                       i18n>Used by pools</a>\n                    <ng-template ngbNavContent>\n                      <ng-template #ecpIsNotUsed>\n                        <span i18n>Profile is not in use.</span>\n                      </ng-template>\n                      <ul *ngIf=\"ecpUsage; else ecpIsNotUsed\">\n                        <li *ngFor=\"let pool of ecpUsage\">\n                          {{ pool }}\n                        </li>\n                      </ul>\n                    </ng-template>\n                  </ng-container>\n                </nav>\n\n                <div [ngbNavOutlet]=\"ecpInfoTabs\"></div>\n              </span>\n            </div>\n          </div>\n\n          <!-- Crush ruleset selection -->\n          <div class=\"form-group row\"\n               *ngIf=\"isErasure && !editing\">\n            <label class=\"cd-col-form-label\"\n                   for=\"crushRule\"\n                   i18n>Crush ruleset</label>\n            <div class=\"cd-col-form-input\">\n              <span *ngIf=\"!msrCrush; else msrCrushText\"\n                    class=\"form-text text-muted\"\n                    i18n>A new crush ruleset will be implicitly created.</span>\n              <ng-template #msrCrushText>\n                <span class=\"form-text text-muted\"\n                      i18n>A new crush MSR ruleset will be implicitly created.\n                      When crush-osds-per-failure-domain or crush-num-failure-domains is specified</span>\n              </ng-template>\n            </div>\n          </div>\n          <div class=\"form-group row\"\n               *ngIf=\"isReplicated || editing\">\n            <label class=\"cd-col-form-label\"\n                   for=\"crushRule\"\n                   i18n>Crush ruleset</label>\n            <div class=\"cd-col-form-input\">\n              <ng-template #noRules>\n                <span class=\"form-text text-muted\">\n                  <span i18n>There are no rules.</span>&nbsp;\n                </span>\n              </ng-template>\n              <div *ngIf=\"current.rules.length > 0; else noRules\">\n                <div class=\"input-group\">\n                  <select class=\"form-select\"\n                          id=\"crushRule\"\n                          formControlName=\"crushRule\">\n                    <option [ngValue]=\"null\"\n                            i18n>-- Select a crush rule --</option>\n                    <option *ngFor=\"let rule of current.rules\"\n                            [ngValue]=\"rule\">\n                      {{ rule.rule_name }}\n                    </option>\n                  </select>\n                  <button class=\"btn btn-light\"\n                          [ngClass]=\"{'active': data.crushInfo}\"\n                          id=\"crush-info-button\"\n                          type=\"button\"\n                          ngbTooltip=\"Placement and\n                          replication strategies or distribution policies that allow to\n                          specify how CRUSH places data replicas.\"\n                          i18n-ngbTooltip\n                          (click)=\"data.crushInfo = !data.crushInfo\">\n                    <svg [cdsIcon]=\"icons.questionCircle\"\n                         [size]=\"icons.size20\"\n                         class=\"cds-info-color\"></svg>\n                  </button>\n                  <button class=\"btn btn-light\"\n                          type=\"button\"\n                          *ngIf=\"isReplicated && !editing\"\n                          (click)=\"addCrushRule()\">\n                    <svg [cdsIcon]=\"icons.add\"\n                         [size]=\"icons.size16\"\n                         class=\"cds-info-color\"></svg>\n                  </button>\n                  <button class=\"btn btn-light\"\n                          *ngIf=\"isReplicated && !editing\"\n                          type=\"button\"\n                          ngbTooltip=\"This rule can't be deleted as it is in use.\"\n                          i18n-ngbTooltip\n                          triggers=\"manual\"\n                          #crushDeletionBtn=\"ngbTooltip\"\n                          (click)=\"deleteCrushRule()\">\n                    <svg [cdsIcon]=\"icons.trash\"\n                         [size]=\"icons.size16\"\n                         class=\"cds-info-color\"></svg>\n                  </button>\n                </div>\n\n                <div class=\"form-text text-muted\"\n                     id=\"crush-info-block\"\n                     *ngIf=\"data.crushInfo && form.getValue('crushRule')\">\n                  <nav ngbNav\n                       #crushInfoTabs=\"ngbNav\"\n                       class=\"nav-tabs\">\n                    <ng-container ngbNavItem=\"crush-rule-info\">\n                      <a ngbNavLink\n                         i18n>Crush rule</a>\n                      <ng-template ngbNavContent>\n                        <cd-table-key-value [renderObjects]=\"false\"\n                                            [hideKeys]=\"['steps', 'type', 'rule_name']\"\n                                            [data]=\"form.getValue('crushRule')\"\n                                            [autoReload]=\"false\">\n                        </cd-table-key-value>\n                      </ng-template>\n                    </ng-container>\n                    <ng-container ngbNavItem=\"crush-rule-steps\">\n                      <a ngbNavLink\n                         i18n>Crush steps</a>\n                      <ng-template ngbNavContent>\n                        <ol>\n                          <li *ngFor=\"let step of form.get('crushRule').value.steps\">\n                            {{ describeCrushStep(step) }}\n                          </li>\n                        </ol>\n                      </ng-template>\n                    </ng-container>\n                    <ng-container ngbNavItem=\"used-by-pools\">\n                      <a ngbNavLink\n                         i18n>Used by pools</a>\n                      <ng-template ngbNavContent>\n\n                        <ng-template #ruleIsNotUsed>\n                          <span i18n>Rule is not in use.</span>\n                        </ng-template>\n                        <ul *ngIf=\"crushUsage; else ruleIsNotUsed\">\n                          <li *ngFor=\"let pool of crushUsage\">\n                            {{ pool }}\n                          </li>\n                        </ul>\n                      </ng-template>\n                    </ng-container>\n                  </nav>\n\n                  <div [ngbNavOutlet]=\"crushInfoTabs\"></div>\n                </div>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('crushRule', formDir, 'required')\"\n                      i18n>This field is required!</span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('crushRule', formDir, 'tooFewOsds')\"\n                      i18n>The rule can't be used in the current cluster as it has\n                  too few OSDs to meet the minimum required OSD by this rule.</span>\n              </div>\n            </div>\n          </div>\n\n        </div>\n\n        <!-- Compression -->\n        <div *ngIf=\"info.is_all_bluestore\"\n             formGroupName=\"compression\">\n          <legend i18n>Compression</legend>\n\n          <!-- Compression Mode -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"mode\"\n                   i18n>Mode\n            </label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"mode\"\n                      formControlName=\"mode\">\n                <option *ngFor=\"let mode of info.compression_modes\"\n                        [value]=\"mode\">\n                  {{ mode }}\n                </option>\n              </select>\n              <cd-help-text>Policy used for compression algorithm</cd-help-text>\n            </div>\n          </div>\n          <div *ngIf=\"hasCompressionEnabled()\">\n            <!-- Compression algorithm selection -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"algorithm\">\n                <ng-container i18n>Algorithm</ng-container>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <select class=\"form-select\"\n                        id=\"algorithm\"\n                        formControlName=\"algorithm\">\n                  <option *ngIf=\"!info.compression_algorithms\"\n                          ngValue=\"\"\n                          i18n>Loading...</option>\n                  <option *ngIf=\"info.compression_algorithms && info.compression_algorithms.length === 0\"\n                          i18n\n                          ngValue=\"\">-- No erasure compression algorithm available --</option>\n                  <option *ngFor=\"let algorithm of info.compression_algorithms\"\n                          [value]=\"algorithm\">\n                    {{ algorithm }}\n                  </option>\n                </select>\n                <cd-help-text>\n                  <span i18n>Compression algorithm used</span>\n                </cd-help-text>\n              </div>\n            </div>\n\n            <!-- Compression min blob size -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"minBlobSize\">\n                <ng-container i18n>Minimum blob size</ng-container>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"input-group mb-1\">\n                  <input id=\"minBlobSize\"\n                         formControlName=\"minBlobSize\"\n                         type=\"text\"\n                         min=\"0\"\n                         class=\"form-control\"\n                         i18n-placeholder\n                         placeholder=\"e.g., 128\">\n                  <select id=\"minUnit\"\n                          class=\"form-input form-select\"\n                          formControlName=\"minBlobSizeUnit\">\n                    <option *ngFor=\"let u of blobUnits\"\n                            [value]=\"u\">\n                      {{ u }}\n                    </option>\n                  </select>\n                </div>\n                <cd-help-text>\n                  <span i18n>Chunks smaller than Minimum blob size are never compressed</span>\n                </cd-help-text>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('minBlobSize', formDir, 'min')\"\n                      i18n>Value should be greater than 0</span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('minBlobSize', formDir, 'maximum')\"\n                      i18n>Value should be less than the maximum blob size</span>\n                <span *ngIf=\"form.showError('minBlobSize', formDir, 'pattern')\"\n                      class=\"invalid-feedback\"\n                      i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n              </div>\n            </div>\n\n            <!-- Compression max blob size -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"maxBlobSize\">\n                <ng-container i18n>Maximum blob size</ng-container>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"input-group mb-1\">\n                  <input id=\"maxBlobSize\"\n                         type=\"text\"\n                         min=\"0\"\n                         formControlName=\"maxBlobSize\"\n                         class=\"form-control\">\n                  <select id=\"minUnit\"\n                          class=\"form-input form-select\"\n                          formControlName=\"maxBlobSizeUnit\">\n                    <option *ngFor=\"let u of blobUnits\"\n                            [value]=\"u\">\n                        {{ u }}\n                    </option>\n                  </select>\n                </div>\n                <cd-help-text>\n                  <span i18n>Chunks larger than `Maximum Blob Size` are broken into smaller blobs of size mentioned before being compressed.</span>\n                </cd-help-text>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('maxBlobSize', formDir, 'min')\"\n                      i18n>Value should be greater than 0</span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('maxBlobSize', formDir, 'minimum')\"\n                      i18n>Value should be greater than the minimum blob size</span>\n                <span *ngIf=\"form.showError('maxBlobSize', formDir, 'pattern')\"\n                      class=\"invalid-feedback\"\n                      i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n              </div>\n            </div>\n\n            <!-- Compression ratio -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"ratio\">\n                <ng-container i18n>Ratio</ng-container>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"ratio\"\n                       formControlName=\"ratio\"\n                       type=\"number\"\n                       min=\"0\"\n                       max=\"1\"\n                       step=\"0.1\"\n                       class=\"form-control\">\n                <cd-help-text>\n                  <span i18n>The ratio of the size of the data chunk after compression relative to the original size must be at least this small in order to store the compressed version</span>\n                </cd-help-text>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"form.showError('ratio', formDir, 'min') || form.showError('ratio', formDir, 'max')\"\n                      i18n>Value should be between 0.0 and 1.0</span>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n        <!-- Quotas -->\n        <div>\n          <legend i18n>Quotas</legend>\n\n          <!-- Max Bytes -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"max_bytes\">\n              <ng-container i18n>Max bytes</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group mb-1\">\n                <input class=\"form-control\"\n                       id=\"max_bytes\"\n                       type=\"text\"\n                       formControlName=\"max_bytes\">\n                <select id=\"unit\"\n                        class=\"form-input form-select\"\n                        formControlName=\"maxBytesUnit\">\n                  <option *ngFor=\"let u of maxBytesUnits\"\n                          [value]=\"u\">\n                    {{ u }}\n                  </option>\n                </select>\n              </div>\n              <cd-help-text>\n                <span i18n>Leave it blank or specify 0 to disable this quota.</span>\n                <br>\n                <span i18n>A valid quota should be greater than 0.</span>\n              </cd-help-text>\n              <span *ngIf=\"form.showError('max_bytes', formDir, 'pattern')\"\n                    class=\"invalid-feedback\"\n                    i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n            </div>\n          </div>\n\n          <!-- Max Objects -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"max_objects\">\n              <ng-container i18n>Max objects</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input class=\"form-control\"\n                     id=\"max_objects\"\n                     min=\"0\"\n                     type=\"number\"\n                     formControlName=\"max_objects\">\n              <cd-help-text>\n                <span i18n>Leave it blank or specify 0 to disable this quota.</span>\n                <br>\n                <span i18n>A valid quota should be greater than 0.</span>\n              </cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('max_objects', formDir, 'min')\"\n                    i18n>The value should be greater or equal to 0</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Pool configuration -->\n        <div [hidden]=\"isErasure || data.applications.selected.indexOf('rbd') === -1\">\n          <cd-rbd-configuration-form [form]=\"form\"\n                                     [initializeData]=\"initializeConfigData\"\n                                     (changes)=\"currentConfigurationValues = $event()\">\n          </cd-rbd-configuration-form>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"form\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n\n    </div>\n\n  </form>\n</div>\n","import { Component, OnInit, Type, ViewChild } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { NgbNav, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\n\nimport { DashboardNotFoundError } from '~/app/core/error/error';\nimport { CrushRuleService } from '~/app/shared/api/crush-rule.service';\nimport { ErasureCodeProfileService } from '~/app/shared/api/erasure-code-profile.service';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { CrushNodeSelectionClass } from '~/app/shared/classes/crush.node.selection.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport {\n  RbdConfigurationEntry,\n  RbdConfigurationSourceField\n} from '~/app/shared/models/configuration';\nimport { CrushRule } from '~/app/shared/models/crush-rule';\nimport { CrushStep } from '~/app/shared/models/crush-step';\nimport { ErasureCodeProfile } from '~/app/shared/models/erasure-code-profile';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { PoolFormInfo } from '~/app/shared/models/pool-form-info';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { CrushRuleFormModalComponent } from '../crush-rule-form-modal/crush-rule-form-modal.component';\nimport { ErasureCodeProfileFormModalComponent } from '../erasure-code-profile-form/erasure-code-profile-form-modal.component';\nimport { Pool } from '../pool';\nimport { PoolFormData } from './pool-form-data';\nimport { PoolEditModeResponseModel } from '../../block/mirroring/pool-edit-mode-modal/pool-edit-mode-response.model';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\n\ninterface FormFieldDescription {\n  externalFieldName: string;\n  formControlName: string;\n  attr?: string;\n  replaceFn?: Function;\n  editable?: boolean;\n  resetValue?: any;\n}\n\n@Component({\n  selector: 'cd-pool-form',\n  templateUrl: './pool-form.component.html',\n  styleUrls: ['./pool-form.component.scss']\n})\nexport class PoolFormComponent extends CdForm implements OnInit {\n  @ViewChild('crushInfoTabs') crushInfoTabs: NgbNav;\n  @ViewChild('crushDeletionBtn') crushDeletionBtn: NgbTooltip;\n  @ViewChild('ecpInfoTabs') ecpInfoTabs: NgbNav;\n  @ViewChild('ecpDeletionBtn') ecpDeletionBtn: NgbTooltip;\n\n  permission: Permission;\n  form: CdFormGroup;\n  ecProfiles: ErasureCodeProfile[];\n  info: PoolFormInfo;\n  routeParamsSubscribe: any;\n  editing = false;\n  isReplicated = false;\n  isErasure = false;\n  blobUnits = ['B', 'KiB', 'MiB', 'GiB', 'TiB'];\n  maxBytesUnits = ['KiB', 'MiB', 'GiB', 'TiB'];\n  data = new PoolFormData();\n  externalPgChange = false;\n  current: Record<string, any> = {\n    rules: []\n  };\n  initializeConfigData = new ReplaySubject<{\n    initialData: RbdConfigurationEntry[];\n    sourceType: RbdConfigurationSourceField;\n  }>(1);\n  currentConfigurationValues: { [configKey: string]: any } = {};\n  action: string;\n  resource: string;\n  icons = Icons;\n  pgAutoscaleModes: string[];\n  crushUsage: string[] = undefined; // Will only be set if a rule is used by some pool\n  ecpUsage: string[] = undefined; // Will only be set if a rule is used by some pool\n  crushRuleMaxSize = 10;\n  DEFAULT_RATIO = 0.875;\n  isApplicationsSelected = true;\n  msrCrush: boolean = false;\n\n  private modalSubscription: Subscription;\n\n  constructor(\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private route: ActivatedRoute,\n    private router: Router,\n    private modalService: ModalService,\n    private poolService: PoolService,\n    private authStorageService: AuthStorageService,\n    private formatter: FormatterService,\n    private taskWrapper: TaskWrapperService,\n    private ecpService: ErasureCodeProfileService,\n    private crushRuleService: CrushRuleService,\n    public actionLabels: ActionLabelsI18n,\n    private rbdMirroringService: RbdMirroringService\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/pool/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`pool`;\n    this.authenticate();\n    this.createForm();\n  }\n\n  authenticate() {\n    this.permission = this.authStorageService.getPermissions().pool;\n    if (\n      !this.permission.read ||\n      (!this.permission.update && this.editing) ||\n      (!this.permission.create && !this.editing)\n    ) {\n      throw new DashboardNotFoundError();\n    }\n  }\n\n  private createForm() {\n    const compressionForm = new CdFormGroup({\n      mode: new UntypedFormControl('none'),\n      algorithm: new UntypedFormControl(''),\n      minBlobSize: new UntypedFormControl('', {\n        updateOn: 'blur'\n      }),\n      minBlobSizeUnit: new UntypedFormControl(this.blobUnits[0], {\n        updateOn: 'blur'\n      }),\n      maxBlobSize: new UntypedFormControl('', {\n        updateOn: 'blur'\n      }),\n      maxBlobSizeUnit: new UntypedFormControl(this.blobUnits[2], {\n        updateOn: 'blur'\n      }),\n      ratio: new UntypedFormControl(this.DEFAULT_RATIO, {\n        updateOn: 'blur'\n      })\n    });\n\n    this.form = new CdFormGroup(\n      {\n        name: new UntypedFormControl('', {\n          validators: [\n            Validators.pattern(/^[.A-Za-z0-9_/-]+$/),\n            Validators.required,\n            CdValidators.custom('rbdPool', () => {\n              return (\n                this.form &&\n                this.form.getValue('name').includes('/') &&\n                this.data &&\n                this.data.applications.selected.indexOf('rbd') !== -1\n              );\n            })\n          ]\n        }),\n        poolType: new UntypedFormControl('', {\n          validators: [Validators.required]\n        }),\n        crushRule: new UntypedFormControl(null, {\n          validators: [\n            CdValidators.custom(\n              'tooFewOsds',\n              (rule: any) => this.info && rule && this.info.osd_count < 1\n            ),\n            CdValidators.custom(\n              'required',\n              (rule: CrushRule) =>\n                this.isReplicated && this.info?.crush_rules_replicated?.length > 0 && !rule\n            )\n          ]\n        }),\n        size: new UntypedFormControl('', {\n          updateOn: 'blur'\n        }),\n        erasureProfile: new UntypedFormControl(null),\n        pgNum: new UntypedFormControl('', {\n          validators: [Validators.required]\n        }),\n        pgAutoscaleMode: new UntypedFormControl(null),\n        ecOverwrites: new UntypedFormControl(false),\n        compression: compressionForm,\n        max_bytes: new UntypedFormControl(''),\n        maxBytesUnit: new UntypedFormControl(this.maxBytesUnits[2]),\n        max_objects: new UntypedFormControl(0),\n        rbdMirroring: new UntypedFormControl(false)\n      },\n      [CdValidators.custom('form', (): null => null)]\n    );\n  }\n\n  ngOnInit() {\n    this.poolService.getInfo().subscribe((info: PoolFormInfo) => {\n      this.initInfo(info);\n      if (this.editing) {\n        this.initEditMode();\n      } else {\n        this.setAvailableApps();\n        this.loadingReady();\n      }\n      this.listenToChanges();\n      this.setComplexValidators();\n    });\n    this.erasureProfileChange();\n  }\n\n  private initInfo(info: PoolFormInfo) {\n    this.pgAutoscaleModes = info.pg_autoscale_modes;\n    this.form.silentSet('pgAutoscaleMode', info.pg_autoscale_default_mode);\n    this.form.silentSet('algorithm', info.bluestore_compression_algorithm);\n    this.info = info;\n    this.initEcp(info.erasure_code_profiles);\n  }\n\n  private initEcp(ecProfiles: ErasureCodeProfile[]) {\n    this.setListControlStatus('erasureProfile', ecProfiles);\n    this.ecProfiles = ecProfiles;\n  }\n\n  /**\n   * Used to update the crush rule or erasure code profile listings.\n   *\n   * If only one rule or profile exists it will be selected.\n   * If nothing exists null will be selected.\n   * If more than one rule or profile exists the listing will be enabled,\n   * otherwise disabled.\n   */\n  private setListControlStatus(controlName: string, arr: any[]) {\n    const control = this.form.get(controlName);\n    const value = control.value;\n    if (arr.length === 1 && (!value || !_.isEqual(value, arr[0]))) {\n      control.setValue(arr[0]);\n    } else if (arr.length === 0 && value) {\n      control.setValue(null);\n    }\n    if (arr.length <= 1) {\n      if (control.enabled) {\n        control.disable();\n      }\n    } else if (control.disabled) {\n      control.enable();\n    }\n  }\n\n  private initEditMode() {\n    this.disableForEdit();\n    this.routeParamsSubscribe = this.route.params.subscribe((param: { name: string }) =>\n      this.poolService.get(param.name).subscribe((pool: Pool) => {\n        this.data.pool = pool;\n        this.initEditFormData(pool);\n        this.loadingReady();\n      })\n    );\n  }\n\n  private disableForEdit() {\n    ['poolType', 'crushRule', 'size', 'erasureProfile', 'ecOverwrites'].forEach((controlName) =>\n      this.form.get(controlName).disable()\n    );\n  }\n\n  private initEditFormData(pool: Pool) {\n    this.initializeConfigData.next({\n      initialData: pool.configuration,\n      sourceType: RbdConfigurationSourceField.pool\n    });\n    const maxBytesConverted = this.dimlessBinaryPipe.transform(pool.quota_max_bytes).split(' ');\n    const minBlobSizeConverted = this.dimlessBinaryPipe\n      .transform(pool.options.compression_min_blob_size)\n      .split(' ');\n    const maxBlobSizeConverted = this.dimlessBinaryPipe\n      .transform(pool.options.compression_max_blob_size)\n      .split(' ');\n    this.poolTypeChange(pool.type);\n    const rules = this.info.crush_rules_replicated.concat(this.info.crush_rules_erasure);\n    const dataMap = {\n      name: pool.pool_name,\n      poolType: pool.type,\n      crushRule: rules.find((rule: CrushRule) => rule.rule_name === pool.crush_rule),\n      size: pool.size,\n      erasureProfile: this.ecProfiles.find((ecp) => ecp.name === pool.erasure_code_profile),\n      pgAutoscaleMode: pool.pg_autoscale_mode,\n      pgNum: pool.pg_num,\n      ecOverwrites: pool.flags_names.includes('ec_overwrites'),\n      mode: pool.options.compression_mode,\n      algorithm: pool.options.compression_algorithm,\n      minBlobSize: minBlobSizeConverted[0],\n      minBlobSizeUnit: minBlobSizeConverted[1],\n      maxBlobSize: maxBlobSizeConverted[0],\n      maxBlobSizeUnit: maxBlobSizeConverted[1],\n      ratio: pool.options.compression_required_ratio,\n      max_bytes: maxBytesConverted[0],\n      maxBytesUnit: maxBytesConverted[1],\n      max_objects: pool.quota_max_objects\n    };\n    Object.keys(dataMap).forEach((controlName: string) => {\n      const value = dataMap[controlName];\n      if (!_.isUndefined(value) && value !== '') {\n        this.form.silentSet(controlName, value);\n      }\n    });\n    this.data.pgs = this.form.getValue('pgNum');\n    this.setAvailableApps(this.data.applications.default.concat(pool.application_metadata));\n    this.data.applications.selected = pool.application_metadata;\n    this.rbdMirroringService\n      .getPool(pool.pool_name)\n      .subscribe((resp: PoolEditModeResponseModel) => {\n        this.form.get('rbdMirroring').setValue(resp.mirror_mode === 'pool');\n      });\n  }\n\n  private setAvailableApps(apps: string[] = this.data.applications.default) {\n    this.data.applications.available = _.uniq(apps.sort()).map(\n      (x: string) => new SelectOption(false, x, this.data.APP_LABELS[x] || x)\n    );\n  }\n\n  private listenToChanges() {\n    this.listenToChangesDuringAddEdit();\n    if (!this.editing) {\n      this.listenToChangesDuringAdd();\n    }\n  }\n\n  private listenToChangesDuringAddEdit() {\n    this.form.get('pgNum').valueChanges.subscribe((pgs) => {\n      const change = pgs - this.data.pgs;\n      if (Math.abs(change) !== 1 || pgs === 2) {\n        this.data.pgs = pgs;\n        return;\n      }\n      this.doPgPowerJump(change as 1 | -1);\n    });\n  }\n\n  private doPgPowerJump(jump: 1 | -1) {\n    const power = this.calculatePgPower() + jump;\n    this.setPgs(jump === -1 ? Math.round(power) : Math.floor(power));\n  }\n\n  private calculatePgPower(pgs = this.form.getValue('pgNum')): number {\n    return Math.log(pgs) / Math.log(2);\n  }\n\n  private setPgs(power: number) {\n    const pgs = Math.pow(2, power < 0 ? 0 : power); // Set size the nearest accurate size.\n    this.data.pgs = pgs;\n    this.form.silentSet('pgNum', pgs);\n  }\n\n  private listenToChangesDuringAdd() {\n    this.form.get('poolType').valueChanges.subscribe((poolType) => {\n      this.poolTypeChange(poolType);\n    });\n    this.form.get('crushRule').valueChanges.subscribe((rule) => {\n      // The crush rule can only be changed if type 'replicated' is set.\n      if (this.crushDeletionBtn && this.crushDeletionBtn.isOpen()) {\n        this.crushDeletionBtn.close();\n      }\n      if (!rule) {\n        return;\n      }\n      this.setCorrectMaxSize(rule);\n      this.crushRuleIsUsedBy(rule.rule_name);\n      this.replicatedRuleChange();\n      this.pgCalc();\n    });\n    this.form.get('size').valueChanges.subscribe(() => {\n      // The size can only be changed if type 'replicated' is set.\n      this.pgCalc();\n    });\n    this.form.get('erasureProfile').valueChanges.subscribe((profile) => {\n      // The ec profile can only be changed if type 'erasure' is set.\n      if (this.ecpDeletionBtn && this.ecpDeletionBtn.isOpen()) {\n        this.ecpDeletionBtn.close();\n      }\n      if (!profile) {\n        return;\n      }\n      this.ecpIsUsedBy(profile.name);\n      this.pgCalc();\n    });\n    this.form.get('mode').valueChanges.subscribe(() => {\n      ['minBlobSize', 'maxBlobSize', 'ratio'].forEach((name) => {\n        this.form.get(name).updateValueAndValidity({ emitEvent: false });\n      });\n    });\n    this.form.get('minBlobSize').valueChanges.subscribe(() => {\n      this.form.get('maxBlobSize').updateValueAndValidity({ emitEvent: false });\n    });\n    this.form.get('minBlobSizeUnit').valueChanges.subscribe(() => {\n      this.form.get('maxBlobSize').updateValueAndValidity({ emitEvent: false });\n    });\n    this.form.get('maxBlobSize').valueChanges.subscribe(() => {\n      this.form.get('minBlobSize').updateValueAndValidity({ emitEvent: false });\n    });\n    this.form.get('maxBlobSizeUnit').valueChanges.subscribe(() => {\n      this.form.get('minBlobSize').updateValueAndValidity({ emitEvent: false });\n    });\n  }\n\n  private poolTypeChange(poolType: string) {\n    if (poolType === 'replicated') {\n      this.setTypeBooleans(true, false);\n    } else if (poolType === 'erasure') {\n      this.setTypeBooleans(false, true);\n    } else {\n      this.setTypeBooleans(false, false);\n    }\n    if (!poolType || !this.info) {\n      this.current.rules = [];\n      return;\n    }\n    const rules = this.info['crush_rules_' + poolType] || [];\n    this.current.rules = rules;\n    if (this.editing) {\n      return;\n    }\n    if (this.isReplicated) {\n      this.setListControlStatus('crushRule', rules);\n    }\n    this.replicatedRuleChange();\n    this.pgCalc();\n  }\n\n  private setTypeBooleans(replicated: boolean, erasure: boolean) {\n    this.isReplicated = replicated;\n    this.isErasure = erasure;\n  }\n\n  private replicatedRuleChange() {\n    if (!this.isReplicated) {\n      return;\n    }\n    const control = this.form.get('size');\n    let size = this.form.getValue('size') || 3;\n    const min = this.getMinSize();\n    const max = this.getMaxSize();\n    if (size < min) {\n      size = min;\n    } else if (size > max) {\n      size = max;\n    }\n    if (size !== control.value) {\n      this.form.silentSet('size', size);\n    }\n  }\n\n  getMinSize(): number {\n    if (!this.info || this.info.osd_count < 1) {\n      return 0;\n    }\n    return 1;\n  }\n\n  getMaxSize(): number {\n    const rule = this.form.getValue('crushRule');\n    if (!this.info) {\n      return 0;\n    }\n    if (!rule) {\n      const osds = this.info.osd_count;\n      const defaultSize = 3;\n      return Math.min(osds, defaultSize);\n    }\n    return rule.usable_size;\n  }\n\n  private pgCalc() {\n    const poolType = this.form.getValue('poolType');\n    if (!this.info || this.form.get('pgNum').dirty || !poolType) {\n      return;\n    }\n    const pgMax = this.info.osd_count * 100;\n    const pgs = this.isReplicated ? this.replicatedPgCalc(pgMax) : this.erasurePgCalc(pgMax);\n    if (!pgs) {\n      return;\n    }\n    const oldValue = this.data.pgs;\n    this.alignPgs(pgs);\n    const newValue = this.data.pgs;\n    if (!this.externalPgChange) {\n      this.externalPgChange = oldValue !== newValue;\n    }\n  }\n\n  private setCorrectMaxSize(rule: CrushRule = this.form.getValue('crushRule')) {\n    if (!rule) {\n      return;\n    }\n    const domains = CrushNodeSelectionClass.searchFailureDomains(\n      this.info.nodes,\n      rule.steps[0].item_name\n    );\n    const currentDomain = domains[rule.steps[1].type];\n    const usable = currentDomain ? currentDomain.length : this.crushRuleMaxSize;\n    rule.usable_size = Math.min(usable, this.crushRuleMaxSize);\n  }\n\n  private replicatedPgCalc(pgs: number): number {\n    const sizeControl = this.form.get('size');\n    const size = sizeControl.value;\n    return sizeControl.valid && size > 0 ? pgs / size : 0;\n  }\n\n  private erasurePgCalc(pgs: number): number {\n    const ecpControl = this.form.get('erasureProfile');\n    const ecp = ecpControl.value;\n    return (ecpControl.valid || ecpControl.disabled) && ecp ? pgs / (ecp.k + ecp.m) : 0;\n  }\n\n  alignPgs(pgs = this.form.getValue('pgNum')) {\n    this.setPgs(Math.round(this.calculatePgPower(pgs < 1 ? 1 : pgs)));\n  }\n\n  private setComplexValidators() {\n    if (this.editing) {\n      this.form\n        .get('name')\n        .setValidators([\n          this.form.get('name').validator,\n          CdValidators.custom(\n            'uniqueName',\n            (name: string) =>\n              this.data.pool &&\n              this.info &&\n              this.info.pool_names.indexOf(name) !== -1 &&\n              this.info.pool_names.indexOf(name) !==\n                this.info.pool_names.indexOf(this.data.pool.pool_name)\n          )\n        ]);\n    } else {\n      CdValidators.validateIf(this.form.get('size'), () => this.isReplicated, [\n        CdValidators.custom(\n          'min',\n          (value: number) => this.form.getValue('size') && value < this.getMinSize()\n        ),\n        CdValidators.custom(\n          'max',\n          (value: number) => this.form.getValue('size') && this.getMaxSize() < value\n        )\n      ]);\n      this.form\n        .get('name')\n        .setValidators([\n          this.form.get('name').validator,\n          CdValidators.custom(\n            'uniqueName',\n            (name: string) => this.info && this.info.pool_names.indexOf(name) !== -1\n          )\n        ]);\n    }\n    this.setCompressionValidators();\n  }\n\n  private setCompressionValidators() {\n    CdValidators.validateIf(this.form.get('minBlobSize'), () => this.hasCompressionEnabled(), [\n      Validators.min(0),\n      CdValidators.custom('maximum', (size: string) =>\n        this.oddBlobSize(\n          size,\n          this.form.getValue('minBlobSizeUnit'),\n          this.form.getValue('maxBlobSize'),\n          this.form.getValue('maxBlobSizeUnit')\n        )\n      )\n    ]);\n    CdValidators.validateIf(this.form.get('maxBlobSize'), () => this.hasCompressionEnabled(), [\n      Validators.min(0),\n      CdValidators.custom('minimum', (size: string) =>\n        this.oddBlobSize(\n          this.form.getValue('minBlobSize'),\n          this.form.getValue('minBlobSizeUnit'),\n          size,\n          this.form.getValue('maxBlobSizeUnit')\n        )\n      )\n    ]);\n    CdValidators.validateIf(this.form.get('ratio'), () => this.hasCompressionEnabled(), [\n      Validators.min(0),\n      Validators.max(1)\n    ]);\n  }\n\n  private oddBlobSize(minimum: string, minUnit: string, maximum: string, maxUnit: string) {\n    const min = this.formatter.toBytes(minimum + minUnit);\n    const max = this.formatter.toBytes(maximum + maxUnit);\n    return Boolean(min && max && min >= max);\n  }\n\n  hasCompressionEnabled() {\n    return this.form.getValue('mode') && this.form.get('mode').value.toLowerCase() !== 'none';\n  }\n\n  describeCrushStep(step: CrushStep) {\n    return [\n      step.op.replace('_', ' '),\n      step.item_name || '',\n      step.type ? step.num + ' type ' + step.type : ''\n    ].join(' ');\n  }\n\n  addErasureCodeProfile() {\n    this.addModal(ErasureCodeProfileFormModalComponent, (name) => this.reloadECPs(name));\n  }\n\n  private addModal(modalComponent: Type<any>, reload: (name: string) => void) {\n    this.hideOpenTooltips();\n    const modalRef = this.modalService.show(modalComponent);\n    modalRef.componentInstance.submitAction.subscribe((item: any) => {\n      reload(item.name);\n    });\n  }\n\n  private hideOpenTooltips() {\n    const hideTooltip = (btn: NgbTooltip) => btn && btn.isOpen() && btn.close();\n    hideTooltip(this.ecpDeletionBtn);\n    hideTooltip(this.crushDeletionBtn);\n  }\n\n  private reloadECPs(profileName?: string) {\n    this.reloadList({\n      newItemName: profileName,\n      getInfo: () => this.ecpService.list(),\n      initInfo: (profiles) => this.initEcp(profiles),\n      findNewItem: () => this.ecProfiles.find((p) => p.name === profileName),\n      controlName: 'erasureProfile'\n    });\n  }\n\n  private reloadList({\n    newItemName,\n    getInfo,\n    initInfo,\n    findNewItem,\n    controlName\n  }: {\n    newItemName: string;\n    getInfo: () => Observable<any>;\n    initInfo: (items: any) => void;\n    findNewItem: () => any;\n    controlName: string;\n  }) {\n    if (this.modalSubscription) {\n      this.modalSubscription.unsubscribe();\n    }\n    getInfo().subscribe((items: any) => {\n      initInfo(items);\n      if (!newItemName) {\n        return;\n      }\n      const item = findNewItem();\n      if (item) {\n        this.form.get(controlName).setValue(item);\n      }\n    });\n  }\n\n  deleteErasureCodeProfile() {\n    this.deletionModal({\n      value: this.form.getValue('erasureProfile'),\n      usage: this.ecpUsage,\n      deletionBtn: this.ecpDeletionBtn,\n      dataName: 'erasureInfo',\n      getTabs: () => this.ecpInfoTabs,\n      tabPosition: 'used-by-pools',\n      nameAttribute: 'name',\n      itemDescription: $localize`erasure code profile`,\n      reloadFn: () => this.reloadECPs(),\n      deleteFn: (name) => this.ecpService.delete(name),\n      taskName: 'ecp/delete'\n    });\n  }\n\n  private deletionModal({\n    value,\n    usage,\n    deletionBtn,\n    dataName,\n    getTabs,\n    tabPosition,\n    nameAttribute,\n    itemDescription,\n    reloadFn,\n    deleteFn,\n    taskName\n  }: {\n    value: any;\n    usage: string[];\n    deletionBtn: NgbTooltip;\n    dataName: string;\n    getTabs: () => NgbNav;\n    tabPosition: string;\n    nameAttribute: string;\n    itemDescription: string;\n    reloadFn: Function;\n    deleteFn: (name: string) => Observable<any>;\n    taskName: string;\n  }) {\n    if (!value) {\n      return;\n    }\n    if (usage) {\n      deletionBtn.animation = false;\n      deletionBtn.toggle();\n      this.data[dataName] = true;\n      setTimeout(() => {\n        const tabs = getTabs();\n        if (tabs) {\n          tabs.select(tabPosition);\n        }\n      }, 50);\n      return;\n    }\n    const name = value[nameAttribute];\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription,\n      itemNames: [name],\n      submitActionObservable: () => {\n        const deletion = deleteFn(name);\n        deletion.subscribe(() => reloadFn());\n        return this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(taskName, { name: name }),\n          call: deletion\n        });\n      }\n    });\n  }\n\n  addCrushRule() {\n    this.addModal(CrushRuleFormModalComponent, (name) => this.reloadCrushRules(name));\n  }\n\n  private reloadCrushRules(ruleName?: string) {\n    this.reloadList({\n      newItemName: ruleName,\n      getInfo: () => this.poolService.getInfo(),\n      initInfo: (info) => {\n        this.initInfo(info);\n        this.poolTypeChange('replicated');\n      },\n      findNewItem: () =>\n        this.info.crush_rules_replicated.find((rule) => rule.rule_name === ruleName),\n      controlName: 'crushRule'\n    });\n  }\n\n  deleteCrushRule() {\n    this.deletionModal({\n      value: this.form.getValue('crushRule'),\n      usage: this.crushUsage,\n      deletionBtn: this.crushDeletionBtn,\n      dataName: 'crushInfo',\n      getTabs: () => this.crushInfoTabs,\n      tabPosition: 'used-by-pools',\n      nameAttribute: 'rule_name',\n      itemDescription: $localize`crush rule`,\n      reloadFn: () => this.reloadCrushRules(),\n      deleteFn: (name) => this.crushRuleService.delete(name),\n      taskName: 'crushRule/delete'\n    });\n  }\n\n  crushRuleIsUsedBy(ruleName: string) {\n    this.crushUsage = ruleName ? this.info.used_rules[ruleName] : undefined;\n  }\n\n  ecpIsUsedBy(profileName: string) {\n    this.ecpUsage = profileName ? this.info.used_profiles[profileName] : undefined;\n  }\n\n  submit() {\n    if (this.form.invalid) {\n      this.form.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    const pool = { pool: this.form.getValue('name') };\n\n    this.assignFormFields(pool, [\n      { externalFieldName: 'pool_type', formControlName: 'poolType' },\n      {\n        externalFieldName: 'pg_autoscale_mode',\n        formControlName: 'pgAutoscaleMode',\n        editable: true\n      },\n      {\n        externalFieldName: 'pg_num',\n        formControlName: 'pgNum',\n        replaceFn: (value: number) => (this.form.getValue('pgAutoscaleMode') === 'on' ? 1 : value),\n        editable: true\n      },\n      this.isReplicated\n        ? { externalFieldName: 'size', formControlName: 'size' }\n        : {\n            externalFieldName: 'erasure_code_profile',\n            formControlName: 'erasureProfile',\n            attr: 'name'\n          },\n      {\n        externalFieldName: 'rule_name',\n        formControlName: 'crushRule',\n        replaceFn: (value: CrushRule) => (this.isReplicated ? value && value.rule_name : undefined)\n      },\n      {\n        externalFieldName: 'quota_max_bytes',\n        formControlName: 'max_bytes',\n        replaceFn: (value: string) => {\n          const unit = this.form.getValue('maxBytesUnit');\n          return this.formatter.toBytes(value + unit);\n        },\n        editable: true,\n        resetValue: this.editing ? 0 : undefined\n      },\n      {\n        externalFieldName: 'quota_max_objects',\n        formControlName: 'max_objects',\n        editable: true,\n        resetValue: this.editing ? 0 : undefined\n      },\n      this.data.applications.selected.includes('rbd')\n        ? { externalFieldName: 'rbd_mirroring', formControlName: 'rbdMirroring' }\n        : {\n            externalFieldName: 'rbd_mirroring',\n            formControlName: 'rbdMirroring',\n            resetValue: undefined\n          }\n    ]);\n\n    if (this.info.is_all_bluestore) {\n      this.assignFormField(pool, {\n        externalFieldName: 'flags',\n        formControlName: 'ecOverwrites',\n        replaceFn: () => (this.isErasure ? ['ec_overwrites'] : undefined)\n      });\n\n      if (this.form.getValue('mode') !== 'none') {\n        this.assignFormFields(pool, [\n          {\n            externalFieldName: 'compression_mode',\n            formControlName: 'mode',\n            editable: true,\n            replaceFn: (value: boolean) => this.hasCompressionEnabled() && value\n          },\n          {\n            externalFieldName: 'compression_algorithm',\n            formControlName: 'algorithm',\n            editable: true\n          },\n          {\n            externalFieldName: 'compression_min_blob_size',\n            formControlName: 'minBlobSize',\n            replaceFn: (value: string) => {\n              const unit = this.form.getValue('minBlobSizeUnit');\n              return this.formatter.toBytes(value + unit);\n            },\n            editable: true,\n            resetValue: 0\n          },\n          {\n            externalFieldName: 'compression_max_blob_size',\n            formControlName: 'maxBlobSize',\n            replaceFn: (value: string) => {\n              const unit = this.form.getValue('maxBlobSizeUnit');\n              return this.formatter.toBytes(value + unit);\n            },\n            editable: true,\n            resetValue: 0\n          },\n          {\n            externalFieldName: 'compression_required_ratio',\n            formControlName: 'ratio',\n            editable: true,\n            resetValue: 0\n          }\n        ]);\n      } else if (this.editing) {\n        this.assignFormFields(pool, [\n          {\n            externalFieldName: 'compression_mode',\n            formControlName: 'mode',\n            editable: true,\n            replaceFn: () => 'unset' // Is used if no compression is set\n          },\n          {\n            externalFieldName: 'srcpool',\n            formControlName: 'name',\n            editable: true,\n            replaceFn: () => this.data.pool.pool_name\n          }\n        ]);\n      }\n    }\n\n    const apps = this.data.applications.selected;\n    if (apps.length > 0 || this.editing) {\n      pool['application_metadata'] = apps;\n      if (apps.includes('rbd')) {\n        pool['rbd_mirroring'] = this.form.getValue('rbdMirroring');\n      }\n      this.isApplicationsSelected = true;\n    } else {\n      this.isApplicationsSelected = false;\n    }\n\n    // Only collect configuration data for replicated pools, as QoS cannot be configured on EC\n    // pools. EC data pools inherit their settings from the corresponding replicated metadata pool.\n    if (this.isReplicated && !_.isEmpty(this.currentConfigurationValues)) {\n      pool['configuration'] = this.currentConfigurationValues;\n    }\n\n    if (!this.isApplicationsSelected) {\n      this.form.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    this.triggerApiTask(pool);\n  }\n\n  /**\n   * Retrieves the values for the given form field descriptions and assigns the values to the given\n   * object. This method differentiates between `add` and `edit` mode and acts differently on one or\n   * the other.\n   */\n  private assignFormFields(pool: object, formFieldDescription: FormFieldDescription[]): void {\n    formFieldDescription.forEach((item) => this.assignFormField(pool, item));\n  }\n\n  /**\n   * Retrieves the value for the given form field description and assigns the values to the given\n   * object. This method differentiates between `add` and `edit` mode and acts differently on one or\n   * the other.\n   */\n  private assignFormField(\n    pool: object,\n    {\n      externalFieldName,\n      formControlName,\n      attr,\n      replaceFn,\n      editable,\n      resetValue\n    }: FormFieldDescription\n  ): void {\n    if (this.editing && (!editable || this.form.get(formControlName).pristine)) {\n      return;\n    }\n    const value = this.form.getValue(formControlName);\n    let apiValue = replaceFn ? replaceFn(value) : attr ? _.get(value, attr) : value;\n    if (!value || !apiValue) {\n      if (editable && !_.isUndefined(resetValue)) {\n        apiValue = resetValue;\n      } else {\n        return;\n      }\n    }\n    pool[externalFieldName] = apiValue;\n  }\n\n  private triggerApiTask(pool: Record<string, any>) {\n    const poolName = pool.hasOwnProperty('srcpool') ? pool.srcpool : pool.pool;\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('pool/' + (this.editing ? URLVerbs.EDIT : URLVerbs.CREATE), {\n          pool_name: poolName\n        }),\n        call: this.poolService[this.editing ? URLVerbs.UPDATE : URLVerbs.CREATE](pool)\n      })\n      .subscribe({\n        error: (resp) => {\n          if (_.isObject(resp.error) && resp.error.code === '34') {\n            this.form.get('pgNum').setErrors({ '34': true });\n          }\n          this.form.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => this.router.navigate(['/pool'])\n      });\n  }\n\n  appSelection() {\n    this.form.get('name').updateValueAndValidity({ emitEvent: false, onlySelf: true });\n  }\n\n  erasureProfileChange() {\n    const profile = this.form.get('erasureProfile').value;\n    if (profile) {\n      this.msrCrush =\n        profile['crush-num-failure-domains'] > 0 || profile['crush-osds-per-failure-domain'] > 0;\n    }\n  }\n}\n","import { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { PoolStats } from './pool-stat';\n\nexport class Pool {\n  cache_target_full_ratio_micro: number;\n  fast_read: boolean;\n  stripe_width: number;\n  flags_names: string;\n  tier_of: number;\n  hit_set_grade_decay_rate: number;\n  use_gmt_hitset: boolean;\n  last_force_op_resend_preluminous: string;\n  quota_max_bytes: number;\n  erasure_code_profile: string;\n  expected_num_objects: number;\n  size: number;\n  snap_seq: number;\n  auid: number;\n  cache_min_flush_age: number;\n  hit_set_period: number;\n  min_read_recency_for_promote: number;\n  target_max_objects: number;\n  pg_num: number;\n  pg_num_target: number;\n  pg_num_pending: number;\n  pg_placement_num: number;\n  pg_placement_num_target: number;\n  pg_autoscale_mode: string;\n  pg_status: string;\n  type: string;\n  pool_name: string;\n  cache_min_evict_age: number;\n  cache_mode: string;\n  min_size: number;\n  cache_target_dirty_high_ratio_micro: number;\n  object_hash: number;\n  application_metadata: string[];\n  write_tier: number;\n  cache_target_dirty_ratio_micro: number;\n  pool: number;\n  removed_snaps: string;\n  cdExecuting?: string;\n  executingTasks?: ExecutingTask[];\n  crush_rule: string;\n  tiers: any[];\n  hit_set_params: {\n    type: string;\n  };\n  last_force_op_resend: string;\n  pool_snaps: any[];\n  quota_max_objects: number;\n  options: {\n    compression_algorithm?: string;\n    compression_max_blob_size?: number;\n    compression_min_blob_size?: number;\n    compression_mode?: string;\n    compression_required_ratio?: number;\n  };\n  hit_set_count: number;\n  flags: number;\n  target_max_bytes: number;\n  hit_set_search_last_n: number;\n  last_change: string;\n  min_write_recency_for_promote: number;\n  read_tier: number;\n  stats?: PoolStats;\n  cdIsBinary?: boolean;\n  configuration: { source: number; name: string; value: string }[];\n\n  constructor(name: string) {\n    this.pool_name = name;\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"pool-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [renderObjects]=\"true\"\n                            [data]=\"poolDetails\"\n                            [autoReload]=\"false\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"permissions.grafana.read\">\n      <a ngbNavLink\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"Pool details\"\n                    grafanaPath=\"ceph-pool-detail?var-pool_name={{selection.pool_name}}\"\n                    [type]=\"'metrics'\"\n                    uid=\"-xyV8KCiz\"\n                    grafanaStyle=\"three\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"configuration\"\n                  *ngIf=\"selection.type === 'replicated'\">\n      <a ngbNavLink\n         i18n>Configuration</a>\n      <ng-template ngbNavContent>\n        <cd-rbd-configuration-table [data]=\"selectedPoolConfiguration\"></cd-rbd-configuration-table>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"cache-tiers-details\"\n                  *ngIf=\"selection['tiers']?.length > 0\">\n      <a ngbNavLink\n         i18n>Cache Tiers Details</a>\n      <ng-template ngbNavContent>\n        <cd-table [data]=\"cacheTiers\"\n                  [columns]=\"cacheTierColumns\"\n                  [autoSave]=\"false\"\n                  columnMode=\"flex\">\n        </cd-table>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { CdHelperClass } from '~/app/shared/classes/cd-helper.class';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { RbdConfigurationEntry } from '~/app/shared/models/configuration';\nimport { Permissions } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-pool-details',\n  templateUrl: './pool-details.component.html',\n  styleUrls: ['./pool-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PoolDetailsComponent implements OnChanges {\n  @Input()\n  cacheTiers: any[];\n  @Input()\n  permissions: Permissions;\n  @Input()\n  selection: any;\n\n  cacheTierColumns: Array<CdTableColumn> = [];\n  // 'stats' won't be shown as the pure stat numbers won't tell the user much,\n  // if they are not converted or used in a chart (like the ones available in the pool listing)\n  omittedPoolAttributes = ['cdExecuting', 'cdIsBinary', 'stats'];\n\n  poolDetails: object;\n  selectedPoolConfiguration: RbdConfigurationEntry[];\n\n  constructor(private poolService: PoolService) {\n    this.cacheTierColumns = [\n      {\n        prop: 'pool_name',\n        name: $localize`Name`,\n        flexGrow: 3\n      },\n      {\n        prop: 'cache_mode',\n        name: $localize`Cache Mode`,\n        flexGrow: 2\n      },\n      {\n        prop: 'cache_min_evict_age',\n        name: $localize`Min Evict Age`,\n        flexGrow: 2\n      },\n      {\n        prop: 'cache_min_flush_age',\n        name: $localize`Min Flush Age`,\n        flexGrow: 2\n      },\n      {\n        prop: 'target_max_bytes',\n        name: $localize`Target Max Bytes`,\n        flexGrow: 2\n      },\n      {\n        prop: 'target_max_objects',\n        name: $localize`Target Max Objects`,\n        flexGrow: 2\n      }\n    ];\n  }\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.poolService\n        .getConfiguration(this.selection.pool_name)\n        .subscribe((poolConf: RbdConfigurationEntry[]) => {\n          CdHelperClass.updateChanged(this, { selectedPoolConfiguration: poolConf });\n        });\n      CdHelperClass.updateChanged(this, {\n        poolDetails: _.omit(this.selection, this.omittedPoolAttributes)\n      });\n    }\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\">\n  <ng-container ngbNavItem>\n    <a ngbNavLink\n       i18n>Pools List</a>\n    <ng-template ngbNavContent>\n      <cd-table #table\n                id=\"pool-list\"\n                [data]=\"pools\"\n                [columns]=\"columns\"\n                selectionType=\"single\"\n                [hasDetails]=\"true\"\n                [status]=\"tableStatus\"\n                [autoReload]=\"-1\"\n                (fetchData)=\"taskListService.fetch()\"\n                (setExpandedRow)=\"setExpandedRow($event)\"\n                (updateSelection)=\"updateSelection($event)\">\n        <cd-table-actions id=\"pool-list-actions\"\n                          class=\"table-actions\"\n                          [permission]=\"permissions.pool\"\n                          [selection]=\"selection\"\n                          [tableActions]=\"tableActions\">\n        </cd-table-actions>\n        <cd-pool-details *cdTableDetail\n                         id=\"pool-list-details\"\n                         [selection]=\"expandedRow\"\n                         [permissions]=\"permissions\"\n                         [cacheTiers]=\"cacheTiers\">\n        </cd-pool-details>\n      </cd-table>\n    </ng-template>\n  </ng-container>\n\n  <ng-container ngbNavItem\n                *cdScope=\"'grafana'\">\n    <a ngbNavLink\n       i18n>Overall Performance</a>\n    <ng-template ngbNavContent>\n      <cd-grafana i18n-title\n                  title=\"Ceph pools overview\"\n                  [grafanaPath]=\"'ceph-pools-overview?'\"\n                  [type]=\"'metrics'\"\n                  uid=\"z99hzWtmk\"\n                  grafanaStyle=\"two\">\n      </cd-grafana>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n\n<ng-template #poolUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.stats?.avail_raw?.latest\"\n                [total]=\"row.stats.bytes_used.latest + row.stats.avail_raw.latest\"\n                [used]=\"row.stats.bytes_used.latest\"\n                [title]=\"row.pool_name\"\n                decimals=\"2\">\n  </cd-usage-bar>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { PgCategoryService } from '~/app/ceph/shared/pg-category.service';\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { ErasureCodeProfileService } from '~/app/shared/api/erasure-code-profile.service';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ViewCacheStatus } from '~/app/shared/enum/view-cache-status.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { ErasureCodeProfile } from '~/app/shared/models/erasure-code-profile';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Pool } from '../pool';\nimport { PoolStat, PoolStats } from '../pool-stat';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nconst BASE_URL = 'pool';\n\n@Component({\n  selector: 'cd-pool-list',\n  templateUrl: './pool-list.component.html',\n  providers: [\n    TaskListService,\n    { provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }\n  ],\n  styleUrls: ['./pool-list.component.scss']\n})\nexport class PoolListComponent extends ListWithDetails implements OnInit {\n  @ViewChild(TableComponent)\n  table: TableComponent;\n  @ViewChild('poolUsageTpl', { static: true })\n  poolUsageTpl: TemplateRef<any>;\n\n  @ViewChild('poolConfigurationSourceTpl')\n  poolConfigurationSourceTpl: TemplateRef<any>;\n\n  pools: Pool[];\n  columns: CdTableColumn[];\n  selection = new CdTableSelection();\n  executingTasks: ExecutingTask[] = [];\n  permissions: Permissions;\n  tableActions: CdTableAction[];\n  tableStatus = new TableStatusViewCache();\n  cacheTiers: any[] = [];\n  monAllowPoolDelete = false;\n  ecProfileList: ErasureCodeProfile[];\n\n  constructor(\n    private poolService: PoolService,\n    private taskWrapper: TaskWrapperService,\n    private ecpService: ErasureCodeProfileService,\n    private authStorageService: AuthStorageService,\n    public taskListService: TaskListService,\n    private modalService: ModalCdsService,\n    private pgCategoryService: PgCategoryService,\n    private dimlessPipe: DimlessPipe,\n    private urlBuilder: URLBuilderService,\n    private configurationService: ConfigurationService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        routerLink: () => this.urlBuilder.getCreate(),\n        name: this.actionLabels.CREATE\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        routerLink: () =>\n          this.urlBuilder.getEdit(encodeURIComponent(this.selection.first().pool_name)),\n        name: this.actionLabels.EDIT\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deletePoolModal(),\n        name: this.actionLabels.DELETE,\n        disable: this.getDisableDesc.bind(this)\n      }\n    ];\n\n    // Note, we need read permissions to get the 'mon_allow_pool_delete'\n    // configuration option.\n    if (this.permissions.configOpt.read) {\n      this.configurationService.get('mon_allow_pool_delete').subscribe((data: any) => {\n        if (_.has(data, 'value')) {\n          const monSection = _.find(data.value, (v) => {\n            return v.section === 'mon';\n          }) || { value: false };\n          this.monAllowPoolDelete = monSection.value === 'true' ? true : false;\n        }\n      });\n    }\n  }\n\n  ngOnInit() {\n    const compare = (prop: string, pool1: Pool, pool2: Pool) =>\n      _.get(pool1, prop) > _.get(pool2, prop) ? 1 : -1;\n    this.columns = [\n      {\n        prop: 'pool_name',\n        name: $localize`Name`,\n        flexGrow: 2,\n        cellTransformation: CellTemplate.executing\n      },\n      {\n        prop: 'data_protection',\n        name: $localize`Data Protection`,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-background-gray'\n        },\n        flexGrow: 1.3\n      },\n      {\n        prop: 'application_metadata',\n        name: $localize`Applications`,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-background-primary'\n        },\n        flexGrow: 1.5\n      },\n      {\n        prop: 'pg_status',\n        name: $localize`PG Status`,\n        flexGrow: 1.2,\n        cellClass: ({ row, column, value }): any => {\n          return this.getPgStatusCellClass(row, column, value);\n        }\n      },\n      {\n        prop: 'crush_rule',\n        name: $localize`Crush Ruleset`,\n        isHidden: true,\n        flexGrow: 2\n      },\n      {\n        name: $localize`Usage`,\n        prop: 'usage',\n        cellTemplate: this.poolUsageTpl,\n        flexGrow: 1.2\n      },\n      {\n        prop: 'stats.rd_bytes.rates',\n        name: $localize`Read bytes`,\n        comparator: (_valueA: any, _valueB: any, rowA: Pool, rowB: Pool) =>\n          compare('stats.rd_bytes.latest', rowA, rowB),\n        cellTransformation: CellTemplate.sparkline,\n        flexGrow: 1.5\n      },\n      {\n        prop: 'stats.wr_bytes.rates',\n        name: $localize`Write bytes`,\n        comparator: (_valueA: any, _valueB: any, rowA: Pool, rowB: Pool) =>\n          compare('stats.wr_bytes.latest', rowA, rowB),\n        cellTransformation: CellTemplate.sparkline,\n        flexGrow: 1.5\n      },\n      {\n        prop: 'stats.rd.rate',\n        name: $localize`Read ops`,\n        flexGrow: 1,\n        pipe: this.dimlessPipe,\n        cellTransformation: CellTemplate.perSecond\n      },\n      {\n        prop: 'stats.wr.rate',\n        name: $localize`Write ops`,\n        flexGrow: 1,\n        pipe: this.dimlessPipe,\n        cellTransformation: CellTemplate.perSecond\n      }\n    ];\n\n    this.taskListService.init(\n      () =>\n        this.ecpService.list().pipe(\n          mergeMap((ecProfileList: ErasureCodeProfile[]) => {\n            this.ecProfileList = ecProfileList;\n            return this.poolService.getList();\n          })\n        ),\n      undefined,\n      (pools) => {\n        this.pools = this.transformPoolsData(pools);\n        this.tableStatus = new TableStatusViewCache();\n      },\n      () => {\n        this.table.reset(); // Disable loading indicator.\n        this.tableStatus = new TableStatusViewCache(ViewCacheStatus.ValueException);\n      },\n      (task) => task.name.startsWith(`${BASE_URL}/`),\n      (pool, task) => task.metadata['pool_name'] === pool.pool_name,\n      { default: (metadata: any) => new Pool(metadata['pool_name']) }\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deletePoolModal() {\n    const name = this.selection.first().pool_name;\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'Pool',\n      itemNames: [name],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(`${BASE_URL}/${URLVerbs.DELETE}`, { pool_name: name }),\n          call: this.poolService.delete(name)\n        })\n    });\n  }\n\n  getPgStatusCellClass(_row: any, _column: any, value: string): object {\n    return {\n      'text-right': true,\n      [`pg-${this.pgCategoryService.getTypeByStates(value)}`]: true\n    };\n  }\n\n  getErasureCodeProfile(erasureCodeProfile: string) {\n    let ecpInfo = '';\n    _.forEach(this.ecProfileList, (ecpKey) => {\n      if (ecpKey['name'] === erasureCodeProfile) {\n        ecpInfo = `EC: ${ecpKey['k']}+${ecpKey['m']}`;\n      }\n    });\n    return ecpInfo;\n  }\n\n  transformPoolsData(pools: any) {\n    const requiredStats = [\n      'bytes_used',\n      'max_avail',\n      'avail_raw',\n      'percent_used',\n      'rd_bytes',\n      'wr_bytes',\n      'rd',\n      'wr'\n    ];\n    const emptyStat: PoolStat = { latest: 0, rate: 0, rates: [] };\n\n    _.forEach(pools, (pool: Pool) => {\n      pool['pg_status'] = this.transformPgStatus(pool['pg_status']);\n      const stats: PoolStats = {};\n      _.forEach(requiredStats, (stat) => {\n        stats[stat] = pool.stats && pool.stats[stat] ? pool.stats[stat] : emptyStat;\n      });\n      pool['stats'] = stats;\n      pool['usage'] = stats.percent_used.latest;\n\n      if (\n        !pool.cdExecuting &&\n        pool.pg_num + pool.pg_placement_num !== pool.pg_num_target + pool.pg_placement_num_target\n      ) {\n        pool['cdExecuting'] = 'Updating';\n      }\n\n      ['rd_bytes', 'wr_bytes'].forEach((stat) => {\n        pool.stats[stat].rates = pool.stats[stat].rates.map((point: any) => point[1]);\n      });\n      pool.cdIsBinary = true;\n\n      if (pool['type'] === 'erasure') {\n        const erasureCodeProfile = pool['erasure_code_profile'];\n        pool['data_protection'] = this.getErasureCodeProfile(erasureCodeProfile);\n      }\n      if (pool['type'] === 'replicated') {\n        pool['data_protection'] = `replica: ×${pool['size']}`;\n      }\n    });\n\n    return pools;\n  }\n\n  transformPgStatus(pgStatus: any): string {\n    const strings: string[] = [];\n    _.forEach(pgStatus, (count, state) => {\n      strings.push(`${count} ${state}`);\n    });\n\n    return strings.join(', ');\n  }\n\n  getSelectionTiers() {\n    if (typeof this.expandedRow !== 'undefined') {\n      const cacheTierIds = this.expandedRow['tiers'];\n      this.cacheTiers = this.pools.filter((pool) => cacheTierIds.includes(pool.pool));\n    }\n  }\n\n  getDisableDesc(): boolean | string {\n    if (this.selection?.hasSelection) {\n      if (!this.monAllowPoolDelete) {\n        return $localize`Pool deletion is disabled by the mon_allow_pool_delete configuration setting.`;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  setExpandedRow(expandedRow: any) {\n    super.setExpandedRow(expandedRow);\n    this.getSelectionTiers();\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8,1C4.1,1,1,4.1,1,8s3.1,7,7,7s7-3.1,7-7S11.9,1,8,1z M8,14c-3.3,0-6-2.7-6-6s2.7-6,6-6s6,2.7,6,6S11.3,14,8,14z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"8\",\n      \"cy\": \"11.8\",\n      \"r\": \".8\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8.5,4H7.8C6.5,4,5.5,5,5.5,6.2c0,0,0,0,0,0v0.2h1V6.2C6.5,5.6,7.1,5,7.8,5h0.8c0.7,0,1.2,0.6,1.2,1.2S9.2,7.5,8.5,7.5h-1\\tv2.2h1V8.5c1.2,0,2.2-1,2.2-2.2S9.7,4,8.5,4z\"\n    }\n  }],\n  \"name\": \"help\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M12,7H6V4c0-1.1,0.9-2,2-2s2,0.9,2,2h1c0-1.7-1.3-3-3-3S5,2.3,5,4v3H4C3.4,7,3,7.4,3,8v6c0,0.6,0.4,1,1,1h8c0.6,0,1-0.4,1-1\\tV8C13,7.4,12.6,7,12,7z M12,14H4V8h8V14z\"\n    }\n  }],\n  \"name\": \"unlocked\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgbNavModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ActionLabels, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { BlockModule } from '../block/block.module';\nimport { CephSharedModule } from '../shared/ceph-shared.module';\nimport { CrushRuleFormModalComponent } from './crush-rule-form-modal/crush-rule-form-modal.component';\nimport { ErasureCodeProfileFormModalComponent } from './erasure-code-profile-form/erasure-code-profile-form-modal.component';\nimport { PoolDetailsComponent } from './pool-details/pool-details.component';\nimport { PoolFormComponent } from './pool-form/pool-form.component';\nimport { PoolListComponent } from './pool-list/pool-list.component';\nimport { IconModule, IconService } from 'carbon-components-angular';\nimport HelpIcon from '@carbon/icons/es/help/16';\nimport UnlockedIcon from '@carbon/icons/es/unlocked/16';\nimport LockedIcon from '@carbon/icons/es/locked/16';\n\n@NgModule({\n  imports: [\n    CephSharedModule,\n    CommonModule,\n    NgbNavModule,\n    SharedModule,\n    RouterModule,\n    ReactiveFormsModule,\n    NgbTooltipModule,\n    BlockModule,\n    IconModule\n  ],\n  exports: [PoolListComponent, PoolFormComponent],\n  declarations: [\n    PoolListComponent,\n    PoolFormComponent,\n    ErasureCodeProfileFormModalComponent,\n    CrushRuleFormModalComponent,\n    PoolDetailsComponent\n  ]\n})\nexport class PoolModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([HelpIcon, UnlockedIcon, LockedIcon]);\n  }\n}\n\nconst routes: Routes = [\n  { path: '', component: PoolListComponent },\n  {\n    path: URLVerbs.CREATE,\n    component: PoolFormComponent,\n    data: { breadcrumbs: ActionLabels.CREATE }\n  },\n  {\n    path: `${URLVerbs.EDIT}/:name`,\n    component: PoolFormComponent,\n    data: { breadcrumbs: ActionLabels.EDIT }\n  }\n];\n\n@NgModule({\n  imports: [PoolModule, RouterModule.forChild(routes)]\n})\nexport class RoutedPoolModule {}\n"],"x_google_ignoreList":[15,16]}