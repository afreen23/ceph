{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-modal_mjs.js","mappings":"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","names":["_c0","_c1","_c2","a0","a1","_c3","_c4","a2","a3","ModalHeader_cds_icon_button_3_Template","rf","ctx","_r1","i0","ctx_r1","onClose","buttonNgClass","buttonAttributes","closeLabel","_c5","AlertModal_cds_modal_footer_9_ng_container_1_Template","_r2","i_r3","index","ctx_r3","buttonClicked","button_r5","$implicit","type","id","indexOf","text","AlertModal_cds_modal_footer_9_Template","buttons","BaseModal","constructor","this","close","EventEmitter","open","closeModal","emit","ɵfac","__ngFactoryType__","ɵdir","selectors","inputs","outputs","BaseModalService","placeholderService","create","data","Object","assign","inputProviders","keys","map","inputName","provide","useValue","injector","Injector","providers","component","createComponent","focusedElement","document","activeElement","setTimeout","instance","previouslyFocusedElement","pipe","tap","delay","subscribe","destroyComponent","modalList","filter","c","onDestroy","focus","push","destroy","length","splice","i1","ɵprov","token","factory","Overlay","theme","overlaySelect","overlayClick","event","target","overlay","nativeElement","stopPropagation","ɵcmp","viewQuery","_t","first","ngContentSelectors","decls","vars","consts","template","$event","dependencies","i1$1","encapsulation","Modal","modalService","renderer","size","ariaLabel","hasScrollingContent","overlaySelected","selectorPrimaryFocus","ngOnChanges","currentValue","focusInitialElement","addClass","body","trigger","removeClass","updateScrollbar","ngAfterViewInit","handleKeyboardEvent","key","stopImmediatePropagation","cycleTabs","modal","shouldShowScrollbar","modalContent","querySelector","modalContentHeight","Math","ceil","getBoundingClientRect","height","scrollHeight","ngOnDestroy","primaryFocusElement","getFocusElementList","showScrollbar","DOCUMENT","hostBindings","features","ModalHeader","i18n","get","MODAL","CLOSE","showCloseButton","closeSelect","i1$2","i3","i4","ModalFooter","ModalContent","modalContentClass","hasForm","hostVars","ModalHeaderHeading","modalHeaderHeadingClass","ModalHeaderLabel","modalHeaderLabelClass","AlertModal","label","title","content","super","i","button","element","clientHeight","tabIndex","buttonIndex","click","dismissModal","AlertModalType","ModalButtonType","default","danger","primary","secondary","tertiary","ghost","danger_primary","ModalService","show","undefined","ModalContentText","modalContentTextClass","ModalModule","ɵmod","ɵinj","imports","CommonModule","ButtonModule","I18nModule","PlaceholderModule","ExperimentalModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-modal.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Input, Injector, Injectable, Component, ViewChild, Inject, HostListener, HostBinding, Optional, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from 'carbon-components-angular/forms';\nimport { ButtonModule } from 'carbon-components-angular/forms';\nimport { cycleTabs, getFocusElementList } from 'carbon-components-angular/common';\nimport { tap, delay } from 'rxjs/operators';\nimport * as i1 from 'carbon-components-angular/placeholder';\nimport { PlaceholderModule } from 'carbon-components-angular/placeholder';\nimport * as i1$2 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport * as i4 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { ExperimentalModule } from 'carbon-components-angular/experimental';\n\n/**\n * Extend `BaseModal` in your custom modal implementations to ensure consistent close behavior.\n *\n * `ModalService` depends on the `close` event to correctly clean up the component.\n */\nclass BaseModal {\n    constructor() {\n        /**\n         * Base event emitter to propagate close events\n         */\n        this.close = new EventEmitter();\n        /**\n         * Controls the open state of the modal\n         */\n        this.open = false;\n    }\n    /**\n     * Default method to handle closing the modal\n     */\n    closeModal() {\n        this.close.emit();\n    }\n}\nBaseModal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseModal, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBaseModal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BaseModal, selector: \"[cdsBaseModal], [ibmBaseModal]\", inputs: { open: \"open\" }, outputs: { close: \"close\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseModal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsBaseModal], [ibmBaseModal]\"\n                }]\n        }], propDecorators: { close: [{\n                type: Output\n            }], open: [{\n                type: Input\n            }] } });\n\n/**\n * Modal service handles instantiating and destroying modal instances.\n * Uses PlaceholderService to track open instances, and for it's placeholder view reference.\n */\nclass BaseModalService {\n    /**\n     * Creates an instance of `ModalService`.\n     */\n    constructor(placeholderService) {\n        this.placeholderService = placeholderService;\n    }\n    /**\n     * Creates and renders the modal component that is passed in.\n     * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.\n     */\n    create(data) {\n        let defaults = { inputs: {} };\n        data = Object.assign({}, defaults, data);\n        const inputProviders = Object.keys(data.inputs).map(inputName => ({\n            provide: inputName,\n            useValue: data.inputs[inputName]\n        }));\n        const injector = Injector.create({ providers: inputProviders });\n        const component = this.placeholderService.createComponent(data.component, injector);\n        let focusedElement = document.activeElement;\n        setTimeout(() => {\n            component.instance.open = true;\n        });\n        component[\"previouslyFocusedElement\"] = focusedElement; // used to return focus to previously focused element\n        component.instance.close.pipe(\n        // trigger the close animation\n        tap(() => {\n            component.instance.open = false;\n        }), \n        // delay closing by an arbitrary amount to allow the animation to finish\n        delay(240)).subscribe(() => {\n            this.placeholderService.destroyComponent(component);\n            // filter out our component\n            BaseModalService.modalList = BaseModalService.modalList.filter(c => c !== component);\n        });\n        component.onDestroy(() => {\n            focusedElement.focus();\n        });\n        BaseModalService.modalList.push(component);\n        return component;\n    }\n    /**\n     * Destroys the modal on the supplied index.\n     * When called without parameters it destroys the most recently created/top most modal.\n     */\n    destroy(index = -1) {\n        // return if nothing to destroy because it's already destroyed\n        if (index >= BaseModalService.modalList.length || BaseModalService.modalList.length === 0) {\n            return;\n        }\n        // on negative index destroy the last on the list (top modal)\n        if (index < 0) {\n            index = BaseModalService.modalList.length - 1;\n        }\n        // Let animation finish before component is removed\n        setTimeout(() => {\n            if (BaseModalService.modalList[index]) {\n                this.placeholderService.destroyComponent(BaseModalService.modalList[index]);\n                BaseModalService.modalList.splice(index, 1);\n            }\n        }, 240);\n    }\n}\n// track all our open modals\nBaseModalService.modalList = [];\nBaseModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseModalService, deps: [{ token: i1.PlaceholderService }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseModalService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseModalService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.PlaceholderService }]; } });\n\n/**\n * Component for the overlay object that acts as a backdrop to the `Modal` component.\n *\n * The main purpose for this component is to be able to handle click events that fall outside\n * the bounds of the `Modal` component.\n */\nclass Overlay {\n    constructor() {\n        /**\n         * Classification of the modal.\n         */\n        this.theme = \"default\";\n        this.open = false;\n        /**\n         * To emit the event where the user selects the overlay behind the `Modal`.\n         */\n        this.overlaySelect = new EventEmitter();\n    }\n    /**\n     * Handles the user clicking on the `Overlay` which resides outside the `Modal` object.\n     */\n    overlayClick(event) {\n        if (event.target !== this.overlay.nativeElement) {\n            return;\n        }\n        event.stopPropagation();\n        this.overlaySelect.emit(event);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Component });\nOverlay.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Overlay, selector: \"cds-overlay, ibm-overlay\", inputs: { theme: \"theme\", open: \"open\" }, outputs: { overlaySelect: \"overlaySelect\" }, viewQueries: [{ propertyName: \"overlay\", first: true, predicate: [\"overlay\"], descendants: true, static: true }], ngImport: i0, template: `\n\t\t<section\n\t\t\tclass=\"cds--modal cds--modal-tall\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--modal--danger': theme === 'danger',\n\t\t\t\t'is-visible': open\n\t\t\t}\"\n\t\t\t(click)=\"overlayClick($event)\"\n\t\t\t#overlay>\n\t\t\t<ng-content></ng-content>\n\t\t</section>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-overlay, ibm-overlay\",\n                    template: `\n\t\t<section\n\t\t\tclass=\"cds--modal cds--modal-tall\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--modal--danger': theme === 'danger',\n\t\t\t\t'is-visible': open\n\t\t\t}\"\n\t\t\t(click)=\"overlayClick($event)\"\n\t\t\t#overlay>\n\t\t\t<ng-content></ng-content>\n\t\t</section>\n\t`\n                }]\n        }], propDecorators: { theme: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], overlaySelect: [{\n                type: Output\n            }], overlay: [{\n                type: ViewChild,\n                args: [\"overlay\", { static: true }]\n            }] } });\n\n/**\n * Component to create modals for presenting content.\n *\n * [See demo](../../?path=/story/components-modal--basic)\n *\n * Using a modal in your application requires `cds-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n```html\n<cds-placeholder></cds-placeholder>\n```\n *\n * A more complete example for `Modal` is given as follows:\n *\n * Example modal definition:\n *\n```typescript\n@Component({\n    selector: \"app-sample-modal\",\n    template: `\n                <cds-modal size=\"xl\" (overlaySelected)=\"closeModal()\">\n                    <cds-modal-header (closeSelect)=\"closeModal()\">Header text</cds-modal-header>\n                        <section class=\"modal-body\">\n                            <h1>Sample modal works.</h1>\n                            <button class=\"btn--icon-link\" nPopover=\"Hello there\" title=\"Popover title\" placement=\"right\" appendInline=\"true\">\n                                <svg cdsIcon=\"info\" size=\"sm\"></svg>\n                            </button>\n                            {{modalText}}\n                        </section>\n                    <cds-modal-footer><button cdsButton=\"primary\" (click)=\"closeModal()\">Close</button></cds-modal-footer>\n                </cds-modal>`,\n    styleUrls: [\"./sample-modal.component.scss\"]\n})\nexport class SampleModal extends BaseModal {\n    modalText: string;\n    constructor(protected injector: Injector) {\n        super();\n        this.modalText = this.injector.get(\"modalText\");\n    }\n}\n```\n *\n * Example of opening the modal:\n *\n```typescript\n@Component({\n    selector: \"app-modal-demo\",\n    template: `\n                <button cdsButton=\"primary\" (click)=\"openModal('drill')\">Drill-down modal</button>\n                <cds-placeholder></cds-placeholder>`\n})\nexport class ModalDemo {\n    openModal() {\n        this.modalService.create({component: SampleModal, inputs: {modalText: \"Hello universe.\"}});\n    }\n}\n```\n */\nclass Modal {\n    /**\n     * Creates an instance of `Modal`.\n     */\n    constructor(modalService, document, renderer) {\n        this.modalService = modalService;\n        this.document = document;\n        this.renderer = renderer;\n        /**\n         * Size of the modal to display.\n         */\n        this.size = \"md\";\n        /**\n         * Classification of the modal.\n         */\n        this.theme = \"default\";\n        /**\n         * Label for the modal.\n         */\n        this.ariaLabel = \"default\";\n        /**\n         * Controls the visibility of the modal when used directly in a template\n         */\n        this.open = false;\n        /**\n         * Specify whether the modal contains scrolling content. This property overrides the automatic\n         * detection of the existence of scrolling content. Set this property to `true` to force\n         * overflow indicator to show up or to `false` to force overflow indicator to disappear.\n         * It is set to `null` by default which indicates not to override automatic detection.\n         */\n        this.hasScrollingContent = null;\n        /**\n         * Emits event when click occurs within `n-overlay` element. This is to track click events occurring outside bounds of the `Modal` object.\n         */\n        this.overlaySelected = new EventEmitter();\n        /**\n         * To emit the closing event of the modal window.\n         */\n        this.close = new EventEmitter();\n        /**\n         * An element should have 'modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.\n         */\n        this.selectorPrimaryFocus = \"[modal-primary-focus]\";\n    }\n    ngOnChanges({ open, hasScrollingContent }) {\n        if (open) {\n            if (open.currentValue) {\n                // `100` is just enough time to allow the modal\n                // to become visible, so that we can set focus\n                setTimeout(() => this.focusInitialElement(), 100);\n                // Prevent scrolling on open\n                this.renderer.addClass(this.document.body, \"cds--body--with-modal-open\");\n            }\n            else if (!open.currentValue) {\n                // Enable scrolling on close\n                this.renderer.removeClass(this.document.body, \"cds--body--with-modal-open\");\n            }\n            else if (this.trigger) {\n                this.trigger.focus();\n            }\n        }\n        if (hasScrollingContent) {\n            this.updateScrollbar();\n        }\n    }\n    /**\n     * Set document focus to be on the modal component after it is initialized.\n     */\n    ngAfterViewInit() {\n        this.focusInitialElement();\n        this.updateScrollbar();\n    }\n    /**\n     * Handle keyboard events to close modal and tab through the content within the modal.\n     */\n    handleKeyboardEvent(event) {\n        switch (event.key) {\n            case \"Escape\": {\n                event.stopImmediatePropagation(); // prevents events being fired for multiple modals if more than 2 open\n                // Manually close modal\n                this.open = false;\n                this.close.emit();\n                this.modalService.destroy(); // destroy top (latest) modal\n                break;\n            }\n            case \"Tab\": {\n                cycleTabs(event, this.modal.nativeElement);\n                break;\n            }\n        }\n    }\n    /**\n     * This detects whether or not the modal contains scrolling content.\n     *\n     * To force trigger a detection (ie. on window resize), change or reset the value of the modal content.\n     *\n     * Use the `hasScrollingContent` input to manually override the overflow indicator.\n     */\n    get shouldShowScrollbar() {\n        const modalContent = this.modal ? this.modal.nativeElement.querySelector(\".cds--modal-content\") : null;\n        if (modalContent) {\n            // get rounded value from height to match integer returned from scrollHeight\n            const modalContentHeight = Math.ceil(modalContent.getBoundingClientRect().height);\n            const modalContentScrollHeight = modalContent.scrollHeight;\n            return modalContentScrollHeight > modalContentHeight;\n        }\n        else {\n            return false;\n        }\n    }\n    // Remove class preventing scrolling\n    ngOnDestroy() {\n        this.renderer.removeClass(this.document.body, \"cds--body--with-modal-open\");\n    }\n    focusInitialElement() {\n        const primaryFocusElement = this.modal.nativeElement.querySelector(this.selectorPrimaryFocus);\n        if (primaryFocusElement && primaryFocusElement.focus) {\n            setTimeout(() => primaryFocusElement.focus());\n        }\n        else if (getFocusElementList(this.modal.nativeElement).length > 0) {\n            setTimeout(() => getFocusElementList(this.modal.nativeElement)[0].focus());\n        }\n        else {\n            setTimeout(() => this.modal.nativeElement.focus());\n        }\n    }\n    updateScrollbar() {\n        const modalContent = this.modal ? this.modal.nativeElement.querySelector(\".cds--modal-content\") : null;\n        const showScrollbar = this.hasScrollingContent !== null ? this.hasScrollingContent : this.shouldShowScrollbar;\n        if (modalContent) {\n            if (showScrollbar) {\n                this.renderer.addClass(modalContent, \"cds--modal-scroll-content\");\n            }\n            else {\n                this.renderer.removeClass(modalContent, \"cds--modal-scroll-content\");\n            }\n        }\n    }\n}\nModal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Modal, deps: [{ token: BaseModalService }, { token: DOCUMENT }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nModal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Modal, selector: \"cds-modal, ibm-modal\", inputs: { size: \"size\", theme: \"theme\", ariaLabel: \"ariaLabel\", open: \"open\", trigger: \"trigger\", hasScrollingContent: \"hasScrollingContent\" }, outputs: { overlaySelected: \"overlaySelected\", close: \"close\" }, host: { listeners: { \"keydown\": \"handleKeyboardEvent($event)\" } }, viewQueries: [{ propertyName: \"modal\", first: true, predicate: [\"modal\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `\n\t\t<cds-overlay\n\t\t\t[theme]=\"theme\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelect)=\"overlaySelected.emit()\">\n\t\t\t<div\n\t\t\t\tclass=\"cds--modal-container\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--modal-container--xs': size === 'xs',\n\t\t\t\t\t'cds--modal-container--sm': size === 'sm',\n\t\t\t\t\t'cds--modal-container--md': size === 'md',\n\t\t\t\t\t'cds--modal-container--lg': size === 'lg'\n\t\t\t\t}\"\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\tstyle=\"z-index:1;\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\t#modal>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</cds-overlay>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"component\", type: Overlay, selector: \"cds-overlay, ibm-overlay\", inputs: [\"theme\", \"open\"], outputs: [\"overlaySelect\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Modal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-modal, ibm-modal\",\n                    template: `\n\t\t<cds-overlay\n\t\t\t[theme]=\"theme\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelect)=\"overlaySelected.emit()\">\n\t\t\t<div\n\t\t\t\tclass=\"cds--modal-container\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--modal-container--xs': size === 'xs',\n\t\t\t\t\t'cds--modal-container--sm': size === 'sm',\n\t\t\t\t\t'cds--modal-container--md': size === 'md',\n\t\t\t\t\t'cds--modal-container--lg': size === 'lg'\n\t\t\t\t}\"\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\tstyle=\"z-index:1;\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\t#modal>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</cds-overlay>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: BaseModalService }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.Renderer2 }]; }, propDecorators: { size: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], trigger: [{\n                type: Input\n            }], hasScrollingContent: [{\n                type: Input\n            }], overlaySelected: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }], modal: [{\n                type: ViewChild,\n                args: [\"modal\", { static: true }]\n            }], handleKeyboardEvent: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\n/**\n * ***Inputs***\n * ```html\n * <cds-modal-header>Header text</cds-modal-header>\n * ```\n *\n * ***Outputs***\n * ```html\n * <cds-modal-header (closeSelect)=\"closeModal()\">Header text</cds-modal-header>\n * ```\n */\nclass ModalHeader {\n    constructor(i18n) {\n        this.i18n = i18n;\n        /**\n         * @deprecated since v5\n         * Sets the style on the modal heading based on its category.\n         */\n        this.theme = \"default\";\n        /**\n         * Accessible label for the header close button.\n         * Defaults to the `MODAL.CLOSE` value from the i18n service.\n         */\n        this.closeLabel = this.i18n.get().MODAL.CLOSE;\n        /**\n         * Set to `false` to hide the close button.\n         */\n        this.showCloseButton = true;\n        /**\n         * To emit the event of clicking on the close icon within the modal.\n         */\n        this.closeSelect = new EventEmitter();\n        this.buttonNgClass = {\n            \"cds--modal-close\": true\n        };\n        this.buttonAttributes = {\n            \"aria-label\": this.i18n.get().MODAL.CLOSE\n        };\n    }\n    /**\n     * Handles click for the close icon button within the `Modal`.\n     */\n    onClose() {\n        this.closeSelect.emit();\n    }\n}\nModalHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeader, deps: [{ token: i1$2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nModalHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalHeader, selector: \"cds-modal-header, ibm-modal-header\", inputs: { theme: \"theme\", closeLabel: \"closeLabel\", showCloseButton: \"showCloseButton\" }, outputs: { closeSelect: \"closeSelect\" }, ngImport: i0, template: `\n\t\t<header class=\"cds--modal-header {{theme}}\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div class=\"cds--modal-close-button\">\n\t\t\t\t<cds-icon-button\n\t\t\t\t\t*ngIf=\"showCloseButton\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t[buttonNgClass]=\"buttonNgClass\"\n\t\t\t\t\t[buttonAttributes]=\"buttonAttributes\"\n\t\t\t\t\talign=\"left\"\n\t\t\t\t\t[description]=\"closeLabel\"\n\t\t\t\t\t(click)=\"onClose()\">\n\t\t\t\t\t<svg cdsIcon=\"close\" size=\"20\" class=\"cds--modal-close__icon\"></svg>\n\t\t\t\t</cds-icon-button>\n\t\t\t</div>\n\t\t</header>\n\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.IconButton, selector: \"cds-icon-button, ibm-icon-button\", inputs: [\"buttonNgClass\", \"buttonAttributes\", \"buttonId\", \"kind\", \"size\", \"type\", \"isExpressive\", \"disabled\", \"description\", \"showTooltipWhenDisabled\"], outputs: [\"click\", \"focus\", \"blur\", \"tooltipClick\"] }, { kind: \"directive\", type: i4.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeader, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-modal-header, ibm-modal-header\",\n                    template: `\n\t\t<header class=\"cds--modal-header {{theme}}\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div class=\"cds--modal-close-button\">\n\t\t\t\t<cds-icon-button\n\t\t\t\t\t*ngIf=\"showCloseButton\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t[buttonNgClass]=\"buttonNgClass\"\n\t\t\t\t\t[buttonAttributes]=\"buttonAttributes\"\n\t\t\t\t\talign=\"left\"\n\t\t\t\t\t[description]=\"closeLabel\"\n\t\t\t\t\t(click)=\"onClose()\">\n\t\t\t\t\t<svg cdsIcon=\"close\" size=\"20\" class=\"cds--modal-close__icon\"></svg>\n\t\t\t\t</cds-icon-button>\n\t\t\t</div>\n\t\t</header>\n\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.I18n }]; }, propDecorators: { theme: [{\n                type: Input\n            }], closeLabel: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], closeSelect: [{\n                type: Output\n            }] } });\n\nclass ModalFooter {\n}\nModalFooter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalFooter, deps: [], target: i0.ɵɵFactoryTarget.Component });\nModalFooter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalFooter, selector: \"cds-modal-footer, ibm-modal-footer\", ngImport: i0, template: `\n\t\t<footer class=\"cds--modal-footer\">\n\t\t\t<ng-content></ng-content>\n\t\t</footer>\n\t`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalFooter, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-modal-footer, ibm-modal-footer\",\n                    template: `\n\t\t<footer class=\"cds--modal-footer\">\n\t\t\t<ng-content></ng-content>\n\t\t</footer>\n\t`\n                }]\n        }] });\n\nclass ModalContent {\n    constructor() {\n        this.modalContentClass = true;\n        /**\n         * Provide whether the modal content has a form element.\n         * If `true` is used here, non-form child content should have `cds--modal-content__regular-content` class.\n         */\n        this.hasForm = false;\n    }\n}\nModalContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nModalContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalContent, selector: \"[cdsModalContent], [ibmModalContent]\", inputs: { hasForm: \"hasForm\" }, host: { properties: { \"class.cds--modal-content\": \"this.modalContentClass\", \"class.cds--modal-content--with-form\": \"this.hasForm\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsModalContent], [ibmModalContent]\"\n                }]\n        }], propDecorators: { modalContentClass: [{\n                type: HostBinding,\n                args: [\"class.cds--modal-content\"]\n            }], hasForm: [{\n                type: HostBinding,\n                args: [\"class.cds--modal-content--with-form\"]\n            }, {\n                type: Input\n            }] } });\n\nclass ModalHeaderHeading {\n    constructor() {\n        this.modalHeaderHeadingClass = true;\n    }\n}\nModalHeaderHeading.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeaderHeading, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nModalHeaderHeading.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalHeaderHeading, selector: \"[cdsModalHeaderHeading], [ibmModalHeaderHeading]\", host: { properties: { \"class.cds--modal-header__heading\": \"this.modalHeaderHeadingClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeaderHeading, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsModalHeaderHeading], [ibmModalHeaderHeading]\"\n                }]\n        }], propDecorators: { modalHeaderHeadingClass: [{\n                type: HostBinding,\n                args: [\"class.cds--modal-header__heading\"]\n            }] } });\n\nclass ModalHeaderLabel {\n    constructor() {\n        this.modalHeaderLabelClass = true;\n    }\n}\nModalHeaderLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeaderLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nModalHeaderLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalHeaderLabel, selector: \"[cdsModalHeaderLabel], [ibmModalHeaderLabel]\", host: { properties: { \"class.cds--modal-header__label\": \"this.modalHeaderLabelClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalHeaderLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsModalHeaderLabel], [ibmModalHeaderLabel]\"\n                }]\n        }], propDecorators: { modalHeaderLabelClass: [{\n                type: HostBinding,\n                args: [\"class.cds--modal-header__label\"]\n            }] } });\n\n/**\n * Component to create standard modals for presenting content or asking for user's input.\n * It can show as a passive modal showing only text or show as a transactional modal with\n * multiple buttons for different actions for the user to choose from.\n *\n * Using a modal in your application requires `cds-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n * ```html\n * <cds-placeholder></cds-placeholder>\n * ```\n *\n * Example of opening the modal:\n *\n * ```typescript\n * \\@Component({\n *  selector: \"app-modal-demo\",\n *  template: `\n *   <button class=\"btn--primary\" (click)=\"openModal()\">Open modal</button>\n *   <cds-placeholder></cds-placeholder>`\n * })\n * export class ModalDemo {\n * \topenModal() {\n * \t\tthis.modalService.show({\n *\t\t\tmodalType: \"default\",\n *\t\t\tlabel: \"optional header text\",\n *\t\t\ttitle: \"Modal title\",\n *\t\t\ttext: \"Modal text\",\n *\t\t\tbuttons: [{\n *\t\t\t\ttext: \"Button text\",\n *\t\t\t\ttype: \"primary\",\n *\t\t\t\tclick: clickFunction\n *\t\t\t}]\n *\t\t});\n * \t}\n * }\n * ```\n */\nclass AlertModal extends BaseModal {\n    /**\n     * Creates an instance of `AlertModal`.\n     */\n    constructor(type = \"default\", label, title, content, size, hasScrollingContent = null, buttons = [], onClose, showCloseButton = true) {\n        super();\n        this.type = type;\n        this.label = label;\n        this.title = title;\n        this.content = content;\n        this.size = size;\n        this.hasScrollingContent = hasScrollingContent;\n        this.buttons = buttons;\n        this.onClose = onClose;\n        this.showCloseButton = showCloseButton;\n        for (let i = 0; i < this.buttons.length; i++) {\n            const button = this.buttons[i];\n            if (!button.id) {\n                button.id = `alert-modal-button-${i}`;\n            }\n            if (!button.type) {\n                button.type = \"secondary\";\n            }\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.modalContent) {\n            return false;\n        }\n        const element = this.modalContent.nativeElement;\n        if (element.scrollHeight > element.clientHeight) {\n            element.tabIndex = 0;\n        }\n        else {\n            element.tabIndex = -1;\n        }\n    }\n    buttonClicked(buttonIndex) {\n        const button = this.buttons[buttonIndex];\n        if (button.click) {\n            button.click();\n        }\n        this.closeModal();\n    }\n    dismissModal(trigger) {\n        if (this.onClose && this.onClose(trigger) === false) {\n            return;\n        }\n        this.closeModal();\n    }\n}\nAlertModal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: AlertModal, deps: [{ token: \"type\", optional: true }, { token: \"label\", optional: true }, { token: \"title\", optional: true }, { token: \"content\", optional: true }, { token: \"size\", optional: true }, { token: \"hasScrollingContent\", optional: true }, { token: \"buttons\", optional: true }, { token: \"close\", optional: true }, { token: \"showCloseButton\", optional: true }], target: i0.ɵɵFactoryTarget.Component });\nAlertModal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: AlertModal, selector: \"cds-alert-modal, ibm-alert-modal\", viewQueries: [{ propertyName: \"modalContent\", first: true, predicate: [\"modalContent\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `\n\t\t<cds-modal\n\t\t\t[size]=\"size\"\n\t\t\t[theme]=\"type\"\n\t\t\t[ariaLabel]=\"title\"\n\t\t\t[hasScrollingContent]=\"hasScrollingContent\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelected)=\"dismissModal('overlay')\">\n\t\t\t<cds-modal-header (closeSelect)=\"dismissModal('close')\" [showCloseButton]=\"showCloseButton\">\n\t\t\t\t<p cdsModalHeaderLabel class=\"cds--type-delta\">{{label}}</p>\n\t\t\t\t<p cdsModalHeaderHeading class=\"cds--type-beta\">{{title}}</p>\n\t\t\t</cds-modal-header>\n\t\t\t<div cdsModalContent #modalContent>\n\t\t\t\t<p [innerHTML]=\"content\"></p>\n\t\t\t</div>\n\t\t\t<cds-modal-footer *ngIf=\"buttons.length > 0\">\n\t\t\t\t<ng-container *ngFor=\"let button of buttons; let i = index\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t[cdsButton]=\"button.type\"\n\t\t\t\t\t\t(click)=\"buttonClicked(i)\"\n\t\t\t\t\t\t[id]=\"button.id\"\n\t\t\t\t\t\t[attr.modal-primary-focus]=\"(button.type.indexOf('primary') !== -1 ? '' : null)\">\n\t\t\t\t\t\t{{button.text}}\n\t\t\t\t\t</button>\n\t\t\t\t</ng-container>\n\t\t\t</cds-modal-footer>\n\t\t</cds-modal>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.Button, selector: \"[cdsButton], [ibmButton]\", inputs: [\"ibmButton\", \"cdsButton\", \"size\", \"skeleton\", \"iconOnly\", \"isExpressive\"] }, { kind: \"component\", type: Modal, selector: \"cds-modal, ibm-modal\", inputs: [\"size\", \"theme\", \"ariaLabel\", \"open\", \"trigger\", \"hasScrollingContent\"], outputs: [\"overlaySelected\", \"close\"] }, { kind: \"component\", type: ModalHeader, selector: \"cds-modal-header, ibm-modal-header\", inputs: [\"theme\", \"closeLabel\", \"showCloseButton\"], outputs: [\"closeSelect\"] }, { kind: \"component\", type: ModalFooter, selector: \"cds-modal-footer, ibm-modal-footer\" }, { kind: \"directive\", type: ModalContent, selector: \"[cdsModalContent], [ibmModalContent]\", inputs: [\"hasForm\"] }, { kind: \"directive\", type: ModalHeaderHeading, selector: \"[cdsModalHeaderHeading], [ibmModalHeaderHeading]\" }, { kind: \"directive\", type: ModalHeaderLabel, selector: \"[cdsModalHeaderLabel], [ibmModalHeaderLabel]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: AlertModal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-alert-modal, ibm-alert-modal\",\n                    template: `\n\t\t<cds-modal\n\t\t\t[size]=\"size\"\n\t\t\t[theme]=\"type\"\n\t\t\t[ariaLabel]=\"title\"\n\t\t\t[hasScrollingContent]=\"hasScrollingContent\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelected)=\"dismissModal('overlay')\">\n\t\t\t<cds-modal-header (closeSelect)=\"dismissModal('close')\" [showCloseButton]=\"showCloseButton\">\n\t\t\t\t<p cdsModalHeaderLabel class=\"cds--type-delta\">{{label}}</p>\n\t\t\t\t<p cdsModalHeaderHeading class=\"cds--type-beta\">{{title}}</p>\n\t\t\t</cds-modal-header>\n\t\t\t<div cdsModalContent #modalContent>\n\t\t\t\t<p [innerHTML]=\"content\"></p>\n\t\t\t</div>\n\t\t\t<cds-modal-footer *ngIf=\"buttons.length > 0\">\n\t\t\t\t<ng-container *ngFor=\"let button of buttons; let i = index\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t[cdsButton]=\"button.type\"\n\t\t\t\t\t\t(click)=\"buttonClicked(i)\"\n\t\t\t\t\t\t[id]=\"button.id\"\n\t\t\t\t\t\t[attr.modal-primary-focus]=\"(button.type.indexOf('primary') !== -1 ? '' : null)\">\n\t\t\t\t\t\t{{button.text}}\n\t\t\t\t\t</button>\n\t\t\t\t</ng-container>\n\t\t\t</cds-modal-footer>\n\t\t</cds-modal>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"type\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"label\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"title\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"content\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"size\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"hasScrollingContent\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"buttons\"]\n                }] }, { type: Function, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"close\"]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [\"showCloseButton\"]\n                }] }]; }, propDecorators: { modalContent: [{\n                type: ViewChild,\n                args: [\"modalContent\", { static: true }]\n            }] } });\n\nvar AlertModalType;\n(function (AlertModalType) {\n    AlertModalType[\"default\"] = \"default\";\n    AlertModalType[\"danger\"] = \"danger\";\n})(AlertModalType || (AlertModalType = {}));\nvar ModalButtonType;\n(function (ModalButtonType) {\n    ModalButtonType[\"primary\"] = \"primary\";\n    ModalButtonType[\"secondary\"] = \"secondary\";\n    ModalButtonType[\"tertiary\"] = \"tertiary\";\n    ModalButtonType[\"ghost\"] = \"ghost\";\n    ModalButtonType[\"danger\"] = \"danger\";\n    ModalButtonType[\"danger_primary\"] = \"danger--primary\";\n})(ModalButtonType || (ModalButtonType = {}));\n\n/**\n * Extends Base Modal Service to create Alert Modal with a function call. Placed in a seperate service\n * to prevent remote scoping (NG3003) which has side effects. Hence, import cycles are not allowed when\n * compilationMode is set to `partial`.\n *\n *\n * Modal service handles instantiating and destroying modal instances.\n * Uses PlaceholderService to track open instances, and for it's placeholder view reference.\n */\nclass ModalService extends BaseModalService {\n    /**\n     * Creates an instance of `ModalService`.\n     */\n    constructor(placeholderService) {\n        super(placeholderService);\n        this.placeholderService = placeholderService;\n    }\n    /**\n     * Creates and renders a new alert modal component.\n     * @param data You can pass in:\n     * `type` - \"default\" | \"danger\" = \"default\",\n     * `label` - a label shown over the title,\n     * `title` - modal's title,\n     * `content` - modal's content, could include HTML tags.\n     * `buttons` is an array of objects\n     * `close` custom close function\n     * ```\n     * {\n     * \t\ttext: \"Button text\",\n     * \t\ttype: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger--primary\" = \"primary\",\n     * \t\tclick: clickFunction,\n     * }\n     * ```\n     */\n    show(data) {\n        return this.create({\n            component: AlertModal,\n            inputs: {\n                type: data.type,\n                label: data.label,\n                title: data.title,\n                content: data.content,\n                hasScrollingContent: data.hasScrollingContent !== undefined ? data.hasScrollingContent : null,\n                size: data.size,\n                buttons: data.buttons || [],\n                close: data.close || (() => { }),\n                showCloseButton: data.showCloseButton\n            }\n        });\n    }\n}\nModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalService, deps: [{ token: i1.PlaceholderService }], target: i0.ɵɵFactoryTarget.Injectable });\nModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.PlaceholderService }]; } });\n\nclass ModalContentText {\n    constructor() {\n        this.modalContentTextClass = true;\n    }\n}\nModalContentText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalContentText, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nModalContentText.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ModalContentText, selector: \"[cdsModalContentText], [ibmModalContentText]\", host: { properties: { \"class.cds--modal-content__text\": \"this.modalContentTextClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalContentText, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsModalContentText], [ibmModalContentText]\"\n                }]\n        }], propDecorators: { modalContentTextClass: [{\n                type: HostBinding,\n                args: [\"class.cds--modal-content__text\"]\n            }] } });\n\n// modules\nclass ModalModule {\n}\nModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalModule, declarations: [AlertModal,\n        Modal,\n        ModalHeader,\n        ModalFooter,\n        Overlay,\n        ModalContent,\n        ModalContentText,\n        ModalHeaderHeading,\n        ModalHeaderLabel,\n        BaseModal], imports: [CommonModule,\n        ButtonModule,\n        I18nModule,\n        PlaceholderModule,\n        ExperimentalModule,\n        IconModule], exports: [AlertModal,\n        Modal,\n        ModalHeader,\n        ModalFooter,\n        ModalContent,\n        ModalContentText,\n        ModalHeaderHeading,\n        ModalHeaderLabel,\n        BaseModal] });\nModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalModule, providers: [BaseModalService, ModalService], imports: [CommonModule,\n        ButtonModule,\n        I18nModule,\n        PlaceholderModule,\n        ExperimentalModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ModalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        AlertModal,\n                        Modal,\n                        ModalHeader,\n                        ModalFooter,\n                        Overlay,\n                        ModalContent,\n                        ModalContentText,\n                        ModalHeaderHeading,\n                        ModalHeaderLabel,\n                        BaseModal\n                    ],\n                    exports: [\n                        AlertModal,\n                        Modal,\n                        ModalHeader,\n                        ModalFooter,\n                        ModalContent,\n                        ModalContentText,\n                        ModalHeaderHeading,\n                        ModalHeaderLabel,\n                        BaseModal\n                    ],\n                    providers: [BaseModalService, ModalService],\n                    imports: [\n                        CommonModule,\n                        ButtonModule,\n                        I18nModule,\n                        PlaceholderModule,\n                        ExperimentalModule,\n                        IconModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AlertModal, AlertModalType, BaseModal, BaseModalService, Modal, ModalButtonType, ModalContent, ModalContentText, ModalFooter, ModalHeader, ModalHeaderHeading, ModalHeaderLabel, ModalModule, ModalService, Overlay };\n"],"x_google_ignoreList":[0]}