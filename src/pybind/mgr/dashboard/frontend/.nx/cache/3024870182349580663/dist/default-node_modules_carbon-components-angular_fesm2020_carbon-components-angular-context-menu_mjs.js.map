{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-context-menu_mjs.js","mappings":"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","names":["_c0","ContextMenuItemComponent__svg_svg_1_Template","rf","ctx","i0","ContextMenuItemComponent__svg_svg_2_Template","ctx_r0","icon","ContextMenuItemComponent_ng_container_6_Template","info","ContextMenuItemComponent__svg_svg_7_Template","ContextMenuDividerComponent","constructor","this","dividerClass","role","ɵfac","__ngFactoryType__","ɵcmp","type","selectors","hostVars","hostBindings","decls","vars","template","encapsulation","ContextMenuSelectionService","selectionSubject","ReplaySubject","value","selectionObservable","asObservable","selectRadio","next","selectCheckbox","includes","filter","v","push","selectCheckboxes","ɵprov","token","factory","ContextMenuGroupComponent","contextMenuSelectionService","label","valueChange","EventEmitter","subscription","Subscription","radioGroup","group","ngOnInit","subscribe","emit","add","ngOnChanges","changes","currentValue","ngOnDestroy","unsubscribe","inputs","outputs","features","ngContentSelectors","ContextMenuComponent","elementRef","open","position","left","top","contextMenu","tabindex","contextMenuOpen","showMenu","leftPosition","topPosition","classIcons","nativeElement","querySelector","focusMenu","setTimeout","focus","handleNavigation","event","list","subMenus","Array","from","querySelectorAll","menuItems","menuItem","some","subMenu","contains","currentIndex","findIndex","parseInt","getAttribute","currentMenuItem","key","document","activeElement","length","click","parent","parentElement","closest","$event","styles","ContextMenuItemComponent","optionClass","ariaHasPopup","ariaExpanded","checked","checkedChange","hasChildren","selectable","subscriptions","ariaChecked","handleSelection","ngAfterContentInit","childContextMenu","handleClick","stopPropagation","openSubMenu","selected","dimensions","getBoundingClientRect","width","closeSubMenu","handleMouseOver","handleMouseOut","handleFocus","handleBlur","focusItem","contentQueries","dirIndex","_t","first","consts","dependencies","i2","i3","ContextMenuModule","ɵmod","ɵinj","imports","CommonModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-context-menu.mjs"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, HostBinding, Injectable, EventEmitter, Input, Output, HostListener, Optional, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { ReplaySubject, Subscription } from 'rxjs';\n\nclass ContextMenuDividerComponent {\n    constructor() {\n        this.dividerClass = true;\n        this.role = \"separator\";\n    }\n}\nContextMenuDividerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuDividerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nContextMenuDividerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContextMenuDividerComponent, selector: \"cds-context-menu-divider, ibm-context-menu-divider\", host: { properties: { \"class.cds--menu-item-divider\": \"this.dividerClass\", \"attr.role\": \"this.role\" } }, ngImport: i0, template: \"\", isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuDividerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-context-menu-divider, ibm-context-menu-divider\",\n                    template: \"\"\n                }]\n        }], propDecorators: { dividerClass: [{\n                type: HostBinding,\n                args: [\"class.cds--menu-item-divider\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }] } });\n\nclass ContextMenuSelectionService {\n    constructor() {\n        this.selectionSubject = new ReplaySubject(1);\n        this.value = [];\n        this.selectionObservable = this.selectionSubject.asObservable();\n    }\n    selectRadio(value) {\n        if (!value) {\n            return;\n        }\n        this.selectionSubject.next(value);\n        this.value = [value];\n    }\n    selectCheckbox(value) {\n        if (!value) {\n            return;\n        }\n        if (this.value.includes(value)) {\n            this.value = this.value.filter(v => v !== value);\n        }\n        else {\n            this.value.push(value);\n        }\n        this.selectionSubject.next(this.value);\n    }\n    selectCheckboxes(value) {\n        if (!value) {\n            return;\n        }\n        this.value = value;\n        this.selectionSubject.next(value);\n    }\n}\nContextMenuSelectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuSelectionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nContextMenuSelectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuSelectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuSelectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass ContextMenuGroupComponent {\n    constructor(contextMenuSelectionService) {\n        this.contextMenuSelectionService = contextMenuSelectionService;\n        this.role = \"group\";\n        this.label = null;\n        this.value = [];\n        this.type = null;\n        this.valueChange = new EventEmitter();\n        this.subscription = new Subscription();\n    }\n    get radioGroup() { return this.type === \"radio\"; }\n    get group() { return this.type === \"checkbox\"; }\n    ngOnInit() {\n        const { selectionObservable } = this.contextMenuSelectionService;\n        const subscription = selectionObservable.subscribe(value => {\n            this.valueChange.emit(value);\n        });\n        this.subscription.add(subscription);\n    }\n    ngOnChanges(changes) {\n        if (changes.value) {\n            if (this.type === \"radio\") {\n                this.contextMenuSelectionService.selectRadio(changes.value.currentValue);\n            }\n            if (this.type === \"checkbox\") {\n                this.contextMenuSelectionService.selectCheckboxes(changes.value.currentValue);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nContextMenuGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuGroupComponent, deps: [{ token: ContextMenuSelectionService }], target: i0.ɵɵFactoryTarget.Component });\nContextMenuGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContextMenuGroupComponent, selector: \"cds-context-menu-group, ibm-context-menu-group\", inputs: { label: \"label\", value: \"value\", type: \"type\" }, outputs: { valueChange: \"valueChange\" }, host: { properties: { \"attr.role\": \"this.role\", \"class.cds--menu-item-radio-group\": \"this.radioGroup\", \"class.cds--menu-item-group\": \"this.group\", \"attr.aria-label\": \"this.label\" } }, providers: [ContextMenuSelectionService], usesOnChanges: true, ngImport: i0, template: `\n\t\t<ng-content></ng-content>\n\t`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuGroupComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-context-menu-group, ibm-context-menu-group\",\n                    template: `\n\t\t<ng-content></ng-content>\n\t`,\n                    providers: [ContextMenuSelectionService]\n                }]\n        }], ctorParameters: function () { return [{ type: ContextMenuSelectionService }]; }, propDecorators: { role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], radioGroup: [{\n                type: HostBinding,\n                args: [\"class.cds--menu-item-radio-group\"]\n            }], group: [{\n                type: HostBinding,\n                args: [\"class.cds--menu-item-group\"]\n            }], label: [{\n                type: HostBinding,\n                args: [\"attr.aria-label\"]\n            }, {\n                type: Input\n            }], value: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { ContextMenuModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-context-menu--basic)\n */\nclass ContextMenuComponent {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.open = false;\n        this.position = {\n            left: 0,\n            top: 0\n        };\n        this.contextMenu = true;\n        this.role = \"menu\";\n        this.tabindex = \"-1\";\n    }\n    get contextMenuOpen() { return this.open; }\n    get showMenu() { return this.open; }\n    get leftPosition() { return this.position.left; }\n    get topPosition() { return this.position.top; }\n    get classIcons() {\n        const svgElement = this.elementRef.nativeElement\n            .querySelector(\".cds--menu-item .cds--menu-item__icon svg\");\n        return svgElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.open && changes.open.currentValue) {\n            this.focusMenu();\n        }\n    }\n    focusMenu() {\n        // wait until the next tick to let the DOM settle before changing the focus\n        setTimeout(() => {\n            const list = this.elementRef.nativeElement;\n            const firstOption = list.querySelector(\".cds--menu-item\");\n            firstOption.focus();\n        });\n    }\n    handleNavigation(event) {\n        const list = this.elementRef.nativeElement;\n        const subMenus = Array.from(list.querySelectorAll(\"cds-context-menu[role=menu]\"));\n        const menuItems = Array.from(list.querySelectorAll(\".cds--menu-item\"))\n            .filter(menuItem => !subMenus.some(subMenu => subMenu.contains(menuItem)));\n        const currentIndex = menuItems.findIndex(menuItem => parseInt(menuItem.getAttribute(\"tabindex\"), 10) === 0);\n        const currentMenuItem = menuItems[currentIndex];\n        switch (event.key) {\n            case \"ArrowDown\": {\n                if (document.activeElement === list) {\n                    menuItems[0].focus();\n                }\n                else {\n                    if (currentIndex !== -1 && currentIndex < menuItems.length - 1) {\n                        menuItems[currentIndex + 1].focus();\n                    }\n                }\n                break;\n            }\n            case \"ArrowUp\": {\n                if (document.activeElement === list) {\n                    menuItems[menuItems.length - 1].focus();\n                }\n                else {\n                    if (currentIndex !== -1 && currentIndex > 0) {\n                        menuItems[currentIndex - 1].focus();\n                    }\n                }\n                break;\n            }\n            case \"ArrowRight\": {\n                if (currentIndex !== -1 && subMenus.some(subMenu => currentMenuItem.contains(subMenu))) {\n                    currentMenuItem.click();\n                }\n                break;\n            }\n            case \"ArrowLeft\": {\n                const parent = currentMenuItem.parentElement.closest(\".cds--menu-item, .cds--menu-item\");\n                if (parent) {\n                    parent.focus();\n                }\n                break;\n            }\n        }\n    }\n}\nContextMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nContextMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContextMenuComponent, selector: \"cds-context-menu, ibm-context-menu\", inputs: { open: \"open\", position: \"position\" }, host: { listeners: { \"keydown\": \"handleNavigation($event)\" }, properties: { \"class.cds--menu\": \"this.contextMenu\", \"class.cds--menu--open\": \"this.contextMenuOpen\", \"class.cds--menu--shown\": \"this.showMenu\", \"attr.role\": \"this.role\", \"attr.tabindex\": \"this.tabindex\", \"style.left.px\": \"this.leftPosition\", \"style.top.px\": \"this.topPosition\", \"class.cds--menu--with-icons\": \"this.classIcons\" } }, usesOnChanges: true, ngImport: i0, template: `\n\t\t\t<ng-content></ng-content>\n\t`, isInline: true, styles: [\":host{display:block}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"cds-context-menu, ibm-context-menu\", template: `\n\t\t\t<ng-content></ng-content>\n\t`, styles: [\":host{display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { open: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], contextMenu: [{\n                type: HostBinding,\n                args: [\"class.cds--menu\"]\n            }], contextMenuOpen: [{\n                type: HostBinding,\n                args: [\"class.cds--menu--open\"]\n            }], showMenu: [{\n                type: HostBinding,\n                args: [\"class.cds--menu--shown\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], tabindex: [{\n                type: HostBinding,\n                args: [\"attr.tabindex\"]\n            }], leftPosition: [{\n                type: HostBinding,\n                args: [\"style.left.px\"]\n            }], topPosition: [{\n                type: HostBinding,\n                args: [\"style.top.px\"]\n            }], classIcons: [{\n                type: HostBinding,\n                args: [\"class.cds--menu--with-icons\"]\n            }], handleNavigation: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\nclass ContextMenuItemComponent {\n    constructor(elementRef, contextMenuSelectionService) {\n        this.elementRef = elementRef;\n        this.contextMenuSelectionService = contextMenuSelectionService;\n        this.optionClass = true;\n        this.role = \"menuitem\";\n        this.tabindex = -1;\n        this.ariaHasPopup = null;\n        this.ariaExpanded = null;\n        this.label = \"\";\n        this.info = \"\";\n        this.type = null;\n        this.checked = false;\n        this.icon = \"\";\n        this.value = \"\";\n        this.checkedChange = new EventEmitter();\n        this.hasChildren = false;\n        this.selectable = false;\n        this.subscriptions = new Subscription();\n    }\n    get ariaChecked() {\n        return this.type === \"checkbox\" ?\n            (this.checked ? true : false) : null;\n    }\n    ngOnInit() {\n        switch (this.type) {\n            case \"checkbox\": {\n                this.role = \"menuitemcheckbox\";\n                this.selectable = true;\n                break;\n            }\n            case \"radio\": {\n                this.role = \"menuitemradio\";\n                this.selectable = true;\n                break;\n            }\n            default: {\n                this.role = \"menuitem\";\n            }\n        }\n        if (this.type && this.contextMenuSelectionService && this.value) {\n            const { selectionObservable } = this.contextMenuSelectionService;\n            const subscription = selectionObservable.subscribe((value) => {\n                if (this.type === \"radio\") {\n                    this.handleSelection(value === this.value);\n                }\n                if (this.type === \"checkbox\") {\n                    this.handleSelection(value.includes(this.value));\n                }\n            });\n            this.subscriptions.add(subscription);\n        }\n    }\n    ngAfterContentInit() {\n        if (this.childContextMenu) {\n            this.hasChildren = true;\n            this.ariaHasPopup = true;\n            this.ariaExpanded = false;\n        }\n    }\n    handleClick(event) {\n        event.stopPropagation();\n        if (this.hasChildren) {\n            this.openSubMenu();\n            this.childContextMenu.focusMenu();\n        }\n        if (this.type) {\n            this.handleSelection(!this.checked);\n        }\n        if (this.contextMenuSelectionService) {\n            if (this.type === \"radio\") {\n                this.contextMenuSelectionService.selectRadio(this.value);\n            }\n            if (this.type === \"checkbox\") {\n                this.contextMenuSelectionService.selectCheckbox(this.value);\n            }\n        }\n    }\n    handleSelection(selected) {\n        this.checked = selected;\n        this.checkedChange.emit(this.checked);\n    }\n    openSubMenu() {\n        if (this.childContextMenu) {\n            this.childContextMenu.open = true;\n            this.ariaExpanded = true;\n            const dimensions = this.elementRef.nativeElement.getBoundingClientRect();\n            this.childContextMenu.position.left = dimensions.left + dimensions.width;\n            // subtract 4px to account for margins\n            this.childContextMenu.position.top = dimensions.top - 4;\n        }\n    }\n    closeSubMenu() {\n        if (this.childContextMenu) {\n            this.childContextMenu.open = false;\n            this.ariaExpanded = false;\n        }\n    }\n    handleMouseOver() {\n        this.openSubMenu();\n    }\n    handleMouseOut() {\n        this.closeSubMenu();\n    }\n    handleFocus() {\n        this.tabindex = 0;\n        if (this.hasChildren && this.ariaExpanded) {\n            this.closeSubMenu();\n        }\n    }\n    handleBlur() {\n        this.tabindex = -1;\n    }\n    focusItem() {\n        this.elementRef.nativeElement.focus();\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n}\nContextMenuItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuItemComponent, deps: [{ token: i0.ElementRef }, { token: ContextMenuSelectionService, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nContextMenuItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ContextMenuItemComponent, selector: \"cds-context-menu-item, ibm-context-menu-item\", inputs: { label: \"label\", info: \"info\", type: \"type\", checked: \"checked\", icon: \"icon\", value: \"value\" }, outputs: { checkedChange: \"checkedChange\" }, host: { listeners: { \"keydown.enter\": \"handleClick($event)\", \"keydown.space\": \"handleClick($event)\", \"click\": \"handleClick($event)\", \"mouseover\": \"handleMouseOver()\", \"mouseout\": \"handleMouseOut()\", \"focus\": \"handleFocus()\", \"blur\": \"handleBlur()\" }, properties: { \"class.cds--menu-item\": \"this.optionClass\", \"attr.role\": \"this.role\", \"attr.tabindex\": \"this.tabindex\", \"attr.aria-haspopup\": \"this.ariaHasPopup\", \"attr.aria-expanded\": \"this.ariaExpanded\", \"attr.aria-checked\": \"this.ariaChecked\" } }, queries: [{ propertyName: \"childContextMenu\", first: true, predicate: ContextMenuComponent, descendants: true, static: true }], ngImport: i0, template: `\n\t\t<div class=\"cds--menu-item__icon\">\n\t\t\t<svg *ngIf=\"selectable && checked\" cdsIcon=\"checkmark\" size=\"16\"></svg>\n\t\t\t<svg *ngIf=\"!selectable && icon\" [cdsIcon]=\"icon\" size=\"16\"></svg>\n\t\t</div>\n\t\t<div class=\"cds--menu-item__label\" [title]=\"label\">{{label}}</div>\n\t\t<div class=\"cds--menu-item__shortcut\">\n\t\t\t<ng-container *ngIf=\"info\">{{info}}</ng-container>\n\t\t\t<svg *ngIf=\"hasChildren\" cdsIcon=\"caret--right\" size=\"16\"></svg>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t`, isInline: true, styles: [\":host{grid-template-columns:1rem 1fr max-content}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuItemComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"cds-context-menu-item, ibm-context-menu-item\", template: `\n\t\t<div class=\"cds--menu-item__icon\">\n\t\t\t<svg *ngIf=\"selectable && checked\" cdsIcon=\"checkmark\" size=\"16\"></svg>\n\t\t\t<svg *ngIf=\"!selectable && icon\" [cdsIcon]=\"icon\" size=\"16\"></svg>\n\t\t</div>\n\t\t<div class=\"cds--menu-item__label\" [title]=\"label\">{{label}}</div>\n\t\t<div class=\"cds--menu-item__shortcut\">\n\t\t\t<ng-container *ngIf=\"info\">{{info}}</ng-container>\n\t\t\t<svg *ngIf=\"hasChildren\" cdsIcon=\"caret--right\" size=\"16\"></svg>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t`, styles: [\":host{grid-template-columns:1rem 1fr max-content}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ContextMenuSelectionService, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { optionClass: [{\n                type: HostBinding,\n                args: [\"class.cds--menu-item\"]\n            }], role: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], tabindex: [{\n                type: HostBinding,\n                args: [\"attr.tabindex\"]\n            }], ariaHasPopup: [{\n                type: HostBinding,\n                args: [\"attr.aria-haspopup\"]\n            }], ariaExpanded: [{\n                type: HostBinding,\n                args: [\"attr.aria-expanded\"]\n            }], ariaChecked: [{\n                type: HostBinding,\n                args: [\"attr.aria-checked\"]\n            }], label: [{\n                type: Input\n            }], info: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], checkedChange: [{\n                type: Output\n            }], childContextMenu: [{\n                type: ContentChild,\n                args: [ContextMenuComponent, { static: true }]\n            }], handleClick: [{\n                type: HostListener,\n                args: [\"keydown.enter\", [\"$event\"]]\n            }, {\n                type: HostListener,\n                args: [\"keydown.space\", [\"$event\"]]\n            }, {\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], handleMouseOver: [{\n                type: HostListener,\n                args: [\"mouseover\"]\n            }], handleMouseOut: [{\n                type: HostListener,\n                args: [\"mouseout\"]\n            }], handleFocus: [{\n                type: HostListener,\n                args: [\"focus\"]\n            }], handleBlur: [{\n                type: HostListener,\n                args: [\"blur\"]\n            }] } });\n\nclass ContextMenuModule {\n}\nContextMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nContextMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuModule, declarations: [ContextMenuDividerComponent,\n        ContextMenuGroupComponent,\n        ContextMenuItemComponent,\n        ContextMenuComponent], imports: [CommonModule, IconModule], exports: [ContextMenuDividerComponent,\n        ContextMenuGroupComponent,\n        ContextMenuItemComponent,\n        ContextMenuComponent] });\nContextMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuModule, imports: [CommonModule, IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ContextMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ContextMenuDividerComponent,\n                        ContextMenuGroupComponent,\n                        ContextMenuItemComponent,\n                        ContextMenuComponent\n                    ],\n                    exports: [\n                        ContextMenuDividerComponent,\n                        ContextMenuGroupComponent,\n                        ContextMenuItemComponent,\n                        ContextMenuComponent\n                    ],\n                    imports: [CommonModule, IconModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ContextMenuComponent, ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuModule };\n"],"x_google_ignoreList":[0]}