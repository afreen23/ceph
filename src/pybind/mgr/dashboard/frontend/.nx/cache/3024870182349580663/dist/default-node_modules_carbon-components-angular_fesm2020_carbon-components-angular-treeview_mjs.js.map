{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-treeview_mjs.js","mappings":"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","names":["_c0","_c1","a0","a1","a2","a3","a4","a5","_c2","$implicit","_c3","TreeNodeComponent_div_1_ng_container_1_Template","rf","ctx","i0","ctx_r1","icon","TreeNodeComponent_div_1_2_ng_template_0_Template","TreeNodeComponent_div_1_2_Template","TreeNodeComponent_div_1_ng_container_3_Template","label","TreeNodeComponent_div_1_4_ng_template_0_Template","TreeNodeComponent_div_1_4_Template","labelContext","TreeNodeComponent_div_1_Template","_r1","$event","nodeClick","offset","isTemplate","TreeNodeComponent_div_2_ng_container_4_Template","TreeNodeComponent_div_2_5_ng_template_0_Template","TreeNodeComponent_div_2_5_Template","iconContext","TreeNodeComponent_div_2_ng_container_6_Template","TreeNodeComponent_div_2_7_ng_template_0_Template","TreeNodeComponent_div_2_7_Template","TreeNodeComponent_div_2_Template","_r3","toggleExpanded","disabled","expanded","TreeNodeComponent_div_3_ng_container_1_Template","TreeNodeComponent_div_3_ng_template_2_cds_tree_node_0_Template","_r4","nodetoggle","emit","childNode_r5","depth","TreeNodeComponent_div_3_ng_template_2_Template","children","TreeNodeComponent_div_3_Template","notProjected_r6","isProjected","_c4","_c5","TreeViewComponent_label_0_ng_container_1_Template","TreeViewComponent_label_0_2_ng_template_0_Template","TreeViewComponent_label_0_2_Template","TreeViewComponent_label_0_Template","id","TreeViewComponent_ng_container_3_Template","TreeViewComponent_ng_template_4_cds_tree_node_0_Template","onNodeToggle","node_r4","TreeViewComponent_ng_template_4_Template","tree","TreeViewService","constructor","this","contentProjected","isMultiSelect","selectionSubject","ReplaySubject","focusNodeSubject","value","Map","selectionObservable","asObservable","focusNodeObservable","focusNode","node","next","selectNode","clear","set","deselectNode","delete","deselectAllNodes","ɵfac","__ngFactoryType__","ɵprov","token","factory","TreeNodeComponent","treeViewService","treeNodeCount","active","selectable","selected","gap","nodeFocus","EventEmitter","nodeBlur","nodeSelect","_node","iconText","ngAfterContentChecked","calculateOffset","ngOnInit","subscription","subscribe","has","ngOnDestroy","unsubscribe","event","target","parentElement","focus","length","emitFocusEvent","emitBlurEvent","stopPropagation","navigateTree","key","preventDefault","TemplateRef","ɵcmp","type","selectors","inputs","outputs","ngContentSelectors","decls","vars","consts","template","dependencies","i2","i3","encapsulation","TreeViewComponent","document","elementRef","treeViewCount","size","select","toggle","_tree","treeNodes","map","copyNode","isMulti","nodesMap","nodes","values","add","onNodeFocusChange","ngAfterViewInit","treeWalker","createTreeWalker","root","nativeElement","NodeFilter","SHOW_ELEMENT","acceptNode","classList","contains","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","previousNode","nextNode","eventOnNode","currentNode","querySelector","CSS","escape","copiedNode","Object","assign","child","DOCUMENT","viewQuery","_t","first","features","notProjected_r5","TreeviewModule","ɵmod","ɵinj","imports","CommonModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-treeview.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, TemplateRef, Component, Input, Output, Inject, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { ReplaySubject } from 'rxjs';\n\nclass TreeViewService {\n    constructor() {\n        /**\n         * Variable used across all nodes and wrapper to determine if we should allow content projection\n         * or generate the tree\n         *\n         * Value is updated by passing a value to `tree` input in wrapper component.\n         */\n        this.contentProjected = true;\n        /**\n         * **Experimental**\n         */\n        this.isMultiSelect = false;\n        this.selectionSubject = new ReplaySubject(1);\n        this.focusNodeSubject = new ReplaySubject(1);\n        /**\n         * Hold's list of selected nodes and preserves order\n         */\n        this.value = new Map();\n        this.selectionObservable = this.selectionSubject.asObservable();\n        this.focusNodeObservable = this.focusNodeSubject.asObservable();\n    }\n    /**\n     * Emits the focused node\n     * @param node: Node\n     */\n    focusNode(node) {\n        this.focusNodeSubject.next(node);\n    }\n    /**\n     * Store selected node in map\n     * @param node: Node\n     */\n    selectNode(node) {\n        if (!node) {\n            return;\n        }\n        // Since multiselect is not enabled, we clear existing map\n        if (!this.isMultiSelect) {\n            this.value.clear();\n        }\n        this.value.set(node.id, node);\n        this.selectionSubject.next(this.value);\n    }\n    /**\n     * Removes selected node from the map\n     * @param node: Node\n     */\n    deselectNode(node) {\n        if (!node) {\n            return;\n        }\n        this.value.delete(node.id);\n        this.selectionSubject.next(this.value);\n    }\n    /**\n     * Removes all selected nodes from the map\n     */\n    deselectAllNodes() {\n        this.value.clear();\n        this.selectionSubject.next(this.value);\n    }\n}\nTreeViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeViewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTreeViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeViewService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeViewService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass TreeNodeComponent {\n    constructor(treeViewService) {\n        this.treeViewService = treeViewService;\n        this.id = `tree-node-${TreeNodeComponent.treeNodeCount++}`;\n        this.active = false;\n        this.disabled = false;\n        this.selectable = true;\n        this.expanded = false;\n        this.selected = false;\n        this.gap = 0;\n        this.children = [];\n        /**\n         * Determines the depth of the node\n         * Calculated by default when passing `Node` array to `TreeViewComponent`, manual entry required otherwise\n         */\n        this.depth = 0;\n        this.nodeFocus = new EventEmitter();\n        this.nodeBlur = new EventEmitter();\n        this.nodeSelect = new EventEmitter();\n        this.nodetoggle = new EventEmitter();\n    }\n    /**\n     * Simple way to set all attributes of Node component via node object\n     * Would simplify setting component attributes when dynamically rendering node.\n     */\n    set node(node) {\n        this._node = node;\n        this.id = node.id ?? this.id;\n        this.active = node.active ?? this.active;\n        this.disabled = node.disabled ?? this.disabled;\n        this.selectable = node.selectable ?? this.selectable;\n        this.expanded = node.expanded ?? this.expanded;\n        this.label = node.label ?? this.label;\n        this.labelContext = node.labelContext ?? this.labelContext;\n        this.value = node.value ?? this.value;\n        this.icon = node.icon ?? this.icon;\n        this.selected = node.selected ?? this.selected;\n        this.depth = node.depth ?? this.depth;\n        this.gap = node.gap ?? this.gap;\n        this.children = node.children ?? this.children;\n        this.iconContext = node.iconText ?? this.iconContext;\n    }\n    get node() {\n        return this._node;\n    }\n    /**\n     * Caclulate offset for margin/padding\n     */\n    ngAfterContentChecked() {\n        this.offset = this.calculateOffset();\n    }\n    /**\n     * Highlight the node\n     */\n    ngOnInit() {\n        // Highlight the node\n        this.subscription = this.treeViewService.selectionObservable.subscribe((value) => {\n            this.selected = this.selectable && value.has(this.id);\n            this.active = this.selectable && this.selected;\n        });\n    }\n    /**\n     * Unsubscribe from subscriptions\n     */\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n    /**\n     * Selects the node and emits the event from the tree view component\n     * @param event\n     */\n    nodeClick(event) {\n        if (!this.disabled) {\n            event.target.parentElement.focus();\n            if (this.selectable || this.children.length === 0) {\n                this.selected = true;\n                this.active = true;\n                const node = { id: this.id, label: this.label, value: this.value };\n                // Passes event to all nodes to update highlighting & parent to emit\n                this.treeViewService.selectNode(node);\n                this.nodeSelect.emit(node);\n            }\n            else {\n                this.toggleExpanded(event);\n            }\n        }\n    }\n    /**\n     * Calculate the node offset\n     * @returns Number\n     */\n    calculateOffset() {\n        // Parent node with icon\n        if (this.children.length && this.icon) {\n            return this.depth + 1 + this.depth * 0.5;\n        }\n        // parent node without icon\n        if (this.children.length) {\n            return this.depth + 1;\n        }\n        // leaf node with icon\n        if (this.icon) {\n            return this.depth + 2 + this.depth * 0.5;\n        }\n        return this.depth + this.gap + 2.5;\n    }\n    emitFocusEvent(event) {\n        const node = { id: this.id, label: this.label, value: this.value };\n        this.nodeFocus.emit({ node, event });\n        this.treeViewService.focusNode(node);\n    }\n    emitBlurEvent(event) {\n        this.nodeBlur.emit({ node: { id: this.id, label: this.label, value: this.value }, event });\n    }\n    /**\n     * Expand children if not disabled\n     * @param event: Event\n     */\n    toggleExpanded(event) {\n        if (!this.disabled) {\n            this.nodetoggle.emit({ node: { id: this.id, label: this.label, value: this.value }, event });\n            this.expanded = !this.expanded;\n            // Prevent selection of the node\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Manages the keyboard accessibility for children expansion & selection\n     */\n    navigateTree(event) {\n        if (event.key === \"ArrowLeft\" || event.key === \"ArrowRight\" || event.key === \"Enter\") {\n            event.stopPropagation();\n        }\n        // Unexpand\n        if (event.key === \"ArrowLeft\") {\n            if (this.expanded && this.children) {\n                this.toggleExpanded(event);\n            }\n        }\n        if (event.key === \"ArrowRight\") {\n            if (!this.expanded && this.children) {\n                this.toggleExpanded(event);\n            }\n        }\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.nodeClick(event);\n        }\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    isProjected() {\n        return this.treeViewService.contentProjected;\n    }\n}\nTreeNodeComponent.treeNodeCount = 0;\nTreeNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeNodeComponent, deps: [{ token: TreeViewService }], target: i0.ɵɵFactoryTarget.Component });\nTreeNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: TreeNodeComponent, selector: \"cds-tree-node\", inputs: { id: \"id\", active: \"active\", disabled: \"disabled\", selectable: \"selectable\", expanded: \"expanded\", label: \"label\", labelContext: \"labelContext\", selected: \"selected\", value: \"value\", icon: \"icon\", iconContext: \"iconContext\", gap: \"gap\", children: \"children\", depth: \"depth\", node: \"node\" }, outputs: { nodeFocus: \"nodeFocus\", nodeBlur: \"nodeBlur\", nodeSelect: \"nodeSelect\", nodetoggle: \"nodetoggle\" }, ngImport: i0, template: `\n\t\t<div\n\t\t\t[id]=\"id\"\n\t\t\tclass=\"cds--tree-node\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tree-node--active': active,\n\t\t\t\t'cds--tree-node--disabled': disabled,\n\t\t\t\t'cds--tree-node--selected': selected,\n\t\t\t\t'cds--tree-leaf-node': !children.length,\n\t\t\t\t'cds--tree-parent-node': children.length,\n\t\t\t\t'cds--tree-node--with-icon': icon\n\t\t\t}\"\n\t\t\t[attr.aria-expanded]=\"expanded || null\"\n\t\t\t[attr.aria-current]=\"active || null\"\n\t\t\t[attr.aria-selected]=\"disabled ? null : selected\"\n\t\t\t[attr.aria-disabled]=\"disabled\"\n\t\t\trole=\"treeitem\"\n\t\t\t[attr.tabindex]=\"selected ? 0 : -1\"\n\t\t\t(focus)=\"emitFocusEvent($event)\"\n\t\t\t(blur)=\"emitBlurEvent($event)\"\n\t\t\t(keydown)=\"navigateTree($event)\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"!children.length\"\n\t\t\t\tclass=\"cds--tree-node__label\"\n\t\t\t\t[style.padding-inline-start.rem]=\"offset\"\n\t\t\t\t[style.margin-inline-start.rem]=\"-offset\"\n\t\t\t\t(click)=\"nodeClick($event)\">\n\t\t\t\t<!-- Icon -->\n\t\t\t\t<ng-container *ngIf=\"icon && !isTemplate(icon)\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclass=\"cds--tree-node__icon\"\n\t\t\t\t\t\t[cdsIcon]=\"icon\"\n\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t</svg>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(icon)\" [ngTemplateOutlet]=\"icon\"></ng-template>\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t\t</ng-template>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\t*ngIf=\"children.length\"\n\t\t\t\tclass=\"cds--tree-node__label\"\n\t\t\t\t[style.padding-inline-start.rem]=\"offset\"\n\t\t\t\t[style.margin-inline-start.rem]=\"-offset\"\n\t\t\t\trole=\"group\"\n\t\t\t\t(click)=\"nodeClick($event)\">\n\t\t\t\t<span\n\t\t\t\t\tclass=\"cds--tree-parent-node__toggle\"\n\t\t\t\t\t[attr.disabled]=\"disabled || null\"\n\t\t\t\t\t(click)=\"toggleExpanded($event)\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclass=\"cds--tree-parent-node__toggle-icon\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--tree-parent-node__toggle-icon--expanded' : expanded}\"\n\t\t\t\t\t\tibmIcon=\"caret--down\"\n\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t</svg>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"cds--tree-node__label__details\">\n\t\t\t\t\t<!-- Icon -->\n\t\t\t\t\t<ng-container *ngIf=\"icon && !isTemplate(icon)\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"cds--tree-node__icon\"\n\t\t\t\t\t\t\t[cdsIcon]=\"icon\"\n\t\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"isTemplate(icon)\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"icon\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: iconContext }\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\t*ngIf=\"expanded\"\n\t\t\t\trole=\"group\"\n\t\t\t\tclass=\"cds--tree-node__children\">\n\t\t\t\t<ng-container *ngIf=\"isProjected(); else notProjected\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-template #notProjected>\n\t\t\t\t\t<cds-tree-node\n\t\t\t\t\t\t*ngFor=\"let childNode of children\"\n\t\t\t\t\t\t[node]=\"childNode\"\n\t\t\t\t\t\t[depth]=\"depth + 1\"\n\t\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t\t(nodetoggle)=\"nodetoggle.emit($event)\">\n\t\t\t\t\t</cds-tree-node>\n\t\t\t\t</ng-template>\n\t\t\t</div>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"component\", type: TreeNodeComponent, selector: \"cds-tree-node\", inputs: [\"id\", \"active\", \"disabled\", \"selectable\", \"expanded\", \"label\", \"labelContext\", \"selected\", \"value\", \"icon\", \"iconContext\", \"gap\", \"children\", \"depth\", \"node\"], outputs: [\"nodeFocus\", \"nodeBlur\", \"nodeSelect\", \"nodetoggle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeNodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-tree-node\",\n                    template: `\n\t\t<div\n\t\t\t[id]=\"id\"\n\t\t\tclass=\"cds--tree-node\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tree-node--active': active,\n\t\t\t\t'cds--tree-node--disabled': disabled,\n\t\t\t\t'cds--tree-node--selected': selected,\n\t\t\t\t'cds--tree-leaf-node': !children.length,\n\t\t\t\t'cds--tree-parent-node': children.length,\n\t\t\t\t'cds--tree-node--with-icon': icon\n\t\t\t}\"\n\t\t\t[attr.aria-expanded]=\"expanded || null\"\n\t\t\t[attr.aria-current]=\"active || null\"\n\t\t\t[attr.aria-selected]=\"disabled ? null : selected\"\n\t\t\t[attr.aria-disabled]=\"disabled\"\n\t\t\trole=\"treeitem\"\n\t\t\t[attr.tabindex]=\"selected ? 0 : -1\"\n\t\t\t(focus)=\"emitFocusEvent($event)\"\n\t\t\t(blur)=\"emitBlurEvent($event)\"\n\t\t\t(keydown)=\"navigateTree($event)\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"!children.length\"\n\t\t\t\tclass=\"cds--tree-node__label\"\n\t\t\t\t[style.padding-inline-start.rem]=\"offset\"\n\t\t\t\t[style.margin-inline-start.rem]=\"-offset\"\n\t\t\t\t(click)=\"nodeClick($event)\">\n\t\t\t\t<!-- Icon -->\n\t\t\t\t<ng-container *ngIf=\"icon && !isTemplate(icon)\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclass=\"cds--tree-node__icon\"\n\t\t\t\t\t\t[cdsIcon]=\"icon\"\n\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t</svg>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(icon)\" [ngTemplateOutlet]=\"icon\"></ng-template>\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t\t</ng-template>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\t*ngIf=\"children.length\"\n\t\t\t\tclass=\"cds--tree-node__label\"\n\t\t\t\t[style.padding-inline-start.rem]=\"offset\"\n\t\t\t\t[style.margin-inline-start.rem]=\"-offset\"\n\t\t\t\trole=\"group\"\n\t\t\t\t(click)=\"nodeClick($event)\">\n\t\t\t\t<span\n\t\t\t\t\tclass=\"cds--tree-parent-node__toggle\"\n\t\t\t\t\t[attr.disabled]=\"disabled || null\"\n\t\t\t\t\t(click)=\"toggleExpanded($event)\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclass=\"cds--tree-parent-node__toggle-icon\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--tree-parent-node__toggle-icon--expanded' : expanded}\"\n\t\t\t\t\t\tibmIcon=\"caret--down\"\n\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t</svg>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"cds--tree-node__label__details\">\n\t\t\t\t\t<!-- Icon -->\n\t\t\t\t\t<ng-container *ngIf=\"icon && !isTemplate(icon)\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"cds--tree-node__icon\"\n\t\t\t\t\t\t\t[cdsIcon]=\"icon\"\n\t\t\t\t\t\t\tsize=\"16\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"isTemplate(icon)\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"icon\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: iconContext }\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\t*ngIf=\"expanded\"\n\t\t\t\trole=\"group\"\n\t\t\t\tclass=\"cds--tree-node__children\">\n\t\t\t\t<ng-container *ngIf=\"isProjected(); else notProjected\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-template #notProjected>\n\t\t\t\t\t<cds-tree-node\n\t\t\t\t\t\t*ngFor=\"let childNode of children\"\n\t\t\t\t\t\t[node]=\"childNode\"\n\t\t\t\t\t\t[depth]=\"depth + 1\"\n\t\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t\t(nodetoggle)=\"nodetoggle.emit($event)\">\n\t\t\t\t\t</cds-tree-node>\n\t\t\t\t</ng-template>\n\t\t\t</div>\n\t\t</div>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: TreeViewService }]; }, propDecorators: { id: [{\n                type: Input\n            }], active: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], selectable: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], labelContext: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], iconContext: [{\n                type: Input\n            }], gap: [{\n                type: Input\n            }], children: [{\n                type: Input\n            }], depth: [{\n                type: Input\n            }], node: [{\n                type: Input\n            }], nodeFocus: [{\n                type: Output\n            }], nodeBlur: [{\n                type: Output\n            }], nodeSelect: [{\n                type: Output\n            }], nodetoggle: [{\n                type: Output\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { TreeviewModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-tree-view--basic)\n */\nclass TreeViewComponent {\n    constructor(document, treeViewService, elementRef) {\n        this.document = document;\n        this.treeViewService = treeViewService;\n        this.elementRef = elementRef;\n        this.id = `tree-view-${TreeViewComponent.treeViewCount++}`;\n        /**\n         * Specify the size of the list items in the tree\n         */\n        this.size = \"sm\";\n        this.select = new EventEmitter();\n        this.toggle = new EventEmitter();\n        this._tree = [];\n    }\n    /**\n     * Pass `Node[]` array to have tree view render the nodes\n     * Passing value will disregard projected content\n     */\n    set tree(treeNodes) {\n        this._tree = treeNodes.map((node) => this.copyNode(node));\n        this.treeViewService.contentProjected = false;\n    }\n    get tree() {\n        return this._tree;\n    }\n    /**\n     * **Experimental** - Enable to select multiple nodes\n     */\n    set isMultiSelect(isMulti) {\n        this.treeViewService.isMultiSelect = isMulti;\n    }\n    /**\n     * Subscribe for node selection\n     */\n    ngOnInit() {\n        this.subscription = this.treeViewService.selectionObservable.subscribe((nodesMap) => {\n            // Get all values from the map to emit\n            const nodes = [...nodesMap.values()];\n            this.select.emit(this.treeViewService.isMultiSelect ? nodes : nodes[0]);\n        });\n        this.subscription.add(this.treeViewService.focusNodeObservable.subscribe(node => this.onNodeFocusChange(node)));\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    /**\n     * Initialize tree walker to support keyboard navigation\n     */\n    ngAfterViewInit() {\n        this.treeWalker = this.document.createTreeWalker(this.root.nativeElement, NodeFilter.SHOW_ELEMENT, {\n            acceptNode: function (node) {\n                if (node.classList.contains(`cds--tree-node--disabled`)) {\n                    return NodeFilter.FILTER_REJECT;\n                }\n                if (node.matches(`div.cds--tree-node`)) {\n                    return NodeFilter.FILTER_ACCEPT;\n                }\n                return NodeFilter.FILTER_SKIP;\n            }\n        });\n    }\n    /**\n     * Navigate tree using tree walker\n     * @param event - KeyboardEvent\n     */\n    navigateTree(event) {\n        if (event.key === \"ArrowUp\") {\n            this.treeWalker.previousNode()?.focus();\n        }\n        if (event.key === \"ArrowDown\") {\n            this.treeWalker.nextNode()?.focus();\n        }\n    }\n    /**\n     * Propagate node toggle event\n     * @param eventOnNode - EventOnNode\n     */\n    onNodeToggle(eventOnNode) {\n        if (!eventOnNode) {\n            return;\n        }\n        this.toggle.emit(eventOnNode.node);\n    }\n    /**\n     * Node focus change\n     * @param node - Node\n     */\n    onNodeFocusChange(node) {\n        if (!node) {\n            // if for some reason the focused node is not defined we fallback on the root element of the treeview\n            this.treeWalker.currentNode = this.treeWalker.root;\n            return;\n        }\n        // Update current node based on focus change to have a better keyboard navigation experience\n        this.treeWalker.currentNode = this.elementRef.nativeElement.querySelector(`#${CSS.escape(node.id)}`);\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    isProjected() {\n        return this.treeViewService.contentProjected;\n    }\n    copyNode(node) {\n        // making a recursive shallow copy to avoid performance issues when deeply cloning templateRefs if defined in the node\n        const copiedNode = Object.assign({}, node);\n        if (node.children) {\n            copiedNode.children = node.children.map(child => this.copyNode(child));\n        }\n        return copiedNode;\n    }\n}\nTreeViewComponent.treeViewCount = 0;\nTreeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeViewComponent, deps: [{ token: DOCUMENT }, { token: TreeViewService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: TreeViewComponent, selector: \"cds-tree-view\", inputs: { tree: \"tree\", id: \"id\", label: \"label\", labelContext: \"labelContext\", size: \"size\", isMultiSelect: \"isMultiSelect\" }, outputs: { select: \"select\", toggle: \"toggle\" }, providers: [TreeViewService], viewQueries: [{ propertyName: \"root\", first: true, predicate: [\"treeWrapper\"], descendants: true }], ngImport: i0, template: `\n\t\t<label\n\t\t\t*ngIf=\"label\"\n\t\t\t[id]=\"id\"\n\t\t\tclass=\"cds--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t</ng-template>\n\t\t</label>\n\t\t<div\n\t\t\tclass=\"cds--tree\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tree--sm': size === 'sm',\n\t\t\t\t'cds--tree--xs': size === 'xs'\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"label ? label : null\"\n\t\t\t[attr.aria-labelledby]=\"!label ? id : null\"\n\t\t\t[attr.aria-multiselectable]=\"isMultiSelect || null\"\n\t\t\trole=\"tree\"\n\t\t\t(keydown)=\"navigateTree($event)\"\n\t\t\t#treeWrapper>\n\t\t\t<ng-container *ngIf=\"isProjected(); else notProjected\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ng-container>\n\t\t\t<ng-template #notProjected>\n\t\t\t\t<cds-tree-node\n\t\t\t\t\t*ngFor=\"let node of tree\"\n\t\t\t\t\t[node]=\"node\"\n\t\t\t\t\t(nodetoggle)=\"onNodeToggle($event)\">\n\t\t\t\t</cds-tree-node>\n\t\t\t</ng-template>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: TreeNodeComponent, selector: \"cds-tree-node\", inputs: [\"id\", \"active\", \"disabled\", \"selectable\", \"expanded\", \"label\", \"labelContext\", \"selected\", \"value\", \"icon\", \"iconContext\", \"gap\", \"children\", \"depth\", \"node\"], outputs: [\"nodeFocus\", \"nodeBlur\", \"nodeSelect\", \"nodetoggle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-tree-view\",\n                    template: `\n\t\t<label\n\t\t\t*ngIf=\"label\"\n\t\t\t[id]=\"id\"\n\t\t\tclass=\"cds--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(label)\"\n\t\t\t\t[ngTemplateOutlet]=\"label\"\n\t\t\t\t[ngTemplateOutletContext]=\"{ $implicit: labelContext }\">\n\t\t\t</ng-template>\n\t\t</label>\n\t\t<div\n\t\t\tclass=\"cds--tree\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tree--sm': size === 'sm',\n\t\t\t\t'cds--tree--xs': size === 'xs'\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"label ? label : null\"\n\t\t\t[attr.aria-labelledby]=\"!label ? id : null\"\n\t\t\t[attr.aria-multiselectable]=\"isMultiSelect || null\"\n\t\t\trole=\"tree\"\n\t\t\t(keydown)=\"navigateTree($event)\"\n\t\t\t#treeWrapper>\n\t\t\t<ng-container *ngIf=\"isProjected(); else notProjected\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ng-container>\n\t\t\t<ng-template #notProjected>\n\t\t\t\t<cds-tree-node\n\t\t\t\t\t*ngFor=\"let node of tree\"\n\t\t\t\t\t[node]=\"node\"\n\t\t\t\t\t(nodetoggle)=\"onNodeToggle($event)\">\n\t\t\t\t</cds-tree-node>\n\t\t\t</ng-template>\n\t\t</div>\n\t`,\n                    providers: [TreeViewService]\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: TreeViewService }, { type: i0.ElementRef }]; }, propDecorators: { tree: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], labelContext: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], isMultiSelect: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], root: [{\n                type: ViewChild,\n                args: [\"treeWrapper\"]\n            }] } });\n\nclass TreeviewModule {\n}\nTreeviewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeviewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeviewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeviewModule, declarations: [TreeViewComponent, TreeNodeComponent], imports: [CommonModule, IconModule], exports: [TreeViewComponent, TreeNodeComponent] });\nTreeviewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeviewModule, imports: [CommonModule, IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TreeviewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TreeViewComponent, TreeNodeComponent],\n                    exports: [TreeViewComponent, TreeNodeComponent],\n                    imports: [CommonModule, IconModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeNodeComponent, TreeViewComponent, TreeViewService, TreeviewModule };\n"],"x_google_ignoreList":[0]}