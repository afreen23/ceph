{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-tiles_mjs.js","mappings":"uhBAc2C,MAAAA,EAAA,MAAAC,GAAAC,EAAAC,MAAA,mBAAAD,EAAA,0CAAAC,IAAAC,EAAA,cAAAC,EAAA,wLAAAC,GAAAJ,EAAAC,MAAA,yBAAAD,EAAA,mBAAAC,IAAAI,EAAAL,KAAA,aAAAA,IAAA,SAAAM,EAAAC,EAAAC,GAAA,EAAAD,GAOkEE,+BAAE,EAoMpC,UAAAC,EAAAH,EAAAC,GAAA,KAAAD,EAAA,OAAAI,EApMkCF,0DAAE,cAAFA,mBAAE,WAAFA,uBAAE,mBAAFA,0BAAEE,GAAA,MAAAC,EAAFH,4BAAE,OAAFA,wBAiMjGG,EAAAC,UAAS,GAjMwFJ,uBAAE,EAAAH,EAAA,sBAAFG,0BAqMlG,MAAAF,EAAA,OAAAK,EArMkGH,4BAAEK,EAAFL,wBAAE,GAAFA,uBAAE,UAAFA,4BAAE,EAAAL,EAAAQ,EAAAG,SAAA,UAAAH,EAAAI,OAAFP,CA8LxG,UA9LwGA,4BAAE,GAAAJ,EAAAO,EAAAK,eAAA,OAAFR,wBAAE,gBAAAG,EAAAG,SAAFN,CAAE,QAAFA,wBAAE,IAAAG,EAAAG,SAAAH,EAAAM,SAAAC,QAAAP,EAAAQ,OAAAD,UAAFV,sBAAE,GAAFA,uBAAE,mBAAAK,EAoMrD,WAAAO,EAAAd,EAAAC,GAAA,EAAAD,GApMmDE,+BAAE,EAgNrC,UAAAa,EAAAf,EAAAC,GAClE,GADkE,EAAAD,IAhNmCE,2BAAE,WAAFA,mBAAE,WAAFA,uBAAE,EAAAY,EAAA,sBAAFZ,4BAiNrG,EAAAF,EAAA,OAAAK,EAjNqGH,4BAAEK,EAAFL,wBAAE,GAAFA,uBAAE,UAAFA,4BAAE,EAAAL,EAAAQ,EAAAG,SAAA,UAAAH,EAAAI,OAAFP,CA6MxG,UA7MwGA,4BAAE,EAAAJ,EAAAO,EAAAK,eAAA,OAAFR,wBAAE,QAAFA,wBAAE,IAAAG,EAAAG,SAAAH,EAAAM,SAAAC,QAAAP,EAAAQ,OAAAD,UAAFV,sBAAE,GAAFA,uBAAE,mBAAAK,EAgNtD,WAAAS,EAAAhB,EAAAC,GAAA,EAAAD,IAhNoDE,mDAAE,WAoN/D,UAAAe,EAAAjB,EAAAC,GAAA,EAAAD,GApN6DE,+BAAE,EA6N7C,UAAAgB,EAAAlB,EAAAC,GACxD,GADwD,EAAAD,IA7N2CE,2BAAE,YAAFA,uBAAE,EAAAe,EAAA,sBAAFf,4BA8NnG,EAAAF,EAAA,CA9NmGE,0BAAE,SAAAiB,EAAFjB,wBAAE,GAAFA,+CAAE,mBAAAiB,EA6N9D,WAAAC,EAAApB,EAAAC,GAAA,EAAAD,GA7N4DE,+BAAE,EAsO7C,UAAAmB,EAAArB,EAAAC,GAAA,KAAAD,EAAA,OAAAsB,EAtO2CpB,0DAAE,eAAFA,mBAAE,WAAFA,uBAAE,mBAAFA,0BAAEoB,GAAA,MAAAjB,EAAFH,0BAAE,UAAFA,wBAmO/FG,EAAAC,UAAS,GAnOsFJ,uBAAE,EAAAkB,EAAA,sBAAFlB,0BAuOhG,MAAAF,EAAA,OAAAK,EAvOgGH,0BAAE,GAAAiB,EAAFjB,wBAAE,GAAFA,wBAAE,gBAAAG,EAAAG,SAAFN,CAAE,aAAFA,wBAAE,IAAAG,EAAAG,SAAAH,EAAAM,SAAAC,QAAAP,EAAAQ,OAAAD,UAAFV,sBAAE,GAAFA,uBAAE,mBAAAiB,EAsO9D,WAAAI,EAAAvB,EAAAC,GAKxC,GALwC,EAAAD,IAtO4DE,2BAAE,eAAFA,CAwN1F,WAxN0FA,yBAAE,GAAFA,kDAAE,EAAAgB,EAAA,aAAFhB,CA4NpD,EAAAmB,EAAA,iBA5NoDnB,2BAAE,WAAFA,yBAAE,KAAFA,8BA2OpG,EAAAF,EAAA,OAAAK,EA3OoGH,kDAAE,GAAFA,uBAAE,QAAAG,EAAAmB,aAAFtB,+CAAE,OAAAG,EAAAmB,YAgOxF,QAAAC,EAAA,UAAAC,GAAAjC,EAAAC,EAAAiC,MAAA,yBAAAlC,EAAA,mBAAAC,EAAA,sBAAAiC,IAAAC,EAAA,2DAAAC,EAAA7B,EAAAC,GAAA,UAAA6B,EAAA9B,EAAAC,GAgYoE,GAhYpE,EAAAD,GAhOsFE,uBAAE,EAAA2B,EAAA,qBAgmBpB,EAAA7B,EAAA,OAAA+B,EAhmBkB7B,0BAAE,GAAFA,uBAAE,mBAAA6B,EAAAC,OAgmBrB,WAAAC,EAAAjC,EAAAC,GAClD,GADkD,EAAAD,GAhmBmBE,mBAAE,GAimBvE,EAAAF,EAAA,OAAA+B,EAjmBqE7B,0BAAE,GAAFA,8BAAE6B,EAAAC,OAimBvE,WAAAE,EAAAlC,EAAAC,GAC5B,GAD4B,EAAAD,IAjmBqEE,2BAAE,cAAFA,uBAAE,EAAA4B,EAAA,WAAF5B,CAgmBlB,EAAA+B,EAAA,yBAhmBkB/B,gEAkmBjG,EAAAF,EAAA,OAAAmC,EAlmBiGjC,wBAAE,GAAA6B,EAAF7B,2EAAE,OAAA6B,EAAAK,WAAAL,EAAAC,QAAF9B,CAgmBjE,WAAAiC,EAAiB,EArmB7D,MAAME,EACFC,cACIC,KAAKC,MAAO,CAChB,EAEJH,EAA2BI,UAAI,SAAAC,GAAA,WAAAA,GAAwFL,EAA0B,EACjJA,EAA2BM,UADkFzC,8BAAE,CAAA0C,KACJP,EAA0BQ,UAAA,gEAAAC,SAAA,EAAAC,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GADxBE,wBAAE,kBAAAD,EAAAuC,KACsB,IAwBrI,MAAMQ,EACFV,YAAYW,GACRV,KAAKU,OAASA,EAKdV,KAAK9B,MAAQ,OAIb8B,KAAKW,KAAO,IAIZX,KAAKY,UAAW,EAIhBZ,KAAKa,WAAa,IAAIC,cAC1B,CACAC,SAASC,GACL,GAAIhB,KAAKU,QAAUV,KAAKiB,QAAUjB,KAAKY,SAAU,CAC7CI,EAAME,iBACN,MAAMC,EAASnB,KAAKU,OAAOK,SAASf,KAAKiB,MAAOjB,KAAKoB,aACrDpB,KAAKa,WAAWQ,KAAKF,EACzB,CACJ,EAEJV,EAAcP,UAAI,SAAAC,GAAA,WAAAA,GAAwFM,GAtDG9C,8BAsD4B2D,SAAS,KAClJb,EAAcc,UAvD+F5D,8BAAE,CAAA0C,KAuDjBI,EAAaH,UAAA,gDAAAkB,OAAA,CAAAtD,MAAA,QAAAyC,KAAA,OAAAc,OAAA,SAAAC,IAAA,MAAAd,SAAA,WAAAK,MAAA,QAAAG,YAAA,eAAAO,QAAA,CAAAd,WAAA,cAAAe,mBAAA5E,EAAA6E,MAAA,EAAAC,KAAA,EAAAC,OAAA,yFAAAC,SAAA,SAAAvE,EAAAC,GAAA,EAAAD,IAvDEE,yDAAE,SAAFA,uBAAE,iBAAAsE,GAAA,OAgEpGvE,EAAAqD,SAAAkB,EAAgB,GAhEkFtE,yBAAE,GAAFA,4BAsExG,EAAAF,IAtEwGE,uBAAE,UAAFA,4BAAE,EAAAV,EAAA,UAAAS,EAAAQ,MAAAR,EAAAkD,WAAFjD,wBAAE,OAAAD,EAAAkD,SAAA,KAAAlD,EAAAiD,KAAFhD,2BAAE,SAAAD,EAAA+D,OAAF9D,CAAE,MAAAD,EAAAgE,IAAAhE,EAAAgE,IAAA,KAAF/D,CAAE,gBAAAD,EAAAkD,UAAA,EAAAsB,aAAA,CAsE7CC,UAA8FC,QAAOC,cAAA,IAmDvK,MAAMC,EACFvC,YAAYwC,EAAMC,GACdxC,KAAKuC,KAAOA,EACZvC,KAAKwC,QAAUA,EAKfxC,KAAK9B,MAAQ,OAIb8B,KAAK/B,UAAW,EAIhB+B,KAAKf,aAAc,EACnBe,KAAKyC,cAAgB,EACrBzC,KAAK0C,sBAAwB,EAC7B1C,KAAK1B,OAAS0B,KAAKuC,KAAKI,eAAe,gBACvC3C,KAAK5B,SAAW4B,KAAKuC,KAAKI,eAAe,iBAC7C,CAUA,gBAAIC,CAAaC,GACb,MAAMC,KAAoBC,SAAM/C,KAAKuC,KAAKS,YAAY,SAAUH,GAChE7C,KAAK1B,OAAO2E,SAASH,EAAkBI,QACvClD,KAAK5B,SAAS6E,SAASH,EAAkBK,SAC7C,CACAC,kBACIpD,KAAKqD,iBACT,CACA,kBAAIlF,GACA,MAAMmF,EAAOtD,KAAKwC,QAAQe,cAAcC,cAAc,cAChDC,EAAcC,SAASC,iBAAiBL,GAAMM,cAAe,IAAMF,SAASC,iBAAiBL,GAAMO,WAAY,IAC/G1F,EAAiB6B,KAAKyC,cAAgBgB,EAC5C,OAAKK,MAAM3F,KACP6B,KAAK0C,sBAAwBvE,GAE1B6B,KAAK0C,qBAChB,CACAW,kBACQrD,KAAK/B,SACL+B,KAAKyC,cAAgBzC,KAAK+D,cAAcR,cAAcS,wBAAwBC,OAG9EjE,KAAKyC,cAAgBzC,KAAKwC,QAAQe,cAAcC,cAAc,sCAAsCQ,wBAAwBC,MAEpI,CACAlG,UACIiC,KAAK/B,UAAY+B,KAAK/B,SACtB+B,KAAKqD,iBACT,EAEJf,EAAepC,UAAI,SAAAC,GAAA,WAAAA,GAAwFmC,GAtLE3E,8BAsL8BuG,QAtL9BvG,8BAsLoDA,cAAa,EAC9K2E,EAAef,UAvL8F5D,8BAAE,CAAA0C,KAuLhBiC,EAAchC,UAAA,kDAAA6D,UAAA,SAAA1G,EAAAC,GAvLE,GAuLF,EAAAD,GAvLAE,wBAAEP,EAAA,KAAAK,EAAA,KAAA2G,EAAFzG,2BAAEyG,EAAFzG,6BAAED,EAAAqG,cAAAK,EAAAC,MAAA,GAAA7C,OAAA,CAAAtD,MAAA,QAAAD,SAAA,WAAAgB,YAAA,cAAA2D,aAAA,gBAAAhB,mBAPpE,wIAOoEC,MAAA,EAAAC,KAAA,EAAAC,OAAA,4xBAAAC,SAAA,SAAAvE,EAAAC,GAAA,EAAAD,IAAFE,4BAAEN,GAAFM,uBAAE,EAAAC,EAAA,gBAAFD,CAmMpC,EAAAa,EAAA,aAnMoCb,CA+MpC,EAAAc,EAAA,yBA/MoCd,oCAmNjF,EAAAqB,EAAA,yBAnNiFrB,qCAuNvE,EAAAF,IAvNuEE,uBAAE,QAAAD,EAAAuB,aAAFtB,+CAAE,OAAAD,EAAAuB,aAwM1F,EAAAiD,aAAA,CAqCyCC,UAA8FA,OAAoGA,mBAAuKA,UAAqFmC,gBAA2LnC,aAAYE,cAAA,IA0EnsB,MAAMkC,EACFxE,cACIC,KAAKwE,WAAY,CACrB,EAEJD,EAAiCrE,UAAI,SAAAC,GAAA,WAAAA,GAAwFoE,EAAgC,EAC7JA,EAAiCnE,UA7T4EzC,8BAAE,CAAA0C,KA6TEkE,EAAgCjE,UAAA,gDAAAC,SAAA,EAAAC,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GA7TpCE,wBAAE,oCAAAD,EAAA8G,UA6TkC,IAWjJ,MAAMC,EACF1E,cACIC,KAAK0E,WAAY,CACrB,EAEJD,EAAiCvE,UAAI,SAAAC,GAAA,WAAAA,GAAwFsE,EAAgC,EAC7JA,EAAiCrE,UA9U4EzC,8BAAE,CAAA0C,KA8UEoE,EAAgCnE,UAAA,gDAAAC,SAAA,EAAAC,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GA9UpCE,wBAAE,oCAAAD,EAAAgH,UA8UkC,IAWjJ,MAAMC,EACF5E,YAAYwC,GACRvC,KAAKuC,KAAOA,EAKZvC,KAAK9B,MAAQ,OAIb8B,KAAK4E,GAAK,QAAQD,EAAcE,YAIhC7E,KAAK8E,OAAS,IAAIhE,eAIlBd,KAAKY,UAAW,EAIhBZ,KAAK+E,KAAO,qBAKZ/E,KAAKgF,UAAW,EAGhBhF,KAAKiF,UAAY,KACjBN,EAAcE,WAClB,CAKA,YAAIK,CAASrC,GAGT7C,KAAKiF,YAAYpC,GAAe,KAC5B7C,KAAKmF,QACLnF,KAAKmF,MAAM5B,cAAc6B,QAAUpF,KAAKiF,UAEhD,CACA,YAAIC,GACA,QAAOlF,KAAKmF,OAAQnF,KAAKmF,MAAM5B,cAAc6B,OACjD,CACAhC,kBACQpD,KAAKmF,OACLE,WAAW,KACPrF,KAAKmF,MAAM5B,cAAc6B,QAAUpF,KAAKiF,WAGpD,CACAK,cAActE,IACQ,UAAdA,EAAMuE,KAAiC,aAAdvE,EAAMuE,KAAoC,MAAdvE,EAAMuE,OAC3DvF,KAAKkF,UAAYlF,KAAKkF,SACtBlF,KAAK8E,OAAOzD,KAAKL,GAEzB,CACAwE,SAASxE,GACLhB,KAAK8E,OAAOzD,KAAKL,EACrB,EAEJ2D,EAAcE,UAAY,EAC1BF,EAAczE,UAAI,SAAAC,GAAA,WAAAA,GAAwFwE,GA5ZGhH,8BA4Z4BuG,QAAS,EAClJS,EAAcpD,UA7Z+F5D,8BAAE,CAAA0C,KA6ZjBsE,EAAarE,UAAA,gDAAA6D,UAAA,SAAA1G,EAAAC,GA7ZI,GA6ZJ,EAAAD,GA7ZEE,wBAAEuB,EAAA,KAAAzB,EAAA,KAAA2G,EAAFzG,2BAAEyG,EAAFzG,6BAAED,EAAAyH,MAAAf,EAAAC,MAAA,GAAA7D,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GAAFE,uBAAE,mBAAAsE,GAAA,OA6ZjBvE,EAAA4H,cAAArD,EAAqB,EAAR,EAAAT,OAAA,CAAAtD,MAAA,QAAA0G,GAAA,KAAAM,SAAA,WAAArC,MAAA,QAAAjC,SAAA,YAAAe,QAAA,CAAAmD,OAAA,UAAAlD,mBAAA5E,EAAA6E,MAAA,EAAAC,KAAA,GAAAC,OAAA,0YAAAC,SAAA,SAAAvE,EAAAC,GAAA,KAAAD,EAAA,OAAAI,EA7ZEF,wFAAE,eAAFA,uBAAE,kBAAAsE,GAAFtE,iCAAEE,GAAFF,wBAuahGD,EAAA8H,SAAAvD,GAAgB,GAvagFtE,sDAAE,aAAFA,mBAAE,WAAFA,2BAAE,WAAFA,wDAAE,WAAFA,sBAAE,YAAFA,sFAAE,WAAFA,yBAAE,GAAFA,4BA0bnG,GAAAF,IA1bmGE,uBAAE,KAAAD,EAAAkH,GAAFjH,CAkajG,WAAAD,EAAAkD,SAlaiGjD,CAmarF,OAAAD,EAAAsH,SAAA,mBAnaqFrH,CAoajE,QAAAD,EAAAmF,MApaiElF,CAqa3F,OAAAD,EAAAqH,MAra2FpH,wBAAE,WAAAD,EAAAkD,SAAA,QAAFjD,sBAAE,GAAFA,uBAAE,MAAAD,EAAAkH,GAAFjH,CA0ahG,UA1agGA,4BAAE,GAAAwB,EAAAzB,EAAAwH,SAAA,UAAAxH,EAAAQ,MAAAR,EAAAkD,WAAFjD,wBAAE,aAAFA,wBAAE,IAAAD,EAAA6E,KAAAkD,IAAA,kBAAAvD,aAAA,CA2bjDC,UAAyFA,aAAYE,cAAA,IAkEnK,MAAMqD,EACF3F,cAIIC,KAAK+E,KAAO,cAAcW,EAAUC,iBAIpC3F,KAAKgF,UAAW,EAahBhF,KAAKkF,SAAW,IAAIpE,eACpBd,KAAK4F,gBAAiB,EACtB5F,KAAK6F,aAAe,IAAIC,UACxB9F,KAAK+F,kBAAoB,IAAID,UAC7B9F,KAAKwF,SAAYQ,MACjBhG,KAAKiG,UAAY,OACjBP,EAAUC,gBACd,CACAO,qBACI,MAAMC,EAAcA,KAEhBnG,KAAK+F,kBAAkBK,OAGvBf,WAAW,KACPrF,KAAKqG,eAAeC,QAAQhD,IACxBA,EAAKyB,KAAO/E,KAAK+E,KACjBzB,EAAKwB,OACAyB,QAAKC,aAAUxG,KAAK+F,oBACpBU,UAAU,KACXzG,KAAKkF,SAAS7D,KAAK,CACfwB,MAAOS,EAAKT,MACZqC,SAAU5B,EAAK4B,SACfH,KAAM/E,KAAK+E,OAEf/E,KAAKwF,SAASlC,EAAKT,MAAK,GAE5BS,EAAK0B,SAAWhF,KAAKgF,UACxB,EACJ,EAELmB,IACAnG,KAAKqG,eAAeK,QACfH,QAAKC,aAAUxG,KAAK6F,eACpBY,UAAUT,GAAKG,IACxB,CACAQ,cACI3G,KAAK6F,aAAaO,OAClBpG,KAAK6F,aAAae,WAElB5G,KAAK+F,kBAAkBK,OACvBpG,KAAK+F,kBAAkBa,UAC3B,CACAC,WAAWhE,GACF7C,KAAKqG,gBAGVrG,KAAKqG,eAAeC,QAAQhD,IACpBA,EAAKT,QAAUA,EACfS,EAAK4B,UAAW,EAGhB5B,EAAK4B,UAAW,GAG5B,CACA4B,iBAAiBC,GACb/G,KAAKwF,SAAWuB,CACpB,CACAC,kBAAkBD,GACd/G,KAAKiG,UAAYc,CACrB,CACAlH,WAAWgD,GACP,OAAOA,aAAiBoE,aAC5B,EAEJvB,EAAUC,eAAiB,EAC3BD,EAAUxF,UAAI,SAAAC,GAAA,WAAAA,GAAwFuF,EAAS,EAC/GA,EAAUnE,UAvlBmG5D,8BAAE,CAAA0C,KAulBrBqF,EAASpF,UAAA,wCAAA4G,eAAA,SAAAzJ,EAAAC,EAAAyJ,GAMxB,GANwB,EAAA1J,GAvlBUE,2BAAEwJ,EA6lBjDxC,EAAa,KAAAlH,EAAA,KAAA2G,EA7lBkCzG,2BAAEyG,EAAFzG,6BAAED,EAAA2I,eAAAjC,EAAA,GAAA7D,SAAA,EAAAC,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GAAFE,wBAAE,kBAAAD,EAAAkI,eAulBZ,EAAApE,OAAA,CAAAuD,KAAA,OAAAC,SAAA,WAAAvF,OAAA,UAAAkC,QAAA,CAAAuD,SAAA,YAAAkC,SAAA,CAvlBUzJ,+BAulB8N,CACnU,CACI0J,QAASC,oBACTC,YAAa7B,EACb8B,OAAO,MAEd5F,mBA7XkB,0CA6XlBC,MAAA,EAAAC,KAAA,EAAAC,OAAA,mHAAAC,SAAA,SAAAvE,EAAAC,GAAA,EAAAD,IA7lBwGE,4BAAE0B,GAAF1B,2BAAE,cAAFA,uBAAE,EAAAgC,EAAA,gBAAFhC,yBAAE,GAAFA,4BAomBhG,EAAAF,IApmBgGE,+CAAE,OAAAD,EAAA+B,QA+lBvF,EAAAyC,aAAA,CAKkDC,OAAoGA,oBAAmBE,cAAA,IAoDjM,MAAMoF,EACF1H,cACIC,KAAK0H,WAAY,EAKjB1H,KAAK9B,MAAQ,MACjB,CACA,qBAAIyJ,GACA,MAAsB,UAAf3H,KAAK9B,KAChB,EAEJuJ,EAAKvH,UAAI,SAAAC,GAAA,WAAAA,GAAwFsH,EAAI,EACrGA,EAAKlG,UAtqBwG5D,8BAAE,CAAA0C,KAsqB1BoH,EAAInH,UAAA,4BAAAC,SAAA,EAAAC,aAAA,SAAA/C,EAAAC,GAAA,EAAAD,GAtqBoBE,wBAAE,YAAAD,EAAAgK,UAAF/J,CAsqBpB,mBAAAD,EAAAiK,kBAAA,EAAAnG,OAAA,CAAAtD,MAAA,SAAA0D,mBAAA5E,EAAA6E,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAvE,EAAAC,GAAA,EAAAD,IAtqBoBE,uDAAE,GAsqB6M,EAAA0E,cAAA,IAiB5T,MAAMuF,GAENA,EAAY1H,UAAI,SAAAC,GAAA,WAAAA,GAAwFyH,EAAW,EACnHA,EAAYC,UA1rBiGlK,6BAAE,CAAA0C,KA0rBNuH,IAkBzGA,EAAYE,UA5sBiGnK,6BAAE,CAAAoK,QAAA,CA4sBiBC,eACxHC,aACAC,aACAC","names":["_c0","_c1","a0","a1","_c2","_c3","_c5","_c6","ExpandableTile_button_0_ng_container_2_Template","rf","ctx","i0","ExpandableTile_button_0_Template","_r1","ctx_r1","onClick","expandableTileContent_r3","expanded","theme","expandedHeight","collapse","subject","expand","ExpandableTile_div_1_ng_container_2_Template","ExpandableTile_div_1_Template","ExpandableTile_ng_template_2_Template","ExpandableTile_ng_template_4_div_4_ng_container_1_Template","ExpandableTile_ng_template_4_div_4_Template","chevronIcon_r4","ExpandableTile_ng_template_4_button_5_ng_container_2_Template","ExpandableTile_ng_template_4_button_5_Template","_r5","ExpandableTile_ng_template_4_Template","interactive","_c7","_c8","a2","_c9","TileGroup_legend_1_1_ng_template_0_Template","TileGroup_legend_1_1_Template","ctx_r0","legend","TileGroup_legend_1_ng_template_2_Template","TileGroup_legend_1_Template","legendLabel_r2","isTemplate","ClickableTileIconDirective","constructor","this","icon","ɵfac","__ngFactoryType__","ɵdir","type","selectors","hostVars","hostBindings","ClickableTile","router","href","disabled","navigation","EventEmitter","navigate","event","route","preventDefault","status","routeExtras","emit","i1","ɵcmp","inputs","target","rel","outputs","ngContentSelectors","decls","vars","consts","template","$event","dependencies","i2","i3","encapsulation","ExpandableTile","i18n","element","tileMaxHeight","currentExpandedHeight","getOverridable","translations","value","valueWithDefaults","merge","getMultiple","override","EXPAND","COLLAPSE","ngAfterViewInit","updateMaxHeight","tile","nativeElement","querySelector","tilePadding","parseInt","getComputedStyle","paddingBottom","paddingTop","isNaN","tileContainer","getBoundingClientRect","height","i1$1","viewQuery","_t","first","i3$1","ExpandableTileAboveFoldDirective","aboveFold","ExpandableTileBelowFoldDirective","belowFold","SelectionTile","id","tileCount","change","name","multiple","_selected","selected","input","checked","setTimeout","keyboardInput","key","onChange","get","TileGroup","tileGroupCount","tileGroupClass","unsubscribe$","Subject","unsubscribeTiles$","_","onTouched","ngAfterContentInit","updateTiles","next","selectionTiles","forEach","pipe","takeUntil","subscribe","changes","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","TemplateRef","contentQueries","dirIndex","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","Tile","tileClass","lightThemeEnabled","TilesModule","ɵmod","ɵinj","imports","CommonModule","I18nModule","IconModule","LinkModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-tiles.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, HostBinding, EventEmitter, Component, Optional, Input, Output, ViewChild, HostListener, TemplateRef, ContentChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'carbon-components-angular/link';\nimport { LinkModule } from 'carbon-components-angular/link';\nimport { merge } from 'carbon-components-angular/utils';\nimport * as i1$1 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport * as i3$1 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nclass ClickableTileIconDirective {\n    constructor() {\n        this.icon = true;\n    }\n}\nClickableTileIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ClickableTileIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nClickableTileIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ClickableTileIconDirective, selector: \"[cdsClickableTileIcon], [ibmClickableTileIcon]\", host: { properties: { \"class.cds--tile--icon\": \"this.icon\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ClickableTileIconDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsClickableTileIcon], [ibmClickableTileIcon]\"\n                }]\n        }], propDecorators: { icon: [{\n                type: HostBinding,\n                args: [\"class.cds--tile--icon\"]\n            }] } });\n\n/**\n * Build application's clickable tiles using this component. Get started with importing the module:\n *\n * ```typescript\n * import { TilesModule } from 'carbon-components-angular';\n * ```\n *\n * ```html\n * <cds-clickable-tile>\n * \t\ttile content\n * </cds-clickable-tile>\n * ```\n */\nclass ClickableTile {\n    constructor(router) {\n        this.router = router;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * Set to `\"light\"` to apply the light style\n         */\n        this.theme = \"dark\";\n        /**\n         * Sets the `href` attribute on the `cds-clickable-tile` element.\n         */\n        this.href = \"#\";\n        /**\n         * Set to `true` to disable the clickable tile.\n         */\n        this.disabled = false;\n        /**\n         * Emits the navigation status promise when the link is activated\n         */\n        this.navigation = new EventEmitter();\n    }\n    navigate(event) {\n        if (this.router && this.route && !this.disabled) {\n            event.preventDefault();\n            const status = this.router.navigate(this.route, this.routeExtras);\n            this.navigation.emit(status);\n        }\n    }\n}\nClickableTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ClickableTile, deps: [{ token: i1.Router, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nClickableTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ClickableTile, selector: \"cds-clickable-tile, ibm-clickable-tile\", inputs: { theme: \"theme\", href: \"href\", target: \"target\", rel: \"rel\", disabled: \"disabled\", route: \"route\", routeExtras: \"routeExtras\" }, outputs: { navigation: \"navigation\" }, ngImport: i0, template: `\n\t<a\n\t\tcdsLink\n\t\tclass=\"cds--tile cds--tile--clickable\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--tile--light': theme === 'light',\n\t\t\t'cds--tile--disabled cds--link--disabled' : disabled\n\t\t}\"\n\t\ttabindex=\"0\"\n\t\t(click)=\"navigate($event)\"\n\t\t[attr.href]=\"disabled ? null : href\"\n\t\t[attr.target]=\"target\"\n\t\t[attr.rel]=\"rel ? rel : null\"\n\t\t[attr.aria-disabled]=\"disabled\">\n\t\t<ng-content></ng-content>\n\t</a>`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.Link, selector: \"[cdsLink], [ibmLink]\", inputs: [\"inline\", \"disabled\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ClickableTile, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-clickable-tile, ibm-clickable-tile\",\n                    template: `\n\t<a\n\t\tcdsLink\n\t\tclass=\"cds--tile cds--tile--clickable\"\n\t\t[ngClass]=\"{\n\t\t\t'cds--tile--light': theme === 'light',\n\t\t\t'cds--tile--disabled cds--link--disabled' : disabled\n\t\t}\"\n\t\ttabindex=\"0\"\n\t\t(click)=\"navigate($event)\"\n\t\t[attr.href]=\"disabled ? null : href\"\n\t\t[attr.target]=\"target\"\n\t\t[attr.rel]=\"rel ? rel : null\"\n\t\t[attr.aria-disabled]=\"disabled\">\n\t\t<ng-content></ng-content>\n\t</a>`\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Router, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { theme: [{\n                type: Input\n            }], href: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], rel: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], route: [{\n                type: Input\n            }], routeExtras: [{\n                type: Input\n            }], navigation: [{\n                type: Output\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { TilesModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-tiles-expandable--basic)\n */\nclass ExpandableTile {\n    constructor(i18n, element) {\n        this.i18n = i18n;\n        this.element = element;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * Set to `\"light\"` to apply the light style\n         */\n        this.theme = \"dark\";\n        /**\n         * Controls the expanded state\n         */\n        this.expanded = false;\n        /**\n         * Controls the interactive state\n         */\n        this.interactive = false;\n        this.tileMaxHeight = 0;\n        this.currentExpandedHeight = 0;\n        this.expand = this.i18n.getOverridable(\"TILES.EXPAND\");\n        this.collapse = this.i18n.getOverridable(\"TILES.COLLAPSE\");\n    }\n    /**\n     * Expects an object that contains some or all of:\n     * ```\n     * {\n     *\t\t\"EXPAND\": \"Expand\",\n     *\t\t\"COLLAPSE\": \"Collapse\",\n     * }\n     * ```\n     */\n    set translations(value) {\n        const valueWithDefaults = merge(this.i18n.getMultiple(\"TILES\"), value);\n        this.expand.override(valueWithDefaults.EXPAND);\n        this.collapse.override(valueWithDefaults.COLLAPSE);\n    }\n    ngAfterViewInit() {\n        this.updateMaxHeight();\n    }\n    get expandedHeight() {\n        const tile = this.element.nativeElement.querySelector(\".cds--tile\");\n        const tilePadding = parseInt(getComputedStyle(tile).paddingBottom, 10) + parseInt(getComputedStyle(tile).paddingTop, 10);\n        const expandedHeight = this.tileMaxHeight + tilePadding;\n        if (!isNaN(expandedHeight)) {\n            this.currentExpandedHeight = expandedHeight;\n        }\n        return this.currentExpandedHeight;\n    }\n    updateMaxHeight() {\n        if (this.expanded) {\n            this.tileMaxHeight = this.tileContainer.nativeElement.getBoundingClientRect().height;\n        }\n        else {\n            this.tileMaxHeight = this.element.nativeElement.querySelector(\".cds--tile-content__above-the-fold\").getBoundingClientRect().height;\n        }\n    }\n    onClick() {\n        this.expanded = !this.expanded;\n        this.updateMaxHeight();\n    }\n}\nExpandableTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTile, deps: [{ token: i1$1.I18n }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nExpandableTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ExpandableTile, selector: \"cds-expandable-tile, ibm-expandable-tile\", inputs: { theme: \"theme\", expanded: \"expanded\", interactive: \"interactive\", translations: \"translations\" }, viewQueries: [{ propertyName: \"tileContainer\", first: true, predicate: [\"container\"], descendants: true }], ngImport: i0, template: `\n\t\t<button\n\t\t\t*ngIf=\"!interactive\"\n\t\t\tclass=\"cds--tile cds--tile--expandable\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-expanded' : expanded,\n\t\t\t\t'cds--tile--light': theme === 'light'\n\t\t\t}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"onClick()\"\n\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t[attr.title]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"expandableTileContent\"></ng-container>\n\t\t</button>\n\n\t\t<div\n\t\t\t*ngIf=\"interactive\"\n\t\t\tclass=\"cds--tile cds--tile--expandable cds--tile--expandable--interactive\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-expanded' : expanded,\n\t\t\t\t'cds--tile--light': theme === 'light'\n\t\t\t}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\t[attr.title]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t<ng-container *ngTemplateOutlet=\"expandableTileContent\"></ng-container>\n\t\t</div>\n\n\t\t<ng-template #chevronIcon>\n\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\"></svg>\n\t\t</ng-template>\n\n\t\t<ng-template #expandableTileContent>\n\t\t\t<div #container>\n\t\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t\t<ng-content select=\"[cdsAboveFold],[ibmAboveFold],.cds--tile-content__above-the-fold\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"!interactive\" class=\"cds--tile__chevron\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"chevronIcon\"></ng-container>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\t*ngIf=\"interactive\"\n\t\t\t\t\tclass=\"cds--tile__chevron cds--tile__chevron--interactive\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t(click)=\"onClick()\"\n\t\t\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t\t\t[attr.aria-label]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"chevronIcon\"></ng-container>\n\t\t\t\t</button>\n\t\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t\t<ng-content select=\"[cdsBelowFold],[ibmBelowFold],.cds--tile-content__below-the-fold\"></ng-content>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-template>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i3$1.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTile, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-expandable-tile, ibm-expandable-tile\",\n                    template: `\n\t\t<button\n\t\t\t*ngIf=\"!interactive\"\n\t\t\tclass=\"cds--tile cds--tile--expandable\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-expanded' : expanded,\n\t\t\t\t'cds--tile--light': theme === 'light'\n\t\t\t}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"onClick()\"\n\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t[attr.title]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"expandableTileContent\"></ng-container>\n\t\t</button>\n\n\t\t<div\n\t\t\t*ngIf=\"interactive\"\n\t\t\tclass=\"cds--tile cds--tile--expandable cds--tile--expandable--interactive\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-expanded' : expanded,\n\t\t\t\t'cds--tile--light': theme === 'light'\n\t\t\t}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\t[attr.title]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t<ng-container *ngTemplateOutlet=\"expandableTileContent\"></ng-container>\n\t\t</div>\n\n\t\t<ng-template #chevronIcon>\n\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\"></svg>\n\t\t</ng-template>\n\n\t\t<ng-template #expandableTileContent>\n\t\t\t<div #container>\n\t\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t\t<ng-content select=\"[cdsAboveFold],[ibmAboveFold],.cds--tile-content__above-the-fold\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"!interactive\" class=\"cds--tile__chevron\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"chevronIcon\"></ng-container>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\t*ngIf=\"interactive\"\n\t\t\t\t\tclass=\"cds--tile__chevron cds--tile__chevron--interactive\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t(click)=\"onClick()\"\n\t\t\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t\t\t[attr.aria-label]=\"(expanded ? collapse.subject : expand.subject) | async\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"chevronIcon\"></ng-container>\n\t\t\t\t</button>\n\t\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t\t<ng-content select=\"[cdsBelowFold],[ibmBelowFold],.cds--tile-content__below-the-fold\"></ng-content>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-template>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.I18n }, { type: i0.ElementRef }]; }, propDecorators: { theme: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], interactive: [{\n                type: Input\n            }], translations: [{\n                type: Input\n            }], tileContainer: [{\n                type: ViewChild,\n                args: [\"container\"]\n            }] } });\n\nclass ExpandableTileAboveFoldDirective {\n    constructor() {\n        this.aboveFold = true;\n    }\n}\nExpandableTileAboveFoldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTileAboveFoldDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nExpandableTileAboveFoldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ExpandableTileAboveFoldDirective, selector: \"[cdsAboveFold], [ibmAboveFold]\", host: { properties: { \"class.cds--tile-content__above-the-fold\": \"this.aboveFold\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTileAboveFoldDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsAboveFold], [ibmAboveFold]\"\n                }]\n        }], propDecorators: { aboveFold: [{\n                type: HostBinding,\n                args: [\"class.cds--tile-content__above-the-fold\"]\n            }] } });\n\nclass ExpandableTileBelowFoldDirective {\n    constructor() {\n        this.belowFold = true;\n    }\n}\nExpandableTileBelowFoldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTileBelowFoldDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nExpandableTileBelowFoldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ExpandableTileBelowFoldDirective, selector: \"[cdsBelowFold], [ibmBelowFold]\", host: { properties: { \"class.cds--tile-content__below-the-fold\": \"this.belowFold\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExpandableTileBelowFoldDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsBelowFold], [ibmBelowFold]\"\n                }]\n        }], propDecorators: { belowFold: [{\n                type: HostBinding,\n                args: [\"class.cds--tile-content__below-the-fold\"]\n            }] } });\n\nclass SelectionTile {\n    constructor(i18n) {\n        this.i18n = i18n;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * Set to `\"light\"` to apply the light style\n         */\n        this.theme = \"dark\";\n        /**\n         * The unique id for the input.\n         */\n        this.id = `tile-${SelectionTile.tileCount}`;\n        /**\n         * Internal event used to notify the containing `TileGroup` of changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Set to `true` to disable the selection tile.\n         */\n        this.disabled = false;\n        /**\n         * Set by the containing `TileGroup`. Used for the `name` property on the input.\n         */\n        this.name = \"tile-group-unbound\";\n        /**\n         * Defines whether or not the `SelectionTile` supports selecting multiple tiles as opposed to single\n         * tile selection.\n         */\n        this.multiple = true; // Set to true because of the way tile group sets it up.\n        // If an initial selected value is set before input exists, we save\n        // the value and check again when input exists in `AfterViewInit`.\n        this._selected = null;\n        SelectionTile.tileCount++;\n    }\n    /**\n     * Updating the state of the input to match the state of the parameter passed in.\n     * Set to `true` if this tile should be selected.\n     */\n    set selected(value) {\n        // If an initial selected value is set before input exists, we save\n        // the value and check again when input exists in `AfterViewInit`.\n        this._selected = value ? true : null;\n        if (this.input) {\n            this.input.nativeElement.checked = this._selected;\n        }\n    }\n    get selected() {\n        return this.input ? this.input.nativeElement.checked : false;\n    }\n    ngAfterViewInit() {\n        if (this.input) {\n            setTimeout(() => {\n                this.input.nativeElement.checked = this._selected;\n            });\n        }\n    }\n    keyboardInput(event) {\n        if (event.key === \"Enter\" || event.key === \"Spacebar\" || event.key === \" \") {\n            this.selected = !this.selected;\n            this.change.emit(event);\n        }\n    }\n    onChange(event) {\n        this.change.emit(event);\n    }\n}\nSelectionTile.tileCount = 0;\nSelectionTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SelectionTile, deps: [{ token: i1$1.I18n }], target: i0.ɵɵFactoryTarget.Component });\nSelectionTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: SelectionTile, selector: \"cds-selection-tile, ibm-selection-tile\", inputs: { theme: \"theme\", id: \"id\", selected: \"selected\", value: \"value\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { listeners: { \"keydown\": \"keyboardInput($event)\" } }, viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true, static: true }], ngImport: i0, template: `\n\t\t<input\n\t\t\t#input\n\t\t\t[attr.tabindex]=\"disabled ? null : 0\"\n\t\t\tclass=\"cds--tile-input\"\n\t\t\t[id]=\"id\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[type]=\"(multiple ? 'checkbox': 'radio')\"\n\t\t\t[value]=\"value\"\n\t\t\t[name]=\"name\"\n\t\t\t(change)=\"onChange($event)\"/>\n\t\t<label\n\t\t\tclass=\"cds--tile cds--tile--selectable\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-selected' : selected,\n\t\t\t\t'cds--tile--light': theme === 'light',\n\t\t\t\t'cds--tile--disabled' : disabled\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"i18n.get('TILES.TILE') | async\">\n\t\t\t<div class=\"cds--tile__checkmark\">\n\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n\t\t\t\t\t<path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm3.646-10.854L6.75 10.043 4.354 7.646l-.708.708 3.104 3.103 5.604-5.603-.708-.708z\"\n\t\t\t\t\t\tfill-rule=\"evenodd\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</label>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SelectionTile, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-selection-tile, ibm-selection-tile\",\n                    template: `\n\t\t<input\n\t\t\t#input\n\t\t\t[attr.tabindex]=\"disabled ? null : 0\"\n\t\t\tclass=\"cds--tile-input\"\n\t\t\t[id]=\"id\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[type]=\"(multiple ? 'checkbox': 'radio')\"\n\t\t\t[value]=\"value\"\n\t\t\t[name]=\"name\"\n\t\t\t(change)=\"onChange($event)\"/>\n\t\t<label\n\t\t\tclass=\"cds--tile cds--tile--selectable\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--tile--is-selected' : selected,\n\t\t\t\t'cds--tile--light': theme === 'light',\n\t\t\t\t'cds--tile--disabled' : disabled\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"i18n.get('TILES.TILE') | async\">\n\t\t\t<div class=\"cds--tile__checkmark\">\n\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n\t\t\t\t\t<path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm3.646-10.854L6.75 10.043 4.354 7.646l-.708.708 3.104 3.103 5.604-5.603-.708-.708z\"\n\t\t\t\t\t\tfill-rule=\"evenodd\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"cds--tile-content\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</label>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.I18n }]; }, propDecorators: { theme: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], disabled: [{\n                type: Input\n            }], input: [{\n                type: ViewChild,\n                args: [\"input\", { static: true }]\n            }], keyboardInput: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { TilesModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-tiles-grouped--selectable)\n */\nclass TileGroup {\n    constructor() {\n        /**\n         * The tile group `name`\n         */\n        this.name = `tile-group-${TileGroup.tileGroupCount}`;\n        /**\n         * Set to `true` to support multiple tile selection\n         */\n        this.multiple = false;\n        /**\n         * Emits an event when the tile selection changes.\n         *\n         * Emits an object that looks like:\n         * ```javascript\n         * {\n         * \tvalue: \"something\",\n         * \tselected: true,\n         * \tname: \"tile-group-1\"\n         * }\n         * ```\n         */\n        this.selected = new EventEmitter();\n        this.tileGroupClass = true;\n        this.unsubscribe$ = new Subject();\n        this.unsubscribeTiles$ = new Subject();\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        TileGroup.tileGroupCount++;\n    }\n    ngAfterContentInit() {\n        const updateTiles = () => {\n            // remove old subscriptions\n            this.unsubscribeTiles$.next();\n            // react to changes\n            // setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => {\n                this.selectionTiles.forEach(tile => {\n                    tile.name = this.name;\n                    tile.change\n                        .pipe(takeUntil(this.unsubscribeTiles$))\n                        .subscribe(() => {\n                        this.selected.emit({\n                            value: tile.value,\n                            selected: tile.selected,\n                            name: this.name\n                        });\n                        this.onChange(tile.value);\n                    });\n                    tile.multiple = this.multiple;\n                });\n            });\n        };\n        updateTiles();\n        this.selectionTiles.changes\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(_ => updateTiles());\n    }\n    ngOnDestroy() {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n        // takes care of tile subscriptions when tile-group dies\n        this.unsubscribeTiles$.next();\n        this.unsubscribeTiles$.complete();\n    }\n    writeValue(value) {\n        if (!this.selectionTiles) {\n            return;\n        }\n        this.selectionTiles.forEach(tile => {\n            if (tile.value === value) {\n                tile.selected = true;\n            }\n            else {\n                tile.selected = false;\n            }\n        });\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n}\nTileGroup.tileGroupCount = 0;\nTileGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TileGroup, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTileGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: TileGroup, selector: \"cds-tile-group, ibm-tile-group\", inputs: { name: \"name\", multiple: \"multiple\", legend: \"legend\" }, outputs: { selected: \"selected\" }, host: { properties: { \"class.cds--tile-group\": \"this.tileGroupClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TileGroup,\n            multi: true\n        }\n    ], queries: [{ propertyName: \"selectionTiles\", predicate: SelectionTile }], ngImport: i0, template: `\n\t\t<fieldset>\n\t\t\t<legend *ngIf=\"legend\" class=\"cds--label\">\n\t\t\t\t<ng-template *ngIf=\"isTemplate(legend); else legendLabel;\" [ngTemplateOutlet]=\"legend\"></ng-template>\n\t\t\t\t<ng-template #legendLabel>{{legend}}</ng-template>\n\t\t\t</legend>\n\t\t\t<ng-content select=\"ibm-selection-tile,cds-selection-tile\"></ng-content>\n\t\t</fieldset>`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TileGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-tile-group, ibm-tile-group\",\n                    template: `\n\t\t<fieldset>\n\t\t\t<legend *ngIf=\"legend\" class=\"cds--label\">\n\t\t\t\t<ng-template *ngIf=\"isTemplate(legend); else legendLabel;\" [ngTemplateOutlet]=\"legend\"></ng-template>\n\t\t\t\t<ng-template #legendLabel>{{legend}}</ng-template>\n\t\t\t</legend>\n\t\t\t<ng-content select=\"ibm-selection-tile,cds-selection-tile\"></ng-content>\n\t\t</fieldset>`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: TileGroup,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { name: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], tileGroupClass: [{\n                type: HostBinding,\n                args: [\"class.cds--tile-group\"]\n            }], selectionTiles: [{\n                type: ContentChildren,\n                args: [SelectionTile]\n            }] } });\n\n/**\n * Build application's tiles using this component. Get started with importing the module:\n *\n * ```typescript\n * import { TilesModule } from 'carbon-components-angular';\n * ```\n *\n * ```html\n * <cds-tile>\n * \t\ttile content\n * </cds-tile>\n * ```\n *\n * [See demo](../../?path=/story/components-tiles--basic)\n */\nclass Tile {\n    constructor() {\n        this.tileClass = true;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         * Set to `\"light\"` to apply the light style\n         */\n        this.theme = \"dark\";\n    }\n    get lightThemeEnabled() {\n        return this.theme === \"light\";\n    }\n}\nTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Tile, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Tile, selector: \"cds-tile, ibm-tile\", inputs: { theme: \"theme\" }, host: { properties: { \"class.cds--tile\": \"this.tileClass\", \"class.cds--tile--light\": \"this.lightThemeEnabled\" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Tile, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-tile, ibm-tile\",\n                    template: `<ng-content></ng-content>`\n                }]\n        }], propDecorators: { tileClass: [{\n                type: HostBinding,\n                args: [\"class.cds--tile\"]\n            }], lightThemeEnabled: [{\n                type: HostBinding,\n                args: [\"class.cds--tile--light\"]\n            }], theme: [{\n                type: Input\n            }] } });\n\nclass TilesModule {\n}\nTilesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TilesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTilesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: TilesModule, declarations: [Tile,\n        ClickableTile,\n        ClickableTileIconDirective,\n        ExpandableTileAboveFoldDirective,\n        ExpandableTileBelowFoldDirective,\n        ExpandableTile,\n        SelectionTile,\n        TileGroup], imports: [CommonModule,\n        I18nModule,\n        IconModule,\n        LinkModule], exports: [Tile,\n        ClickableTile,\n        ClickableTileIconDirective,\n        ExpandableTileAboveFoldDirective,\n        ExpandableTileBelowFoldDirective,\n        ExpandableTile,\n        SelectionTile,\n        TileGroup] });\nTilesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TilesModule, imports: [CommonModule,\n        I18nModule,\n        IconModule,\n        LinkModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: TilesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        Tile,\n                        ClickableTile,\n                        ClickableTileIconDirective,\n                        ExpandableTileAboveFoldDirective,\n                        ExpandableTileBelowFoldDirective,\n                        ExpandableTile,\n                        SelectionTile,\n                        TileGroup\n                    ],\n                    exports: [\n                        Tile,\n                        ClickableTile,\n                        ClickableTileIconDirective,\n                        ExpandableTileAboveFoldDirective,\n                        ExpandableTileBelowFoldDirective,\n                        ExpandableTile,\n                        SelectionTile,\n                        TileGroup\n                    ],\n                    imports: [\n                        CommonModule,\n                        I18nModule,\n                        IconModule,\n                        LinkModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClickableTile, ClickableTileIconDirective, ExpandableTile, ExpandableTileAboveFoldDirective, ExpandableTileBelowFoldDirective, SelectionTile, Tile, TileGroup, TilesModule };\n"],"x_google_ignoreList":[0]}