{"version":3,"file":"default-node_modules_ngx-formly_core_fesm2020_ngx-formly-core_mjs.js","mappings":"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","names":["_c0","FormlyField_ng_template_0_Template","rf","ctx","FormlyGroup_formly_field_0_Template","i0","f_r1","$implicit","_c2","getFieldId","formId","field","index","id","type","template","Type","prototype","constructor","name","key","join","hasKey","isNil","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","value","paths","length","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defaultValue","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","push","o","_observers","target","onChange","state","set","previousValue","changeFn","setValue","filter","getField","f","fieldGroup","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","FORMLY_CONFIG","InjectionToken","FormlyConfig","this","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","message","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵfac","__ngFactoryType__","ɵprov","token","factory","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","core","_build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","checkExpressions","detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","unregisterControl","emitEvent","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","props","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","i2","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","className","removeAttribute","setAttribute","hide","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","pipe","distinctUntilChanged","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","parsers","parserFn","next","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","setField","fields","checkExpressionChange","switchMap","onStable","asObservable","take","runGuarded","immutable","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attributes","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","to","formState","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","property","of","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","fieldArray","add","initialModel","remove","ɵFieldArrayType_BaseFactory","FieldWrapper","_staticContent","content","fieldComponent","ɵFieldWrapper_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","safeHtml","bypassSecurityTrustHtml","i1","FieldExpressionExtension","hidden","_hiddenFieldsForCheck","hideExpression","expr","parseExpressions","evalExpr","Observable","tap","expressions","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLengthResult","minLength","minLengthKey","minlength","l","maxLengthResult","maxLength","maxLengthKey","maxlength","min","max","validatorOption","isPromise","obj","handleAsyncResult","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","asyncValidator","mergeValidators","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","Subject","_markForCheck","resetModel","_initialModel","updateInitialValue","label","placeholder","isHidden","setDefaultValue","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","deps","useValue","forChild","ɵmod","ɵinj","imports","CommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '';\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(value) {\n            state.value = value;\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n            disableTreeValidityCall(field.form, () => {\n                this._build(field);\n                const options = field.options;\n                options.checkExpressions?.(field, true);\n                options.detectChanges?.(field);\n            });\n        }\n        else {\n            this._build(field);\n        }\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.checkExpressions(field);\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        this.valueChangesUnsubscribe();\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [\n            observeDeep(field, ['props'], () => field.options.detectChanges(field)),\n            observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)),\n        ];\n        for (const key of Object.keys(field._expressions)) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        return () => subscribes.forEach((subscribe) => subscribe());\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        this.uiAttributes.forEach((attr) => {\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (!field.formControl && hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = {\n                ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray),\n                key: `${i}`,\n            };\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options.detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                    if (field.options && field.options.detectChanges) {\n                        field.options.detectChanges(field);\n                    }\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        try {\n            let target = field;\n            const paths = this._evalExpressionPath(field, prop);\n            const lastIndex = paths.length - 1;\n            for (let i = 0; i < lastIndex; i++) {\n                target = target[paths[i]];\n            }\n            target[paths[lastIndex]] = value;\n        }\n        catch (error) {\n            error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n            throw error;\n        }\n        if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n            this.changeDisabledState(field, value);\n        }\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), control = field?.key === key ? field.formControl : field.form.get(key);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        field.options.detectChanges(field);\n        return this.handleResult(field, errors, options);\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: false }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator || null === c.asyncValidator) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options.detectChanges = (f) => {\n            if (f._componentRefs) {\n                f.options.checkExpressions(f);\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options.detectChanges(f));\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            options.build(field);\n            field.form.reset(field.model);\n            if (options.parentForm && options.parentForm.control === field.formControl) {\n                options.parentForm.submitted = false;\n            }\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n            const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n            let setDefaultValue = !field.resetOnHide || !isHidden(field);\n            if (!isHidden(field) && field.resetOnHide) {\n                let parent = field.parent;\n                while (parent && !isHidden(parent)) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !isHidden(parent);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n"],"x_google_ignoreList":[0]}