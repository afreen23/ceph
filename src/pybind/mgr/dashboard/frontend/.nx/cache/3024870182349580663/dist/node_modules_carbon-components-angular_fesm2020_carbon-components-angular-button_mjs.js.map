{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-button_mjs.js","mappings":"iUAOA,MAAAA,EAAA,MAAAC,EAAA,WAkBA,MAAMC,EACFC,cAMIC,KAAKC,UAAY,UAIjBD,KAAKE,UAAW,EAMhBF,KAAKG,UAAW,EAIhBH,KAAKI,cAAe,EAEpBJ,KAAKK,WAAY,CACrB,CAIA,aAAIC,CAAUC,GACVP,KAAKC,UAAYM,CACrB,CACA,iBAAIC,GACA,MAA0B,YAAnBR,KAAKC,YAA4BD,KAAKC,SACjD,CACA,mBAAIQ,GACA,MAA0B,cAAnBT,KAAKC,SAChB,CACA,kBAAIS,GACA,MAA0B,aAAnBV,KAAKC,SAChB,CACA,eAAIU,GACA,MAA0B,UAAnBX,KAAKC,SAChB,CACA,gBAAIW,GACA,MAA0B,WAAnBZ,KAAKC,WAA6C,oBAAnBD,KAAKC,SAC/C,CACA,kBAAIY,GACA,MAA0B,qBAAnBb,KAAKC,SAChB,CACA,eAAIa,GACA,MAA0B,kBAAnBd,KAAKC,SAChB,CAIA,aAAIc,GACA,MAAqB,OAAdf,KAAKgB,OAAkBhB,KAAKI,YACvC,CACA,cAAIa,GACA,MAAqB,OAAdjB,KAAKgB,OAAkBhB,KAAKI,YACvC,CACA,aAAIc,GACA,MAAqB,OAAdlB,KAAKgB,IAChB,CACA,kBAAIG,GACA,MAAqB,OAAdnB,KAAKgB,IAChB,CACA,qBAAII,GACA,MAAqB,QAAdpB,KAAKgB,IAChB,CAEA,mBAAIK,GACA,MAAqB,OAAdrB,KAAKgB,OAAkBhB,KAAKI,YACvC,CACA,oBAAIkB,GACA,MAAqB,OAAdtB,KAAKgB,OAAkBhB,KAAKI,YACvC,CACA,mBAAImB,GACA,MAAqB,OAAdvB,KAAKgB,IAChB,CACA,wBAAIQ,GACA,MAAqB,OAAdxB,KAAKgB,IAChB,CACA,2BAAIS,GACA,MAAqB,QAAdzB,KAAKgB,IAChB,EAEJlB,EAAO4B,UAAI,SAAAC,GAAA,WAAAA,GAAwF7B,EAAM,EACzGA,EAAO8B,UADkFC,8BAAE,CAAAtB,KACJT,EAAMgC,UAAA,0CAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GADJJ,wBAAE,gBAAAK,EAAAhC,SAAF2B,CACI,sBAAAK,EAAA/B,SADJ0B,CACI,uBAAAK,EAAA9B,aADJyB,CACI,WAAAK,EAAA7B,UADJwB,CACI,oBAAAK,EAAA1B,cADJqB,CACI,sBAAAK,EAAAzB,gBADJoB,CACI,qBAAAK,EAAAxB,eADJmB,CACI,kBAAAK,EAAAvB,YADJkB,CACI,mBAAAK,EAAAtB,aADJiB,CACI,6BAAAK,EAAArB,eADJgB,CACI,0BAAAK,EAAApB,YADJe,CACI,eAAAK,EAAAnB,UADJc,CACI,eAAAK,EAAAjB,WADJY,CACI,eAAAK,EAAAhB,UADJW,CACI,eAAAK,EAAAf,eADJU,CACI,gBAAAK,EAAAd,kBADJS,CACI,uBAAAK,EAAAb,gBADJQ,CACI,uBAAAK,EAAAZ,iBADJO,CACI,uBAAAK,EAAAX,gBADJM,CACI,uBAAAK,EAAAV,qBADJK,CACI,wBAAAK,EAAAT,wBAAA,EAAAU,OAAA,CAAA7B,UAAA,YAAAL,UAAA,YAAAe,KAAA,OAAAd,SAAA,WAAAC,SAAA,WAAAC,aAAA,kBA4F7F,MAAMgC,EACFrC,cACIC,KAAKqC,gBAAiB,CAC1B,EAEJD,EAAUV,UAAI,SAAAC,GAAA,WAAAA,GAAwFS,EAAS,EAC/GA,EAAUE,UAnG+ET,8BAAE,CAAAtB,KAmGD6B,EAASN,UAAA,wCAAAC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAnGVJ,wBAAE,eAAAK,EAAAG,eAmGQ,EAAAE,mBAAA3C,EAAA4C,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAT,EAAAC,GAAA,EAAAD,IAnGVJ,uDAAE,GAmG+K,EAAAc,cAAA,IAkB1Q,MAAMC,EACF7C,cAIIC,KAAK6C,OAAQ,EAIb7C,KAAK8C,YAAa,EAIlB9C,KAAK+C,cAAe,EAIpB/C,KAAKgD,QAAS,EAIdhD,KAAKiD,MAAQ,SAKbjD,KAAKkD,WAAY,EAIjBlD,KAAKmD,aAAe,IAIpBnD,KAAKoD,aAAe,GACxB,EAEJR,EAAelB,UAAI,SAAAC,GAAA,WAAAA,GAAwFiB,EAAc,EACzHA,EAAeN,UA3J0ET,8BAAE,CAAAtB,KA2JIqC,EAAcd,UAAA,mBAAAK,OAAA,CAAAU,MAAA,QAAAC,WAAA,aAAAC,aAAA,eAAAC,OAAA,SAAAC,MAAA,QAAAC,UAAA,YAAAC,aAAA,eAAAC,aAAA,gBAAAZ,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAT,EAAAC,GAAA,EAAAS,cAAA,IAiC7G,MAAMU,UAAmBT,EACrB7C,YAAYuD,GACRC,QACAvD,KAAKsD,SAAWA,EAIhBtD,KAAKwD,SAAW,YAAYH,EAAWI,oBAIvCzD,KAAK0D,KAAO,UAIZ1D,KAAKgB,KAAO,KAIZhB,KAAKO,KAAO,SAIZP,KAAKI,cAAe,EAIpBJ,KAAK2D,UAAW,EAIhB3D,KAAK4D,yBAA0B,EAI/B5D,KAAK6D,MAAQ,IAAIC,eACjB9D,KAAK+D,MAAQ,IAAID,eACjB9D,KAAKgE,KAAO,IAAIF,eAIhB9D,KAAKiE,aAAe,IAAIH,eACxB9D,KAAKkE,UAAY,CAAC,EAClBlE,KAAKmE,cAAgB,CAAC,CAC1B,CAIA,iBAAIC,CAAcC,GACdrE,KAAKkE,UAAYI,OAAOC,OAAO,CAAE,qBAAsBvE,KAAK2D,UAAYU,EAC5E,CACA,iBAAID,GACA,OAAOpE,KAAKkE,SAChB,CAMA,oBAAIM,CAAiBH,GACbrE,KAAKyE,SAELH,OAAOI,KAAK1E,KAAKmE,eAAeQ,QAASC,IACrC5E,KAAKsD,SAASuB,gBAAgB7E,KAAKyE,OAAOK,cAAeF,EAAG,GAGhEN,OAAOI,KAAKL,GAAKM,QAASC,IACtB5E,KAAKsD,SAASyB,aAAa/E,KAAKyE,OAAOK,cAAeF,EAAKP,EAAIO,GAAI,IAI3E5E,KAAKmE,cAAgBE,CACzB,CACA,oBAAIG,GACA,OAAOxE,KAAKwE,gBAChB,CACAQ,kBAEIhF,KAAKwE,iBAAmBxE,KAAKmE,aACjC,CAKAc,eAAeC,EAAOC,EAAU,UAC5BD,EAAME,iBACNF,EAAMG,kBAEU,YAAZF,EAIJnF,KAAK6D,MAAMyB,KAAKJ,GAHZlF,KAAKiE,aAAaqB,KAAKJ,EAI/B,EAEJ7B,EAAWI,kBAAoB,EAC/BJ,EAAW3B,UAAI,SAAAC,GAAA,WAAAA,GAAwF0B,GA5RdxB,8BA4R0CA,aAAY,EAC/IwB,EAAWf,UA7R8ET,8BAAE,CAAAtB,KA6RA8C,EAAUvB,UAAA,0CAAAyD,UAAA,SAAAtD,EAAAC,GA7RV,GA6RU,EAAAD,GA7RZJ,wBAAEhC,EAAA,KAAAoC,EAAA,KAAAuD,EAAF3D,2BAAE2D,EAAF3D,6BAAEK,EAAAuC,OAAAe,EAAAC,MAAA,GAAAtD,OAAA,CAAAiC,cAAA,gBAAAI,iBAAA,mBAAAhB,SAAA,WAAAE,KAAA,OAAA1C,KAAA,OAAAT,KAAA,OAAAH,aAAA,eAAAuD,SAAA,WAAA+B,YAAA,cAAA9B,wBAAA,2BAAA+B,QAAA,CAAA9B,MAAA,QAAAE,MAAA,QAAAC,KAAA,OAAAC,aAAA,gBAAA2B,SAAA,CAAF/D,wCAAEU,mBAAA3C,EAAA4C,MAAA,EAAAC,KAAA,GAAAoD,OAAA,4QAAAnD,SAAA,SAAAT,EAAAC,GAAA,KAAAD,EAAA,OAAA6D,EAAFjE,wFAAE,mBAAFA,uBAAE,iBAAAkE,GAAFlE,iCAAEiE,GAAFjE,wBA0S9EK,EAAA+C,eAAAc,EAAuB,WAAU,GA1S6ClE,2BAAE,gBAAFA,uBAAE,iBAAAkE,GAAFlE,iCAAEiE,GAAFjE,wBAqT7EK,EAAA+C,eAAAc,GAAsB,EArTuDlE,CAqTtD,iBAAAkE,GArTsDlE,iCAAEiE,GAAFjE,wBAsT7EK,EAAA6B,MAAAuB,KAAAS,GAAkB,EAtT2DlE,CAsT1D,gBAAAkE,GAtT0DlE,iCAAEiE,GAAFjE,wBAuT9EK,EAAA8B,KAAAsB,KAAAS,GAAiB,GAvT6DlE,yBAAE,GAAFA,4BA0T1E,GAAAI,IA1T0EJ,uBAAE,cAAAK,EAAAwD,YAAF7D,CAgS5D,YAAAK,EAAA0B,yBAAA1B,EAAAyB,SAhS4D9B,CAiShC,QAAAK,EAAAW,MAjSgChB,CAkSxE,aAAAK,EAAAY,WAlSwEjB,CAmS9D,eAAAK,EAAAa,aAnS8DlB,CAoS1D,SAAAK,EAAAc,OApS0DnB,CAqStE,QAAAK,EAAAe,MArSsEpB,CAsSxE,YAAAK,EAAAgB,UAtSwErB,CAuShE,eAAAK,EAAAiB,aAvSgEtB,CAwS1D,eAAAK,EAAAkB,cAxS0DvB,+CAAE,KAAAK,EAAAsB,SAAF3B,CA6SvE,WAAAK,EAAAyB,SA7SuE9B,CA8SjE,cA9SiEA,CAgTrE,UAAAK,EAAAkC,cAhTqEvC,CAiT7D,YAAAK,EAAAwB,KAjT6D7B,CAkTpE,OAAAK,EAAAlB,KAlToEa,CAmTzE,eAAAK,EAAA9B,cAnTyEyB,wBAAE,OAAAK,EAAA3B,MAAA,EAAAyF,aAAA,CA2T7BC,UAA8FC,UAA6KpG,GAAM6C,cAAA,IAsE/U,MAAMwD,GAENA,EAAazE,UAAI,SAAAC,GAAA,WAAAA,GAAwFwE,EAAY,EACrHA,EAAaC,UApY4EvE,6BAAE,CAAAtB,KAoYe4F,IAM1GA,EAAaE,UA1Y4ExE,6BAAE,CAAAyE,QAAA,CA0YuCC,eAAcC","names":["_c0","_c1","Button","constructor","this","cdsButton","skeleton","iconOnly","isExpressive","baseClass","ibmButton","type","primaryButton","secondaryButton","tertiaryButton","ghostButton","dangerButton","dangerTertiary","dangerGhost","smallSize","size","mediumSize","largeSize","extraLargeSize","twoExtraLargeSize","smallLayoutSize","mediumLayoutSize","largeLayoutSize","extraLargeLayoutSize","twoExtraLargeLayoutSize","ɵfac","__ngFactoryType__","ɵdir","i0","selectors","hostVars","hostBindings","rf","ctx","inputs","ButtonSet","buttonSetClass","ɵcmp","ngContentSelectors","decls","vars","template","encapsulation","BaseIconButton","caret","dropShadow","highContrast","isOpen","align","autoAlign","enterDelayMs","leaveDelayMs","IconButton","renderer","super","buttonId","iconButtonCounter","kind","disabled","showTooltipWhenDisabled","click","EventEmitter","focus","blur","tooltipClick","classList","attributeList","buttonNgClass","obj","Object","assign","buttonAttributes","button","keys","forEach","key","removeAttribute","nativeElement","setAttribute","ngAfterViewInit","emitClickEvent","event","element","preventDefault","stopPropagation","emit","viewQuery","_t","first","description","outputs","features","consts","_r1","$event","dependencies","i1","i2","ButtonModule","ɵmod","ɵinj","imports","CommonModule","TooltipModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-button.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, Component, EventEmitter, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'carbon-components-angular/tooltip';\nimport { TooltipModule } from 'carbon-components-angular/tooltip';\n\n/**\n * A convenience directive for applying styling to a button. Get started with importing the module:\n *\n * ```typescript\n * import { ButtonModule } from 'carbon-components-angular';\n * ```\n *\n * Example:\n *\n * ```html\n * <button cdsButton>A button</button>\n * <button cdsButton=\"secondary\">A secondary button</button>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.\n *\n * [See demo](../../?path=/story/components-button--basic)\n */\nclass Button {\n    constructor() {\n        /**\n         * Sets the button type\n         * Accepts `ButtonType` or nothing (empty string which is equivalent to \"primary\")\n         * Empty string has been added as an option for Angular 16+ to resolve type errors\n         */\n        this.cdsButton = \"primary\";\n        /**\n         * Set to `true` for a skeleton state button\n         */\n        this.skeleton = false;\n        /**\n         * Set to `true` if the button contains only an icon\n         * This should only be used for creating custom icon buttons, otherwise use\n         * `<cds-icon-button></cds-icon-button>` component\n         */\n        this.iconOnly = false;\n        /**\n         * Set to `true` for a \"expressive\" style button\n         */\n        this.isExpressive = false;\n        // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly\n        this.baseClass = true;\n    }\n    /**\n     * @deprecated as of v5 - Use `cdsButton` input property instead\n     */\n    set ibmButton(type) {\n        this.cdsButton = type;\n    }\n    get primaryButton() {\n        return this.cdsButton === \"primary\" || !this.cdsButton;\n    }\n    get secondaryButton() {\n        return this.cdsButton === \"secondary\";\n    }\n    get tertiaryButton() {\n        return this.cdsButton === \"tertiary\";\n    }\n    get ghostButton() {\n        return this.cdsButton === \"ghost\";\n    }\n    get dangerButton() {\n        return this.cdsButton === \"danger\" || this.cdsButton === \"danger--primary\";\n    }\n    get dangerTertiary() {\n        return this.cdsButton === \"danger--tertiary\";\n    }\n    get dangerGhost() {\n        return this.cdsButton === \"danger--ghost\";\n    }\n    /**\n     * @todo remove `cds--btn--${size}` classes in v12\n     */\n    get smallSize() {\n        return this.size === \"sm\" && !this.isExpressive;\n    }\n    get mediumSize() {\n        return this.size === \"md\" && !this.isExpressive;\n    }\n    get largeSize() {\n        return this.size === \"lg\";\n    }\n    get extraLargeSize() {\n        return this.size === \"xl\";\n    }\n    get twoExtraLargeSize() {\n        return this.size === \"2xl\";\n    }\n    // Size classes\n    get smallLayoutSize() {\n        return this.size === \"sm\" && !this.isExpressive;\n    }\n    get mediumLayoutSize() {\n        return this.size === \"md\" && !this.isExpressive;\n    }\n    get largeLayoutSize() {\n        return this.size === \"lg\";\n    }\n    get extraLargeLayoutSize() {\n        return this.size === \"xl\";\n    }\n    get twoExtraLargeLayoutSize() {\n        return this.size === \"2xl\";\n    }\n}\nButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Button, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nButton.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Button, selector: \"[cdsButton], [ibmButton]\", inputs: { ibmButton: \"ibmButton\", cdsButton: \"cdsButton\", size: \"size\", skeleton: \"skeleton\", iconOnly: \"iconOnly\", isExpressive: \"isExpressive\" }, host: { properties: { \"class.cds--skeleton\": \"this.skeleton\", \"class.cds--btn--icon-only\": \"this.iconOnly\", \"class.cds--btn--expressive\": \"this.isExpressive\", \"class.cds--btn\": \"this.baseClass\", \"class.cds--btn--primary\": \"this.primaryButton\", \"class.cds--btn--secondary\": \"this.secondaryButton\", \"class.cds--btn--tertiary\": \"this.tertiaryButton\", \"class.cds--btn--ghost\": \"this.ghostButton\", \"class.cds--btn--danger\": \"this.dangerButton\", \"class.cds--btn--danger--tertiary\": \"this.dangerTertiary\", \"class.cds--btn--danger--ghost\": \"this.dangerGhost\", \"class.cds--btn--sm\": \"this.smallSize\", \"class.cds--btn--md\": \"this.mediumSize\", \"class.cds--btn--lg\": \"this.largeSize\", \"class.cds--btn--xl\": \"this.extraLargeSize\", \"class.cds--btn--2xl\": \"this.twoExtraLargeSize\", \"class.cds--layout--size-sm\": \"this.smallLayoutSize\", \"class.cds--layout--size-md\": \"this.mediumLayoutSize\", \"class.cds--layout--size-lg\": \"this.largeLayoutSize\", \"class.cds--layout--size-xl\": \"this.extraLargeLayoutSize\", \"class.cds--layout--size-2xl\": \"this.twoExtraLargeLayoutSize\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Button, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsButton], [ibmButton]\"\n                }]\n        }], propDecorators: { ibmButton: [{\n                type: Input\n            }], cdsButton: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], skeleton: [{\n                type: HostBinding,\n                args: [\"class.cds--skeleton\"]\n            }, {\n                type: Input\n            }], iconOnly: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--icon-only\"]\n            }, {\n                type: Input\n            }], isExpressive: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--expressive\"]\n            }, {\n                type: Input\n            }], baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--btn\"]\n            }], primaryButton: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--primary\"]\n            }], secondaryButton: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--secondary\"]\n            }], tertiaryButton: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--tertiary\"]\n            }], ghostButton: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--ghost\"]\n            }], dangerButton: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--danger\"]\n            }], dangerTertiary: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--danger--tertiary\"]\n            }], dangerGhost: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--danger--ghost\"]\n            }], smallSize: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--sm\"]\n            }], mediumSize: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--md\"]\n            }], largeSize: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--lg\"]\n            }], extraLargeSize: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--xl\"]\n            }], twoExtraLargeSize: [{\n                type: HostBinding,\n                args: [\"class.cds--btn--2xl\"]\n            }], smallLayoutSize: [{\n                type: HostBinding,\n                args: [\"class.cds--layout--size-sm\"]\n            }], mediumLayoutSize: [{\n                type: HostBinding,\n                args: [\"class.cds--layout--size-md\"]\n            }], largeLayoutSize: [{\n                type: HostBinding,\n                args: [\"class.cds--layout--size-lg\"]\n            }], extraLargeLayoutSize: [{\n                type: HostBinding,\n                args: [\"class.cds--layout--size-xl\"]\n            }], twoExtraLargeLayoutSize: [{\n                type: HostBinding,\n                args: [\"class.cds--layout--size-2xl\"]\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { ButtonModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-button-button-set--basic)\n */\nclass ButtonSet {\n    constructor() {\n        this.buttonSetClass = true;\n    }\n}\nButtonSet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonSet, deps: [], target: i0.ɵɵFactoryTarget.Component });\nButtonSet.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ButtonSet, selector: \"cds-button-set, ibm-button-set\", host: { properties: { \"class.cds--btn-set\": \"this.buttonSetClass\" } }, ngImport: i0, template: \"<ng-content></ng-content>\", isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonSet, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-button-set, ibm-button-set\",\n                    template: \"<ng-content></ng-content>\"\n                }]\n        }], propDecorators: { buttonSetClass: [{\n                type: HostBinding,\n                args: [\"class.cds--btn-set\"]\n            }] } });\n\n/**\n * Base button with common input properties for configuring icon button.\n * Extend class to inherit @Input meta data\n *\n * Used by pagination nav icon button, code snippet, etc.\n */\nclass BaseIconButton {\n    constructor() {\n        /**\n         * Set to `false` to hide caret\n         */\n        this.caret = true;\n        /**\n         * Set to `false` to hide shadow\n         */\n        this.dropShadow = true;\n        /**\n         * Set to `true` to enable high contrast\n         */\n        this.highContrast = true;\n        /**\n         * Set to `true` to have the popover open by default\n         */\n        this.isOpen = false;\n        /**\n         * Set popover alignment\n         */\n        this.align = \"bottom\";\n        /**\n         * **Experimental**: Use floating-ui to position the tooltip\n         * This is not toggleable - should be assigned once\n         */\n        this.autoAlign = false;\n        /**\n         * Set delay before tooltip is shown\n         */\n        this.enterDelayMs = 100;\n        /**\n         * Set delay when tooltip disappears\n         */\n        this.leaveDelayMs = 300;\n    }\n}\nBaseIconButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseIconButton, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBaseIconButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BaseIconButton, selector: \"ng-component\", inputs: { caret: \"caret\", dropShadow: \"dropShadow\", highContrast: \"highContrast\", isOpen: \"isOpen\", align: \"align\", autoAlign: \"autoAlign\", enterDelayMs: \"enterDelayMs\", leaveDelayMs: \"leaveDelayMs\" }, ngImport: i0, template: \"\", isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseIconButton, decorators: [{\n            type: Component,\n            args: [{\n                    template: \"\"\n                }]\n        }], propDecorators: { caret: [{\n                type: Input\n            }], dropShadow: [{\n                type: Input\n            }], highContrast: [{\n                type: Input\n            }], isOpen: [{\n                type: Input\n            }], align: [{\n                type: Input\n            }], autoAlign: [{\n                type: Input\n            }], enterDelayMs: [{\n                type: Input\n            }], leaveDelayMs: [{\n                type: Input\n            }] } });\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { ButtonModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-button-icon-button--basic)\n */\nclass IconButton extends BaseIconButton {\n    constructor(renderer) {\n        super();\n        this.renderer = renderer;\n        /**\n         * Override id\n         */\n        this.buttonId = `icon-btn-${IconButton.iconButtonCounter++}`;\n        /**\n         * Sets the button type.\n         */\n        this.kind = \"primary\";\n        /**\n         * Specify the size of the button.\n         */\n        this.size = \"lg\";\n        /**\n         * Set button type, `button` by default\n         */\n        this.type = \"button\";\n        /**\n         * Set to `true` to make button expressive\n         */\n        this.isExpressive = false;\n        /**\n         * Set to `true` to disable button\n         */\n        this.disabled = false;\n        /**\n         * Indicates whether the tooltip should be shown when the button is disabled\n         */\n        this.showTooltipWhenDisabled = false;\n        /**\n         * Common button events\n         */\n        this.click = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.blur = new EventEmitter();\n        /**\n         * Event to emit when click event is fired from tooltip\n         */\n        this.tooltipClick = new EventEmitter();\n        this.classList = {};\n        this.attributeList = {};\n    }\n    /**\n     * Pass global carbon classes to icon button\n     */\n    set buttonNgClass(obj) {\n        this.classList = Object.assign({ \"cds--btn--disabled\": this.disabled }, obj);\n    }\n    get buttonNgClass() {\n        return this.classList;\n    }\n    /**\n     * @param obj: { [key: string]: string\n     * User can pass additional button attributes if component property does not already exist\n     * Key is the attribute name & value is the attribute value for the button\n     */\n    set buttonAttributes(obj) {\n        if (this.button) {\n            // Remove old attributes\n            Object.keys(this.attributeList).forEach((key) => {\n                this.renderer.removeAttribute(this.button.nativeElement, key);\n            });\n            // Set new attributes\n            Object.keys(obj).forEach((key) => {\n                this.renderer.setAttribute(this.button.nativeElement, key, obj[key]);\n            });\n        }\n        // Set new attributes\n        this.attributeList = obj;\n    }\n    get buttonAttributes() {\n        return this.buttonAttributes;\n    }\n    ngAfterViewInit() {\n        // Set attributes once element is found\n        this.buttonAttributes = this.attributeList;\n    }\n    /**\n     * Stop propogation of click event\n     * Else double fires (click) event\n     */\n    emitClickEvent(event, element = \"button\") {\n        event.preventDefault();\n        event.stopPropagation();\n        // Prevents (click) event from bubbling since it would appear user clicked the `button`\n        if (element === \"tooltip\") {\n            this.tooltipClick.emit(event);\n            return;\n        }\n        this.click.emit(event);\n    }\n}\nIconButton.iconButtonCounter = 0;\nIconButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: IconButton, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nIconButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: IconButton, selector: \"cds-icon-button, ibm-icon-button\", inputs: { buttonNgClass: \"buttonNgClass\", buttonAttributes: \"buttonAttributes\", buttonId: \"buttonId\", kind: \"kind\", size: \"size\", type: \"type\", isExpressive: \"isExpressive\", disabled: \"disabled\", description: \"description\", showTooltipWhenDisabled: \"showTooltipWhenDisabled\" }, outputs: { click: \"click\", focus: \"focus\", blur: \"blur\", tooltipClick: \"tooltipClick\" }, viewQueries: [{ propertyName: \"button\", first: true, predicate: [\"button\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n\t<cds-tooltip\n\t\tclass=\"cds--icon-tooltip\"\n\t\t[description]=\"description\"\n\t\t[disabled]=\"showTooltipWhenDisabled ? false : disabled\"\n\t\t[caret]=\"caret\"\n\t\t[dropShadow]=\"dropShadow\"\n\t\t[highContrast]=\"highContrast\"\n\t\t[isOpen]=\"isOpen\"\n\t\t[align]=\"align\"\n\t\t[autoAlign]=\"autoAlign\"\n\t\t[enterDelayMs]=\"enterDelayMs\"\n\t\t[leaveDelayMs]=\"leaveDelayMs\"\n\t\t(click)=\"emitClickEvent($event, 'tooltip')\">\n\t\t<button\n\t\t\t#button\n\t\t\t[id]=\"buttonId\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[attr.type]=\"type\"\n\t\t\t[iconOnly]=\"true\"\n\t\t\t[ngClass]=\"buttonNgClass\"\n\t\t\t[cdsButton]=\"kind\"\n\t\t\t[size]=\"size\"\n\t\t\t[isExpressive]=\"isExpressive\"\n\t\t\t(click)=\"emitClickEvent($event)\"\n\t\t\t(focus)=\"focus.emit($event)\"\n\t\t\t(blur)=\"blur.emit($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</button>\n\t</cds-tooltip>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"component\", type: i2.Tooltip, selector: \"cds-tooltip, ibm-tooltip\", inputs: [\"id\", \"enterDelayMs\", \"leaveDelayMs\", \"disabled\", \"description\", \"templateContext\"] }, { kind: \"directive\", type: Button, selector: \"[cdsButton], [ibmButton]\", inputs: [\"ibmButton\", \"cdsButton\", \"size\", \"skeleton\", \"iconOnly\", \"isExpressive\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: IconButton, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-icon-button, ibm-icon-button\",\n                    template: `\n\t<cds-tooltip\n\t\tclass=\"cds--icon-tooltip\"\n\t\t[description]=\"description\"\n\t\t[disabled]=\"showTooltipWhenDisabled ? false : disabled\"\n\t\t[caret]=\"caret\"\n\t\t[dropShadow]=\"dropShadow\"\n\t\t[highContrast]=\"highContrast\"\n\t\t[isOpen]=\"isOpen\"\n\t\t[align]=\"align\"\n\t\t[autoAlign]=\"autoAlign\"\n\t\t[enterDelayMs]=\"enterDelayMs\"\n\t\t[leaveDelayMs]=\"leaveDelayMs\"\n\t\t(click)=\"emitClickEvent($event, 'tooltip')\">\n\t\t<button\n\t\t\t#button\n\t\t\t[id]=\"buttonId\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[attr.type]=\"type\"\n\t\t\t[iconOnly]=\"true\"\n\t\t\t[ngClass]=\"buttonNgClass\"\n\t\t\t[cdsButton]=\"kind\"\n\t\t\t[size]=\"size\"\n\t\t\t[isExpressive]=\"isExpressive\"\n\t\t\t(click)=\"emitClickEvent($event)\"\n\t\t\t(focus)=\"focus.emit($event)\"\n\t\t\t(blur)=\"blur.emit($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</button>\n\t</cds-tooltip>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { buttonNgClass: [{\n                type: Input\n            }], buttonAttributes: [{\n                type: Input\n            }], button: [{\n                type: ViewChild,\n                args: [\"button\"]\n            }], buttonId: [{\n                type: Input\n            }], kind: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], isExpressive: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], showTooltipWhenDisabled: [{\n                type: Input\n            }], click: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }], tooltipClick: [{\n                type: Output\n            }] } });\n\nclass ButtonModule {\n}\nButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonModule, declarations: [Button,\n        ButtonSet,\n        BaseIconButton,\n        IconButton], imports: [CommonModule, TooltipModule], exports: [Button,\n        ButtonSet,\n        IconButton] });\nButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonModule, imports: [CommonModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        Button,\n                        ButtonSet,\n                        BaseIconButton,\n                        IconButton\n                    ],\n                    exports: [\n                        Button,\n                        ButtonSet,\n                        IconButton\n                    ],\n                    imports: [CommonModule, TooltipModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseIconButton, Button, ButtonModule, ButtonSet, IconButton };\n"],"x_google_ignoreList":[0]}