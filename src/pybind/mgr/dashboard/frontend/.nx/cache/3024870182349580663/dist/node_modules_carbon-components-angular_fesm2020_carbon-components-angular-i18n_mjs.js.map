{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-i18n_mjs.js","mappings":"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","names":["EN","BREADCRUMB","LABEL","OVERFLOW_MENU_DESCRIPTION","CODE_SNIPPET","CODE_SNIPPET_TEXT","SHOW_MORE","SHOW_LESS","SHOW_MORE_ICON","COPY_CODE","COPIED","COMBOBOX","PLACEHOLDER","CLEAR_SELECTIONS","CLEAR_SELECTED","A11Y","OPEN_MENU","CLOSE_MENU","DROPDOWN","OPEN","SELECTED","CLEAR","FILTER","SELECTED_ONLY","SEARCH","NO_RESULTS","RESET_SEARCH","DROPDOWN_LIST","FILE_UPLOADER","CHECKMARK","REMOVE_BUTTON","LOADING","TITLE","MODAL","CLOSE","NOTIFICATION","CLOSE_BUTTON","NUMBER","INCREMENT","DECREMENT","OVERFLOW_MENU","OVERFLOW","ICON_DESCRIPTION","CLEAR_BUTTON","PAGINATION","ITEMS_PER_PAGE","OPEN_LIST_OF_OPTIONS","BACKWARD","FORWARD","TOTAL_ITEMS_UNKNOWN","TOTAL_ITEMS","TOTAL_ITEM","PAGE","OF_LAST_PAGES","OF_LAST_PAGE","NEXT","PREVIOUS","SELECT_ARIA","PROGRESS_INDICATOR","CURRENT","INCOMPLETE","COMPLETE","INVALID","TABLE","END_OF_DATA","SCROLL_TOP","CHECKBOX_HEADER","CHECKBOX_ROW","EXPAND_BUTTON","EXPAND_ALL_BUTTON","SORT_DESCENDING","SORT_ASCENDING","ROW","TABLE_TOOLBAR","ACTION_BAR","BATCH_TEXT","BATCH_TEXT_SINGLE","BATCH_TEXT_MULTIPLE","CANCEL","TABS","BUTTON_ARIA_LEFT","BUTTON_ARIA_RIGHT","HEADER_ARIA_LABEL","TILES","TILE","EXPAND","COLLAPSE","TOGGLE","OFF","ON","UI_SHELL","SKIP_TO","HEADER","SIDE_NAV","TOGGLE_OPEN","TOGGLE_CLOSE","replace","subject","variables","pipe","map","str","keys","Object","key","value","RegExp","Overridable","constructor","path","i18n","this","baseTranslation","get","isOverridden","getValueFromPath","$override","BehaviorSubject","_value","v","override","iif","subscription","unsubscribe","isObservable","subscribe","next","I18n","translationStrings","translations","Map","locale","setLocale","language","strings","set","getLocale","getLocaleObservable","asObservable","merge","Array","from","getSubject","getMultiple","partialPath","values","subjects","getOverridable","segment","split","undefined","Error","has","translation","error","console","ɵfac","__ngFactoryType__","ɵprov","i0","token","factory","ReplacePipe","transform","I18N_SERVICE_PROVIDER_FACTORY","parentService","ɵpipe","name","type","pure","I18N_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","I18nModule","ɵmod","ɵinj","providers"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-i18n.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Pipe, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { BehaviorSubject, iif, isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { merge } from 'carbon-components-angular/utils';\n\nvar EN = {\n    \"BREADCRUMB\": {\n        \"LABEL\": \"Breadcrumb\",\n        \"OVERFLOW_MENU_DESCRIPTION\": \"Options\"\n    },\n    \"CODE_SNIPPET\": {\n        \"CODE_SNIPPET_TEXT\": \"Code Snippet Text\",\n        \"SHOW_MORE\": \"Show more\",\n        \"SHOW_LESS\": \"Show less\",\n        \"SHOW_MORE_ICON\": \"Show more icon\",\n        \"COPY_CODE\": \"Copy code\",\n        \"COPIED\": \"Copied!\"\n    },\n    \"COMBOBOX\": {\n        \"PLACEHOLDER\": \"Filter...\",\n        \"CLEAR_SELECTIONS\": \"Clear all selected items\",\n        \"CLEAR_SELECTED\": \"Clear selected item\",\n        \"A11Y\": {\n            \"OPEN_MENU\": \"Open menu\",\n            \"CLOSE_MENU\": \"Close menu\",\n            \"CLEAR_SELECTIONS\": \"Clear all selected items\",\n            \"CLEAR_SELECTED\": \"Clear Selection\"\n        }\n    },\n    \"DROPDOWN\": {\n        \"OPEN\": \"Open menu\",\n        \"SELECTED\": \"Selected\",\n        \"CLEAR\": \"Clear all selected items\",\n        \"FILTER\": {\n            \"SELECTED_ONLY\": \"Show selected only\",\n            \"SEARCH\": \"Search\",\n            \"NO_RESULTS\": \"No search results\",\n            \"RESET_SEARCH\": \"Reset search\"\n        }\n    },\n    \"DROPDOWN_LIST\": {\n        \"LABEL\": \"Listbox\"\n    },\n    \"FILE_UPLOADER\": {\n        \"CHECKMARK\": \"Checkmark\",\n        \"OPEN\": \"Add file\",\n        \"REMOVE_BUTTON\": \"Close button\"\n    },\n    \"LOADING\": {\n        \"TITLE\": \"Loading\"\n    },\n    \"MODAL\": {\n        \"CLOSE\": \"Close modal\"\n    },\n    \"NOTIFICATION\": {\n        \"CLOSE_BUTTON\": \"Close alert notification\"\n    },\n    \"NUMBER\": {\n        \"INCREMENT\": \"Increment value\",\n        \"DECREMENT\": \"Decrement value\"\n    },\n    \"OVERFLOW_MENU\": {\n        \"OVERFLOW\": \"Overflow\",\n        \"ICON_DESCRIPTION\": \"Options\"\n    },\n    \"SEARCH\": {\n        \"LABEL\": \"Search\",\n        \"PLACEHOLDER\": \"Search\",\n        \"CLEAR_BUTTON\": \"Clear search input\"\n    },\n    \"PAGINATION\": {\n        \"ITEMS_PER_PAGE\": \"Items per page:\",\n        \"OPEN_LIST_OF_OPTIONS\": \"Open list of options\",\n        \"BACKWARD\": \"Backward\",\n        \"FORWARD\": \"Forward\",\n        \"TOTAL_ITEMS_UNKNOWN\": \"{{start}}-{{end}} items\",\n        \"TOTAL_ITEMS\": \"{{start}}-{{end}} of {{total}} items\",\n        \"TOTAL_ITEM\": \"{{start}}-{{end}} of {{total}} item\",\n        \"PAGE\": \"page\",\n        \"OF_LAST_PAGES\": \"of {{last}} pages\",\n        \"OF_LAST_PAGE\": \"of {{last}} page\",\n        \"NEXT\": \"Next\",\n        \"PREVIOUS\": \"Previous\",\n        \"SELECT_ARIA\": \"Select page number\"\n    },\n    \"PROGRESS_INDICATOR\": {\n        \"CURRENT\": \"Current\",\n        \"INCOMPLETE\": \"Incomplete\",\n        \"COMPLETE\": \"Complete\",\n        \"INVALID\": \"Invalid\"\n    },\n    \"TABLE\": {\n        \"FILTER\": \"Filter\",\n        \"END_OF_DATA\": \"You've reached the end of your content\",\n        \"SCROLL_TOP\": \"Scroll to top\",\n        \"CHECKBOX_HEADER\": \"Select all rows\",\n        \"CHECKBOX_ROW\": \"Select {{value}}\",\n        \"EXPAND_BUTTON\": \"Expand row\",\n        \"EXPAND_ALL_BUTTON\": \"Expand all rows\",\n        \"SORT_DESCENDING\": \"Sort rows by this header in descending order\",\n        \"SORT_ASCENDING\": \"Sort rows by this header in ascending order\",\n        \"ROW\": \"row\"\n    },\n    \"TABLE_TOOLBAR\": {\n        \"ACTION_BAR\": \"Table action bar\",\n        \"BATCH_TEXT\": \"\",\n        \"BATCH_TEXT_SINGLE\": \"1 item selected\",\n        \"BATCH_TEXT_MULTIPLE\": \"{{count}} items selected\",\n        \"CANCEL\": \"Cancel\"\n    },\n    \"TABS\": {\n        \"BUTTON_ARIA_LEFT\": \"Go to the previous tab\",\n        \"BUTTON_ARIA_RIGHT\": \"Go to the next tab\",\n        \"HEADER_ARIA_LABEL\": \"List of tabs\"\n    },\n    \"TILES\": {\n        \"TILE\": \"tile\",\n        \"EXPAND\": \"Expand\",\n        \"COLLAPSE\": \"Collapse\"\n    },\n    \"TOGGLE\": {\n        \"OFF\": \"Off\",\n        \"ON\": \"On\"\n    },\n    \"UI_SHELL\": {\n        \"SKIP_TO\": \"Skip to content\",\n        \"HEADER\": {\n            \"OPEN_MENU\": \"Open menu\",\n            \"CLOSE_MENU\": \"Close menu\"\n        },\n        \"SIDE_NAV\": {\n            \"TOGGLE_OPEN\": \"Open\",\n            \"TOGGLE_CLOSE\": \"Close\"\n        }\n    }\n};\n\n/**\n * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n *\n * The keys specify the variable name in the string.\n *\n * Example:\n * ```typescript\n * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n *\n * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n * ```\n *\n * Produces: `\"test asdf\"`\n *\n * @param subject the translation to replace variables on\n * @param variables object of variables to replace\n */\nconst replace = (subject, variables) => subject.pipe(map(str => {\n    const keys = Object.keys(variables);\n    for (const key of keys) {\n        const value = variables[key];\n        str = str.replace(new RegExp(`{{\\\\s*${key}\\\\s*}}`, \"g\"), value);\n    }\n    return str;\n}));\n/**\n * Represents an \"overridable\" translation value.\n *\n * Largely an internal usecase. There are situations where we want an `Observable` that\n * can emit events from a centralized source **OR** an `Observable` that will emit events\n * from a component local source. The key example being on/off text in a `Toggle` - In some cases\n * we want the `Toggle` to use `I18n`s global translations, but in others we'd prefer to use a local\n * override. We don't ever need to return to a non-overridden state, but we do need the ability to\n * switch _to_ an overridden sate.\n */\nclass Overridable {\n    constructor(path, i18n) {\n        this.path = path;\n        this.i18n = i18n;\n        /**\n         * Our base non-overridden translation.\n         */\n        this.baseTranslation = this.i18n.get(this.path);\n        /**\n         * A boolean to flip between overridden and non-overridden states.\n         */\n        this.isOverridden = false;\n        /**\n         * ensure `$override` is initialized with the correct default value\n         * in some cases `_value` can get changed for an `Observable` before `$override` is created\n         */\n        const value = this.i18n.getValueFromPath(this.path);\n        this.$override = new BehaviorSubject(value);\n        this._value = value;\n    }\n    /**\n     * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`\n     *\n     * @readonly\n     */\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        this.override(v);\n    }\n    /**\n     * The translation subject. Returns either a stream of overridden values, or our base translation values.\n     *\n     * @readonly\n     */\n    get subject() {\n        /**\n         * since inputs are bound on template instantiation (and thusly will always have _some_ value)\n         * We can use a simple boolean and the `iif` function to determine which subject to return on subscription\n         */\n        return iif(() => this.isOverridden, this.$override, this.baseTranslation);\n    }\n    /**\n     * Takes a string or an `Observable` that emits strings.\n     * Overrides the value provided by the `I18n` service.\n     */\n    override(value) {\n        this.isOverridden = true;\n        // To ensure that there are not multiple subscriptions created for the same observable, we\n        // unsubscribe if a subscription already exists for an observable before creating a new one.\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = null;\n        }\n        this._value = value;\n        if (isObservable(value)) {\n            this.subscription = value.subscribe(v => {\n                this.$override.next(v);\n            });\n        }\n        else {\n            this.$override.next(value);\n        }\n    }\n}\n/**\n * The I18n service is a minimal internal singleton service used to supply our components with translated strings.\n *\n * All the components that support I18n also support directly passed strings.\n * Usage of I18n is optional, and it is not recommended for application use (libraries like ngx-translate\n * are a better choice)\n *\n */\nclass I18n {\n    constructor() {\n        this.translationStrings = EN;\n        this.translations = new Map();\n        this.locale = new BehaviorSubject(\"en\");\n    }\n    /**\n     * Sets the locale and optionally the translation strings. Locale is used by components that\n     * are already locale aware (datepicker for example) while the translation strings are used\n     * for components that are not.\n     *\n     * Locales set here will override locales/languages set in components\n     * @param language an ISO 639-1 language code - https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n     * @param strings an object of strings, optional\n     */\n    setLocale(language, strings) {\n        this.locale.next(language);\n        if (strings) {\n            this.set(strings);\n        }\n    }\n    /**\n     * Returns the current locale\n     */\n    getLocale() {\n        return this.locale.value;\n    }\n    /**\n     * Returns an observable that resolves to the current locale, and will update when changed\n     */\n    getLocaleObservable() {\n        return this.locale.asObservable();\n    }\n    /**\n     * Set/update the translations from an object. Also notifies all participating components of the update.\n     *\n     * @param strings an object of strings, should follow the same format as src/i18n/en.json\n     */\n    set(strings) {\n        this.translationStrings = merge({}, EN, strings);\n        // iterate over all our tracked translations and update each observable\n        const translations = Array.from(this.translations);\n        for (const [path, subject] of translations) {\n            subject.next(this.getValueFromPath(path));\n        }\n    }\n    /**\n     * When a path is specified returns an observable that will resolve to the translation string value.\n     *\n     * Returns the full translations object if path is not specified.\n     *\n     * @param path optional, looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    get(path) {\n        if (!path) {\n            return this.translationStrings;\n        }\n        return this.getSubject(path);\n    }\n    /**\n     * Returns all descendents of some path fragment as an object.\n     *\n     * @param partialPath a path fragment, for example `\"NOTIFICATION\"`\n     */\n    getMultiple(partialPath) {\n        const values = this.getValueFromPath(partialPath);\n        const subjects = {};\n        for (const key of Object.keys(values)) {\n            if (values[key] === Object(values[key])) {\n                subjects[key] = this.getMultiple(`${partialPath}.${key}`);\n            }\n            else {\n                subjects[key] = this.getSubject(`${partialPath}.${key}`);\n            }\n        }\n        return subjects;\n    }\n    /**\n     * Returns an instance of `Overridable` that can be used to optionally override the value provided by `I18n`\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    getOverridable(path) {\n        return new Overridable(path, this);\n    }\n    /**\n     * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n     *\n     * The keys specify the variable name in the string.\n     *\n     * Example:\n     * ```\n     * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n     *\n     * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n     * ```\n     *\n     * Produces: `\"test asdf\"`\n     *\n     * @param subject the translation to replace variables on\n     * @param variables object of variables to replace\n     */\n    replace(subject, variables) {\n        return replace(subject, variables);\n    }\n    /**\n     * Trys to resolve a value from the provided path.\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    getValueFromPath(path) {\n        let value = this.translationStrings;\n        for (const segment of path.split(\".\")) {\n            if (value[segment] !== undefined && value[segment] !== null) {\n                value = value[segment];\n            }\n            else {\n                throw new Error(`no key ${segment} at ${path}`);\n            }\n        }\n        return value;\n    }\n    /**\n     * Helper method that returns an observable from the internal cache based on the path\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    getSubject(path) {\n        try {\n            // we run this here to validate the path exists before adding it to the translation map\n            const value = this.getValueFromPath(path);\n            if (this.translations.has(path)) {\n                return this.translations.get(path);\n            }\n            const translation = new BehaviorSubject(value);\n            this.translations.set(path, translation);\n            return translation;\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n}\nI18n.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18n, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nI18n.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18n });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18n, decorators: [{\n            type: Injectable\n        }] });\n\nclass ReplacePipe {\n    transform(value, variables) {\n        return replace(value, variables);\n    }\n}\nReplacePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ReplacePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nReplacePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ReplacePipe, name: \"i18nReplace\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ReplacePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"i18nReplace\"\n                }]\n        }] });\n\n// either provides a new instance of I18n, or returns the parent\nfunction I18N_SERVICE_PROVIDER_FACTORY(parentService) {\n    return parentService || new I18n();\n}\n// I18n should provide a single instance of itself to ensure that translations are consistent through the app\nconst I18N_SERVICE_PROVIDER = {\n    provide: I18n,\n    deps: [[new Optional(), new SkipSelf(), I18n]],\n    useFactory: I18N_SERVICE_PROVIDER_FACTORY\n};\nclass I18nModule {\n}\nI18nModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18nModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nI18nModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: I18nModule, declarations: [ReplacePipe], exports: [ReplacePipe] });\nI18nModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18nModule, providers: [\n        I18n,\n        I18N_SERVICE_PROVIDER\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: I18nModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ReplacePipe],\n                    exports: [ReplacePipe],\n                    providers: [\n                        I18n,\n                        I18N_SERVICE_PROVIDER\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { I18N_SERVICE_PROVIDER, I18N_SERVICE_PROVIDER_FACTORY, I18n, I18nModule, Overridable, ReplacePipe, replace };\n"],"x_google_ignoreList":[0]}