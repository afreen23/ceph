{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-experimental_mjs.js","mappings":"8VAGA,MAAMA,EACFC,cAIIC,KAAKC,YAAc,IAAIC,GAC3B,CAIAC,cAAcC,EAAMC,EAAU,CAAEC,SAAS,IAChCN,KAAKC,YAAYM,IAAIH,IACtBJ,KAAKC,YAAYO,IAAIJ,EAAMC,EAEnC,CAKAI,iBAAiBL,GACMJ,KAAKU,cAAcN,GAC3BE,SAAU,CACzB,CAKAK,kBAAkBP,GACKJ,KAAKU,cAAcN,GAC3BE,SAAU,CACzB,CAKAI,cAAcN,GACV,OAAKJ,KAAKC,YAAYM,IAAIH,GAInBJ,KAAKC,YAAYW,IAAIR,IAHxBJ,KAAKG,cAAcC,GACZJ,KAAKU,cAAcN,GAGlC,CAIAS,iBACI,OAAOC,MAAMC,KAAKf,KAAKC,YAAYe,UACvC,EASJ,SAASC,EAAsCC,GAC3C,OAAOA,GAAiB,IAAIpB,CAChC,CATAA,EAAoBqB,UAAI,SAAAC,GAAA,WAAAA,GAAwFtB,EAAmB,EACnIA,EAAoBuB,WADkFC,+BAAE,CAAAC,MACYzB,EAAmB0B,QAAnB1B,EAAmBqB,YASvI,MAAMM,EAAgC,CAClCC,QAAS5B,EACT6B,KAAM,CAAC,CAAC,IAAIC,WAAY,IAAIC,WAAY/B,IACxCgC,WAAYb,GAEhB,MAAMc,GAENA,EAAmBZ,UAAI,SAAAC,GAAA,WAAAA,GAAwFW,EAAkB,EACjIA,EAAmBC,UAlBmFV,6BAAE,CAAAW,KAkBQF,IAChHA,EAAmBG,UAnBmFZ,6BAAE,CAAAa,UAmBuC,CACvIrC,EACA2B","names":["ExperimentalService","constructor","this","experiments","Map","addExperiment","name","options","enabled","has","set","enableExperiment","getExperiment","disableExperiment","get","getExperiments","Array","from","entries","EXPERIMENTAL_SERVICE_PROVIDER_FACTORY","parentService","ɵfac","__ngFactoryType__","ɵprov","i0","token","factory","EXPERIMENTAL_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ExperimentalModule","ɵmod","type","ɵinj","providers"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-experimental.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, NgModule } from '@angular/core';\n\nclass ExperimentalService {\n    constructor() {\n        /**\n         * Map to hold all our experiments\n         */\n        this.experiments = new Map();\n    }\n    /**\n     * Adds an experiment if it doesn't exist.\n     */\n    addExperiment(name, options = { enabled: false }) {\n        if (!this.experiments.has(name)) {\n            this.experiments.set(name, options);\n        }\n    }\n    /**\n     * Enables an experiment by name\n     * @param name name of the experiment to enable\n     */\n    enableExperiment(name) {\n        const experiment = this.getExperiment(name);\n        experiment.enabled = true;\n    }\n    /**\n     * Disables an experiment by name\n     * @param name name of the experiment to disable\n     */\n    disableExperiment(name) {\n        const experiment = this.getExperiment(name);\n        experiment.enabled = false;\n    }\n    /**\n     * Get the options for an experiment by name\n     * @param name name of experiment to get\n     */\n    getExperiment(name) {\n        if (!this.experiments.has(name)) {\n            this.addExperiment(name);\n            return this.getExperiment(name);\n        }\n        return this.experiments.get(name);\n    }\n    /**\n     * Get an array of tuples representing an experiment and it's options\n     */\n    getExperiments() {\n        return Array.from(this.experiments.entries());\n    }\n}\nExperimentalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nExperimentalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalService, decorators: [{\n            type: Injectable\n        }] });\n\n// either provides a new instance of ExperimentalService, or returns the parent\nfunction EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService) {\n    return parentService || new ExperimentalService();\n}\nconst EXPERIMENTAL_SERVICE_PROVIDER = {\n    provide: ExperimentalService,\n    deps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n    useFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\nclass ExperimentalModule {\n}\nExperimentalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nExperimentalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalModule });\nExperimentalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalModule, providers: [\n        ExperimentalService,\n        EXPERIMENTAL_SERVICE_PROVIDER\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ExperimentalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        ExperimentalService,\n                        EXPERIMENTAL_SERVICE_PROVIDER\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPERIMENTAL_SERVICE_PROVIDER, EXPERIMENTAL_SERVICE_PROVIDER_FACTORY, ExperimentalModule, ExperimentalService };\n"],"x_google_ignoreList":[0]}