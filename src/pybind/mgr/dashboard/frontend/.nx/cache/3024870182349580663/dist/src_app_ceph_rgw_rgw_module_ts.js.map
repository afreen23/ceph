{"version":3,"file":"src_app_ceph_rgw_rgw_module_ts.js","mappings":"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","names":["KMS_PROVIDER","AuthMethods","SecretEngines","ENCRYPTION_TYPE","VAULT","KMIP","Token","Agent","KV","Transit","SSE_S3","SSE_KMS","rgwBucketEncryptionModel","kmsProviders","authMethods","secretEngines","RgwBucketMfaDelete","RgwBucketAclPermissions","RgwBucketAclGrantee","RgwBucketVersioning","ENABLED","DISABLED","Read","Write","All","FullControl","Owner","Everyone","AuthenticatedUsers","SUSPENDED","i0","BucketTagModalComponent_ng_template_11_span_0_Template","BucketTagModalComponent_ng_template_11_span_1_Template","BucketTagModalComponent_ng_template_11_span_2_Template","ctx_r1","form","showError","formDir_r3","BucketTagModalComponent_ng_template_17_span_0_Template","BucketTagModalComponent_ng_template_17_span_1_Template","BucketTagModalComponent","BaseModal","constructor","formBuilder","actionLabels","super","this","submitAction","EventEmitter","editMode","createForm","group","key","Validators","required","CdValidators","custom","value","_","currentKeyTags","storedKey","includes","length","onSubmit","emit","closeModal","getMode","EDIT","ADD","fillForm","tag","setValue","i1","i2","selectors","outputs","features","decls","vars","consts","i18n_0","$localize","_r1","ctx","BucketTagModalComponent_ng_template_11_Template","BucketTagModalComponent_ng_template_17_Template","open","controls","invalid","dirty","keyError_r4","valueError_r5","TextAreaXmlFormatterService","format","textArea","nativeElement","formatted","DOMParser","parseFromString","pixels","getElementsByTagName","style","height","querySelector","factory","ɵfac","providedIn","DimlessBinaryPerMinuteDirective","elementRef","control","dimlessBinaryPerMinutePipe","formatter","ngModelChange","el","ngOnInit","ngDataReady","subscribe","test","defaultUnit","size","toBytes","roundedSize","round","transform","minBytes","maxBytes","roundPower","power","Math","log","pow","onBlur","i3","hostBindings","rf","$event","target","ctx_r0","globalRateLimit","max_read_bytes","max_read_ops","max_write_bytes","max_write_ops","RgwRateLimitComponent_fieldset_0_div_15_ng_template_2_span_0_Template","RgwRateLimitComponent_fieldset_0_div_15_ng_template_2_span_1_Template","RgwRateLimitComponent_fieldset_0_div_15_ng_template_2_span_2_Template","frm_r2","RgwRateLimitComponent_fieldset_0_div_15_ng_template_2_Template","rate_limit_max_readOps","rateLimitMaxReadOpsError_r3","RgwRateLimitComponent_fieldset_0_div_17_ng_template_2_span_0_Template","RgwRateLimitComponent_fieldset_0_div_17_ng_template_2_span_1_Template","RgwRateLimitComponent_fieldset_0_div_17_ng_template_2_span_2_Template","RgwRateLimitComponent_fieldset_0_div_17_ng_template_2_Template","rate_limit_max_writeOps","rateLimitMaxWriteOpsError_r4","RgwRateLimitComponent_fieldset_0_div_19_ng_template_3_span_0_Template","RgwRateLimitComponent_fieldset_0_div_19_ng_template_3_span_1_Template","RgwRateLimitComponent_fieldset_0_div_19_ng_template_3_span_2_Template","RgwRateLimitComponent_fieldset_0_div_19_ng_template_3_Template","rate_limit_max_readBytes","maxReadBytesError_r5","RgwRateLimitComponent_fieldset_0_div_21_ng_template_3_span_0_Template","RgwRateLimitComponent_fieldset_0_div_21_ng_template_3_span_1_Template","RgwRateLimitComponent_fieldset_0_div_21_ng_template_3_span_2_Template","RgwRateLimitComponent_fieldset_0_div_21_ng_template_3_Template","rate_limit_max_writeBytes","maxWriteBytesError_r6","RgwRateLimitComponent_fieldset_0_cd_help_text_3_Template","RgwRateLimitComponent_fieldset_0_cd_help_text_4_Template","RgwRateLimitComponent_fieldset_0_div_7_Template","RgwRateLimitComponent_fieldset_0_div_14_Template","RgwRateLimitComponent_fieldset_0_div_15_Template","RgwRateLimitComponent_fieldset_0_div_16_Template","RgwRateLimitComponent_fieldset_0_div_17_Template","RgwRateLimitComponent_fieldset_0_div_18_Template","RgwRateLimitComponent_fieldset_0_div_19_Template","RgwRateLimitComponent_fieldset_0_div_20_Template","RgwRateLimitComponent_fieldset_0_div_21_Template","type","enabled","rate_limit_enabled","getValue","RgwRateLimitComponent","allowBid","bid","isEditing","getRateLimitFormValues","rgwUserService","rgwBucketService","notificationService","formValue","rateLimitFormGroup","getGlobalUserRateLimit","data","undefined","user_ratelimit","error","show","NotificationType","getGlobalBucketRateLimit","bucket_ratelimit","rate_limit_max_readOps_unlimited","composeIf","rateLimitIopmMaxSizeValidator","rate_limit_max_writeOps_unlimited","rate_limit_max_readBytes_unlimited","rateLimitBytesMaxSizeValidator","rate_limit_max_writeBytes_unlimited","populateFormValues","get","_setRateLimitProperty","getUserRateLimit","id","resp","getBucketRateLimit","FormatterService","performValidation","rateByteMaxSize","iopmMaxSizeValidator","getRateLimitFormValue","_isRateLimitFormDirty","_getRateLimitArgs","ngAfterViewInit","some","path","result","rateLimitKey","unlimitedKey","property","i4","inputs","RgwRateLimitComponent_fieldset_0_Template","RgwUserAccountsService","http","rgwDaemonService","url","list","detailed","request","params","append","account_id","create","payload","post","modify","put","remove","accountId","delete","setQuota","RgwBucketFormComponent_div_0_ng_template_12_span_0_Template","RgwBucketFormComponent_div_0_ng_template_12_span_1_Template","RgwBucketFormComponent_div_0_ng_template_12_span_2_Template","RgwBucketFormComponent_div_0_ng_template_12_span_3_Template","RgwBucketFormComponent_div_0_ng_template_12_span_4_Template","RgwBucketFormComponent_div_0_ng_template_12_span_5_Template","RgwBucketFormComponent_div_0_ng_template_12_span_6_Template","RgwBucketFormComponent_div_0_ng_template_12_span_7_Template","ctx_r2","bucketForm","user_r4","uid","RgwBucketFormComponent_div_0_Conditional_15_ng_template_6_span_0_Template","RgwBucketFormComponent_div_0_Conditional_15_option_3_Template","RgwBucketFormComponent_div_0_Conditional_15_option_4_Template","RgwBucketFormComponent_div_0_Conditional_15_option_5_Template","RgwBucketFormComponent_div_0_Conditional_15_ng_template_6_Template","RgwBucketFormComponent_div_0_Conditional_15_cd_alert_panel_8_Template","accountUserError_r5","accountUser","valid","accountusers","accountUsers","disabled","owner_r6","RgwBucketFormComponent_div_0_Conditional_16_ng_template_6_span_0_Template","RgwBucketFormComponent_div_0_Conditional_16_option_3_Template","RgwBucketFormComponent_div_0_Conditional_16_option_4_Template","RgwBucketFormComponent_div_0_Conditional_16_option_5_Template","RgwBucketFormComponent_div_0_Conditional_16_ng_template_6_Template","ownerError_r7","owner","owners","_r8","setMfaDeleteValidators","RgwBucketFormComponent_div_0_fieldset_18_div_6_ng_template_4_span_0_Template","RgwBucketFormComponent_div_0_fieldset_18_div_6_ng_template_4_Template","mfaSerialError_r10","RgwBucketFormComponent_div_0_fieldset_18_div_7_ng_template_4_span_0_Template","RgwBucketFormComponent_div_0_fieldset_18_div_7_ng_template_4_Template","mfaPinError_r11","_r9","RgwBucketFormComponent_div_0_fieldset_18_div_6_Template","RgwBucketFormComponent_div_0_fieldset_18_div_7_Template","areMfaCredentialsRequired","RgwBucketFormComponent_div_0_fieldset_19_div_9_ng_template_5_span_0_Template","RgwBucketFormComponent_div_0_fieldset_19_div_9_ng_template_5_span_1_Template","RgwBucketFormComponent_div_0_fieldset_19_div_9_ng_template_5_Template","lockModeHelper_r12","RgwBucketFormComponent_div_0_fieldset_19_div_10_ng_template_2_span_0_Template","RgwBucketFormComponent_div_0_fieldset_19_div_10_ng_template_2_span_1_Template","RgwBucketFormComponent_div_0_fieldset_19_div_10_ng_template_2_Template","lock_retention_period_days","retentionPeriodError_r13","RgwBucketFormComponent_div_0_fieldset_19_div_9_Template","RgwBucketFormComponent_div_0_fieldset_19_div_10_Template","RgwBucketFormComponent_div_0_fieldset_19_cd_alert_panel_11_Template","RgwBucketFormComponent_div_0_fieldset_19_cd_alert_panel_12_Template","editing","provider_r14","RgwBucketFormComponent_div_0_div_29_div_7_ng_template_7_span_0_Template","RgwBucketFormComponent_div_0_div_29_div_7_ng_template_13_span_0_Template","RgwBucketFormComponent_div_0_div_29_div_7_option_4_Template","RgwBucketFormComponent_div_0_div_29_div_7_option_5_Template","RgwBucketFormComponent_div_0_div_29_div_7_option_6_Template","RgwBucketFormComponent_div_0_div_29_div_7_ng_template_7_Template","RgwBucketFormComponent_div_0_div_29_div_7_ng_template_13_Template","kmsProviderError_r15","kms_provider","keyId","keyIdError_r16","RgwBucketFormComponent_div_0_div_29_div_7_Template","s3Configured","kmsConfigured","RgwBucketFormComponent_div_0_ng_container_34_cd_alert_panel_4_Template","multisiteStatus_r17","isDefaultZg","status","available","RgwBucketFormComponent_div_0_span_40_ng_container_1_Template","tagTpl_r20","_c4","i_r19","tag_r18","RgwBucketFormComponent_div_0_ng_template_56_span_0_Template","RgwBucketFormComponent_div_0_div_72_ng_template_6_span_0_Template","RgwBucketFormComponent_div_0_div_72_ng_template_6_span_1_Template","_r21","textAreaOnChange","RgwBucketFormComponent_div_0_div_72_ng_template_6_Template","openUrl","clearTextArea","lifecycle","lifecycleError_r22","icons","launch","size16","destroy","item_r23","RgwBucketFormComponent_div_0_ng_template_82_span_0_Template","permission_r24","RgwBucketFormComponent_div_0_ng_template_87_span_0_Template","placementTarget_r25","name","description","RgwBucketFormComponent_div_0_div_90_option_3_Template","RgwBucketFormComponent_div_0_div_90_option_4_Template","RgwBucketFormComponent_div_0_div_90_option_5_Template","placementTargets","RgwBucketFormComponent_div_0_div_7_Template","RgwBucketFormComponent_div_0_ng_template_12_Template","RgwBucketFormComponent_div_0_Conditional_14_Template","RgwBucketFormComponent_div_0_Conditional_15_Template","RgwBucketFormComponent_div_0_Conditional_16_Template","RgwBucketFormComponent_div_0_fieldset_17_Template","RgwBucketFormComponent_div_0_fieldset_18_Template","RgwBucketFormComponent_div_0_fieldset_19_Template","RgwBucketFormComponent_div_0_div_29_Template","RgwBucketFormComponent_div_0_ng_container_34_Template","RgwBucketFormComponent_div_0_span_40_Template","showTagModal","RgwBucketFormComponent_div_0_ng_template_56_Template","RgwBucketFormComponent_div_0_div_72_Template","onSelectionFilter","RgwBucketFormComponent_div_0_option_81_Template","RgwBucketFormComponent_div_0_ng_template_82_Template","RgwBucketFormComponent_div_0_option_86_Template","RgwBucketFormComponent_div_0_ng_template_87_Template","RgwBucketFormComponent_div_0_div_90_Template","rateLimitFormInit","submit","_c2","action","resource","nameError_r26","accounts","_c3","multisiteStatus$","isDefaultZoneGroup$","loadingTpl_r30","tags","add","bucket_policy","bucketPolicyError_r27","grantee","granteeError_r28","grantees","aclPermission","aclPermissionError_r29","aclPermissions","config_r32","attribute","index_r35","tag_r34","RgwBucketFormComponent_ng_template_1_ng_container_1_Template","_r31","index","deleteTag","tagConfig","edit","trash","RgwBucketFormComponent","CdForm","isVersioningEnabled","isMfaDeleteEnabled","route","router","rgwSiteService","modalService","textAreaJsonFormatterService","textAreaXmlFormatterService","changeDetectorRef","rgwMultisiteService","rgwAccountsService","isVersioningAlreadyEnabled","isMfaDeleteAlreadyEnabled","Icons","dirtyTags","Grantee","startsWith","URLVerbs","CREATE","ngAfterViewChecked","detectChanges","bucketPolicyTextArea","lifecycleTextArea","self","lockDaysValidator","getRawValue","lockDays","Number","isInteger","bucketName","bucketExistence","requiredIf","isAccountOwner","versioning","lock_enabled","encryption_enabled","encryption_type","lock_mode","number","json","jsonOrXml","replication","promises","enumerate","selectedDaemon$","pipe","switchMap","daemon","map","defaultZoneGroup","zonegroup_id","getEncryptionConfig","s3","Object","keys","kms","getPlacementTargets","bucketOwner","hasOwnProperty","decodeURIComponent","getBid","forkJoin","filter","zonegroup","placement_targets","placementTarget","data_pool","push","bidResp","defaults","getLockDays","placement_rule","mfa_delete","encryption","tagset","entries","toString","aclXmlToFormValues","acl","JSON","stringify","ownersList","user","assign","find","AppConstants","defaultUser","disable","Rule","Status","filterAclPermissions","loadingReady","goToListView","navigate","rateLimitForm","addControl","pristine","rateLimitComponent","pending","setErrors","cdSubmitButton","values","xmlStrTags","tagsToXML","bucketPolicy","getBucketPolicy","cannedAcl","permissionToCannedAcl","getVersioningStatus","mfaDelete","getMfaDeleteStatus","update","success","updateBucketRateLimit","bidInput","hasOwnerWithDollar","bidHasSlash","split","rateLimitConfig","mfaTokenSerialControl","mfaTokenPinControl","setValidators","updateValueAndValidity","fileUpload","files","controlName","file","FileReader","addEventListener","markAsDirty","markAsTouched","window","field","defaultValue","modalComponent","item","setTag","splice","xml","parser","xml2js","explicitArray","trim","selectedAclPermission","selectedGrantee","parseString","err","xmlGrantees","AccessControlPolicy","AccessControlList","Grant","i","ID","URI","Permission","i5","i6","i7","i8","i9","i10","i11","i12","i13","viewQuery","RgwBucketFormComponent_div_0_Template","RgwBucketFormComponent_ng_template_1_Template","RgwBucketFormComponent_ng_template_3_Template","loading","CLOUD_TIER_REQUIRED_FIELDS","GLACIER_REQUIRED_FIELDS","TIER_TYPE","LOCAL","CLOUD_TIER","GLACIER","STORAGE_CLASS_CONSTANTS","TIER_TYPE_DISPLAY","ALLOW_READ_THROUGH_TEXT","MULTIPART_MIN_PART_TEXT","MULTIPART_SYNC_THRESHOLD_TEXT","TARGET_PATH_TEXT","TARGET_ACCESS_KEY_TEXT","TARGET_SECRET_KEY_TEXT","RETAIN_HEAD_OBJECT_TEXT","LOCAL_STORAGE_CLASS_TEXT","CLOUDS3_STORAGE_CLASS_TEXT","GLACIER_STORAGE_CLASS_TEXT","GLACIER_RESTORE_DAY_TEXT","GLACIER_RESTORE_TIER_TYPE_TEXT","STANDARD_TIER_TYPE_TEXT","EXPEDITED_TIER_TYPE_TEXT","RESTORE_DAYS_TEXT","READTHROUGH_RESTORE_DAYS_TEXT","RESTORE_STORAGE_CLASS_TEXT","ZONEGROUP_TEXT","BucketTieringUtils","filterAndMapTierTargets","zonegroupData","zonegroups","flatMap","zoneGroup","storage_class","Set","tier_targets","tier_target","tierTarget","getTierTargets","storage_classes","storageClass","has","zonegroup_name","placement_target","tier_type","targetName","val","tierType","commonProps","cloudProps","retain_head_object","allow_read_through","restore_storage_class","read_through_restore_days","enableSnapshotSchedule","_r3","goToCreateStorageClass","RgwBucketTieringFormComponent_ng_container_4_ng_template_13_span_0_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_13_span_1_Template","tieringForm","formDir_r4","tier_r5","RgwBucketTieringFormComponent_ng_container_4_div_31_ng_template_6_span_0_Template","RgwBucketTieringFormComponent_ng_container_4_div_31_ng_template_4_Template","RgwBucketTieringFormComponent_ng_container_4_div_31_ng_template_6_Template","prefix","prefixError_r7","prefixHelper_r6","RgwBucketTieringFormComponent_ng_container_4_div_32_ng_container_5_ng_template_7_Template","RgwBucketTieringFormComponent_ng_container_4_div_32_ng_container_5_ng_template_13_Template","i_r10","removeTags","Key","tagKeyError_r11","Value","tagValueError_r12","_c0","RgwBucketTieringFormComponent_ng_container_4_div_32_ng_container_5_Template","addTags","RgwBucketTieringFormComponent_ng_container_4_ng_template_45_span_0_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_45_span_1_Template","RgwBucketTieringFormComponent_ng_container_4_cd_alert_panel_2_Template","RgwBucketTieringFormComponent_ng_container_4_cd_alert_panel_4_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_11_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_13_Template","RgwBucketTieringFormComponent_ng_container_4_option_17_Template","RgwBucketTieringFormComponent_ng_container_4_option_18_Template","RgwBucketTieringFormComponent_ng_container_4_option_19_Template","RgwBucketTieringFormComponent_ng_container_4_option_20_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_21_Template","RgwBucketTieringFormComponent_ng_container_4_div_31_Template","RgwBucketTieringFormComponent_ng_container_4_div_32_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_43_Template","RgwBucketTieringFormComponent_ng_container_4_ng_template_45_Template","snapScheduleModuleStatus$","storageClassList","isStorageClassFetched","ruleNameError_r14","ruleHelper_r13","storageClassHelper_r15","hasPrefix","days","daysError_r17","daysHelper_r16","RgwBucketTieringFormComponent","bucket","selectedLifecycle","fb","cd","rgwZonegroupService","tagsToRemove","getLifecycle","tenant","LifecycleConfiguration","rule","Filter","Tag","Array","isArray","And","configuredLifecycle","ruleToEdit","patchValue","checkIfRuleHasFilters","Prefix","Transition","Days","setTags","duplicateConfigName","bind","array","loadStorageClass","isValidPrefix","isValidArray","forEach","FormGroup","FormControl","duplicate","idx","removeAt","Promise","resolve","reject","getAllZonegroupsInfo","tierObj","StorageClass","submitTieringConfig","rules","findIndex","setLifecycle","next","complete","RgwBucketTieringFormComponent_ng_container_4_Template","RgwBucketLifecycleListComponent","authStorageService","updateBucketDetails","columns","selection","CdTableSelection","lifecycleRuleList","permission","getPermissions","rgw","prop","flexGrow","createAction","icon","click","openTieringModal","editAction","hasMultiSelection","deleteAction","hasSelection","DELETE","canBePrimary","tableActions","loadLifecyclePolicies","context","allLifecycleRules$","tap","catchError","of","filteredLifecycleRules$","first","close","updateSelection","ruleNames","selected","filteredRules","modalRef","DeleteConfirmationModalComponent","itemDescription","itemNames","actionDescription","submitLifecycleConfig","componentInstance","stopLoadingSpinner","dismissAll","TableComponent","RgwRateLimitDetailsComponent","RgwRateLimitDetailsComponent_td_13_Template","RgwRateLimitDetailsComponent_td_14_Template","RgwRateLimitDetailsComponent_td_15_Template","RgwRateLimitDetailsComponent_td_19_Template","RgwRateLimitDetailsComponent_td_20_Template","RgwRateLimitDetailsComponent_td_21_Template","RgwRateLimitDetailsComponent_td_25_Template","RgwRateLimitDetailsComponent_td_26_Template","RgwRateLimitDetailsComponent_td_27_Template","RgwRateLimitDetailsComponent_td_31_Template","RgwRateLimitDetailsComponent_td_32_Template","RgwRateLimitDetailsComponent_td_33_Template","RgwTopicService","ApiClient","baseURL","listTopic","getTopic","encodeURIComponent","createParam","observe","exists","encodedKey","mapTo","preventDefault","observableOf","events","content","s3KeyFilter","SELECT","PREFIX","SUFFIX","REGEX","s3KeyFilterTexts","namePlaceholder","valuePlaceholder","nameHelper","valueHelper","s3MetadataFilterTexts","s3TagsFilterTexts","RgwNotificationFormComponent_ng_template_15_span_0_Template","RgwNotificationFormComponent_ng_template_15_span_1_Template","notificationForm","data_r4","RgwNotificationFormComponent_ng_template_23_span_0_Template","RgwNotificationFormComponent_ng_container_30_ng_container_1_Template","filterTemplate_r6","key_r5","filterControls","filterSettings","options","isDropdown","filter_r8","RgwNotificationFormComponent_ng_template_32_div_4_ng_container_3_option_2_Template","type_r11","i_r9","nameHelper_r12","s3KeyFilterValue","namePlaceholder_r13","RgwNotificationFormComponent_ng_template_32_div_4_ng_container_3_Template","RgwNotificationFormComponent_ng_template_32_div_4_ng_template_4_Template","_r7","addRow","removeRow","isDropdown_r15","textInputName_r14","valueHelper_r17","valuePlaceholder_r16","_c1","RgwNotificationFormComponent_ng_template_32_div_4_Template","typeLabels","controls_r18","RgwNotificationFormComponent","filterTypes","getFormArray","selectedNotification","rgwTopicService","cdRef","eventOption","topics","topicArn","notificationList","s3Key","s3Metadata","s3Tags","createNotificationForm","listNotification","getTopicName","then","notification_id","Id","patchNotificationForm","topic","arn","config","Topic","event","Event","setFilterRules","S3Key","FilterRule","S3Metadata","S3Tags","formArray","setControl","clear","Name","createNameValueGroup","duplicateNotificationId","currentId","notification","arrayName","getFiltersControls","insert","at","reset","showInvalid","touched","markAllAsTouched","buildRules","seen","successMessage","notificationConfiguration","TopicConfiguration","FilterRules","setNotification","message","goToCreateNotification","RgwNotificationFormComponent_ng_template_13_Template","RgwNotificationFormComponent_ng_template_15_Template","RgwNotificationFormComponent_option_19_Template","RgwNotificationFormComponent_option_22_Template","RgwNotificationFormComponent_ng_template_23_Template","RgwNotificationFormComponent_ng_container_30_Template","RgwNotificationFormComponent_ng_template_32_Template","nameError_r20","helpertext_r19","topicError_r21","fetchData","notification_r3","rule_r4","RgwBucketNotificationListComponent_ng_template_6_ng_container_0_ng_container_1_ng_container_1_div_3_Template","item_r5","RgwBucketNotificationListComponent_ng_template_6_ng_container_0_ng_container_1_ng_container_1_Template","RgwBucketNotificationListComponent_ng_template_6_ng_container_0_ng_container_1_Template","config_r6","RgwBucketNotificationListComponent_ng_template_6_ng_container_0_Template","event_r7","RgwBucketNotificationListComponent_ng_template_8_ng_container_0_cds_tag_1_Template","events_r8","RgwBucketNotificationListComponent_ng_template_8_ng_container_0_Template","RgwBucketNotificationListComponent","ListWithDetails","subject","BehaviorSubject","cellTransformation","CellTemplate","copy","cellTemplate","eventTpl","filterTpl","openNotificationModal","notification$","selectedNotificationId","submitDeleteNotifications","notificationId","deleteNotification","join","provide","URLBuilderService","useValue","RgwBucketNotificationListComponent_ng_container_4_Template","RgwBucketNotificationListComponent_ng_template_6_Template","RgwBucketNotificationListComponent_ng_template_8_Template","JsonToXmlService","replaceKey","indentSize","currentIndent","parse","indentation","repeat","oldKey","newKey","XmlPipe","jsonToXmlService","valueFormat","pure","bucket_quota","max_size","max_objects","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_49_td_4_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_49_td_5_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_49_td_9_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_49_td_10_Template","tag_r2","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_61_tr_5_Template","bucketRateLimit","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_49_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_60_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_61_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_6_ng_container_63_Template","replicationStatus","index_type","mtime","tmp_14_0","updateLifecycleFormatTo","lifecycleFormat","lifecycleProgress","started","RgwBucketDetailsComponent_ng_container_0_ng_template_10_tr_18_div_7_Template","tmp_4_0","lifecycleProgressMap","tmp_6_0","color","RgwBucketDetailsComponent_ng_container_0_ng_template_10_div_13_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_10_cds_code_snippet_16_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_10_cds_code_snippet_17_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_10_tr_18_Template","lifecycle_progress","AllUsers","_r4","extractLifecycleDetails","RgwBucketDetailsComponent_ng_container_0_ng_template_6_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_10_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_14_Template","RgwBucketDetailsComponent_ng_container_0_ng_template_18_Template","nav_r5","RgwBucketDetailsComponent","Map","ngOnChanges","extraxtDetailsfromResponse","parseXmlAcl","granteeGroup","pop","cbFn","progress","RgwBucketDetailsComponent_ng_container_0_Template","expandedRow","row_r3","bucket_size","RgwBucketListComponent_ng_template_4_cd_usage_bar_0_Template","RgwBucketListComponent_ng_template_4_ng_template_1_Template","noSizeQuota_r4","row_r5","num_objects","RgwBucketListComponent_ng_template_6_cd_usage_bar_0_Template","RgwBucketListComponent_ng_template_6_ng_template_1_Template","noObjectQuota_r6","RgwBucketListComponent","dimlessBinaryPipe","dimlessPipe","urlBuilder","ngZone","taskWrapper","buckets","subs","Subscription","bucketSizeTpl","bucketObjectTpl","getBucketUri","addAction","routerLink","getCreate","getEdit","title","tieringAction","TIERING","setTableRefreshTimeout","getBucketList","fetchAndTransformBuckets","buckets$","impact","DeletionImpact","high","bodyTemplate","deleteTpl","submitActionObservable","Observable","observer","wrapTaskAroundCall","task","FinishedTask","bucket_names","call","observableForkJoin","table","refreshBtn","ngOnDestroy","unsubscribe","setExpandedRow","RgwBucketListComponent_cd_rgw_bucket_details_3_Template","RgwBucketListComponent_ng_template_4_Template","RgwBucketListComponent_ng_template_6_Template","RgwBucketListComponent_ng_template_8_Template","tableStatus","RgwUserAvailableCapability","getMetaData","metadata","serviceMapId","serviceId","RgwDaemonDetailsComponent_ng_container_0_ng_container_11_ng_template_3_Template","RgwDaemonDetailsComponent_ng_container_0_ng_template_6_Template","RgwDaemonDetailsComponent_ng_container_0_ng_template_10_Template","RgwDaemonDetailsComponent_ng_container_0_ng_container_11_Template","grafanaPermission","read","nav_r3","RgwDaemonDetailsComponent","grafana","service_map_id","rgw_metadata","RgwDaemonDetailsComponent_ng_container_0_Template","getDaemonList","RgwDaemonListComponent_ng_template_5_cd_rgw_daemon_details_1_Template","daemons","RgwDaemonListComponent_ng_container_6_ng_template_3_Template","RgwDaemonListComponent_ng_container_7_ng_template_3_Template","RgwDaemonListComponent","cephShortVersionPipe","updateDaemons","realms","isMultiSite","RgwDaemonListComponent_ng_template_5_Template","RgwDaemonListComponent_ng_container_6_Template","RgwDaemonListComponent_ng_container_7_Template","USERS","BUCKETS","METADATA","USAGE","ZONE","RgwUserCapabilities","capabilities","getAll","formGroup","typeError_r3","type_r4","RgwUserCapabilityModalComponent_cds_select_12_option_3_Template","types","RgwUserCapabilityModalComponent_ng_template_13_span_0_Template","frm_r5","perm_r6","RgwUserCapabilityModalComponent_ng_template_20_span_0_Template","RgwUserCapabilityModalComponent","perm","setEditing","setValues","setCapabilities","usedTypes","capability","RgwUserCapabilityModalComponent_cds_text_label_11_Template","RgwUserCapabilityModalComponent_cds_select_12_Template","RgwUserCapabilityModalComponent_ng_template_13_Template","RgwUserCapabilityModalComponent_option_19_Template","RgwUserCapabilityModalComponent_ng_template_20_Template","permError_r7","userError_r3","userCandidate_r4","RgwUserS3KeyModalComponent_cds_select_12_option_3_Template","userCandidates","RgwUserS3KeyModalComponent_ng_template_13_span_0_Template","RgwUserS3KeyModalComponent_div_16_ng_template_5_span_0_Template","RgwUserS3KeyModalComponent_div_16_ng_template_5_Template","access_key","accessKeyError_r6","viewing","RgwUserS3KeyModalComponent_div_17_ng_template_5_span_0_Template","RgwUserS3KeyModalComponent_div_17_ng_template_5_Template","secret_key","secretKeyError_r7","RgwUserS3KeyModalComponent","generate_key","setViewing","SHOW","setUserCandidates","candidates","RgwUserS3KeyModalComponent_cds_text_label_11_Template","RgwUserS3KeyModalComponent_cds_select_12_Template","RgwUserS3KeyModalComponent_ng_template_13_Template","RgwUserS3KeyModalComponent_div_15_Template","RgwUserS3KeyModalComponent_div_16_Template","RgwUserS3KeyModalComponent_div_17_Template","RgwUserSubuser","RgwUserSubuserModalComponent_ng_template_18_span_0_Template","RgwUserSubuserModalComponent_ng_template_18_span_1_Template","frm_r3","perm_r4","RgwUserSubuserModalComponent_ng_template_29_span_0_Template","RgwUserSubuserModalComponent_fieldset_31_div_6_ng_template_5_span_0_Template","RgwUserSubuserModalComponent_fieldset_31_div_6_ng_template_5_Template","secretKeyError_r5","RgwUserSubuserModalComponent_fieldset_31_div_6_Template","RgwUserSubuserModalComponent","subusers","subuid","subuserValidator","generate_secret","isEmptyInputValue","subuser","getSubuserName","subuserIdExists","matches","match","permissions","setSubusers","RgwUserSubuserModalComponent_ng_template_18_Template","RgwUserSubuserModalComponent_option_24_Template","RgwUserSubuserModalComponent_ng_template_29_Template","RgwUserSubuserModalComponent_fieldset_31_Template","subuserHelper_r6","RgwUserSwiftKeyModalComponent","account_r2","RgwUserFormComponent_div_0_Conditional_7_ng_template_5_span_0_Template","ctx_r3","userForm","RgwUserFormComponent_div_0_Conditional_7_option_2_Template","RgwUserFormComponent_div_0_Conditional_7_option_3_Template","RgwUserFormComponent_div_0_Conditional_7_option_4_Template","RgwUserFormComponent_div_0_Conditional_7_ng_template_5_Template","RgwUserFormComponent_div_0_Conditional_7_ng_template_7_Template","RgwUserFormComponent_div_0_Conditional_7_div_9_Template","accountError_r5","accountsHelper_r6","RgwUserFormComponent_div_0_ng_template_12_span_0_Template","RgwUserFormComponent_div_0_ng_template_12_span_1_Template","RgwUserFormComponent_div_0_ng_template_12_span_2_Template","RgwUserFormComponent_div_0_div_17_ng_template_4_span_0_Template","RgwUserFormComponent_div_0_div_17_ng_template_4_span_1_Template","RgwUserFormComponent_div_0_div_17_ng_template_4_Template","tenantError_r7","RgwUserFormComponent_div_0_ng_template_22_span_0_Template","RgwUserFormComponent_div_0_ng_template_22_span_1_Template","RgwUserFormComponent_div_0_ng_template_28_span_0_Template","RgwUserFormComponent_div_0_ng_template_28_span_1_Template","RgwUserFormComponent_div_0_div_38_ng_template_2_span_0_Template","RgwUserFormComponent_div_0_div_38_ng_template_2_Template","max_buckets","maxBucketsError_r8","multiSelector","managedPolicies","RgwUserFormComponent_div_0_fieldset_48_div_6_ng_template_5_span_0_Template","RgwUserFormComponent_div_0_fieldset_48_div_6_ng_template_5_Template","accessKeyError_r10","RgwUserFormComponent_div_0_fieldset_48_div_7_ng_template_5_span_0_Template","RgwUserFormComponent_div_0_fieldset_48_div_7_ng_template_5_Template","secretKeyError_r11","RgwUserFormComponent_div_0_fieldset_48_div_6_Template","RgwUserFormComponent_div_0_fieldset_48_div_7_Template","i_r14","_r13","showSubuserModal","deleteSubuser","subuser_r15","size32","RgwUserFormComponent_div_0_fieldset_49_span_4_Template","RgwUserFormComponent_div_0_fieldset_49_ng_container_5_Template","_r12","subuserLabel","i_r18","_r17","showS3KeyModal","deleteS3Key","key_r19","i_r21","_r20","showSwiftKeyModal","key_r22","RgwUserFormComponent_div_0_fieldset_50_span_6_Template","RgwUserFormComponent_div_0_fieldset_50_span_7_Template","_r16","RgwUserFormComponent_div_0_fieldset_50_span_20_Template","RgwUserFormComponent_div_0_fieldset_50_span_21_Template","s3Keys","s3keyLabel","swiftKeys","i_r25","_r24","showCapabilityModal","deleteCapability","cap_r26","RgwUserFormComponent_div_0_fieldset_51_span_4_Template","RgwUserFormComponent_div_0_fieldset_51_span_5_Template","_r23","hasAllCapabilities","capabilityLabel","RgwUserFormComponent_div_0_div_59_ng_template_4_span_0_Template","RgwUserFormComponent_div_0_div_59_ng_template_4_span_1_Template","RgwUserFormComponent_div_0_div_59_ng_template_4_span_2_Template","formDir","RgwUserFormComponent_div_0_div_59_ng_template_4_Template","user_quota_max_size","quotaMaxSizeError_r27","RgwUserFormComponent_div_0_div_61_ng_template_2_span_0_Template","RgwUserFormComponent_div_0_div_61_ng_template_2_span_1_Template","RgwUserFormComponent_div_0_div_61_ng_template_2_Template","user_quota_max_objects","maxObjectsError_r28","RgwUserFormComponent_div_0_div_69_ng_template_4_span_0_Template","RgwUserFormComponent_div_0_div_69_ng_template_4_span_1_Template","RgwUserFormComponent_div_0_div_69_ng_template_4_span_2_Template","RgwUserFormComponent_div_0_div_69_ng_template_4_Template","bucket_quota_max_size","bucketQuotaMaxSizeError_r29","RgwUserFormComponent_div_0_div_71_ng_template_2_span_0_Template","RgwUserFormComponent_div_0_div_71_ng_template_2_span_1_Template","RgwUserFormComponent_div_0_div_71_ng_template_2_Template","bucket_quota_max_objects","bucketMaxObjectsError_r30","RgwUserFormComponent_div_0_Conditional_7_Template","RgwUserFormComponent_div_0_ng_template_12_Template","updateFieldsWhenTenanted","RgwUserFormComponent_div_0_div_17_Template","RgwUserFormComponent_div_0_ng_template_22_Template","RgwUserFormComponent_div_0_ng_template_28_Template","onMaxBucketsModeChange","RgwUserFormComponent_div_0_div_38_Template","RgwUserFormComponent_div_0_Conditional_47_Template","RgwUserFormComponent_div_0_fieldset_48_Template","RgwUserFormComponent_div_0_fieldset_49_Template","RgwUserFormComponent_div_0_fieldset_50_Template","RgwUserFormComponent_div_0_fieldset_51_Template","RgwUserFormComponent_div_0_div_58_Template","RgwUserFormComponent_div_0_div_59_Template","RgwUserFormComponent_div_0_div_60_Template","RgwUserFormComponent_div_0_div_61_Template","RgwUserFormComponent_div_0_div_68_Template","RgwUserFormComponent_div_0_div_69_Template","RgwUserFormComponent_div_0_div_70_Template","RgwUserFormComponent_div_0_div_71_Template","user_id","userError_r31","display_name","displayNameError_r32","email","emailError_r33","user_quota_enabled","bucket_quota_enabled","RgwUserFormComponent","rgwUserAccountService","submitObservables","showTenant","previousTenant","initialUserPolicies","ManagedPolicyName","AmazonS3FullAccess","ManagedPolicyArnMap","AmazonS3ReadOnlyAccess","pattern","unique","show_tenant","emailExists","tenantedAccountValidator","account_root_user","account_policies","max_buckets_mode","system","suspended","user_quota_max_size_unlimited","quotaMaxSizeValidator","user_quota_max_objects_unlimited","bucket_quota_max_size_unlimited","bucket_quota_max_objects_unlimited","observables","getQuota","quota","isAccountRoot","RGW","swift_keys","mapPerm","caps","cap","getUID","managed_user_policies","policy","selectedItems","p","loadingError","valueChanges","enable","account","tenantedAccount","notificationTitle","_isGeneralDirty","args","_getUpdateArgs","_getCreateArgs","_isUserQuotaDirty","userQuotaArgs","_getUserQuotaArgs","updateQuota","_isBucketQuotaDirty","bucketQuotaArgs","_getBucketQuotaArgs","ratelimitvalue","updateUserRateLimit","observableConcat","markAsUntouched","quotaMaxSize","setSubuser","mapPermissions","access","key_type","createSubuser","setCapability","oldCap","addCapability","setS3Key","userMatches","addS3Key","_getS3KeyUserCandidates","maxBucketsMode","parseInt","accountPolicies","_getAccountManagedPolicies","quota_type","max_size_kb","bytes","toFixed","subUser","selectedPolicies","initialPolicies","attach","detach","mode","goToCreateAccountForm","RgwUserFormComponent_div_0_Template","updateKeysSelection","keysColumns","tableAction","extractPolicyNamesFromArns","subuser_r3","RgwUserDetailsComponent_ng_container_0_div_1_tr_46_div_4_Template","cap_r4","RgwUserDetailsComponent_ng_container_0_div_1_tr_47_div_4_Template","mfa_ids","user_quota","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_14_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_15_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_16_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_20_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_21_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_td_22_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_14_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_15_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_16_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_20_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_21_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_td_22_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_1_Template","RgwUserDetailsComponent_ng_container_0_div_1_tr_26_Template","RgwUserDetailsComponent_ng_container_0_div_1_Conditional_45_Template","RgwUserDetailsComponent_ng_container_0_div_1_tr_46_Template","RgwUserDetailsComponent_ng_container_0_div_1_tr_47_Template","RgwUserDetailsComponent_ng_container_0_div_1_tr_48_Template","RgwUserDetailsComponent_ng_container_0_div_1_ng_container_49_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_50_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_51_Template","RgwUserDetailsComponent_ng_container_0_div_1_div_52_Template","maxBucketsMap","RgwUserDetailsComponent_ng_container_0_div_1_Template","RgwUserDetailsComponent","cdsModalService","keysSelection","showKeyModal","username","ref","arnList","Boolean","RgwUserDetailsComponent_ng_container_0_Template","RgwUserTabsComponent","stats","size_actual","RgwUserListComponent_ng_template_5_cd_usage_bar_0_Template","RgwUserListComponent_ng_template_5_ng_template_1_Template","RgwUserListComponent_ng_template_7_cd_usage_bar_0_Template","RgwUserListComponent_ng_template_7_ng_template_1_Template","userAccessLocked","RgwUserListComponent_ng_template_9_Conditional_3_Template","row_r7","RgwUserListComponent","users","userDataSubject","Subject","usernameTpl","cellClass","checkIcon","customTemplateConfig","userSizeTpl","userObjectTpl","userAccounts","mapUsersWithAccount","getUserUri","getUserList","acc","hasSingleSelection","RgwUserListComponent_cd_rgw_user_details_4_Template","RgwUserListComponent_ng_template_5_Template","RgwUserListComponent_ng_template_7_Template","RgwUserListComponent_ng_template_9_Template","RgwMultisiteMigrateComponent","activeModal","rgwZoneService","rgwRealmService","multisiteInfo","multisiteMigrateForm","CdFormGroup","realmName","UntypedFormControl","validators","realmNames","zoneNames","indexOf","zonegroupName","zonegroupNames","zoneName","zone_endpoints","zonegroup_endpoints","realmList","realm","zonegroupList","zoneList","zones","zone","RgwRealm","RgwZonegroup","endpoints","RgwZone","migrate","setRestartGatewayMessage","RgwMultisiteMigrateComponent_span_14_Template","RgwMultisiteMigrateComponent_span_15_Template","RgwMultisiteMigrateComponent_span_21_Template","RgwMultisiteMigrateComponent_span_22_Template","RgwMultisiteMigrateComponent_span_28_Template","RgwMultisiteMigrateComponent_span_29_Template","RgwMultisiteMigrateComponent_span_35_Template","RgwMultisiteMigrateComponent_span_36_Template","RgwMultisiteMigrateComponent_span_42_Template","RgwMultisiteMigrateComponent_span_43_Template","RgwMultisiteMigrateComponent_span_52_Template","formDir_r2","MIGRATE","pool_r2","RgwMultisiteZoneDeletionFormComponent_ng_container_9_strong_6_Template","showDangerText","RgwMultisiteZoneDeletionFormComponent_ng_container_9_div_12_Template","includedPools","displayText","RgwMultisiteZoneDeletionFormComponent","poolService","zoneData$","poolList$","getList","updateIncludedPools","zoneForm","deletePools","parent","poolList","pool","zonePool","pool_name","STANDARD","data_extra_pool","index_pool","RgwMultisiteZoneDeletionFormComponent_ng_container_9_Template","zone_r3","pool_r4","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_ng_container_9_strong_4_Template","ctx_r4","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_ng_container_4_Template","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_strong_8_Template","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_ng_container_9_Template","_r2","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_ng_container_13_Template","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_div_14_Template","zonesList","noPoolsConfirmation_r6","RgwMultisiteZonegroupDeletionFormComponent","zonesPools","zonegroupData$","zonegroupForm","zgData","RgwMultisiteZonegroupDeletionFormComponent_ng_container_9_Template","RgwMultisiteZonegroupDeletionFormComponent_ng_template_12_Template","large3x","spinner","spin","down","size24","realminfo_r3","token","RgwMultisiteExportComponent_div_7_cd_alert_panel_1_div_2_Template","RgwMultisiteExportComponent_div_7_div_2_hr_12_Template","realminfo_r4","RgwMultisiteExportComponent_div_7_cd_alert_panel_1_Template","RgwMultisiteExportComponent_div_7_div_2_Template","tokenValid","RgwMultisiteExportComponent","exportTokenForm","getRealmTokens","base64Matcher","RegExp","realmInfo","RgwMultisiteExportComponent_span_6_Template","RgwMultisiteExportComponent_div_7_Template","labelFocus","labelClick","RgwMultisiteImportComponent_div_41_span_5_Template","searchLabels","importTokenForm","frm_r4","hosts","messages","RgwMultisiteImportComponent_div_43_span_8_Template","RgwMultisiteImportComponent_div_43_span_9_Template","RgwMultisiteImportComponent_ng_container_44_span_6_Template","RgwMultisiteImportComponent_ng_container_44_span_7_Template","RgwMultisiteImportComponent_ng_container_44_span_8_Template","RgwMultisiteImportComponent","hostService","ipv4Rgx","ipv6Rgx","text$","merge","debounceTime","distinctUntilChanged","typeahead","isPopupOpen","labels","label","toLowerCase","slice","SelectMessages","empty","getAllHosts","host","option","SelectOption","getLabels","realmToken","rgw_frontend_port","placement","unmanaged","count","placementSpec","importRealmToken","NgbTypeahead","RgwMultisiteImportComponent_span_22_Template","RgwMultisiteImportComponent_span_28_Template","RgwMultisiteImportComponent_span_29_Template","RgwMultisiteImportComponent_div_40_Template","RgwMultisiteImportComponent_div_41_Template","RgwMultisiteImportComponent_div_42_Template","RgwMultisiteImportComponent_div_43_Template","RgwMultisiteImportComponent_ng_container_44_Template","IMPORT","RgwMultisiteRealmFormComponent_ng_template_13_span_0_Template","RgwMultisiteRealmFormComponent_ng_template_13_span_1_Template","multisiteRealmForm","docUrl","RgwMultisiteRealmFormComponent","docService","info","defaultsInfo","defaultRealmDisabled","default_realm","is_default","zgp","is_master","realm_id","isMaster","defaultRealmName","urlGenerator","newRealmName","RgwMultisiteRealmFormComponent_ng_template_13_Template","RgwMultisiteRealmFormComponent_cd_help_text_18_Template","RgwMultisiteRealmFormComponent_cd_help_text_19_Template","RgwMultisiteRealmFormComponent_cd_help_text_20_Template","realmNameError_r4","zonegroupName_r2","multisiteZoneForm","placement_r5","pool_r6","poolname","pool_r7","pool_r8","storageClass_r9","pool_r10","compression_r11","getZonePlacementData","RgwMultisiteZoneFormComponent_div_70_div_1_option_8_Template","RgwMultisiteZoneFormComponent_div_70_div_1_option_14_Template","RgwMultisiteZoneFormComponent_div_70_div_1_option_20_Template","RgwMultisiteZoneFormComponent_div_70_div_1_option_26_Template","getStorageClassData","RgwMultisiteZoneFormComponent_div_70_div_1_option_35_Template","RgwMultisiteZoneFormComponent_div_70_div_1_option_41_Template","RgwMultisiteZoneFormComponent_div_70_div_1_option_47_Template","placementDataPool","compressionTypes","RgwMultisiteZoneFormComponent_div_70_div_1_Template","RgwMultisiteZoneFormComponent","rgwZoneGroupService","disableDefault","disableMaster","isMetadataSync","syncStatusTimedOut","createSystemUser","userListReady","default_zone","master_zone","selectedZonegroup","placementIndexPool","placementDataExtraPool","storageDataPool","storageCompression","onZoneGroupChange","zg","defaultZonegroupName","parentNode","getPoolNames","pools","default_placement","isDefaultZone","isMasterZone","zoneInfo","placement_pools","placementPoolKeys","plc_pool","storageClasses","storageClassSelected","sc","compression_type","system_key","SystemKey","RgwMultisiteZoneFormComponent_option_14_Template","RgwMultisiteZoneFormComponent_span_20_Template","RgwMultisiteZoneFormComponent_span_21_Template","RgwMultisiteZoneFormComponent_span_26_Template","RgwMultisiteZoneFormComponent_span_27_Template","RgwMultisiteZoneFormComponent_cd_helper_28_Template","RgwMultisiteZoneFormComponent_span_34_Template","RgwMultisiteZoneFormComponent_span_35_Template","RgwMultisiteZoneFormComponent_cd_helper_36_Template","RgwMultisiteZoneFormComponent_span_42_Template","RgwMultisiteZoneFormComponent_span_43_Template","RgwMultisiteZoneFormComponent_div_70_Template","formDir_r12","realmName_r2","multisiteZonegroupForm","RgwMultisiteZonegroupFormComponent_div_44_span_6_Template","zonegroupZoneNames","labelsOption","isRemoveMasterZone","index_r6","_r5","removePlacementTarget","RgwMultisiteZonegroupFormComponent_div_45_div_4_span_14_Template","item_r7","formDir_r8","RgwMultisiteZonegroupFormComponent_div_45_div_4_Template","addPlacementTarget","trackByFn","RgwMultisiteZonegroupFormComponent","default_zonegroup","master_zonegroup","selectedRealm","allZonegroupZonesNames","reduce","accumulator","concat","allZoneNames","zgZoneNames","zgZoneIds","uniqueZones","from","fg","placement_id","removedZones","masterZoneName","addedZones","newZonegroupName","x","RgwMultisiteZonegroupFormComponent_option_15_Template","RgwMultisiteZonegroupFormComponent_span_21_Template","RgwMultisiteZonegroupFormComponent_span_22_Template","RgwMultisiteZonegroupFormComponent_span_27_Template","RgwMultisiteZonegroupFormComponent_cd_helper_28_Template","RgwMultisiteZonegroupFormComponent_cd_helper_29_Template","RgwMultisiteZonegroupFormComponent_span_34_Template","RgwMultisiteZonegroupFormComponent_cd_helper_35_Template","RgwMultisiteZonegroupFormComponent_cd_helper_36_Template","RgwMultisiteZonegroupFormComponent_span_42_Template","RgwMultisiteZonegroupFormComponent_span_43_Template","RgwMultisiteZonegroupFormComponent_div_44_Template","RgwMultisiteZonegroupFormComponent_div_45_Template","StepTitles","CreateRealmAndZonegroup","CreateZone","SelectCluster","Review","STEP_TITLES_MULTI_CLUSTER_CONFIGURED","STEP_TITLES_SINGLE_CLUSTER","STEP_TITLES_EXISTING_REALM","onConfigTypeChange","realm_r4","RgwMultisiteWizardComponent_div_12_div_4_option_5_Template","RgwMultisiteWizardComponent_div_12_div_5_span_9_Template","RgwMultisiteWizardComponent_div_12_div_5_span_10_Template","RgwMultisiteWizardComponent_div_12_div_5_span_19_Template","RgwMultisiteWizardComponent_div_12_div_5_span_20_Template","multisiteSetupForm","formDir_r5","rgwEndpoints","RgwMultisiteWizardComponent_div_12_div_3_Template","RgwMultisiteWizardComponent_div_12_div_4_Template","RgwMultisiteWizardComponent_div_12_div_5_Template","showConfigType","isMultiClusterConfigured","RgwMultisiteWizardComponent_ng_container_13_div_1_span_9_Template","RgwMultisiteWizardComponent_ng_container_13_div_1_span_10_Template","RgwMultisiteWizardComponent_ng_container_13_div_1_span_30_Template","RgwMultisiteWizardComponent_ng_container_13_div_1_span_31_Template","RgwMultisiteWizardComponent_ng_container_13_div_2_ng_container_1_Template","replicationTemplate_r6","RgwMultisiteWizardComponent_ng_container_13_div_1_Template","RgwMultisiteWizardComponent_ng_container_13_div_2_Template","RgwMultisiteWizardComponent_ng_container_14_div_1_ng_container_1_ng_container_1_Template","RgwMultisiteWizardComponent_ng_container_14_div_1_ng_container_1_Template","newRealmReviewTemplate_r7","RgwMultisiteWizardComponent_ng_container_14_div_2_ng_container_1_ng_container_1_ng_container_1_Template","reviewTemplate_r8","RgwMultisiteWizardComponent_ng_container_14_div_2_ng_container_1_ng_container_1_Template","setupCompleted","progressCompleteTemplate_r9","RgwMultisiteWizardComponent_ng_container_14_div_2_ng_container_1_Template","loadingTemplate_r10","RgwMultisiteWizardComponent_ng_container_14_div_1_Template","RgwMultisiteWizardComponent_ng_container_14_div_2_Template","RgwMultisiteWizardComponent_ng_template_15_ng_container_0_Template","cluster_detail_r12","cluster_alias","_r11","selectedCluster","RgwMultisiteWizardComponent_ng_template_17_option_5_Template","RgwMultisiteWizardComponent_ng_template_17_span_20_Template","clusterDetailsArray","RgwMultisiteWizardComponent_div_19_div_1_ng_container_1_ng_container_1_ng_container_1_Template","RgwMultisiteWizardComponent_div_19_div_1_ng_container_1_ng_container_1_Template","RgwMultisiteWizardComponent_div_19_div_1_ng_container_1_Template","RgwMultisiteWizardComponent_div_19_div_1_Template","onSkip","RgwMultisiteWizardComponent_ng_template_27_ng_container_0_ng_container_1_ng_container_1_Template","RgwMultisiteWizardComponent_ng_template_27_ng_container_0_ng_container_1_Template","exportTokenTemplate_r14","RgwMultisiteWizardComponent_ng_template_27_ng_container_0_Template","RgwMultisiteWizardComponent_ng_template_29_ng_container_0_Template","progressTemplate_r15","RgwMultisiteWizardComponent_ng_template_31_div_0_Template","stepsToSkip","executingTask","replace","tmp_15_0","RgwMultisiteWizardComponent_ng_template_35_div_0_hr_18_Template","realminfo_r16","RgwMultisiteWizardComponent_ng_template_35_div_0_Template","RgwMultisiteWizardComponent_ng_template_37_ng_container_4_ng_container_1_Template","RgwMultisiteWizardComponent_ng_template_37_ng_container_4_ng_container_2_Template","newRealmInfo_r17","replicationInfo_r18","RgwMultisiteWizardComponent_ng_template_37_ng_container_5_ng_container_1_Template","RgwMultisiteWizardComponent_ng_template_37_ng_container_5_ng_container_2_Template","existingRealmInfo_r19","RgwMultisiteWizardComponent_ng_template_37_ng_container_4_Template","RgwMultisiteWizardComponent_ng_template_37_ng_container_5_Template","RgwMultisiteWizardComponent_ng_template_43_div_0_Template","Protocol","ConfigType","HTTP","HTTPS","NewRealm","ExistingRealm","RgwMultisiteWizardComponent","wizardStepsService","multiClusterService","summaryService","location","cdr","mgrModuleService","stepTitles","pageURL","currentStepSub","getCurrentStep","step","currentStep","stepIndex","outlet","loadRGWEndpoints","getCluster","clusters","currentUrl","current_url","flat","cluster","onClick","setTotalSteps","summary","run","executing_tasks","getRgwModuleStatus","rgwModuleStatus","fetchDaemonStats","daemonStatsArray","populateRGWEndpoints","daemonStats","hostname","server_hostname","port","frontendConfig","statsArray","endpoint","replicationZoneName","configType","showSubmitButtonLabel","isLastStep","showCancelButtonLabel","isFirstStep","CANCEL","BACK","onNextStep","moveToNextStep","proceedWithSetup","zonegroupEndpoints","zoneEndpoints","setUpMultisiteReplication","showSuccessNotification","selectedRealmName","updateModuleState","subscription","updateCompleted$","onPreviousStep","back","moveToPreviousStep","stepTitle","steps","RgwMultisiteWizardComponent_div_12_Template","RgwMultisiteWizardComponent_ng_container_13_Template","RgwMultisiteWizardComponent_ng_container_14_Template","RgwMultisiteWizardComponent_ng_template_15_Template","RgwMultisiteWizardComponent_ng_template_17_Template","RgwMultisiteWizardComponent_div_19_Template","RgwMultisiteWizardComponent_button_21_Template","RgwMultisiteWizardComponent_cds_loading_26_Template","RgwMultisiteWizardComponent_ng_template_27_Template","RgwMultisiteWizardComponent_ng_template_29_Template","RgwMultisiteWizardComponent_ng_template_31_Template","RgwMultisiteWizardComponent_ng_template_33_Template","RgwMultisiteWizardComponent_ng_template_35_Template","RgwMultisiteWizardComponent_ng_template_37_Template","RgwMultisiteWizardComponent_ng_template_39_Template","RgwMultisiteWizardComponent_ng_template_41_Template","RgwMultisiteWizardComponent_ng_template_43_Template","ZoneData","customBadges","filterMsg","maxLength","customValidations","maxlength","RgwMultisiteSyncFlowModalComponent_ng_container_20_ng_container_9_Template","zoneMultiSelect_r3","RgwMultisiteSyncFlowModalComponent_ng_template_21_ng_container_4_Template","RgwMultisiteSyncFlowModalComponent_ng_template_21_ng_container_9_Template","sourceAndDestZone_r4","name_r6","warning","zoneSelection","RgwMultisiteSyncFlowModalComponent_ng_template_27__svg_svg_1_Template","RgwMultisiteSyncFlowModalComponent_ng_template_27_span_2_Template","zone_r7","currentFormGroupContext","frm_r8","name_r10","destinationZone_r11","onChangeZoneDropdown","RgwMultisiteSyncFlowModalComponent_ng_template_29_option_1_Template","RgwMultisiteSyncFlowModalComponent_ng_template_29_option_2_Template","RgwMultisiteSyncFlowModalComponent_ng_template_29_option_3_Template","RgwMultisiteSyncFlowModalComponent_ng_template_29_span_4_Template","zones_r12","RgwMultisiteSyncFlowModalComponent","succeededLabels","flowType","FlowType","groupType","symmetrical","createSymmetricalFlowForm","syncPolicySymmetricalFlowForm","directional","createDirectionalFlowForm","syncPolicyDirectionalFlowForm","flow_id","flowSelectedRow","bucket_name","groupExpandedRow","zonegroupObj","commonFormControls","source_zone","destination_zone","zoneType","selectedVal","group_id","groupName","flow_type","getZoneData","zoneDataToFilter","zoneDataForCondition","assignZoneValue","selectedZone","added","removed","createEditSyncFlow","EDITED","CREATED","dismiss","RgwMultisiteSyncFlowModalComponent_span_19_Template","RgwMultisiteSyncFlowModalComponent_ng_container_20_Template","RgwMultisiteSyncFlowModalComponent_ng_template_21_Template","RgwMultisiteSyncFlowModalComponent_ng_template_27_Template","RgwMultisiteSyncFlowModalComponent_ng_template_29_Template","directionalFlow_r13","name_r3","onZoneSelection","RgwMultisiteSyncPipeModalComponent_ng_template_47__svg_svg_1_Template","RgwMultisiteSyncPipeModalComponent_ng_template_47_span_2_Template","zone_r5","pipeForm","frm_r6","ALL_ZONES","RgwMultisiteSyncPipeModalComponent","sourceZones","destZones","allBucketSelectedHelpText","pipeSelectedRow","source","replaceAsteriskWithString","dest","pipe_id","source_bucket","source_zones","destination_bucket","destination_zones","availableDestZone","replaceWithAsterisk","str","createEditSyncPipe","RgwMultisiteSyncPipeModalComponent_ng_container_17_Template","RgwMultisiteSyncPipeModalComponent_ng_container_22_Template","RgwMultisiteSyncPipeModalComponent_ng_template_47_Template","zoneMultiSelect_r7","loadData","symmetricalFlowData","symmetricalFlowCols","symFlowSelection","symFlowTableActions","directionalFlowData","directionalFlowCols","dirFlowSelection","dirFlowTableActions","pipeSelection","pipeData","pipeCols","pipeTableActions","RgwMultisiteSyncPolicyDetailsComponent_ng_container_0_ng_template_6_Template","RgwMultisiteSyncPolicyDetailsComponent_ng_container_0_ng_template_10_Template","nav_r4","resourceType","MultisiteResourceType","flow","RgwMultisiteSyncPolicyDetailsComponent","symAddAction","openModal","symEditAction","symDeleteAction","deleteFlow","dirAddAction","dirDeleteAction","pipeAddAction","openPipeModal","pipeEditAction","pipeDeleteAction","deletePipe","changes","currentValue","getSyncPolicyGroup","data_flow","pipes","_x","_this","_asyncToGenerator","initialState","apply","arguments","flowIds","flow_ids","removeSyncFlow","_this2","pipeIds","pipe_ids","removeSyncPipe","RgwMultisiteSyncPolicyDetailsComponent_ng_container_0_Template","RgwMultisiteSyncPolicyDetailsComponent_ng_template_1_Template","RgwMultisiteTabsComponent","BASE_URL","RgwMultisiteSyncPolicyComponent","titleCasePipe","syncPolicyData","isInvisible","isHidden","tooltip","Enabled","class","Allowed","Forbidden","getEditURL","outlets","modal","transformSyncPolicyData","allSyncPolicyData","uniqueId","getPolicyList","getSyncPolicy","groupNames","group_names","removeSyncPolicyGroup","RgwMultisiteSyncPolicyComponent_cd_rgw_multisite_sync_policy_details_8_Template","RgwMultisiteSyncPolicyComponent_ng_template_9_Template","enableRgwModule","migrateTableAction","createTableActions","large","RgwMultisiteDetailsComponent_ng_template_17_ng_container_1_ng_container_1_ng_container_1_Template","nodeTemplateRef_r6","child_r4","depth_r5","RgwMultisiteDetailsComponent_ng_template_17_ng_container_1_ng_container_1_Template","node_r7","children","RgwMultisiteDetailsComponent_ng_template_17_ng_container_1_Template","danger","node_r9","warning_message","reweight","size20","deploy","parentChild","RgwMultisiteDetailsComponent_ng_template_19_span_2_span_1_Template","RgwMultisiteDetailsComponent_ng_template_19_span_2__svg_svg_2_Template","RgwMultisiteDetailsComponent_ng_template_19_span_2__svg_svg_3_Template","RgwMultisiteDetailsComponent_ng_template_19_span_2__svg_svg_4_Template","show_warning","_r10","$implicit","nodeDeleteData_r11","deleteTitle","isDisabled","secondary_zone","RgwMultisiteDetailsComponent_ng_template_19_span_2_Template","RgwMultisiteDetailsComponent_ng_template_19_span_3_Template","RgwMultisiteDetailsComponent_ng_template_19_span_4_Template","RgwMultisiteDetailsComponent_ng_template_19_span_5_Template","RgwMultisiteDetailsComponent_ng_template_19_ng_container_10_Template","activeNodeId","editTitle","getDisable","isDeleteDisabled","RgwMultisiteDetailsComponent_ng_container_21_ng_container_1_Template","node_r12","metadataTitle","RgwMultisiteDetailsComponent","toNode","labelTpl","labelContext","expanded","nodes","_nodes","changeDetectionRef","timerService","timerServiceVariable","sub","noDefaultRealm","noMasterZone","noRealmExists","disableExport","loadingIndicator","realmIds","zoneIds","defaultRealmId","defaultZonegroupId","defaultZoneId","showMigrateAndReplicationActions","restartGatewayMessage","rgwModuleData","MODULE_NAME","NAVIGATE_TO","entity","entityName","bsModalRef","openMultisiteSetupWizard","openMigrateModal","openImportModal","openExportModal","getDisableExport","getDisableImport","wrench","importAction","download","exportAction","upload","EXPORT","multisiteReplicationActions","SETUP_MULTISITE_REPLICATION","startPollingMultisiteInfo","configOpt","getAllRealmsInfo","getAllZonesInfo","TIMER_SERVICE_PERIOD","abstractTreeData","_error","allNodes","rootNodes","firstChildNodes","allFirstChildNodes","secondChildNodes","allSecondChildNodes","getDefaultsEntities","getRealmTree","getZonegroupTree","zoneResult","getZoneTree","evaluateMigrateAndReplicationActions","restartGatewayMessage$","checkRestartGatewayMessage","realm_name","defaultRealm","defaultZonegroup","defaultZone","defaultZoneName","onNodeSelected","node","setTimeout","masterZonegroupCount","zone_zonegroup","deletionForm","RgwMultisiteDetailsComponent_cd_alert_panel_2_Template","RgwMultisiteDetailsComponent_cd_alert_panel_3_Template","RgwMultisiteDetailsComponent_cd_table_actions_5_Template","RgwMultisiteDetailsComponent_cd_table_actions_6_Template","RgwMultisiteDetailsComponent_i_14_Template","RgwMultisiteDetailsComponent_ng_template_17_Template","RgwMultisiteDetailsComponent_ng_template_19_Template","RgwMultisiteDetailsComponent_ng_container_21_Template","RgwMultisiteDetailsComponent_div_22_Template","RgwSyncPrimaryZoneComponent","template","large2x","cubes","metadataSyncInfo","syncstatus","RgwSyncMetadataInfoComponent_span_1_ng_template_6_a_0_Template","RgwSyncMetadataInfoComponent_span_1_ng_template_6_a_1_Template","status_r2","RgwSyncMetadataInfoComponent_span_1_li_19_span_1_span_1_Template","RgwSyncMetadataInfoComponent_span_1_li_19_span_1_span_2_Template","RgwSyncMetadataInfoComponent_span_1_li_19_span_1_Template","RgwSyncMetadataInfoComponent_span_1_li_19_span_2_Template","timestamp","RgwSyncMetadataInfoComponent_span_1_ng_template_2_Template","RgwSyncMetadataInfoComponent_span_1_ng_template_6_Template","RgwSyncMetadataInfoComponent_span_1_li_11_Template","RgwSyncMetadataInfoComponent_span_1_li_19_Template","RgwSyncMetadataInfoComponent_span_1_li_22_Template","align","showMetadataStatus_r4","fullSyncStatus","upToDateTpl_r3","RgwSyncMetadataInfoComponent","RgwSyncMetadataInfoComponent_span_0_Template","RgwSyncMetadataInfoComponent_span_1_Template","RgwSyncDataInfoComponent_ng_template_5_a_0_Template","RgwSyncDataInfoComponent_ng_template_5_a_1_Template","RgwSyncDataInfoComponent_li_18_span_1_span_1_Template","RgwSyncDataInfoComponent_li_18_span_1_span_2_Template","RgwSyncDataInfoComponent_li_18_span_1_Template","RgwSyncDataInfoComponent_li_18_span_2_Template","RgwSyncDataInfoComponent","RgwSyncDataInfoComponent_ng_template_1_Template","RgwSyncDataInfoComponent_ng_template_5_Template","RgwSyncDataInfoComponent_li_10_Template","RgwSyncDataInfoComponent_li_18_Template","RgwSyncDataInfoComponent_li_21_Template","showStatus_r4","rgwDaemonCount","rgwRealmCount","rgwZonegroupCount","rgwZoneCount","rgwBucketCount","UserCount","objectCount","RgwOverviewDashboardComponent_div_32_div_1_div_7_cd_card_1_cd_card_2_span_1_Template","RgwOverviewDashboardComponent_div_32_div_1_div_7_cd_card_1_cd_card_2_span_2_Template","title_r4","_c5","RgwOverviewDashboardComponent_div_32_div_1_div_7_cd_card_1_cd_card_2_Template","chartTitles","RgwOverviewDashboardComponent_div_32_div_1_div_7_cd_card_1_Template","replicaZonesInfo","RgwOverviewDashboardComponent_div_32_div_1_span_2_Template","RgwOverviewDashboardComponent_div_32_div_1_span_3_Template","RgwOverviewDashboardComponent_div_32_div_1_span_6_Template","RgwOverviewDashboardComponent_div_32_div_1_div_7_Template","RgwOverviewDashboardComponent_div_32_div_1_Template","showMultisiteCard","notConfigured_r5","RgwOverviewDashboardComponent","refreshIntervalService","prometheusService","interval","totalPoolUsedBytes","averageObjectSize","queriesResults","RGW_REQUEST_PER_SECOND","BANDWIDTH","AVG_GET_LATENCY","AVG_PUT_LATENCY","ReplaySubject","intervalData$","fetchDataSub","combineLatest","totalNumObjects$","totalUsedCapacity$","averageObjectSize$","getTotalBucketsAndUsersLength","daemonData","usedCapacity","averageSize","bucketData","buckets_count","users_count","getSyncStatus","realmSub","ZonegroupSub","ZoneSUb","getPrometheusData","lastHourDateObject","multisiteSyncStatus$","dataSyncInfo","primaryZoneData","errorMessage","detail","shareReplay","selectedTime","getRangeQueriesData","queries","RgwOverviewDashboardComponent_cd_card_row_3_Template","RgwOverviewDashboardComponent_cd_card_row_4_Template","RgwOverviewDashboardComponent_cd_card_row_5_Template","RgwOverviewDashboardComponent_cd_card_row_6_Template","RgwOverviewDashboardComponent_cd_card_row_7_Template","RgwOverviewDashboardComponent_cd_card_row_8_Template","RgwOverviewDashboardComponent_cd_card_row_9_Template","RgwOverviewDashboardComponent_ng_template_29_Template","RgwOverviewDashboardComponent_span_31_Template","RgwOverviewDashboardComponent_div_32_Template","GET_BANDWIDTH","PUT_BANDWIDTH","RgwMultisiteSyncPolicyFormComponent_form_6_span_8_Template","RgwMultisiteSyncPolicyFormComponent_form_6_span_23_Template","RgwMultisiteSyncPolicyFormComponent_form_6_span_29_Template","syncPolicyForm","syncPolicyStatus","ALLOWED","FORBIDDEN","bucketDataSource","RgwMultisiteSyncPolicyFormComponent","RgwMultisiteSyncPolicyStatus","mergeMap","getBucketTypeahead","paramMap","loadingStart","syncPolicy","state","reload","modifySyncPolicyGroup","createSyncPolicyGroup","requiredExistenceResult","observableTimer","switchMapTo","existenceResult","bucketNameNotAllowed","bucketList","RgwMultisiteSyncPolicyFormComponent_form_6_Template","provider_r4","setKmsProvider","RgwConfigModalComponent_div_19_option_6_Template","RgwConfigModalComponent_div_19_option_7_Template","RgwConfigModalComponent_div_19_option_8_Template","RgwConfigModalComponent_div_19_span_12_Template","configForm","auth_r6","RgwConfigModalComponent_div_20_div_1_option_6_Template","RgwConfigModalComponent_div_20_div_1_span_10_Template","secret_engine_r7","RgwConfigModalComponent_div_20_div_2_option_6_Template","RgwConfigModalComponent_div_20_div_2_span_10_Template","RgwConfigModalComponent_div_20_div_3_span_9_Template","RgwConfigModalComponent_div_20_div_5_span_3_Template","RgwConfigModalComponent_div_20_div_5_span_4_Template","RgwConfigModalComponent_div_20_div_5_span_8_Template","RgwConfigModalComponent_div_20_div_5_span_9_Template","RgwConfigModalComponent_div_20_div_5_span_10_Template","RgwConfigModalComponent_div_20_div_6_div_1_span_11_Template","RgwConfigModalComponent_div_20_div_6_div_1_Template","RgwConfigModalComponent_div_20_div_1_Template","RgwConfigModalComponent_div_20_div_2_Template","RgwConfigModalComponent_div_20_div_3_Template","RgwConfigModalComponent_div_20_div_4_Template","RgwConfigModalComponent_div_20_div_5_Template","RgwConfigModalComponent_div_20_div_6_Template","RgwConfigModalComponent_div_20_div_7_Template","RgwConfigModalComponent_div_20_div_8_Template","RgwConfigModalComponent_div_20_div_9_Template","RgwConfigModalComponent_div_20_div_10_Template","RgwConfigModalComponent","vaultAddress","selectedEncryptionConfigValues","allEncryptionConfigValues","patchValues","addr","encryptionType","backend","auth","secret_engine","secret_path","namespace","kms_key_template","s3_key_template","password","ssl_cert","ssl_cacert","ca_path","client_cert","ssl_clientcert","client_key","ssl_clientkey","checkKmsProviders","selectedEncryptionType","kmsBackends","provider","s3Backends","kmsEnabled","s3Enabled","encryptionData","token_file","setEncryptionConfig","RgwConfigModalComponent_div_19_Template","RgwConfigModalComponent_div_20_Template","SUBMIT","rgwEncryptionConfigKeys","transformedData","RgwConfigDetailsComponent_ng_container_0_ng_template_6_Template","nav_r2","verify_ssl","RgwConfigDetailsComponent","excludeProps","filteredEncryptionConfigValues","obj","RgwConfigDetailsComponent_ng_container_0_Template","RgwConfigurationPageComponent_ng_template_5_cd_rgw_config_details_3_Template","encryptionConfigValues","RgwConfigurationPageComponent","disableCreate","openRgwConfigModal","column","getBackend","backendSet","allEncryptionValues","flattenData","combinedArray","kmsData","s3Data","RgwConfigurationPageComponent_ng_template_5_Template","RgwStorageClassService","baseUrl","removeStorageClass","createStorageClass","requestModel","editStorageClass","getPlacement_target","zoneGroupText","targetPathText","target_path","targetAccessKeyText","targetSecretKeyText","secret","hostStyleText","host_style","retainHeadObjectText","allowReadThroughText","readthroughrestoreDaysText","RgwStorageClassDetailsComponent_ng_container_0_Conditional_13_tr_0_Template","isTierMatch","glacierRestoreDayText","glacier_restore_days","glacierRestoreTiertypeText","glacier_restore_tier_type","restoreStorageClassText","multipartMinPartText","multipart_min_part_size","multipartSyncThreholdText","multipart_sync_threshold","RgwStorageClassDetailsComponent_ng_container_0_Conditional_5_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_6_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_7_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_8_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_9_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_10_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_11_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_12_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_13_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_14_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_15_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_16_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_17_Template","RgwStorageClassDetailsComponent_ng_container_0_Conditional_18_Template","RgwStorageClassDetailsComponent","restoreDaysText","storageDetails","RgwStorageClassDetailsComponent_ng_container_0_Template","RgwStorageClassListComponent","rgwStorageClassService","getStorageUri","encodeURI","REMOVE","removeStorageClassModal","tierConfig","tier","mapTierTypeDisplay","transformTierData","zone_group","RgwStorageClassListComponent_cd_rgw_storage_class_details_6_Template","_16","elem","attrs","xmlns","viewBox","fill","width","d","_20","cx","cy","r","_32","RgwUserAccountsDetailsComponent","dimlessBinary","createDisplayValues","RgwUserAccountsDetailsComponent_div_0_Template","RgwUserAccountsDetailsComponent_div_1_Template","RgwUserAccountsComponent","rgwUserAccountsService","getAccountsList","account_name","account_names","RgwUserAccountsComponent_cd_rgw_user_accounts_details_7_Template","RgwUserAccountsFormComponent_ng_container_1_ng_template_11_span_0_Template","accountForm","RgwUserAccountsFormComponent_ng_container_1_ng_template_21_span_0_Template","RgwUserAccountsFormComponent_ng_container_1_span_27_ng_container_1_Template","accountMaxValueTemplate_r4","_c10","RgwUserAccountsFormComponent_ng_container_1_span_32_ng_container_1_Template","_c11","RgwUserAccountsFormComponent_ng_container_1_span_37_ng_container_1_Template","_c12","RgwUserAccountsFormComponent_ng_container_1_span_42_ng_container_1_Template","_c13","RgwUserAccountsFormComponent_ng_container_1_span_47_ng_container_1_Template","_c14","RgwUserAccountsFormComponent_ng_container_1_ng_template_11_Template","RgwUserAccountsFormComponent_ng_container_1_ng_template_21_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_25_Template","RgwUserAccountsFormComponent_ng_container_1_span_27_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_30_Template","RgwUserAccountsFormComponent_ng_container_1_span_32_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_35_Template","RgwUserAccountsFormComponent_ng_container_1_span_37_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_40_Template","RgwUserAccountsFormComponent_ng_container_1_span_42_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_45_Template","RgwUserAccountsFormComponent_ng_container_1_span_47_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_49_Template","RgwUserAccountsFormComponent_ng_container_1_ng_container_51_Template","accountIdError_r5","emailError_r6","selectModeTemplate_r7","quotaTemplate_r8","_c7","_c6","_c9","_c8","formControl_r10","formControl","onModeChange","getHelperTextForMode","RgwUserAccountsFormComponent_ng_template_4_ng_template_3_span_0_Template","RgwUserAccountsFormComponent_ng_template_4_ng_template_3_span_1_Template","RgwUserAccountsFormComponent_ng_template_4_ng_template_3_span_2_Template","formControl_r11","RgwUserAccountsFormComponent_ng_template_4_ng_template_3_Template","maxValError_r12","formControl_r15","unlimitedSize","quotaType_r14","RgwUserAccountsFormComponent_ng_template_6_div_9_div_2_ng_template_4_span_0_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_div_2_ng_template_4_span_1_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_div_2_ng_template_4_span_2_Template","maxSize","RgwUserAccountsFormComponent_ng_template_6_div_9_div_2_ng_template_4_Template","quotaSizeError_r16","unlimitedObjects","RgwUserAccountsFormComponent_ng_template_6_div_9_div_4_ng_template_4_span_0_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_div_4_ng_template_4_span_1_Template","maxObjects","RgwUserAccountsFormComponent_ng_template_6_div_9_div_4_ng_template_4_Template","quotaObjectError_r17","RgwUserAccountsFormComponent_ng_template_6_div_9_cds_checkbox_1_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_div_2_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_cds_checkbox_3_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_div_4_Template","RgwUserAccountsFormComponent_ng_template_6_div_4_Template","RgwUserAccountsFormComponent_ng_template_6_ng_template_5_Template","RgwUserAccountsFormComponent_ng_template_6_div_9_Template","bucket_r18","RgwUserAccountsFormComponent","accountData","formControlName","mapValuesForMode","max_users_mode","max_users","min","max_roles_mode","max_roles","max_groups_mode","max_groups","max_access_keys_mode","max_access_keys","account_quota_enabled","account_quota_max_size_unlimited","account_quota_max_size","account_quota_max_objects_unlimited","account_quota_max_objects","exec","formvalue","getValueFromFormControl","max_group","setQuotaConfig","_isQuotaConfDirty","accountQuotaArgs","_getQuotaArgs","quotaType","t","resourceName","toUpperCase","RgwUserAccountsFormComponent_ng_container_1_Template","RgwUserAccountsFormComponent_ng_template_2_Template","RgwUserAccountsFormComponent_ng_template_4_Template","RgwUserAccountsFormComponent_ng_template_6_Template","opt_r2","RgwStorageClassFormComponent_ng_container_1_ng_template_13_span_0_Template","storageClassForm","zonegrp_r5","RgwStorageClassFormComponent_ng_container_1_ng_template_19_span_0_Template","placementTarget_r6","RgwStorageClassFormComponent_ng_container_1_ng_template_26_span_0_Template","RgwStorageClassFormComponent_ng_container_1_ng_template_32_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_6_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_12_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_12_span_1_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_20_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_28_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_34_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_47_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_47_span_1_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_6_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_12_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_20_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_28_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_34_Template","onAllowReadThroughChange","RgwStorageClassFormComponent_ng_container_1_Conditional_34_ng_template_47_Template","regionError_r8","helpTextLabels","targetRegionText","endpointError_r9","targetEndpointText","accessError_r10","secretError_r11","targetError_r12","readThroughError_r13","standard","RgwStorageClassFormComponent_ng_container_1_Conditional_35_ng_template_12_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_35_ng_template_16_span_0_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_35_ng_template_16_span_1_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_35_ng_template_12_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_35_ng_template_16_Template","glacierError_r14","tiertypeText","expedited","glacierRestoreError_r15","RgwStorageClassFormComponent_ng_container_1_Conditional_36_ng_template_2_Template","showAdvanced","title_r17","multipartSyncThresholdText","RgwStorageClassFormComponent_ng_container_1_option_12_Template","RgwStorageClassFormComponent_ng_container_1_ng_template_13_Template","onZonegroupChange","RgwStorageClassFormComponent_ng_container_1_option_18_Template","RgwStorageClassFormComponent_ng_container_1_ng_template_19_Template","RgwStorageClassFormComponent_ng_container_1_option_25_Template","RgwStorageClassFormComponent_ng_container_1_ng_template_26_Template","RgwStorageClassFormComponent_ng_container_1_ng_template_32_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_34_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_35_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_36_Template","RgwStorageClassFormComponent_ng_container_1_Conditional_37_Template","storageClassText","storageError_r18","storageClassOptions","zonegroupError_r19","placementError_r20","storageClassError_r21","RgwStorageClassFormComponent","rgwStorageService","allowReadThrough","storageClassTypeText","updateTierTypeHelpText","loadZoneGroup","storageClassInfo","placementTargetInfo","tierTargetInfo","getTierTargetByStorageClass","response","region","storageClassType","target_endpoint","glacierResponse","updateValidatorsBasedOnStorageClass","clearValidators","defaultValues","selectedZoneGroup","zoneGroupDetails","zoneGroupControl","defaultPlacementTarget","placementTargetNames","component","buildRequest","storageclassName","checked","readThroughDaysControl","errors","rawFormValue","placementId","buildPlacementTargets","baseTarget","tier_config","RgwStorageClassFormComponent_ng_container_1_Template","push_endpoint_args","push_endpoint_topic","push_endpoint","stored_secret","persistent","persistent_queue","time_to_live","max_retries","retry_sleep_duration","opaqueData","subscribed_buckets","RgwTopicDetailsComponent","RgwTopicDetailsComponent_ng_container_0_Template","RgwTopicListComponent","topicsSubject","topics$","asObservable","RgwTopicListComponent_cd_rgw_topic_details_5_Template","KAFKA_MECHANISM","PLAIN","SCRAM256","SCRAM512","END_POINT_TYPE","AMQP","Kafka","AMQP_ACK_LEVEL","none","broker","routable","KAFKA_ACK_LEVEL","URLPort","HostURLProtocol","Endpoint","UrlProtocol","AMQPS","KAFKA","KAFKA_SSL","https","amqp","amqps","kafka","URL_FORMAT_PLACEHOLDERS","data_r3","RgwTopicFormComponent_div_0_ng_template_16_span_0_Template","topicForm","data_r5","RgwTopicFormComponent_div_0_ng_template_23_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_6_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_6_span_1_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_26_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_30_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_30_span_1_Template","hasError","passwordValuation","RgwTopicFormComponent_div_0_ng_container_25_div_32_div_5_ng_template_4_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_div_32_div_5_ng_template_4_span_1_Template","generatePushEndpoint","RgwTopicFormComponent_div_0_ng_container_25_div_32_div_5_ng_template_4_Template","passwordError_r9","RgwTopicFormComponent_div_0_ng_container_25_div_32_div_5_Template","selectedOption","hostProtocols","RgwTopicFormComponent_div_0_ng_container_25_ng_template_39_span_0_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_ng_container_6_div_2_Template","data_r11","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_10_option_4_Template","kafkaMechanism","level_r12","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_12_option_4_Template","ackLevels","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_ng_container_6_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_8_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_9_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_10_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_12_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_div_13_Template","attributeHelpText","RgwTopicFormComponent_div_0_ng_container_25_ng_template_6_Template","_r6","onSecureSSLChange","RgwTopicFormComponent_div_0_ng_container_25_div_19_Template","RgwTopicFormComponent_div_0_ng_container_25_div_20_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_26_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_30_Template","RgwTopicFormComponent_div_0_ng_container_25_div_32_Template","RgwTopicFormComponent_div_0_ng_container_25_div_33_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_template_39_Template","RgwTopicFormComponent_div_0_ng_container_25_ng_container_41_Template","nameError_r13","fqdn","fqdnError_r14","portError_r15","endpointError_r16","pushEndpointPlaceholder","onEndpointTypeChange","RgwTopicFormComponent_div_0_option_13_Template","RgwTopicFormComponent_div_0_option_14_Template","RgwTopicFormComponent_div_0_option_15_Template","RgwTopicFormComponent_div_0_ng_template_16_Template","RgwTopicFormComponent_div_0_option_20_Template","RgwTopicFormComponent_div_0_option_21_Template","RgwTopicFormComponent_div_0_option_22_Template","RgwTopicFormComponent_div_0_ng_template_23_Template","RgwTopicFormComponent_div_0_ng_container_25_Template","endpointType","topicTypeError_r17","ownerError_r18","RgwTopicFormComponent","protocolPlaceholders","topicPolicyTextArea","sort","topicId","snapshot","loadTopicData","setMechanism","verifySSLControl","useSSLControl","getPushUrlQueryValues","OpaqueData","enable_ssl","cloud_events","vhost","ca_location","amqp_exchange","ack_level","use_ssl","kafka_brokers","mechanism","secureSslChecked","setDefaultPort","enableSSL","selectedValue","getPort","ssl","protocol","mechanismControl","defaultMechanism","secureSsl","generatedEndpoint","generateAMQPEndpoint","generateKafkaEndpoint","userAmqp","passwordAmqp","vhostAmqp","kafkaProtocol","userKafka","passwordKafka","kafkaBrokers","getTopicPolicy","pushEndpointUrl","convertUrlToObject","pushendpointArg","pushendpointAddarg","extractAdditionalValues","pathname","urlObj","URL","hash","getPortFromUrl","pairs","pair","topicPolicy","generatePayload","basePayload","opaque_data","topicType","additionalFieldsMap","RgwTopicFormComponent_div_0_Template","RgwModule","iconService","registerAll","EditIcon","ScalesIcon","CubeIcon","UserIcon","ShareIcon","ViewIcon","PasswordIcon","ArrowDownIcon","ProgressBarRoundIcon","ToolsIcon","ParentChild","UserAccessLocked","TitleCasePipe","imports","CommonModule","CephSharedModule","SharedModule","FormsModule","ReactiveFormsModule","withConfig","callSetDisabledState","PerformanceCounterModule","NgbNavModule","RouterModule","NgbTooltipModule","NgbPopoverModule","PipesModule","TreeviewModule","DataTableModule","DashboardV3Module","NgbTypeaheadModule","ModalModule","GridModule","ProgressIndicatorModule","CodeSnippetModule","ButtonModule","LoadingModule","IconModule","NgbProgressbar","InputModule","AccordionModule","CheckboxModule","NumberModule","TabsModule","TagModule","TooltipModule","ComboBoxModule","ToggletipModule","RadioModule","SelectModule","LayoutModule","routes","redirectTo","pathMatch","breadcrumbs","ActionLabels","tabs","CRUDTableComponent","CrudFormComponent","canActivateChild","FeatureTogglesGuardService","ModuleStatusGuardService","moduleStatusGuardConfig","uiApiPath","section","section_info","header","NfsClusterComponent","NfsFormComponent","RoutedRgwModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/ceph/rgw/models/rgw-bucket-encryption.ts","./src/app/ceph/rgw/models/rgw-bucket-mfa-delete.ts","./src/app/ceph/rgw/rgw-bucket-form/rgw-bucket-acl-permissions.enum.ts","./src/app/ceph/rgw/models/rgw-bucket-versioning.ts","./src/app/ceph/rgw/bucket-tag-modal/bucket-tag-modal.component.html","./src/app/ceph/rgw/bucket-tag-modal/bucket-tag-modal.component.ts","./src/app/shared/services/text-area-xml-formatter.service.ts","./src/app/shared/directives/dimless-binary-per-minute.directive.ts","./src/app/ceph/rgw/rgw-rate-limit/rgw-rate-limit.component.html","./src/app/ceph/rgw/rgw-rate-limit/rgw-rate-limit.component.ts","./src/app/shared/api/rgw-user-accounts.service.ts","./src/app/ceph/rgw/rgw-bucket-form/rgw-bucket-form.component.html","./src/app/ceph/rgw/rgw-bucket-form/rgw-bucket-form.component.ts","./src/app/ceph/rgw/models/rgw-storage-class.model.ts","./src/app/ceph/rgw/utils/rgw-bucket-tiering.ts","./src/app/ceph/rgw/rgw-bucket-tiering-form/rgw-bucket-tiering-form.component.html","./src/app/ceph/rgw/rgw-bucket-tiering-form/rgw-bucket-tiering-form.component.ts","./src/app/ceph/rgw/rgw-bucket-lifecycle-list/rgw-bucket-lifecycle-list.component.ts","./src/app/ceph/rgw/rgw-bucket-lifecycle-list/rgw-bucket-lifecycle-list.component.html","./src/app/ceph/rgw/rgw-rate-limit-details/rgw-rate-limit-details.component.html","./src/app/ceph/rgw/rgw-rate-limit-details/rgw-rate-limit-details.component.ts","./src/app/shared/api/rgw-topic.service.ts","./src/app/shared/models/notification-configuration.model.ts","./src/app/ceph/rgw/rgw-notification-form/rgw-notification-form.component.html","./src/app/ceph/rgw/rgw-notification-form/rgw-notification-form.component.ts","./src/app/ceph/rgw/rgw-bucket-notification-list/rgw-bucket-notification-list.component.html","./src/app/ceph/rgw/rgw-bucket-notification-list/rgw-bucket-notification-list.component.ts","./src/app/shared/services/json-to-xml.service.ts","./src/app/shared/pipes/xml.pipe.ts","./src/app/ceph/rgw/rgw-bucket-details/rgw-bucket-details.component.html","./src/app/ceph/rgw/rgw-bucket-details/rgw-bucket-details.component.ts","./src/app/ceph/rgw/rgw-bucket-list/rgw-bucket-list.component.html","./src/app/ceph/rgw/rgw-bucket-list/rgw-bucket-list.component.ts","./src/app/ceph/rgw/models/rgw-user-capabilities.ts","./src/app/ceph/rgw/rgw-daemon-details/rgw-daemon-details.component.html","./src/app/ceph/rgw/rgw-daemon-details/rgw-daemon-details.component.ts","./src/app/ceph/rgw/rgw-daemon-list/rgw-daemon-list.component.html","./src/app/ceph/rgw/rgw-daemon-list/rgw-daemon-list.component.ts","./src/app/ceph/rgw/rgw-user-capability-modal/rgw-user-capability-modal.component.html","./src/app/ceph/rgw/rgw-user-capability-modal/rgw-user-capability-modal.component.ts","./src/app/ceph/rgw/rgw-user-s3-key-modal/rgw-user-s3-key-modal.component.html","./src/app/ceph/rgw/rgw-user-s3-key-modal/rgw-user-s3-key-modal.component.ts","./src/app/ceph/rgw/models/rgw-user-subuser.ts","./src/app/ceph/rgw/rgw-user-subuser-modal/rgw-user-subuser-modal.component.html","./src/app/ceph/rgw/rgw-user-subuser-modal/rgw-user-subuser-modal.component.ts","./src/app/ceph/rgw/rgw-user-swift-key-modal/rgw-user-swift-key-modal.component.ts","./src/app/ceph/rgw/rgw-user-swift-key-modal/rgw-user-swift-key-modal.component.html","./src/app/ceph/rgw/rgw-user-form/rgw-user-form.component.html","./src/app/ceph/rgw/rgw-user-form/rgw-user-form.component.ts","./src/app/ceph/rgw/rgw-user-details/rgw-user-details.component.html","./src/app/ceph/rgw/rgw-user-details/rgw-user-details.component.ts","./src/app/ceph/rgw/rgw-user-tabs/rgw-user-tabs.component.ts","./src/app/ceph/rgw/rgw-user-tabs/rgw-user-tabs.component.html","./src/app/ceph/rgw/rgw-user-list/rgw-user-list.component.html","./src/app/ceph/rgw/rgw-user-list/rgw-user-list.component.ts","./src/app/ceph/rgw/rgw-multisite-migrate/rgw-multisite-migrate.component.html","./src/app/ceph/rgw/rgw-multisite-migrate/rgw-multisite-migrate.component.ts","./src/app/ceph/rgw/models/rgw-multisite-zone-deletion-form/rgw-multisite-zone-deletion-form.component.html","./src/app/ceph/rgw/models/rgw-multisite-zone-deletion-form/rgw-multisite-zone-deletion-form.component.ts","./src/app/ceph/rgw/models/rgw-multisite-zonegroup-deletion-form/rgw-multisite-zonegroup-deletion-form.component.html","./src/app/ceph/rgw/models/rgw-multisite-zonegroup-deletion-form/rgw-multisite-zonegroup-deletion-form.component.ts","./src/app/ceph/rgw/rgw-multisite-export/rgw-multisite-export.component.html","./src/app/ceph/rgw/rgw-multisite-export/rgw-multisite-export.component.ts","./src/app/ceph/rgw/rgw-multisite-import/rgw-multisite-import.component.html","./src/app/ceph/rgw/rgw-multisite-import/rgw-multisite-import.component.ts","./src/app/ceph/rgw/rgw-multisite-realm-form/rgw-multisite-realm-form.component.html","./src/app/ceph/rgw/rgw-multisite-realm-form/rgw-multisite-realm-form.component.ts","./src/app/ceph/rgw/rgw-multisite-zone-form/rgw-multisite-zone-form.component.html","./src/app/ceph/rgw/rgw-multisite-zone-form/rgw-multisite-zone-form.component.ts","./src/app/ceph/rgw/rgw-multisite-zonegroup-form/rgw-multisite-zonegroup-form.component.html","./src/app/ceph/rgw/rgw-multisite-zonegroup-form/rgw-multisite-zonegroup-form.component.ts","./src/app/ceph/rgw/rgw-multisite-wizard/multisite-wizard-steps.enum.ts","./src/app/ceph/rgw/rgw-multisite-wizard/rgw-multisite-wizard.component.html","./src/app/ceph/rgw/rgw-multisite-wizard/rgw-multisite-wizard.component.ts","./src/app/ceph/rgw/models/rgw-multisite-zone-selector.ts","./src/app/ceph/rgw/rgw-multisite-sync-flow-modal/rgw-multisite-sync-flow-modal.component.html","./src/app/ceph/rgw/rgw-multisite-sync-flow-modal/rgw-multisite-sync-flow-modal.component.ts","./src/app/ceph/rgw/rgw-multisite-sync-pipe-modal/rgw-multisite-sync-pipe-modal.component.html","./src/app/ceph/rgw/rgw-multisite-sync-pipe-modal/rgw-multisite-sync-pipe-modal.component.ts","./src/app/ceph/rgw/rgw-multisite-sync-policy-details/rgw-multisite-sync-policy-details.component.html","./src/app/ceph/rgw/rgw-multisite-sync-policy-details/rgw-multisite-sync-policy-details.component.ts","./src/app/ceph/rgw/rgw-multisite-tabs/rgw-multisite-tabs.component.ts","./src/app/ceph/rgw/rgw-multisite-tabs/rgw-multisite-tabs.component.html","./src/app/ceph/rgw/rgw-multisite-sync-policy/rgw-multisite-sync-policy.component.html","./src/app/ceph/rgw/rgw-multisite-sync-policy/rgw-multisite-sync-policy.component.ts","./src/app/ceph/rgw/rgw-multisite-details/rgw-multisite-details.component.html","./src/app/ceph/rgw/rgw-multisite-details/rgw-multisite-details.component.ts","./src/app/ceph/rgw/rgw-sync-primary-zone/rgw-sync-primary-zone.component.ts","./src/app/ceph/rgw/rgw-sync-primary-zone/rgw-sync-primary-zone.component.html","./src/app/ceph/rgw/rgw-sync-metadata-info/rgw-sync-metadata-info.component.html","./src/app/ceph/rgw/rgw-sync-metadata-info/rgw-sync-metadata-info.component.ts","./src/app/ceph/rgw/rgw-sync-data-info/rgw-sync-data-info.component.html","./src/app/ceph/rgw/rgw-sync-data-info/rgw-sync-data-info.component.ts","./src/app/ceph/rgw/rgw-overview-dashboard/rgw-overview-dashboard.component.html","./src/app/ceph/rgw/rgw-overview-dashboard/rgw-overview-dashboard.component.ts","./src/app/ceph/rgw/rgw-multisite-sync-policy-form/rgw-multisite-sync-policy-form.component.html","./src/app/ceph/rgw/rgw-multisite-sync-policy-form/rgw-multisite-sync-policy-form.component.ts","./src/app/ceph/rgw/rgw-config-modal/rgw-config-modal.component.html","./src/app/ceph/rgw/rgw-config-modal/rgw-config-modal.component.ts","./src/app/shared/models/rgw-encryption-config-keys.ts","./src/app/ceph/rgw/rgw-config-details/rgw-config-details.component.html","./src/app/ceph/rgw/rgw-config-details/rgw-config-details.component.ts","./src/app/ceph/rgw/rgw-configuration-page/rgw-configuration-page.component.html","./src/app/ceph/rgw/rgw-configuration-page/rgw-configuration-page.component.ts","./src/app/shared/api/rgw-storage-class.service.ts","./src/app/ceph/rgw/rgw-storage-class-details/rgw-storage-class-details.component.html","./src/app/ceph/rgw/rgw-storage-class-details/rgw-storage-class-details.component.ts","./src/app/ceph/rgw/rgw-storage-class-list/rgw-storage-class-list.component.html","./src/app/ceph/rgw/rgw-storage-class-list/rgw-storage-class-list.component.ts","./node_modules/@carbon/icons/es/edit/16.js","./node_modules/@carbon/icons/es/scales/20.js","./node_modules/@carbon/icons/es/user/16.js","./node_modules/@carbon/icons/es/cube/20.js","./node_modules/@carbon/icons/es/share/16.js","./node_modules/@carbon/icons/es/password/16.js","./node_modules/@carbon/icons/es/arrow--down/16.js","./node_modules/@carbon/icons/es/tools/32.js","./node_modules/@carbon/icons/es/parent-child/20.js","./node_modules/@carbon/icons/es/user--access-locked/16.js","./src/app/ceph/rgw/rgw-user-accounts-details/rgw-user-accounts-details.component.html","./src/app/ceph/rgw/rgw-user-accounts-details/rgw-user-accounts-details.component.ts","./src/app/ceph/rgw/rgw-user-accounts/rgw-user-accounts.component.html","./src/app/ceph/rgw/rgw-user-accounts/rgw-user-accounts.component.ts","./src/app/ceph/rgw/rgw-user-accounts-form/rgw-user-accounts-form.component.html","./src/app/ceph/rgw/rgw-user-accounts-form/rgw-user-accounts-form.component.ts","./src/app/ceph/rgw/rgw-storage-class-form/rgw-storage-class-form.component.html","./src/app/ceph/rgw/rgw-storage-class-form/rgw-storage-class-form.component.ts","./src/app/ceph/rgw/rgw-topic-details/rgw-topic-details.component.html","./src/app/ceph/rgw/rgw-topic-details/rgw-topic-details.component.ts","./src/app/ceph/rgw/rgw-topic-list/rgw-topic-list.component.html","./src/app/ceph/rgw/rgw-topic-list/rgw-topic-list.component.ts","./src/app/shared/models/topic.model.ts","./src/app/ceph/rgw/rgw-topic-form/rgw-topic-form.component.html","./src/app/ceph/rgw/rgw-topic-form/rgw-topic-form.component.ts","./src/app/ceph/rgw/rgw.module.ts"],"sourcesContent":["export enum KMS_PROVIDER {\n  VAULT = 'vault',\n  KMIP = 'kmip'\n}\n\nenum AuthMethods {\n  Token = 'token',\n  Agent = 'agent'\n}\n\nenum SecretEngines {\n  KV = 'kv',\n  Transit = 'transit'\n}\n\nexport enum ENCRYPTION_TYPE {\n  SSE_S3 = 's3',\n  SSE_KMS = 'kms'\n}\n\ninterface RgwBucketEncryptionModel {\n  kmsProviders: KMS_PROVIDER[];\n  authMethods: AuthMethods[];\n  secretEngines: SecretEngines[];\n}\n\nexport const rgwBucketEncryptionModel: RgwBucketEncryptionModel = {\n  kmsProviders: [KMS_PROVIDER.VAULT, KMS_PROVIDER.KMIP],\n  authMethods: [AuthMethods.Token, AuthMethods.Agent],\n  secretEngines: [SecretEngines.KV, SecretEngines.Transit]\n};\n","export enum RgwBucketMfaDelete {\n  ENABLED = 'Enabled',\n  DISABLED = 'Disabled'\n}\n","export enum RgwBucketAclPermissions {\n  Read = 'Read',\n  Write = 'Write',\n  All = 'Read and write',\n  FullControl = 'Full control'\n}\n\nexport enum RgwBucketAclGrantee {\n  Owner = 'Owner',\n  Everyone = 'Everyone',\n  AuthenticatedUsers = 'Authenticated Users'\n}\n\nexport type AclPermissionsType = RgwBucketAclPermissions[keyof RgwBucketAclPermissions];\n","export enum RgwBucketVersioning {\n  ENABLED = 'Enabled',\n  SUSPENDED = 'Suspended'\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ getMode() }} Tag</h3>\n  </cds-modal-header>\n\n  <form class=\"form\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"form\">\n    <div cdsModalContent>\n      <!-- Key -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"Key\"\n                        for=\"key\"\n                        cdRequiredField=\"Key\"\n                        [invalid]=\"form.controls.key.invalid && form.controls.key.dirty\"\n                        [invalidText]=\"keyError\">Key\n          <input cdsText\n                 type=\"text\"\n                 id=\"key\"\n                 name=\"key\"\n                 formControlName=\"key\"\n                 [invalid]=\"form.controls.key.invalid && form.controls.key.dirty\"\n                 [autofocus]=\"true\"\n                 modal-primary-focus>\n        </cds-text-label>\n        <ng-template #keyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('key', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('key', formDir, 'unique')\"\n                i18n>This key must be unique.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('key', formDir, 'maxLength')\"\n                i18n>Length of the key must be maximum of 128 characters</span>\n        </ng-template>\n      </div>\n\n      <!-- Value -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"Value\"\n                        for=\"value\"\n                        cdRequiredField=\"Value\"\n                        [invalid]=\"form.controls.value.invalid && form.controls.value.dirty\"\n                        [invalidText]=\"valueError\">Value\n          <input cdsText\n                 type=\"text\"\n                 id=\"value\"\n                 name=\"value\"\n                 formControlName=\"value\"\n                 [invalid]=\"form.controls.value.invalid && form.controls.value.dirty\">\n        </cds-text-label>\n        <ng-template #valueError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('value', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('value', formDir, 'maxLength')\"\n                i18n>Length of the value must be a maximum of 128 characters</span>\n        </ng-template>\n      </div>\n\n    </div>\n\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"form\"\n                          [submitText]=\"getMode()\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n  </form>\n</cds-modal>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { BaseModal } from 'carbon-components-angular';\nimport _ from 'lodash';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\n\n@Component({\n  selector: 'cd-bucket-tag-modal',\n  templateUrl: './bucket-tag-modal.component.html',\n  styleUrls: ['./bucket-tag-modal.component.scss']\n})\nexport class BucketTagModalComponent extends BaseModal {\n  @Output()\n  submitAction = new EventEmitter();\n\n  form: CdFormGroup;\n  editMode = false;\n  currentKeyTags: string[];\n  storedKey: string;\n\n  constructor(private formBuilder: CdFormBuilder, public actionLabels: ActionLabelsI18n) {\n    super();\n    this.createForm();\n  }\n\n  private createForm() {\n    this.form = this.formBuilder.group({\n      key: [\n        null,\n        [\n          Validators.required,\n          CdValidators.custom('unique', (value: string) => {\n            if (_.isEmpty(value) && !this.currentKeyTags) {\n              return false;\n            }\n            return this.storedKey !== value && this.currentKeyTags.includes(value);\n          }),\n          CdValidators.custom('maxLength', (value: string) => {\n            if (_.isEmpty(value)) return false;\n            return value.length > 128;\n          })\n        ]\n      ],\n      value: [\n        null,\n        [\n          Validators.required,\n          CdValidators.custom('maxLength', (value: string) => {\n            if (_.isEmpty(value)) return false;\n            return value.length > 128;\n          })\n        ]\n      ]\n    });\n  }\n\n  onSubmit() {\n    this.submitAction.emit(this.form.value);\n    this.closeModal();\n  }\n\n  getMode() {\n    return this.editMode ? this.actionLabels.EDIT : this.actionLabels.ADD;\n  }\n\n  fillForm(tag: Record<string, string>) {\n    this.form.setValue(tag);\n  }\n}\n","import { ElementRef, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TextAreaXmlFormatterService {\n  constructor() {}\n\n  format(textArea: ElementRef<any>): void {\n    if (!textArea.nativeElement?.value) return;\n    const value = textArea.nativeElement.value;\n    const parser = new DOMParser();\n    const formatted = parser.parseFromString(value, 'application/xml');\n    const lineNumber = formatted.getElementsByTagName('*').length;\n    const pixelPerLine = 20;\n    const pixels = lineNumber * pixelPerLine;\n    textArea.nativeElement.style.height = pixels + 'px';\n    const errorNode = formatted.querySelector('parsererror');\n    if (errorNode) {\n      return;\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport _ from 'lodash';\nimport { FormatterService } from '../services/formatter.service';\nimport { DimlessBinaryPerMinutePipe } from '../pipes/dimless-binary-per-minute.pipe';\n\n@Directive({\n  selector: '[cdDimlessBinaryPerMinute]'\n})\nexport class DimlessBinaryPerMinuteDirective implements OnInit {\n  @Output()\n  ngModelChange: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Event emitter for letting this directive know that the data has (asynchronously) been loaded\n   * and the value needs to be adapted by this directive.\n   */\n  @Input()\n  ngDataReady: EventEmitter<any>;\n\n  /**\n   * Minimum size in bytes.\n   * If user enter a value lower than <minBytes>,\n   * the model will automatically be update to <minBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given minBytes=4096 (4KiB), if user type 1KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  minBytes: number;\n\n  /**\n   * Maximum size in bytes.\n   * If user enter a value greater than <maxBytes>,\n   * the model will automatically be update to <maxBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given maxBytes=3145728 (3MiB), if user type 4MiB, then model will be updated to 3MiB\n   */\n  @Input()\n  maxBytes: number;\n\n  /**\n   * Value will be rounded up the nearest power of <roundPower>\n   *\n   * Example:\n   *   Given roundPower=2, if user type 7KiB, then model will be updated to 8KiB\n   *   Given roundPower=2, if user type 5KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  roundPower: number;\n\n  /**\n   * Default unit that should be used when user do not type a unit.\n   * By default, \"MiB\" will be used.\n   *\n   * Example:\n   *   Given defaultUnit=null, if user type 7, then model will be updated to 7MiB\n   *   Given defaultUnit=k, if user type 7, then model will be updated to 7KiB\n   */\n  @Input()\n  defaultUnit: string;\n\n  private el: HTMLInputElement;\n\n  constructor(\n    private elementRef: ElementRef,\n    private control: NgControl,\n    private dimlessBinaryPerMinutePipe: DimlessBinaryPerMinutePipe,\n    private formatter: FormatterService\n  ) {\n    this.el = this.elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    this.setValue(this.el.value);\n    if (this.ngDataReady) {\n      this.ngDataReady.subscribe(() => this.setValue(this.el.value));\n    }\n  }\n\n  setValue(value: string) {\n    if (value === '') {\n      this.ngModelChange.emit(value);\n      this.control.control.setValue(value);\n      return;\n    }\n    if (/^[\\d.]+$/.test(value)) {\n      value += this.defaultUnit || 'm';\n    }\n    const size = this.formatter.toBytes(value, 0);\n    const roundedSize = this.round(size);\n    this.el.value = this.dimlessBinaryPerMinutePipe.transform(roundedSize);\n    if (size !== null) {\n      this.ngModelChange.emit(this.el.value);\n      this.control.control.setValue(this.el.value);\n    } else {\n      this.ngModelChange.emit(null);\n      this.control.control.setValue(null);\n    }\n  }\n\n  round(size: number) {\n    if (size !== null && size !== 0) {\n      if (!_.isUndefined(this.minBytes) && size < this.minBytes) {\n        return this.minBytes;\n      }\n      if (!_.isUndefined(this.maxBytes) && size > this.maxBytes) {\n        return this.maxBytes;\n      }\n      if (!_.isUndefined(this.roundPower)) {\n        const power = Math.round(Math.log(size) / Math.log(this.roundPower));\n        return Math.pow(this.roundPower, power);\n      }\n    }\n    return size;\n  }\n\n  @HostListener('blur', ['$event.target.value'])\n  onBlur(value: string) {\n    this.setValue(value);\n  }\n}\n","<fieldset *ngIf=\"type\">\n  <legend class=\"cd-header\"\n          i18n>\n    Rate Limit\n    <cd-help-text *ngIf=\"type === 'user'\">\n      The User Rate Limit controls the max read/write operations and data per minute for each user.\n    </cd-help-text>\n    <cd-help-text *ngIf=\"type === 'bucket'\">\n      The Bucket Rate Limit controls the max read/write operations and data per minute for each\n      bucket.\n    </cd-help-text>\n  </legend>\n  <form name=\"form\"\n        #frm=\"ngForm\"\n        [formGroup]=\"form\"\n        novalidate>\n    <div class=\"row\"\n         *ngIf=\"!!globalRateLimit && globalRateLimit.enabled\">\n      <div class=\"col-3\"></div>\n      <div class=\"col-9\">\n        <div>\n          <cd-alert-panel type=\"info\"\n                          class=\"me-1\"\n                          id=\"global-ratelimit-info\"\n                          i18n>\n            <div>\n              <span class=\"bold\">Global Rate Limit</span> <br />Max. read bytes :\n              {{ globalRateLimit.max_read_bytes | dimlessBinaryPerMinute }} <br />Max. read ops :\n              {{ globalRateLimit.max_read_ops }} <br />Max. write bytes :\n              {{ globalRateLimit.max_write_bytes | dimlessBinaryPerMinute }} <br />Max. write ops :\n              {{ globalRateLimit.max_write_ops }}\n            </div>\n          </cd-alert-panel>\n        </div>\n      </div>\n    </div>\n\n    <!-- Enabled -->\n    <div class=\"form-item\">\n      <cds-checkbox id=\"rate_limit_enabled\"\n                    formControlName=\"rate_limit_enabled\">\n        <ng-container i18n>Enabled</ng-container>\n        <cd-help-text i18n>Toggle to enable or disable the rate limit settings.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- Unlimited read ops -->\n    <div class=\"form-item\"\n         *ngIf=\"form.controls.rate_limit_enabled.value\">\n      <cds-checkbox id=\"rate_limit_max_readOps_unlimited\"\n                    formControlName=\"rate_limit_max_readOps_unlimited\">\n        <ng-container i18n>Unlimited read ops</ng-container>\n        <cd-help-text i18n>Select this box to allow unlimited read operations.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- Maximum read ops -->\n    <div\n      class=\"form-item\"\n      *ngIf=\"\n        form.controls.rate_limit_enabled.value && !form.getValue('rate_limit_max_readOps_unlimited')\n      \"\n    >\n      <cds-number id=\"rate_limit_max_readOps\"\n                  formControlName=\"rate_limit_max_readOps\"\n                  label=\"Maximum read ops\"\n                  i18n-label\n                  cdRequiredField=\"Maximum read ops\"\n                  helperText=\"Limits the number of read operations per minute for a user.\"\n                  i18n-helperText\n                  [invalid]=\"form.controls.rate_limit_max_readOps.invalid && form.controls.rate_limit_max_readOps.dirty\"\n                  [invalidText]=\"rateLimitMaxReadOpsError\">\n      </cds-number>\n\n      <ng-template #rateLimitMaxReadOpsError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readOps', frm, 'required')\"\n          i18n\n          >This field is required.</span\n        >\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readOps', frm, 'rateOpsMaxSize')\"\n          i18n\n          >The value is not valid.</span\n        >\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readOps', frm, 'min')\"\n          i18n\n          >Enter a positive number.</span\n        >\n      </ng-template>\n    </div>\n\n    <!-- Unlimited Write Ops -->\n    <div class=\"form-item\"\n         *ngIf=\"form.controls.rate_limit_enabled.value\">\n      <cds-checkbox id=\"rate_limit_max_writeOps_unlimited\"\n                    formControlName=\"rate_limit_max_writeOps_unlimited\">\n        <ng-container i18n>Unlimited write ops</ng-container>\n        <cd-help-text i18n>Select this box to allow unlimited write operations.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- Maximum Write Ops -->\n    <div\n      class=\"form-item\"\n      *ngIf=\"\n        form.controls.rate_limit_enabled.value &&\n        !form.getValue('rate_limit_max_writeOps_unlimited')\n      \"\n    >\n      <cds-number id=\"rate_limit_max_writeOps\"\n                  formControlName=\"rate_limit_max_writeOps\"\n                  label=\"Maximum write ops\"\n                  i18n-label\n                  cdRequiredField=\"Maximum write ops\"\n                  helperText=\"Limits the number of write operations per minute for a user.\"\n                  i18n-helperText\n                  [invalid]=\"form.controls.rate_limit_max_writeOps.invalid && form.controls.rate_limit_max_writeOps.dirty\"\n                  [invalidText]=\"rateLimitMaxWriteOpsError\">\n      </cds-number>\n\n      <ng-template #rateLimitMaxWriteOpsError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_writeOps', frm, 'required')\"\n          i18n\n          >This field is required.</span\n        >\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_writeOps', frm, 'rateOpsMaxSize')\"\n          i18n\n          >The value is not valid.</span\n        >\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_writeOps', frm, 'min')\"\n          i18n\n          >Enter a positive number.</span\n        >\n      </ng-template>\n    </div>\n\n    <!-- Unlimited Read Bytes -->\n    <div class=\"form-item\"\n         *ngIf=\"form.controls.rate_limit_enabled.value\">\n      <cds-checkbox id=\"rate_limit_max_readBytes_unlimited\"\n                    formControlName=\"rate_limit_max_readBytes_unlimited\">\n        <ng-container i18n>Unlimited read bytes</ng-container>\n        <cd-help-text i18n>Select this box to allow unlimited read bytes.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- Maximum Read Bytes -->\n    <div\n      class=\"form-item\"\n      *ngIf=\"\n        form.controls.rate_limit_enabled.value &&\n        !form.getValue('rate_limit_max_readBytes_unlimited')\n      \"\n    >\n      <cds-text-label labelInputID=\"rate_limit_max_readBytes\"\n                      cdRequiredField=\"Maximum read bytes\"\n                      helperText=\"Limits the number of read bytes per minute for a user.\"\n                      i18n-helperText\n                      [invalid]=\"form.controls.rate_limit_max_readBytes.invalid && form.controls.rate_limit_max_readBytes.dirty\"\n                      [invalidText]=\"maxReadBytesError\">\n        <input cdsText\n               id=\"rate_limit_max_readBytes\"\n               formControlName=\"rate_limit_max_readBytes\"\n               defaultUnit=\"b\"\n               [invalid]=\"form.controls.rate_limit_max_readBytes.invalid && form.controls.rate_limit_max_readBytes.dirty\"\n               cdDimlessBinaryPerMinute>\n      </cds-text-label>\n\n      <ng-template #maxReadBytesError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'required')\"\n          i18n>This field is required.</span>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'rateByteMaxSize')\"\n          i18n>The value is not valid.</span>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'min')\"\n          i18n>Enter a positive number.</span>\n      </ng-template>\n    </div>\n\n    <!-- Unlimited Write Bytes -->\n    <div class=\"form-item\"\n         *ngIf=\"form.controls.rate_limit_enabled.value\">\n      <cds-checkbox id=\"rate_limit_max_writeBytes_unlimited\"\n                    formControlName=\"rate_limit_max_writeBytes_unlimited\">\n        <ng-container i18n>Unlimited write bytes</ng-container>\n        <cd-help-text i18n>Select this box to allow unlimited write bytes.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- Maximum Write Bytes -->\n    <div\n      class=\"form-item\"\n      *ngIf=\"\n        form.controls.rate_limit_enabled.value &&\n        !form.getValue('rate_limit_max_writeBytes_unlimited')\n      \">\n      <cds-text-label labelInputID=\"rate_limit_max_writeBytes\"\n                      cdRequiredField=\"Maximum write bytes\"\n                      helperText=\"Limits the number of write bytes per minute for a user.\"\n                      i18n-helperText\n                      [invalid]=\"form.controls.rate_limit_max_writeBytes.invalid && form.controls.rate_limit_max_writeBytes.dirty\"\n                      [invalidText]=\"maxWriteBytesError\">\n        <input cdsText\n               id=\"rate_limit_max_writeBytes\"\n               formControlName=\"rate_limit_max_writeBytes\"\n               defaultUnit=\"b\"\n               [invalid]=\"form.controls.rate_limit_max_writeBytes.invalid && form.controls.rate_limit_max_writeBytes.dirty\"\n               cdDimlessBinaryPerMinute>\n      </cds-text-label>\n\n      <ng-template #maxWriteBytesError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'required')\"\n          i18n>This field is required.</span>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'rateByteMaxSize')\"\n          i18n>The value is not valid.</span>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('rate_limit_max_readBytes', frm, 'min')\"\n          i18n>Enter a positive number.</span>\n      </ng-template>\n    </div>\n  </form>\n</fieldset>\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { GlobalRateLimitConfig, RgwRateLimitConfig } from '../models/rgw-rate-limit';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { AbstractControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport _ from 'lodash';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\n\n@Component({\n  selector: 'cd-rgw-rate-limit',\n  templateUrl: './rgw-rate-limit.component.html',\n  styleUrls: ['./rgw-rate-limit.component.scss']\n})\nexport class RgwRateLimitComponent implements OnInit, AfterViewInit {\n  globalRateLimit: GlobalRateLimitConfig['user_ratelimit' | 'bucket_ratelimit'];\n  form: CdFormGroup;\n  @Input() type: string;\n\n  @Output() formValue = new EventEmitter();\n  @Output() rateLimitFormGroup = new EventEmitter<FormGroup>();\n\n  @Input()\n  isEditing: boolean;\n\n  @Input() id: string;\n\n  bid: string;\n  @Input() set allowBid(value: string) {\n    this.bid = value;\n    if (this.isEditing && !!this.bid && this.type == 'bucket') {\n      this.getRateLimitFormValues();\n    }\n  }\n  constructor(\n    private formBuilder: CdFormBuilder,\n    private rgwUserService: RgwUserService,\n    private rgwBucketService: RgwBucketService,\n    private notificationService: NotificationService\n  ) {}\n\n  ngOnInit(): void {\n    // get the global rate Limit\n    if (this.type === 'user') {\n      this.rgwUserService.getGlobalUserRateLimit().subscribe(\n        (data: GlobalRateLimitConfig) => {\n          if (data && data.user_ratelimit !== undefined) {\n            this.globalRateLimit = data.user_ratelimit;\n          }\n        },\n        (error: any) => {\n          this.notificationService.show(NotificationType.error, error);\n        }\n      );\n      this.isEditing ? this.getRateLimitFormValues() : '';\n    } else {\n      this.rgwBucketService.getGlobalBucketRateLimit().subscribe(\n        (data: GlobalRateLimitConfig) => {\n          if (data && data.bucket_ratelimit !== undefined) {\n            this.globalRateLimit = data.bucket_ratelimit;\n          }\n        },\n        (error: any) => {\n          this.notificationService.show(NotificationType.error, error);\n        }\n      );\n    }\n    // rate limit form\n    this.form = this.formBuilder.group({\n      rate_limit_enabled: [false],\n      rate_limit_max_readOps_unlimited: [true],\n      rate_limit_max_readOps: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              rate_limit_enabled: true,\n              rate_limit_max_readOps_unlimited: false\n            },\n            [Validators.required, this.rateLimitIopmMaxSizeValidator]\n          )\n        ]\n      ],\n      rate_limit_max_writeOps_unlimited: [true],\n      rate_limit_max_writeOps: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              rate_limit_enabled: true,\n              rate_limit_max_writeOps_unlimited: false\n            },\n            [Validators.required, this.rateLimitIopmMaxSizeValidator]\n          )\n        ]\n      ],\n      rate_limit_max_readBytes_unlimited: [true],\n      rate_limit_max_readBytes: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              rate_limit_enabled: true,\n              rate_limit_max_readBytes_unlimited: false\n            },\n            [Validators.required, this.rateLimitBytesMaxSizeValidator]\n          )\n        ]\n      ],\n      rate_limit_max_writeBytes_unlimited: [true],\n      rate_limit_max_writeBytes: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              rate_limit_enabled: true,\n              rate_limit_max_writeBytes_unlimited: false\n            },\n            [Validators.required, this.rateLimitBytesMaxSizeValidator]\n          )\n        ]\n      ]\n    });\n  }\n  /**\n   * Helper function to populate Form Values\n   * when edit rate limit edit is called.\n   */\n  private populateFormValues(data: RgwRateLimitConfig) {\n    this.form.get('rate_limit_enabled').setValue(data.enabled);\n    this._setRateLimitProperty(\n      'rate_limit_max_readBytes',\n      'rate_limit_max_readBytes_unlimited',\n      data.max_read_bytes\n    );\n    this._setRateLimitProperty(\n      'rate_limit_max_writeBytes',\n      'rate_limit_max_writeBytes_unlimited',\n      data.max_write_bytes\n    );\n    this._setRateLimitProperty(\n      'rate_limit_max_readOps',\n      'rate_limit_max_readOps_unlimited',\n      data.max_read_ops\n    );\n    this._setRateLimitProperty(\n      'rate_limit_max_writeOps',\n      'rate_limit_max_writeOps_unlimited',\n      data.max_write_ops\n    );\n  }\n  /**\n   * Helper function to call api and get Rate Limit Values\n   * on load for user and bucket\n   */\n  private getRateLimitFormValues() {\n    if (this.type === 'user') {\n      this.rgwUserService.getUserRateLimit(this.id).subscribe(\n        (resp: GlobalRateLimitConfig) => {\n          this.populateFormValues(resp.user_ratelimit);\n        },\n        (error: any) => {\n          this.notificationService.show(NotificationType.error, error);\n        }\n      );\n    } else {\n      this.rgwBucketService.getBucketRateLimit(this.bid).subscribe(\n        (resp: GlobalRateLimitConfig) => {\n          this.populateFormValues(resp.bucket_ratelimit);\n        },\n        (error: any) => {\n          this.notificationService.show(NotificationType.error, error);\n        }\n      );\n    }\n  }\n  /**\n   * Validate the rate limit bytes maximum size, e.g. 30, 1K, 30 PiB/m or 1.9 MiB/m.\n   */\n  rateLimitBytesMaxSizeValidator(control: AbstractControl): ValidationErrors | null {\n    return new FormatterService().performValidation(\n      control,\n      '^(\\\\d+(\\\\.\\\\d+)?)\\\\s*(B/m|K(B|iB/m)?|M(B|iB/m)?|G(B|iB/m)?|T(B|iB/m)?|P(B|iB/m)?)?$',\n      { rateByteMaxSize: true }\n    );\n  }\n  /**\n   * Validate the rate limit operations maximum size\n   */\n  rateLimitIopmMaxSizeValidator(control: AbstractControl): ValidationErrors | null {\n    return new FormatterService().iopmMaxSizeValidator(control);\n  }\n  getRateLimitFormValue() {\n    if (this._isRateLimitFormDirty()) return this._getRateLimitArgs();\n    return null;\n  }\n  ngAfterViewInit() {\n    this.rateLimitFormGroup.emit(this.form);\n  }\n  /**\n   * Check if the user rate limit has been modified.\n   * @return {Boolean} Returns TRUE if the user rate limit has been modified.\n   */\n  private _isRateLimitFormDirty(): boolean {\n    return [\n      'rate_limit_enabled',\n      'rate_limit_max_readOps_unlimited',\n      'rate_limit_max_readOps',\n      'rate_limit_max_writeOps_unlimited',\n      'rate_limit_max_writeOps',\n      'rate_limit_max_readBytes_unlimited',\n      'rate_limit_max_readBytes',\n      'rate_limit_max_writeBytes_unlimited',\n      'rate_limit_max_writeBytes'\n    ].some((path) => {\n      return this.form.get(path).dirty;\n    });\n  }\n  /**\n   * Helper function to get the arguments for the API request when the user\n   * rate limit configuration has been modified.\n   */\n  private _getRateLimitArgs(): RgwRateLimitConfig {\n    const result: RgwRateLimitConfig = {\n      enabled: this.form.getValue('rate_limit_enabled'),\n      max_read_ops: 0,\n      max_write_ops: 0,\n      max_read_bytes: 0,\n      max_write_bytes: 0\n    };\n    if (!this.form.getValue('rate_limit_max_readOps_unlimited')) {\n      result['max_read_ops'] = this.form.getValue('rate_limit_max_readOps');\n    }\n    if (!this.form.getValue('rate_limit_max_writeOps_unlimited')) {\n      result['max_write_ops'] = this.form.getValue('rate_limit_max_writeOps');\n    }\n    if (!this.form.getValue('rate_limit_max_readBytes_unlimited')) {\n      // Convert the given value to bytes.\n      result['max_read_bytes'] = new FormatterService().toBytes(\n        this.form.getValue('rate_limit_max_readBytes')\n      );\n    }\n    if (!this.form.getValue('rate_limit_max_writeBytes_unlimited')) {\n      result['max_write_bytes'] = new FormatterService().toBytes(\n        this.form.getValue('rate_limit_max_writeBytes')\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Helper function to map the values for the Rate Limit when the user\n   * rate limit gets loaded for first time or edited.\n   */\n\n  private _setRateLimitProperty(rateLimitKey: string, unlimitedKey: string, property: number) {\n    if (property === 0) {\n      this.form.get(unlimitedKey).setValue(true);\n      this.form.get(rateLimitKey).setValue('');\n    } else {\n      this.form.get(unlimitedKey).setValue(false);\n      this.form.get(rateLimitKey).setValue(property);\n    }\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RgwDaemonService } from './rgw-daemon.service';\nimport { Account } from '~/app/ceph/rgw/models/rgw-user-accounts';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwUserAccountsService {\n  private url = 'api/rgw/accounts';\n\n  constructor(private http: HttpClient, private rgwDaemonService: RgwDaemonService) {}\n\n  list(detailed?: boolean): Observable<any> {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      if (detailed) {\n        params = params.append('detailed', detailed);\n      }\n      return this.http.get(this.url, { params });\n    });\n  }\n\n  get(account_id: string): Observable<any> {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      if (account_id) {\n        params = params.append('account_id', account_id);\n      }\n      return this.http.get(`${this.url}/get`, { params });\n    });\n  }\n\n  create(payload: Partial<Account>): Observable<any> {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.post(this.url, payload, { params: params });\n    });\n  }\n\n  modify(payload: Partial<Account>): Observable<any> {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.put(`${this.url}/set`, payload, { params: params });\n    });\n  }\n\n  remove(accountId: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.delete(`${this.url}/${accountId}`, { params: params });\n    });\n  }\n\n  setQuota(\n    account_id: string,\n    payload: { quota_type: string; max_size: string; max_objects: string; enabled: boolean }\n  ) {\n    return this.http.put(`${this.url}/${account_id}/quota`, payload);\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\"\n     *cdFormLoading=\"loading\">\n  <form name=\"bucketForm\"\n        #frm=\"ngForm\"\n        [formGroup]=\"bucketForm\"\n        novalidate>\n\n    <div i18n=\"form title\"\n         class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n    <!-- Id -->\n    <div class=\"form-item\"\n         *ngIf=\"editing\">\n      <cds-text-label for=\"id\"\n                      i18n>Id\n        <input cdsText\n               id=\"id\"\n               name=\"id\"\n               formControlName=\"id\"\n               readonly>\n      </cds-text-label>\n    </div>\n\n    <!-- Name -->\n    <div class=\"form-item\">\n      <cds-text-label for=\"bid\"\n                      cdRequiredField=\"Name\"\n                      [invalid]=\"!bucketForm.controls.bid.valid && bucketForm.controls.bid.dirty\"\n                      [invalidText]=\"nameError\"\n                      i18n>Name\n        <input cdsText\n               placeholder=\"Name...\"\n               i18n-placeholder\n               id=\"bid\"\n               name=\"bid\"\n               formControlName=\"bid\"\n               [readonly]=\"editing\"\n               [autofocus]=\"!editing\"\n               [invalid]=\"!bucketForm.controls.bid.valid && bucketForm.controls.bid.dirty\">\n      </cds-text-label>\n      <ng-template #nameError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'required')\"\n              i18n>This field is required.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'bucketNameInvalid')\"\n              i18n>Bucket names can only contain lowercase letters, numbers, periods and hyphens.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'bucketNameNotAllowed')\"\n              i18n>The chosen name is already in use.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'containsUpperCase')\"\n              i18n>Bucket names must not contain uppercase characters or underscores.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'lowerCaseOrNumber')\"\n              i18n>Each label must start and end with a lowercase letter or a number.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'ipAddress')\"\n              i18n>Bucket names cannot be formatted as IP address.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'onlyLowerCaseAndNumbers')\"\n              i18n>Bucket labels cannot be empty and can only contain lowercase letters, numbers and hyphens.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"bucketForm.showError('bid', frm, 'shouldBeInRange')\"\n              i18n>Bucket names must be 3 to 63 characters long.</span>\n      </ng-template>\n    </div>\n\n    <!-- Accounts -->\n    @if(accounts.length && accountUsers.length > 0){\n      <cds-checkbox formControlName=\"isAccountOwner\"\n                    i18n>Select account user\n      </cds-checkbox>\n    }\n\n    @if (bucketForm.get('isAccountOwner').value) {\n      <!-- Account user -->\n      <div class=\"form-item\">\n        <cds-select label=\"Account user\"\n                    id=\"acc_user\"\n                    formControlName=\"accountUser\"\n                    [invalidText]=\"accountUserError\"\n                    [invalid]=\"!bucketForm.controls.accountUser.valid && bucketForm.controls.accountUser.dirty\"\n                    cdRequiredField=\"Account user\"\n                    i18n>Account user\n          <option *ngIf=\"accountusers === null\"\n                  [ngValue]=\"null\">Loading...</option>\n          <option *ngIf=\"accountusers !== null\"\n                  value=\"\">-- Select a user --</option>\n          <option *ngFor=\"let user of accountUsers\"\n                  [value]=\"user.uid\">{{ user.uid }}</option>\n        </cds-select>\n        <ng-template #accountUserError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('accountUser', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n        <cd-alert-panel\n          type=\"info\"\n          *ngIf=\"bucketForm.get('accountUser').disabled\"\n          i18n>\n            The bucket is owned by an account. UI does not support changing\n            the ownership of bucket owned by an account.\n        </cd-alert-panel>\n      </div>\n    } @else {\n      <!-- Owner -->\n      <div class=\"form-item\">\n        <cds-select label=\"Owner\"\n                    formControlName=\"owner\"\n                    id=\"owner\"\n                    [invalidText]=\"ownerError\"\n                    [invalid]=\"!bucketForm.controls.owner.valid && bucketForm.controls.owner.dirty\"\n                    cdRequiredField=\"Owner\"\n                    i18n>Owner\n          <option *ngIf=\"owners === null\"\n                  [ngValue]=\"null\">Loading...</option>\n          <option *ngIf=\"owners !== null\"\n                  value=\"\">-- Select a user --</option>\n          <option *ngFor=\"let owner of owners\"\n                  [value]=\"owner.uid\">{{ owner.uid }}</option>\n        </cds-select>\n        <ng-template #ownerError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('owner', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n    }\n\n    <!-- Versioning -->\n    <fieldset *ngIf=\"editing\">\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>Versioning</legend>\n\n        <cds-checkbox name=\"versioning\"\n                      formControlName=\"versioning\"\n                      id=\"versioning\"\n                      (checkedChange)=\"setMfaDeleteValidators()\"\n                      i18n>Enabled\n          <cd-help-text>\n            <span>Enables versioning for the objects in the bucket.</span>\n          </cd-help-text>\n        </cds-checkbox>\n      </div>\n    </fieldset>\n\n    <!-- Multi-Factor Authentication -->\n    <fieldset *ngIf=\"editing\">\n      <!-- MFA Delete -->\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>Multi-Factor Authentication</legend>\n\n        <cds-checkbox name=\"mfa-delete\"\n                      formControlName=\"mfa-delete\"\n                      id=\"mfa-delete\"\n                      (checkedChange)=\"setMfaDeleteValidators()\"\n                      helperText=\"Enables MFA (multi-factor authentication) Delete, which requires additional authentication for changing the bucket versioning state.\"\n                      i18n-helperText\n                      i18n>Delete enabled\n        </cds-checkbox>\n      </div>\n      <div *ngIf=\"areMfaCredentialsRequired()\"\n           class=\"form-item\">\n        <cds-text-label for=\"mfa-token-serial\"\n                        cdRequiredField=\"MFA Serial Number\"\n                        [invalid]=\"!bucketForm.controls['mfa-token-serial'].valid && bucketForm.controls['mfa-token-serial'].dirty\"\n                        [invalidText]=\"mfaSerialError\"\n                        i18n>Token Serial Number\n          <input cdsText\n                 id=\"mfa-token-serial\"\n                 name=\"mfa-token-serial\"\n                 formControlName=\"mfa-token-serial\"\n                 [invalid]=\"!bucketForm.controls['mfa-token-serial'].valid && bucketForm.controls['mfa-token-serial'].dirty\">\n        </cds-text-label>\n        <ng-template #mfaSerialError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('mfa-token-serial', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n      <div *ngIf=\"areMfaCredentialsRequired()\"\n           class=\"form-item\">\n        <cds-text-label for=\"mfa-token-pin\"\n                        cdRequiredField=\"MFA Token PIN\"\n                        [invalid]=\"!bucketForm.controls['mfa-token-pin'].valid && (bucketForm.controls['mfa-token-pin'].dirty)\"\n                        [invalidText]=\"mfaPinError\"\n                        i18n>Token PIN\n          <input cdsText\n                 id=\"mfa-token-pin\"\n                 name=\"mfa-token-pin\"\n                 formControlName=\"mfa-token-pin\"\n                 [invalid]=\"!bucketForm.controls['mfa-token-pin'].valid && (bucketForm.controls['mfa-token-pin'].dirty)\">\n        </cds-text-label>\n        <ng-template #mfaPinError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('mfa-token-pin', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n    </fieldset>\n\n    <!-- Object Locking -->\n    <fieldset *ngIf=\"!editing || (editing && bucketForm.getValue('lock_enabled'))\">\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>\n          Object Locking\n          <cd-help-text>\n              Store objects using a write-once-read-many (WORM) model to prevent objects from being deleted or overwritten for a fixed amount of time or indefinitely.\n              Object Locking works only in versioned buckets.\n          </cd-help-text>\n        </legend>\n        <!-- Object Locking enable -->\n        <cds-checkbox name=\"lock_enabled\"\n                      formControlName=\"lock_enabled\"\n                      id=\"lock_enabled\"\n                      [disabled]=\"editing\"\n                      i18n>Enable\n\n          <cd-help-text>\n            <span>Enables locking for the objects in the bucket. Locking can only be enabled while creating a bucket.</span>\n          </cd-help-text>\n        </cds-checkbox>\n      </div>\n\n      <!-- Object Locking mode -->\n      <div *ngIf=\"bucketForm.getValue('lock_enabled')\"\n           class=\"form-item\">\n        <cds-select label=\"Mode\"\n                    for=\"lock_mode\"\n                    formControlName=\"lock_mode\"\n                    name=\"lock_mode\"\n                    [helperText]=\"lockModeHelper\"\n                    id=\"lock_mode\"\n                    i18n>\n          <option value=\"COMPLIANCE\">Compliance</option>\n          <option value=\"GOVERNANCE\">Governance</option>\n        </cds-select>\n        <ng-template #lockModeHelper>\n          <span *ngIf=\"bucketForm.getValue('lock_mode') === 'COMPLIANCE'\"\n                i18n>\n            In COMPLIANCE an object version cannot be overwritten or deleted for the duration of the period.\n          </span>\n          <span *ngIf=\"bucketForm.getValue('lock_mode') === 'GOVERNANCE'\"\n                i18n>\n            In GOVERNANCE mode, users cannot overwrite or delete an object version or alter its lock settings unless they have special permissions.\n          </span>\n        </ng-template>\n      </div>\n      <!-- Retention period (days) -->\n      <div *ngIf=\"bucketForm.getValue('lock_enabled')\"\n           class=\"form-item\">\n        <cds-number name=\"lock_retention_period_days\"\n                    formControlName=\"lock_retention_period_days\"\n                    id=\"lock_retention_period_days\"\n                    min=\"1\"\n                    label=\"Retention period (days)\"\n                    helperText=\"The number of days that you want to specify for the default retention period that will be applied to new objects placed in this bucket.\"\n                    [invalid]=\"bucketForm.controls.lock_retention_period_days.invalid && (bucketForm.controls.lock_retention_period_days.dirty)\"\n                    [invalidText]=\"retentionPeriodError\"\n                    i18n-helperText\n                    i18n-label\n                    i18n></cds-number>\n        <ng-template #retentionPeriodError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('lock_retention_period_days', frm, 'pattern')\"\n                i18n>The entered value must be a positive integer.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('lock_retention_period_days', frm, 'lockDays')\"\n                i18n>Retention Days must be a positive integer.</span>\n        </ng-template>\n      </div>\n      <!-- Alerts -->\n      <cd-alert-panel\n        type=\"info\"\n        *ngIf=\"bucketForm.getValue('lock_enabled')\"\n        class=\"me-1\"\n        i18n-title>\n          Bucket Versioning can't be disabled when Object Locking is enabled.\n      </cd-alert-panel>\n      <cd-alert-panel\n        type=\"warning\"\n        *ngIf=\"bucketForm.getValue('lock_enabled')\">\n          Enabling Object Locking will allow the configuration of GOVERNANCE or COMPLIANCE modes, which will help ensure that an object version cannot be overwritten or deleted for the specified period.\n      </cd-alert-panel>\n    </fieldset>\n\n    <!-- Encryption -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>Encryption</legend>\n        <cds-checkbox name=\"encryption_enabled\"\n                      formControlName=\"encryption_enabled\"\n                      id=\"encryption_enabled\"\n                      [disabled]=\"!kmsConfigured && !s3Configured\"\n                      i18n>Enable\n          <cd-help-text aria-label=\"encryption helper\">\n            <span>Enables encryption for the objects in the bucket.\n                To enable encryption on a bucket you need to set the configuration values for SSE-S3 or SSE-KMS.\n                To set the configuration values <a href=\"#/rgw/configuration\"\n                                                   i18n-aria-label=\"click here\">Click here</a></span>\n          </cd-help-text>\n        </cds-checkbox>\n      </div>\n\n      <div *ngIf=\"bucketForm.getValue('encryption_enabled')\">\n        <div class=\"form-item\">\n          <cds-radio-group formControlName=\"encryption_type\">\n          <cds-radio value=\"AES256\"\n                     [disabled]=\"!s3Configured\">SSE-S3</cds-radio>\n          <cds-radio value=\"aws:kms\"\n                     [disabled]=\"!kmsConfigured\">Connect to an external key management service</cds-radio>\n          </cds-radio-group>\n        </div>\n\n        <div *ngIf=\"bucketForm.getValue('encryption_type') === 'aws:kms'\">\n          <div class=\"form-item\">\n            <cds-select label=\"KMS Provider\"\n                        for=\"kms_provider\"\n                        formControlName=\"kms_provider\"\n                        name=\"kms_provider\"\n                        id=\"kms_provider\"\n                        [invalidText]=\"kmsProviderError\"\n                        [invalid]=\"!bucketForm.controls.kms_provider.valid && (bucketForm.controls.kms_provider.dirty)\"\n                        cdRequiredField=\"KMS Provider\"\n                        i18n>KMS Provider\n              <option *ngIf=\"kmsProviders === null\"\n                      [ngValue]=\"null\">Loading...</option>\n              <option *ngIf=\"kmsProviders !== null\"\n                      [ngValue]=\"null\">-- Select a provider --</option>\n              <option *ngFor=\"let provider of kmsProviders\"\n                      [value]=\"provider\">{{ provider }}</option>\n            </cds-select>\n            <ng-template #kmsProviderError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"bucketForm.showError('kms_provider', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </ng-template>\n          </div>\n\n          <div class=\"form-item\">\n            <cds-text-label for=\"keyId\"\n                            cdRequiredField=\"Key Id\"\n                            [invalid]=\"!bucketForm.controls.keyId.valid && (bucketForm.controls.keyId.dirty)\"\n                            [invalidText]=\"keyIdError\"\n                            i18n>Key Id\n              <input cdsText\n                     id=\"keyId\"\n                     name=\"keyId\"\n                     formControlName=\"keyId\"\n                     [invalid]=\"!bucketForm.controls.keyId.valid && (bucketForm.controls.keyId.dirty)\">\n            </cds-text-label>\n            <ng-template #keyIdError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"bucketForm.showError('keyId', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n\n    <!-- Replication -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>Replication</legend>\n        <ng-container *ngIf=\"{status: multisiteStatus$, isDefaultZg: isDefaultZoneGroup$ | async} as multisiteStatus; else loadingTpl\">\n          <cds-checkbox name=\"replication\"\n                        formControlName=\"replication\"\n                        id=\"replication\"\n                        [disabled]=\"!multisiteStatus.isDefaultZg && !multisiteStatus.status.available\"\n                        i18n-helperText\n                        i18n>Enable\n            <cd-help-text>Enables replication for the objects in the bucket.</cd-help-text>\n          </cds-checkbox>\n\n          <cd-alert-panel type=\"info\"\n                          class=\"me-1\"\n                          id=\"replication-info\"\n                          spacingClass=\"mt-1\"\n                          *ngIf=\"!editing\"\n                          i18n>\n            A bi-directional sync policy group will be created by the dashboard along with flows and pipes.\n            The pipe id will then be used for applying the replication policy to the bucket.\n          </cd-alert-panel>\n        </ng-container>\n      </div>\n    </fieldset>\n\n    <!-- Tags -->\n    <fieldset>\n      <legend class=\"cd-header\"\n              i18n>Tags\n        <cd-help-text>Tagging provides a way to categorize storage</cd-help-text>\n      </legend>\n      <span *ngFor=\"let tag of tags; let i=index;\">\n        <ng-container *ngTemplateOutlet=\"tagTpl; context:{index: i, tag: tag}\"></ng-container>\n      </span>\n\n      <div cdsRow>\n        <div cdsCol>\n          <cds-tooltip [description]=\"tags.length > 19 ? 'Maximum of 20 tags reached' : ''\"\n                       [highContrast]=\"true\"\n                       [caret]=\"true\">\n            <button cdsButton=\"tertiary\"\n                    id=\"add-tag\"\n                    [disabled]=\"tags.length > 19\"\n                    (click)=\"showTagModal()\">\n              <ng-container i18n>Add tag</ng-container>\n              <svg [cdsIcon]=\"icons.add\"\n                   [size]=\"icons.size16\"\n                   class=\"cds--btn__icon\"></svg>\n            </button>\n          </cds-tooltip>\n        </div>\n      </div>\n    </fieldset>\n\n    <!-- Policies -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend class=\"cd-header\"\n                i18n>Policies\n        </legend>\n\n        <!-- Bucket policy -->\n        <cds-textarea-label for=\"id\"\n                            [invalid]=\"!bucketForm.controls.bucket_policy.valid && (bucketForm.controls.bucket_policy.dirty)\"\n                            [invalidText]=\"bucketPolicyError\"\n                            i18n>Bucket Policy\n          <textarea cdsTextArea\n                    class=\"textarea-field\"\n                    id=\"bucket_policy\"\n                    formControlName=\"bucket_policy\"\n                    (change)=\"textAreaOnChange('bucket_policy')\"\n                    cols=\"200\"\n                    #bucketPolicyTextArea></textarea>\n        </cds-textarea-label>\n        <ng-template #bucketPolicyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('bucket_policy', frm, 'invalidJson')\"\n                i18n>Invalid json text.</span>\n        </ng-template>\n        <div cdsRow>\n          <div cdsCol>\n            <cds-button-set class=\"mt-1\">\n              <button cdsButton=\"tertiary\"\n                      id=\"example-generator-button\"\n                      (click)=\"openUrl('https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html?icmpid=docs_amazons3_console')\"\n                      i18n>Policy examples\n                <svg [cdsIcon]=\"icons.launch\"\n                     [size]=\"icons.size16\"\n                     class=\"cds--btn__icon\"></svg>\n              </button>\n              <button cdsButton=\"tertiary\"\n                      id=\"example-generator-button\"\n                      (click)=\"openUrl('https://awspolicygen.s3.amazonaws.com/policygen.html')\"\n                      i18n>Policy generator\n                <svg [cdsIcon]=\"icons.launch\"\n                     [size]=\"icons.size16\"\n                     class=\"cds--btn__icon\"></svg>\n              </button>\n            </cds-button-set>\n          </div>\n          <div cdsCol>\n            <cds-button-set class=\"float-end mt-1\">\n              <button cdsButton=\"tertiary\"\n                      id=\"clear-bucket-policy\"\n                      (click)=\"clearTextArea('bucket_policy', '{}')\"\n                      i18n>Clear\n                <svg [cdsIcon]=\"icons.destroy\"\n                     [size]=\"icons.size16\"\n                     class=\"cds--btn__icon\"></svg>\n              </button>\n            </cds-button-set>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lifecycle -->\n      <div *ngIf=\"editing\"\n           class=\"form-item\">\n        <cds-textarea-label for=\"id\"\n                            [invalid]=\"!bucketForm.controls.lifecycle.valid && bucketForm.controls.lifecycle.dirty\"\n                            [invalidText]=\"lifecycleError\"\n                            i18n>Lifecycle\n          <textarea cdsTextArea\n                    class=\"textarea-field\"\n                    id=\"lifecycle\"\n                    formControlName=\"lifecycle\"\n                    (change)=\"textAreaOnChange('lifecycle')\"\n                    cols=\"200\"\n                    #lifecycleTextArea></textarea>\n          <cd-help-text>JSON or XML formatted document</cd-help-text>\n        </cds-textarea-label>\n        <ng-template #lifecycleError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('lifecycle', frm, 'invalidJson')\"\n                i18n>Invalid json text.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"bucketForm.showError('lifecycle', frm, 'invalidXml')\"\n                i18n>Invalid xml text.</span>\n        </ng-template>\n        <div cdsRow>\n          <div cdsCol>\n            <cds-button-set class=\"mt-1\">\n              <button cdsButton=\"tertiary\"\n                      id=\"lifecycle-examples-button\"\n                      (click)=\"openUrl('https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-lifecycle.html#examples')\"\n                      i18n>Policy examples\n                <svg [cdsIcon]=\"icons.launch\"\n                     [size]=\"icons.size16\"\n                     class=\"cds--btn__icon\"></svg>\n              </button>\n            </cds-button-set>\n          </div>\n          <div cdsCol>\n            <cds-button-set class=\"float-end mt-1\">\n              <button cdsButton=\"tertiary\"\n                      id=\"clear-lifecycle\"\n                      (click)=\"clearTextArea('lifecycle', '{}')\"\n                      i18n>Clear\n                <svg [cdsIcon]=\"icons.destroy\"\n                     [size]=\"icons.size16\"\n                     class=\"cds--btn__icon\"></svg>\n              </button>\n            </cds-button-set>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-item\">\n\n        <!-- ACL -->\n        <cds-text-label i18n>ACL\n          <cd-help-text>Any changes to the ACL will overwrite previous one.\n            You can choose any of the available options to modify the spcified user group.</cd-help-text>\n        </cds-text-label>\n        <div cdsRow\n             class=\"form-item-append\">\n          <div cdsCol>\n            <cds-select id=\"grantee\"\n                        name=\"grantee\"\n                        label=\"Grantee\"\n                        formControlName=\"grantee\"\n                        helperText=\"Select a grantee (user group) to modify it's permisions\"\n                        [invalid]=\"!bucketForm.controls.grantee.valid && (bucketForm.controls.grantee.dirty)\"\n                        [invalidText]=\"granteeError\"\n                        (valueChange)=\"onSelectionFilter()\"\n                        i18n>Grantee\n              <option *ngFor=\"let item of grantees\"\n                      [value]=\"item\">{{ item }}</option>\n            </cds-select>\n            <ng-template #granteeError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"bucketForm.showError('grantee', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </ng-template>\n          </div>\n          <div cdsCol>\n            <cds-select id=\"aclPermission\"\n                        name=\"aclPermission\"\n                        [invalid]=\"!bucketForm.controls.aclPermission.valid && (bucketForm.controls.aclPermission.dirty)\"\n                        [invalidText]=\"aclPermissionError\"\n                        label=\"Permissions\"\n                        helperText=\"Select the permision to give to the selected grantee. Regardless, the owner of the bucket will always have FULL CONTROL access\"\n                        formControlName=\"aclPermission\">\n              <option *ngFor=\"let permission of aclPermissions\"\n                      [value]=\"permission\"\n                      i18n>{{ permission }}</option>\n            </cds-select>\n            <ng-template #aclPermissionError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"bucketForm.showError('aclPermission', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n\n    <!--Advanced-->\n    <cd-form-advanced-fieldset>\n      <!-- Placement target -->\n      <div class=\"form-item\"\n           *ngIf=\"!editing\">\n        <cds-select label=\"Placement target\"\n                    for=\"placement-target\"\n                    formControlName=\"placement-target\"\n                    name=\"placement-target\"\n                    id=\"placement-target\"\n                    helperText=\"When creating a bucket, a placement target can be provided as part of the LocationConstraint to override the default placement targets from the user and zonegroup.\"\n                    i18n-helperText\n                    i18n>Placement target\n          <option *ngIf=\"placementTargets === null\"\n                  [ngValue]=\"null\">Loading...</option>\n          <option *ngIf=\"placementTargets !== null\"\n                  [ngValue]=\"null\">-- Select a placement target --</option>\n          <option *ngFor=\"let placementTarget of placementTargets\"\n                  [value]=\"placementTarget.name\">{{ placementTarget.description }}</option>\n        </cds-select>\n      </div>\n\n      <!-- Bucket Rate Limit -->\n      <cd-rgw-rate-limit [type]=\"'bucket'\"\n                         [isEditing]=\"this.editing\"\n                         [allowBid]=\"this.bucketForm.getValue('bid')\"\n                         (rateLimitFormGroup)=\"rateLimitFormInit($event)\">\n      </cd-rgw-rate-limit>\n    </cd-form-advanced-fieldset>\n\n    <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                          [form]=\"bucketForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          wrappingClass=\"text-right\"></cd-form-button-panel>\n  </form>\n</div>\n\n<ng-template #tagTpl\n             let-tag=\"tag\"\n             let-index=\"index\">\n  <div class=\"form-item form-item-append\">\n    <ng-container *ngFor=\"let config of tagConfig\">\n      <input type=\"text\"\n             id=\"tag-{{config.attribute}}-{{index}}\"\n             cdsText\n             [ngbTooltip]=\"config.attribute\"\n             [value]=\"tag[config.attribute]\"\n             readonly>\n    </ng-container>\n\n    <!-- Tag actions -->\n    <cds-icon-button kind=\"tertiary\"\n                     size=\"md\"\n                     (click)=\"showTagModal(index)\">\n      <svg [cdsIcon]=\"icons.edit\"\n           [size]=\"icons.size16\"\n           class=\"cds-info-color cds--btn__icon\"></svg>\n    </cds-icon-button>\n    <cds-icon-button kind=\"danger\"\n                     size=\"md\"\n                     (click)=\"deleteTag(index)\">\n      <svg [cdsIcon]=\"icons.trash\"\n           [size]=\"icons.size16\"\n           class=\"cds-info-color cds--btn__icon\"></svg>\n    </cds-icon-button>\n  </div>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <cd-loading-panel i18n>Checking multi-site status...</cd-loading-panel>\n</ng-template>\n\n","import {\n  AfterViewChecked,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { AbstractControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { Observable, forkJoin } from 'rxjs';\nimport * as xml2js from 'xml2js';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { RgwSiteService } from '~/app/shared/api/rgw-site.service';\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { ActionLabelsI18n, AppConstants, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { rgwBucketEncryptionModel } from '../models/rgw-bucket-encryption';\nimport { RgwBucketMfaDelete } from '../models/rgw-bucket-mfa-delete';\nimport {\n  AclPermissionsType,\n  RgwBucketAclPermissions as aclPermission,\n  RgwBucketAclGrantee as Grantee\n} from './rgw-bucket-acl-permissions.enum';\nimport { RgwBucketVersioning } from '../models/rgw-bucket-versioning';\nimport { BucketTagModalComponent } from '../bucket-tag-modal/bucket-tag-modal.component';\nimport { TextAreaJsonFormatterService } from '~/app/shared/services/text-area-json-formatter.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { TextAreaXmlFormatterService } from '~/app/shared/services/text-area-xml-formatter.service';\nimport { RgwRateLimitComponent } from '../rgw-rate-limit/rgw-rate-limit.component';\nimport { RgwRateLimitConfig } from '../models/rgw-rate-limit';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { RgwUserAccountsService } from '~/app/shared/api/rgw-user-accounts.service';\nimport { RgwUser } from '../models/rgw-user';\n\n@Component({\n  selector: 'cd-rgw-bucket-form',\n  templateUrl: './rgw-bucket-form.component.html',\n  styleUrls: ['./rgw-bucket-form.component.scss']\n})\nexport class RgwBucketFormComponent extends CdForm implements OnInit, AfterViewChecked {\n  @ViewChild('bucketPolicyTextArea')\n  public bucketPolicyTextArea: ElementRef<any>;\n  @ViewChild('lifecycleTextArea')\n  public lifecycleTextArea: ElementRef<any>;\n\n  bucketForm: CdFormGroup;\n  editing = false;\n  owners: RgwUser[] = null;\n  accounts: string[] = [];\n  accountUsers: RgwUser[] = [];\n  kmsProviders: string[] = null;\n  action: string;\n  resource: string;\n  zonegroup: string;\n  placementTargets: object[] = [];\n  isVersioningAlreadyEnabled = false;\n  isMfaDeleteAlreadyEnabled = false;\n  icons = Icons;\n  kmsConfigured = false;\n  s3Configured = false;\n  tags: Record<string, string>[] = [];\n  dirtyTags = false;\n  tagConfig = [\n    {\n      attribute: 'key'\n    },\n    {\n      attribute: 'value'\n    }\n  ];\n  grantees: string[] = [Grantee.Owner, Grantee.Everyone, Grantee.AuthenticatedUsers];\n  aclPermissions: AclPermissionsType[] = [aclPermission.FullControl];\n  multisiteStatus$: Observable<any>;\n  isDefaultZoneGroup$: Observable<boolean>;\n\n  get isVersioningEnabled(): boolean {\n    return this.bucketForm.getValue('versioning');\n  }\n  get isMfaDeleteEnabled(): boolean {\n    return this.bucketForm.getValue('mfa-delete');\n  }\n\n  @ViewChild(RgwRateLimitComponent, { static: false }) rateLimitComponent!: RgwRateLimitComponent;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: CdFormBuilder,\n    private rgwBucketService: RgwBucketService,\n    private rgwSiteService: RgwSiteService,\n    private modalService: ModalCdsService,\n    private rgwUserService: RgwUserService,\n    private notificationService: NotificationService,\n    private textAreaJsonFormatterService: TextAreaJsonFormatterService,\n    private textAreaXmlFormatterService: TextAreaXmlFormatterService,\n    public actionLabels: ActionLabelsI18n,\n    private readonly changeDetectorRef: ChangeDetectorRef,\n    private rgwMultisiteService: RgwMultisiteService,\n    private rgwDaemonService: RgwDaemonService,\n    private rgwAccountsService: RgwUserAccountsService\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/rgw/bucket/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`bucket`;\n    this.createForm();\n  }\n\n  ngAfterViewChecked(): void {\n    this.changeDetectorRef.detectChanges();\n    this.textAreaOnChange(this.bucketPolicyTextArea);\n    this.textAreaOnChange(this.lifecycleTextArea);\n  }\n\n  createForm() {\n    const self = this;\n    const lockDaysValidator = CdValidators.custom('lockDays', () => {\n      if (!self.bucketForm || !_.get(self.bucketForm.getRawValue(), 'lock_enabled')) {\n        return false;\n      }\n      const lockDays = Number(self.bucketForm.getValue('lock_retention_period_days'));\n      return !Number.isInteger(lockDays) || lockDays === 0;\n    });\n    this.bucketForm = this.formBuilder.group({\n      id: [null],\n      bid: [\n        null,\n        [Validators.required],\n        this.editing\n          ? []\n          : [CdValidators.bucketName(), CdValidators.bucketExistence(false, this.rgwBucketService)]\n      ],\n      owner: [\n        null,\n        [\n          CdValidators.requiredIf({\n            isAccountOwner: false\n          })\n        ]\n      ],\n      kms_provider: ['vault'],\n      'placement-target': [null],\n      versioning: [null],\n      'mfa-delete': [null],\n      'mfa-token-serial': [''],\n      'mfa-token-pin': [''],\n      lock_enabled: [{ value: false, disabled: this.editing }],\n      encryption_enabled: [null],\n      encryption_type: [\n        null,\n        [\n          CdValidators.requiredIf({\n            encryption_enabled: true\n          })\n        ]\n      ],\n      keyId: [\n        null,\n        [\n          CdValidators.requiredIf({\n            encryption_type: 'aws:kms',\n            encryption_enabled: true\n          })\n        ]\n      ],\n      lock_mode: ['COMPLIANCE'],\n      lock_retention_period_days: [10, [CdValidators.number(false), lockDaysValidator]],\n      bucket_policy: ['{}', CdValidators.json()],\n      lifecycle: ['{}', CdValidators.jsonOrXml()],\n      grantee: [Grantee.Owner, [Validators.required]],\n      aclPermission: [[aclPermission.FullControl], [Validators.required]],\n      replication: [false],\n      isAccountOwner: [false],\n      accountUser: [\n        null,\n        [\n          CdValidators.requiredIf({\n            isAccountOwner: true\n          })\n        ]\n      ]\n    });\n  }\n\n  ngOnInit() {\n    const promises = {\n      owners: this.rgwUserService.enumerate(true),\n      accounts: this.rgwAccountsService.list()\n    };\n    this.multisiteStatus$ = this.rgwMultisiteService.status();\n    this.isDefaultZoneGroup$ = this.rgwDaemonService.selectedDaemon$.pipe(\n      switchMap((daemon) =>\n        this.rgwSiteService.get('default-zonegroup').pipe(\n          map((defaultZoneGroup) => {\n            return daemon.zonegroup_id === defaultZoneGroup;\n          })\n        )\n      )\n    );\n\n    this.kmsProviders = rgwBucketEncryptionModel.kmsProviders;\n    this.rgwBucketService.getEncryptionConfig().subscribe((data) => {\n      this.s3Configured = data.s3 && Object.keys(data.s3).length > 0;\n      this.kmsConfigured = data.kms && Object.keys(data.kms).length > 0;\n      // Set the encryption type based on the configurations\n      if (this.kmsConfigured && this.s3Configured) {\n        this.bucketForm.get('encryption_type').setValue('');\n      } else if (this.kmsConfigured) {\n        this.bucketForm.get('encryption_type').setValue('aws:kms');\n      } else if (this.s3Configured) {\n        this.bucketForm.get('encryption_type').setValue('AES256');\n      } else {\n        this.bucketForm.get('encryption_type').setValue('');\n      }\n    });\n\n    if (!this.editing) {\n      promises['getPlacementTargets'] = this.rgwSiteService.get('placement-targets');\n    }\n\n    // Process route parameters.\n    this.route.params.subscribe((params: { bid: string; owner: string }) => {\n      let bucketOwner = '';\n      if (params.hasOwnProperty('owner')) {\n        // only used for showing bucket owned by account\n        bucketOwner = decodeURIComponent(params.owner);\n      }\n      if (params.hasOwnProperty('bid')) {\n        const bid = decodeURIComponent(params.bid);\n        promises['getBid'] = this.rgwBucketService.get(bid);\n      }\n\n      forkJoin(promises).subscribe((data: any) => {\n        // Get the list of possible owners.\n        this.accounts = data.accounts;\n        this.accountUsers = data.owners.filter((owner: RgwUser) => owner.account_id);\n        this.owners = data.owners.filter((owner: RgwUser) => !owner.account_id);\n        // Get placement targets:\n        if (data['getPlacementTargets']) {\n          const placementTargets = data['getPlacementTargets'];\n          this.zonegroup = placementTargets['zonegroup'];\n          _.forEach(placementTargets['placement_targets'], (placementTarget) => {\n            placementTarget['description'] = `${placementTarget['name']} (${$localize`pool`}: ${\n              placementTarget['data_pool']\n            })`;\n            this.placementTargets.push(placementTarget);\n          });\n\n          // If there is only 1 placement target, select it by default:\n          if (this.placementTargets.length === 1) {\n            this.bucketForm.get('placement-target').setValue(this.placementTargets[0]['name']);\n          }\n        }\n\n        if (data['getBid']) {\n          const bidResp = data['getBid'];\n          // Get the default values (incl. the values from disabled fields).\n          const defaults = _.clone(this.bucketForm.getRawValue());\n\n          // Get the values displayed in the form. We need to do that to\n          // extract those key/value pairs from the response data, otherwise\n          // the Angular react framework will throw an error if there is no\n          // field for a given key.\n          let value: object = _.pick(bidResp, _.keys(defaults));\n\n          value['lock_retention_period_days'] = this.rgwBucketService.getLockDays(bidResp);\n          value['placement-target'] = bidResp['placement_rule'];\n          value['versioning'] = bidResp['versioning'] === RgwBucketVersioning.ENABLED;\n          value['mfa-delete'] = bidResp['mfa_delete'] === RgwBucketMfaDelete.ENABLED;\n          value['encryption_enabled'] = bidResp['encryption'] === 'Enabled';\n          if (bidResp['tagset']) {\n            for (const [key, value] of Object.entries(bidResp['tagset'])) {\n              this.tags.push({ key: key, value: value.toString() });\n            }\n          }\n          // Append default values.\n          value = _.merge(defaults, value);\n          // Update the form.\n          if (this.editing) {\n            [value['grantee'], value['aclPermission']] = this.aclXmlToFormValues(\n              bidResp['acl'],\n              bidResp['owner']\n            );\n            value['lifecycle'] = JSON.stringify(bidResp['lifecycle'] || {});\n          }\n          this.bucketForm.setValue(value);\n          if (this.editing) {\n            // Disable changing the owner of the bucket in case\n            // its owned by the account.\n            const ownersList = data.owners.map((owner: RgwUser) => owner.uid);\n            if (!ownersList.includes(value['owner'])) {\n              // creating dummy user object to show the account owner\n              // here value['owner] is the account user id\n              const user = Object.assign(\n                { uid: bucketOwner },\n                ownersList.find((owner: RgwUser) => owner.uid === AppConstants.defaultUser)\n              );\n              this.accountUsers.push(user);\n              this.bucketForm.get('isAccountOwner').setValue(true);\n              this.bucketForm.get('isAccountOwner').disable();\n              this.bucketForm.get('accountUser').setValue(bucketOwner);\n              this.bucketForm.get('accountUser').disable();\n            }\n            this.isVersioningAlreadyEnabled = this.isVersioningEnabled;\n            this.isMfaDeleteAlreadyEnabled = this.isMfaDeleteEnabled;\n            this.setMfaDeleteValidators();\n            if (value['lock_enabled']) {\n              this.bucketForm.controls['versioning'].disable();\n            }\n            if (value['bucket_policy']) {\n              this.bucketForm\n                .get('bucket_policy')\n                .setValue(JSON.stringify(value['bucket_policy'], null, 2));\n            }\n            if (value['replication']) {\n              const replicationConfig = value['replication'];\n              if (replicationConfig?.['Rule']?.['Status'] === 'Enabled') {\n                this.bucketForm.get('replication').setValue(true);\n              } else {\n                this.bucketForm.get('replication').setValue(false);\n              }\n            }\n            this.filterAclPermissions();\n          }\n        }\n        this.loadingReady();\n      });\n    });\n  }\n\n  goToListView() {\n    this.router.navigate(['/rgw/bucket']);\n  }\n  rateLimitFormInit(rateLimitForm: FormGroup) {\n    this.bucketForm.addControl('rateLimit', rateLimitForm);\n  }\n  submit() {\n    // Exit immediately if the form isn't dirty.\n    if (this.bucketForm.pristine && this.rateLimitComponent.form.pristine) {\n      this.goToListView();\n      return;\n    }\n\n    // Ensure that no validation is pending\n    if (this.bucketForm.pending) {\n      this.bucketForm.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    if (this.bucketForm.getValue('encryption_enabled') == null) {\n      this.bucketForm.get('encryption_enabled').setValue(false);\n      this.bucketForm.get('encryption_type').setValue(null);\n    }\n\n    const values = this.bucketForm.value;\n    const xmlStrTags = this.tagsToXML(this.tags);\n    const bucketPolicy = this.getBucketPolicy();\n    const cannedAcl = this.permissionToCannedAcl();\n\n    if (this.editing) {\n      // Edit\n      const versioning = this.getVersioningStatus();\n      const mfaDelete = this.getMfaDeleteStatus();\n      // make the owner empty if the field is disabled.\n      // this ensures the bucket doesn't gets updated with owner when\n      // the bucket is owned by the account.\n      let owner;\n      if (this.bucketForm.get('accountUser').disabled) {\n        // If the bucket is owned by the account, then set the owner as account user.\n        owner = '';\n      } else if (values['isAccountOwner']) {\n        const accountUser: RgwUser = this.accountUsers.filter(\n          (user) => values['accountUser'] === user.uid\n        )[0];\n        owner = accountUser?.account_id ?? values['owner'];\n      } else {\n        owner = values['owner'];\n      }\n\n      this.rgwBucketService\n        .update(\n          values['bid'],\n          values['id'],\n          owner,\n          versioning,\n          values['encryption_enabled'],\n          values['encryption_type'],\n          values['keyId'],\n          mfaDelete,\n          values['mfa-token-serial'],\n          values['mfa-token-pin'],\n          values['lock_mode'],\n          values['lock_retention_period_days'],\n          xmlStrTags,\n          bucketPolicy,\n          cannedAcl,\n          values['replication'],\n          values['lifecycle']\n        )\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Updated Object Gateway bucket '${values.bid}'.`\n            );\n            this.updateBucketRateLimit();\n            this.goToListView();\n          },\n          () => {\n            // Reset the 'Submit' button.\n            this.bucketForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    } else {\n      const owner = values['isAccountOwner'] ? values['accountUser'] : values['owner'];\n      // Add\n      this.rgwBucketService\n        .create(\n          values['bid'],\n          owner,\n          this.zonegroup,\n          values['placement-target'],\n          values['lock_enabled'],\n          values['lock_mode'],\n          values['lock_retention_period_days'],\n          values['encryption_enabled'],\n          values['encryption_type'],\n          values['keyId'],\n          xmlStrTags,\n          bucketPolicy,\n          cannedAcl,\n          values['replication']\n        )\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Created Object Gateway bucket '${values.bid}'`\n            );\n            this.goToListView();\n            this.updateBucketRateLimit();\n          },\n          () => {\n            // Reset the 'Submit' button.\n            this.bucketForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    }\n  }\n\n  updateBucketRateLimit() {\n    /**\n     * Whenever we change the owner of bucket from non-tenanted to tenanted\n     * and vice-versa with the rate-limit changes there was issue in sending\n     * bucket name, hence the below logic caters to it.\n     *\n     * Scenario 1: Changing the bucket owner from tenanted to non-tenanted\n     * Scenario 2: Changing the bucket owner from non-tenanted to tenanted\n     * Scenario 3: Keeping the owner(tenanted) same and changing only rate limit\n     */\n    // in case of creating bucket with account user, owner will be empty\n    const owner = this.bucketForm.getValue('owner') || '';\n    const bidInput = this.bucketForm.getValue('bid');\n\n    let bid: string;\n\n    const hasOwnerWithDollar = owner.includes('$');\n    const bidHasSlash = bidInput.includes('/');\n\n    if (bidHasSlash && hasOwnerWithDollar) {\n      bid = bidInput;\n    } else if (hasOwnerWithDollar) {\n      const ownerPrefix = owner.split('$')[0];\n      bid = `${ownerPrefix}/${bidInput}`;\n    } else if (bidHasSlash) {\n      bid = bidInput.split('/')[1];\n    } else {\n      bid = bidInput;\n    }\n    // Check if bucket ratelimit has been modified.\n    const rateLimitConfig: RgwRateLimitConfig = this.rateLimitComponent.getRateLimitFormValue();\n    if (!!rateLimitConfig) {\n      this.rgwBucketService.updateBucketRateLimit(bid, rateLimitConfig).subscribe(\n        () => {},\n        (error: any) => {\n          this.notificationService.show(NotificationType.error, error);\n        }\n      );\n    }\n  }\n\n  areMfaCredentialsRequired() {\n    return (\n      this.isMfaDeleteEnabled !== this.isMfaDeleteAlreadyEnabled ||\n      (this.isMfaDeleteAlreadyEnabled &&\n        this.isVersioningEnabled !== this.isVersioningAlreadyEnabled)\n    );\n  }\n\n  setMfaDeleteValidators() {\n    const mfaTokenSerialControl = this.bucketForm.get('mfa-token-serial');\n    const mfaTokenPinControl = this.bucketForm.get('mfa-token-pin');\n\n    if (this.areMfaCredentialsRequired()) {\n      mfaTokenSerialControl.setValidators(Validators.required);\n      mfaTokenPinControl.setValidators(Validators.required);\n    } else {\n      mfaTokenSerialControl.setValidators(null);\n      mfaTokenPinControl.setValidators(null);\n    }\n\n    mfaTokenSerialControl.updateValueAndValidity();\n    mfaTokenPinControl.updateValueAndValidity();\n  }\n\n  getVersioningStatus() {\n    return this.isVersioningEnabled ? RgwBucketVersioning.ENABLED : RgwBucketVersioning.SUSPENDED;\n  }\n\n  getMfaDeleteStatus() {\n    return this.isMfaDeleteEnabled ? RgwBucketMfaDelete.ENABLED : RgwBucketMfaDelete.DISABLED;\n  }\n\n  getBucketPolicy() {\n    return this.bucketForm.getValue('bucket_policy') || '{}';\n  }\n\n  fileUpload(files: FileList, controlName: string) {\n    const file: File = files[0];\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      const control: AbstractControl = this.bucketForm.get(controlName);\n      control.setValue(file);\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n  }\n\n  textAreaOnChange(textArea: ElementRef<any>) {\n    if (textArea?.nativeElement?.value?.startsWith?.('<')) {\n      this.textAreaXmlFormatterService.format(textArea);\n    } else {\n      this.textAreaJsonFormatterService.format(textArea);\n    }\n  }\n\n  openUrl(url: string) {\n    window.open(url, '_blank');\n  }\n\n  clearTextArea(field: string, defaultValue: string = '') {\n    this.bucketForm.get(field).setValue(defaultValue);\n    this.bucketForm.markAsDirty();\n    this.bucketForm.updateValueAndValidity();\n  }\n\n  showTagModal(index?: number) {\n    const modalRef = this.modalService.show(BucketTagModalComponent);\n    const modalComponent = modalRef as BucketTagModalComponent;\n    modalComponent.currentKeyTags = this.tags.map((item) => item.key);\n\n    if (_.isNumber(index)) {\n      modalComponent.editMode = true;\n      modalComponent.fillForm(this.tags[index]);\n      modalComponent.storedKey = this.tags[index]['key'];\n    }\n\n    modalComponent.submitAction.subscribe((tag: Record<string, string>) => {\n      this.setTag(tag, index);\n    });\n  }\n\n  deleteTag(index: number) {\n    this.tags.splice(index, 1);\n    this.dirtyTags = true;\n    this.bucketForm.markAsDirty();\n    this.bucketForm.updateValueAndValidity();\n  }\n\n  private setTag(tag: Record<string, string>, index?: number) {\n    if (_.isNumber(index)) {\n      this.tags[index] = tag;\n    } else {\n      this.tags.push(tag);\n    }\n    this.dirtyTags = true;\n    this.bucketForm.markAsDirty();\n    this.bucketForm.updateValueAndValidity();\n  }\n\n  private tagsToXML(tags: Record<string, string>[]): string {\n    if (!this.dirtyTags && tags.length === 0) return '';\n    let xml = '<Tagging><TagSet>';\n    for (const tag of tags) {\n      xml += '<Tag>';\n      for (const key in tag) {\n        if (key === 'key') {\n          xml += `<Key>${tag[key]}</Key>`;\n        } else if (key === 'value') {\n          xml += `<Value>${tag[key]}</Value>`;\n        }\n      }\n      xml += '</Tag>';\n    }\n    xml += '</TagSet></Tagging>';\n    return xml;\n  }\n\n  aclXmlToFormValues(xml: any, bucketOwner: string): [Grantee, AclPermissionsType] {\n    const parser = new xml2js.Parser({ explicitArray: false, trim: true });\n    let selectedAclPermission: AclPermissionsType = aclPermission.FullControl;\n    let selectedGrantee: Grantee = Grantee.Owner;\n    parser.parseString(xml, (err, result) => {\n      if (err) return null;\n\n      const xmlGrantees: any = result['AccessControlPolicy']['AccessControlList']['Grant'];\n      for (let i = 0; i < xmlGrantees.length; i++) {\n        if (xmlGrantees[i]['Grantee']['ID'] === bucketOwner) continue;\n        if (\n          xmlGrantees[i]['Grantee']['URI'] &&\n          xmlGrantees[i]['Grantee']['URI'].includes('AllUsers')\n        ) {\n          selectedGrantee = Grantee.Everyone;\n          if (\n            xmlGrantees[i]['Permission'] === 'READ' &&\n            selectedAclPermission !== aclPermission.Write\n          ) {\n            selectedAclPermission = aclPermission.Read;\n          } else if (\n            xmlGrantees[i]['Permission'] === ' WRITE' &&\n            selectedAclPermission !== aclPermission.Read\n          ) {\n            selectedAclPermission = aclPermission.Write;\n          } else {\n            selectedAclPermission = aclPermission.All;\n          }\n        } else if (\n          xmlGrantees[i]['Grantee']['URI'] &&\n          xmlGrantees[i]['Grantee']['URI'].includes('AuthenticatedUsers')\n        ) {\n          selectedGrantee = Grantee.AuthenticatedUsers;\n          selectedAclPermission = aclPermission.Read;\n        }\n      }\n    });\n    return [selectedGrantee, selectedAclPermission];\n  }\n\n  /*\n   Set the selector's options to the available options depending\n   on the selected Grantee and reset it's value\n   */\n  onSelectionFilter() {\n    this.filterAclPermissions();\n    this.bucketForm.get('aclPermission').setValue(this.aclPermissions[0]);\n  }\n\n  filterAclPermissions() {\n    const selectedGrantee: Grantee = this.bucketForm.get('grantee').value;\n    switch (selectedGrantee) {\n      case Grantee.Owner:\n        this.aclPermissions = [aclPermission.FullControl];\n        break;\n      case Grantee.Everyone:\n        this.aclPermissions = [aclPermission.Read, aclPermission.All];\n        break;\n      case Grantee.AuthenticatedUsers:\n        this.aclPermissions = [aclPermission.Read];\n        break;\n    }\n  }\n\n  permissionToCannedAcl(): string {\n    const selectedGrantee: Grantee = this.bucketForm.get('grantee').value;\n    const selectedAclPermission = this.bucketForm.get('aclPermission').value;\n    switch (selectedGrantee) {\n      case Grantee.Everyone:\n        return selectedAclPermission === aclPermission.Read ? 'public-read' : 'public-read-write';\n      case Grantee.AuthenticatedUsers:\n        return 'authenticated-read';\n      default:\n        return 'private';\n    }\n  }\n}\n","export interface ZoneGroupDetails {\n  default_zonegroup: string;\n  name: string;\n  zonegroups: ZoneGroup[];\n}\n\nexport interface StorageClass {\n  placement_target: string;\n  storage_class?: string;\n  endpoint?: string;\n  region?: string;\n  zonegroup_name?: string;\n}\n\nexport interface TierTarget {\n  key: string;\n  val: {\n    storage_class: string;\n    tier_type: string;\n    retain_head_object: boolean;\n    allow_read_through: boolean;\n    read_through_restore_days: number;\n    restore_storage_class: string;\n    s3?: S3Details;\n    's3-glacier'?: S3Glacier;\n  };\n}\n\nexport interface Target {\n  name: string;\n  tier_targets: TierTarget[];\n  storage_classes?: string[];\n}\n\nexport interface StorageClassDetails {\n  tier_type: string;\n  target_path: string;\n  access_key: string;\n  secret: string;\n  multipart_min_part_size: number;\n  multipart_sync_threshold: number;\n  host_style: string;\n  allow_read_through: boolean;\n  zonegroup_name?: string;\n  placement_targets?: string;\n  glacier_restore_days?: number;\n  glacier_restore_tier_type?: string;\n  read_through_restore_days?: number;\n  restore_storage_class?: string;\n  retain_head_object?: boolean;\n}\n\nexport interface ZoneGroup {\n  name: string;\n  id: string;\n  placement_targets?: Target[];\n}\n\nexport interface S3Details {\n  endpoint: string;\n  access_key: string;\n  storage_class: string;\n  target_path: string;\n  target_storage_class: string;\n  region: string;\n  secret: string;\n  multipart_min_part_size: number;\n  multipart_sync_threshold: number;\n  host_style: boolean;\n  retain_head_object?: boolean;\n  allow_read_through?: boolean;\n}\nexport interface S3Glacier {\n  glacier_restore_days: number;\n  glacier_restore_tier_type: string;\n}\n\nexport interface RequestModel {\n  zone_group: string;\n  placement_targets: PlacementTarget[];\n}\n\nexport interface PlacementTarget {\n  placement_id: string;\n  tags?: string[];\n  tier_type?: TIER_TYPE;\n  tier_config?: {\n    endpoint: string;\n    access_key: string;\n    secret: string;\n    target_path: string;\n    retain_head_object: boolean;\n    allow_read_through: boolean;\n    region: string;\n    multipart_sync_threshold: number;\n    multipart_min_part_size: number;\n    glacier_restore_days?: number;\n    glacier_restore_tier_type?: string;\n    restore_storage_class?: string;\n    read_through_restore_days?: number;\n  };\n  storage_class?: string;\n  name?: string;\n  tier_targets?: TierTarget[];\n}\n\nexport interface StorageClassOption {\n  value: string;\n  label: string;\n}\n\nexport interface TextLabels {\n  targetPathText: string;\n  targetEndpointText: string;\n  targetRegionText: string;\n  multipartMinPartText: string;\n  storageClassText: string;\n  multipartSyncThresholdText: string;\n  targetSecretKeyText: string;\n  targetAccessKeyText: string;\n  retainHeadObjectText: string;\n  allowReadThroughText: string;\n  glacierRestoreDayText: string;\n  glacierRestoreTiertypeText: string;\n  tiertypeText: string;\n  restoreDaysText: string;\n  readthroughrestoreDaysText: string;\n  restoreStorageClassText: string;\n}\n\nexport const CLOUD_TIER_REQUIRED_FIELDS = [\n  'region',\n  'target_endpoint',\n  'access_key',\n  'secret_key',\n  'target_path'\n];\n\nexport const GLACIER_REQUIRED_FIELDS = [\n  'region',\n  'target_endpoint',\n  'access_key',\n  'secret_key',\n  'target_path',\n  'glacier_restore_tier_type',\n  'restore_storage_class'\n];\n\nexport const TIER_TYPE = {\n  LOCAL: 'local',\n  CLOUD_TIER: 'cloud-s3',\n  GLACIER: 'cloud-s3-glacier'\n} as const;\n\nexport const STORAGE_CLASS_CONSTANTS = {\n  DEFAULT_GLACIER_RESTORE_DAYS: 1,\n  DEFAULT_READTHROUGH_RESTORE_DAYS: 1,\n  DEFAULT_MULTIPART_SYNC_THRESHOLD: 33554432,\n  DEFAULT_MULTIPART_MIN_PART_SIZE: 33554432,\n  DEFAULT_STORAGE_CLASS: 'Standard'\n} as const;\n\nexport const DEFAULT_PLACEMENT = 'default-placement';\n\nexport type TIER_TYPE = typeof TIER_TYPE[keyof typeof TIER_TYPE];\n\nexport const TIER_TYPE_DISPLAY = {\n  LOCAL: 'Local',\n  CLOUD_TIER: 'Cloud S3',\n  GLACIER: 'Cloud S3 Glacier'\n};\n\nexport const ALLOW_READ_THROUGH_TEXT =\n  'Enables fetching objects from remote cloud S3 if not found locally.';\n\nexport const MULTIPART_MIN_PART_TEXT =\n  'It specifies that objects this size or larger are transitioned to the cloud using multipart upload.';\n\nexport const MULTIPART_SYNC_THRESHOLD_TEXT =\n  'It specifies the minimum part size to use when transitioning objects using multipart upload.';\n\nexport const TARGET_PATH_TEXT =\n  'Target Path refers to the storage location (e.g., bucket or container) in the cloud where data will be stored.';\n\nexport const TARGET_REGION_TEXT =\n  'The region of the remote cloud service where storage is located.';\n\nexport const TARGET_ENDPOINT_TEXT =\n  'The URL endpoint of the remote cloud service for accessing storage.';\n\nexport const TARGET_ACCESS_KEY_TEXT =\n  \"To view or copy your access key, go to your cloud service's user management or credentials section, find your user profile, and locate the access key. You can view and copy the key by following the instructions provided.\";\n\nexport const TARGET_SECRET_KEY_TEXT =\n  \"To view or copy your secret key, go to your cloud service's user management or credentials section, find your user profile, and locate the secret key. You can view and copy the key by following the instructions provided.\";\n\nexport const RETAIN_HEAD_OBJECT_TEXT = 'Retain object metadata after transition to the cloud.';\n\nexport const HOST_STYLE = `The URL format for accessing the remote S3 endpoint:\n  - 'Path': Use for a path-based URL\n  - 'Virtual': Use for a domain-based URL`;\n\nexport const LOCAL_STORAGE_CLASS_TEXT = $localize`Local storage uses on-premises or directly attached devices for data storage.`;\n\nexport const CLOUDS3_STORAGE_CLASS_TEXT = $localize`Cloud S3 storage uses Amazon S3-compatible cloud services for tiering.`;\n\nexport const GLACIER_STORAGE_CLASS_TEXT = $localize`Glacier storage uses Amazon S3 Glacier for low-cost, long-term archival data storage.`;\n\nexport const GLACIER_RESTORE_DAY_TEXT = $localize`Refers to number of days to the object will be restored on glacier/tape endpoint.`;\n\nexport const GLACIER_RESTORE_TIER_TYPE_TEXT = $localize`Restore retrieval type.`;\n\nexport const STANDARD_TIER_TYPE_TEXT = $localize`Standard glacier restore tier type restores data in 3–5 hours.`;\n\nexport const EXPEDITED_TIER_TYPE_TEXT = $localize`Expedited glacier restore tier type restores in 1–5 minutes (faster but costlier).`;\n\nexport const RESTORE_DAYS_TEXT = $localize`Refers to number of days to the object will be restored on glacier/tape endpoint.`;\n\nexport const READTHROUGH_RESTORE_DAYS_TEXT = $localize`The days for which objects restored via read-through are retained.`;\n\nexport const RESTORE_STORAGE_CLASS_TEXT = $localize`The storage class to which object data is to be restored.`;\n\nexport const ZONEGROUP_TEXT = $localize`A Zone Group is a logical grouping of one or more zones that share the same data\n                  and metadata, allowing for multi-site replication and geographic distribution of\n                  data.`;\n","import {\n  Target,\n  TierTarget,\n  TIER_TYPE,\n  ZoneGroup,\n  ZoneGroupDetails\n} from '../models/rgw-storage-class.model';\n\nexport class BucketTieringUtils {\n  static filterAndMapTierTargets(zonegroupData: ZoneGroupDetails) {\n    return zonegroupData.zonegroups.flatMap((zoneGroup: ZoneGroup) =>\n      zoneGroup.placement_targets.flatMap((target: Target) => {\n        const storage_class = new Set<string>(\n          (target.tier_targets || []).map((tier_target: TierTarget) => tier_target.key)\n        );\n        const tierTargetDetails = (target.tier_targets || []).map((tierTarget: TierTarget) =>\n          this.getTierTargets(tierTarget, zoneGroup.name, target.name)\n        );\n        const localStorageClasses = (target.storage_classes || [])\n          .filter((storageClass) => storageClass !== 'STANDARD' && !storage_class.has(storageClass))\n          .map((storageClass) => ({\n            zonegroup_name: zoneGroup.name,\n            placement_target: target.name,\n            storage_class: storageClass,\n            tier_type: TIER_TYPE.LOCAL\n          }));\n\n        return [...tierTargetDetails, ...localStorageClasses];\n      })\n    );\n  }\n\n  private static getTierTargets(tierTarget: TierTarget, zoneGroup: string, targetName: string) {\n    const val = tierTarget.val;\n    const tierType = val.tier_type;\n    const commonProps = {\n      zonegroup_name: zoneGroup,\n      placement_target: targetName,\n      storage_class: val.storage_class,\n      tier_type: tierType\n    };\n    const cloudProps = {\n      ...commonProps,\n      retain_head_object: val.retain_head_object,\n      allow_read_through: val.allow_read_through,\n      restore_storage_class: val.restore_storage_class,\n      read_through_restore_days: val.read_through_restore_days,\n      ...val.s3\n    };\n\n    if (!tierType || tierType === TIER_TYPE.LOCAL) {\n      return commonProps;\n    }\n\n    if (tierType === TIER_TYPE.GLACIER) {\n      return {\n        ...cloudProps,\n        ...val['s3-glacier']\n      };\n    }\n    return cloudProps;\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\"\n                    i18n>{{editing ? 'Edit' : 'Create'}} Tiering configuration\n    <cd-help-text [formAllFieldsRequired]=\"true\"></cd-help-text>\n  </cds-modal-header>\n\n<ng-container *cdFormLoading=\"loading\">\n  <section cdsModalContent>\n    <cd-alert-panel\n      *ngIf=\"(snapScheduleModuleStatus$ | async) === false\"\n      type=\"info\"\n      spacingClass=\"mb-3\"\n      i18n\n      class=\"align-items-center\"\n      actionName=\"Enable\"\n      (action)=\"enableSnapshotSchedule()\"\n>\n  In order to access the snapshot scheduler feature, the snap_scheduler module must be enabled\n    </cd-alert-panel>\n      <cd-alert-panel *ngIf=\"storageClassList?.length === 0 &&\n                      isStorageClassFetched\"\n                      type=\"info\"\n                      spacingClass=\"mb-3\"\n                      class=\"align-items-center\"\n                      actionName=\"Create\"\n                      i18n\n                      (action)=\"goToCreateStorageClass()\">\n      No storage class found. Consider creating it first to proceed.\n    </cd-alert-panel>\n    <form name=\"tieringForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"tieringForm\"\n          novalidate>\n      <div class=\"form-item\">\n        <cds-text-label\n          labelInputID=\"rule_name\"\n          [invalid]=\"!tieringForm.controls.name.valid && tieringForm.controls.name.dirty\"\n          [invalidText]=\"ruleNameError\"\n          [helperText]=\"ruleHelper\"\n          i18n\n          >Rule Name\n          <input\n            cdsText\n            type=\"text\"\n            id=\"rule_name\"\n            maxlength=\"255\"\n            formControlName=\"name\"\n          />\n        </cds-text-label>\n        <ng-template #ruleHelper>\n          <span i18n>Unique identifier for the rule. The value cannot be longer than 255 characters.\n          </span>\n        </ng-template>\n        <ng-template #ruleNameError>\n          <span *ngIf=\"tieringForm.showError('name', formDir, 'required')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n>This field is required.</ng-container>\n          </span>\n          <span *ngIf=\"tieringForm.showError('name', formDir, 'duplicate')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n>Please enter a unique name.</ng-container>\n          </span>\n        </ng-template>\n      </div>\n      <div class=\"form-item\">\n        <cds-select id=\"storageClass\"\n                    formControlName=\"storageClass\"\n                    label=\"Storage Class\"\n                    [helperText]=\"storageClassHelper\">\n          <option *ngIf=\"storageClassList === null\"\n                  value=\"\">Loading...</option>\n          <option *ngIf=\"storageClassList !== null && storageClassList.length === 0\"\n                  value=\"\">-- No storage class available --</option>\n          <option *ngIf=\"storageClassList !== null && storageClassList.length > 0\"\n                  value=\"\">-- Select the storage class --</option>\n          <option *ngFor=\"let tier of storageClassList\"\n                  [value]=\"tier.storage_class\">\n            {{ tier.storage_class }}\n          </option>\n        </cds-select>\n        <ng-template #storageClassHelper>\n          <span i18n>The storage class to which you want the object to transition.\n          </span>\n        </ng-template>\n      </div>\n      <legend class=\"cds--label\">Choose a configuration scope</legend>\n      <div>\n        <cds-radio-group\n          formControlName=\"hasPrefix\"\n        >\n        <cds-radio [value]=\"false\"\n                   i18n>\n            {{ 'Apply to all objects in the bucket' }}\n          </cds-radio>\n          <cds-radio [value]=\"true\"\n                     i18n>\n            {{ 'Limit the scope of this rule to selected filter criteria' }}\n          </cds-radio>\n        </cds-radio-group>\n      </div>\n      <div class=\"form-item\"\n           *ngIf=\"tieringForm.controls.hasPrefix.value\">\n        <cds-text-label labelInputID=\"prefix\"\n                        [invalid]=\"!tieringForm.controls.prefix.valid && tieringForm.controls.prefix.dirty\"\n                        [invalidText]=\"prefixError\"\n                        [helperText]=\"prefixHelper\"\n                        i18n>Prefix\n          <input cdsText\n                 type=\"text\"\n                 id=\"prefix\"\n                 formControlName=\"prefix\"/>\n        </cds-text-label>\n        <ng-template #prefixHelper>\n          <span i18n>\n          Prefix identifying one or more objects to which the rule applies\n          </span>\n        </ng-template>\n        <ng-template #prefixError>\n          <span *ngIf=\"tieringForm.showError('prefix', formDir, 'required')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n>This field is required.</ng-container>\n          </span>\n        </ng-template>\n      </div>\n\n      <!-- tags -->\n      <div *ngIf=\"tieringForm.controls.hasPrefix.value\">\n        <div class=\"form-group-header\">Tags</div>\n        <div>All the tags must exist in the object's tag set for the rule to apply.</div>\n        <ng-container formArrayName=\"tags\"\n                      *ngFor=\"let tags of tags.controls; index as i\">\n          <ng-container [formGroupName]=\"i\">\n            <div cdsRow\n                 class=\"form-item form-item-append\">\n              <div cdsCol>\n                <cds-text-label labelInputID=\"Key\"\n                                [invalid]=\"!tieringForm.controls['tags'].controls[i].controls['Key'].valid && tieringForm.controls['tags'].controls[i].controls['Key'].dirty\"\n                                [invalidText]=\"tagKeyError\"\n                                i18n>Name of the object key\n                  <input cdsText\n                         type=\"text\"\n                         placeholder=\"Enter name of the object key\"\n                         formControlName=\"Key\"\n                         i18n-placeholder\n                         [invalid]=\"tieringForm.controls['tags'].controls[i].controls['Key'].invalid && tieringForm.controls['tags'].controls[i].controls['Key'].dirty\"/>\n                </cds-text-label>\n                <ng-template #tagKeyError>\n                  <ng-container i18n>This field is required.</ng-container>\n                </ng-template>\n              </div>\n              <div cdsCol>\n                <cds-text-label labelInputID=\"Value\"\n                                [invalid]=\"!tieringForm.controls['tags'].controls[i].controls['Value'].valid && tieringForm.controls['tags'].controls[i].controls['Value'].dirty\"\n                                [invalidText]=\"tagValueError\"\n                                i18n>Value of the tag\n                  <input cdsText\n                         type=\"text\"\n                         placeholder=\"Enter value of the tag\"\n                         formControlName=\"Value\"\n                         i18n-placeholder\n                         [invalid]=\"tieringForm.controls['tags'].controls[i].controls['Value'].invalid && tieringForm.controls['tags'].controls[i].controls['Value'].dirty\"/>\n                </cds-text-label>\n                <ng-template #tagValueError>\n                  <ng-container i18n>This field is required.</ng-container>\n                </ng-template>\n              </div>\n              <div cdsCol\n                   [columnNumbers]=\"{ lg: 2, md: 2 }\"\n                   class=\"item-action-btn\">\n                <cds-icon-button kind=\"tertiary\"\n                                 size=\"sm\"\n                                 (click)=\"removeTags(i)\">\n                  <svg cdsIcon=\"trash-can\"\n                       size=\"32\"\n                       class=\"cds--btn__icon\"></svg>\n                </cds-icon-button>\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n        <div class=\"form-item\">\n          <button cdsButton=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"addTags()\"\n                  i18n>Add tags\n            <svg cdsIcon=\"add\"\n                 size=\"32\"\n                 class=\"cds--btn__icon\"\n                 icon></svg>\n          </button>\n        </div>\n      </div>\n\n      <legend class=\"cds--label\">Status</legend>\n      <div>\n        <cds-radio-group\n          formControlName=\"status\">\n        <cds-radio [value]=\"'Enabled'\"\n                   i18n>Enabled </cds-radio>\n          <cds-radio [value]=\"'Disabled'\"\n                     i18n>Disabled </cds-radio>\n        </cds-radio-group>\n      </div>\n      <div class=\"form-item\">\n        <cds-number formControlName=\"days\"\n                    label=\"Number of days\"\n                    [min]=\"1\"\n                    [invalid]=\"!tieringForm.controls.days.valid && tieringForm.controls.days.dirty\"\n                    [invalidText]=\"daysError\"\n                    [helperText]=\"daysHelper\"></cds-number>\n        <ng-template #daysHelper>\n          <span i18n>Select the number of days to transition the objects to the specified storage class. The value must be a positive integer.\n          </span>\n        </ng-template>\n        <ng-template #daysError>\n          <span *ngIf=\"tieringForm.showError('days', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span *ngIf=\"tieringForm.showError('days', formDir, 'pattern')\"\n                i18n>Enter a valid positive number</span>\n        </ng-template>\n      </div>\n    </form>\n  </section>\n</ng-container>\n  <cd-form-button-panel\n    (submitActionEvent)=\"submitTieringConfig()\"\n    [form]=\"tieringForm\"\n    [submitText]=\"editing ? actionLabels.EDIT : actionLabels.CREATE\"\n    [modalForm]=\"true\"\n    [disabled]=\"storageClassList?.length === 0 && isStorageClassFetched\"\n  ></cd-form-button-panel>\n</cds-modal>\n","import { ChangeDetectorRef, Component, Inject, OnInit, Optional } from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  Validators\n} from '@angular/forms';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { Bucket } from '../models/rgw-bucket';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { BucketTieringUtils } from '../utils/rgw-bucket-tiering';\nimport { StorageClass, ZoneGroupDetails } from '../models/rgw-storage-class.model';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { Router } from '@angular/router';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Lifecycle, Rule, Tag } from '../models/rgw-bucket-lifecycle';\n\nexport interface Tags {\n  tagKey: number;\n  tagValue: string;\n}\n\n@Component({\n  selector: 'cd-rgw-bucket-tiering',\n  templateUrl: './rgw-bucket-tiering-form.component.html',\n  styleUrls: ['./rgw-bucket-tiering-form.component.scss']\n})\nexport class RgwBucketTieringFormComponent extends CdForm implements OnInit {\n  tieringForm: CdFormGroup;\n  tagsToRemove: Tags[] = [];\n  storageClassList: StorageClass[] = null;\n  configuredLifecycle: Lifecycle;\n  isStorageClassFetched = false;\n\n  constructor(\n    @Inject('bucket') public bucket: Bucket,\n    @Optional() @Inject('selectedLifecycle') public selectedLifecycle: Rule,\n    @Optional() @Inject('editing') public editing = false,\n    public actionLabels: ActionLabelsI18n,\n    private rgwBucketService: RgwBucketService,\n    private fb: CdFormBuilder,\n    private cd: ChangeDetectorRef,\n    private rgwZonegroupService: RgwZonegroupService,\n    private notificationService: NotificationService,\n    private router: Router\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.rgwBucketService\n      .getLifecycle(this.bucket.bucket, this.bucket.owner, this.bucket.tenant)\n      .subscribe((lifecycle: Lifecycle) => {\n        if (lifecycle === null) {\n          lifecycle = { LifecycleConfiguration: { Rule: [] } };\n        }\n        lifecycle.LifecycleConfiguration.Rule = lifecycle.LifecycleConfiguration.Rule.map(\n          (rule: Rule) => {\n            if (rule?.['Filter']?.['Tag'] && !Array.isArray(rule?.['Filter']?.['Tag'])) {\n              rule['Filter']['Tag'] = [rule['Filter']['Tag']];\n            }\n            if (\n              rule?.['Filter']?.['And']?.['Tag'] &&\n              !Array.isArray(rule?.['Filter']?.['And']?.['Tag'])\n            ) {\n              rule['Filter']['And']['Tag'] = [rule['Filter']['And']['Tag']];\n            }\n            return rule;\n          }\n        );\n        this.configuredLifecycle = lifecycle;\n        if (this.editing) {\n          const ruleToEdit = this.configuredLifecycle?.['LifecycleConfiguration']?.['Rule'].filter(\n            (rule: Rule) => rule?.['ID'] === this.selectedLifecycle?.['ID']\n          )[0];\n          this.tieringForm.patchValue({\n            name: ruleToEdit?.['ID'],\n            hasPrefix: this.checkIfRuleHasFilters(ruleToEdit),\n            prefix:\n              ruleToEdit?.['Prefix'] ||\n              ruleToEdit?.['Filter']?.['Prefix'] ||\n              ruleToEdit?.['Filter']?.['And']?.['Prefix'] ||\n              '',\n            status: ruleToEdit?.['Status'],\n            days: ruleToEdit?.['Transition']?.['Days']\n          });\n          this.setTags(ruleToEdit);\n          this.tieringForm.get('name').disable();\n        }\n      });\n    this.tieringForm = this.fb.group({\n      name: [null, [Validators.required, this.duplicateConfigName.bind(this)]],\n      storageClass: [null, Validators.required],\n      hasPrefix: [false, [Validators.required]],\n      prefix: [null, [CdValidators.composeIf({ hasPrefix: true }, [Validators.required])]],\n      tags: this.fb.array([]),\n      status: ['Enabled', [Validators.required]],\n      days: [60, [Validators.required, CdValidators.number(false)]]\n    });\n    this.loadStorageClass();\n  }\n\n  checkIfRuleHasFilters(rule: Rule) {\n    if (\n      this.isValidPrefix(rule?.['Prefix']) ||\n      this.isValidPrefix(rule?.['Filter']?.['Prefix']) ||\n      this.isValidArray(rule?.['Filter']?.['Tag']) ||\n      this.isValidPrefix(rule?.['Filter']?.['And']?.['Prefix']) ||\n      this.isValidArray(rule?.['Filter']?.['And']?.['Tag'])\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isValidPrefix(value: string) {\n    return !!value;\n  }\n\n  isValidArray(value: Tag | Tag[]) {\n    return Array.isArray(value) && value.length > 0;\n  }\n\n  setTags(rule: Rule) {\n    if (Array.isArray(rule?.Filter?.Tag) && rule?.Filter?.Tag?.length > 0) {\n      rule?.['Filter']?.['Tag']?.forEach((tag: { Key: string; Value: string }) =>\n        this.addTags(tag.Key, tag.Value)\n      );\n    }\n    if (Array.isArray(rule?.Filter?.And?.Tag) && rule?.Filter?.And?.Tag?.length > 0) {\n      rule?.['Filter']?.['And']?.['Tag']?.forEach((tag: { Key: string; Value: string }) =>\n        this.addTags(tag.Key, tag.Value)\n      );\n    }\n  }\n\n  get tags() {\n    return this.tieringForm.get('tags') as FormArray;\n  }\n\n  addTags(key?: string, value?: string) {\n    this.tags.push(\n      new FormGroup({\n        Key: new FormControl(key || '', Validators.required),\n        Value: new FormControl(value || '', Validators.required)\n      })\n    );\n    this.cd.detectChanges();\n  }\n\n  duplicateConfigName(control: AbstractControl): ValidationErrors | null {\n    if (this.configuredLifecycle?.LifecycleConfiguration?.Rule?.length > 0) {\n      const ruleIds = this.configuredLifecycle.LifecycleConfiguration.Rule.map(\n        (rule: Rule) => rule.ID\n      );\n      return ruleIds.includes(control.value) ? { duplicate: true } : null;\n    }\n    return null;\n  }\n\n  removeTags(idx: number) {\n    this.tags.removeAt(idx);\n    this.cd.detectChanges();\n  }\n\n  loadStorageClass(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.rgwZonegroupService.getAllZonegroupsInfo().subscribe(\n        (data: ZoneGroupDetails) => {\n          this.storageClassList = [];\n          const tierObj = BucketTieringUtils.filterAndMapTierTargets(data);\n          this.isStorageClassFetched = true;\n          this.storageClassList.push(...tierObj);\n          if (this.editing) {\n            this.tieringForm\n              .get('storageClass')\n              .setValue(this.selectedLifecycle?.['Transition']?.['StorageClass']);\n          }\n          this.loadingReady();\n          resolve();\n        },\n        (error) => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  submitTieringConfig() {\n    const formValue = this.tieringForm.value;\n    if (!this.tieringForm.valid) {\n      return;\n    }\n\n    let lifecycle: Rule = {\n      ID: this.tieringForm.getRawValue().name,\n      Status: formValue.status,\n      Transition: {\n        Days: formValue.days,\n        StorageClass: formValue.storageClass\n      }\n    };\n    if (formValue.hasPrefix) {\n      if (this.tags.length > 0) {\n        Object.assign(lifecycle, {\n          Filter: {\n            And: {\n              Prefix: formValue.prefix,\n              Tag: this.tags.value\n            }\n          }\n        });\n      } else {\n        Object.assign(lifecycle, {\n          Filter: {\n            Prefix: formValue.prefix\n          }\n        });\n      }\n    } else {\n      Object.assign(lifecycle, {\n        Prefix: ''\n      });\n    }\n    if (!this.editing) {\n      this.configuredLifecycle.LifecycleConfiguration.Rule.push(lifecycle);\n      this.rgwBucketService\n        .setLifecycle(\n          this.bucket.bucket,\n          JSON.stringify(this.configuredLifecycle.LifecycleConfiguration),\n          this.bucket.owner,\n          this.bucket.tenant\n        )\n        .subscribe({\n          next: () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Bucket lifecycle created succesfully`\n            );\n          },\n          error: (error: any) => {\n            this.notificationService.show(NotificationType.error, error);\n            this.tieringForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    } else {\n      const rules = this.configuredLifecycle.LifecycleConfiguration.Rule;\n      const index = rules.findIndex(\n        (rule: Rule) => rule?.['ID'] === this.selectedLifecycle?.['ID']\n      );\n      rules.splice(index, 1, lifecycle);\n      this.rgwBucketService\n        .setLifecycle(\n          this.bucket.bucket,\n          JSON.stringify(this.configuredLifecycle.LifecycleConfiguration),\n          this.bucket.owner,\n          this.bucket.tenant\n        )\n        .subscribe({\n          next: () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Bucket lifecycle modified succesfully`\n            );\n          },\n          error: (error: any) => {\n            this.notificationService.show(NotificationType.error, error);\n            this.tieringForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    }\n  }\n\n  goToCreateStorageClass() {\n    this.router.navigate(['rgw/tiering/create']);\n    this.closeModal();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Bucket } from '../models/rgw-bucket';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { RgwBucketTieringFormComponent } from '../rgw-bucket-tiering-form/rgw-bucket-tiering-form.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { Lifecycle, Rule } from '../models/rgw-bucket-lifecycle';\n\n@Component({\n  selector: 'cd-rgw-bucket-lifecycle-list',\n  templateUrl: './rgw-bucket-lifecycle-list.component.html',\n  styleUrls: ['./rgw-bucket-lifecycle-list.component.scss']\n})\nexport class RgwBucketLifecycleListComponent implements OnInit {\n  @Input() bucket: Bucket;\n  @Output() updateBucketDetails = new EventEmitter();\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n  filteredLifecycleRules$: Observable<any[]>;\n  lifecycleRuleList: any = [];\n  modalRef: any;\n\n  constructor(\n    private rgwBucketService: RgwBucketService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService\n  ) {}\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'ID',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Days`,\n        prop: 'Transition.Days',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Storage class`,\n        prop: 'Transition.StorageClass',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Status`,\n        prop: 'Status',\n        flexGrow: 1\n      }\n    ];\n    const createAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      click: () => this.openTieringModal(this.actionLabels.CREATE),\n      name: this.actionLabels.CREATE\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      disable: () => this.selection.hasMultiSelection,\n      click: () => this.openTieringModal(this.actionLabels.EDIT),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.DELETE,\n      canBePrimary: (selection: CdTableSelection) => selection.hasMultiSelection\n    };\n    this.tableActions = [createAction, editAction, deleteAction];\n  }\n\n  loadLifecyclePolicies(context: CdTableFetchDataContext) {\n    const allLifecycleRules$ = this.rgwBucketService\n      .getLifecycle(this.bucket.bucket, this.bucket.owner, this.bucket.tenant)\n      .pipe(\n        tap((lifecycle: Lifecycle) => {\n          this.lifecycleRuleList = lifecycle;\n        }),\n        catchError(() => {\n          context.error();\n          return of(null);\n        })\n      );\n\n    this.filteredLifecycleRules$ = allLifecycleRules$.pipe(\n      map(\n        (lifecycle: any) =>\n          lifecycle?.LifecycleConfiguration?.Rule?.filter((rule: Rule) =>\n            rule.hasOwnProperty('Transition')\n          ) || []\n      )\n    );\n  }\n\n  openTieringModal(type: string) {\n    const modalRef = this.modalService.show(RgwBucketTieringFormComponent, {\n      bucket: this.bucket,\n      selectedLifecycle: this.selection.first(),\n      editing: type === this.actionLabels.EDIT ? true : false\n    });\n    modalRef?.close?.subscribe(() => this.updateBucketDetails.emit());\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    const ruleNames = this.selection.selected.map((rule) => rule.ID);\n    const filteredRules = this.lifecycleRuleList.LifecycleConfiguration.Rule.filter(\n      (rule: Rule) => !ruleNames.includes(rule.ID)\n    );\n    const rules = filteredRules.length > 0 ? { Rule: filteredRules } : {};\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Rule`,\n      itemNames: ruleNames,\n      actionDescription: $localize`remove`,\n      submitAction: () => this.submitLifecycleConfig(rules)\n    });\n  }\n\n  submitLifecycleConfig(rules: any) {\n    this.rgwBucketService\n      .setLifecycle(\n        this.bucket.bucket,\n        JSON.stringify(rules),\n        this.bucket.owner,\n        this.bucket.tenant\n      )\n      .subscribe({\n        next: () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Lifecycle rule deleted successfully`\n          );\n          this.updateBucketDetails.emit();\n        },\n        error: () => {\n          this.modalRef.componentInstance.stopLoadingSpinner();\n        },\n        complete: () => {\n          this.modalService.dismissAll();\n        }\n      });\n  }\n}\n","<legend i18n>\n  Tiering Configuration\n  <cd-help-text>\n    Configure a bucket tiering rule to automatically transition objects between storage classes after a specified number of days. Define the scope of the rule by applying it globally or to objects with specific prefixes and tags.\n  </cd-help-text>\n</legend>\n<cd-table #table\n          [data]=\"filteredLifecycleRules$ | async\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          selectionType=\"multiClick\"\n          (updateSelection)=\"updateSelection($event)\"\n          identifier=\"ID\"\n          (fetchData)=\"loadLifecyclePolicies($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n","<legend i18n>{{this.type === 'user'? 'User Rate Limit': 'Bucket Rate Limit'}}</legend>\n<table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n  <tbody>\n    <tr>\n    <td i18n\n        class=\"bold w-25\">Enabled</td>\n    <td class=\"w-75\">{{ rateLimitConfig.enabled | booleanText }}</td>\n    </tr>\n    <tr>\n    <td i18n\n        class=\"bold\">Maximum Read Ops</td>\n    <td *ngIf=\"!rateLimitConfig.enabled\">-</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_read_ops <= 0\"\n        i18n>Unlimited</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_read_ops > 0\">\n        {{ rateLimitConfig.max_read_ops}}\n    </td>\n    </tr>\n    <tr>\n    <td i18n\n        class=\"bold\">Maximum Write Ops</td>\n    <td *ngIf=\"!rateLimitConfig.enabled\">-</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_write_ops <= 0\"\n        i18n>Unlimited</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_write_ops > 0\">\n        {{ rateLimitConfig.max_write_ops }}\n    </td>\n    </tr>\n    <tr>\n    <td i18n\n        class=\"bold\">Maximum Read Bytes</td>\n    <td *ngIf=\"!rateLimitConfig.enabled\">-</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_read_bytes <= 0\"\n        i18n>Unlimited</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_read_bytes > 0\">\n        {{ rateLimitConfig.max_read_bytes | dimlessBinaryPerMinute}}\n    </td>\n    </tr>\n    <tr>\n    <td i18n\n        class=\"bold\">Maximum Write Bytes</td>\n    <td *ngIf=\"!rateLimitConfig.enabled\">-</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_write_bytes <= 0\"\n        i18n>Unlimited</td>\n    <td *ngIf=\"rateLimitConfig.enabled && rateLimitConfig.max_write_bytes > 0\">\n        {{ rateLimitConfig.max_write_bytes | dimlessBinaryPerMinute}}\n    </td>\n    </tr>\n  </tbody>\n</table>\n\n","import { Component, Input } from '@angular/core';\nimport { RgwRateLimitConfig } from '../models/rgw-rate-limit';\n\n@Component({\n  selector: 'cd-rgw-rate-limit-details',\n  templateUrl: './rgw-rate-limit-details.component.html',\n  styleUrls: ['./rgw-rate-limit-details.component.scss']\n})\nexport class RgwRateLimitDetailsComponent {\n  @Input() rateLimitConfig: RgwRateLimitConfig;\n  @Input() type: string;\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport _ from 'lodash';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ApiClient } from './api-client';\nimport { Topic, TopicRequest } from '~/app/shared/models/topic.model';\nimport { catchError, mapTo } from 'rxjs/operators';\nimport { RgwDaemonService } from './rgw-daemon.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwTopicService extends ApiClient {\n  baseURL = 'api/rgw/topic';\n\n  constructor(private http: HttpClient, private rgwDaemonService: RgwDaemonService) {\n    super();\n  }\n\n  listTopic(): Observable<Topic[]> {\n    return this.http.get<Topic[]>(this.baseURL);\n  }\n\n  getTopic(key: string) {\n    return this.http.get<Topic>(`${this.baseURL}/${encodeURIComponent(key)}`);\n  }\n\n  create(createParam: TopicRequest) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.post(`${this.baseURL}`, createParam, { params: params });\n    });\n  }\n\n  delete(key: string) {\n    return this.http.delete(`${this.baseURL}/${key}`, {\n      observe: 'response'\n    });\n  }\n\n  exists(key: string): Observable<boolean> {\n    const encodedKey = encodeURIComponent(`:${key}`);\n    return this.getTopic(encodedKey).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return observableOf(false);\n      })\n    );\n  }\n}\n","import { ComboBoxItem } from './combo-box.model';\n\nexport interface NotificationConfig {\n  NotificationConfiguration: NotificationConfiguration;\n}\n\nexport interface NotificationConfiguration {\n  TopicConfiguration: TopicConfiguration[];\n}\n\nexport interface TopicConfiguration {\n  Id: string;\n  Topic: string;\n  Event: string[];\n  Filter?: Filter;\n}\n\nexport interface Filter {\n  S3Key: Key;\n  S3Metadata: Metadata;\n  S3Tags: Tags;\n}\n\nexport interface Key {\n  FilterRules: FilterRules[];\n}\nexport interface Metadata {\n  FilterRules: FilterRules[];\n}\nexport interface Tags {\n  FilterRules: FilterRules[];\n}\nexport interface FilterRules {\n  Name: string;\n  Value: string;\n}\n\nexport const events: ComboBoxItem[] = [\n  { content: 's3:ObjectCreated:*', name: 's3:ObjectCreated:*' },\n  { content: 's3:ObjectCreated:Put', name: 's3:ObjectCreated:Put' },\n  { content: 's3:ObjectCreated:Copy', name: 's3:ObjectCreated:Copy' },\n  {\n    content: 's3:ObjectCreated:CompleteMultipartUpload',\n    name: 's3:ObjectCreated:CompleteMultipartUpload'\n  },\n  { content: 's3:ObjectRemoved:*', name: 's3:ObjectRemoved:*' },\n  { content: 's3:ObjectRemoved:Delete', name: 's3:ObjectRemoved:Delete' },\n  { content: 's3:ObjectRemoved:DeleteMarkerCreated', name: 's3:ObjectRemoved:DeleteMarkerCreated' }\n];\n\nexport enum s3KeyFilter {\n  SELECT = '-- Select key filter type --',\n  PREFIX = 'prefix',\n  SUFFIX = 'suffix',\n  REGEX = 'regex'\n}\n\nexport const s3KeyFilterTexts = {\n  namePlaceholder: $localize`e.g. images/`,\n  valuePlaceholder: $localize`e.g. .jpg`,\n  nameHelper: $localize`Choose a filter type (prefix or suffix) to specify which object keys trigger the notification`,\n  valueHelper: $localize`Enter the prefix (e.g. images/) or suffix (e.g. .jpg) value for the S3 key filter`\n};\n\nexport const s3MetadataFilterTexts = {\n  namePlaceholder: $localize`x-amz-meta-xxx...`,\n  valuePlaceholder: $localize`e.g. my-custom-value`,\n  nameHelper: $localize`Enter a metadata key name to identify the custom information`,\n  valueHelper: $localize`Enter the metadata value that corresponds to the key`\n};\n\nexport const s3TagsFilterTexts = {\n  namePlaceholder: $localize`e.g. backup-status`,\n  valuePlaceholder: $localize`e.g. completed`,\n  nameHelper: $localize`Enter a tag key to categorize the S3 objects`,\n  valueHelper: $localize`Enter the tag value that corresponds to the key`\n};\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\"\n                    i18n>\n    {{ editing ? 'Edit' : 'Create' }} Notification configuration\n    <cd-help-text [formAllFieldsRequired]=\"false\">All fields are optional, except where marked required.</cd-help-text>\n  </cds-modal-header>\n\n  <ng-container>\n    <section cdsModalContent>\n      <form name=\"notificationForm\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"notificationForm\"\n            novalidate>\n        <!-- Id-->\n        <div cdsRow\n             class=\"form-item form-item-append\">\n          <div cdsCol>\n            <cds-text-label labelInputID=\"name\"\n                            i18n\n                            i18n-helperText\n                            cdRequiredField=\"Name\"\n                            [invalid]=\"notificationForm.controls.id.invalid && notificationForm.controls.id.dirty\"\n                            [invalidText]=\"nameError\"\n                            [helperText]=\"helpertext\">Topic Name\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Name...\"\n                   i18n-placeholder\n                   id=\"name\"\n                   autoFocus\n                   formControlName=\"id\"\n                   [invalid]=\"notificationForm.controls.id.invalid && notificationForm.controls.id.dirty\"/>\n            </cds-text-label>\n            <ng-template #helpertext>\n              <span i18n>Enter a unique notification name</span>\n            </ng-template>\n            <ng-template #nameError>\n              <span *ngIf=\"notificationForm.showError('id', formDir, 'required')\"\n                    class=\"invalid-feedback\">\n                <ng-container i18n>This field is required.</ng-container>\n              </span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"notificationForm.showError('id', formDir, 'duplicate')\"\n                    i18n>The name is already in use. Please choose a different one</span>\n            </ng-template>\n          </div>\n          <!-- Topic -->\n          <div cdsCol>\n            <cds-select id=\"topic\"\n                        formControlName=\"topic\"\n                        cdRequiredField=\"Topic\"\n                        label=\"Topic\"\n                        i18n-label\n                        placeholder=\"Select a topic...\"\n                        i18n-placeholder\n                        [invalid]=\"notificationForm.controls.topic.invalid && notificationForm.controls.topic.dirty\"\n                        [invalidText]=\"topicError\"\n                        helperText=\"This topic will define and control the notification settings\"\n                        i18n-helperText>\n            <option *ngIf=\"topicArn === null\"\n                    value=\"\">Loading...\n            </option>\n            <option [ngValue]=\"null\"\n                    i18n>\n              -- Select a topic --\n            </option>\n            <option *ngFor=\"let data of topicArn\"\n                    i18n\n                    [ngValue]=\"data\">\n              {{ data }}\n            </option>\n          </cds-select>\n            <ng-template #topicError>\n              <span *ngIf=\"notificationForm.showError('topic', formDir, 'required')\"\n                    class=\"invalid-feedback\">\n                <ng-container i18n>This field is required.</ng-container>\n              </span>\n            </ng-template>\n          </div>\n        </div>\n\n        <!-- Events -->\n        <div cdsRow\n             class=\"form-item form-item-append\">\n\n          <div cdsCol>\n            <cds-combo-box label=\"Event\"\n                           type=\"multi\"\n                           formControlName=\"event\"\n                           placeholder=\"Select event...\"\n                           [items]=\"eventOption\"\n                           itemValueKey=\"content\"\n                           id=\"event\"\n                           cdDynamicInputCombobox\n                           (updatedItems)=\"eventOption = $event\"\n                           i18n-placeholder\n                           helperText=\"Choose the S3 event type that will trigger the notification, such as object creation or deletion\"\n                           i18n-helperText>\n              <cds-dropdown-list></cds-dropdown-list>\n            </cds-combo-box>\n          </div>\n        </div>\n        <cd-form-advanced-fieldset class=\"cd-header\">\n        <ng-container *ngFor=\"let key of filterTypes\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              filterTemplate;\n              context: {\n                type: key,\n                controls: filterControls[key],\n                options: filterSettings[key].options,\n                isDropdown: filterSettings[key].isDropdown,\n                namePlaceholder: filterSettings[key].namePlaceholder,\n                valuePlaceholder: filterSettings[key].valuePlaceholder,\n                nameHelper: filterSettings[key].nameHelper,\n                valueHelper: filterSettings[key].valueHelper\n              }\n            \">\n          </ng-container>\n        </ng-container>\n      </cd-form-advanced-fieldset>\n      </form>\n    </section>\n  </ng-container>\n\n  <!-- Submit Button -->\n  <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                        [form]=\"notificationForm\"\n                        [submitText]=\"editing ? actionLabels.EDIT : actionLabels.CREATE\"\n                        [modalForm]=\"true\"> </cd-form-button-panel>\n  </cds-modal>\n\n\n  <ng-template #filterTemplate\n               let-type=\"type\"\n               let-controls=\"controls\"\n               let-options=\"options\"\n               let-isDropdown=\"isDropdown\"\n               let-namePlaceholder=\"namePlaceholder\"\n               let-valuePlaceholder=\"valuePlaceholder\"\n               let-nameHelper=\"nameHelper\"\n               let-valueHelper=\"valueHelper\">\n\n  <h6 i18n>{{ typeLabels[type] }}</h6>\n\n  <div [formGroup]=\"notificationForm.get('filter')\">\n    <div [formArrayName]=\"type\">\n      <div *ngFor=\"let group of controls.controls; let i = index\"\n           [formGroupName]=\"i\">\n        <div cdsRow\n             class=\"form-item form-item-append\">\n          <div cdsCol>\n            <ng-container *ngIf=\"isDropdown; else textInputName\">\n              <cds-select [id]=\"type + '-name-' + i\"\n                          formControlName=\"Name\"\n                          label=\"Name\"\n                          i18n-label\n                          [helperText]=\"nameHelper\"\n                          i18n-helperText>\n                <option *ngFor=\"let filter of s3KeyFilterValue\"\n                        [value]=\"filter\">{{ filter }}</option>\n              </cds-select>\n            </ng-container>\n\n            <ng-template #textInputName>\n              <cds-text-label [labelInputID]=\"type + '-name-' + i\"\n                              i18n-label\n                              [helperText]=\"nameHelper\"\n                              i18n-helperText>\n                Name\n                <input cdsText\n                       type=\"text\"\n                       [placeholder]=\"namePlaceholder\"\n                       formControlName=\"Name\"\n                       i18n />\n              </cds-text-label>\n            </ng-template>\n          </div>\n\n          <div cdsCol>\n            <cds-text-label [labelInputID]=\"type + '-value-' + i\"\n                            i18n-label\n                            [helperText]=\"valueHelper\"\n                            i18n-helperText>\n              Value\n              <input cdsText\n                     type=\"text\"\n                     [placeholder]=\"valuePlaceholder\"\n                     formControlName=\"Value\"\n                     i18n />\n            </cds-text-label>\n          </div>\n          <div cdsCol\n               [columnNumbers]=\"{ lg: 1, md: 1 }\"\n               class=\"item-action-btn spacing\">\n            <cds-icon-button kind=\"primary\"\n                             size=\"sm\"\n                             (click)=\"addRow(type, i)\">\n              <svg cdsIcon=\"add\"\n                   size=\"32\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </div>\n\n          <div cdsCol\n               [columnNumbers]=\"{ lg: 1, md: 1 }\"\n               class=\"item-action-btn spacing\">\n            <cds-icon-button kind=\"danger\"\n                             size=\"sm\"\n                             (click)=\"removeRow(type, i)\">\n              <svg cdsIcon=\"trash-can\"\n                   size=\"32\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n","import { Component, Inject, OnInit, Optional, ChangeDetectorRef } from '@angular/core';\nimport {\n  FormArray,\n  Validators,\n  AbstractControl,\n  FormGroup,\n  ValidationErrors\n} from '@angular/forms';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { ComboBoxItem } from '~/app/shared/models/combo-box.model';\nimport { Topic } from '~/app/shared/models/topic.model';\nimport { Bucket } from '../models/rgw-bucket';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { Router } from '@angular/router';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { RgwTopicService } from '~/app/shared/api/rgw-topic.service';\nimport {\n  events,\n  FilterRules,\n  s3KeyFilter,\n  s3KeyFilterTexts,\n  s3MetadataFilterTexts,\n  s3TagsFilterTexts,\n  TopicConfiguration\n} from '~/app/shared/models/notification-configuration.model';\n\n@Component({\n  selector: 'cd-rgw-notification-form',\n  templateUrl: './rgw-notification-form.component.html',\n  styleUrls: ['./rgw-notification-form.component.scss']\n})\nexport class RgwNotificationFormComponent extends CdForm implements OnInit {\n  notificationForm: CdFormGroup;\n  eventOption: ComboBoxItem[] = events;\n  s3KeyFilterValue: string[] = [];\n  topics: Partial<Topic[]> = [];\n  topicArn: string[] = [];\n  notification_id: string;\n  notificationList: TopicConfiguration[] = [];\n  filterTypes: string[] = ['s3Key', 's3Metadata', 's3Tags'];\n  typeLabels: Record<string, string> = {\n    s3Key: 'S3 Key configuration',\n    s3Metadata: 'S3 Metadata configuration',\n    s3Tags: 'S3 Tags configuration'\n  };\n\n  filterSettings: Record<\n    string,\n    {\n      options: string[] | null;\n      isDropdown: boolean;\n      namePlaceholder: string;\n      valuePlaceholder: string;\n      nameHelper: string;\n      valueHelper: string;\n    }\n  > = {\n    s3Key: {\n      options: null,\n      isDropdown: true,\n      namePlaceholder: s3KeyFilterTexts.namePlaceholder,\n      valuePlaceholder: s3KeyFilterTexts.valuePlaceholder,\n      nameHelper: s3KeyFilterTexts.nameHelper,\n      valueHelper: s3KeyFilterTexts.valueHelper\n    },\n    s3Metadata: {\n      options: null,\n      isDropdown: false,\n      namePlaceholder: s3MetadataFilterTexts.namePlaceholder,\n      valuePlaceholder: s3MetadataFilterTexts.valuePlaceholder,\n      nameHelper: s3MetadataFilterTexts.nameHelper,\n      valueHelper: s3MetadataFilterTexts.valueHelper\n    },\n    s3Tags: {\n      options: null,\n      isDropdown: false,\n      namePlaceholder: s3TagsFilterTexts.namePlaceholder,\n      valuePlaceholder: s3TagsFilterTexts.valuePlaceholder,\n      nameHelper: s3TagsFilterTexts.nameHelper,\n      valueHelper: s3TagsFilterTexts.valueHelper\n    }\n  };\n\n  get filterControls(): Record<string, FormArray> {\n    const controls: Record<string, FormArray> = {};\n    this.filterTypes.forEach((type) => {\n      controls[type] = this.getFormArray(type);\n    });\n    return controls;\n  }\n\n  constructor(\n    @Inject('bucket') public bucket: Bucket,\n    @Optional() @Inject('selectedNotification') public selectedNotification: TopicConfiguration,\n    @Optional() @Inject('editing') public editing = false,\n    public actionLabels: ActionLabelsI18n,\n    private rgwBucketService: RgwBucketService,\n    private rgwTopicService: RgwTopicService,\n    private notificationService: NotificationService,\n    private fb: CdFormBuilder,\n    private router: Router,\n    private cdRef: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.editing = !!this.selectedNotification;\n    this.s3KeyFilterValue = Object.values(s3KeyFilter);\n    this.filterSettings.s3Key.options = this.s3KeyFilterValue;\n    this.createNotificationForm();\n    this.rgwBucketService.listNotification(this.bucket.bucket).subscribe({\n      next: (notificationList: TopicConfiguration[]) => {\n        this.notificationList = notificationList;\n\n        this.getTopicName().then(() => {\n          if (this.editing && this.selectedNotification) {\n            this.notification_id = this.selectedNotification.Id;\n            this.notificationForm.get('id').disable();\n            this.patchNotificationForm(this.selectedNotification);\n          }\n        });\n      }\n    });\n  }\n\n  getTopicName(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.rgwTopicService.listTopic().subscribe({\n        next: (topics: Topic[]) => {\n          this.topics = topics;\n          this.topicArn = topics.map((topic: Topic) => topic.arn);\n          resolve();\n        },\n        error: (err) => reject(err)\n      });\n    });\n  }\n\n  patchNotificationForm(config: any): void {\n    this.cdRef.detectChanges();\n    this.notificationForm.patchValue({\n      id: config.Id,\n      topic: typeof config.Topic === 'object' ? config.Topic.arn : config.Topic,\n      event: config.Event\n    });\n\n    this.setFilterRules('s3Key', config.Filter?.S3Key?.FilterRule);\n    this.setFilterRules('s3Metadata', config.Filter?.S3Metadata?.FilterRule);\n    this.setFilterRules('s3Tags', config.Filter?.S3Tags?.FilterRule);\n  }\n\n  setFilterRules(type: string, rules: FilterRules[] = []): void {\n    let formArray = this.getFormArray(type);\n    if (!formArray) {\n      const filterGroup = this.notificationForm.get('filter') as FormGroup;\n      filterGroup.setControl(type, this.fb.array([]));\n      formArray = this.getFormArray(type);\n    }\n\n    formArray.clear();\n\n    if (!rules || rules.length === 0) {\n      formArray.push(this.createNameValueGroup());\n      return;\n    }\n\n    rules.forEach((rule) => {\n      formArray.push(this.fb.group({ Name: [rule.Name], Value: [rule.Value] }));\n    });\n  }\n\n  createNotificationForm() {\n    this.notificationForm = this.fb.group({\n      id: [null, [Validators.required, this.duplicateNotificationId.bind(this)]],\n      topic: [null, [Validators.required]],\n      event: [[], []],\n      filter: this.fb.group({\n        s3Key: this.fb.array([this.createNameValueGroup()]),\n        s3Metadata: this.fb.array([this.createNameValueGroup()]),\n        s3Tags: this.fb.array([this.createNameValueGroup()])\n      })\n    });\n  }\n\n  duplicateNotificationId(control: AbstractControl): ValidationErrors | null {\n    const currentId = control.value?.trim();\n    if (!currentId) return null;\n    if (Array.isArray(this.notificationList)) {\n      const duplicateFound = this.notificationList.some(\n        (notification: TopicConfiguration) => notification.Id === currentId\n      );\n\n      return duplicateFound ? { duplicate: true } : null;\n    }\n\n    return null;\n  }\n\n  private createNameValueGroup(): CdFormGroup {\n    return this.fb.group({\n      Name: [null],\n      Value: [null]\n    });\n  }\n\n  getFormArray(arrayName: string): FormArray {\n    const filterGroup = this.notificationForm.get('filter') as FormGroup;\n    return filterGroup?.get(arrayName) as FormArray;\n  }\n\n  getFiltersControls(type: string): FormArray {\n    return this.getFormArray(type);\n  }\n\n  addRow(arrayName: string, index: number): void {\n    const array = this.getFormArray(arrayName);\n    array.insert(index + 1, this.createNameValueGroup());\n  }\n\n  removeRow(arrayName: string, index: number): void {\n    const formArray = this.getFormArray(arrayName);\n    if (formArray && formArray.length > 1 && index >= 0 && index < formArray.length) {\n      formArray.removeAt(index);\n    } else if (formArray.length === 1) {\n      const group = formArray.at(0) as FormGroup;\n      group.reset();\n    }\n\n    this.cdRef.detectChanges();\n  }\n\n  showInvalid(field: string): boolean {\n    const control: AbstractControl | null = this.notificationForm.get(field);\n    return control?.invalid && (control.dirty || control.touched);\n  }\n\n  onSubmit() {\n    if (!this.notificationForm.valid) {\n      this.notificationForm.markAllAsTouched();\n      this.notificationForm.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    const formValue = this.notificationForm.getRawValue();\n    const buildRules = (rules: FilterRules[]) => {\n      const seen = new Set<string>();\n      return (\n        rules\n          ?.filter((item) => item.Name && item.Value)\n          .filter((item) => {\n            if (seen.has(item.Name)) return false;\n            seen.add(item.Name);\n            return true;\n          }) || []\n      );\n    };\n\n    const successMessage = this.editing\n      ? $localize`Bucket notification updated successfully`\n      : $localize`Bucket notification created successfully`;\n\n    const notificationConfiguration = {\n      TopicConfiguration: {\n        Id: formValue.id,\n        Topic: formValue.topic,\n        Event: formValue.event,\n        Filter: {\n          S3Key: {\n            FilterRules: buildRules(formValue.filter?.s3Key)\n          },\n          S3Metadata: {\n            FilterRules: buildRules(formValue.filter?.s3Metadata)\n          },\n          S3Tags: {\n            FilterRules: buildRules(formValue.filter?.s3Tags)\n          }\n        }\n      }\n    };\n\n    this.rgwBucketService\n      .setNotification(\n        this.bucket.bucket,\n        JSON.stringify(notificationConfiguration),\n        this.bucket.owner\n      )\n      .subscribe({\n        next: () => {\n          this.notificationService.show(NotificationType.success, successMessage);\n        },\n        error: (error: any) => {\n          this.notificationService.show(NotificationType.error, error.message);\n          this.notificationForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.closeModal();\n        }\n      });\n  }\n\n  goToCreateNotification() {\n    this.router.navigate(['rgw/notification/create']);\n    this.closeModal();\n  }\n}\n","  <fieldset>\n    <legend i18n\n            class=\"cd-header\">\n    Notification Configuration\n    <cd-help-text>\n       Configure bucket notification to trigger alerts for specific events, such as object creation or transitions, based on prefixes or tags.\n    </cd-help-text>\n  </legend>\n  </fieldset>\n  <ng-container *ngIf=\"notification$ | async as notification\">\n  <cd-table #table\n            [data]=\"notification\"\n            [columns]=\"columns\"\n            columnMode=\"flex\"\n            selectionType=\"single\"\n            identifier=\"Id\"\n            (updateSelection)=\"updateSelection($event)\"\n            (fetchData)=\"fetchData()\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  </cd-table>\n  </ng-container>\n  <ng-template #filterTpl\n               let-config=\"data.value\">\n    <ng-container *ngIf=\"config\">\n      <ng-container *ngFor=\"let item of config | keyvalue\">\n        <ng-container *ngIf=\"item.value?.FilterRule?.length\">\n          <div class=\"cds--label\">\n            {{ item.key }}:\n          </div>\n          <div [cdsStack]=\"'horizontal'\"\n               *ngFor=\"let rule of item.value.FilterRule\">\n            <cds-tag size=\"sm\"\n                     class=\"badge-background-gray\">{{ rule.Name }}: {{ rule.Value }}</cds-tag>\n          </div>\n          <br>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-template>\n  <ng-template #eventTpl\n               let-events=\"data.value\">\n  <ng-container *ngIf=\"events && events.length\">\n    <cds-tag *ngFor=\"let event of events\"\n             size=\"sm\"\n             class=\"badge-background-primary\">\n      {{ event }}\n    </cds-tag>\n  </ng-container>\n</ng-template>\n\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Bucket } from '../models/rgw-bucket';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { TopicConfiguration } from '~/app/shared/models/notification-configuration.model';\nimport { RgwNotificationFormComponent } from '../rgw-notification-form/rgw-notification-form.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\nconst BASE_URL = 'rgw/bucket';\n@Component({\n  selector: 'cd-rgw-bucket-notification-list',\n  templateUrl: './rgw-bucket-notification-list.component.html',\n  styleUrl: './rgw-bucket-notification-list.component.scss',\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwBucketNotificationListComponent extends ListWithDetails implements OnInit {\n  @Input() bucket: Bucket;\n  @Output() updateBucketDetails = new EventEmitter();\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n  notification$: Observable<TopicConfiguration[]>;\n  subject = new BehaviorSubject<TopicConfiguration[]>([]);\n  context: CdTableFetchDataContext;\n  @ViewChild('filterTpl', { static: true })\n  filterTpl: TemplateRef<any>;\n  @ViewChild('eventTpl', { static: true })\n  eventTpl: TemplateRef<any>;\n  modalRef: any;\n  constructor(\n    private rgwBucketService: RgwBucketService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'Id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Topic`,\n        prop: 'Topic',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.copy\n      },\n      {\n        name: $localize`Event`,\n        prop: 'Event',\n        flexGrow: 1,\n        cellTemplate: this.eventTpl\n      },\n      {\n        name: $localize`Filter`,\n        prop: 'Filter',\n        flexGrow: 1,\n        cellTemplate: this.filterTpl\n      }\n    ];\n\n    const createAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      click: () => this.openNotificationModal(this.actionLabels.CREATE),\n      name: this.actionLabels.CREATE\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      disable: () => this.selection.hasMultiSelection,\n      click: () => this.openNotificationModal(this.actionLabels.EDIT),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.DELETE,\n      canBePrimary: (selection: CdTableSelection) => selection.hasMultiSelection\n    };\n    this.tableActions = [createAction, editAction, deleteAction];\n    this.notification$ = this.subject.pipe(\n      switchMap(() =>\n        this.rgwBucketService.listNotification(this.bucket.bucket).pipe(\n          catchError((error) => {\n            this.context.error(error);\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n\n  fetchData() {\n    this.subject.next([]);\n  }\n\n  openNotificationModal(type: string) {\n    const modalRef = this.modalService.show(RgwNotificationFormComponent, {\n      bucket: this.bucket,\n      selectedNotification: this.selection.first(),\n      editing: type === this.actionLabels.EDIT ? true : false\n    });\n    modalRef?.close?.subscribe(() => this.updateBucketDetails.emit());\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    const selectedNotificationId = this.selection.selected.map((notification) => notification.Id);\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Notification`,\n      itemNames: selectedNotificationId,\n      actionDescription: $localize`delete`,\n      submitAction: () => this.submitDeleteNotifications(selectedNotificationId)\n    });\n  }\n\n  submitDeleteNotifications(notificationId: string[]) {\n    this.rgwBucketService\n      .deleteNotification(this.bucket.bucket, notificationId.join(','))\n      .subscribe({\n        next: () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Notifications deleted successfully.`\n          );\n          this.modalService.dismissAll();\n        },\n        error: () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Failed to delete notifications. Please try again.`\n          );\n        }\n      });\n    this.modalRef?.close?.subscribe(() => this.updateBucketDetails.emit());\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonToXmlService {\n  constructor() {}\n\n  format(\n    json: any,\n    replaceKey: Record<string, string> = null,\n    indentSize: number = 2,\n    currentIndent: number = 0\n  ): string {\n    if (!json) return null;\n    let xml = '';\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    for (let key in json) {\n      if (json.hasOwnProperty(key)) {\n        const value = json[key];\n        const indentation = ' '.repeat(currentIndent);\n        if (replaceKey) {\n          const [oldKey, newKey] = Object.entries(replaceKey)[0];\n          if (key === oldKey) {\n            key = newKey;\n          }\n        }\n        if (Array.isArray(value)) {\n          value.forEach((item) => {\n            xml +=\n              `${indentation}<${key}>\\n` +\n              this.format(item, replaceKey, indentSize, currentIndent + indentSize) +\n              `${indentation}</${key}>\\n`;\n          });\n        } else if (typeof value === 'object') {\n          xml +=\n            `${indentation}<${key}>\\n` +\n            this.format(value, replaceKey, indentSize, currentIndent + indentSize) +\n            `${indentation}</${key}>\\n`;\n        } else {\n          xml += `${indentation}<${key}>${value}</${key}>\\n`;\n        }\n      }\n    }\n    return xml;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { JsonToXmlService } from '../services/json-to-xml.service';\n\n@Pipe({\n  name: 'xml'\n})\nexport class XmlPipe implements PipeTransform {\n  constructor(private jsonToXmlService: JsonToXmlService) {}\n\n  transform(\n    value: string,\n    replaceKey: Record<string, string> = {},\n    valueFormat: string = 'json'\n  ): string {\n    if (valueFormat === 'json') {\n      value = this.jsonToXmlService.format(value, replaceKey);\n    }\n    return value;\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"rgw-bucket-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n\n        <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n               data-testid=\"rgw-bucket-details\">\n          <tbody>\n            <tr>\n              <td i18n\n                  class=\"bold w-25\">Versioning</td>\n              <td class=\"w-75\">{{ selection.versioning }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">Encryption</td>\n              <td>{{ selection.encryption }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">Replication</td>\n              <td>{{ replicationStatus }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">MFA Delete</td>\n              <td>{{ selection.mfa_delete }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">Index type</td>\n              <td>{{ selection.index_type }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">Placement rule</td>\n              <td>{{ selection.placement_rule }}</td>\n            </tr>\n            <tr>\n              <td i18n\n                  class=\"bold\">Last modification time</td>\n              <td>{{ selection.mtime | cdDate }}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <!-- Bucket quota -->\n        <div>\n          <legend i18n>Bucket quota</legend>\n          <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n                 data-testid=\"rgw-bucket-quota-details\">\n            <tbody>\n              <tr>\n                <td i18n\n                    class=\"bold w-25\">Enabled</td>\n                <td class=\"w-75\">{{ selection.bucket_quota.enabled | booleanText }}</td>\n              </tr>\n              <ng-container *ngIf=\"selection.bucket_quota.enabled\">\n                <tr>\n                  <td i18n\n                      class=\"bold\">Maximum size</td>\n                  <td *ngIf=\"selection.bucket_quota.max_size <= -1\"\n                      i18n>Unlimited</td>\n                  <td *ngIf=\"selection.bucket_quota.max_size > -1\">\n                    {{ selection.bucket_quota.max_size | dimless }}\n                  </td>\n                </tr>\n                <tr>\n                  <td i18n\n                      class=\"bold\">Maximum objects</td>\n                  <td *ngIf=\"selection.bucket_quota.max_objects <= -1\"\n                      i18n>Unlimited</td>\n                  <td *ngIf=\"selection.bucket_quota.max_objects > -1\">\n                    {{ selection.bucket_quota.max_objects }}\n                  </td>\n                </tr>\n              </ng-container>\n            </tbody>\n          </table>\n        </div>\n\n        <!-- Locking -->\n        <legend i18n>Locking</legend>\n        <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n               data-testid=\"rgw-bucket-locking-details\">\n          <tbody>\n            <tr>\n              <td i18n\n                  class=\"bold w-25\">Enabled</td>\n              <td class=\"w-75\">{{ selection.lock_enabled | booleanText }}</td>\n            </tr>\n            <ng-container *ngIf=\"selection.lock_enabled\">\n              <tr>\n                <td i18n\n                    class=\"bold\">Mode</td>\n                <td>{{ selection.lock_mode }}</td>\n              </tr>\n              <tr>\n                <td i18n\n                    class=\"bold\">Days</td>\n                <td>{{ selection.lock_retention_period_days }}</td>\n              </tr>\n            </ng-container>\n          </tbody>\n        </table>\n\n        <!-- Tags -->\n        <ng-container *ngIf=\"(selection.tagset | keyvalue)?.length\">\n          <legend i18n>Tags</legend>\n          <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n            <tbody>\n              <tr *ngFor=\"let tag of selection.tagset | keyvalue\">\n                <td i18n\n                    class=\"bold w-25\">{{tag.key}}</td>\n                <td class=\"w-75\">{{ tag.value }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </ng-container>\n\n\n        <!-- Bucket Rate Limit -->\n        <ng-container *ngIf=\"!!bucketRateLimit\">\n          <cd-rgw-rate-limit-details [rateLimitConfig]=\"bucketRateLimit\"\n                                     [type]=\"'bucket'\"></cd-rgw-rate-limit-details>\n        </ng-container>\n      </ng-template>\n    </ng-container>\n\n    <ng-container ngbNavItem=\"permissions\">\n      <a ngbNavLink\n         i18n>Policies</a>\n      <ng-template ngbNavContent>\n        <div class=\"table-scroller\">\n          <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n            <tbody>\n              <tr>\n                <td i18n\n                    class=\"bold w-25\">Bucket policy</td>\n                <td><pre>{{ selection.bucket_policy | json}}</pre></td>\n              </tr>\n              <tr>\n                <td i18n\n                    class=\"bold w-25\">Lifecycle\n                  <div *ngIf=\"(selection.lifecycle | json) !== '{}'\"\n                       class=\"input-group\">\n                    <button type=\"button\"\n                            class=\"btn btn-light\"\n                            [ngClass]=\"{'active': lifecycleFormat === 'json'}\"\n                            (click)=\"updateLifecycleFormatTo('json')\">\n                          JSON\n                    </button>\n                    <button type=\"button\"\n                            class=\"btn btn-light\"\n                            [ngClass]=\"{'active': lifecycleFormat === 'xml'}\"\n                            (click)=\"updateLifecycleFormatTo('xml')\">\n                          XML\n                    </button>\n                  </div>\n                </td>\n                <td>\n                  <cds-code-snippet display=\"multi\"\n                                    *ngIf=\"lifecycleFormat === 'json'\">\n                    {{selection.lifecycle | json}}\n                  </cds-code-snippet>\n                  <cds-code-snippet display=\"multi\"\n                                    *ngIf=\"lifecycleFormat === 'xml'\">\n                    {{ (selection.lifecycle | xml:{'Rules':'Rule'}) || '-'}}\n                  </cds-code-snippet>\n                </td>\n              </tr>\n              <tr *ngIf=\"selection.lifecycle_progress?.length > 0\">\n                <td i18n\n                    class=\"bold w-25\">\n                  Lifecycle progress\n                </td>\n                <td>\n                  <cds-tooltip [description]=\"lifecycleProgressMap.get(lifecycleProgress.status)?.description\"\n                               [align]=\"'top'\">\n                    <cds-tag size=\"md\"\n                             [type]=\"lifecycleProgressMap.get(lifecycleProgress.status)?.color\">\n                      {{ lifecycleProgress.status }}\n                    </cds-tag>\n                  </cds-tooltip>\n                  <div *ngIf=\"lifecycleProgress?.status !== 'UNINITIAL'\"\n                       class=\"spacing-left\">{{lifecycleProgress?.started}}</div>\n                </td>\n              </tr>\n              <tr>\n                <td i18n\n                    class=\"bold w-25\">Replication policy</td>\n                <td><pre>{{ selection.replication | json}}</pre></td>\n              </tr>\n              <tr>\n                <td i18n\n                    class=\"bold w-25\">ACL</td>\n                <td>\n                  <table class=\"table\">\n                    <thead>\n                      <tr i18n>\n                        <th>Grantee</th>\n                        <th>Permissions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr i18n>\n                        <td>Bucket Owner</td>\n                        <td>{{ aclPermissions.Owner || '-'}}</td>\n                      </tr>\n                      <tr i18n>\n                        <td>Everyone</td>\n                        <td>{{ aclPermissions.AllUsers || '-'}}</td>\n                      </tr>\n                      <tr i18n>\n                        <td>Authenticated users group</td>\n                        <td>{{ aclPermissions.AuthenticatedUsers || '-'}}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </ng-template>\n    </ng-container>\n\n    <ng-container ngbNavItem=\"tiering\">\n      <a ngbNavLink\n         i18n>Tiering</a>\n      <ng-template ngbNavContent>\n        <cd-rgw-bucket-lifecycle-list [bucket]=\"selection\"\n                                      (updateBucketDetails)=\"updateBucketDetails(extractLifecycleDetails.bind(this))\"></cd-rgw-bucket-lifecycle-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"notification\">\n      <a ngbNavLink\n         i18n>Notification</a>\n      <ng-template ngbNavContent>\n        <cd-rgw-bucket-notification-list [bucket]=\"selection\"></cd-rgw-bucket-notification-list>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { ChangeDetectorRef, Component, Input, OnChanges } from '@angular/core';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\n\nimport * as xml2js from 'xml2js';\nimport { RgwRateLimitConfig } from '../models/rgw-rate-limit';\n\n@Component({\n  selector: 'cd-rgw-bucket-details',\n  templateUrl: './rgw-bucket-details.component.html',\n  styleUrls: ['./rgw-bucket-details.component.scss']\n})\nexport class RgwBucketDetailsComponent implements OnChanges {\n  @Input()\n  selection: any;\n  lifecycleProgress: { bucket: string; status: string; started: string };\n  lifecycleProgressMap = new Map<string, { description: string; color: string }>([\n    ['UNINITIAL', { description: $localize`The process has not run yet`, color: 'cool-gray' }],\n    ['PROCESSING', { description: $localize`The process is currently running`, color: 'cyan' }],\n    ['COMPLETE', { description: $localize`The process has completed`, color: 'green' }]\n  ]);\n  lifecycleFormat: 'json' | 'xml' = 'json';\n  aclPermissions: Record<string, string[]> = {};\n  replicationStatus = $localize`Disabled`;\n  bucketRateLimit: RgwRateLimitConfig;\n\n  constructor(private rgwBucketService: RgwBucketService, private cd: ChangeDetectorRef) {}\n\n  ngOnChanges() {\n    this.updateBucketDetails(this.extraxtDetailsfromResponse.bind(this));\n  }\n\n  parseXmlAcl(xml: any, bucketOwner: string): Record<string, string[]> {\n    const parser = new xml2js.Parser({ explicitArray: false, trim: true });\n    let data: Record<string, string[]> = {\n      Owner: ['-'],\n      AllUsers: ['-'],\n      AuthenticatedUsers: ['-']\n    };\n    parser.parseString(xml, (err, result) => {\n      if (err) return null;\n\n      const xmlGrantees: any = result['AccessControlPolicy']['AccessControlList']['Grant'];\n      if (Array.isArray(xmlGrantees)) {\n        for (let i = 0; i < xmlGrantees.length; i++) {\n          const grantee = xmlGrantees[i];\n          if (grantee?.Grantee?.URI) {\n            const granteeGroup = grantee.Grantee.URI.split('/').pop();\n            if (data[granteeGroup].includes('-')) {\n              data[granteeGroup] = [grantee?.Permission];\n            } else {\n              data[granteeGroup].push(grantee?.Permission);\n            }\n          }\n          if (grantee?.Grantee?.ID && bucketOwner === grantee?.Grantee?.ID) {\n            data['Owner'] = grantee?.Permission;\n          }\n        }\n      } else {\n        if (xmlGrantees?.Grantee?.ID && bucketOwner === xmlGrantees?.Grantee?.ID) {\n          data['Owner'] = xmlGrantees?.Permission;\n        }\n      }\n    });\n    return data;\n  }\n\n  updateBucketDetails(cbFn: Function) {\n    if (this.selection) {\n      this.rgwBucketService.get(this.selection.bid).subscribe((bucket: object) => {\n        bucket['lock_retention_period_days'] = this.rgwBucketService.getLockDays(bucket);\n        this.selection = bucket;\n        cbFn();\n      });\n    }\n  }\n\n  extraxtDetailsfromResponse() {\n    this.aclPermissions = this.parseXmlAcl(this.selection.acl, this.selection.owner);\n    if (this.selection.replication?.['Rule']?.['Status']) {\n      this.replicationStatus = this.selection.replication?.['Rule']?.['Status'];\n    }\n    this.rgwBucketService.getBucketRateLimit(this.selection.bid).subscribe((resp: any) => {\n      if (resp && resp.bucket_ratelimit !== undefined) {\n        this.bucketRateLimit = resp.bucket_ratelimit;\n      }\n    });\n    this.extractLifecycleDetails();\n  }\n\n  extractLifecycleDetails() {\n    if (this.lifecycleFormat === 'json' && !this.selection.lifecycle) {\n      this.selection.lifecycle = {};\n    }\n    if (this.selection.lifecycle_progress?.length > 0) {\n      this.selection.lifecycle_progress.forEach(\n        (progress: { bucket: string; status: string; started: string }) => {\n          if (progress.bucket.includes(this.selection.bucket)) {\n            this.lifecycleProgress = progress;\n          }\n        }\n      );\n    }\n  }\n\n  updateLifecycleFormatTo(format: 'json' | 'xml'): void {\n    this.lifecycleFormat = format;\n    this.cd.detectChanges();\n  }\n}\n","<cd-table #table\n          [autoReload]=\"false\"\n          [data]=\"buckets\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\"\n          identifier=\"bid\"\n          (fetchData)=\"getBucketList($event)\"\n          [status]=\"tableStatus\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-rgw-bucket-details *cdTableDetail\n                         [selection]=\"expandedRow\">\n  </cd-rgw-bucket-details>\n</cd-table>\n\n<ng-template #bucketSizeTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.bucket_quota.max_size > 0 && row.bucket_quota.enabled; else noSizeQuota\"\n                [total]=\"row.bucket_quota.max_size\"\n                [used]=\"row.bucket_size\">\n  </cd-usage-bar>\n\n  <ng-template #noSizeQuota\n               i18n>No Limit</ng-template>\n</ng-template>\n\n<ng-template #bucketObjectTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.bucket_quota.max_objects > 0 && row.bucket_quota.enabled; else noObjectQuota\"\n                [total]=\"row.bucket_quota.max_objects\"\n                [used]=\"row.num_objects\"\n                [isBinary]=\"false\">\n  </cd-usage-bar>\n\n  <ng-template #noObjectQuota\n               i18n>No Limit</ng-template>\n</ng-template>\n\n<ng-template #deleteTpl>\n  <cd-alert-panel type=\"danger\"\n                  i18n>\n    Buckets might still have underlying data depending on your bucket configuration\n  </cd-alert-panel>\n</ng-template>\n","import { Component, NgZone, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin, Observable, Subscriber, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Bucket } from '../models/rgw-bucket';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\nimport { RgwBucketTieringFormComponent } from '../rgw-bucket-tiering-form/rgw-bucket-tiering-form.component';\n\nconst BASE_URL = 'rgw/bucket';\n\n@Component({\n  selector: 'cd-rgw-bucket-list',\n  templateUrl: './rgw-bucket-list.component.html',\n  styleUrls: ['./rgw-bucket-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwBucketListComponent extends ListWithDetails implements OnInit, OnDestroy {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('bucketSizeTpl', { static: true })\n  bucketSizeTpl: TemplateRef<any>;\n  @ViewChild('bucketObjectTpl', { static: true })\n  bucketObjectTpl: TemplateRef<any>;\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[] = [];\n  buckets: Bucket[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n  declare staleTimeout: number;\n  private subs: Subscription = new Subscription();\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private dimlessPipe: DimlessPipe,\n    private rgwBucketService: RgwBucketService,\n    private modalService: ModalCdsService,\n    private urlBuilder: URLBuilderService,\n    public actionLabels: ActionLabelsI18n,\n    protected ngZone: NgZone,\n    private taskWrapper: TaskWrapperService\n  ) {\n    super(ngZone);\n  }\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'bid',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Owner`,\n        prop: 'owner',\n        flexGrow: 2.5\n      },\n      {\n        name: $localize`Used Capacity`,\n        prop: 'bucket_size',\n        flexGrow: 0.6,\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`Capacity Limit %`,\n        prop: 'size_usage',\n        cellTemplate: this.bucketSizeTpl,\n        flexGrow: 0.8\n      },\n      {\n        name: $localize`Objects`,\n        prop: 'num_objects',\n        flexGrow: 0.6,\n        pipe: this.dimlessPipe\n      },\n      {\n        name: $localize`Object Limit %`,\n        prop: 'object_usage',\n        cellTemplate: this.bucketObjectTpl,\n        flexGrow: 0.8\n      },\n      {\n        name: $localize`Number of Shards`,\n        prop: 'num_shards',\n        flexGrow: 0.8\n      }\n    ];\n    const getBucketUri = () =>\n      this.selection.first() &&\n      `${encodeURIComponent(this.selection.first().bid)}/${encodeURIComponent(\n        this.selection.first().owner\n      )}`;\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      name: this.actionLabels.CREATE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => this.urlBuilder.getEdit(getBucketUri()),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      title: $localize`Bucket is not empty. Remove all objects before deletion.`,\n      click: () => this.deleteAction(),\n      disable: () => this.selection.first()?.num_objects > 0,\n      name: this.actionLabels.DELETE\n    };\n    const tieringAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.openTieringModal(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.TIERING\n    };\n    this.tableActions = [addAction, editAction, tieringAction, deleteAction];\n    this.setTableRefreshTimeout();\n  }\n\n  getBucketList(context: CdTableFetchDataContext) {\n    this.setTableRefreshTimeout();\n    this.subs.add(\n      this.rgwBucketService\n        .fetchAndTransformBuckets()\n        .pipe(switchMap(() => this.rgwBucketService.buckets$))\n        .subscribe({\n          next: (buckets) => {\n            this.buckets = buckets;\n          },\n          error: () => context.error()\n        })\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  openTieringModal() {\n    this.modalService.show(RgwBucketTieringFormComponent, {\n      bucket: this.selection.first()\n    });\n  }\n\n  deleteAction() {\n    const itemNames = this.selection.selected.map((bucket: any) => bucket['bid']);\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`bucket`,\n      impact: DeletionImpact.high,\n      itemNames: itemNames,\n      bodyTemplate: this.deleteTpl,\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rgw/bucket/delete', {\n                bucket_names: itemNames\n              }),\n              call: observableForkJoin(\n                this.selection.selected.map((bucket: any) => {\n                  return this.rgwBucketService.delete(bucket.bid);\n                })\n              )\n            })\n            .subscribe({\n              error: (error: any) => {\n                // Forward the error to the observer.\n                observer.error(error);\n                // Reload the data table content because some deletions might\n                // have been executed successfully in the meanwhile.\n                this.table.refreshBtn();\n              },\n              complete: () => {\n                // Notify the observer that we are done.\n                observer.complete();\n                // Reload the data table content.\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","export enum RgwUserAvailableCapability {\n  USERS = 'users',\n  BUCKETS = 'buckets',\n  METADATA = 'metadata',\n  USAGE = 'usage',\n  ZONE = 'zone'\n}\n\nexport class RgwUserCapabilities {\n  static readonly capabilities = RgwUserAvailableCapability;\n\n  static getAll(): string[] {\n    return Object.values(RgwUserCapabilities.capabilities);\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"rgw-daemon-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [data]=\"metadata\"\n                            (fetchData)=\"getMetaData()\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-counters\">\n      <a ngbNavLink\n         i18n>Performance Counters</a>\n      <ng-template ngbNavContent>\n        <cd-table-performance-counter serviceType=\"rgw\"\n                                      [serviceId]=\"serviceMapId\">\n        </cd-table-performance-counter>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"grafanaPermission.read\">\n      <a ngbNavLink\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"RGW instance details\"\n                    [grafanaPath]=\"'rgw-instance-detail?var-rgw_servers=rgw.' + this.serviceId\"\n                    [type]=\"'metrics'\"\n                    uid=\"x5ARzZtmk\"\n                    grafanaStyle=\"one\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { RgwDaemon } from '~/app/ceph/rgw/models/rgw-daemon';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-rgw-daemon-details',\n  templateUrl: './rgw-daemon-details.component.html',\n  styleUrls: ['./rgw-daemon-details.component.scss']\n})\nexport class RgwDaemonDetailsComponent implements OnChanges {\n  metadata: any;\n  serviceId = '';\n  serviceMapId = '';\n  grafanaPermission: Permission;\n\n  @Input()\n  selection: RgwDaemon;\n\n  constructor(\n    private rgwDaemonService: RgwDaemonService,\n    private authStorageService: AuthStorageService\n  ) {\n    this.grafanaPermission = this.authStorageService.getPermissions().grafana;\n  }\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.serviceId = this.selection.id;\n      this.serviceMapId = this.selection.service_map_id;\n    }\n  }\n\n  getMetaData() {\n    if (_.isEmpty(this.serviceId)) {\n      return;\n    }\n    this.rgwDaemonService.get(this.serviceId).subscribe((resp: any) => {\n      this.metadata = resp['rgw_metadata'];\n    });\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\">\n  <ng-container ngbNavItem>\n    <a ngbNavLink\n       i18n>Gateways List</a>\n    <ng-template ngbNavContent>\n      <cd-table [data]=\"daemons\"\n                [columns]=\"columns\"\n                columnMode=\"flex\"\n                [hasDetails]=\"true\"\n                (setExpandedRow)=\"setExpandedRow($event)\"\n                (fetchData)=\"getDaemonList($event)\">\n        <cd-rgw-daemon-details *cdTableDetail\n                               [selection]=\"expandedRow\">\n        </cd-rgw-daemon-details>\n      </cd-table>\n    </ng-template>\n  </ng-container>\n\n  <ng-container ngbNavItem\n                *ngIf=\"grafanaPermission.read\">\n    <a ngbNavLink\n       i18n>Overall Performance</a>\n    <ng-template ngbNavContent>\n      <cd-grafana i18n-title\n                  title=\"RGW overview\"\n                  [grafanaPath]=\"'rgw-overview?'\"\n                  [type]=\"'metrics'\"\n                  uid=\"WAkugZpiz\"\n                  grafanaStyle=\"two\">\n      </cd-grafana>\n    </ng-template>\n  </ng-container>\n\n  <ng-container ngbNavItem\n                *ngIf=\"grafanaPermission.read && isMultiSite\">\n    <a ngbNavLink\n       i18n>Sync Performance</a>\n    <ng-template ngbNavContent>\n      <cd-grafana i18n-title\n                  title=\"Radosgw sync overview\"\n                  [grafanaPath]=\"'radosgw-sync-overview?'\"\n                  [type]=\"'metrics'\"\n                  uid=\"rgw-sync-overview\"\n                  grafanaStyle=\"two\">\n      </cd-grafana>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { RgwDaemon } from '~/app/ceph/rgw/models/rgw-daemon';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { RgwSiteService } from '~/app/shared/api/rgw-site.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { CephShortVersionPipe } from '~/app/shared/pipes/ceph-short-version.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-rgw-daemon-list',\n  templateUrl: './rgw-daemon-list.component.html',\n  styleUrls: ['./rgw-daemon-list.component.scss']\n})\nexport class RgwDaemonListComponent extends ListWithDetails implements OnInit {\n  columns: CdTableColumn[] = [];\n  daemons: RgwDaemon[] = [];\n  grafanaPermission: Permission;\n  isMultiSite: boolean;\n\n  constructor(\n    private rgwDaemonService: RgwDaemonService,\n    private authStorageService: AuthStorageService,\n    private cephShortVersionPipe: CephShortVersionPipe,\n    private rgwSiteService: RgwSiteService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.grafanaPermission = this.authStorageService.getPermissions().grafana;\n    this.columns = [\n      {\n        name: $localize`ID`,\n        prop: 'id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Hostname`,\n        prop: 'server_hostname',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Port`,\n        prop: 'port',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Realm`,\n        prop: 'realm_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Zone Group`,\n        prop: 'zonegroup_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Zone`,\n        prop: 'zone_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Version`,\n        prop: 'version',\n        flexGrow: 1,\n        pipe: this.cephShortVersionPipe\n      }\n    ];\n    this.rgwSiteService\n      .get('realms')\n      .subscribe((realms: string[]) => (this.isMultiSite = realms.length > 0));\n  }\n\n  getDaemonList(context: CdTableFetchDataContext) {\n    this.rgwDaemonService.list().subscribe(this.updateDaemons, () => {\n      context.error();\n    });\n  }\n\n  private updateDaemons = (daemons: RgwDaemon[]) => {\n    this.daemons = daemons;\n  };\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n\n    <cd-help-text [formAllFieldsRequired]=\"true\"></cd-help-text>\n  </cds-modal-header>\n\n    <form #frm=\"ngForm\"\n          [formGroup]=\"formGroup\"\n          novalidate>\n      <div cdsModalContent>\n        <!-- Type -->\n        <div class=\"form-item\">\n          <cds-text-label for=\"type\"\n                          [invalid]=\"formGroup.controls.type.invalid && formGroup.controls.type.dirty\"\n                          [invalidText]=\"typeError\"\n                          *ngIf=\"editing\"\n                          i18n>Type\n            <input cdsText\n                   id=\"type\"\n                   name=\"type\"\n                   formControlName=\"type\"\n                   [readonly]=\"true\"\n                   modal-primary-focus>\n          </cds-text-label>\n\n          <cds-select *ngIf=\"!editing\"\n                      label=\"Type\"\n                      i18n-label\n                      for=\"type\"\n                      formControlName=\"type\"\n                      [invalid]=\"formGroup.controls.type.invalid && formGroup.controls.type.dirty\"\n                      [invalidText]=\"typeError\">\n            <option value=\"\">--- Select a type ---</option>\n            <option *ngFor=\"let type of types\"\n                    [value]=\"type\">{{ type }}</option>\n          </cds-select>\n          <ng-template #typeError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"formGroup.showError('type', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n\n        <!-- Permission -->\n        <div class=\"form-item\">\n          <cds-select label=\"Permission\"\n                      i18n-label\n                      for=\"perm\"\n                      formControlName=\"perm\"\n                      [invalid]=\"formGroup.controls.perm.invalid && formGroup.controls.perm.dirty\"\n                      [invalidText]=\"permError\">\n            <option value=\"\">--- Select a permission ---</option>\n            <option *ngFor=\"let perm of ['read', 'write', '*']\"\n                    [value]=\"perm\">\n              {{ perm }}\n            </option>\n          </cds-select>\n\n          <ng-template #permError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"formGroup.showError('perm', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n      </div>\n\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"formGroup\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n\n  </form>\n</cds-modal>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { RgwUserCapabilities } from '../models/rgw-user-capabilities';\nimport { RgwUserCapability } from '../models/rgw-user-capability';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-rgw-user-capability-modal',\n  templateUrl: './rgw-user-capability-modal.component.html',\n  styleUrls: ['./rgw-user-capability-modal.component.scss']\n})\nexport class RgwUserCapabilityModalComponent extends BaseModal {\n  /**\n   * The event that is triggered when the 'Add' or 'Update' button\n   * has been pressed.\n   */\n  @Output()\n  submitAction = new EventEmitter();\n\n  formGroup: CdFormGroup;\n  editing = true;\n  types: string[] = [];\n  resource: string;\n  action: string;\n\n  constructor(private formBuilder: CdFormBuilder, public actionLabels: ActionLabelsI18n) {\n    super();\n    this.resource = $localize`capability`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.formGroup = this.formBuilder.group({\n      type: [null, [Validators.required]],\n      perm: [null, [Validators.required]]\n    });\n  }\n\n  /**\n   * Set the 'editing' flag. If set to TRUE, the modal dialog is in 'Edit' mode,\n   * otherwise in 'Add' mode. According to the mode the dialog and its controls\n   * behave different.\n   * @param {boolean} viewing\n   */\n  setEditing(editing: boolean = true) {\n    this.editing = editing;\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.ADD;\n  }\n\n  /**\n   * Set the values displayed in the dialog.\n   */\n  setValues(type: string, perm: string) {\n    this.formGroup.setValue({\n      type: type,\n      perm: perm\n    });\n  }\n\n  /**\n   * Set the current capabilities of the user.\n   */\n  setCapabilities(capabilities: RgwUserCapability[]) {\n    // Parse the configured capabilities to get a list of types that\n    // should be displayed.\n    const usedTypes: string[] = [];\n    capabilities.forEach((capability) => {\n      usedTypes.push(capability.type);\n    });\n    this.types = [];\n    RgwUserCapabilities.getAll().forEach((type) => {\n      if (_.indexOf(usedTypes, type) === -1) {\n        this.types.push(type);\n      }\n    });\n  }\n\n  onSubmit() {\n    const capability: RgwUserCapability = this.formGroup.value;\n    this.submitAction.emit(capability);\n    this.closeModal();\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <ng-container i18n=\"form title\"\n                  class=\"modal-title\">{{ action | titlecase }} {{ resource | upperFirst }}</ng-container>\n\n    <cd-help-text [formAllFieldsRequired]=\"true\"></cd-help-text>\n  </cds-modal-header>\n\n  <form #frm=\"ngForm\"\n        [formGroup]=\"formGroup\"\n        novalidate>\n    <div cdsModalContent>\n\n      <!-- Username -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"user\"\n                        [invalid]=\"formGroup.controls.user.invalid && formGroup.controls.user.dirty\"\n                        [invalidText]=\"userError\"\n                        *ngIf=\"viewing\"\n                        i18n>Username\n          <input cdsText\n                 id=\"user\"\n                 name=\"user\"\n                 formControlName=\"user\"\n                 readonly\n                 [readonly]=\"true\"\n                 modal-primary-focus>\n        </cds-text-label>\n\n        <cds-select *ngIf=\"!viewing\"\n                    label=\"Username\"\n                    i18n-label\n                    for=\"user\"\n                    formControlName=\"user\"\n                    [invalid]=\"formGroup.controls.user.invalid && formGroup.controls.user.dirty\"\n                    [invalidText]=\"userError\">\n          <option value=\"\">--- Select a username ---</option>\n          <option *ngFor=\"let userCandidate of userCandidates\"\n                  [value]=\"userCandidate\">{{ userCandidate }}</option>\n        </cds-select>\n\n        <ng-template #userError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('user', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Auto-generate key -->\n      <div class=\"form-item\"\n           *ngIf=\"!viewing\">\n        <cds-checkbox id=\"generate_key\"\n                      formControlName=\"generate_key\"\n                      i18n>Auto-generate key\n        </cds-checkbox>\n      </div>\n\n      <!-- Access key -->\n      <div class=\"form-item form-item-append\"\n           *ngIf=\"!formGroup.getValue('generate_key')\">\n        <cds-password-label for=\"access_key\"\n                            [invalid]=\"formGroup.controls.access_key.invalid && formGroup.controls.access_key.dirty\"\n                            [invalidText]=\"accessKeyError\"\n                            i18n>Access key\n          <input cdsPassword\n                 id=\"access_key\"\n                 name=\"access_key\"\n                 formControlName=\"access_key\"\n                 [readonly]=\"viewing\">\n        </cds-password-label>\n        <cd-copy-2-clipboard-button source=\"access_key\"\n                                    class=\"mt-4\">\n        </cd-copy-2-clipboard-button>\n\n        <ng-template #accessKeyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('access_key', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Secret key -->\n      <div class=\"form-item form-item-append\"\n           *ngIf=\"!formGroup.getValue('generate_key')\">\n        <cds-password-label for=\"secret_key\"\n                            [invalid]=\"formGroup.controls.secret_key.invalid && formGroup.controls.secret_key.dirty\"\n                            [invalidText]=\"secretKeyError\"\n                            i18n>Secret key\n          <input cdsPassword\n                 id=\"secret_key\"\n                 name=\"secret_key\"\n                 formControlName=\"secret_key\"\n                 [invalid]=\"formGroup.controls.secret_key.invalid && formGroup.controls.secret_key.dirty\"\n                 [readonly]=\"viewing\">\n        </cds-password-label>\n\n        <cd-copy-2-clipboard-button source=\"secret_key\"\n                                    class=\"mt-4\">\n        </cd-copy-2-clipboard-button>\n\n        <ng-template #secretKeyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('secret_key', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n    </div>\n\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"formGroup\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [showSubmit]=\"!viewing\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n  </form>\n</cds-modal>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { RgwUserS3Key } from '../models/rgw-user-s3-key';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-rgw-user-s3-key-modal',\n  templateUrl: './rgw-user-s3-key-modal.component.html',\n  styleUrls: ['./rgw-user-s3-key-modal.component.scss']\n})\nexport class RgwUserS3KeyModalComponent extends BaseModal {\n  /**\n   * The event that is triggered when the 'Add' button as been pressed.\n   */\n  @Output()\n  submitAction = new EventEmitter();\n\n  formGroup: CdFormGroup;\n  viewing = true;\n  userCandidates: string[] = [];\n  resource: string;\n  action: string;\n\n  constructor(private formBuilder: CdFormBuilder, public actionLabels: ActionLabelsI18n) {\n    super();\n    this.resource = $localize`S3 Key`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.formGroup = this.formBuilder.group({\n      user: [null, [Validators.required]],\n      generate_key: [true],\n      access_key: [null, [CdValidators.requiredIf({ generate_key: false })]],\n      secret_key: [null, [CdValidators.requiredIf({ generate_key: false })]]\n    });\n  }\n\n  /**\n   * Set the 'viewing' flag. If set to TRUE, the modal dialog is in 'View' mode,\n   * otherwise in 'Add' mode. According to the mode the dialog and its controls\n   * behave different.\n   * @param {boolean} viewing\n   */\n  setViewing(viewing: boolean = true) {\n    this.viewing = viewing;\n    this.action = this.viewing ? this.actionLabels.SHOW : this.actionLabels.CREATE;\n  }\n\n  /**\n   * Set the values displayed in the dialog.\n   */\n  setValues(user: string, access_key: string, secret_key: string) {\n    this.formGroup.setValue({\n      user: user,\n      generate_key: _.isEmpty(access_key),\n      access_key: access_key,\n      secret_key: secret_key\n    });\n  }\n\n  /**\n   * Set the user candidates displayed in the 'Username' dropdown box.\n   */\n  setUserCandidates(candidates: string[]) {\n    this.userCandidates = candidates;\n  }\n\n  onSubmit() {\n    const key: RgwUserS3Key = this.formGroup.value;\n    this.submitAction.emit(key);\n    this.closeModal();\n  }\n}\n","export class RgwUserSubuser {\n  id: string;\n  permissions: string;\n  generate_secret?: boolean;\n  secret_key?: string;\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n\n    <cd-help-text [formAllFieldsRequired]=\"true\"></cd-help-text>\n  </cds-modal-header>\n\n  <form #frm=\"ngForm\"\n        [formGroup]=\"formGroup\"\n        novalidate>\n    <div cdsModalContent>\n      <!-- Username -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"uid\"\n                        i18n>Username\n          <input cdsText\n                 id=\"uid\"\n                 name=\"uid\"\n                 formControlName=\"uid\"\n                 readonly\n                 modal-primary-focus>\n        </cds-text-label>\n      </div>\n\n      <!-- Subuser -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"subuid\"\n                        [invalid]=\"formGroup.controls.subuid.invalid && formGroup.controls.subuid.dirty\"\n                        [invalidText]=\"subuserHelper\">Subuser\n          <input cdsText\n                 id=\"subuid\"\n                 name=\"subuid\"\n                 formControlName=\"subuid\"\n                 [readonly]=\"editing\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #subuserHelper>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('subuid', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('subuid', frm, 'subuserIdExists')\"\n                i18n>The chosen subuser ID is already in use.</span>\n        </ng-template>\n      </div>\n\n      <!-- Permission -->\n      <div class=\"form-item\">\n        <cds-select label=\"Permission\"\n                    i18n-label\n                    for=\"perm\"\n                    formControlName=\"perm\"\n                    [invalid]=\"formGroup.controls.perm.invalid && formGroup.controls.perm.dirty\"\n                    [invalidText]=\"permError\">\n          <option value=\"\">--- Select a permission ---</option>\n          <option *ngFor=\"let perm of ['read', 'write']\"\n                  [value]=\"perm\">\n            {{ perm }}\n          </option>\n          <option i18n\n                  value=\"read-write\">read, write</option>\n          <option i18n\n                  value=\"full-control\">full</option>\n        </cds-select>\n\n        <ng-template #permError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"formGroup.showError('perm', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Swift key -->\n      <fieldset *ngIf=\"!editing\">\n        <legend i18n>Swift key</legend>\n\n        <!-- Auto-generate key -->\n        <div class=\"form-item\">\n          <cds-checkbox id=\"generate_secret\"\n                        formControlName=\"generate_secret\"\n                        i18n>Auto-generate key\n          </cds-checkbox>\n        </div>\n\n        <!-- Secret key -->\n        <div class=\"form-item form-item-append\"\n             *ngIf=\"!editing && !formGroup.getValue('generate_secret')\">\n          <cds-password-label for=\"secret_key\"\n                              [invalid]=\"formGroup.controls.secret_key.invalid && formGroup.controls.secret_key.dirty\"\n                              [invalidText]=\"secretKeyError\"\n                              i18n>Secret key\n            <input cdsPassword\n                   id=\"secret_key\"\n                   name=\"secret_key\"\n                   formControlName=\"secret_key\"\n                   [invalid]=\"formGroup.controls.secret_key.invalid && formGroup.controls.secret_key.dirty\"\n                   [autofocus]=\"true\">\n          </cds-password-label>\n\n          <cd-copy-2-clipboard-button source=\"secret_key\"\n                                      class=\"mt-4\">\n          </cd-copy-2-clipboard-button>\n\n          <ng-template #secretKeyError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"formGroup.showError('secret_key', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n\n      </fieldset>\n    </div>\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"formGroup\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n\n  </form>\n</cds-modal>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators, isEmptyInputValue } from '~/app/shared/forms/cd-validators';\nimport { RgwUserSubuser } from '../models/rgw-user-subuser';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-rgw-user-subuser-modal',\n  templateUrl: './rgw-user-subuser-modal.component.html',\n  styleUrls: ['./rgw-user-subuser-modal.component.scss']\n})\nexport class RgwUserSubuserModalComponent extends BaseModal {\n  /**\n   * The event that is triggered when the 'Add' or 'Update' button\n   * has been pressed.\n   */\n  @Output()\n  submitAction = new EventEmitter();\n\n  formGroup: CdFormGroup;\n  editing = true;\n  subusers: RgwUserSubuser[] = [];\n  resource: string;\n  action: string;\n\n  constructor(private formBuilder: CdFormBuilder, private actionLabels: ActionLabelsI18n) {\n    super();\n    this.resource = $localize`Subuser`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.formGroup = this.formBuilder.group({\n      uid: [null],\n      subuid: [null, [Validators.required, this.subuserValidator()]],\n      perm: ['full-control', [Validators.required]],\n      // Swift key\n      generate_secret: [true],\n      secret_key: [null, [CdValidators.requiredIf({ generate_secret: false })]]\n    });\n  }\n\n  /**\n   * Validates whether the subuser already exists.\n   */\n  subuserValidator(): ValidatorFn {\n    const self = this;\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (self.editing) {\n        return null;\n      }\n      if (isEmptyInputValue(control.value)) {\n        return null;\n      }\n      const found = self.subusers.some((subuser) => {\n        return _.isEqual(self.getSubuserName(subuser.id), control.value);\n      });\n      return found ? { subuserIdExists: true } : null;\n    };\n  }\n\n  /**\n   * Get the subuser name.\n   * Examples:\n   *   'johndoe' => 'johndoe'\n   *   'janedoe:xyz' => 'xyz'\n   * @param {string} value The value to process.\n   * @returns {string} Returns the user ID.\n   */\n  private getSubuserName(value: string) {\n    if (_.isEmpty(value)) {\n      return value;\n    }\n    const matches = value.match(/([^:]+)(:(.+))?/);\n    return _.isUndefined(matches[3]) ? matches[1] : matches[3];\n  }\n\n  /**\n   * Set the 'editing' flag. If set to TRUE, the modal dialog is in 'Edit' mode,\n   * otherwise in 'Add' mode. According to the mode the dialog and its controls\n   * behave different.\n   * @param {boolean} viewing\n   */\n  setEditing(editing: boolean = true) {\n    this.editing = editing;\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n  }\n\n  /**\n   * Set the values displayed in the dialog.\n   */\n  setValues(uid: string, subuser: string = '', permissions: string = '') {\n    this.formGroup.setValue({\n      uid: uid,\n      subuid: this.getSubuserName(subuser),\n      perm: permissions,\n      generate_secret: true,\n      secret_key: null\n    });\n  }\n\n  /**\n   * Set the current capabilities of the user.\n   */\n  setSubusers(subusers: RgwUserSubuser[]) {\n    this.subusers = subusers;\n  }\n\n  onSubmit() {\n    // Get the values from the form and create an object that is sent\n    // by the triggered submit action event.\n    const values = this.formGroup.value;\n    const subuser = new RgwUserSubuser();\n    subuser.id = `${values.uid}:${values.subuid}`;\n    subuser.permissions = values.perm;\n    subuser.generate_secret = values.generate_secret;\n    subuser.secret_key = values.secret_key;\n    this.submitAction.emit(subuser);\n    this.closeModal();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { BaseModal } from 'carbon-components-angular';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\n\n@Component({\n  selector: 'cd-rgw-user-swift-key-modal',\n  templateUrl: './rgw-user-swift-key-modal.component.html',\n  styleUrls: ['./rgw-user-swift-key-modal.component.scss']\n})\nexport class RgwUserSwiftKeyModalComponent extends BaseModal {\n  user: string;\n  secret_key: string;\n  resource: string;\n  action: string;\n\n  constructor(public actionLabels: ActionLabelsI18n) {\n    super();\n    this.resource = $localize`Swift Key`;\n    this.action = this.actionLabels.SHOW;\n  }\n\n  /**\n   * Set the values displayed in the dialog.\n   */\n  setValues(user: string, secret_key: string) {\n    this.user = user;\n    this.secret_key = secret_key;\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <form novalidate>\n    <div cdsModalContent>\n      <!-- Username -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"user\"\n                        i18n>Username\n          <input cdsText\n                 id=\"user\"\n                 name=\"user\"\n                 readonly\n                 [(ngModel)]=\"user\"\n                 modal-primary-focus>\n        </cds-text-label>\n      </div>\n\n      <!-- Secret key -->\n      <div class=\"form-item form-item-append\">\n        <cds-password-label for=\"secret_key\"\n                            i18n>Secret key\n          <input cdsPassword\n                 id=\"secret_key\"\n                 name=\"secret_key\"\n                 [(ngModel)]=\"secret_key\"\n                 readonly>\n        </cds-password-label>\n        <cd-copy-2-clipboard-button source=\"secret_key\"\n                                    class=\"mt-4\">\n        </cd-copy-2-clipboard-button>\n      </div>\n    </div>\n    <cd-form-button-panel [showSubmit]=\"false\"\n                          (cancel)=\"closeModal()\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n  </form>\n</cds-modal>\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\"\n     *cdFormLoading=\"loading\">\n  <form #frm=\"ngForm\"\n        [formGroup]=\"userForm\"\n        novalidate>\n    <div i18n=\"form title\"\n         class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n    @if(accounts.length > 0){\n      <!-- Link Account -->\n      <div class=\"form-item\">\n        <cds-select label=\"Link Account\"\n                    i18n-label\n                    id=\"link_account\"\n                    for=\"link_account\"\n                    formControlName=\"account_id\"\n                    [invalid]=\"userForm.controls.account_id.invalid && userForm.controls.account_id.dirty\"\n                    [invalidText]=\"accountError\"\n                    [helperText]=\"accountsHelper\">\n          <option i18n\n                  *ngIf=\"accounts === null\"\n                  [ngValue]=\"null\">Loading...</option>\n          <option i18n\n                  *ngIf=\"accounts !== null\"\n                  [value]=\"''\">-- Select an Account --</option>\n          <option *ngFor=\"let account of accounts\"\n                  [value]=\"account.id\">{{ account.name }} {{account.tenant ? '- '+account.tenant : ''}}</option>\n        </cds-select>\n        <ng-template #accountError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('account_id', frm, 'tenantedAccount')\"\n                i18n>Only accounts with the same tenant name can be linked to a tenanted user.</span>\n        </ng-template>\n        <ng-template #accountsHelper>\n          <div i18n>Account membership is permanent. Once added, users cannot be removed from their account.</div>\n          <div i18n>Ownership of all of the user's buckets will be transferred to the account.</div>\n        </ng-template>\n      </div>\n\n      <!-- Account Root user -->\n      <div *ngIf=\"userForm.getValue('account_id')\"\n           class=\"form-item\">\n        <cds-checkbox formControlName=\"account_root_user\"\n                      id=\"account_root_user\"\n                      i18n>Account Root user\n          <cd-help-text>The account root user has full access to all resources and manages the account.\n            It's recommended to use this account for management tasks only and create additional users with specific permissions.\n          </cd-help-text>\n        </cds-checkbox>\n      </div>\n    }\n\n    <!-- User ID -->\n    <div class=\"form-item\">\n      <cds-text-label for=\"user_id\"\n                      i18n\n                      cdRequiredField=\"User ID\"\n                      [invalid]=\"userForm.controls.user_id.invalid && (userForm.controls.user_id.dirty)\"\n                      [invalidText]=\"userError\">User ID\n        <input cdsText\n               formControlName=\"user_id\"\n               name=\"user_id\"\n               id=\"user_id\"\n               [invalid]=\"userForm.controls.user_id.invalid && (userForm.controls.user_id.dirty)\"\n               [readonly]=\"editing\"\n               [autofocus]=\"!editing\"/>\n      </cds-text-label>\n      <ng-template #userError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('user_id', frm, 'required')\"\n              i18n>This field is required.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('user_id', frm, 'pattern')\"\n              i18n>The value is not valid.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"!userForm.getValue('show_tenant') && userForm.showError('user_id', frm, 'notUnique')\"\n              i18n>The chosen user ID is already in use.</span>\n      </ng-template>\n    </div>\n\n    <!-- Show Tenant -->\n    <div class=\"form-item\">\n      <cds-checkbox formControlName=\"show_tenant\"\n                    id=\"show_tenant\"\n                    [readonly]=\"true\"\n                    (checkedChange)=\"updateFieldsWhenTenanted()\">Show Tenant\n      </cds-checkbox>\n    </div>\n\n    <!-- Tenant -->\n    <div class=\"form-item\"\n         *ngIf=\"userForm.getValue('show_tenant')\">\n      <cds-text-label for=\"tenant\"\n                      i18n\n                      [invalid]=\"userForm.controls.tenant.invalid && (userForm.controls.tenant.dirty)\"\n                      [invalidText]=\"tenantError\">Tenant\n        <input cdsText\n               formControlName=\"tenant\"\n               name=\"tenant\"\n               id=\"tenant\"\n               [invalid]=\"userForm.controls.tenant.invalid && (userForm.controls.tenant.dirty)\"\n               [readonly]=\"editing\"\n               autofocus/>\n      </cds-text-label>\n      <ng-template #tenantError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('tenant', frm, 'pattern')\"\n              i18n>The value is not valid.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('tenant', frm, 'notUnique')\"\n              i18n>The chosen user ID exists in this tenant.</span>\n      </ng-template>\n    </div>\n\n    <!-- Full name -->\n    <div class=\"form-item\">\n      <cds-text-label  for=\"display_name\"\n                       i18n\n                       cdRequiredField=\"Full name\"\n                       [invalid]=\"userForm.controls.display_name.invalid && (userForm.controls.display_name.dirty)\"\n                       [invalidText]=\"displayNameError\">Full name\n        <input cdsText\n               formControlName=\"display_name\"\n               name=\"display_name\"\n               id=\"display_name\"\n               [invalid]=\"userForm.showError('display_name', formDir)\"/>\n      </cds-text-label>\n      <ng-template #displayNameError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('display_name', frm, 'required')\"\n              i18n>This field is required.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('display_name', frm, 'pattern')\"\n              i18n>The value is not valid.</span>\n      </ng-template>\n    </div>\n\n    <!-- Email address -->\n    <div class=\"form-item\">\n      <cds-text-label for=\"email\"\n                      i18n\n                      [invalid]=\"userForm.controls.email.invalid && (userForm.controls.email.dirty)\"\n                      [invalidText]=\"emailError\">Email address\n        <input cdsText\n               formControlName=\"email\"\n               name=\"email\"\n               id=\"email\"\n               [invalid]=\"userForm.controls.email.invalid && (userForm.controls.email.dirty)\"/>\n      </cds-text-label>\n      <ng-template #emailError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('email', frm, 'email')\"\n              i18n>This is not a valid email address.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('email', frm, 'notUnique')\"\n              i18n>The chosen email address is already in use.</span>\n      </ng-template>\n    </div>\n\n    <!-- Max. buckets -->\n    <div class=\"form-item\">\n      <cds-select label=\"Maximum buckets\"\n                  for=\"max_buckets_mode\"\n                  formControlName=\"max_buckets_mode\"\n                  id=\"max_buckets_mode\"\n                  (valueChange)=\"onMaxBucketsModeChange($event)\">\n        <option value=\"-1\"\n                i18n>Disabled</option>\n        <option value=\"0\"\n                i18n>Unlimited</option>\n        <option value=\"1\"\n                i18n>Custom</option>\n      </cds-select>\n    </div>\n    <div *ngIf=\"1 == userForm.get('max_buckets_mode').value\"\n         class=\"form-item\">\n      <cds-number for=\"max_buckets\"\n                  formControlName=\"max_buckets\"\n                  id=\"max_buckets\"\n                  min=\"1\"\n                  [invalid]=\"userForm.controls.max_buckets.invalid && (userForm.controls.max_buckets.dirty)\"\n                  [invalidText]=\"maxBucketsError\"></cds-number>\n      <ng-template #maxBucketsError>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('max_buckets', frm, 'required')\"\n              i18n>This field is required.</span>\n        <span class=\"invalid-feedback\"\n              i18n>The entered value must be >= 1.</span>\n      </ng-template>\n    </div>\n\n    <!-- Suspended -->\n    <div class=\"form-item\">\n      <cds-checkbox formControlName=\"suspended\"\n                    id=\"suspended\"\n                    i18n>Suspended\n        <cd-help-text>Suspending the user disables the user and subuser.</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    <!-- System User -->\n    <div class=\"form-item\">\n      <cds-checkbox formControlName=\"system\"\n                    id=\"system\"\n                    i18n>System user\n        <cd-help-text>System users are distinct from regular users, they are used by the RGW service to perform administrative tasks, manage buckets and objects</cd-help-text>\n      </cds-checkbox>\n    </div>\n\n    @if(userForm.getValue('account_id') && !userForm.getValue('account_root_user')) {\n    <!-- Managed policies -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend i18n\n                class=\"cd-header\">Managed policies</legend>\n        <cds-combo-box label=\"Policies\"\n                       type=\"multi\"\n                       selectionFeedback=\"top-after-reopen\"\n                       formControlName=\"account_policies\"\n                       id=\"account_policies\"\n                       placeholder=\"Select managed policies...\"\n                       i18n-placeholder\n                       [appendInline]=\"true\"\n                       [items]=\"managedPolicies\"\n                       (selected)=\"multiSelector($event)\"\n                       itemValueKey=\"name\"\n                       i18n-label\n                       i18n>\n          <cds-dropdown-list></cds-dropdown-list>\n        </cds-combo-box>\n      </div>\n    </fieldset>\n    }\n\n    <!-- S3 key -->\n    <fieldset *ngIf=\"!editing\">\n      <legend i18n\n              class=\"cd-header\">S3 key</legend>\n\n      <!-- Auto-generate key -->\n      <div class=\"form-item\">\n        <cds-checkbox formControlName=\"generate_key\"\n                      id=\"generate_key\"\n                      i18n>Auto-generate key</cds-checkbox>\n      </div>\n\n      <!-- Access key -->\n      <div class=\"form-item form-item-append\"\n           *ngIf=\"!editing && !userForm.getValue('generate_key')\">\n        <cds-password-label for=\"access_key\"\n                            i18n\n                            cdRequiredField=\"Access key\"\n                            [invalid]=\"userForm.controls.access_key.invalid && (userForm.controls.access_key.dirty)\"\n                            [invalidText]=\"accessKeyError\">Access key\n          <input cdsPassword\n                 type=\"password\"\n                 formControlName=\"access_key\"\n                 name=\"access_key\"\n                 id=\"access_key\"\n                 [invalid]=\"userForm.controls.access_key.invalid && (userForm.controls.access_key.dirty)\"/>\n        </cds-password-label>\n        <cd-copy-2-clipboard-button source=\"access_key\"\n                                    class=\"mt-4\">\n        </cd-copy-2-clipboard-button>\n        <ng-template #accessKeyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('access_key', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Secret key -->\n      <div class=\"form-item form-item-append\"\n           *ngIf=\"!editing && !userForm.getValue('generate_key')\">\n        <cds-password-label for=\"secret\"\n                            i18n\n                            cdRequiredField=\"Secret key\"\n                            [invalid]=\"userForm.controls.secret_key.invalid && (userForm.controls.secret_key.dirty)\"\n                            [invalidText]=\"secretKeyError\">Secret key\n          <input cdsPassword\n                 type=\"password\"\n                 formControlName=\"secret_key\"\n                 name=\"secret_key\"\n                 id=\"secret_key\"\n                 [invalid]=\"userForm.controls.secret_key.invalid && (userForm.controls.secret_key.dirty)\"/>\n        </cds-password-label>\n        <cd-copy-2-clipboard-button source=\"secret_key\"\n                                    class=\"mt-4\">\n        </cd-copy-2-clipboard-button>\n        <ng-template #secretKeyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('secret_key', frm, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n    </fieldset>\n\n    <!-- Subusers -->\n    <fieldset *ngIf=\"editing\">\n      <div class=\"form-item\">\n      <legend i18n\n              class=\"cd-header\">Subusers</legend>\n      <span *ngIf=\"subusers.length === 0\"\n            class=\"no-border\">\n        <span class=\"form-text text-muted\"\n              i18n>There are no subusers.</span>\n      </span>\n\n      <ng-container *ngFor=\"let subuser of subusers; let i=index;\">\n\n      <div cdsRow\n           class=\"form-item-append\"\n           [ngClass]=\"{'form-item': i > 0}\">\n        <div cdsCol>\n          <cds-text-label>Subuser id\n            <input cdsText\n                   [value]=\"subuser.id\"\n                   readonly>\n          </cds-text-label>\n        </div>\n        <div cdsCol>\n          <cds-text-label>Permissions\n            <input cdsText\n                   [value]=\"('full-control' === subuser.permissions) ? 'full' : subuser.permissions\"\n                   readonly>\n          </cds-text-label>\n        </div>\n        <cds-icon-button kind=\"tertiary\"\n                         size=\"md\"\n                         title=\"Edit\"\n                         class=\"mt-4 tc_showSubuserButton\"\n                         (click)=\"showSubuserModal(i)\">\n          <svg [cdsIcon]=\"icons.edit\"\n               [size]=\"icons.size32\"\n               class=\"cds--btn__icon\"></svg>\n        </cds-icon-button>\n        <cds-icon-button kind=\"danger\"\n                         size=\"md\"\n                         title=\"Delete\"\n                         class=\"mt-4 tc_deleteSubuserButton\"\n                         (click)=\"deleteSubuser(i)\">\n          <svg [cdsIcon]=\"icons.trash\"\n               [size]=\"icons.size32\"\n               class=\"cds--btn__icon\">></svg>\n        </cds-icon-button>\n        </div>\n      </ng-container>\n      <div cdsRow\n           class=\"form-item\">\n        <div cdsCol>\n          <button cdsButton=\"tertiary\"\n                  type=\"button\"\n                  class=\"tc_addSubuserButton\"\n                  (click)=\"showSubuserModal()\">\n            <ng-container i18n>{{ actionLabels.CREATE | titlecase }}\n              {{ subuserLabel | upperFirst }}</ng-container>\n            <svg [cdsIcon]=\"icons.add\"\n                 [size]=\"icons.size32\"\n                 class=\"cds--btn__icon\"></svg>\n          </button>\n        </div>\n      </div>\n      </div>\n    </fieldset>\n\n    <!-- Keys -->\n    <fieldset *ngIf=\"editing\">\n      <div class=\"form-item\">\n        <legend i18n\n                class=\"cd-header\">Keys</legend>\n\n        <!-- S3 keys -->\n        <h6>S3</h6>\n        <span *ngIf=\"s3Keys.length === 0\"\n              class=\"no-border\">\n          <span class=\"form-text text-muted\"\n                i18n>There are no keys.</span>\n        </span>\n\n        <span *ngFor=\"let key of s3Keys; let i=index;\">\n          <div class=\"form-item-append\"\n               cdsRow>\n            <div cdsCol>\n              <cds-text-label>\n                <input cdsText\n                       [value]=\"key.user\"\n                       readonly>\n              </cds-text-label>\n            </div>\n            <cds-icon-button kind=\"tertiary\"\n                             size=\"md\"\n                             title=\"Show\"\n                             i18n-title\n                             class=\"mt-2 tc_showS3KeyButton\"\n                             (click)=\"showS3KeyModal(i)\">\n              <svg [cdsIcon]=\"icons.edit\"\n                   [size]=\"icons.size16\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n            <cds-icon-button kind=\"danger\"\n                             size=\"md\"\n                             title=\"Delete\"\n                             class=\"mt-2 tc_deleteS3KeyButton\"\n                             (click)=\"deleteS3Key(i)\">\n              <svg [cdsIcon]=\"icons.trash\"\n                   [size]=\"icons.size32\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </div>\n          <span class=\"form-text text-muted\"></span>\n        </span>\n\n        <div class=\"form-item\"\n             cdsRow>\n          <div cdsCol>\n            <button type=\"button\"\n                    cdsButton=\"tertiary\"\n                    class=\"tc_addS3KeyButton\"\n                    (click)=\"showS3KeyModal()\">\n              <ng-container i18n>{{ actionLabels.CREATE | titlecase }}\n                {{ s3keyLabel | upperFirst }}</ng-container>\n              <svg [cdsIcon]=\"icons.add\"\n                   [size]=\"icons.size32\"\n                   class=\"cds--btn__icon\"></svg>\n            </button>\n          </div>\n        </div>\n\n        <hr>\n      </div>\n\n      <!-- Swift keys -->\n      <div class=\"form-item\">\n\n        <h6>Swift</h6>\n        <span *ngIf=\"swiftKeys.length === 0\"\n              class=\"no-border\">\n          <span class=\"form-text text-muted\"\n                i18n>There are no keys.</span>\n        </span>\n\n        <span *ngFor=\"let key of swiftKeys; let i=index;\">\n          <div class=\"form-item-append\"\n               cdsRow>\n            <div cdsCol>\n              <cds-text-label>\n                <input cdsText\n                       [value]=\"key.user\"\n                       readonly>\n              </cds-text-label>\n            </div>\n          <cds-icon-button kind=\"tertiary\"\n                           size=\"md\"\n                           title=\"Show\"\n                           i18n-title\n                           class=\"mt-2 tc_showSwiftKeyButton\"\n                           (click)=\"showSwiftKeyModal(i)\">\n            <svg [cdsIcon]=\"icons.show\"\n                 [size]=\"icons.size16\"\n                 class=\"cds--btn__icon\">\n            </svg>\n          </cds-icon-button>\n          </div>\n        </span>\n      </div>\n    </fieldset>\n\n    <!-- Capabilities -->\n    <fieldset *ngIf=\"editing\">\n\n      <div class=\"form-item\">\n        <legend i18n\n                class=\"cd-header\">Capabilities</legend>\n        <span *ngIf=\"capabilities.length === 0\"\n              class=\"no-border\">\n          <span class=\"form-text text-muted\"\n                i18n>There are no capabilities.</span>\n        </span>\n\n        <span *ngFor=\"let cap of capabilities; let i=index;\">\n          <div class=\"form-item-append\"\n               [ngClass]=\"{'form-item': i > 0}\"\n               cdsRow>\n            <div cdsCol>\n              <cds-text-label i18n>Type\n                <input cdsText\n                       [value]=\"cap.type\"\n                       readonly>\n              </cds-text-label>\n            </div>\n            <div cdsCol>\n              <cds-text-label i18n>Permission\n                <input cdsText\n                       [value]=\"cap.perm\"\n                       readonly>\n              </cds-text-label>\n            </div>\n            <cds-icon-button kind=\"tertiary\"\n                             size=\"md\"\n                             title=\"Edit\"\n                             class=\"mt-4 tc_editCapButton\"\n                             (click)=\"showCapabilityModal(i)\">\n              <svg [cdsIcon]=\"icons.edit\"\n                   [size]=\"icons.size16\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n            <cds-icon-button kind=\"danger\"\n                             size=\"md\"\n                             title=\"Delete\"\n                             class=\"mt-4 tc_deleteCapButton\"\n                             (click)=\"deleteCapability(i)\">\n              <svg [cdsIcon]=\"icons.trash\"\n                   [size]=\"icons.size32\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </div>\n          <span class=\"form-text text-muted\"></span>\n        </span>\n\n        <div class=\"form-item\"\n             cdsRow>\n          <div cdsCol>\n            <button type=\"button\"\n                    class=\"tc_addCapButton\"\n                    cdsButton=\"tertiary\"\n                    [disabled]=\"capabilities | pipeFunction:hasAllCapabilities\"\n                    i18n-ngbTooltip\n                    ngbTooltip=\"All capabilities are already added.\"\n                    [disableTooltip]=\"!(capabilities | pipeFunction:hasAllCapabilities)\"\n                    triggers=\"pointerenter:pointerleave\"\n                    (click)=\"showCapabilityModal()\">\n              <ng-container i18n>{{ actionLabels.ADD | titlecase }}\n                {{ capabilityLabel | upperFirst }}</ng-container>\n              <svg [cdsIcon]=\"icons.add\"\n                   [size]=\"icons.size32\"\n                   class=\"cds--btn__icon\"></svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n\n    <!-- User quota -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend i18n\n                class=\"cd-header\">User quota</legend>\n\n      <!-- Enabled -->\n        <cds-checkbox formControlName=\"user_quota_enabled\"\n                      id=\"user_quota_enabled\"\n                      i18n>Enabled\n        </cds-checkbox>\n      </div>\n\n      <!-- Unlimited size -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.user_quota_enabled.value\">\n        <cds-checkbox formControlName=\"user_quota_max_size_unlimited\"\n                      id=\"user_quota_max_size_unlimited\"\n                      i18n>Unlimited size</cds-checkbox>\n      </div>\n\n      <!-- Maximum size -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.user_quota_enabled.value && !userForm.getValue('user_quota_max_size_unlimited')\">\n        <cds-text-label for=\"user_quota_max_size\"\n                        i18n\n                        cdRequiredField=\"Maximum size\"\n                        [invalid]=\"userForm.controls.user_quota_max_size.invalid && (userForm.controls.user_quota_max_size.dirty)\"\n                        [invalidText]=\"quotaMaxSizeError\">Maximum size\n          <input cdsText\n                 formControlName=\"user_quota_max_size\"\n                 name=\"user_quota_max_size\"\n                 id=\"user_quota_max_size\"\n                 [invalid]=\"userForm.controls.user_quota_max_size.invalid && (userForm.controls.user_quota_max_size.dirty)\"\n                 cdDimlessBinary/>\n        </cds-text-label>\n        <ng-template #quotaMaxSizeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('user_quota_max_size', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('user_quota_max_size', frm, 'quotaMaxSize')\"\n                i18n>The value is not valid.</span>\n          <span *ngIf=\"userForm.showError('user_quota_max_size', formDir, 'pattern')\"\n                class=\"invalid-feedback\"\n                i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n        </ng-template>\n      </div>\n\n      <!-- Unlimited objects -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.user_quota_enabled.value\">\n        <cds-checkbox formControlName=\"user_quota_max_objects_unlimited\"\n                      id=\"user_quota_max_objects_unlimited\"\n                      i18n>Unlimited objects</cds-checkbox>\n      </div>\n\n      <!-- Maximum objects -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.user_quota_enabled.value && !userForm.getValue('user_quota_max_objects_unlimited')\">\n        <cds-number for=\"user_quota_max_objects\"\n                    formControlName=\"user_quota_max_objects\"\n                    id=\"user_quota_max_objects\"\n                    [min]=\"0\"\n                    [invalid]=\"userForm.controls.user_quota_max_objects.invalid && (userForm.controls.user_quota_max_objects.dirty)\"\n                    [invalidText]=\"maxObjectsError\"\n                    label=\"Maximum Objects\"\n                    cdRequiredField=\"Maximum Objects\"></cds-number>\n        <ng-template #maxObjectsError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('user_quota_max_objects', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('user_quota_max_objects', frm, 'min')\"\n                i18n>The entered value must be >= 0.</span>\n        </ng-template>\n      </div>\n    </fieldset>\n\n    <!-- Bucket quota -->\n    <fieldset>\n      <div class=\"form-item\">\n        <legend i18n\n                class=\"cd-header\">Bucket quota</legend>\n\n      <!-- Enabled -->\n        <cds-checkbox formControlName=\"bucket_quota_enabled\"\n                      id=\"bucket_quota_enabled\"\n                      i18n>Enabled</cds-checkbox>\n      </div>\n\n      <!-- Unlimited size -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.bucket_quota_enabled.value\">\n        <cds-checkbox formControlName=\"bucket_quota_max_size_unlimited\"\n                      id=\"bucket_quota_max_size_unlimited\"\n                      i18n>Unlimited size</cds-checkbox>\n      </div>\n\n      <!-- Maximum size -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.bucket_quota_enabled.value && !userForm.getValue('bucket_quota_max_size_unlimited')\">\n        <cds-text-label for=\"bucket_quota_max_size\"\n                        i18n\n                        cdRequiredField=\"Maximum size\"\n                        [invalid]=\"userForm.controls.bucket_quota_max_size.invalid && (userForm.controls.bucket_quota_max_size.dirty)\"\n                        [invalidText]=\"bucketQuotaMaxSizeError\">Maximum size\n          <input cdsText\n                 formControlName=\"bucket_quota_max_size\"\n                 name=\"bucket_quota_max_size\"\n                 id=\"bucket_quota_max_size\"\n                 [invalid]=\"userForm.controls.bucket_quota_max_size.invalid && (userForm.controls.bucket_quota_max_size.dirty)\"\n                 cdDimlessBinary/>\n        </cds-text-label>\n        <ng-template #bucketQuotaMaxSizeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('bucket_quota_max_size', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('bucket_quota_max_size', frm, 'quotaMaxSize')\"\n                i18n>The value is not valid.</span>\n          <span *ngIf=\"userForm.showError('bucket_quota_max_size', formDir, 'pattern')\"\n                class=\"invalid-feedback\"\n                i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n        </ng-template>\n      </div>\n\n      <!-- Unlimited objects -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.bucket_quota_enabled.value\">\n        <cds-checkbox formControlName=\"bucket_quota_max_objects_unlimited\"\n                      id=\"bucket_quota_max_objects_unlimited\"\n                      i18n>Unlimited objects</cds-checkbox>\n      </div>\n\n      <!-- Maximum objects -->\n      <div class=\"form-item\"\n           *ngIf=\"userForm.controls.bucket_quota_enabled.value && !userForm.getValue('bucket_quota_max_objects_unlimited')\">\n        <cds-number for=\"bucket_quota_max_objects\"\n                    formControlName=\"bucket_quota_max_objects\"\n                    id=\"bucket_quota_max_objects\"\n                    [min]=\"0\"\n                    [invalid]=\"userForm.controls.bucket_quota_max_objects.invalid && ( userForm.controls.bucket_quota_max_objects.dirty)\"\n                    [invalidText]=\"bucketMaxObjectsError\"\n                    label=\"Maximum objects\"\n                    cdRequiredField=\"Maximum objects\"></cds-number>\n        <ng-template #bucketMaxObjectsError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('bucket_quota_max_objects', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('bucket_quota_max_objects', frm, 'min')\"\n                i18n>The entered value must be >= 0.</span>\n        </ng-template>\n      </div>\n    </fieldset>\n\n    <!-- Advanced Section -->\n    <cd-form-advanced-fieldset>\n      <!-- User Rate Limit -->\n      <cd-rgw-rate-limit [type]=\"'user'\"\n                         [isEditing]=\"this.editing\"\n                         [id]=\"uid\"\n                         (rateLimitFormGroup)=\"rateLimitFormInit($event)\">\n      </cd-rgw-rate-limit>\n    </cd-form-advanced-fieldset>\n\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"userForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          wrappingClass=\"text-right\"></cd-form-button-panel>\n  </form>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AbstractControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { concat as observableConcat, forkJoin as observableForkJoin, Observable } from 'rxjs';\n\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwUserCapabilities } from '../models/rgw-user-capabilities';\nimport { RgwUserCapability } from '../models/rgw-user-capability';\nimport { RgwUserS3Key } from '../models/rgw-user-s3-key';\nimport { RgwUserSubuser } from '../models/rgw-user-subuser';\nimport { RgwUserSwiftKey } from '../models/rgw-user-swift-key';\nimport { RgwUserCapabilityModalComponent } from '../rgw-user-capability-modal/rgw-user-capability-modal.component';\nimport { RgwUserS3KeyModalComponent } from '../rgw-user-s3-key-modal/rgw-user-s3-key-modal.component';\nimport { RgwUserSubuserModalComponent } from '../rgw-user-subuser-modal/rgw-user-subuser-modal.component';\nimport { RgwUserSwiftKeyModalComponent } from '../rgw-user-swift-key-modal/rgw-user-swift-key-modal.component';\nimport { RgwRateLimitComponent } from '../rgw-rate-limit/rgw-rate-limit.component';\nimport { RgwRateLimitConfig } from '../models/rgw-rate-limit';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { RgwUserAccountsService } from '~/app/shared/api/rgw-user-accounts.service';\nimport { Account } from '../models/rgw-user-accounts';\nimport { ManagedPolicyArnMap, ManagedPolicyName, RGW } from '../utils/constants';\nimport { ComboBoxItem } from '~/app/shared/models/combo-box.model';\n\n@Component({\n  selector: 'cd-rgw-user-form',\n  templateUrl: './rgw-user-form.component.html',\n  styleUrls: ['./rgw-user-form.component.scss']\n})\nexport class RgwUserFormComponent extends CdForm implements OnInit {\n  userForm: CdFormGroup;\n  editing = false;\n  submitObservables: Observable<Object>[] = [];\n  icons = Icons;\n  subusers: RgwUserSubuser[] = [];\n  s3Keys: RgwUserS3Key[] = [];\n  swiftKeys: RgwUserSwiftKey[] = [];\n  capabilities: RgwUserCapability[] = [];\n  uid: string;\n  action: string;\n  resource: string;\n  subuserLabel: string;\n  s3keyLabel: string;\n  capabilityLabel: string;\n  usernameExists: boolean;\n  showTenant = false;\n  previousTenant: string = null;\n  @ViewChild(RgwRateLimitComponent, { static: false }) rateLimitComponent!: RgwRateLimitComponent;\n  accounts: Account[] = [];\n  initialUserPolicies: string[] = [];\n  managedPolicies: ComboBoxItem[] = [\n    {\n      content: ManagedPolicyName.AmazonS3FullAccess,\n      name: ManagedPolicyArnMap[ManagedPolicyName.AmazonS3FullAccess],\n      selected: false\n    },\n    {\n      content: ManagedPolicyName.AmazonS3ReadOnlyAccess,\n      name: ManagedPolicyArnMap[ManagedPolicyName.AmazonS3ReadOnlyAccess],\n      selected: false\n    }\n  ];\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private rgwUserService: RgwUserService,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    public actionLabels: ActionLabelsI18n,\n    private rgwUserAccountService: RgwUserAccountsService\n  ) {\n    super();\n    this.resource = $localize`user`;\n    this.subuserLabel = $localize`subuser`;\n    this.s3keyLabel = $localize`S3 Key`;\n    this.capabilityLabel = $localize`capability`;\n    this.editing = this.router.url.startsWith(`/rgw/user/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.createForm();\n  }\n\n  createForm() {\n    this.userForm = this.formBuilder.group({\n      // General\n      user_id: [\n        null,\n        [Validators.required, Validators.pattern(/^[a-zA-Z0-9!@#%^&*()._-]+$/)],\n        this.editing\n          ? []\n          : [\n              CdValidators.unique(this.rgwUserService.exists, this.rgwUserService, () =>\n                this.userForm.getValue('tenant')\n              )\n            ]\n      ],\n      show_tenant: [this.editing],\n      tenant: [\n        null,\n        [Validators.pattern(/^[a-zA-Z0-9_]+$/)],\n        this.editing\n          ? []\n          : [\n              CdValidators.unique(\n                this.rgwUserService.exists,\n                this.rgwUserService,\n                () => this.userForm.getValue('user_id'),\n                true\n              )\n            ]\n      ],\n      display_name: [\n        null,\n        [Validators.required, Validators.pattern(/^[a-zA-Z0-9!@#%^&*()._ -]+$/)]\n      ],\n      email: [\n        null,\n        [CdValidators.email],\n        [CdValidators.unique(this.rgwUserService.emailExists, this.rgwUserService)]\n      ],\n      account_id: [null, [this.tenantedAccountValidator.bind(this)]],\n      account_root_user: [false],\n      account_policies: [[]],\n      max_buckets_mode: [1],\n      max_buckets: [\n        1000,\n        [CdValidators.requiredIf({ max_buckets_mode: '1' }), CdValidators.number(false)]\n      ],\n      system: [false],\n      suspended: [false],\n      // S3 key\n      generate_key: [true],\n      access_key: [null, [CdValidators.requiredIf({ generate_key: false })]],\n      secret_key: [null, [CdValidators.requiredIf({ generate_key: false })]],\n      // User quota\n      user_quota_enabled: [false],\n      user_quota_max_size_unlimited: [true],\n      user_quota_max_size: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              user_quota_enabled: true,\n              user_quota_max_size_unlimited: false\n            },\n            [Validators.required, this.quotaMaxSizeValidator]\n          )\n        ]\n      ],\n      user_quota_max_objects_unlimited: [true],\n      user_quota_max_objects: [\n        null,\n        [\n          CdValidators.requiredIf({\n            user_quota_enabled: true,\n            user_quota_max_objects_unlimited: false\n          })\n        ]\n      ],\n      // Bucket quota\n      bucket_quota_enabled: [false],\n      bucket_quota_max_size_unlimited: [true],\n      bucket_quota_max_size: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              bucket_quota_enabled: true,\n              bucket_quota_max_size_unlimited: false\n            },\n            [Validators.required, this.quotaMaxSizeValidator]\n          )\n        ]\n      ],\n      bucket_quota_max_objects_unlimited: [true],\n      bucket_quota_max_objects: [\n        null,\n        [\n          CdValidators.requiredIf({\n            bucket_quota_enabled: true,\n            bucket_quota_max_objects_unlimited: false\n          })\n        ]\n      ]\n    });\n  }\n\n  ngOnInit() {\n    // Process route parameters.\n    this.route.params.subscribe((params: { uid: string }) => {\n      if (!params.hasOwnProperty('uid')) {\n        return;\n      }\n      const uid = decodeURIComponent(params.uid);\n      // Load the user and quota information.\n      const observables = [];\n      observables.push(this.rgwUserService.get(uid));\n      observables.push(this.rgwUserService.getQuota(uid));\n      observables.push(this.rgwUserService.getUserRateLimit(uid));\n      observableForkJoin(observables).subscribe(\n        (resp: any[]) => {\n          // Get the default values.\n          const defaults = _.clone(this.userForm.value);\n          // Extract the values displayed in the form.\n          let value = _.pick(resp[0], _.keys(this.userForm.value));\n          // Map the max. buckets values.\n          switch (value['max_buckets']) {\n            case -1:\n              value['max_buckets_mode'] = -1;\n              value['max_buckets'] = '';\n              break;\n            case 0:\n              value['max_buckets_mode'] = 0;\n              value['max_buckets'] = '';\n              break;\n            default:\n              value['max_buckets_mode'] = 1;\n              break;\n          }\n          // Map the quota values.\n          ['user', 'bucket'].forEach((type) => {\n            const quota = resp[1][type + '_quota'];\n            value[type + '_quota_enabled'] = quota.enabled;\n            if (quota.max_size < 0) {\n              value[type + '_quota_max_size_unlimited'] = true;\n              value[type + '_quota_max_size'] = null;\n            } else {\n              value[type + '_quota_max_size_unlimited'] = false;\n              value[type + '_quota_max_size'] = `${quota.max_size} B`;\n            }\n            if (quota.max_objects < 0) {\n              value[type + '_quota_max_objects_unlimited'] = true;\n              value[type + '_quota_max_objects'] = null;\n            } else {\n              value[type + '_quota_max_objects_unlimited'] = false;\n              value[type + '_quota_max_objects'] = quota.max_objects;\n            }\n          });\n\n          // Merge with default values.\n          value = _.merge(defaults, value);\n          // Update the form.\n          this.userForm.setValue(value);\n\n          if (this.userForm.getValue('account_id')) {\n            this.userForm.get('account_id').disable();\n          } else {\n            this.userForm.get('account_id').setValue(null);\n          }\n          const isAccountRoot: boolean = resp[0]['type'] !== RGW;\n          this.userForm.get('account_root_user').setValue(isAccountRoot);\n          // Get the sub users.\n          this.subusers = resp[0].subusers;\n\n          // Get the keys.\n          this.s3Keys = resp[0].keys;\n          this.swiftKeys = resp[0].swift_keys;\n\n          // Process the capabilities.\n          const mapPerm = { 'read, write': '*' };\n          resp[0].caps.forEach((cap: any) => {\n            if (cap.perm in mapPerm) {\n              cap.perm = mapPerm[cap.perm];\n            }\n          });\n          this.capabilities = resp[0].caps;\n          this.uid = this.getUID();\n          this.initialUserPolicies = resp[0].managed_user_policies ?? [];\n\n          this.managedPolicies.forEach((policy) => {\n            policy.selected = this.initialUserPolicies.includes(policy.name);\n          });\n\n          // Optionally, update form control with selected items\n          const selectedItems = this.managedPolicies.filter((p) => p.selected).map((p) => p.name);\n          this.userForm.get('account_policies')?.setValue(selectedItems);\n        },\n        () => {\n          this.loadingError();\n        }\n      );\n    });\n    this.rgwUserAccountService.list(true).subscribe(\n      (accounts: Account[]) => {\n        this.accounts = accounts;\n        if (!this.editing) {\n          // needed to disable checkbox on create form load\n          this.userForm.get('account_id').reset();\n        }\n        this.loadingReady();\n      },\n      () => {\n        this.loadingError();\n      }\n    );\n    this.userForm.get('account_id').valueChanges.subscribe((value) => {\n      if (!value) {\n        this.userForm\n          .get('display_name')\n          .setValidators([Validators.pattern(/^[a-zA-Z0-9!@#%^&*()._ -]+$/), Validators.required]);\n        this.userForm.get('display_name').updateValueAndValidity();\n        this.userForm.get('account_root_user').disable();\n      } else {\n        this.userForm\n          .get('display_name')\n          .setValidators([Validators.pattern(/^[\\w+=,.@-]+$/), Validators.required]);\n        this.userForm.get('display_name').updateValueAndValidity();\n        this.userForm.get('account_root_user').enable();\n      }\n    });\n  }\n\n  multiSelector(event: ComboBoxItem[]) {\n    this.managedPolicies.forEach((policy) => {\n      policy.selected = !!event.find((selected) => selected.name === policy.name);\n    });\n  }\n\n  tenantedAccountValidator(control: AbstractControl): ValidationErrors | null {\n    if (this?.userForm?.getValue('tenant') && this.accounts.length > 0) {\n      const index: number = this.accounts.findIndex(\n        (account: Account) => account.id === control.value\n      );\n      if (index !== -1) {\n        return this.userForm.getValue('tenant') !== this.accounts[index].tenant\n          ? { tenantedAccount: true }\n          : null;\n      }\n    }\n    return null;\n  }\n\n  rateLimitFormInit(rateLimitForm: FormGroup) {\n    this.userForm.addControl('rateLimit', rateLimitForm);\n  }\n\n  goToListView() {\n    this.router.navigate(['/rgw/user']);\n  }\n\n  onSubmit() {\n    this.uid = this.getUID();\n    let notificationTitle: string;\n    // Exit immediately if the form isn't dirty.\n    if (this.userForm.pristine && this.rateLimitComponent.form.pristine) {\n      this.goToListView();\n      return;\n    }\n    if (this.editing) {\n      // Edit\n      if (this._isGeneralDirty()) {\n        const args = this._getUpdateArgs();\n        this.submitObservables.push(this.rgwUserService.update(this.uid, args));\n      }\n      notificationTitle = $localize`Updated Object Gateway user '${this.uid}'`;\n    } else {\n      // Add\n      const args = this._getCreateArgs();\n      this.submitObservables.push(this.rgwUserService.create(args));\n      notificationTitle = $localize`Created Object Gateway user '${this.uid}'`;\n    }\n    // Check if user quota has been modified.\n    if (this._isUserQuotaDirty()) {\n      const userQuotaArgs = this._getUserQuotaArgs();\n      this.submitObservables.push(this.rgwUserService.updateQuota(this.uid, userQuotaArgs));\n    }\n    // Check if bucket quota has been modified.\n    if (this._isBucketQuotaDirty()) {\n      const bucketQuotaArgs = this._getBucketQuotaArgs();\n      this.submitObservables.push(this.rgwUserService.updateQuota(this.uid, bucketQuotaArgs));\n    }\n\n    // Check if user ratelimit has been modified.\n    const ratelimitvalue: RgwRateLimitConfig = this.rateLimitComponent.getRateLimitFormValue();\n    if (!!ratelimitvalue) {\n      this.submitObservables.push(\n        this.rgwUserService.updateUserRateLimit(this.userForm.getValue('user_id'), ratelimitvalue)\n      );\n    }\n    // Finally execute all observables one by one in serial.\n    observableConcat(...this.submitObservables).subscribe({\n      error: () => {\n        // Reset the 'Submit' button.\n        this.userForm.setErrors({ cdSubmitButton: true });\n      },\n      complete: () => {\n        this.notificationService.show(NotificationType.success, notificationTitle);\n        this.goToListView();\n      }\n    });\n  }\n\n  updateFieldsWhenTenanted() {\n    this.showTenant = this.userForm.getValue('show_tenant');\n    if (!this.showTenant) {\n      this.userForm.get('user_id').markAsUntouched();\n      this.userForm.get('tenant').patchValue(this.previousTenant);\n    } else {\n      this.userForm.get('user_id').markAsTouched();\n      this.previousTenant = this.userForm.get('tenant').value;\n      this.userForm.get('tenant').patchValue(null);\n    }\n  }\n\n  getUID(): string {\n    let uid = this.userForm.getValue('user_id');\n    const tenant = this.userForm?.getValue('tenant');\n    if (tenant && tenant.length > 0) {\n      uid = `${this.userForm.getValue('tenant')}$${uid}`;\n    }\n    return uid;\n  }\n\n  /**\n   * Validate the quota maximum size, e.g. 1096, 1K, 30M or 1.9MiB.\n   */\n  quotaMaxSizeValidator(control: AbstractControl): ValidationErrors | null {\n    return new FormatterService().performValidation(\n      control,\n      '^(\\\\d+(\\\\.\\\\d+)?)\\\\s*(B|K(B|iB)?|M(B|iB)?|G(B|iB)?|T(B|iB)?)?$',\n      { quotaMaxSize: true },\n      'quota'\n    );\n  }\n\n  /**\n   * Add/Update a subuser.\n   */\n  setSubuser(subuser: RgwUserSubuser, index?: number) {\n    const mapPermissions: Record<string, string> = {\n      'full-control': 'full',\n      'read-write': 'readwrite'\n    };\n    const uid = this.getUID();\n    const args = {\n      subuser: subuser.id,\n      access:\n        subuser.permissions in mapPermissions\n          ? mapPermissions[subuser.permissions]\n          : subuser.permissions,\n      key_type: 'swift',\n      secret_key: subuser.secret_key,\n      generate_secret: subuser.generate_secret ? 'true' : 'false'\n    };\n    this.submitObservables.push(this.rgwUserService.createSubuser(uid, args));\n    if (_.isNumber(index)) {\n      // Modify\n      // Create an observable to modify the subuser when the form is submitted.\n      this.subusers[index] = subuser;\n    } else {\n      // Add\n      // Create an observable to add the subuser when the form is submitted.\n      this.subusers.push(subuser);\n      // Add a Swift key. If the secret key is auto-generated, then visualize\n      // this to the user by displaying a notification instead of the key.\n      this.swiftKeys.push({\n        user: subuser.id,\n        secret_key: subuser.generate_secret ? 'Apply your changes first...' : subuser.secret_key\n      });\n    }\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  /**\n   * Delete a subuser.\n   * @param {number} index The subuser to delete.\n   */\n  deleteSubuser(index: number) {\n    const subuser = this.subusers[index];\n    // Create an observable to delete the subuser when the form is submitted.\n    this.submitObservables.push(this.rgwUserService.deleteSubuser(this.getUID(), subuser.id));\n    // Remove the associated S3 keys.\n    this.s3Keys = this.s3Keys.filter((key) => {\n      return key.user !== subuser.id;\n    });\n    // Remove the associated Swift keys.\n    this.swiftKeys = this.swiftKeys.filter((key) => {\n      return key.user !== subuser.id;\n    });\n    // Remove the subuser to update the UI.\n    this.subusers.splice(index, 1);\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  /**\n   * Add/Update a capability.\n   */\n  setCapability(cap: RgwUserCapability, index?: number) {\n    const uid = this.getUID();\n    if (_.isNumber(index)) {\n      // Modify\n      const oldCap = this.capabilities[index];\n      // Note, the RadosGW Admin OPS API does not support the modification of\n      // user capabilities. Because of that it is necessary to delete it and\n      // then to re-add the capability with its new value/permission.\n      this.submitObservables.push(\n        this.rgwUserService.deleteCapability(uid, oldCap.type, oldCap.perm)\n      );\n      this.submitObservables.push(this.rgwUserService.addCapability(uid, cap.type, cap.perm));\n      this.capabilities[index] = cap;\n    } else {\n      // Add\n      // Create an observable to add the capability when the form is submitted.\n      this.submitObservables.push(this.rgwUserService.addCapability(uid, cap.type, cap.perm));\n      this.capabilities = [...this.capabilities, cap]; // Notify Angular CD\n    }\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  /**\n   * Delete the given capability:\n   * - Delete it from the local array to update the UI\n   * - Create an observable that will be executed on form submit\n   * @param {number} index The capability to delete.\n   */\n  deleteCapability(index: number) {\n    const cap = this.capabilities[index];\n    // Create an observable to delete the capability when the form is submitted.\n    this.submitObservables.push(\n      this.rgwUserService.deleteCapability(this.getUID(), cap.type, cap.perm)\n    );\n    // Remove the capability to update the UI.\n    this.capabilities.splice(index, 1);\n    this.capabilities = [...this.capabilities]; // Notify Angular CD\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  hasAllCapabilities(capabilities: RgwUserCapability[]) {\n    return !_.difference(RgwUserCapabilities.getAll(), _.map(capabilities, 'type')).length;\n  }\n\n  /**\n   * Add/Update a S3 key.\n   */\n  setS3Key(key: RgwUserS3Key, index?: number) {\n    if (_.isNumber(index)) {\n      // Modify\n      // Nothing to do here at the moment.\n    } else {\n      // Add\n      // Split the key's user name into its user and subuser parts.\n      const userMatches = key.user.match(/([^:]+)(:(.+))?/);\n      // Create an observable to add the S3 key when the form is submitted.\n      const uid = userMatches[1];\n      const args = {\n        subuser: userMatches[2] ? userMatches[3] : '',\n        generate_key: key.generate_key ? 'true' : 'false'\n      };\n      if (args['generate_key'] === 'false') {\n        if (!_.isNil(key.access_key)) {\n          args['access_key'] = key.access_key;\n        }\n        if (!_.isNil(key.secret_key)) {\n          args['secret_key'] = key.secret_key;\n        }\n      }\n      this.submitObservables.push(this.rgwUserService.addS3Key(uid, args));\n      // If the access and the secret key are auto-generated, then visualize\n      // this to the user by displaying a notification instead of the key.\n      this.s3Keys.push({\n        user: key.user,\n        access_key: key.generate_key ? 'Apply your changes first...' : key.access_key,\n        secret_key: key.generate_key ? 'Apply your changes first...' : key.secret_key\n      });\n    }\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  /**\n   * Delete a S3 key.\n   * @param {number} index The S3 key to delete.\n   */\n  deleteS3Key(index: number) {\n    const key = this.s3Keys[index];\n    // Create an observable to delete the S3 key when the form is submitted.\n    this.submitObservables.push(this.rgwUserService.deleteS3Key(this.getUID(), key.access_key));\n    // Remove the S3 key to update the UI.\n    this.s3Keys.splice(index, 1);\n    // Mark the form as dirty to be able to submit it.\n    this.userForm.markAsDirty();\n  }\n\n  /**\n   * Show the specified subuser in a modal dialog.\n   * @param {number | undefined} index The subuser to show.\n   */\n  showSubuserModal(index?: number) {\n    const uid = this.getUID();\n    const modalRef = this.modalService.show(RgwUserSubuserModalComponent);\n    if (_.isNumber(index)) {\n      // Edit\n      const subuser = this.subusers[index];\n      modalRef.setEditing();\n      modalRef.setValues(uid, subuser.id, subuser.permissions);\n    } else {\n      // Add\n      modalRef.setEditing(false);\n      modalRef.setValues(uid);\n      modalRef.setSubusers(this.subusers);\n    }\n    modalRef.submitAction.subscribe((subuser: RgwUserSubuser) => {\n      this.setSubuser(subuser, index);\n    });\n  }\n\n  /**\n   * Show the specified S3 key in a modal dialog.\n   * @param {number | undefined} index The S3 key to show.\n   */\n  showS3KeyModal(index?: number) {\n    const modalRef = this.modalService.show(RgwUserS3KeyModalComponent);\n    if (_.isNumber(index)) {\n      // View\n      const key = this.s3Keys[index];\n      modalRef.setViewing();\n      modalRef.setValues(key.user, key.access_key, key.secret_key);\n    } else {\n      // Add\n      const candidates = this._getS3KeyUserCandidates();\n      modalRef.setViewing(false);\n      modalRef.setUserCandidates(candidates);\n      modalRef.submitAction.subscribe((key: RgwUserS3Key) => {\n        this.setS3Key(key);\n      });\n    }\n  }\n\n  /**\n   * Show the specified Swift key in a modal dialog.\n   * @param {number} index The Swift key to show.\n   */\n  showSwiftKeyModal(index: number) {\n    const modalRef = this.modalService.show(RgwUserSwiftKeyModalComponent);\n    const key = this.swiftKeys[index];\n    modalRef.setValues(key.user, key.secret_key);\n  }\n\n  /**\n   * Show the specified capability in a modal dialog.\n   * @param {number | undefined} index The S3 key to show.\n   */\n  showCapabilityModal(index?: number) {\n    const modalRef = this.modalService.show(RgwUserCapabilityModalComponent);\n    if (_.isNumber(index)) {\n      // Edit\n      const cap = this.capabilities[index];\n      modalRef.setEditing();\n      modalRef.setValues(cap.type, cap.perm);\n    } else {\n      // Add\n      modalRef.setEditing(false);\n      modalRef.setCapabilities(this.capabilities);\n    }\n    modalRef.submitAction.subscribe((cap: RgwUserCapability) => {\n      this.setCapability(cap, index);\n    });\n  }\n\n  /**\n   * Check if the general user settings (display name, email, ...) have been modified.\n   * @return {Boolean} Returns TRUE if the general user settings have been modified.\n   */\n  private _isGeneralDirty(): boolean {\n    return [\n      'display_name',\n      'email',\n      'max_buckets_mode',\n      'max_buckets',\n      'system',\n      'suspended',\n      'account_id',\n      'account_root_user',\n      'account_policies'\n    ].some((path) => {\n      return this.userForm.get(path).dirty;\n    });\n  }\n\n  /**\n   * Check if the user quota has been modified.\n   * @return {Boolean} Returns TRUE if the user quota has been modified.\n   */\n  private _isUserQuotaDirty(): boolean {\n    return [\n      'user_quota_enabled',\n      'user_quota_max_size_unlimited',\n      'user_quota_max_size',\n      'user_quota_max_objects_unlimited',\n      'user_quota_max_objects'\n    ].some((path) => {\n      return this.userForm.get(path).dirty;\n    });\n  }\n\n  /**\n   * Check if the bucket quota has been modified.\n   * @return {Boolean} Returns TRUE if the bucket quota has been modified.\n   */\n  private _isBucketQuotaDirty(): boolean {\n    return [\n      'bucket_quota_enabled',\n      'bucket_quota_max_size_unlimited',\n      'bucket_quota_max_size',\n      'bucket_quota_max_objects_unlimited',\n      'bucket_quota_max_objects'\n    ].some((path) => {\n      return this.userForm.get(path).dirty;\n    });\n  }\n\n  /**\n   * Helper function to get the arguments of the API request when a new\n   * user is created.\n   */\n  private _getCreateArgs() {\n    const result = {\n      uid: this.getUID(),\n      display_name: this.userForm.getValue('display_name'),\n      system: this.userForm.getValue('system'),\n      suspended: this.userForm.getValue('suspended'),\n      email: '',\n      max_buckets: this.userForm.getValue('max_buckets'),\n      generate_key: this.userForm.getValue('generate_key'),\n      access_key: '',\n      secret_key: ''\n    };\n    const email = this.userForm.getValue('email');\n    if (_.isString(email) && email.length > 0) {\n      _.merge(result, { email: email });\n    }\n    const generateKey = this.userForm.getValue('generate_key');\n    if (!generateKey) {\n      _.merge(result, {\n        generate_key: false,\n        access_key: this.userForm.getValue('access_key'),\n        secret_key: this.userForm.getValue('secret_key')\n      });\n    }\n    const maxBucketsMode = parseInt(this.userForm.getValue('max_buckets_mode'), 10);\n    if (_.includes([-1, 0], maxBucketsMode)) {\n      // -1 => Disable bucket creation.\n      //  0 => Unlimited bucket creation.\n      _.merge(result, { max_buckets: maxBucketsMode });\n    }\n    if (this.userForm.getValue('account_id')) {\n      _.merge(result, {\n        account_id: this.userForm.getValue('account_id'),\n        account_root_user: this.userForm.getValue('account_root_user')\n      });\n    }\n    const accountPolicies = this._getAccountManagedPolicies();\n    if (this.userForm.getValue('account_id') && !this.userForm.getValue('account_root_user')) {\n      _.merge(result, { account_policies: accountPolicies });\n    }\n    return result;\n  }\n\n  /**\n   * Helper function to get the arguments for the API request when the user\n   * configuration has been modified.\n   */\n  private _getUpdateArgs() {\n    const result: Record<string, any> = {};\n    const keys = ['display_name', 'email', 'max_buckets', 'system', 'suspended'];\n    for (const key of keys) {\n      result[key] = this.userForm.getValue(key);\n    }\n    if (this.userForm.getValue('account_id')) {\n      result['account_id'] = this.userForm.getValue('account_id');\n      result['account_root_user'] = this.userForm.getValue('account_root_user');\n    }\n    const maxBucketsMode = parseInt(this.userForm.getValue('max_buckets_mode'), 10);\n    if (_.includes([-1, 0], maxBucketsMode)) {\n      // -1 => Disable bucket creation.\n      //  0 => Unlimited bucket creation.\n      result['max_buckets'] = maxBucketsMode;\n    }\n    const accountPolicies = this._getAccountManagedPolicies();\n    if (this.userForm.getValue('account_id') && !this.userForm.getValue('account_root_user')) {\n      result['account_policies'] = accountPolicies;\n    }\n    return result;\n  }\n\n  /**\n   * Helper function to get the arguments for the API request when the user\n   * quota configuration has been modified.\n   */\n  _getUserQuotaArgs(): Record<string, any> {\n    const result = {\n      quota_type: 'user',\n      enabled: this.userForm.getValue('user_quota_enabled'),\n      max_size_kb: -1,\n      max_objects: -1\n    };\n    if (!this.userForm.getValue('user_quota_max_size_unlimited')) {\n      // Convert the given value to bytes.\n      const bytes = new FormatterService().toBytes(this.userForm.getValue('user_quota_max_size'));\n      // Finally convert the value to KiB.\n      result['max_size_kb'] = (bytes / 1024).toFixed(0) as any;\n    }\n    if (!this.userForm.getValue('user_quota_max_objects_unlimited')) {\n      result['max_objects'] = this.userForm.getValue('user_quota_max_objects');\n    }\n    return result;\n  }\n\n  /**\n   * Helper function to get the arguments for the API request when the bucket\n   * quota configuration has been modified.\n   */\n  private _getBucketQuotaArgs(): Record<string, any> {\n    const result = {\n      quota_type: 'bucket',\n      enabled: this.userForm.getValue('bucket_quota_enabled'),\n      max_size_kb: -1,\n      max_objects: -1\n    };\n    if (!this.userForm.getValue('bucket_quota_max_size_unlimited')) {\n      // Convert the given value to bytes.\n      const bytes = new FormatterService().toBytes(this.userForm.getValue('bucket_quota_max_size'));\n      // Finally convert the value to KiB.\n      result['max_size_kb'] = (bytes / 1024).toFixed(0) as any;\n    }\n    if (!this.userForm.getValue('bucket_quota_max_objects_unlimited')) {\n      result['max_objects'] = this.userForm.getValue('bucket_quota_max_objects');\n    }\n    return result;\n  }\n\n  /**\n   * Helper method to get the user candidates for S3 keys.\n   * @returns {Array} Returns a list of user identifiers.\n   */\n  private _getS3KeyUserCandidates() {\n    let result = [];\n    // Add the current user id.\n    const uid = this.getUID();\n    if (_.isString(uid) && !_.isEmpty(uid)) {\n      result.push(uid);\n    }\n    // Append the subusers.\n    this.subusers.forEach((subUser) => {\n      result.push(subUser.id);\n    });\n    // Note that it's possible to create multiple S3 key pairs for a user,\n    // thus we append already configured users, too.\n    this.s3Keys.forEach((key) => {\n      result.push(key.user);\n    });\n    result = _.uniq(result);\n    return result;\n  }\n\n  /**\n   * Get the account managed policies to attach/detach.\n   * @returns {Object} Returns an object with attach and detach arrays.\n   */\n  private _getAccountManagedPolicies() {\n    const selectedPolicies = this.managedPolicies.filter((p) => p.selected).map((p) => p.name);\n\n    const initialPolicies = this.initialUserPolicies;\n    const toAttach = selectedPolicies.filter((p) => !initialPolicies.includes(p));\n    const toDetach = initialPolicies.filter((p) => !selectedPolicies.includes(p));\n\n    const payload = {\n      attach: toAttach,\n      detach: toDetach\n    };\n\n    return payload;\n  }\n\n  onMaxBucketsModeChange(mode: string) {\n    if (mode === '1') {\n      // If 'Custom' mode is selected, then ensure that the form field\n      // 'Max. buckets' contains a valid value. Set it to default if\n      // necessary.\n      if (!this.userForm.get('max_buckets').valid) {\n        this.userForm.patchValue({\n          max_buckets: 1000\n        });\n      }\n    }\n  }\n\n  goToCreateAccountForm() {\n    this.router.navigate(['rgw/accounts/create']);\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <div *ngIf=\"user\">\n    <div *ngIf=\"keys.length\">\n      <legend i18n>Keys</legend>\n      <cd-table\n        [data]=\"keys\"\n        [columns]=\"keysColumns\"\n        columnMode=\"flex\"\n        selectionType=\"single\"\n        forceIdentifier=\"true\"\n        (updateSelection)=\"updateKeysSelection($event)\"\n      >\n        <cd-table-actions\n          class=\"table-actions\"\n          [permission]=\"{ read: true }\"\n          [selection]=\"selection\"\n          [tableActions]=\"tableAction\"\n        ></cd-table-actions>\n      </cd-table>\n    </div>\n\n    <legend i18n>Details</legend>\n    <table\n      class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n    >\n      <tbody>\n        <tr>\n          <td i18n\n              class=\"bold w-25\">Tenant</td>\n          <td class=\"w-75\">{{ user.tenant }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold w-25\">User ID</td>\n          <td class=\"w-75\">{{ user.uid }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold w-25\">Username</td>\n          <td class=\"w-75\">{{ user.uid }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold\">Full name</td>\n          <td>{{ user.display_name }}</td>\n        </tr>\n        <tr *ngIf=\"user.email?.length\">\n          <td i18n\n              class=\"bold\">Email address</td>\n          <td>{{ user.email }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold\">Suspended</td>\n          <td>{{ user.suspended | booleanText }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold\">System user</td>\n          <td>{{ user.system | booleanText }}</td>\n        </tr>\n        <tr>\n          <td i18n\n              class=\"bold\">Maximum buckets</td>\n          <td>{{ user.max_buckets | map: maxBucketsMap }}</td>\n        </tr>\n        @if (user.type === 'rgw' && selection.account?.id){\n        <tr>\n          <td i18n\n              class=\"bold\">Managed policies</td>\n          <td i18n>{{ extractPolicyNamesFromArns(user.managed_user_policies) }}</td>\n        </tr>\n        }\n        <tr *ngIf=\"user.subusers && user.subusers.length\">\n          <td i18n\n              class=\"bold\">Subusers</td>\n          <td>\n            <div *ngFor=\"let subuser of user.subusers\">\n              {{ subuser.id }} ({{ subuser.permissions }})\n            </div>\n          </td>\n        </tr>\n        <tr *ngIf=\"user.caps && user.caps.length\">\n          <td i18n\n              class=\"bold\">Capabilities</td>\n          <td>\n            <div *ngFor=\"let cap of user.caps\">{{ cap.type }} ({{ cap.perm }})</div>\n          </td>\n        </tr>\n        <tr *ngIf=\"user.mfa_ids?.length\">\n          <td i18n\n              class=\"bold\">MFAs(Id)</td>\n          <td>{{ user.mfa_ids | join }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <ng-container *ngIf=\"selection.account && selection.account?.id\">\n      <legend i18n>Account Details</legend>\n      <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n             id=\"accountsDetails\">\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Account ID</td>\n            <td class=\"w-75\">{{ selection.account?.id }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Name</td>\n            <td class=\"w-75\">{{ selection.account?.name }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Tenant</td>\n            <td class=\"w-75\">{{ selection.account?.tenant || '-'}}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">User type</td>\n            <td class=\"w-75\"\n                i18n>{{ user?.type === 'root' ? 'Account root user' : 'rgw user' }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n\n    <!-- User quota -->\n    <div *ngIf=\"user.user_quota\">\n      <legend i18n>User quota</legend>\n      <table\n        class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n      >\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Enabled</td>\n            <td class=\"w-75\">{{ user.user_quota.enabled | booleanText }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Maximum size</td>\n            <td *ngIf=\"!user.user_quota.enabled\">-</td>\n            <td *ngIf=\"user.user_quota.enabled && user.user_quota.max_size <= -1\"\n                i18n>\n              Unlimited\n            </td>\n            <td *ngIf=\"user.user_quota.enabled && user.user_quota.max_size > -1\">\n              {{ user.user_quota.max_size | dimlessBinary }}\n            </td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Maximum objects</td>\n            <td *ngIf=\"!user.user_quota.enabled\">-</td>\n            <td *ngIf=\"user.user_quota.enabled && user.user_quota.max_objects <= -1\"\n                i18n>\n              Unlimited\n            </td>\n            <td *ngIf=\"user.user_quota.enabled && user.user_quota.max_objects > -1\">\n              {{ user.user_quota.max_objects }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Bucket quota -->\n    <div *ngIf=\"user.bucket_quota\">\n      <legend i18n>Bucket quota</legend>\n      <table\n        class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n      >\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Enabled</td>\n            <td class=\"w-75\">{{ user.bucket_quota.enabled | booleanText }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Maximum size</td>\n            <td *ngIf=\"!user.bucket_quota.enabled\">-</td>\n            <td *ngIf=\"user.bucket_quota.enabled && user.bucket_quota.max_size <= -1\"\n                i18n>\n              Unlimited\n            </td>\n            <td *ngIf=\"user.bucket_quota.enabled && user.bucket_quota.max_size > -1\">\n              {{ user.bucket_quota.max_size | dimlessBinary }}\n            </td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Maximum objects</td>\n            <td *ngIf=\"!user.bucket_quota.enabled\">-</td>\n            <td *ngIf=\"user.bucket_quota.enabled && user.bucket_quota.max_objects <= -1\"\n                i18n>\n              Unlimited\n            </td>\n            <td *ngIf=\"user.bucket_quota.enabled && user.bucket_quota.max_objects > -1\">\n              {{ user.bucket_quota.max_objects }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <!-- User Rate Limit -->\n    <div *ngIf=\"user.user_ratelimit\">\n      <cd-rgw-rate-limit-details\n        [rateLimitConfig]=\"user.user_ratelimit\"\n        [type]=\"'user'\"\n      ></cd-rgw-rate-limit-details>\n    </div>\n  </div>\n</ng-container>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { RgwUserS3Key } from '../models/rgw-user-s3-key';\nimport { RgwUserSwiftKey } from '../models/rgw-user-swift-key';\nimport { RgwUserS3KeyModalComponent } from '../rgw-user-s3-key-modal/rgw-user-s3-key-modal.component';\nimport { RgwUserSwiftKeyModalComponent } from '../rgw-user-swift-key-modal/rgw-user-swift-key-modal.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { RgwRateLimitConfig } from '../models/rgw-rate-limit';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-rgw-user-details',\n  templateUrl: './rgw-user-details.component.html',\n  styleUrls: ['./rgw-user-details.component.scss']\n})\nexport class RgwUserDetailsComponent implements OnChanges, OnInit {\n  @ViewChild('accessKeyTpl')\n  public accessKeyTpl: TemplateRef<any>;\n  @ViewChild('secretKeyTpl')\n  public secretKeyTpl: TemplateRef<any>;\n\n  @Input()\n  selection: any;\n\n  // Details tab\n  user: any;\n  maxBucketsMap: {};\n\n  // Keys tab\n  keys: any = [];\n  keysColumns: CdTableColumn[] = [];\n  keysSelection: CdTableSelection = new CdTableSelection();\n  tableAction: CdTableAction[] = [];\n  permissions: Permissions;\n\n  icons = Icons;\n\n  constructor(private rgwUserService: RgwUserService, private cdsModalService: ModalCdsService) {}\n\n  ngOnInit() {\n    this.keysColumns = [\n      {\n        name: $localize`Username`,\n        prop: 'username',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Type`,\n        prop: 'type',\n        flexGrow: 1\n      }\n    ];\n    this.maxBucketsMap = {\n      '-1': $localize`Disabled`,\n      0: $localize`Unlimited`\n    };\n  }\n\n  ngOnChanges() {\n    this.tableAction = [\n      {\n        name: $localize`Show`,\n        permission: 'read',\n        click: () => this.showKeyModal(),\n        icon: Icons.show\n      }\n    ];\n\n    if (this.selection) {\n      this.user = this.selection;\n\n      // Sort subusers and capabilities.\n      this.user.subusers = _.sortBy(this.user.subusers, 'id');\n      this.user.caps = _.sortBy(this.user.caps, 'type');\n\n      // Load the user/bucket quota of the selected user.\n      this.rgwUserService.getQuota(this.user.uid).subscribe((resp: object) => {\n        _.extend(this.user, resp);\n      });\n\n      // Load the user rate limit of the selected user.\n      this.rgwUserService.getUserRateLimit(this.user.uid).subscribe((resp: RgwRateLimitConfig) => {\n        _.extend(this.user, resp);\n      });\n\n      // Process the keys.\n      this.keys = [];\n      if (this.user.keys) {\n        this.user.keys.forEach((key: RgwUserS3Key) => {\n          this.keys.push({\n            id: this.keys.length + 1, // Create an unique identifier\n            type: 'S3',\n            username: key.user,\n            ref: key\n          });\n        });\n      }\n      if (this.user.swift_keys) {\n        this.user.swift_keys.forEach((key: RgwUserSwiftKey) => {\n          this.keys.push({\n            id: this.keys.length + 1, // Create an unique identifier\n            type: 'Swift',\n            username: key.user,\n            ref: key\n          });\n        });\n      }\n\n      this.keys = _.sortBy(this.keys, 'user');\n    }\n  }\n\n  updateKeysSelection(selection: CdTableSelection) {\n    this.keysSelection = selection;\n  }\n\n  showKeyModal() {\n    const key = this.keysSelection.first();\n    const modalRef = this.cdsModalService.show(\n      key.type === 'S3' ? RgwUserS3KeyModalComponent : RgwUserSwiftKeyModalComponent\n    );\n    switch (key.type) {\n      case 'S3':\n        modalRef.setViewing();\n        modalRef.setValues(key.ref.user, key.ref.access_key, key.ref.secret_key);\n        break;\n      case 'Swift':\n        modalRef.setValues(key.ref.user, key.ref.secret_key);\n        break;\n    }\n  }\n\n  extractPolicyNamesFromArns(arnList: string[]) {\n    if (!arnList || arnList.length === 0) {\n      return '-';\n    }\n    return arnList\n      .map((arn) => arn.trim().split('/').pop())\n      .filter(Boolean)\n      .join(', ');\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-rgw-user-tabs',\n  templateUrl: './rgw-user-tabs.component.html',\n  styleUrls: ['./rgw-user-tabs.component.scss']\n})\nexport class RgwUserTabsComponent {}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/rgw/user\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Users</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/rgw/accounts\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Accounts</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/rgw/roles\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Roles</a>\n  </li>\n</ul>\n","<cd-rgw-user-tabs></cd-rgw-user-tabs>\n\n<cd-table #table\n          [autoReload]=\"false\"\n          [data]=\"users\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\"\n          identifier=\"uid\"\n          (fetchData)=\"getUserList($event)\"\n          [status]=\"tableStatus\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-rgw-user-details *cdTableDetail\n                       [selection]=\"expandedRow\">\n  </cd-rgw-user-details>\n</cd-table>\n\n<ng-template #userSizeTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.user_quota.max_size > 0 && row.user_quota.enabled; else noSizeQuota\"\n                [total]=\"row.user_quota.max_size\"\n                [used]=\"row.stats.size_actual\">\n  </cd-usage-bar>\n\n  <ng-template #noSizeQuota\n               i18n>No Limit</ng-template>\n</ng-template>\n\n<ng-template #userObjectTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.user_quota.max_objects > 0 && row.user_quota.enabled; else noObjectQuota\"\n                [total]=\"row.user_quota.max_objects\"\n                [used]=\"row.stats.num_objects\"\n                [isBinary]=\"false\">\n  </cd-usage-bar>\n\n  <ng-template #noObjectQuota\n               i18n>No Limit</ng-template>\n</ng-template>\n\n<ng-template #usernameTpl\n             let-row=\"data.row\">\n  <div cdsRow>\n    <span i18n>{{ row.uid }}</span>\n    @if (row.type === 'root') {\n    <cds-tooltip [description]=\"'Account root user'\"\n                 [align]=\"'top'\"\n                 i18n-description>\n      <svg [cdsIcon]=\"icons.userAccessLocked\"\n           [size]=\"icons.size16\"\n           class=\"account-root-icon\"></svg>\n    </cds-tooltip>\n    }\n  </div>\n</ng-template>\n","import { Component, NgZone, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { forkJoin as observableForkJoin, Observable, Subscriber, Subject } from 'rxjs';\nimport { RgwUserAccountsService } from '~/app/shared/api/rgw-user-accounts.service';\n\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Account } from '../models/rgw-user-accounts';\nimport { switchMap } from 'rxjs/operators';\nimport { RgwUser } from '../models/rgw-user';\n\nconst BASE_URL = 'rgw/user';\n\n@Component({\n  selector: 'cd-rgw-user-list',\n  templateUrl: './rgw-user-list.component.html',\n  styleUrls: ['./rgw-user-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwUserListComponent extends ListWithDetails implements OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('userSizeTpl', { static: true })\n  userSizeTpl: TemplateRef<any>;\n  @ViewChild('userObjectTpl', { static: true })\n  userObjectTpl: TemplateRef<any>;\n  @ViewChild('usernameTpl', { static: true })\n  usernameTpl: TemplateRef<any>;\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[] = [];\n  users: object[] = [];\n  userAccounts: Account[];\n  selection: CdTableSelection = new CdTableSelection();\n  userDataSubject = new Subject();\n  declare staleTimeout: number;\n  icons = Icons;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rgwUserService: RgwUserService,\n    private modalService: ModalCdsService,\n    private urlBuilder: URLBuilderService,\n    public actionLabels: ActionLabelsI18n,\n    protected ngZone: NgZone,\n    private rgwUserAccountService: RgwUserAccountsService\n  ) {\n    super(ngZone);\n  }\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        name: $localize`Username`,\n        prop: 'uid',\n        flexGrow: 1,\n        cellTemplate: this.usernameTpl\n      },\n      {\n        name: $localize`Tenant`,\n        prop: 'tenant',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Account name`,\n        prop: 'account.name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Full name`,\n        prop: 'display_name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Email address`,\n        prop: 'email',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Suspended`,\n        prop: 'suspended',\n        flexGrow: 1,\n        cellClass: 'text-center',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        name: $localize`Max. buckets`,\n        prop: 'max_buckets',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      },\n      {\n        name: $localize`Capacity Limit %`,\n        prop: 'size_usage',\n        cellTemplate: this.userSizeTpl,\n        flexGrow: 0.8\n      },\n      {\n        name: $localize`Object Limit %`,\n        prop: 'object_usage',\n        cellTemplate: this.userObjectTpl,\n        flexGrow: 0.8\n      }\n    ];\n    this.userDataSubject\n      .pipe(\n        switchMap((_: object[]) => {\n          return this.rgwUserAccountService.list(true);\n        })\n      )\n      .subscribe((accounts: Account[]) => {\n        this.userAccounts = accounts;\n        this.mapUsersWithAccount();\n      });\n\n    const getUserUri = () =>\n      this.selection.first() && `${encodeURIComponent(this.selection.first().uid)}`;\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      name: this.actionLabels.CREATE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => this.urlBuilder.getEdit(getUserUri()),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.DELETE\n    };\n    this.tableActions = [addAction, editAction, deleteAction];\n    this.setTableRefreshTimeout();\n  }\n\n  getUserList(context: CdTableFetchDataContext) {\n    this.setTableRefreshTimeout();\n    this.rgwUserService.list().subscribe(\n      (resp: object[]) => {\n        this.users = resp;\n        this.userDataSubject.next(resp);\n      },\n      () => {\n        context.error();\n      }\n    );\n  }\n\n  mapUsersWithAccount() {\n    this.users = this.users.map((user: RgwUser) => {\n      const account: Account = this.userAccounts.find((acc) => acc.id === user.account_id);\n      return {\n        account: account ? account : { name: '' }, // adding {name: ''} for sorting account name in user list to work\n        ...user\n      };\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: this.selection.hasSingleSelection ? $localize`user` : $localize`users`,\n      itemNames: this.selection.selected.map((user: any) => user['uid']),\n      submitActionObservable: (): Observable<any> => {\n        return new Observable((observer: Subscriber<any>) => {\n          // Delete all selected data table rows.\n          observableForkJoin(\n            this.selection.selected.map((user: any) => {\n              return this.rgwUserService.delete(user.uid);\n            })\n          ).subscribe({\n            error: (error) => {\n              // Forward the error to the observer.\n              observer.error(error);\n              // Reload the data table content because some deletions might\n              // have been executed successfully in the meanwhile.\n              this.table.refreshBtn();\n            },\n            complete: () => {\n              // Notify the observer that we are done.\n              observer.complete();\n              // Reload the data table content.\n              this.table.refreshBtn();\n            }\n          });\n        });\n      }\n    });\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Migrate Single Site to Multi-site\n    <cd-helper>\n      <span>Migrate from a single-site deployment with a default zone group and zone to a multi-site system</span>\n    </cd-helper>\n  </ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"multisiteMigrateForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"multisiteMigrateForm\"\n          novalidate>\n    <div class=\"modal-body\">\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"realmName\"\n               i18n>Realm Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Realm name...\"\n                 id=\"realmName\"\n                 name=\"realmName\"\n                 formControlName=\"realmName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('realmName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('realmName', formDir, 'uniqueName')\"\n                i18n>The chosen realm name is already in use.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroupName\"\n               i18n>Rename default zone group</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone group name...\"\n                 id=\"zonegroupName\"\n                 name=\"zonegroupName\"\n                 formControlName=\"zonegroupName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zonegroupName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zonegroupName', formDir, 'uniqueName')\"\n                i18n>The chosen zone group name is already in use.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroup_endpoints\"\n               i18n>Zone group Endpoints\n        </label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"e.g, http://ceph-node-00.com:80\"\n                 id=\"zonegroup_endpoints\"\n                 name=\"zonegroup_endpoints\"\n                 formControlName=\"zonegroup_endpoints\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zonegroup_endpoints', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zonegroup_endpoints', formDir, 'invalidURL')\"\n                i18n>Please enter a valid URL.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zoneName\"\n               i18n>Rename default zone</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone name...\"\n                 id=\"zoneName\"\n                 name=\"zoneName\"\n                 formControlName=\"zoneName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zoneName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zoneName', formDir, 'uniqueName')\"\n                i18n>The chosen zone name is already in use.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zone_endpoints\"\n               i18n>Zone Endpoints\n        </label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"e.g, http://ceph-node-00.com:80\"\n                 id=\"zone_endpoints\"\n                 name=\"zone_endpoints\"\n                 formControlName=\"zone_endpoints\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zone_endpoints', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('zone_endpoints', formDir, 'invalidURL')\"\n                i18n>Please enter a valid URL.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"username\"\n               i18n>Username</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"username\"\n                 id=\"username\"\n                 name=\"username\"\n                 formControlName=\"username\">\n          <cd-help-text>\n            <span i18n>Specify the username for the system user. This user will be created automatically as part of the process.</span>\n          </cd-help-text>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteMigrateForm.showError('username', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [submitText]=\"actionLabels.MIGRATE + ' ' + 'to Multi-site'\"\n                            [form]=\"multisiteMigrateForm\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm, RgwZone, RgwZonegroup } from '../models/rgw-multisite';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\n\n@Component({\n  selector: 'cd-rgw-multisite-migrate',\n  templateUrl: './rgw-multisite-migrate.component.html',\n  styleUrls: ['./rgw-multisite-migrate.component.scss']\n})\nexport class RgwMultisiteMigrateComponent implements OnInit {\n  @Output()\n  submitAction = new EventEmitter();\n\n  multisiteMigrateForm: CdFormGroup;\n  zoneNames: string[];\n  realmList: RgwRealm[];\n  multisiteInfo: object[] = [];\n  realmNames: string[];\n  zonegroupList: RgwZonegroup[];\n  zonegroupNames: string[];\n  zoneList: RgwZone[];\n  realm: RgwRealm;\n  zonegroup: RgwZonegroup;\n  zone: RgwZone;\n  newZonegroupName: any;\n  newZoneName: any;\n  bsModalRef: NgbModalRef;\n  users: any;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwMultisiteService: RgwMultisiteService,\n    public rgwZoneService: RgwZoneService,\n    public notificationService: NotificationService,\n    public rgwZonegroupService: RgwZonegroupService,\n    public rgwRealmService: RgwRealmService,\n    public rgwDaemonService: RgwDaemonService,\n    public modalService: ModalService\n  ) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.multisiteMigrateForm = new CdFormGroup({\n      realmName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (realmName: string) => {\n            return this.realmNames && this.zoneNames.indexOf(realmName) !== -1;\n          })\n        ]\n      }),\n      zonegroupName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (zonegroupName: string) => {\n            return this.zonegroupNames && this.zoneNames.indexOf(zonegroupName) !== -1;\n          })\n        ]\n      }),\n      zoneName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (zoneName: string) => {\n            return this.zoneNames && this.zoneNames.indexOf(zoneName) !== -1;\n          })\n        ]\n      }),\n      zone_endpoints: new UntypedFormControl(null, {\n        validators: [CdValidators.url, Validators.required]\n      }),\n      zonegroup_endpoints: new UntypedFormControl(null, {\n        validators: [CdValidators.url, Validators.required]\n      }),\n      username: new UntypedFormControl(null, {\n        validators: [Validators.required]\n      })\n    });\n  }\n\n  ngOnInit(): void {\n    this.realmList =\n      this.multisiteInfo[0] !== undefined && this.multisiteInfo[0].hasOwnProperty('realms')\n        ? this.multisiteInfo[0]['realms']\n        : [];\n    this.realmNames = this.realmList.map((realm) => {\n      return realm['name'];\n    });\n    this.zonegroupList =\n      this.multisiteInfo[1] !== undefined && this.multisiteInfo[1].hasOwnProperty('zonegroups')\n        ? this.multisiteInfo[1]['zonegroups']\n        : [];\n    this.zonegroupNames = this.zonegroupList.map((zonegroup) => {\n      return zonegroup['name'];\n    });\n    this.zoneList =\n      this.multisiteInfo[2] !== undefined && this.multisiteInfo[2].hasOwnProperty('zones')\n        ? this.multisiteInfo[2]['zones']\n        : [];\n    this.zoneNames = this.zoneList.map((zone) => {\n      return zone['name'];\n    });\n  }\n\n  submit() {\n    const values = this.multisiteMigrateForm.value;\n    this.realm = new RgwRealm();\n    this.realm.name = values['realmName'];\n    this.zonegroup = new RgwZonegroup();\n    this.zonegroup.name = values['zonegroupName'];\n    this.zonegroup.endpoints = values['zonegroup_endpoints'];\n    this.zone = new RgwZone();\n    this.zone.name = values['zoneName'];\n    this.zone.endpoints = values['zone_endpoints'];\n    this.rgwMultisiteService\n      .migrate(this.realm, this.zonegroup, this.zone, values['username'])\n      .subscribe(\n        () => {\n          this.rgwMultisiteService.setRestartGatewayMessage(false);\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Migration done successfully`\n          );\n          this.submitAction.emit();\n          this.activeModal.close();\n        },\n        () => {\n          this.notificationService.show(NotificationType.error, $localize`Migration failed`);\n        }\n      );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Delete Zone</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"zoneForm\"\n          [formGroup]=\"zoneForm\"\n          novalidate>\n      <div class=\"modal-body ms-4\">\n        <label i18n>\n          This will delete your <strong>{{zone?.name}}</strong> Zone.\n        </label>\n        <ng-container *ngIf=\"includedPools.size\">\n          <label class=\"mt-3\"\n                 i18n>\n              Do you want to delete the associated pools with the <strong>{{zone?.name}}</strong> Zone?</label>\n          <label class=\"mb-4\"\n                 i18n>\n              This will delete the following pools and any data stored in these pools:</label>\n            <strong *ngFor=\"let pool of includedPools\"\n                    class=\"block\">{{ pool }}</strong>\n          <div class=\"form-group\">\n            <div class=\"custom-control custom-checkbox mt-2\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     name=\"deletePools\"\n                     id=\"deletePools\"\n                     formControlName=\"deletePools\"\n                     (change)=\"showDangerText()\">\n              <label class=\"custom-control-label\"\n                     for=\"deletePools\"\n                     i18n>Yes, I want to delete the pools.</label>\n            </div>\n            <div *ngIf=\"displayText\"\n                 class=\"me-4\">\n              <cd-alert-panel type=\"danger\"\n                              i18n>\n                              This will delete all the data in the pools!\n              </cd-alert-panel>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"zoneForm\"\n                              [submitText]=\"actionLabels.DELETE\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n\n</cd-modal>\n","import { AfterViewInit, Component, OnInit } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-rgw-multisite-zone-deletion-form',\n  templateUrl: './rgw-multisite-zone-deletion-form.component.html',\n  styleUrls: ['./rgw-multisite-zone-deletion-form.component.scss']\n})\nexport class RgwMultisiteZoneDeletionFormComponent implements OnInit, AfterViewInit {\n  zoneData$: any;\n  poolList$: any;\n  zone: any;\n  zoneForm: CdFormGroup;\n  displayText: boolean = false;\n  includedPools: Set<string> = new Set<string>();\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private rgwZoneService: RgwZoneService,\n    private poolService: PoolService\n  ) {\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.zoneData$ = this.rgwZoneService.get(this.zone);\n    this.poolList$ = this.poolService.getList();\n  }\n\n  ngAfterViewInit(): void {\n    this.updateIncludedPools();\n  }\n\n  createForm() {\n    this.zoneForm = new CdFormGroup({\n      deletePools: new UntypedFormControl(false)\n    });\n  }\n\n  submit() {\n    this.rgwZoneService\n      .delete(this.zone.name, this.zoneForm.value.deletePools, this.includedPools, this.zone.parent)\n      .subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Zone: '${this.zone.name}' deleted successfully`\n          );\n          this.activeModal.close();\n        },\n        () => {\n          this.zoneForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n  }\n\n  showDangerText() {\n    this.displayText = !this.displayText;\n  }\n\n  updateIncludedPools(): void {\n    if (!this.zoneData$ || !this.poolList$) {\n      return;\n    }\n    this.zoneData$.subscribe((data: any) => {\n      this.poolList$.subscribe((poolList: any) => {\n        for (const pool of poolList) {\n          for (const zonePool of Object.values(data)) {\n            if (typeof zonePool === 'string' && zonePool.includes(pool.pool_name)) {\n              this.includedPools.add(pool.pool_name);\n            } else if (Array.isArray(zonePool) && zonePool[0].val) {\n              for (const item of zonePool) {\n                const val = item.val;\n                if (val.storage_classes.STANDARD.data_pool === pool.pool_name) {\n                  this.includedPools.add(val.storage_classes.STANDARD.data_pool);\n                }\n                if (val.data_extra_pool === pool.pool_name) {\n                  this.includedPools.add(val.data_extra_pool);\n                }\n                if (val.index_pool === pool.pool_name) {\n                  this.includedPools.add(val.index_pool);\n                }\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Delete Zone Group</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"zonegroupForm\"\n          [formGroup]=\"zonegroupForm\"\n          novalidate>\n      <div class=\"modal-body ms-4\">\n        <label i18n>\n          This will delete your <strong>{{zonegroup?.name}}</strong> Zone Group.\n        </label>\n        <ng-container *ngIf=\"zonesList.length > 0\">\n          <label class=\"mt-3\"\n                 i18n>\n              Do you want to delete the associated zones and pools with the <strong>{{zonegroup?.name}}</strong> Zone Group?</label>\n          <ng-container *ngIf=\"includedPools.size > 0\">\n            <label i18n>\n              This will delete the following:</label>\n          </ng-container>\n          <strong class=\"mt-3 mb-2 h5 block\">Zones:</strong>\n          <div id=\"scroll\">\n            <strong *ngFor=\"let zone of zonesList\"\n                    class=\"block\">{{zone}}</strong>\n          </div>\n          <ng-container *ngIf=\"includedPools.size > 0\">\n            <strong class=\"mt-3 mb-2 h5 block\">Pools:</strong>\n            <div id=\"scroll\"\n                 class=\"mb-2\">\n              <strong *ngFor=\"let pool of includedPools\"\n                      class=\"block\">{{ pool }}</strong>\n            </div>\n          </ng-container>\n\n          <div class=\"form-group\">\n            <div class=\"custom-control custom-checkbox mt-2\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     name=\"deletePools\"\n                     id=\"deletePools\"\n                     formControlName=\"deletePools\"\n                     (change)=\"showDangerText()\">\n              <ng-container *ngIf=\"includedPools.size > 0 else noPoolsConfirmation\">\n                <label class=\"custom-control-label\"\n                       for=\"deletePools\"\n                       i18n>Yes, I want to delete the zones and their pools.</label>\n              </ng-container>\n            </div>\n            <div *ngIf=\"displayText\"\n                 class=\"me-4\">\n              <cd-alert-panel type=\"danger\"\n                              i18n>\n                              This will delete all the data in the pools!\n              </cd-alert-panel>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"zonegroupForm\"\n                              [submitText]=\"actionLabels.DELETE \">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n\n</cd-modal>\n\n<ng-template #noPoolsConfirmation>\n  <label class=\"custom-control-label\"\n         for=\"deletePools\"\n         i18n>Yes, I want to delete the zones.</label>\n</ng-template>\n","import { AfterViewInit, Component, OnInit } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-rgw-multisite-zonegroup-deletion-form',\n  templateUrl: './rgw-multisite-zonegroup-deletion-form.component.html',\n  styleUrls: ['./rgw-multisite-zonegroup-deletion-form.component.scss']\n})\nexport class RgwMultisiteZonegroupDeletionFormComponent implements OnInit, AfterViewInit {\n  zonegroupData$: any;\n  poolList$: any;\n  zonesPools: Array<any> = [];\n  zonegroup: any;\n  zonesList: Array<any> = [];\n  zonegroupForm: CdFormGroup;\n  displayText: boolean = false;\n  includedPools: Set<string> = new Set<string>();\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private rgwZonegroupService: RgwZonegroupService,\n    private poolService: PoolService,\n    private rgwZoneService: RgwZoneService\n  ) {\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.zonegroupData$ = this.rgwZonegroupService.get(this.zonegroup);\n    this.poolList$ = this.poolService.getList();\n  }\n\n  ngAfterViewInit(): void {\n    this.updateIncludedPools();\n  }\n\n  createForm() {\n    this.zonegroupForm = new CdFormGroup({\n      deletePools: new UntypedFormControl(false)\n    });\n  }\n\n  submit() {\n    this.rgwZonegroupService\n      .delete(this.zonegroup.name, this.zonegroupForm.value.deletePools, this.includedPools)\n      .subscribe(() => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Zonegroup: '${this.zonegroup.name}' deleted successfully`\n        );\n        this.activeModal.close();\n      });\n  }\n\n  showDangerText() {\n    if (this.includedPools.size > 0) {\n      this.displayText = !this.displayText;\n    }\n  }\n\n  updateIncludedPools(): void {\n    if (!this.zonegroupData$ || !this.poolList$) {\n      return;\n    }\n\n    this.zonegroupData$.subscribe((zgData: any) => {\n      for (const zone of zgData.zones) {\n        this.zonesList.push(zone.name);\n        this.rgwZoneService.get(zone).subscribe((zonesPools: any) => {\n          this.poolList$.subscribe((poolList: any) => {\n            for (const zonePool of Object.values(zonesPools)) {\n              for (const pool of poolList) {\n                if (typeof zonePool === 'string' && zonePool.includes(pool.pool_name)) {\n                  this.includedPools.add(pool.pool_name);\n                } else if (Array.isArray(zonePool) && zonePool[0].val) {\n                  for (const item of zonePool) {\n                    const val = item.val;\n                    if (val.storage_classes.STANDARD.data_pool === pool.pool_name) {\n                      this.includedPools.add(val.storage_classes.STANDARD.data_pool);\n                    }\n                    if (val.data_extra_pool === pool.pool_name) {\n                      this.includedPools.add(val.data_extra_pool);\n                    }\n                    if (val.index_pool === pool.pool_name) {\n                      this.includedPools.add(val.index_pool);\n                    }\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Export Multi-site Realm Token</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"exportTokenForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"exportTokenForm\">\n    <span *ngIf=\"loading\"\n          class=\"d-flex justify-content-center\">\n      <i [ngClass]=\"[icons.large3x, icons.spinner, icons.spin]\"></i>\n    <svg [cdsIcon]=\"icons.down\"\n         [size]=\"icons.size24\"\n         class=\"cds-info-color\"></svg>\n  </span>\n    <div class=\"modal-body\"\n         *ngIf=\"!loading\">\n      <cd-alert-panel *ngIf=\"!tokenValid\"\n                      type=\"warning\"\n                      class=\"mx-3\"\n                      i18n>\n      <div *ngFor=\"let realminfo of realms\">\n        <b>{{realminfo.realm}}</b> -\n        {{realminfo.token}}\n      </div>\n      </cd-alert-panel>\n      <div *ngFor=\"let realminfo of realms\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"realmName\"\n                 i18n>Realm Name\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"realmName\"\n                   name=\"realmName\"\n                   type=\"text\"\n                   value=\"{{ realminfo.realm }}\"\n                   readonly>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"token\"\n                 i18n>Token\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"realmToken\"\n                   name=\"realmToken\"\n                   type=\"text\"\n                   value=\"{{ realminfo.token }}\"\n                   class=\"me-2 mb-4\"\n                   readonly>\n            <cd-copy-2-clipboard-button\n                      source=\"{{ realminfo.token }}\"\n                      [byId]=\"false\">\n            </cd-copy-2-clipboard-button>\n          </div>\n          <hr *ngIf=\"realms.length > 1\">\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-back-button class=\"m-2 float-end\"\n                      aria-label=\"Close\"\n                      (backAction)=\"activeModal.close()\"></cd-back-button>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { AfterViewChecked, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm } from '../models/rgw-multisite';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-rgw-multisite-export',\n  templateUrl: './rgw-multisite-export.component.html',\n  styleUrls: ['./rgw-multisite-export.component.scss']\n})\nexport class RgwMultisiteExportComponent implements OnInit, AfterViewChecked {\n  exportTokenForm: CdFormGroup;\n  realms: any;\n  realmList: RgwRealm[];\n  multisiteInfo: any;\n  tokenValid = false;\n  loading = true;\n  icons = Icons;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public rgwRealmService: RgwRealmService,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private readonly changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.exportTokenForm = new CdFormGroup({});\n  }\n\n  onSubmit() {\n    this.activeModal.close();\n  }\n\n  ngOnInit(): void {\n    this.rgwRealmService.getRealmTokens().subscribe((data: object[]) => {\n      this.loading = false;\n      this.realms = data;\n      var base64Matcher = new RegExp(\n        '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$'\n      );\n      this.realms.forEach((realmInfo: any) => {\n        if (base64Matcher.test(realmInfo.token)) {\n          this.tokenValid = true;\n        } else {\n          this.tokenValid = false;\n        }\n      });\n    });\n  }\n\n  ngAfterViewChecked(): void {\n    this.changeDetectorRef.detectChanges();\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Import Multi-site Token</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"importTokenForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"importTokenForm\">\n    <div class=\"modal-body\">\n      <cd-alert-panel type=\"info\"\n                      spacingClass=\"mb-3\">\n        <ul>\n          <li>This feature allows you to configure a connection between your primary and secondary Ceph clusters for data replication. By importing a token, you establish a link between the clusters, enabling data synchronization.</li>\n          <li>To obtain the token, generate it from your primary Ceph cluster. This token includes encoded information about the primary cluster's endpoint, access key, and secret key.</li>\n          <li>The secondary zone represents the destination cluster where your data will be replicated.</li>\n        </ul>\n      </cd-alert-panel>\n      <legend i18n>Zone Details</legend>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"realmToken\"\n               i18n>Token\n        </label>\n        <div class=\"cd-col-form-input\">\n          <input id=\"realmToken\"\n                 name=\"realmToken\"\n                 class=\"form-control\"\n                 type=\"text\"\n                 formControlName=\"realmToken\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('realmToken', frm, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zoneName\"\n               i18n>Secondary Zone Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone name...\"\n                 id=\"zoneName\"\n                 name=\"zoneName\"\n                 formControlName=\"zoneName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('zoneName', frm, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('zoneName', frm, 'uniqueName')\"\n                i18n>The chosen zone name is already in use.</span>\n        </div>\n      </div>\n\n      <legend i18n>Service Details</legend>\n      <div class=\"form-group row\">\n        <div class=\"cd-col-form-offset\">\n          <div class=\"custom-control custom-checkbox\">\n            <input class=\"custom-control-input\"\n                   id=\"unmanaged\"\n                   type=\"checkbox\"\n                   formControlName=\"unmanaged\">\n            <label class=\"custom-control-label\"\n                   for=\"unmanaged\"\n                   i18n>Unmanaged</label>\n            <cd-helper i18n>If set to true, the orchestrator will not start nor stop any daemon associated with this service.\n               Placement and all other properties will be ignored.</cd-helper>\n          </div>\n        </div>\n      </div>\n\n      <!-- Placement -->\n      <div *ngIf=\"!importTokenForm.controls.unmanaged.value\"\n           class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"placement\"\n               i18n>Placement</label>\n        <div class=\"cd-col-form-input\">\n          <select id=\"placement\"\n                  class=\"form-select\"\n                  formControlName=\"placement\">\n            <option i18n\n                    value=\"hosts\">Hosts</option>\n            <option i18n\n                    value=\"label\">Label</option>\n          </select>\n        </div>\n      </div>\n\n      <!-- Label -->\n      <div *ngIf=\"!importTokenForm.controls.unmanaged.value && importTokenForm.controls.placement.value === 'label'\"\n           class=\"form-group row\">\n        <label i18n\n               class=\"cd-col-form-label\"\n               for=\"label\">Label</label>\n        <div class=\"cd-col-form-input\">\n          <input id=\"label\"\n                 class=\"form-control\"\n                 type=\"text\"\n                 formControlName=\"label\"\n                 [ngbTypeahead]=\"searchLabels\"\n                 (focus)=\"labelFocus.next($any($event).target.value)\"\n                 (click)=\"labelClick.next($any($event).target.value)\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('label', frm, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n\n      <!-- Hosts -->\n      <div *ngIf=\"!importTokenForm.controls.unmanaged.value && importTokenForm.controls.placement.value === 'hosts'\"\n           class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"hosts\"\n               i18n>Hosts</label>\n        <div class=\"cd-col-form-input\">\n          <cd-select-badges id=\"hosts\"\n                            [data]=\"importTokenForm.controls.hosts.value\"\n                            [options]=\"hosts.options\"\n                            [messages]=\"hosts.messages\">\n          </cd-select-badges>\n        </div>\n      </div>\n\n      <!-- count -->\n      <div *ngIf=\"!importTokenForm.controls.unmanaged.value\"\n           class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"count\">\n          <span i18n>Count</span>\n          <cd-helper i18n>Only that number of daemons will be created.</cd-helper>\n        </label>\n        <div class=\"cd-col-form-input\">\n          <input id=\"count\"\n                 class=\"form-control\"\n                 type=\"number\"\n                 formControlName=\"count\"\n                 min=\"1\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('count', frm, 'min')\"\n                i18n>The value must be at least 1.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"importTokenForm.showError('count', frm, 'pattern')\"\n                i18n>The entered value needs to be a number.</span>\n        </div>\n      </div>\n\n      <!-- RGW -->\n      <ng-container *ngIf=\"!importTokenForm.controls.unmanaged.value\">\n        <!-- rgw_frontend_port -->\n        <div class=\"form-group row\">\n          <label i18n\n                 class=\"cd-col-form-label\"\n                 for=\"rgw_frontend_port\">Port</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"rgw_frontend_port\"\n                   class=\"form-control\"\n                   type=\"number\"\n                   formControlName=\"rgw_frontend_port\"\n                   min=\"1\"\n                   max=\"65535\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"importTokenForm.showError('rgw_frontend_port', frm, 'pattern')\"\n                  i18n>The entered value needs to be a number.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"importTokenForm.showError('rgw_frontend_port', frm, 'min')\"\n                  i18n>The value must be at least 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"importTokenForm.showError('rgw_frontend_port', frm, 'max')\"\n                  i18n>The value cannot exceed 65535.</span>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                            [submitText]=\"actionLabels.IMPORT\"\n                            [form]=\"importTokenForm\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwZone } from '../models/rgw-multisite';\nimport _ from 'lodash';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport { Observable, Subject, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cd-rgw-multisite-import',\n  templateUrl: './rgw-multisite-import.component.html',\n  styleUrls: ['./rgw-multisite-import.component.scss']\n})\nexport class RgwMultisiteImportComponent implements OnInit {\n  readonly endpoints = /^((https?:\\/\\/)|(www.))(?:([a-zA-Z]+)|(\\d+\\.\\d+.\\d+.\\d+)):\\d{2,4}$/;\n  readonly ipv4Rgx = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i;\n  readonly ipv6Rgx = /^(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4}$/i;\n  @ViewChild(NgbTypeahead, { static: false })\n  typeahead: NgbTypeahead;\n\n  importTokenForm: CdFormGroup;\n  multisiteInfo: object[] = [];\n  zoneList: RgwZone[] = [];\n  zoneNames: string[];\n  hosts: any;\n  labels: string[];\n  labelClick = new Subject<string>();\n  labelFocus = new Subject<string>();\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public hostService: HostService,\n\n    public rgwRealmService: RgwRealmService,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService\n  ) {\n    this.hosts = {\n      options: [],\n      messages: new SelectMessages({\n        empty: $localize`There are no hosts.`,\n        filter: $localize`Filter hosts`\n      })\n    };\n    this.createForm();\n  }\n  ngOnInit(): void {\n    this.zoneList =\n      this.multisiteInfo[2] !== undefined && this.multisiteInfo[2].hasOwnProperty('zones')\n        ? this.multisiteInfo[2]['zones']\n        : [];\n    this.zoneNames = this.zoneList.map((zone) => {\n      return zone['name'];\n    });\n    this.hostService.getAllHosts().subscribe((resp: object[]) => {\n      const options: SelectOption[] = [];\n      _.forEach(resp, (host: object) => {\n        if (_.get(host, 'sources.orchestrator', false)) {\n          const option = new SelectOption(false, _.get(host, 'hostname'), '');\n          options.push(option);\n        }\n      });\n      this.hosts.options = [...options];\n    });\n    this.hostService.getLabels().subscribe((resp: string[]) => {\n      this.labels = resp;\n    });\n  }\n\n  createForm() {\n    this.importTokenForm = new CdFormGroup({\n      realmToken: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      zoneName: new FormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (zoneName: string) => {\n            return this.zoneNames && this.zoneNames.indexOf(zoneName) !== -1;\n          })\n        ]\n      }),\n      rgw_frontend_port: new FormControl(null, {\n        validators: [Validators.required, Validators.pattern('^[0-9]*$')]\n      }),\n      placement: new FormControl('hosts'),\n      label: new FormControl(null, [\n        CdValidators.requiredIf({\n          placement: 'label',\n          unmanaged: false\n        })\n      ]),\n      hosts: new FormControl([]),\n      count: new FormControl(null, [CdValidators.number(false)]),\n      unmanaged: new FormControl(false)\n    });\n  }\n\n  onSubmit() {\n    const values = this.importTokenForm.value;\n    const placementSpec: object = {\n      placement: {}\n    };\n    if (!values['unmanaged']) {\n      switch (values['placement']) {\n        case 'hosts':\n          if (values['hosts'].length > 0) {\n            placementSpec['placement']['hosts'] = values['hosts'];\n          }\n          break;\n        case 'label':\n          placementSpec['placement']['label'] = values['label'];\n          break;\n      }\n      if (_.isNumber(values['count']) && values['count'] > 0) {\n        placementSpec['placement']['count'] = values['count'];\n      }\n    }\n    this.rgwRealmService\n      .importRealmToken(\n        values['realmToken'],\n        values['zoneName'],\n        values['rgw_frontend_port'],\n        placementSpec\n      )\n      .subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Realm token import successfull`\n          );\n          this.activeModal.close();\n        },\n        () => {\n          this.importTokenForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n  }\n\n  searchLabels = (text$: Observable<string>) => {\n    return merge(\n      text$.pipe(debounceTime(200), distinctUntilChanged()),\n      this.labelFocus,\n      this.labelClick.pipe(filter(() => !this.typeahead.isPopupOpen()))\n    ).pipe(\n      map((value) =>\n        this.labels\n          .filter((label: string) => label.toLowerCase().indexOf(value.toLowerCase()) > -1)\n          .slice(0, 10)\n      )\n    );\n  };\n}\n","<cds-modal size=\"sm\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"false\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <div cdsModalContent>\n    <form name=\"multisiteRealmForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"multisiteRealmForm\"\n          novalidate>\n      <div class=\"form-item\">\n        <cds-text-label\n          labelInputID=\"realmName\"\n          [invalid]=\"\n            multisiteRealmForm.controls.realmName.invalid &&\n            (multisiteRealmForm.controls.realmName.touched ||\n              multisiteRealmForm.controls.realmName.dirty)\n          \"\n          [invalidText]=\"realmNameError\"\n          cdRequiredField=\"Realm Name\"\n          i18n\n          >Realm Name\n          <input\n            cdsText\n            type=\"text\"\n            placeholder=\"Realm name...\"\n            id=\"realmName\"\n            name=\"realmName\"\n            formControlName=\"realmName\"\n            [invalid]=\"\n              multisiteRealmForm.controls.realmName.invalid &&\n              (multisiteRealmForm.controls.realmName.touched ||\n                multisiteRealmForm.controls.realmName.dirty)\n            \"\n            [autofocus]=\"true\"\n            modal-primary-focus\n          />\n        </cds-text-label>\n        <ng-template #realmNameError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"multisiteRealmForm.showError('realmName', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"multisiteRealmForm.showError('realmName', formDir, 'uniqueName')\"\n            i18n\n            >The chosen realm name is already in use.</span\n          >\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-checkbox\n          label=\"Default\"\n          for=\"default_realm\"\n          formControlName=\"default_realm\"\n          name=\"default_realm\"\n          i18n\n          >Default\n          <cd-help-text *ngIf=\"action === actionLabels.EDIT && info.data.is_default\">\n            <span>You cannot unset the default flag.</span>\n          </cd-help-text>\n          <cd-help-text *ngIf=\"action === actionLabels.EDIT && !info.data.is_default\">\n            <span\n              >Please consult the <a href=\"{{ docUrl }}\">documentation</a> to follow the failover\n              mechanism</span\n            >\n          </cd-help-text>\n          <cd-help-text *ngIf=\"defaultRealmDisabled && action === actionLabels.CREATE\">\n            <span>Default realm already exists.</span>\n          </cd-help-text>\n        </cds-checkbox>\n      </div>\n    </form>\n  </div>\n  <cd-form-button-panel\n    (submitActionEvent)=\"submit()\"\n    [form]=\"multisiteRealmForm\"\n    [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n    [modalForm]=\"true\"\n  >\n  </cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm } from '../models/rgw-multisite';\nimport { DocService } from '~/app/shared/services/doc.service';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-rgw-multisite-realm-form',\n  templateUrl: './rgw-multisite-realm-form.component.html',\n  styleUrls: ['./rgw-multisite-realm-form.component.scss']\n})\nexport class RgwMultisiteRealmFormComponent extends BaseModal implements OnInit {\n  multisiteRealmForm: CdFormGroup;\n  realm: RgwRealm;\n  realmList: RgwRealm[] = [];\n  zonegroupList: RgwRealm[] = [];\n  realmNames: string[];\n  newRealmName: string;\n  isMaster: boolean;\n  defaultRealmDisabled = false;\n  docUrl: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwRealmService: RgwRealmService,\n    public notificationService: NotificationService,\n    public docService: DocService,\n    @Optional() @Inject('action') public action: string,\n    @Optional() @Inject('resource') public resource: string,\n    @Optional() @Inject('info') public info: any,\n    @Optional() @Inject('multisiteInfo') public multisiteInfo: object[],\n    @Optional() @Inject('defaultsInfo') public defaultsInfo: string[],\n    @Optional() @Inject('editing') public editing: boolean\n  ) {\n    super();\n\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.createForm();\n  }\n\n  createForm() {\n    this.multisiteRealmForm = new CdFormGroup({\n      realmName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (realmName: string) => {\n            return (\n              this.action === this.actionLabels.CREATE &&\n              this.realmNames &&\n              this.realmNames.indexOf(realmName) !== -1\n            );\n          })\n        ]\n      }),\n      default_realm: new UntypedFormControl(false)\n    });\n  }\n\n  ngOnInit(): void {\n    this.realmList =\n      this.multisiteInfo[0] !== undefined && this.multisiteInfo[0].hasOwnProperty('realms')\n        ? this.multisiteInfo[0]['realms']\n        : [];\n    this.realmNames = this.realmList.map((realm) => {\n      return realm['name'];\n    });\n    if (this.action === this.actionLabels.EDIT) {\n      this.zonegroupList =\n        this.multisiteInfo[1] !== undefined && this.multisiteInfo[1].hasOwnProperty('zonegroups')\n          ? this.multisiteInfo[1]['zonegroups']\n          : [];\n      this.multisiteRealmForm.get('realmName').setValue(this.info.data.name);\n      this.multisiteRealmForm.get('default_realm').setValue(this.info.data.is_default);\n      if (this.info.data.is_default) {\n        this.multisiteRealmForm.get('default_realm').disable();\n      }\n    }\n    this.zonegroupList.forEach((zgp: any) => {\n      if (zgp.is_master === true && zgp.realm_id === this.info.data.id) {\n        this.isMaster = true;\n      }\n    });\n    if (this.defaultsInfo && this.defaultsInfo['defaultRealmName'] !== null) {\n      this.multisiteRealmForm.get('default_realm').disable();\n      this.defaultRealmDisabled = true;\n    }\n    this.docUrl = this.docService.urlGenerator('rgw-multisite');\n\n    if (this.action === this.actionLabels?.EDIT) {\n      this.multisiteRealmForm.get('default_realm').disable();\n    } else {\n      this.multisiteRealmForm.get('default_realm').enable();\n    }\n  }\n\n  submit() {\n    const values = this.multisiteRealmForm.getRawValue();\n    this.realm = new RgwRealm();\n    if (this.action === this.actionLabels.CREATE) {\n      this.realm.name = values['realmName'];\n      this.rgwRealmService.create(this.realm, values['default_realm']).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Realm: '${values['realmName']}' created successfully`\n          );\n          this.closeModal();\n        },\n        () => {\n          this.multisiteRealmForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    } else {\n      this.realm.name = this.info.data.name;\n      this.newRealmName = values['realmName'];\n      this.rgwRealmService.update(this.realm, values['default_realm'], this.newRealmName).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Realm: '${values['realmName']}' updated successfully`\n          );\n          this.closeModal();\n        },\n        () => {\n          this.multisiteRealmForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    }\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} {{ resource | upperFirst }}</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"multisiteZoneForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"multisiteZoneForm\"\n          novalidate>\n    <div class=\"modal-body\">\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"selectedZonegroup\"\n               i18n>Select Zone Group</label>\n        <div class=\"cd-col-form-input\">\n          <select class=\"form-select\"\n                  id=\"selectedZonegroup\"\n                  [attr.disabled]=\"action === 'edit' ? true : null\"\n                  formControlName=\"selectedZonegroup\"\n                  name=\"selectedZonegroup\"\n                  (change)=\"onZoneGroupChange($event.target.value)\">\n            <option *ngFor=\"let zonegroupName of zonegroupList\"\n                    [value]=\"zonegroupName.name\"\n                    [selected]=\"zonegroupName.name === multisiteZoneForm.getValue('selectedZonegroup')\">\n            {{ zonegroupName.name }}\n            </option>\n          </select>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroupName\"\n               i18n>Zone Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone name...\"\n                 id=\"zoneName\"\n                 name=\"zoneName\"\n                 formControlName=\"zoneName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZoneForm.showError('zoneName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZoneForm.showError('zoneName', formDir, 'uniqueName')\"\n                i18n>The chosen zone name is already in use.</span>\n          <div class=\"custom-control custom-checkbox\">\n            <input class=\"form-check-input\"\n                   id=\"default_zone\"\n                   name=\"default_zone\"\n                   formControlName=\"default_zone\"\n                   [attr.disabled]=\"action === 'edit' ? true : null\"\n                   type=\"checkbox\">\n            <label class=\"form-check-label\"\n                   for=\"default_zone\"\n                   i18n>Default</label>\n            <span *ngIf=\"disableDefault && action === 'create'\">\n              <cd-helper i18n>Default zone can only exist in a default zone group.\n              </cd-helper>\n            </span>\n            <span *ngIf=\"isDefaultZone\">\n              <cd-helper i18n>You cannot unset the default flag.\n              </cd-helper>\n            </span>\n            <cd-helper *ngIf=\"action === 'edit' && !isDefaultZone\">\n              <span i18n>Please consult the&nbsp;<cd-doc section=\"rgw-multisite\"></cd-doc>&nbsp;to follow the failover mechanism</span>\n            </cd-helper><br>\n          </div>\n          <div class=\"custom-control custom-checkbox\">\n            <input class=\"form-check-input\"\n                   id=\"master_zone\"\n                   name=\"master_zone\"\n                   formControlName=\"master_zone\"\n                   [attr.disabled]=\"action === 'edit' ? true : null\"\n                   type=\"checkbox\">\n            <label class=\"form-check-label\"\n                   for=\"master_zone\"\n                   i18n>Master</label>\n            <span *ngIf=\"disableMaster\">\n              <cd-helper i18n>Master zone already exists for the selected zone group.\n              </cd-helper>\n            </span>\n            <span *ngIf=\"isMasterZone\">\n              <cd-helper i18n>You cannot unset the master flag.\n              </cd-helper>\n            </span>\n            <cd-helper *ngIf=\"action === 'edit' && !isMasterZone\">\n              <span i18n>Please consult the&nbsp;<a href=\"{{ docUrl }}\">documentation</a>&nbsp;to follow the failover mechanism</span>\n            </cd-helper>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zone_endpoints\"\n               i18n>Endpoints</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"e.g, http://ceph-node-00.com:80\"\n                 id=\"zone_endpoints\"\n                 name=\"zone_endpoints\"\n                 formControlName=\"zone_endpoints\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZoneForm.showError('zone_endpoints', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZoneForm.showError('zone_endpoints', formDir, 'invalidURL')\"\n                i18n>Please enter a valid URL.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"access_key\"\n               i18n>S3 access key\n          <cd-helper>\n            <span>To see or copy your S3 access key, go to <b>Object Gateway > Users</b> and click on your user name. In <b>Keys</b>, click <b>Show</b>. View the access key by clicking Show and copy the key by clicking <b>Copy to Clipboard</b>.</span>\n          </cd-helper>\n        </label>\n        <div class=\"cd-col-form-input\">\n          <div class=\"input-group\">\n            <input class=\"form-control\"\n                   type=\"password\"\n                   placeholder=\"DiPt4V7WWvy2njL1z6aC\"\n                   id=\"access_key\"\n                   name=\"access_key\"\n                   formControlName=\"access_key\">\n            <button type=\"button\"\n                    class=\"btn btn-light\"\n                    cdPasswordButton=\"access_key\">\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"secret_key\"\n               i18n>S3 secret key\n          <cd-helper>\n            <span>To see or copy your S3 access key, go to <b>Object Gateway > Users</b> and click on your user name. In <b>Keys</b>, click <b>Show</b>. View the secret key by clicking Show and copy the key by clicking <b>Copy to Clipboard</b>.</span>\n          </cd-helper>\n        </label>\n        <div class=\"cd-col-form-input\">\n          <div class=\"input-group\">\n            <input class=\"form-control\"\n                   type=\"password\"\n                   placeholder=\"xSZUdYky0bTctAdCEEW8ikhfBVKsBV5LFYL82vvh\"\n                   id=\"secret_key\"\n                   name=\"secret_key\"\n                   formControlName=\"secret_key\">\n            <button type=\"button\"\n                    class=\"btn btn-light\"\n                    cdPasswordButton=\"secret_key\">\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group row\"\n           *ngIf=\"action === 'edit'\">\n        <div *ngIf=\"action === 'edit'\">\n          <legend>Placement Targets</legend>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"placementTarget\"\n                   i18n>Placement target</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"placementTarget\"\n                      formControlName=\"placementTarget\"\n                      name=\"placementTarget\"\n                      (change)=\"getZonePlacementData($event.target.value)\">\n                <option *ngFor=\"let placement of placementTargets\"\n                        [value]=\"placement.name\"\n                        [selected]=\"placement.name === multisiteZoneForm.getValue('placementTarget')\">\n                {{ placement.name }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"placementDataPool\"\n                   i18n>Data pool</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"placementDataPool\"\n                      formControlName=\"placementDataPool\"\n                      [value]=\"placementDataPool\"\n                      name=\"placementDataPool\">\n                <option *ngFor=\"let pool of poolList\"\n                        [value]=\"pool.poolname\"\n                        [selected]=\"pool.poolname === multisiteZoneForm.getValue('placementDataPool')\">\n                {{ pool.poolname }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"placementIndexPool\"\n                   i18n>Index pool</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"placementIndexPool\"\n                      formControlName=\"placementIndexPool\"\n                      name=\"placementIndexPool\">\n                <option *ngFor=\"let pool of poolList\"\n                        [value]=\"pool.poolname\"\n                        [selected]=\"pool.poolname === multisiteZoneForm.getValue('placementIndexPool')\">\n                {{ pool.poolname }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"placementDataExtraPool\"\n                   i18n>Data extra pool</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"placementDataExtraPool\"\n                      formControlName=\"placementDataExtraPool\"\n                      name=\"placementDataExtraPool\">\n                <option *ngFor=\"let pool of poolList\"\n                        [value]=\"pool.poolname\"\n                        [selected]=\"pool.poolname === multisiteZoneForm.getValue('placementDataExtraPool')\">\n                {{ pool.poolname }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div>\n            <legend>Storage Classes</legend>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"storageClass\"\n                     i18n>Storage Class</label>\n              <div class=\"cd-col-form-input\">\n                <select class=\"form-select\"\n                        id=\"storageClass\"\n                        formControlName=\"storageClass\"\n                        (change)=\"getStorageClassData($event.target.value)\"\n                        name=\"storageClass\">\n                  <option *ngFor=\"let storageClass of storageClassList\"\n                          [value]=\"storageClass.key\">\n                  {{ storageClass.key }}\n                  </option>\n                </select>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"storageDataPool\"\n                     i18n>Data pool</label>\n              <div class=\"cd-col-form-input\">\n                <select class=\"form-select\"\n                        id=\"storageDataPool\"\n                        formControlName=\"storageDataPool\"\n                        name=\"storageDataPool\">\n                  <option *ngFor=\"let pool of poolList\"\n                          [value]=\"pool.poolname\"\n                          [selected]=\"pool.poolname === multisiteZoneForm.getValue('storageDataPool')\">\n                  {{ pool.poolname }}\n                  </option>\n                </select>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"storageCompression\"\n                     i18n>Compression</label>\n              <div class=\"cd-col-form-input\">\n                <select class=\"form-select\"\n                        id=\"storageCompression\"\n                        formControlName=\"storageCompression\"\n                        name=\"storageCompression\">\n                  <option *ngFor=\"let compression of compressionTypes\"\n                          [value]=\"compression\">\n                  {{ compression }}\n                  </option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"multisiteZoneForm\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm, RgwZone, RgwZonegroup, SystemKey } from '../models/rgw-multisite';\nimport { ModalService } from '~/app/shared/services/modal.service';\n\n@Component({\n  selector: 'cd-rgw-multisite-zone-form',\n  templateUrl: './rgw-multisite-zone-form.component.html',\n  styleUrls: ['./rgw-multisite-zone-form.component.scss']\n})\nexport class RgwMultisiteZoneFormComponent implements OnInit {\n  action: string;\n  info: any;\n  multisiteZoneForm: CdFormGroup;\n  editing = false;\n  resource: string;\n  realm: RgwRealm;\n  zonegroup: RgwZonegroup;\n  zone: RgwZone;\n  defaultsInfo: string[] = [];\n  multisiteInfo: object[] = [];\n  zonegroupList: RgwZonegroup[] = [];\n  zoneList: RgwZone[] = [];\n  zoneNames: string[];\n  users: any;\n  placementTargets: any;\n  zoneInfo: RgwZone;\n  poolList: object[] = [];\n  storageClassList: object[] = [];\n  disableDefault: boolean = false;\n  disableMaster: boolean = false;\n  isMetadataSync: boolean = false;\n  isMasterZone: boolean;\n  isDefaultZone: boolean;\n  syncStatusTimedOut: boolean = false;\n  bsModalRef: NgbModalRef;\n  createSystemUser: boolean = false;\n  master_zone_of_master_zonegroup: RgwZone;\n  masterZoneUser: any;\n  access_key: any;\n  master_zonegroup_of_realm: RgwZonegroup;\n  compressionTypes = ['lz4', 'zlib', 'snappy'];\n  userListReady: boolean = false;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwMultisiteService: RgwMultisiteService,\n    public rgwZoneService: RgwZoneService,\n    public rgwZoneGroupService: RgwZonegroupService,\n    public notificationService: NotificationService,\n    public rgwUserService: RgwUserService,\n    public modalService: ModalService\n  ) {\n    this.action = this.editing\n      ? this.actionLabels.EDIT + this.resource\n      : this.actionLabels.CREATE + this.resource;\n    this.createForm();\n  }\n\n  createForm() {\n    this.multisiteZoneForm = new CdFormGroup({\n      zoneName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (zoneName: string) => {\n            return (\n              this.action === 'create' && this.zoneNames && this.zoneNames.indexOf(zoneName) !== -1\n            );\n          })\n        ]\n      }),\n      default_zone: new UntypedFormControl(false),\n      master_zone: new UntypedFormControl(false),\n      selectedZonegroup: new UntypedFormControl(null),\n      zone_endpoints: new UntypedFormControl(null, {\n        validators: [CdValidators.url, Validators.required]\n      }),\n      access_key: new UntypedFormControl('', {}),\n      secret_key: new UntypedFormControl('', {}),\n      placementTarget: new UntypedFormControl(null),\n      placementDataPool: new UntypedFormControl(''),\n      placementIndexPool: new UntypedFormControl(null),\n      placementDataExtraPool: new UntypedFormControl(null),\n      storageClass: new UntypedFormControl(null),\n      storageDataPool: new UntypedFormControl(null),\n      storageCompression: new UntypedFormControl(null)\n    });\n  }\n\n  onZoneGroupChange(zonegroupName: string) {\n    let zg = new RgwZonegroup();\n    zg.name = zonegroupName;\n    this.rgwZoneGroupService.get(zg).subscribe((zonegroup: RgwZonegroup) => {\n      if (_.isEmpty(zonegroup.master_zone)) {\n        this.multisiteZoneForm.get('master_zone').setValue(true);\n        this.multisiteZoneForm.get('master_zone').disable();\n        this.disableMaster = false;\n      } else if (!_.isEmpty(zonegroup.master_zone) && this.action === 'create') {\n        this.multisiteZoneForm.get('master_zone').setValue(false);\n        this.multisiteZoneForm.get('master_zone').disable();\n        this.disableMaster = true;\n      }\n    });\n    if (\n      this.multisiteZoneForm.getValue('selectedZonegroup') !==\n      this.defaultsInfo['defaultZonegroupName']\n    ) {\n      this.disableDefault = true;\n      this.multisiteZoneForm.get('default_zone').disable();\n    }\n  }\n\n  ngOnInit(): void {\n    this.zonegroupList =\n      this.multisiteInfo[1] !== undefined && this.multisiteInfo[1].hasOwnProperty('zonegroups')\n        ? this.multisiteInfo[1]['zonegroups']\n        : [];\n    this.zoneList =\n      this.multisiteInfo[2] !== undefined && this.multisiteInfo[2].hasOwnProperty('zones')\n        ? this.multisiteInfo[2]['zones']\n        : [];\n    this.zoneNames = this.zoneList.map((zone) => {\n      return zone['name'];\n    });\n    if (this.action === 'create') {\n      if (this.defaultsInfo['defaultZonegroupName'] !== undefined) {\n        this.multisiteZoneForm\n          .get('selectedZonegroup')\n          .setValue(this.defaultsInfo['defaultZonegroupName']);\n        this.onZoneGroupChange(this.defaultsInfo['defaultZonegroupName']);\n      }\n    }\n    if (this.action === 'edit') {\n      this.placementTargets =\n        this.info.data?.parent || this.info.parent\n          ? (this.info.data?.parentNode || this.info.parent.data)?.placement_targets\n          : [];\n      this.rgwZoneService.getPoolNames().subscribe((pools: object[]) => {\n        this.poolList = pools;\n      });\n      this.multisiteZoneForm.get('zoneName').setValue(this.info.data.name);\n      this.multisiteZoneForm.get('selectedZonegroup').setValue(this.info.data.parent);\n      this.multisiteZoneForm.get('default_zone').setValue(this.info.data.is_default);\n      this.multisiteZoneForm.get('master_zone').setValue(this.info.data.is_master);\n      this.multisiteZoneForm.get('zone_endpoints').setValue(this.info.data.endpoints.toString());\n      this.multisiteZoneForm.get('access_key').setValue(this.info.data.access_key);\n      this.multisiteZoneForm.get('secret_key').setValue(this.info.data.secret_key);\n      this.multisiteZoneForm\n        .get('placementTarget')\n        .setValue((this.info.data?.parentNode || this.info.parent.data)?.default_placement);\n      this.getZonePlacementData(this.multisiteZoneForm.getValue('placementTarget'));\n      if (this.info.data.is_default) {\n        this.isDefaultZone = true;\n        this.multisiteZoneForm.get('default_zone').disable();\n      }\n      if (this.info.data.is_master) {\n        this.isMasterZone = true;\n        this.multisiteZoneForm.get('master_zone').disable();\n      }\n      const zone = new RgwZone();\n      zone.name = this.info.data.name;\n      this.onZoneGroupChange(this.info.data.parent);\n    }\n    if (\n      this.multisiteZoneForm.getValue('selectedZonegroup') !==\n      this.defaultsInfo['defaultZonegroupName']\n    ) {\n      this.disableDefault = true;\n      this.multisiteZoneForm.get('default_zone').disable();\n    }\n  }\n\n  getZonePlacementData(placementTarget: string) {\n    this.zone = new RgwZone();\n    this.zone.name = this.info.data.name;\n    this.rgwZoneService.get(this.zone).subscribe((zoneInfo: RgwZone) => {\n      this.zoneInfo = zoneInfo;\n      if (this.zoneInfo && this.zoneInfo['placement_pools']) {\n        const placementPoolKeys = this.zoneInfo['placement_pools'].map((plc_pool) => plc_pool.key);\n        this.placementTargets = this.placementTargets.filter((placement: { name: string }) =>\n          placementPoolKeys.includes(placement.name)\n        );\n        this.zoneInfo['placement_pools'].forEach((plc_pool) => {\n          if (plc_pool.key === placementTarget) {\n            let storageClasses = plc_pool.val.storage_classes;\n            this.storageClassList = Object.entries(storageClasses).map(([key, value]) => ({\n              key,\n              value\n            }));\n            let placementDataPool = storageClasses['STANDARD']\n              ? storageClasses['STANDARD']['data_pool']\n              : '';\n            let placementIndexPool = plc_pool.val.index_pool;\n            let placementDataExtraPool = plc_pool.val.data_extra_pool;\n            this.poolList.push({ poolname: placementDataPool });\n            this.poolList.push({ poolname: placementIndexPool });\n            this.poolList.push({ poolname: placementDataExtraPool });\n            this.multisiteZoneForm.get('storageClass').setValue(this.storageClassList[0]['key']);\n            this.getStorageClassData(this.storageClassList[0]['key']);\n            this.multisiteZoneForm.get('placementDataPool').setValue(placementDataPool);\n            this.multisiteZoneForm.get('placementIndexPool').setValue(placementIndexPool);\n            this.multisiteZoneForm.get('placementDataExtraPool').setValue(placementDataExtraPool);\n          }\n        });\n      }\n    });\n  }\n\n  getStorageClassData(storageClass: string) {\n    let storageClassSelected = this.storageClassList.find((sc) => sc['key'] === storageClass);\n    this.poolList.push({ poolname: storageClassSelected['value']['data_pool'] });\n    this.multisiteZoneForm\n      .get('storageDataPool')\n      .setValue(storageClassSelected['value']['data_pool']);\n    this.multisiteZoneForm\n      .get('storageCompression')\n      .setValue(storageClassSelected['value']['compression_type']);\n  }\n\n  submit() {\n    const values = this.multisiteZoneForm.getRawValue();\n    if (this.action === 'create') {\n      this.zonegroup = new RgwZonegroup();\n      this.zonegroup.name = values['selectedZonegroup'];\n      this.zone = new RgwZone();\n      this.zone.name = values['zoneName'];\n      this.zone.endpoints = values['zone_endpoints'];\n      this.zone.system_key = new SystemKey();\n      this.zone.system_key.access_key = values['access_key'];\n      this.zone.system_key.secret_key = values['secret_key'];\n      this.rgwZoneService\n        .create(\n          this.zone,\n          this.zonegroup,\n          values['default_zone'],\n          values['master_zone'],\n          this.zone.endpoints\n        )\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Zone: '${values['zoneName']}' created successfully`\n            );\n            this.activeModal.close();\n          },\n          () => {\n            this.multisiteZoneForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    } else if (this.action === 'edit') {\n      this.zonegroup = new RgwZonegroup();\n      this.zonegroup.name = values['selectedZonegroup'];\n      this.zone = new RgwZone();\n      this.zone.name = this.info.data.name;\n      this.zone.endpoints = values['zone_endpoints'];\n      this.zone.system_key = new SystemKey();\n      this.zone.system_key.access_key = values['access_key'];\n      this.zone.system_key.secret_key = values['secret_key'];\n      this.rgwZoneService\n        .update(\n          this.zone,\n          this.zonegroup,\n          values['zoneName'],\n          values['default_zone'],\n          values['master_zone'],\n          this.zone.endpoints,\n          values['placementTarget'],\n          values['placementDataPool'],\n          values['placementIndexPool'],\n          values['placementDataExtraPool'],\n          values['storageClass'],\n          values['storageDataPool'],\n          values['storageCompression']\n        )\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Zone: '${values['zoneName']}' updated successfully`\n            );\n            this.activeModal.close();\n          },\n          () => {\n            this.multisiteZoneForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    }\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} Zone Group</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"multisiteZonegroupForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"multisiteZonegroupForm\"\n          novalidate>\n    <div class=\"modal-body\">\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label\"\n               for=\"selectedRealm\"\n               i18n>Select Realm</label>\n        <div class=\"cd-col-form-input\">\n          <select class=\"form-select\"\n                  id=\"selectedRealm\"\n                  formControlName=\"selectedRealm\"\n                  name=\"selectedRealm\">\n          <option ngValue=\"\"\n                  i18n>-- Select a realm --</option>\n          <option *ngFor=\"let realmName of realmList\"\n                  [value]=\"realmName.name\"\n                  [selected]=\"realmName.name === multisiteZonegroupForm.getValue('selectedRealm')\">\n                {{ realmName.name }}\n          </option>\n          </select>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroupName\"\n               i18n>Zone Group Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone group name...\"\n                 id=\"zonegroupName\"\n                 name=\"zonegroupName\"\n                 formControlName=\"zonegroupName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZonegroupForm.showError('zonegroupName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"multisiteZonegroupForm.showError('zonegroupName', formDir, 'uniqueName')\"\n                i18n>The chosen zone group name is already in use.</span>\n        <div class=\"custom-control custom-checkbox\">\n          <input class=\"form-check-input\"\n                 id=\"default_zonegroup\"\n                 name=\"default_zonegroup\"\n                 formControlName=\"default_zonegroup\"\n                 [attr.disabled]=\"action === 'edit' ? true : null\"\n                 type=\"checkbox\">\n          <label class=\"form-check-label\"\n                 for=\"default_zonegroup\"\n                 i18n>Default</label>\n          <span *ngIf=\"disableDefault && action === 'create'\">\n            <cd-helper i18n>Zone group doesn't belong to the default realm.</cd-helper>\n          </span>\n          <cd-helper *ngIf=\"action === 'edit' && !info.data.is_default\">\n            <span i18n>Please consult the&nbsp;<cd-doc section=\"rgw-multisite\"></cd-doc>&nbsp;to follow the failover mechanism</span>\n          </cd-helper>\n          <cd-helper *ngIf=\"action === 'edit' && info.data.is_default\">\n            <span i18n>You cannot unset the default flag.</span>\n          </cd-helper><br>\n          <input class=\"form-check-input\"\n                 id=\"master_zonegroup\"\n                 name=\"master_zonegroup\"\n                 formControlName=\"master_zonegroup\"\n                 [attr.disabled]=\"action === 'edit' ? true : null\"\n                 type=\"checkbox\">\n          <label class=\"form-check-label\"\n                 for=\"master_zonegroup\"\n                 i18n>Master</label>\n          <span *ngIf=\"disableMaster && action === 'create'\">\n            <cd-helper i18n>Multiple master zone groups can't be configured. If you want to create a new zone group and make it the master zone group, you must delete the default zone group.</cd-helper>\n          </span>\n          <cd-helper *ngIf=\"action === 'edit' && !info.data.is_master\">\n            <span i18n>Please consult the&nbsp;<cd-doc section=\"rgw-multisite\"></cd-doc>&nbsp;to follow the failover mechanism</span>\n          </cd-helper>\n          <cd-helper *ngIf=\"action === 'edit' && info.data.is_master\">\n            <span i18n>You cannot unset the master flag.</span>\n          </cd-helper>\n        </div>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroup_endpoints\"\n               i18n>Endpoints</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"e.g, http://ceph-node-00.com:80\"\n                 id=\"zonegroup_endpoints\"\n                 name=\"zonegroup_endpoints\"\n                 formControlName=\"zonegroup_endpoints\">\n        <span class=\"invalid-feedback\"\n              *ngIf=\"multisiteZonegroupForm.showError('zonegroup_endpoints', formDir, 'required')\"\n              i18n>This field is required.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"multisiteZonegroupForm.showError('zonegroup_endpoints', formDir, 'invalidURL')\"\n              i18n>Please enter a valid URL.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\"\n           *ngIf=\"action === 'edit'\">\n        <label i18n\n               for=\"zones\"\n               class=\"cd-col-form-label\">Zones</label>\n        <div class=\"cd-col-form-input\">\n          <cd-select-badges id=\"zones\"\n                            [data]=\"zonegroupZoneNames\"\n                            [options]=\"labelsOption\"\n                            [customBadges]=\"true\">\n          </cd-select-badges><br>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"isRemoveMasterZone\"\n                i18n>Cannot remove master zone.</span>\n        </div>\n      </div>\n      <div *ngIf=\"action === 'edit'\">\n        <legend>Placement targets</legend>\n        <ng-container formArrayName=\"placementTargets\">\n          <div *ngFor=\"let item of placementTargets.controls; let index = index; trackBy: trackByFn\">\n            <div class=\"card\"\n                 [formGroup]=\"item\">\n              <div class=\"card-header\">\n                {{ (index + 1) | ordinal }}\n                <span class=\"float-end clickable\"\n                      name=\"remove_placement_target\"\n                      (click)=\"removePlacementTarget(index)\"\n                      ngbTooltip=\"Remove\">&times;</span>\n              </div>\n\n              <div class=\"card-body\">\n                <!-- Placement Id -->\n                <div class=\"form-group row\">\n                  <label i18n\n                         class=\"cd-col-form-label required\"\n                         for=\"placement_id\">Placement Id</label>\n                  <div class=\"cd-col-form-input\">\n                    <input type=\"text\"\n                           class=\"form-control\"\n                           name=\"placement_id\"\n                           id=\"placement_id\"\n                           formControlName=\"placement_id\"\n                           placeholder=\"eg. default-placement\">\n                    <span class=\"invalid-feedback\">\n                      <span *ngIf=\"showError(index, 'placement_id', formDir, 'required')\"\n                            i18n>This field is required.</span>\n                    </span>\n                  </div>\n                </div>\n\n                <!-- Tags-->\n                <div class=\"form-group row\">\n                  <label i18n\n                         class=\"cd-col-form-label\"\n                         for=\"tags\">Tags</label>\n                  <div class=\"cd-col-form-input\">\n                    <input type=\"text\"\n                           class=\"form-control\"\n                           name=\"tags\"\n                           id=\"tags\"\n                           formControlName=\"tags\"\n                           placeholder=\"comma separated tags, eg. default-placement, ssd\">\n                  </div>\n                </div>\n\n                <!-- Storage Class -->\n                <div class=\"form-group row\">\n                  <label i18n\n                         class=\"cd-col-form-label\"\n                         for=\"storage_class\">Storage Class</label>\n                  <div class=\"cd-col-form-input\">\n                    <input type=\"text\"\n                           class=\"form-control\"\n                           name=\"storage_class\"\n                           id=\"storage_class\"\n                           formControlName=\"storage_class\"\n                           placeholder=\"eg. Standard-tier\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n        <button type=\"button\"\n                id=\"add-plc\"\n                class=\"btn btn-light float-end my-3\"\n                (click)=\"addPlacementTarget()\">\n          <svg [cdsIcon]=\"icons.add\"\n               [size]=\"icons.size16\"\n               class=\"cds-info-color\">\n          </svg>\n          <ng-container i18n>Add placement target</ng-container>\n        </button>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"multisiteZonegroupForm\"\n                            [submitText]=\"(action | titlecase) + ' ' + 'Zone Group'\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  UntypedFormArray,\n  UntypedFormBuilder,\n  UntypedFormControl,\n  NgForm,\n  Validators\n} from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm, RgwZone, RgwZonegroup } from '../models/rgw-multisite';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\n\n@Component({\n  selector: 'cd-rgw-multisite-zonegroup-form',\n  templateUrl: './rgw-multisite-zonegroup-form.component.html',\n  styleUrls: ['./rgw-multisite-zonegroup-form.component.scss']\n})\nexport class RgwMultisiteZonegroupFormComponent implements OnInit {\n  action: string;\n  icons = Icons;\n  multisiteZonegroupForm: CdFormGroup;\n  editing = false;\n  resource: string;\n  realm: RgwRealm;\n  zonegroup: RgwZonegroup;\n  info: any;\n  defaultsInfo: string[] = [];\n  multisiteInfo: object[] = [];\n  realmList: RgwRealm[] = [];\n  zonegroupList: RgwZonegroup[] = [];\n  zonegroupNames: string[];\n  isMaster = false;\n  placementTargets: UntypedFormArray;\n  newZonegroupName: string;\n  zonegroupZoneNames: string[];\n  labelsOption: Array<SelectOption> = [];\n  zoneList: RgwZone[] = [];\n  allZoneNames: string[];\n  zgZoneNames: string[];\n  zgZoneIds: string[];\n  removedZones: string[];\n  isRemoveMasterZone = false;\n  addedZones: string[];\n  disableDefault = false;\n  disableMaster = false;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwZonegroupService: RgwZonegroupService,\n    public notificationService: NotificationService,\n    private formBuilder: UntypedFormBuilder\n  ) {\n    this.action = this.editing\n      ? this.actionLabels.EDIT + this.resource\n      : this.actionLabels.CREATE + this.resource;\n    this.createForm();\n  }\n\n  createForm() {\n    this.multisiteZonegroupForm = new CdFormGroup({\n      default_zonegroup: new UntypedFormControl(false),\n      zonegroupName: new UntypedFormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (zonegroupName: string) => {\n            return (\n              this.action === 'create' &&\n              this.zonegroupNames &&\n              this.zonegroupNames.indexOf(zonegroupName) !== -1\n            );\n          })\n        ]\n      }),\n      master_zonegroup: new UntypedFormControl(false),\n      selectedRealm: new UntypedFormControl(null),\n      zonegroup_endpoints: new UntypedFormControl(null, {\n        validators: [CdValidators.url, Validators.required]\n      }),\n      placementTargets: this.formBuilder.array([])\n    });\n  }\n\n  ngOnInit(): void {\n    _.forEach(this.multisiteZonegroupForm.get('placementTargets'), (placementTarget) => {\n      const fg = this.addPlacementTarget();\n      fg.patchValue(placementTarget);\n    });\n    this.placementTargets = this.multisiteZonegroupForm.get('placementTargets') as UntypedFormArray;\n    this.realmList =\n      this.multisiteInfo[0] !== undefined && this.multisiteInfo[0].hasOwnProperty('realms')\n        ? this.multisiteInfo[0]['realms']\n        : [];\n    this.zonegroupList =\n      this.multisiteInfo[1] !== undefined && this.multisiteInfo[1].hasOwnProperty('zonegroups')\n        ? this.multisiteInfo[1]['zonegroups']\n        : [];\n    this.zonegroupList.forEach((zgp: any) => {\n      if (zgp.is_master === true && !_.isEmpty(zgp.realm_id)) {\n        this.isMaster = true;\n        this.disableMaster = true;\n      }\n    });\n    if (!this.isMaster) {\n      this.multisiteZonegroupForm.get('master_zonegroup').setValue(true);\n      this.multisiteZonegroupForm.get('master_zonegroup').disable();\n    }\n    this.zoneList =\n      this.multisiteInfo[2] !== undefined && this.multisiteInfo[2].hasOwnProperty('zones')\n        ? this.multisiteInfo[2]['zones']\n        : [];\n    this.zonegroupNames = this.zonegroupList.map((zonegroup) => {\n      return zonegroup['name'];\n    });\n    let allZonegroupZonesList = this.zonegroupList.map((zonegroup: RgwZonegroup) => {\n      return zonegroup['zones'];\n    });\n    const allZonegroupZonesInfo = allZonegroupZonesList.reduce(\n      (accumulator, value) => accumulator.concat(value),\n      []\n    );\n    const allZonegroupZonesNames = allZonegroupZonesInfo.map((zone) => {\n      return zone['name'];\n    });\n    this.allZoneNames = this.zoneList.map((zone: RgwZone) => {\n      return zone['name'];\n    });\n    this.allZoneNames = _.difference(this.allZoneNames, allZonegroupZonesNames);\n    if (this.action === 'create' && this.defaultsInfo['defaultRealmName'] !== null) {\n      this.multisiteZonegroupForm\n        .get('selectedRealm')\n        .setValue(this.defaultsInfo['defaultRealmName']);\n      if (this.disableMaster) {\n        this.multisiteZonegroupForm.get('master_zonegroup').disable();\n      }\n    }\n    if (this.action === 'edit') {\n      this.multisiteZonegroupForm.get('zonegroupName').setValue(this.info.data.name);\n      this.multisiteZonegroupForm.get('selectedRealm').setValue(this.info.data.parent);\n      this.multisiteZonegroupForm.get('default_zonegroup').setValue(this.info.data.is_default);\n      this.multisiteZonegroupForm.get('master_zonegroup').setValue(this.info.data.is_master);\n      this.multisiteZonegroupForm\n        .get('zonegroup_endpoints')\n        .setValue(this.info.data.endpoints.toString());\n\n      if (this.info.data.is_default) {\n        this.multisiteZonegroupForm.get('default_zonegroup').disable();\n      }\n      if (\n        !this.info.data.is_default &&\n        this.multisiteZonegroupForm.getValue('selectedRealm') !==\n          this.defaultsInfo['defaultRealmName']\n      ) {\n        this.multisiteZonegroupForm.get('default_zonegroup').disable();\n        this.disableDefault = true;\n      }\n      if (this.info.data.is_master || this.disableMaster) {\n        this.multisiteZonegroupForm.get('master_zonegroup').disable();\n      }\n\n      this.zonegroupZoneNames = this.info.data.zones.map((zone: { [x: string]: any }) => {\n        return zone['name'];\n      });\n      this.zgZoneNames = this.info.data.zones.map((zone: { [x: string]: any }) => {\n        return zone['name'];\n      });\n      this.zgZoneIds = this.info.data.zones.map((zone: { [x: string]: any }) => {\n        return zone['id'];\n      });\n      const uniqueZones = new Set(this.allZoneNames);\n      this.labelsOption = Array.from(uniqueZones).map((zone) => {\n        return { enabled: true, name: zone, selected: false, description: null };\n      });\n\n      this.info.data.placement_targets.forEach((target: object) => {\n        const fg = this.addPlacementTarget();\n        let data = {\n          placement_id: target['name'],\n          tags: target['tags'].join(','),\n          storage_class:\n            typeof target['storage_classes'] === 'string'\n              ? target['storage_classes']\n              : target['storage_classes'].join(',')\n        };\n        fg.patchValue(data);\n      });\n    }\n  }\n\n  submit() {\n    const values = this.multisiteZonegroupForm.getRawValue();\n    if (this.action === 'create') {\n      this.realm = new RgwRealm();\n      this.realm.name = values['selectedRealm'];\n      this.zonegroup = new RgwZonegroup();\n      this.zonegroup.name = values['zonegroupName'];\n      this.zonegroup.endpoints = values['zonegroup_endpoints'];\n      this.rgwZonegroupService\n        .create(this.realm, this.zonegroup, values['default_zonegroup'], values['master_zonegroup'])\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Zonegroup: '${values['zonegroupName']}' created successfully`\n            );\n            this.activeModal.close();\n          },\n          () => {\n            this.multisiteZonegroupForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    } else if (this.action === 'edit') {\n      this.removedZones = _.difference(this.zgZoneNames, this.zonegroupZoneNames);\n      const masterZoneName = this.info.data.zones.filter(\n        (zone: any) => zone.id === this.info.data.master_zone\n      );\n      this.isRemoveMasterZone = this.removedZones.includes(masterZoneName[0].name);\n      if (this.isRemoveMasterZone) {\n        this.multisiteZonegroupForm.setErrors({ cdSubmitButton: true });\n        return;\n      }\n      this.addedZones = _.difference(this.zonegroupZoneNames, this.zgZoneNames);\n      this.realm = new RgwRealm();\n      this.realm.name = values['selectedRealm'];\n      this.zonegroup = new RgwZonegroup();\n      this.zonegroup.name = this.info.data.name;\n      this.newZonegroupName = values['zonegroupName'];\n      this.zonegroup.endpoints = values['zonegroup_endpoints'].toString();\n      this.zonegroup.placement_targets = values['placementTargets'];\n      this.rgwZonegroupService\n        .update(\n          this.realm,\n          this.zonegroup,\n          this.newZonegroupName,\n          values['default_zonegroup'],\n          values['master_zonegroup'],\n          this.removedZones,\n          this.addedZones\n        )\n        .subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Zonegroup: '${values['zonegroupName']}' updated successfully`\n            );\n            this.activeModal.close();\n          },\n          () => {\n            this.multisiteZonegroupForm.setErrors({ cdSubmitButton: true });\n          }\n        );\n    }\n  }\n\n  addPlacementTarget() {\n    this.placementTargets = this.multisiteZonegroupForm.get('placementTargets') as UntypedFormArray;\n    const fg = new CdFormGroup({\n      placement_id: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      tags: new UntypedFormControl(''),\n      storage_class: new UntypedFormControl([])\n    });\n    this.placementTargets.push(fg);\n    return fg;\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n\n  removePlacementTarget(index: number) {\n    this.placementTargets = this.multisiteZonegroupForm.get('placementTargets') as UntypedFormArray;\n    this.placementTargets.removeAt(index);\n  }\n\n  showError(index: number, control: string, formDir: NgForm, x: string) {\n    return (<any>this.multisiteZonegroupForm.controls.placementTargets).controls[index].showError(\n      control,\n      formDir,\n      x\n    );\n  }\n}\n","export enum StepTitles {\n  CreateRealmAndZonegroup = 'Create Realm & Zonegroup',\n  CreateZone = 'Create Zone',\n  SelectCluster = 'Select Cluster',\n  Review = 'Review'\n}\n\nexport const STEP_TITLES_MULTI_CLUSTER_CONFIGURED = [\n  StepTitles.CreateRealmAndZonegroup,\n  StepTitles.CreateZone,\n  StepTitles.SelectCluster,\n  StepTitles.Review\n];\n\nexport const STEP_TITLES_SINGLE_CLUSTER = [\n  StepTitles.CreateRealmAndZonegroup,\n  StepTitles.CreateZone,\n  StepTitles.Review\n];\n\nexport const STEP_TITLES_EXISTING_REALM = [\n  StepTitles.CreateRealmAndZonegroup,\n  StepTitles.SelectCluster,\n  StepTitles.Review\n];\n","\n<cds-modal size=\"lg\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        data-testid=\"rgw-multisite-wizard-header\"\n        i18n>Set up Multi-site Replication</h3>\n  </cds-modal-header>\n\n  <div cdsModalContent>\n    <div cdsRow>\n      <div cdsCol\n           [columnNumbers]=\"{'lg': 2, 'md': 2, 'sm': 2}\"\n           class=\"indicator-wrapper\">\n        <cd-wizard [stepsTitle]=\"stepTitles\"></cd-wizard>\n      </div>\n\n      <div cdsCol\n           [columnNumbers]=\"{'lg': 14, 'md': 14, 'sm': 14}\">\n        <form [formGroup]=\"multisiteSetupForm\"\n              #formDir=\"ngForm\"\n              novalidate>\n          <ng-container [ngSwitch]=\"currentStep?.stepIndex\">\n            <div *ngSwitchCase=\"0\"\n                 class=\"ms-5\">\n              <cd-alert-panel type=\"info\"\n                              spacingClass=\"mb-3\">\n                  This wizard enables you to set up multi-site replication within your\n                  Ceph environment.If you have already added another cluster to your\n                  multi-cluster setup, you can select that cluster in the wizard to\n                  automate the replication process.If no additional cluster is currently\n                  added, the wizard will guide you through creating the necessary realm,\n                  zonegroup, and zone, and provide a realm token.This token can be used\n                  later to manually import into a desired cluster to establish replication\n                  between the clusters.\n              </cd-alert-panel>\n              <div class=\"form-group row\"\n                   *ngIf=\"showConfigType && isMultiClusterConfigured\">\n                <label class=\"cd-col-form-label required\"\n                       for=\"configType\"\n                       i18n>Realm configuration mode</label>\n                <div class=\"col-md-auto custom-checkbox form-check-inline  ms-3\">\n                  <input class=\"form-check-input\"\n                         formControlName=\"configType\"\n                         id=\"newRealm\"\n                         value=\"newRealm\"\n                         (change)=\"onConfigTypeChange()\"\n                         type=\"radio\">\n                  <label class=\"custom-check-label\"\n                         for=\"newRealm\"\n                         i18n>Create new realm/zonegroup/zone</label>\n                </div>\n                <div class=\"col-md-auto custom-checkbox form-check-inline\">\n                  <input class=\"form-check-input\"\n                         formControlName=\"configType\"\n                         id=\"existingRealm\"\n                         type=\"radio\"\n                         (change)=\"onConfigTypeChange()\"\n                         value=\"existingRealm\">\n                  <label class=\"custom-check-label\"\n                         for=\"existingRealm\"\n                         i18n>Select existing realm</label>\n                </div>\n              </div>\n              <div class=\"form-group row\"\n                   *ngIf=\"multisiteSetupForm.get('configType').value === 'existingRealm' && showConfigType && isMultiClusterConfigured\">\n                <label class=\"cd-col-form-label\"\n                       for=\"selectedRealm\"\n                       i18n>Select Realm</label>\n                <div class=\"cd-col-form-input\">\n                  <select class=\"form-select\"\n                          id=\"selectedRealm\"\n                          formControlName=\"selectedRealm\">\n                  <option *ngFor=\"let realm of realmList\"\n                          [value]=\"realm\">\n                        {{ realm }}\n                  </option>\n                  </select>\n                </div>\n              </div>\n              <div *ngIf=\"multisiteSetupForm.get('configType').value === 'newRealm' || !showConfigType\">\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"realmName\"\n                         i18n>Realm Name</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           id=\"realmName\"\n                           formControlName=\"realmName\">\n                    <cd-help-text>\n                      <span i18n>Enter a unique name for the Realm. The Realm is a logical grouping of all your Zonegroups.</span>\n                    </cd-help-text>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('realmName', formDir, 'required')\"\n                          i18n>This field is required.</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('realmName', formDir, 'uniqueName')\"\n                          i18n>This realm name is already in use. Choose a unique name.</span>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"zonegroupName\"\n                         i18n>Zone Group Name</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           id=\"zonegroupName\"\n                           formControlName=\"zonegroupName\">\n                    <cd-help-text>\n                      <span i18n>Enter a name for the Zonegroup. Zonegroup will help you identify and manage the group of zones.</span>\n                    </cd-help-text>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('zonegroupName', formDir, 'required')\"\n                          i18n>This field is required.</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('zonegroupName', formDir, 'uniqueName')\"\n                          i18n>This zonegroup name is already in use. Choose a unique name.</span>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"zonegroup_endpoints\"\n                         i18n>Zonegroup Endpoints</label>\n                  <div class=\"cd-col-form-input\">\n                    <cd-select-badges id=\"zonegroup_endpoints\"\n                                      [data]=\"rgwEndpoints.value\"\n                                      [options]=\"rgwEndpoints.options\"\n                                      [customBadges]=\"true\">\n                    </cd-select-badges>\n                    <cd-help-text>\n                      <span i18n>Select the endpoints for the Zonegroup. Endpoints are the URLs or IP addresses from which the rgw gateways in that zonegroup can be accessed. You can select multiple endpoints in case you have multiple rgw gateways in a zonegroup</span>\n                    </cd-help-text>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ng-container *ngSwitchCase=\"1\">\n              <div *ngIf=\"multisiteSetupForm.get('configType').value === 'newRealm'\"\n                   class=\"ms-5\">\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"zonegroupName\"\n                         i18n>Zone Name</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           id=\"zoneName\"\n                           formControlName=\"zoneName\">\n                    <cd-help-text>\n                      <span i18n>Enter a unique name for the Zone. A Zone represents a distinct data center or geographical location within a Zonegroup.</span>\n                    </cd-help-text>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('zoneName', formDir, 'required')\"\n                          i18n>This field is required.</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('zoneName', formDir, 'uniqueName')\"\n                          i18n>This zone name is already in use. Choose a unique name.</span>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"zone_endpoints\"\n                         i18n>Zone Endpoints</label>\n                  <div class=\"cd-col-form-input\">\n                    <cd-select-badges id=\"zone_endpoints\"\n                                      [data]=\"rgwEndpoints.value\"\n                                      [options]=\"rgwEndpoints.options\"\n                                      [customBadges]=\"true\"></cd-select-badges>\n                    <cd-help-text>\n                      <span i18n>Select the endpoints for the Zone. Endpoints are the URLs or IP addresses from which the rgw gateways in that zone can be accessed. You can select multiple endpoints in case you have multiple rgw gateways in a zone</span>\n                    </cd-help-text>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"username\"\n                         i18n>Username</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           id=\"username\"\n                           formControlName=\"username\"\n                           ngbTooltip=\"White spaces at the beginning and end will be trimmed\"\n                           i18n-ngbTooltip\n                           cdTrim>\n                    <cd-help-text>\n                      <span i18n>Specify the username for the system user.</span>\n                    </cd-help-text>\n                    <cd-alert-panel type=\"info\"\n                                    [showTitle]=\"false\">\n                      <span i18n>This user will be created automatically as part of the process, and it will have the necessary permissions to manage and synchronize resources across zones.</span>\n                    </cd-alert-panel>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('username', formDir, 'required')\"\n                          i18n>This field is required.</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"multisiteSetupForm.showError('username', formDir, 'notUnique')\"\n                          i18n>This username is already in use. Choose a unique name.</span>\n                  </div>\n                </div>\n              </div>\n              <div *ngIf=\"isMultiClusterConfigured && (multisiteSetupForm.get('configType').value === 'existingRealm')\"\n                   class=\"ms-5\">\n                <ng-container *ngTemplateOutlet=\"replicationTemplate\"></ng-container>\n              </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"2\">\n              <div *ngIf=\"multisiteSetupForm.get('configType').value === 'newRealm'\"\n                   class=\"ms-5\">\n                <ng-container *ngIf=\"isMultiClusterConfigured; else newRealmReviewTemplate\">\n                  <ng-container *ngTemplateOutlet=\"replicationTemplate\"></ng-container>\n                </ng-container>\n              </div>\n              <div *ngIf=\"multisiteSetupForm.get('configType').value === 'existingRealm' && isMultiClusterConfigured\"\n                   class=\"ms-5\">\n                <ng-container *ngIf=\"!loading; else loadingTemplate\">\n                  <ng-container *ngIf=\"!setupCompleted; else progressCompleteTemplate\">\n                    <ng-container *ngTemplateOutlet=\"reviewTemplate\"></ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </ng-container>\n            <ng-template #newRealmReviewTemplate>\n              <ng-container *ngTemplateOutlet=\"reviewTemplate\"></ng-container>\n            </ng-template>\n            <ng-template #replicationTemplate>\n              <div class=\"form-group row\">\n                <label class=\"cd-col-form-label required\"\n                       for=\"cluster\"\n                       i18n>Replication Cluster</label>\n                <div class=\"cd-col-form-input\">\n                  <select class=\"form-select\"\n                          id=\"cluster\"\n                          [(ngModel)]=\"selectedCluster\"\n                          formControlName=\"cluster\"\n                          name=\"cluster\">\n                    <option *ngFor=\"let cluster_detail of clusterDetailsArray\"\n                            [value]=\"cluster_detail.name\">\n                      {{ cluster_detail.cluster_alias }} - {{ cluster_detail.name }}\n                    </option>\n                  </select>\n                  <cd-help-text>\n                    <span i18n>Choose the cluster where you want to apply this multisite configuration. The selected cluster will integrate the defined Realm, Zonegroup, and Zones, enabling data synchronization and management across the multisite setup.</span>\n                  </cd-help-text>\n                  <cd-alert-panel type=\"info\"\n                                  [showTitle]=\"false\">\n                    <span i18n>Before submitting this form, please verify that the selected cluster has an active RGW (Rados Gateway) service running.</span>\n                  </cd-alert-panel>\n                </div>\n              </div>\n              <div class=\"form-group row\">\n                <label class=\"cd-col-form-label required\"\n                       for=\"replicationZoneName\"\n                       i18n>Replication Zone Name</label>\n                <div class=\"cd-col-form-input\">\n                  <input class=\"form-control\"\n                         type=\"text\"\n                         id=\"replicationZoneName\"\n                         name=\"replicationZoneName\"\n                         formControlName=\"replicationZoneName\">\n                  <cd-help-text>\n                    <span i18n>Replication zone represents the zone to be created in the replication cluster where your data will be replicated.</span>\n                  </cd-help-text>\n                  <span class=\"invalid-feedback\"\n                        *ngIf=\"multisiteSetupForm.showError('replicationZoneName', formDir, 'required')\"\n                        i18n>This field is required.</span>\n                </div>\n              </div>\n            </ng-template>\n            <div *ngSwitchCase=\"3\"\n                 class=\"ms-5\">\n              <div *ngIf=\"isMultiClusterConfigured\">\n                <ng-container *ngIf=\"!loading; else loadingTemplate\">\n                  <ng-container *ngIf=\"!setupCompleted; else progressCompleteTemplate\">\n                    <ng-container *ngTemplateOutlet=\"reviewTemplate\"></ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </div>\n          </ng-container>\n        </form>\n      </div>\n    </div>\n  </div>\n  <cds-modal-footer>\n    <button cdsButton=\"secondary\"\n            name=\"skip-cluster-selection\"\n            aria-label=\"Skip\"\n            (click)=\"onSkip()\"\n            *ngIf=\"stepTitles[currentStep.stepIndex]['label'] === 'Select Cluster' && multisiteSetupForm.get('configType').value === 'newRealm'\"\n            i18n>Skip</button>\n    <button cdsButton=\"secondary\"\n            (click)=\"onPreviousStep()\"\n            [attr.aria-label]=\"showCancelButtonLabel()\"\n            i18n>{{ showCancelButtonLabel() }}</button>\n    <button cdsButton=\"primary\"\n            (click)=\"onNextStep()\"\n            aria-label=\"Next\"\n            [disabled]=\"loading\"\n            i18n>{{ showSubmitButtonLabel() }}\n      <cds-loading [isActive]=\"loading\"\n                   [overlay]=\"false\"\n                   size=\"sm\"\n                   *ngIf=\"loading\">\n      </cds-loading>\n    </button>\n  </cds-modal-footer>\n</cds-modal>\n\n\n<ng-template #nonMultiClusterTemplate>\n  <ng-container *ngIf=\"!loading; else loadingTemplate\">\n    <ng-container *ngIf=\"!setupCompleted else exportTokenTemplate\">\n      <ng-container *ngTemplateOutlet=\"reviewTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <ng-container *ngTemplateOutlet=\"progressTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #progressCompleteTemplate>\n  <div *ngIf=\"isMultiClusterConfigured && !stepsToSkip['Select Cluster']; else exportTokenTemplate\">\n    <div class=\"text-center text-success\"\n         i18n>\n      Multi-site replication setup is complete.\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #progressTemplate>\n  <cd-progress [value]=\"executingTask?.progress\"\n               [description]=\"executingTask?.name?.replace('progress/Multisite-Setup:', '')?.split('||')[0]?.trim()\"\n               [subDescription]=\"executingTask?.name?.replace('progress/Multisite-Setup:', '')?.split('||')[1]?.trim()\">\n  </cd-progress>\n</ng-template>\n\n<ng-template #exportTokenTemplate>\n  <div *ngFor=\"let realminfo of realms\">\n    <div class=\"form-group row\">\n      <label class=\"cd-col-form-label\"\n             for=\"realmName\"\n             i18n>Realm Name</label>\n      <div class=\"cd-col-form-input\">\n        <input id=\"realmName\"\n               name=\"realmName\"\n               type=\"text\"\n               [value]=\"realminfo.realm\"\n               readonly>\n        <cd-help-text>\n          <span i18n>Name of the realm that will be involved in replication.</span>\n        </cd-help-text>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"cd-col-form-label\"\n             for=\"token\"\n             i18n>Token</label>\n      <div class=\"cd-col-form-input\">\n        <input id=\"realmToken\"\n               name=\"realmToken\"\n               type=\"text\"\n               [value]=\"realminfo.token\"\n               class=\"me-2 mb-4\"\n               readonly>\n        <cd-copy-2-clipboard-button [source]=\"realminfo.token\"\n                                    [byId]=\"false\">\n        </cd-copy-2-clipboard-button>\n        <cd-help-text>\n          <span i18n>This field displays the token needed to import the multisite configuration into a secondary cluster. Copy this token securely and use it on the secondary cluster to replicate the current multisite setup. Ensure that the token is handled securely to prevent unauthorized access.</span>\n        </cd-help-text>\n      </div>\n    </div>\n    <hr *ngIf=\"realms.length > 1\">\n  </div>\n</ng-template>\n\n<ng-template #reviewTemplate>\n  <cd-alert-panel type=\"warning\"\n                  [showTitle]=\"false\">\n    <span i18n>\n      During the automation process, the RGW module will be enabled on both the source and target clusters, if it is not already enabled.\n      This action may cause a temporary downtime (5-10 seconds) on each cluster.\n    </span>\n  </cd-alert-panel>\n  <ng-container [ngSwitch]=\"multisiteSetupForm.get('configType').value\">\n    <ng-container *ngSwitchCase=\"'newRealm'\">\n      <ng-container *ngTemplateOutlet=\"newRealmInfo\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"replicationInfo\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'existingRealm'\">\n      <ng-container *ngTemplateOutlet=\"existingRealmInfo\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"replicationInfo\"></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #newRealmInfo>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Realm Name:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b id=\"realmName\">{{ multisiteSetupForm.get('realmName').value }}</b></div>\n  </div>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Zonegroup Name:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b id=\"zonegroupName\">{{ multisiteSetupForm.get('zonegroupName').value }}</b></div>\n  </div>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Zonegroup Endpoints:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ rgwEndpoints.value.join(', ') }}</b></div>\n  </div>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Zone Name:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b id=\"zoneName\">{{ multisiteSetupForm.get('zoneName').value }}</b></div>\n  </div>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Zone Endpoints:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ rgwEndpoints.value.join(', ') }}</b></div>\n  </div>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Username:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ multisiteSetupForm.get('username').value }}</b></div>\n  </div>\n</ng-template>\n\n<ng-template #existingRealmInfo>\n  <div class=\"form-group row\">\n    <label class=\"cd-col-form-label\"\n           i18n>Selected Realm:</label>\n    <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ multisiteSetupForm.get('selectedRealm').value }}</b></div>\n  </div>\n</ng-template>\n\n<ng-template #replicationInfo>\n  <div *ngIf=\"isMultiClusterConfigured && !stepsToSkip['Select Cluster']\">\n    <div class=\"form-group row\">\n      <label class=\"cd-col-form-label\"\n             i18n>Selected Replication Cluster:</label>\n      <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ selectedCluster }}</b></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"cd-col-form-label\"\n             i18n>Replication Zone Name:</label>\n      <div class=\"cd-col-form-input mt-2 text-muted\"><b>{{ multisiteSetupForm.get('replicationZoneName').value }}</b></div>\n    </div>\n  </div>\n</ng-template>\n","import { ChangeDetectorRef, Component, NgZone, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Observable, Subscription, forkJoin } from 'rxjs';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { WizardStepModel } from '~/app/shared/models/wizard-steps';\nimport { WizardStepsService } from '~/app/shared/services/wizard-steps.service';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { RgwDaemon } from '../models/rgw-daemon';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport _ from 'lodash';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BaseModal, Step } from 'carbon-components-angular';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport {\n  STEP_TITLES_EXISTING_REALM,\n  STEP_TITLES_MULTI_CLUSTER_CONFIGURED,\n  STEP_TITLES_SINGLE_CLUSTER\n} from './multisite-wizard-steps.enum';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { MultiCluster, MultiClusterConfig } from '~/app/shared/models/multi-cluster';\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\n\ninterface DaemonStats {\n  rgw_metadata?: {\n    [key: string]: string;\n  };\n}\n\ninterface EndpointInfo {\n  hostname: string;\n  port: number;\n  frontendConfig: string;\n}\n\nenum Protocol {\n  HTTP = 'http',\n  HTTPS = 'https'\n}\n\nenum ConfigType {\n  NewRealm = 'newRealm',\n  ExistingRealm = 'existingRealm'\n}\n\n@Component({\n  selector: 'cd-rgw-multisite-wizard',\n  templateUrl: './rgw-multisite-wizard.component.html',\n  styleUrls: ['./rgw-multisite-wizard.component.scss']\n})\nexport class RgwMultisiteWizardComponent extends BaseModal implements OnInit {\n  multisiteSetupForm: CdFormGroup;\n  currentStep: WizardStepModel;\n  currentStepSub: Subscription;\n  permissions: Permissions;\n  stepTitles: Step[] = STEP_TITLES_MULTI_CLUSTER_CONFIGURED.map((title) => ({\n    label: title\n  }));\n  stepsToSkip: { [steps: string]: boolean } = {};\n  daemons: RgwDaemon[] = [];\n  selectedCluster = '';\n  clusterDetailsArray: MultiCluster[] = [];\n  isMultiClusterConfigured = false;\n  exportTokenForm: CdFormGroup;\n  realms: any;\n  loading = false;\n  pageURL: string;\n  icons = Icons;\n  rgwEndpoints: { value: any[]; options: any[]; messages: any };\n  executingTask: ExecutingTask;\n  setupCompleted = false;\n  showConfigType = false;\n  realmList: string[] = [];\n  rgwModuleStatus: boolean;\n\n  constructor(\n    private wizardStepsService: WizardStepsService,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private rgwDaemonService: RgwDaemonService,\n    private multiClusterService: MultiClusterService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private rgwRealmService: RgwRealmService,\n    public notificationService: NotificationService,\n    private route: ActivatedRoute,\n    private summaryService: SummaryService,\n    private location: Location,\n    private cdr: ChangeDetectorRef,\n    private mgrModuleService: MgrModuleService,\n    private zone: NgZone\n  ) {\n    super();\n    this.pageURL = 'rgw/multisite/configuration';\n    this.currentStepSub = this.wizardStepsService\n      .getCurrentStep()\n      .subscribe((step: WizardStepModel) => {\n        this.currentStep = step;\n      });\n    this.currentStep.stepIndex = 0;\n    this.createForm();\n    this.rgwEndpoints = {\n      value: [],\n      options: [],\n      messages: new SelectMessages({\n        empty: $localize`There are no endpoints.`,\n        filter: $localize`Select endpoints`\n      })\n    };\n  }\n\n  ngOnInit(): void {\n    this.open = this.route.outlet === 'modal';\n    this.loadRGWEndpoints();\n    this.multiClusterService.getCluster().subscribe((clusters: MultiClusterConfig) => {\n      const currentUrl = clusters['current_url'];\n      this.clusterDetailsArray = Object.values(clusters['config'])\n        .flat()\n        .filter((cluster) => cluster['url'] !== currentUrl);\n      this.isMultiClusterConfigured = this.clusterDetailsArray.length > 0;\n      this.stepTitles = (this.isMultiClusterConfigured\n        ? STEP_TITLES_MULTI_CLUSTER_CONFIGURED\n        : STEP_TITLES_SINGLE_CLUSTER\n      ).map((label, index) => ({\n        label,\n        onClick: () => (this.currentStep.stepIndex = index)\n      }));\n      this.wizardStepsService.setTotalSteps(this.stepTitles.length);\n      this.selectedCluster = this.isMultiClusterConfigured\n        ? this.clusterDetailsArray[0]['name']\n        : null;\n    });\n\n    this.summaryService.subscribe((summary) => {\n      this.zone.run(() => {\n        this.executingTask = summary.executing_tasks.find((task) =>\n          task.name.includes('progress/Multisite-Setup')\n        );\n        this.cdr.detectChanges();\n      });\n    });\n\n    this.stepTitles.forEach((step) => {\n      this.stepsToSkip[step.label] = false;\n    });\n\n    this.rgwRealmService.list().subscribe((realms: string[]) => {\n      this.realmList = realms;\n      this.showConfigType = this.realmList.length > 0;\n      if (this.showConfigType) {\n        this.multisiteSetupForm.get('selectedRealm')?.setValue(this.realmList[0]);\n        this.cdr.detectChanges();\n      }\n    });\n\n    this.rgwMultisiteService.getRgwModuleStatus().subscribe((status: boolean) => {\n      this.rgwModuleStatus = status;\n    });\n  }\n\n  private loadRGWEndpoints(): void {\n    this.rgwDaemonService\n      .list()\n      .pipe(\n        switchMap((daemons: RgwDaemon[]) => {\n          this.daemons = daemons;\n          return this.fetchDaemonStats(daemons);\n        })\n      )\n      .subscribe((daemonStatsArray: EndpointInfo[]) => {\n        this.populateRGWEndpoints(daemonStatsArray);\n      });\n  }\n\n  private fetchDaemonStats(daemons: RgwDaemon[]): Observable<EndpointInfo[]> {\n    const observables = daemons.map((daemon) =>\n      this.rgwDaemonService.get(daemon.id).pipe(\n        map((daemonStats: DaemonStats) => ({\n          hostname: daemon.server_hostname,\n          port: daemon.port,\n          frontendConfig: daemonStats?.rgw_metadata?.['frontend_config#0'] || ''\n        }))\n      )\n    );\n    return forkJoin(observables);\n  }\n\n  private populateRGWEndpoints(statsArray: EndpointInfo[]): void {\n    this.rgwEndpoints.value = statsArray.map((stats: EndpointInfo) => {\n      const protocol = stats.frontendConfig.includes('ssl_port') ? Protocol.HTTPS : Protocol.HTTP;\n      return `${protocol}://${stats.hostname}:${stats.port}`;\n    });\n    this.rgwEndpoints.options = this.rgwEndpoints.value.map(\n      (endpoint) => new SelectOption(false, endpoint, '')\n    );\n    this.cdr.detectChanges();\n  }\n\n  createForm() {\n    this.multisiteSetupForm = new CdFormGroup({\n      realmName: new UntypedFormControl('default_realm', {\n        validators: [Validators.required]\n      }),\n      zonegroupName: new UntypedFormControl('default_zonegroup', {\n        validators: [Validators.required]\n      }),\n      zonegroup_endpoints: new UntypedFormControl(null, [Validators.required]),\n      zoneName: new UntypedFormControl('default_zone', {\n        validators: [Validators.required]\n      }),\n      zone_endpoints: new UntypedFormControl(null, {\n        validators: [Validators.required]\n      }),\n      username: new UntypedFormControl('default_system_user', {\n        validators: [Validators.required]\n      }),\n      cluster: new UntypedFormControl(null, {\n        validators: [Validators.required]\n      }),\n      replicationZoneName: new UntypedFormControl('new_replicated_zone', {\n        validators: [Validators.required]\n      }),\n      configType: new UntypedFormControl(ConfigType.NewRealm, {}),\n      selectedRealm: new UntypedFormControl(null, {})\n    });\n\n    if (!this.isMultiClusterConfigured) {\n      this.exportTokenForm = new CdFormGroup({});\n    }\n  }\n\n  showSubmitButtonLabel() {\n    if (this.wizardStepsService.isLastStep()) {\n      if (!this.setupCompleted) {\n        if (this.isMultiClusterConfigured) {\n          return $localize`Configure Multi-Site`;\n        } else {\n          return $localize`Export Multi-Site token`;\n        }\n      } else {\n        return $localize`Close`;\n      }\n    } else {\n      return $localize`Next`;\n    }\n  }\n\n  showCancelButtonLabel() {\n    return !this.wizardStepsService.isFirstStep()\n      ? this.actionLabels.BACK\n      : this.actionLabels.CANCEL;\n  }\n\n  onNextStep() {\n    if (!this.wizardStepsService.isLastStep()) {\n      this.wizardStepsService.moveToNextStep();\n    } else {\n      if (this.setupCompleted) {\n        this.closeModal();\n      } else {\n        this.onSubmit();\n      }\n    }\n    this.wizardStepsService.getCurrentStep().subscribe((step: WizardStepModel) => {\n      this.currentStep = step;\n      if (this.currentStep.stepIndex === 2 && this.isMultiClusterConfigured) {\n        this.stepsToSkip['Select Cluster'] = false;\n      }\n    });\n  }\n\n  onSubmit() {\n    this.loading = true;\n\n    const proceedWithSetup = () => {\n      this.cdr.detectChanges();\n      const values = this.multisiteSetupForm.getRawValue();\n      const realmName = values['realmName'];\n      const zonegroupName = values['zonegroupName'];\n      const zonegroupEndpoints = this.rgwEndpoints.value.join(',');\n      const zoneName = values['zoneName'];\n      const zoneEndpoints = this.rgwEndpoints.value.join(',');\n      const username = values['username'];\n\n      if (!this.isMultiClusterConfigured || this.stepsToSkip['Select Cluster']) {\n        this.rgwMultisiteService\n          .setUpMultisiteReplication(\n            realmName,\n            zonegroupName,\n            zonegroupEndpoints,\n            zoneName,\n            zoneEndpoints,\n            username\n          )\n          .subscribe((data: object[]) => {\n            this.setupCompleted = true;\n            this.rgwMultisiteService.setRestartGatewayMessage(false);\n            this.loading = false;\n            this.realms = data;\n            this.showSuccessNotification();\n          });\n      } else {\n        const cluster = values['cluster'];\n        const replicationZoneName = values['replicationZoneName'];\n        let selectedRealmName = '';\n\n        if (this.multisiteSetupForm.get('configType').value === ConfigType.ExistingRealm) {\n          selectedRealmName = this.multisiteSetupForm.get('selectedRealm').value;\n        }\n\n        this.rgwMultisiteService\n          .setUpMultisiteReplication(\n            realmName,\n            zonegroupName,\n            zonegroupEndpoints,\n            zoneName,\n            zoneEndpoints,\n            username,\n            cluster,\n            replicationZoneName,\n            this.clusterDetailsArray,\n            selectedRealmName\n          )\n          .subscribe(\n            () => {\n              this.setupCompleted = true;\n              this.rgwMultisiteService.setRestartGatewayMessage(false);\n              this.loading = false;\n              this.showSuccessNotification();\n            },\n            () => {\n              this.multisiteSetupForm.setErrors({ cdSubmitButton: true });\n            }\n          );\n      }\n    };\n\n    if (!this.rgwModuleStatus) {\n      this.mgrModuleService.updateModuleState(\n        'rgw',\n        false,\n        null,\n        '',\n        '',\n        false,\n        $localize`RGW module is being enabled. Waiting for the system to reconnect...`\n      );\n      const subscription = this.mgrModuleService.updateCompleted$.subscribe(() => {\n        subscription.unsubscribe();\n        proceedWithSetup();\n      });\n    } else {\n      proceedWithSetup();\n    }\n  }\n\n  showSuccessNotification() {\n    this.notificationService.show(\n      NotificationType.success,\n      $localize`Multi-site setup completed successfully.`\n    );\n  }\n\n  onPreviousStep() {\n    if (!this.wizardStepsService.isFirstStep()) {\n      this.wizardStepsService.moveToPreviousStep();\n    } else {\n      this.location.back();\n    }\n  }\n\n  onSkip() {\n    const stepTitle = this.stepTitles[this.currentStep.stepIndex];\n    this.stepsToSkip[stepTitle.label] = true;\n    this.onNextStep();\n  }\n\n  closeModal(): void {\n    this.location.back();\n  }\n\n  onConfigTypeChange() {\n    const configType = this.multisiteSetupForm.get('configType')?.value;\n    if (configType === ConfigType.ExistingRealm) {\n      this.stepTitles = STEP_TITLES_EXISTING_REALM.map((title) => ({\n        label: title\n      }));\n      this.stepTitles.forEach((steps, index) => {\n        steps.onClick = () => (this.currentStep.stepIndex = index);\n      });\n    } else if (this.isMultiClusterConfigured) {\n      this.stepTitles = STEP_TITLES_MULTI_CLUSTER_CONFIGURED.map((title) => ({\n        label: title\n      }));\n    } else {\n      this.stepTitles = STEP_TITLES_SINGLE_CLUSTER.map((title) => ({\n        label: title\n      }));\n    }\n    this.wizardStepsService.setTotalSteps(this.stepTitles.length);\n  }\n}\n","import { Validators } from '@angular/forms';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\n\ninterface Zone {\n  selected: string[];\n  available: SelectOption[];\n  validators: any[];\n  messages: SelectMessages;\n}\n\nexport class ZoneData {\n  data: Zone;\n  customBadges: boolean;\n\n  constructor(customBadges: boolean = false, filterMsg: string) {\n    this.customBadges = customBadges;\n    this.data = {\n      selected: [],\n      available: [],\n      validators: [Validators.pattern('[A-Za-z0-9_-]+|\\\\*'), Validators.maxLength(50)],\n      messages: new SelectMessages({\n        empty: $localize`No zones added`,\n        customValidations: {\n          pattern: $localize`Allowed characters '-_a-zA-Z0-9|*'`,\n          maxlength: $localize`Maximum length is 50 characters`\n        },\n        filter: $localize`${filterMsg}`,\n        add: $localize`Add zone`\n      })\n    };\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} {{ groupType | upperFirst }} Flow</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"flowForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"currentFormGroupContext\"\n          novalidate>\n      <div class=\"modal-body\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"flow_id\"\n                 i18n>Name</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   placeholder=\"Flow Name...\"\n                   id=\"flow_id\"\n                   name=\"flow_id\"\n                   formControlName=\"flow_id\"/>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"bucket\"\n                 i18n>Bucket Name</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"bucket\"\n                   name=\"bucket\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   i18n-placeholder\n                   placeholder=\"Bucket Name...\"\n                   formControlName=\"bucket_name\"/>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"currentFormGroupContext.showError('bucket_name', frm, 'bucketNameNotAllowed')\"\n                  i18n>The bucket with chosen name does not exist.</span>\n          </div>\n        </div>\n        <ng-container *ngIf=\"groupType == flowType.symmetrical; else directionalFlow\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"zones\">\n              <ng-container i18n>Zones</ng-container>\n              <cd-helper>\n                <span i18n>Flow need to be associated with atleast one zone</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <ng-container *ngTemplateOutlet=\"zoneMultiSelect;context: { name: 'zones', zone: zones }\"></ng-container>\n            </div>\n          </div>\n        </ng-container>\n        <ng-template #directionalFlow>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"source_zone\"\n                   i18n>Source Zone\n            </label>\n            <div class=\"cd-col-form-input\">\n              <ng-container *ngTemplateOutlet=\"sourceAndDestZone;context: { name: 'source_zone', zones: zones }\"></ng-container>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"destination_zone\"\n                   i18n>Destination Zone</label>\n            <div class=\"cd-col-form-input\">\n              <ng-container *ngTemplateOutlet=\"sourceAndDestZone;context: { name: 'destination_zone', zones: zones }\"></ng-container>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"currentFormGroupContext\"\n                              [submitText]=\"(action | titlecase) + ' ' + (groupType | upperFirst) + ' ' + 'Flow'\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n\n<ng-template #zoneMultiSelect\n             let-name=\"name\"\n             let-zone=\"zone\">\n  <cd-select-badges [id]=\"name\"\n                    [name]=\"name\"\n                    [customBadges]=\"zone.customBadges\"\n                    [customBadgeValidators]=\"zone.data.validators\"\n                    [messages]=\"zone.data.messages\"\n                    [data]=\"zone.data.selected\"\n                    [options]=\"zone.data.available\"\n                    (selection)=\"zoneSelection()\">\n  </cd-select-badges>\n\n  <svg *ngIf=\"zone.data.selected.length <= 0\"\n       [cdsIcon]=\"icons.warning\"\n       [size]=\"icons.size16\"\n       title=\"Flow should be associated with {{name?.split('_').join(' ')}}\"\n       class=\"cds-warning-color\"\n       i18n-title></svg>\n  <span class=\"invalid-feedback\"\n        *ngIf=\"currentFormGroupContext.showError(name, frm, 'required')\"\n        i18n>{{name?.split('_').join(' ')}} selection is required!\n  </span>\n</ng-template>\n\n<ng-template #sourceAndDestZone\n             let-name=\"name\"\n             let-zones=\"zones\">\n  <select [id]=\"name\"\n          [name]=\"name\"\n          class=\"form-select\"\n          (change)=\"onChangeZoneDropdown(name, $event)\"\n          [autofocus]=\"editing\">\n  <option i18n\n          *ngIf=\"zones.data.available.length == 0\"\n          [ngValue]=\"null\">Loading...</option>\n  <option i18n\n          *ngIf=\"zones.data.available.length > 0\"\n          [ngValue]=\"null\">-- Select {{name.split('_').join(' ')}} --</option>\n  <option *ngFor=\"let destinationZone of zones.data.available\"\n          [value]=\"destinationZone.name\">{{ destinationZone.name }}</option>\n  </select>\n  <span class=\"invalid-feedback\"\n        *ngIf=\"currentFormGroupContext.showError(name, frm, 'required')\"\n        i18n>This field is required.</span>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { ActionLabelsI18n, SucceededActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { RgwDaemon } from '../models/rgw-daemon';\nimport { FlowType, RgwZonegroup, Zone } from '../models/rgw-multisite';\nimport { of } from 'rxjs';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport _ from 'lodash';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { ZoneData } from '../models/rgw-multisite-zone-selector';\n\n@Component({\n  selector: 'cd-rgw-multisite-sync-flow-modal',\n  templateUrl: './rgw-multisite-sync-flow-modal.component.html',\n  styleUrls: ['./rgw-multisite-sync-flow-modal.component.scss']\n})\nexport class RgwMultisiteSyncFlowModalComponent implements OnInit {\n  action: string;\n  editing: boolean = false;\n  groupType: FlowType;\n  groupExpandedRow: any;\n  flowSelectedRow: any;\n  syncPolicyDirectionalFlowForm: CdFormGroup;\n  syncPolicySymmetricalFlowForm: CdFormGroup;\n  syncPolicyPipeForm: CdFormGroup;\n  currentFormGroupContext: CdFormGroup;\n  flowType = FlowType;\n  icons = Icons;\n  zones = new ZoneData(false, 'Filter Zones');\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private rgwDaemonService: RgwDaemonService,\n    private rgwZonegroupService: RgwZonegroupService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private succeededLabels: SucceededActionLabelsI18n\n  ) {}\n\n  ngOnInit(): void {\n    if (this.action === 'edit') {\n      this.editing = true;\n    }\n    if (this.groupType === FlowType.symmetrical) {\n      this.createSymmetricalFlowForm();\n      this.currentFormGroupContext = _.cloneDeep(this.syncPolicySymmetricalFlowForm);\n    } else if (this.groupType === FlowType.directional) {\n      this.createDirectionalFlowForm();\n      this.currentFormGroupContext = _.cloneDeep(this.syncPolicyDirectionalFlowForm);\n    }\n    this.currentFormGroupContext.get('bucket_name').disable();\n    if (this.editing) {\n      this.currentFormGroupContext.patchValue({\n        flow_id: this.flowSelectedRow.id,\n        bucket_name: this.groupExpandedRow.bucket || ''\n      });\n      this.currentFormGroupContext.get('flow_id').disable();\n    }\n\n    this.rgwDaemonService.selectedDaemon$\n      .pipe(\n        switchMap((daemon: RgwDaemon) => {\n          if (daemon) {\n            const zonegroupObj = new RgwZonegroup();\n            zonegroupObj.name = daemon?.zonegroup_name;\n            return this.rgwZonegroupService.get(zonegroupObj).pipe(\n              catchError(() => {\n                return of([]);\n              })\n            );\n          } else {\n            return of([]);\n          }\n        })\n      )\n      .subscribe((zonegroupData: any) => {\n        if (zonegroupData && zonegroupData?.zones?.length > 0) {\n          const zones: any = [];\n          zonegroupData.zones.forEach((zone: any) => {\n            zones.push(new SelectOption(false, zone.name, ''));\n          });\n          this.zones.data.available = [...zones];\n          if (this.editing) {\n            if (this.groupType === FlowType.symmetrical) {\n              this.zones.data.selected = [...this.flowSelectedRow.zones];\n            }\n            this.zoneSelection();\n          }\n        }\n      });\n  }\n\n  createSymmetricalFlowForm() {\n    this.syncPolicySymmetricalFlowForm = new CdFormGroup({\n      ...this.commonFormControls(FlowType.symmetrical),\n      zones: new UntypedFormControl([], {\n        validators: [Validators.required]\n      })\n    });\n  }\n\n  createDirectionalFlowForm() {\n    this.syncPolicyDirectionalFlowForm = new CdFormGroup({\n      ...this.commonFormControls(FlowType.directional),\n      source_zone: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      destination_zone: new UntypedFormControl('', {\n        validators: [Validators.required]\n      })\n    });\n  }\n\n  onChangeZoneDropdown(zoneType: string, event: Event) {\n    const selectedVal = (event.target as HTMLSelectElement).value;\n    this.currentFormGroupContext.get(zoneType).setValue(selectedVal);\n  }\n\n  commonFormControls(flowType: FlowType) {\n    return {\n      bucket_name: new UntypedFormControl(this.groupExpandedRow?.bucket),\n      group_id: new UntypedFormControl(this.groupExpandedRow?.groupName, {\n        validators: [Validators.required]\n      }),\n      flow_id: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      flow_type: new UntypedFormControl(flowType, {\n        validators: [Validators.required]\n      })\n    };\n  }\n\n  zoneSelection() {\n    if (this.groupType === FlowType.symmetrical) {\n      this.currentFormGroupContext.patchValue({\n        zones: this.zones.data.selected\n      });\n    }\n  }\n\n  getZoneData(zoneDataToFilter: string[], zoneDataForCondition: string[]) {\n    return zoneDataToFilter.filter((zone: string) => !zoneDataForCondition.includes(zone));\n  }\n\n  assignZoneValue(zone: string[], selectedZone: string[]) {\n    return zone.length > 0 ? zone : selectedZone;\n  }\n\n  submit() {\n    const zones: Zone = { added: [], removed: [] };\n\n    if (this.currentFormGroupContext.invalid) {\n      return;\n    }\n    // Ensure that no validation is pending\n    if (this.currentFormGroupContext.pending) {\n      this.currentFormGroupContext.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    if (this.groupType == FlowType.symmetrical) {\n      if (this.editing) {\n        zones.removed = this.getZoneData(this.flowSelectedRow.zones, this.zones.data.selected);\n        zones.added = this.getZoneData(this.zones.data.selected, this.flowSelectedRow.zones);\n      }\n      zones.added = this.assignZoneValue(zones.added, this.zones.data.selected);\n    }\n    this.rgwMultisiteService\n      .createEditSyncFlow({ ...this.currentFormGroupContext.getRawValue(), zones: zones })\n      .subscribe(\n        () => {\n          const action = this.editing ? this.succeededLabels.EDITED : this.succeededLabels.CREATED;\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`${action} Sync Flow '${this.currentFormGroupContext.getValue('flow_id')}'`\n          );\n          this.activeModal.close(NotificationType.success);\n        },\n        () => {\n          // Reset the 'Submit' button.\n          this.currentFormGroupContext.setErrors({ cdSubmitButton: true });\n          this.activeModal.dismiss();\n        }\n      );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} Pipe</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"pipeForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"pipeForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"pipe_id\"\n                 i18n>Name</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   placeholder=\"Pipe Name...\"\n                   id=\"pipe_id\"\n                   name=\"pipe_id\"\n                   formControlName=\"pipe_id\"\n                   [readonly]=\"editing\"/>\n          </div>\n        </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"source_zone\"\n                   i18n>Source Zone </label>\n            <div class=\"cd-col-form-input\">\n              <ng-container *ngTemplateOutlet=\"zoneMultiSelect;context: { name: 'source_zones', zone: sourceZones }\"></ng-container>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"destination_zone\"\n                   i18n>Destination Zone</label>\n            <div class=\"cd-col-form-input\">\n              <ng-container *ngTemplateOutlet=\"zoneMultiSelect;context: { name: 'destination_zones', zone: destZones }\"></ng-container>\n            </div>\n          </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"bucket\"\n                 i18n>Bucket Name</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"bucket\"\n                   name=\"bucket\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   i18n-placeholder\n                   placeholder=\"Bucket Name...\"\n                   formControlName=\"bucket_name\"/>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"source_bucket\"\n                 i18n>Source Bucket</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"source_bucket\"\n                   name=\"source_bucket\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   i18n-placeholder\n                   placeholder=\"Source Bucket Name...\"\n                   formControlName=\"source_bucket\"/>\n            <cd-help-text>\n              <span i18n>{{ allBucketSelectedHelpText }}</span>\n            </cd-help-text>\n          </div>\n          </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"dest_bucket\"\n                 i18n>Destination Bucket</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"dest_bucket\"\n                   name=\"dest_bucket\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   i18n-placeholder\n                   placeholder=\"Destination Bucket Name...\"\n                   formControlName=\"destination_bucket\"/>\n            <cd-help-text>\n              <span i18n>{{ allBucketSelectedHelpText }}</span>\n            </cd-help-text>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"pipeForm\"\n                              [submitText]=\"(action | titlecase) + ' ' + 'Pipe'\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n\n<ng-template #zoneMultiSelect\n             let-name=\"name\"\n             let-zone=\"zone\">\n  <cd-select-badges id=\"{{ name }}\"\n                    name=\"{{ name }}\"\n                    [customBadges]=\"zone.customBadges\"\n                    [customBadgeValidators]=\"zone.data.validators\"\n                    [messages]=\"zone.data.messages\"\n                    [data]=\"zone.data.selected\"\n                    [options]=\"zone.data.available\"\n                    (selection)=\"onZoneSelection(name)\">\n  </cd-select-badges>\n\n  <svg *ngIf=\"zone.data.selected.length <= 0\"\n       i18n-title\n       [cdsIcon]=\"icons.warning\"\n       [size]=\"icons.size16\"\n       title=\"Pipe should be associated with {{ name?.split('_').join(' ') }}\"\n       class=\"cds-warning-color\"></svg>\n  <span class=\"invalid-feedback\"\n        *ngIf=\"pipeForm.showError(name, frm, 'required')\"\n        i18n>{{ name?.split('_').join(' ') }} selection is required!\n  </span>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { RgwZonegroup, Zone } from '../models/rgw-multisite';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { RgwDaemon } from '../models/rgw-daemon';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { ZoneData } from '../models/rgw-multisite-zone-selector';\nimport { SucceededActionLabelsI18n } from '~/app/shared/constants/app.constants';\n\nconst ALL_ZONES = $localize`All zones (*)`;\nconst ALL_BUCKET_SELECTED_HELP_TEXT =\n  'If no value is provided, all the buckets in the zone group will be selected.';\n\n@Component({\n  selector: 'cd-rgw-multisite-sync-pipe-modal',\n  templateUrl: './rgw-multisite-sync-pipe-modal.component.html',\n  styleUrls: ['./rgw-multisite-sync-pipe-modal.component.scss']\n})\nexport class RgwMultisiteSyncPipeModalComponent implements OnInit {\n  groupExpandedRow: any;\n  pipeSelectedRow: any;\n  pipeForm: CdFormGroup;\n  action: string;\n  editing: boolean;\n  sourceZones = new ZoneData(false, 'Filter Zones');\n  destZones = new ZoneData(false, 'Filter Zones');\n  icons = Icons;\n  allBucketSelectedHelpText = ALL_BUCKET_SELECTED_HELP_TEXT;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private rgwDaemonService: RgwDaemonService,\n    private rgwZonegroupService: RgwZonegroupService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private notificationService: NotificationService,\n    private succeededLabels: SucceededActionLabelsI18n\n  ) {}\n\n  ngOnInit(): void {\n    if (this.pipeSelectedRow) {\n      this.pipeSelectedRow.source.zones = this.replaceAsteriskWithString(\n        this.pipeSelectedRow.source.zones\n      );\n      this.pipeSelectedRow.dest.zones = this.replaceAsteriskWithString(\n        this.pipeSelectedRow.dest.zones\n      );\n    }\n    this.editing = this.action === 'create' ? false : true;\n    this.pipeForm = new CdFormGroup({\n      pipe_id: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      group_id: new UntypedFormControl(this.groupExpandedRow?.groupName || '', {\n        validators: [Validators.required]\n      }),\n      bucket_name: new UntypedFormControl(this.groupExpandedRow?.bucket || ''),\n      source_bucket: new UntypedFormControl(''),\n      source_zones: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      destination_bucket: new UntypedFormControl(''),\n      destination_zones: new UntypedFormControl('', {\n        validators: [Validators.required]\n      })\n    });\n    this.pipeForm.get('bucket_name').disable();\n    this.rgwDaemonService.selectedDaemon$\n      .pipe(\n        switchMap((daemon: RgwDaemon) => {\n          if (daemon) {\n            const zonegroupObj = new RgwZonegroup();\n            zonegroupObj.name = daemon.zonegroup_name;\n            return this.rgwZonegroupService.get(zonegroupObj).pipe(\n              catchError(() => {\n                return of([]);\n              })\n            );\n          } else {\n            return of([]);\n          }\n        })\n      )\n      .subscribe((zonegroupData: any) => {\n        if (zonegroupData && zonegroupData?.zones?.length > 0) {\n          let zones: any[] = [];\n          zones.push(new SelectOption(false, ALL_ZONES, ''));\n          zonegroupData.zones.forEach((zone: any) => {\n            zones.push(new SelectOption(false, zone.name, ''));\n          });\n          this.sourceZones.data.available = JSON.parse(JSON.stringify(zones));\n          this.destZones.data.available = JSON.parse(JSON.stringify(zones));\n          if (this.editing) {\n            this.pipeForm.get('pipe_id').disable();\n            this.sourceZones.data.selected = [...this.pipeSelectedRow.source.zones];\n            this.destZones.data.selected = [...this.pipeSelectedRow.dest.zones];\n            const availableDestZone: SelectOption[] = [];\n            this.pipeSelectedRow.dest.zones.forEach((zone: string) => {\n              availableDestZone.push(new SelectOption(true, zone, ''));\n            });\n            this.pipeForm.patchValue({\n              pipe_id: this.pipeSelectedRow.id,\n              source_zones: this.pipeSelectedRow.source.zones,\n              destination_zones: this.pipeSelectedRow.dest.zones,\n              source_bucket: this.pipeSelectedRow.source.bucket,\n              destination_bucket: this.pipeSelectedRow.dest.bucket\n            });\n          }\n        }\n      });\n  }\n\n  replaceWithAsterisk(zones: string[]) {\n    return zones.map((str) => str.replace(ALL_ZONES, '*'));\n  }\n\n  replaceAsteriskWithString(zones: string[]) {\n    return zones.map((str) => str.replace('*', ALL_ZONES));\n  }\n\n  onZoneSelection(zoneType: string) {\n    if (zoneType === 'source_zones') {\n      this.pipeForm.patchValue({\n        source_zones: this.sourceZones.data.selected\n      });\n    } else {\n      this.pipeForm.patchValue({\n        destination_zones: this.destZones.data.selected\n      });\n    }\n  }\n\n  getZoneData(zoneDataToFilter: string[], zoneDataForCondition: string[]) {\n    return zoneDataToFilter.filter((zone: string) => !zoneDataForCondition.includes(zone));\n  }\n\n  assignZoneValue(zone: string[], selectedZone: string[]) {\n    return zone.length > 0\n      ? this.replaceWithAsterisk(zone)\n      : this.replaceWithAsterisk(selectedZone);\n  }\n\n  submit() {\n    const sourceZones: Zone = { added: [], removed: [] };\n    const destZones: Zone = { added: [], removed: [] };\n\n    if (this.pipeForm.invalid) {\n      return;\n    }\n    // Ensure that no validation is pending\n    if (this.pipeForm.pending) {\n      this.pipeForm.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    if (this.editing) {\n      destZones.removed = this.getZoneData(\n        this.pipeSelectedRow.dest.zones,\n        this.destZones.data.selected\n      );\n      destZones.added = this.getZoneData(\n        this.destZones.data.selected,\n        this.pipeSelectedRow.dest.zones\n      );\n      sourceZones.removed = this.getZoneData(\n        this.pipeSelectedRow.source.zones,\n        this.sourceZones.data.selected\n      );\n      sourceZones.added = this.getZoneData(\n        this.sourceZones.data.selected,\n        this.pipeSelectedRow.source.zones\n      );\n    }\n    sourceZones.added = this.assignZoneValue(sourceZones.added, this.sourceZones.data.selected);\n    destZones.added = this.assignZoneValue(destZones.added, this.destZones.data.selected);\n\n    sourceZones.removed = this.replaceWithAsterisk(sourceZones.removed);\n    destZones.removed = this.replaceWithAsterisk(destZones.removed);\n\n    this.rgwMultisiteService\n      .createEditSyncPipe({\n        ...this.pipeForm.getRawValue(),\n        source_zones: sourceZones,\n        destination_zones: destZones,\n        user: this.editing ? this.pipeSelectedRow?.params?.user : '',\n        mode: this.editing ? this.pipeSelectedRow?.params?.mode : ''\n      })\n      .subscribe(\n        () => {\n          const action = this.editing ? this.succeededLabels.EDITED : this.succeededLabels.CREATED;\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`${action} Sync Pipe '${this.pipeForm.getValue('pipe_id')}'`\n          );\n          this.activeModal.close(NotificationType.success);\n        },\n        () => {\n          // Reset the 'Submit' button.\n          this.pipeForm.setErrors({ cdSubmitButton: true });\n          this.activeModal.dismiss();\n        }\n      );\n  }\n}\n","<ng-container *ngIf=\"expandedRow\">\n  <nav\n    ngbNav\n    #nav=\"ngbNav\"\n    class=\"nav-tabs\"\n    cdStatefulTab=\"sync-policy-details\">\n    <ng-container ngbNavItem=\"flow\">\n      <a\n        ngbNavLink\n        i18n>Flow</a>\n      <ng-template ngbNavContent>\n        <legend>\n          Symmetrical\n          <cd-help-text>\n            It can define symmetrical data flow, in which multiple zones sync data from each other.\n          </cd-help-text>\n        </legend>\n        <cd-table\n          #table\n          [autoReload]=\"false\"\n          [data]=\"symmetricalFlowData\"\n          [columns]=\"symmetricalFlowCols\"\n          columnMode=\"flex\"\n          selectionType=\"multiClick\"\n          [searchableObjects]=\"true\"\n          [hasDetails]=\"false\"\n          [serverSide]=\"false\"\n          [count]=\"0\"\n          [maxLimit]=\"25\"\n          [toolHeader]=\"true\"\n          (updateSelection)=\"updateSelection($event, flowType.symmetrical)\"\n          (fetchData)=\"loadData($event)\">\n          <div class=\"table-actions\">\n            <cd-table-actions\n              [permission]=\"permission\"\n              [selection]=\"symFlowSelection\"\n              class=\"btn-group\"\n              [tableActions]=\"symFlowTableActions\" >\n            </cd-table-actions>\n          </div>\n        </cd-table>\n        <legend>\n          Directional\n          <cd-help-text>\n            It can define directional data flow, in which the data moves in one way, from one zone to another.\n          </cd-help-text>\n        </legend>\n        <cd-table\n          #table\n          [autoReload]=\"false\"\n          [data]=\"directionalFlowData\"\n          [columns]=\"directionalFlowCols\"\n          columnMode=\"flex\"\n          selectionType=\"multiClick\"\n          [searchableObjects]=\"true\"\n          [hasDetails]=\"false\"\n          [serverSide]=\"false\"\n          [count]=\"0\"\n          [maxLimit]=\"25\"\n          [toolHeader]=\"true\"\n          (updateSelection)=\"updateSelection($event, flowType.directional)\"\n          (fetchData)=\"loadData($event)\">\n          <div class=\"table-actions\">\n            <cd-table-actions\n              [permission]=\"permission\"\n              [selection]=\"dirFlowSelection\"\n              class=\"btn-group\"\n              [tableActions]=\"dirFlowTableActions\">\n            </cd-table-actions>\n          </div>\n        </cd-table>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"pipe\">\n      <a ngbNavLink\n         i18n>Pipe</a>\n      <ng-template ngbNavContent>\n        <legend i18n>\n          Pipe\n          <cd-help-text>\n            A pipe defines the actual buckets that can use these data flows, and the properties that are associated with it.\n          </cd-help-text>\n        </legend>\n        <cd-table\n        #table\n        [data]=\"pipeData\"\n        [columns]=\"pipeCols\"\n        selectionType=\"multiClick\"\n        [searchableObjects]=\"true\"\n        [hasDetails]=\"false\"\n        [serverSide]=\"false\"\n        [toolHeader]=\"true\"\n        (updateSelection)=\"pipeSelection = $event\"\n        (fetchData)=\"loadData($event)\">\n        <div class=\"table-actions\">\n          <cd-table-actions\n            [permission]=\"permission\"\n            [selection]=\"pipeSelection\"\n            class=\"btn-group\"\n            [tableActions]=\"pipeTableActions\">\n          </cd-table-actions>\n        </div>\n        </cd-table>\n      </ng-template>\n    </ng-container>\n  </nav>\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n\n<ng-template #deleteTpl>\n  <cd-alert-panel type=\"danger\"\n                  i18n>\n    Deleting {{ resourceType | upperFirst }} may disrupt data synchronization\n  </cd-alert-panel>\n</ng-template>\n","import { Component, Input, OnChanges, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Observable, Subscriber, forkJoin as observableForkJoin } from 'rxjs';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { RgwMultisiteSyncFlowModalComponent } from '../rgw-multisite-sync-flow-modal/rgw-multisite-sync-flow-modal.component';\nimport { FlowType } from '../models/rgw-multisite';\nimport { RgwMultisiteSyncPipeModalComponent } from '../rgw-multisite-sync-pipe-modal/rgw-multisite-sync-pipe-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\n\nenum MultisiteResourceType {\n  flow = 'flow',\n  pipe = 'pipe'\n}\n\n@Component({\n  selector: 'cd-rgw-multisite-sync-policy-details',\n  templateUrl: './rgw-multisite-sync-policy-details.component.html',\n  styleUrls: ['./rgw-multisite-sync-policy-details.component.scss']\n})\nexport class RgwMultisiteSyncPolicyDetailsComponent implements OnChanges {\n  @Input()\n  expandedRow: any;\n  @Input()\n  permission: Permission;\n\n  @ViewChild(TableComponent)\n  table: TableComponent;\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n\n  resourceType: MultisiteResourceType = MultisiteResourceType.flow;\n  flowType = FlowType;\n  modalRef: NgbModalRef;\n  symmetricalFlowData: any = [];\n  directionalFlowData: any = [];\n  pipeData: any = [];\n  symmetricalFlowCols: CdTableColumn[];\n  directionalFlowCols: CdTableColumn[];\n  pipeCols: CdTableColumn[];\n  symFlowTableActions: CdTableAction[];\n  dirFlowTableActions: CdTableAction[];\n  pipeTableActions: CdTableAction[];\n  symFlowSelection = new CdTableSelection();\n  dirFlowSelection = new CdTableSelection();\n  pipeSelection = new CdTableSelection();\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private modalService: ModalService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private taskWrapper: TaskWrapperService,\n    private cdsModalService: ModalCdsService\n  ) {\n    this.symmetricalFlowCols = [\n      {\n        name: 'Name',\n        prop: 'id',\n        flexGrow: 1\n      },\n      {\n        name: 'Zones',\n        prop: 'zones',\n        flexGrow: 1\n      }\n    ];\n    this.directionalFlowCols = [\n      {\n        name: 'Source Zone',\n        prop: 'source_zone',\n        flexGrow: 1\n      },\n      {\n        name: 'Destination Zone',\n        prop: 'dest_zone',\n        flexGrow: 1\n      }\n    ];\n    this.pipeCols = [\n      {\n        name: 'Name',\n        prop: 'id',\n        flexGrow: 1\n      },\n      {\n        name: 'Source Zone',\n        prop: 'source.zones',\n        flexGrow: 1\n      },\n      {\n        name: 'Destination Zone',\n        prop: 'dest.zones',\n        flexGrow: 1\n      },\n      {\n        name: 'Source Bucket',\n        prop: 'source.bucket',\n        flexGrow: 1\n      },\n      {\n        name: 'Destination Bucket',\n        prop: 'dest.bucket',\n        flexGrow: 1\n      }\n    ];\n    const symAddAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      name: this.actionLabels.CREATE,\n      click: () => this.openModal(FlowType.symmetrical),\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const symEditAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      name: this.actionLabels.EDIT,\n      click: () => this.openModal(FlowType.symmetrical, true)\n    };\n    const symDeleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      disable: () => !this.symFlowSelection.hasSelection,\n      name: this.actionLabels.DELETE,\n      click: () => this.deleteFlow(FlowType.symmetrical),\n      canBePrimary: (selection: CdTableSelection) => selection.hasMultiSelection\n    };\n    this.symFlowTableActions = [symAddAction, symEditAction, symDeleteAction];\n    const dirAddAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      name: this.actionLabels.CREATE,\n      click: () => this.openModal(FlowType.directional),\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const dirDeleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      // TODO: disabling 'delete' as we are not getting flow_id from backend which is needed for deletion\n      disable: () =>\n        'Deleting the directional flow is disabled in the UI. Please use CLI to delete the directional flow',\n      name: this.actionLabels.DELETE,\n      click: () => this.deleteFlow(FlowType.directional),\n      canBePrimary: (selection: CdTableSelection) => selection.hasSelection\n    };\n    this.dirFlowTableActions = [dirAddAction, dirDeleteAction];\n    const pipeAddAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      name: this.actionLabels.CREATE,\n      click: () => this.openPipeModal(),\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const pipeEditAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      name: this.actionLabels.EDIT,\n      click: () => this.openPipeModal(true)\n    };\n    const pipeDeleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      disable: () => !this.pipeSelection.hasSelection,\n      name: this.actionLabels.DELETE,\n      click: () => this.deletePipe(),\n      canBePrimary: (selection: CdTableSelection) => selection.hasMultiSelection\n    };\n    this.pipeTableActions = [pipeAddAction, pipeEditAction, pipeDeleteAction];\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.expandedRow.currentValue && changes.expandedRow.currentValue.groupName) {\n      this.symmetricalFlowData = [];\n      this.directionalFlowData = [];\n      this.loadData();\n    }\n  }\n\n  loadData(context?: any) {\n    if (this.expandedRow) {\n      this.rgwMultisiteService\n        .getSyncPolicyGroup(this.expandedRow.groupName, this.expandedRow.bucket)\n        .subscribe(\n          (policy: any) => {\n            this.symmetricalFlowData = policy.data_flow[FlowType.symmetrical] || [];\n            this.directionalFlowData = policy.data_flow[FlowType.directional] || [];\n            this.pipeData = policy.pipes || [];\n          },\n          () => {\n            if (context) {\n              context.error();\n            }\n          }\n        );\n    }\n  }\n\n  updateSelection(selection: any, type: FlowType) {\n    if (type === FlowType.directional) {\n      this.dirFlowSelection = selection;\n    } else {\n      this.symFlowSelection = selection;\n    }\n  }\n\n  async openModal(flowType: FlowType, edit = false) {\n    const action = edit ? 'edit' : 'create';\n    const initialState = {\n      groupType: flowType,\n      groupExpandedRow: this.expandedRow,\n      flowSelectedRow:\n        flowType === FlowType.symmetrical\n          ? this.symFlowSelection.first()\n          : this.dirFlowSelection.first(),\n      action: action\n    };\n\n    this.modalRef = this.modalService.show(RgwMultisiteSyncFlowModalComponent, initialState, {\n      size: 'lg'\n    });\n\n    try {\n      const res = await this.modalRef.result;\n      if (res === NotificationType.success) {\n        this.loadData();\n      }\n    } catch (err) {}\n  }\n\n  deleteFlow(flowType: FlowType) {\n    this.resourceType = MultisiteResourceType.flow;\n    let selection = this.symFlowSelection;\n    if (flowType === FlowType.directional) {\n      selection = this.dirFlowSelection;\n    }\n    const flowIds = selection.selected.map((flow: any) => flow.id);\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: selection.hasSingleSelection ? $localize`Flow` : $localize`Flows`,\n      itemNames: flowIds,\n      bodyTemplate: this.deleteTpl,\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rgw/multisite/sync-flow/delete', {\n                flow_ids: flowIds\n              }),\n              call: observableForkJoin(\n                selection.selected.map((flow: any) => {\n                  return this.rgwMultisiteService.removeSyncFlow(\n                    flow.id,\n                    flowType,\n                    this.expandedRow.groupName,\n                    this.expandedRow.bucket\n                  );\n                })\n              )\n            })\n            .subscribe({\n              error: (error: any) => {\n                // Forward the error to the observer.\n                observer.error(error);\n                // Reload the data table content because some deletions might\n                // have been executed successfully in the meanwhile.\n                this.table.refreshBtn();\n              },\n              complete: () => {\n                // Notify the observer that we are done.\n                observer.complete();\n                // Reload the data table content.\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n\n  async openPipeModal(edit = false) {\n    const action = edit ? 'edit' : 'create';\n    const initialState = {\n      groupExpandedRow: this.expandedRow,\n      pipeSelectedRow: this.pipeSelection.first(),\n      action: action\n    };\n\n    this.modalRef = this.modalService.show(RgwMultisiteSyncPipeModalComponent, initialState, {\n      size: 'lg'\n    });\n\n    try {\n      const res = await this.modalRef.result;\n      if (res === NotificationType.success) {\n        this.loadData();\n      }\n    } catch (err) {}\n  }\n\n  deletePipe() {\n    this.resourceType = MultisiteResourceType.pipe;\n    const pipeIds = this.pipeSelection.selected.map((pipe: any) => pipe.id);\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: this.pipeSelection.hasSingleSelection ? $localize`Pipe` : $localize`Pipes`,\n      itemNames: pipeIds,\n      bodyTemplate: this.deleteTpl,\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rgw/multisite/sync-pipe/delete', {\n                pipe_ids: pipeIds\n              }),\n              call: observableForkJoin(\n                this.pipeSelection.selected.map((pipe: any) => {\n                  return this.rgwMultisiteService.removeSyncPipe(\n                    pipe.id,\n                    this.expandedRow.groupName,\n                    this.expandedRow.bucket\n                  );\n                })\n              )\n            })\n            .subscribe({\n              error: (error: any) => {\n                // Forward the error to the observer.\n                observer.error(error);\n                // Reload the data table content because some deletions might\n                // have been executed successfully in the meanwhile.\n                this.table.refreshBtn();\n              },\n              complete: () => {\n                // Notify the observer that we are done.\n                observer.complete();\n                // Reload the data table content.\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-rgw-multisite-tabs',\n  templateUrl: './rgw-multisite-tabs.component.html',\n  styleUrls: ['./rgw-multisite-tabs.component.scss']\n})\nexport class RgwMultisiteTabsComponent {}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/rgw/multisite/configuration\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Configuration</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"//rgw/multisite/sync-policy\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Sync Policy</a>\n  </li>\n</ul>\n","<cd-rgw-multisite-tabs></cd-rgw-multisite-tabs>\n\n<legend i18n>\n  Multisite Sync Policy\n  <cd-help-text>\n    Multisite bucket-granularity sync policy provides fine grained control of data movement between\n    buckets in different zones. Leveraging the bucket-granularity sync policy is possible for buckets to diverge,\n     and a bucket can pull data from other buckets (ones that don’t share its name or its ID) in different zone.\n  </cd-help-text>\n</legend>\n<cd-table\n  #table\n  [autoReload]=\"false\"\n  [data]=\"syncPolicyData\"\n  [columns]=\"columns\"\n  identifier=\"uniqueId\"\n  [forceIdentifier]=\"true\"\n  selectionType=\"multiClick\"\n  [searchableObjects]=\"true\"\n  [hasDetails]=\"true\"\n  [toolHeader]=\"true\"\n  (setExpandedRow)=\"setExpandedRow($event)\"\n  (fetchData)=\"getPolicyList($event)\"\n  (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions\n      [permission]=\"permission\"\n      [selection]=\"selection\"\n      class=\"btn-group\"\n      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n  <cd-rgw-multisite-sync-policy-details\n    *cdTableDetail\n    [expandedRow]=\"expandedRow\"\n    [permission]=\"permission\">\n  </cd-rgw-multisite-sync-policy-details>\n</cd-table>\n\n<ng-template #deleteTpl>\n  <cd-alert-panel type=\"danger\"\n                  i18n>\n    Are you sure you want to delete these policy groups?\n  </cd-alert-panel>\n</ng-template>\n<router-outlet name=\"modal\"\n               (deactivate)=\"getPolicyList()\"></router-outlet>\n","import { TitleCasePipe } from '@angular/common';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { forkJoin as observableForkJoin, Observable, Subscriber } from 'rxjs';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\n\nconst BASE_URL = 'rgw/multisite/sync-policy';\n\n@Component({\n  selector: 'cd-rgw-multisite-sync-policy',\n  templateUrl: './rgw-multisite-sync-policy.component.html',\n  styleUrls: ['./rgw-multisite-sync-policy.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwMultisiteSyncPolicyComponent extends ListWithDetails implements OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n\n  columns: Array<CdTableColumn> = [];\n  syncPolicyData: any = [];\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permission: Permission;\n\n  constructor(\n    private rgwMultisiteService: RgwMultisiteService,\n    private titleCasePipe: TitleCasePipe,\n    private actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private router: Router,\n    private rgwDaemonService: RgwDaemonService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        prop: 'uniqueId',\n        isInvisible: true,\n        isHidden: true\n      },\n      {\n        name: $localize`Group Name`,\n        prop: 'groupName',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Status`,\n        prop: 'status',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.tooltip,\n        customTemplateConfig: {\n          map: {\n            Enabled: { class: 'badge-success', tooltip: 'sync is allowed and enabled' },\n            Allowed: { class: 'badge-info', tooltip: 'sync is allowed' },\n            Forbidden: {\n              class: 'badge-warning',\n              tooltip:\n                'sync (as defined by this group) is not allowed and can override other groups'\n            }\n          }\n        },\n        pipe: this.titleCasePipe\n      },\n      {\n        name: $localize`Zonegroup`,\n        prop: 'zonegroup',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          undefined: '-',\n          '': '-'\n        }\n      },\n      {\n        name: $localize`Bucket`,\n        prop: 'bucket',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          undefined: '-',\n          '': '-'\n        }\n      }\n    ];\n    this.rgwDaemonService.list().subscribe();\n    const getEditURL = () => {\n      if (this.selection.first().groupName && this.selection.first().bucket) {\n        return `${URLVerbs.EDIT}/${this.selection.first().groupName}/${\n          this.selection.first().bucket\n        }`;\n      }\n      return `${URLVerbs.EDIT}/${this.selection.first().groupName}`;\n    };\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      click: () => this.router.navigate([BASE_URL, { outlets: { modal: URLVerbs.CREATE } }]),\n      name: this.actionLabels.CREATE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.router.navigate([BASE_URL, { outlets: { modal: getEditURL() } }]),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.DELETE,\n      canBePrimary: (selection: CdTableSelection) => selection.hasMultiSelection\n    };\n    this.tableActions = [addAction, editAction, deleteAction];\n  }\n\n  transformSyncPolicyData(allSyncPolicyData: any) {\n    if (allSyncPolicyData && allSyncPolicyData.length > 0) {\n      allSyncPolicyData.forEach((policy: any) => {\n        this.syncPolicyData.push({\n          uniqueId: policy['id'] + (policy['bucketName'] ? policy['bucketName'] : ''),\n          groupName: policy['id'],\n          status: policy['status'],\n          bucket: policy['bucketName'],\n          zonegroup: policy['zonegroup']\n        });\n      });\n      this.syncPolicyData = [...this.syncPolicyData];\n    }\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  getPolicyList(context?: CdTableFetchDataContext) {\n    this.rgwMultisiteService.getSyncPolicy('', '', true).subscribe(\n      (resp: object[]) => {\n        this.syncPolicyData = [];\n        this.transformSyncPolicyData(resp);\n      },\n      () => {\n        if (context) {\n          context.error();\n        }\n      }\n    );\n  }\n\n  deleteAction() {\n    const groupNames = this.selection.selected.map((policy: any) => policy.groupName);\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: this.selection.hasSingleSelection\n        ? $localize`Policy Group`\n        : $localize`Policy Groups`,\n      itemNames: groupNames,\n      bodyTemplate: this.deleteTpl,\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rgw/multisite/sync-policy/delete', {\n                group_names: groupNames\n              }),\n              call: observableForkJoin(\n                this.selection.selected.map((policy: any) => {\n                  return this.rgwMultisiteService.removeSyncPolicyGroup(\n                    policy.groupName,\n                    policy.bucket\n                  );\n                })\n              )\n            })\n            .subscribe({\n              error: (error: any) => {\n                // Forward the error to the observer.\n                observer.error(error);\n                // Reload the data table content because some deletions might\n                // have been executed successfully in the meanwhile.\n                this.table.refreshBtn();\n              },\n              complete: () => {\n                // Notify the observer that we are done.\n                observer.complete();\n                // Reload the data table content.\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n}\n","<cd-rgw-multisite-tabs></cd-rgw-multisite-tabs>\n<div>\n  <!-- Show the alert only when the user has the permission to configure -->\n  <cd-alert-panel *ngIf=\"permissions.configOpt.create && !rgwModuleStatus\"\n                  type=\"info\"\n                  spacingClass=\"mb-3\"\n                  i18n\n                  class=\"align-items-center\"\n                  actionName=\"Enable\"\n                  (action)=\"enableRgwModule()\">\n      In order to access the import/export feature, the rgw module must be enabled.\n  </cd-alert-panel>\n  <cd-alert-panel   *ngIf=\"restartGatewayMessage\"\n                    type=\"warning\"\n                    spacingClass=\"mb-3\"\n                    i18n>Please restart all Ceph Object Gateway instances in all zones to ensure consistent multisite configuration updates.\n    <a class=\"text-decoration-underline\"\n       routerLink=\"/services\">\n       Cluster->Services</a>\n  </cd-alert-panel>\n  <cd-table-actions class=\"btn-group mb-4 me-2\"\n                    [permission]=\"permissions.rgw\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"multisiteReplicationActions\">\n  </cd-table-actions>\n  <cd-table-actions *ngIf=\"showMigrateAndReplicationActions\"\n                    class=\"btn-group mb-4 me-2 secondary\"\n                    [permission]=\"permissions.rgw\"\n                    [btnColor]=\"'light'\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"migrateTableAction\">\n  </cd-table-actions>\n  <cd-table-actions *ngIf=\"!showMigrateAndReplicationActions\"\n                    class=\"btn-group mb-4 me-2\"\n                    [permission]=\"permissions.rgw\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"createTableActions\"\n                    [primaryDropDown]=\"true\">\n  </cd-table-actions>\n  <cd-table-actions class=\"btn-group mb-4 me-2\"\n                    [permission]=\"permissions.rgw\"\n                    [btnColor]=\"'light'\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"importAction\">\n  </cd-table-actions>\n  <cd-table-actions class=\"btn-group mb-4 me-2\"\n                    [permission]=\"permissions.rgw\"\n                    [btnColor]=\"'light'\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"exportAction\">\n  </cd-table-actions>\n</div>\n<div class=\"card\">\n  <div class=\"card-header\"\n       data-testid=\"rgw-multisite-details-header\"\n       i18n>Topology Viewer</div>\n  <div class=\"row\">\n    <div class=\"col-sm-6 col-lg-6 tree-container\">\n      <i *ngIf=\"loadingIndicator\"\n         [ngClass]=\"[icons.large, icons.spinner, icons.spin]\"></i>\n      <cds-tree-view #tree\n                     [isMultiSelect]=\"false\"\n                     (select)=\"onNodeSelected($event)\">\n        <ng-template #nodeTemplateRef\n                     let-node=\"node\"\n                     let-depth=\"depth\">\n          <cds-tree-node [node]=\"node\"\n                         [depth]=\"depth\">\n            <ng-container *ngIf=\"node?.children && node?.children?.length\">\n              <ng-container *ngFor=\"let child of node.children; let i = index;\">\n                <ng-container *ngTemplateOutlet=\"nodeTemplateRef; context: { node: child, depth: depth + 1 };\">\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </cds-tree-node>\n        </ng-template>\n        <ng-template #treeNodeTemplate\n                     let-node>\n          <div class=\"w-100 d-flex justify-content-between align-items-center pe-1\">\n            <div>\n              <span *ngIf=\"node?.data?.name\"\n                    class=\"me-3\">\n                <span *ngIf=\"(node?.data?.show_warning)\">\n                  <svg [cdsIcon]=\"icons.danger\"\n                       [size]=\"icons.size16\"\n                       [title]=\"node?.data?.warning_message\"\n                       class=\"cds-danger-color\"></svg>\n                </span>\n                <svg  *ngIf=\"node?.data?.icon === 'scales'\"\n                      [cdsIcon]=\"icons.reweight\"\n                      [size]=\"icons.size20\"\n                      ></svg>\n                <svg *ngIf=\"node?.data?.icon === 'cube'\"\n                     [cdsIcon]=\"icons.deploy\"\n                     [size]=\"icons.size20\"\n                     ></svg>\n                <svg *ngIf=\"node?.data?.icon === 'fa fa-cubes'\"\n                     [cdsIcon]=\"icons.parentChild\"\n                     [size]=\"icons.size20\"\n                     ></svg>\n                {{ node?.data?.name }}\n              </span>\n              <span class=\"badge badge-success me-2\"\n                    *ngIf=\"node?.data?.is_default\">\n                  default\n              </span>\n              <span class=\"badge badge-warning me-2\"\n                    *ngIf=\"node?.data?.is_master\"> master </span>\n              <span class=\"badge badge-warning me-2\"\n                    *ngIf=\"node?.data?.secondary_zone\">\n                secondary-zone\n              </span>\n            </div>\n            <div class=\"btn-group align-inline-btns\"\n                 [ngStyle]=\"{'visibility': activeNodeId === node?.data?.id ? 'visible' : 'hidden'}\"\n                 role=\"group\">\n              <div [title]=\"editTitle\"\n                   i18n-title>\n                <button type=\"button\"\n                        class=\"btn btn-light dropdown-toggle-split ms-1\"\n                        (click)=\"openModal(node, true)\"\n                        [disabled]=\"getDisable() || node?.data?.secondary_zone\">\n                  <svg [cdsIcon]=\"icons.edit\"\n                       [size]=\"icons.size16\"\n                       class=\"cds-info-color\"></svg>\n                </button>\n              </div>\n              <ng-container *ngIf=\"isDeleteDisabled(node) as nodeDeleteData\">\n                <div [title]=\"nodeDeleteData.deleteTitle\"\n                     i18n-title>\n                  <button type=\"button\"\n                          class=\"btn btn-light ms-1\"\n                          [disabled]=\"nodeDeleteData.isDisabled || node?.data?.secondary_zone\"\n                          (click)=\"delete(node)\">\n                    <svg [cdsIcon]=\"icons.destroy\"\n                         [size]=\"icons.size16\"\n                         class=\"cds-info-color\"></svg>\n                  </button>\n                </div>\n              </ng-container>\n            </div>\n          </div>\n        </ng-template>\n        <ng-container *ngFor=\"let node of nodes\">\n          <ng-container *ngTemplateOutlet=\"nodeTemplateRef; context: { node: node, depth: 0 };\">\n          </ng-container>\n        </ng-container>\n      </cds-tree-view>\n    </div>\n    <div class=\"col-sm-6 col-lg-6 metadata\"\n         *ngIf=\"metadata\">\n      <legend>{{ metadataTitle }}</legend>\n      <div>\n        <cd-table-key-value [data]=\"metadata\">\n        </cd-table-key-value>\n      </div>\n    </div>\n  </div>\n</div>\n\n<router-outlet name=\"modal\"></router-outlet>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Node } from 'carbon-components-angular/treeview/tree-node.types';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { forkJoin, Subscription } from 'rxjs';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, TimerServiceInterval } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TimerService } from '~/app/shared/services/timer.service';\nimport { RgwRealm, RgwZone, RgwZonegroup } from '../models/rgw-multisite';\nimport { RgwMultisiteMigrateComponent } from '../rgw-multisite-migrate/rgw-multisite-migrate.component';\nimport { RgwMultisiteZoneDeletionFormComponent } from '../models/rgw-multisite-zone-deletion-form/rgw-multisite-zone-deletion-form.component';\nimport { RgwMultisiteZonegroupDeletionFormComponent } from '../models/rgw-multisite-zonegroup-deletion-form/rgw-multisite-zonegroup-deletion-form.component';\nimport { RgwMultisiteExportComponent } from '../rgw-multisite-export/rgw-multisite-export.component';\nimport { RgwMultisiteImportComponent } from '../rgw-multisite-import/rgw-multisite-import.component';\nimport { RgwMultisiteRealmFormComponent } from '../rgw-multisite-realm-form/rgw-multisite-realm-form.component';\nimport { RgwMultisiteZoneFormComponent } from '../rgw-multisite-zone-form/rgw-multisite-zone-form.component';\nimport { RgwMultisiteZonegroupFormComponent } from '../rgw-multisite-zonegroup-form/rgw-multisite-zonegroup-form.component';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { Router } from '@angular/router';\nimport { RgwMultisiteWizardComponent } from '../rgw-multisite-wizard/rgw-multisite-wizard.component';\nimport { RgwMultisiteSyncPolicyComponent } from '../rgw-multisite-sync-policy/rgw-multisite-sync-policy.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\n\nconst BASE_URL = 'rgw/multisite/configuration';\n\n@Component({\n  selector: 'cd-rgw-multisite-details',\n  templateUrl: './rgw-multisite-details.component.html',\n  styleUrls: ['./rgw-multisite-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RgwMultisiteDetailsComponent implements OnDestroy, OnInit {\n  private sub = new Subscription();\n  @ViewChild('treeNodeTemplate') labelTpl: TemplateRef<any>;\n  @ViewChild(RgwMultisiteSyncPolicyComponent) syncPolicyComp: RgwMultisiteSyncPolicyComponent;\n\n  messages = {\n    noDefaultRealm: $localize`Please create a default realm first to enable this feature`,\n    noMasterZone: $localize`Please create a master zone for each zone group to enable this feature`,\n    noRealmExists: $localize`No realm exists`,\n    disableExport: $localize`Please create master zone group and master zone for each of the realms`\n  };\n\n  icons = Icons;\n  permissions: Permissions;\n  selection = new CdTableSelection();\n  createTableActions: CdTableAction[];\n  migrateTableAction: CdTableAction[];\n  importAction: CdTableAction[];\n  exportAction: CdTableAction[];\n  multisiteReplicationActions: CdTableAction[];\n  loadingIndicator = true;\n\n  toNode(values: any): Node[] {\n    return values.map((value: any) => ({\n      label: this.labelTpl,\n      labelContext: {\n        data: { ...value }\n      },\n      id: value.id,\n      value: { ...value },\n      expanded: true,\n      name: value.name,\n      children: value?.children ? this.toNode(value.children) : []\n    }));\n  }\n\n  set nodes(values: any) {\n    this._nodes = this.toNode(values);\n    this.changeDetectionRef.detectChanges();\n  }\n\n  get nodes() {\n    return this._nodes;\n  }\n\n  private _nodes: Node[] = [];\n\n  modalRef: NgbModalRef;\n\n  realms: RgwRealm[] = [];\n  zonegroups: RgwZonegroup[] = [];\n  zones: RgwZone[] = [];\n  metadata: any;\n  metadataTitle: string;\n  bsModalRef: NgbModalRef;\n  realmIds: string[] = [];\n  zoneIds: string[] = [];\n  defaultRealmId = '';\n  defaultZonegroupId = '';\n  defaultZoneId = '';\n  multisiteInfo: object[] = [];\n  defaultsInfo: string[] = [];\n  showMigrateAndReplicationActions = false;\n  editTitle: string = 'Edit';\n  deleteTitle: string = 'Delete';\n  disableExport = true;\n  rgwModuleStatus: boolean;\n  restartGatewayMessage = false;\n  rgwModuleData: string | any[] = [];\n  activeId: string;\n  activeNodeId?: string;\n  MODULE_NAME = 'rgw';\n  NAVIGATE_TO = '/rgw/multisite';\n\n  constructor(\n    private modalService: ModalService,\n    private timerService: TimerService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    public timerServiceVariable: TimerServiceInterval,\n    public router: Router,\n    public rgwRealmService: RgwRealmService,\n    public rgwZonegroupService: RgwZonegroupService,\n    public rgwZoneService: RgwZoneService,\n    public rgwDaemonService: RgwDaemonService,\n    public mgrModuleService: MgrModuleService,\n    private notificationService: NotificationService,\n    private cdsModalService: ModalCdsService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private changeDetectionRef: ChangeDetectorRef\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  openModal(entity: any | string, edit = false) {\n    const entityName = edit ? entity?.data?.type : entity;\n    const action = edit ? 'edit' : 'create';\n    const initialState = {\n      resource: entityName,\n      action: action,\n      info: entity,\n      defaultsInfo: this.defaultsInfo,\n      multisiteInfo: this.multisiteInfo\n    };\n    if (entityName === 'realm') {\n      this.bsModalRef = this.cdsModalService.show(RgwMultisiteRealmFormComponent, initialState);\n    } else if (entityName === 'zonegroup') {\n      this.bsModalRef = this.modalService.show(RgwMultisiteZonegroupFormComponent, initialState, {\n        size: 'lg'\n      });\n    } else {\n      this.bsModalRef = this.modalService.show(RgwMultisiteZoneFormComponent, initialState, {\n        size: 'lg'\n      });\n    }\n  }\n\n  openMultisiteSetupWizard() {\n    this.bsModalRef = this.cdsModalService.show(RgwMultisiteWizardComponent);\n  }\n\n  openMigrateModal() {\n    const initialState = {\n      multisiteInfo: this.multisiteInfo\n    };\n    this.bsModalRef = this.modalService.show(RgwMultisiteMigrateComponent, initialState, {\n      size: 'lg'\n    });\n  }\n\n  openImportModal() {\n    const initialState = {\n      multisiteInfo: this.multisiteInfo\n    };\n    this.bsModalRef = this.modalService.show(RgwMultisiteImportComponent, initialState, {\n      size: 'lg'\n    });\n  }\n\n  openExportModal() {\n    const initialState = {\n      defaultsInfo: this.defaultsInfo,\n      multisiteInfo: this.multisiteInfo\n    };\n    this.bsModalRef = this.modalService.show(RgwMultisiteExportComponent, initialState, {\n      size: 'lg'\n    });\n  }\n\n  getDisableExport() {\n    this.realms.forEach((realm: any) => {\n      this.zonegroups.forEach((zonegroup) => {\n        if (realm.id === zonegroup.realm_id) {\n          if (zonegroup.is_master && zonegroup.master_zone !== '') {\n            this.disableExport = false;\n          }\n        }\n      });\n    });\n    if (!this.rgwModuleStatus) {\n      return true;\n    }\n    if (this.realms.length < 1) {\n      return this.messages.noRealmExists;\n    } else if (this.disableExport) {\n      return this.messages.disableExport;\n    } else {\n      return false;\n    }\n  }\n\n  getDisableImport() {\n    if (!this.rgwModuleStatus) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  ngOnInit() {\n    this.createTableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        name: this.actionLabels.CREATE + ' Realm',\n        click: () => this.openModal('realm')\n      },\n      {\n        permission: 'create',\n        icon: Icons.add,\n        name: this.actionLabels.CREATE + ' Zone Group',\n        click: () => this.openModal('zonegroup'),\n        disable: () => this.getDisable()\n      },\n      {\n        permission: 'create',\n        icon: Icons.add,\n        name: this.actionLabels.CREATE + ' Zone',\n        click: () => this.openModal('zone')\n      }\n    ];\n    this.migrateTableAction = [\n      {\n        permission: 'create',\n        icon: Icons.wrench,\n        name: this.actionLabels.MIGRATE,\n        click: () => this.openMigrateModal()\n      }\n    ];\n    this.importAction = [\n      {\n        permission: 'create',\n        icon: Icons.download,\n        name: this.actionLabels.IMPORT,\n        click: () => this.openImportModal(),\n        disable: () => this.getDisableImport()\n      }\n    ];\n    this.exportAction = [\n      {\n        permission: 'create',\n        icon: Icons.upload,\n        name: this.actionLabels.EXPORT,\n        click: () => this.openExportModal(),\n        disable: () => this.getDisableExport()\n      }\n    ];\n    this.multisiteReplicationActions = [\n      {\n        permission: 'create',\n        icon: Icons.wrench,\n        name: this.actionLabels.SETUP_MULTISITE_REPLICATION,\n        click: () =>\n          this.router.navigate([BASE_URL, { outlets: { modal: 'setup-multisite-replication' } }])\n      }\n    ];\n\n    this.startPollingMultisiteInfo();\n    this.mgrModuleService.updateCompleted$.subscribe(() => {\n      this.startPollingMultisiteInfo();\n      this.getRgwModuleStatus();\n    });\n    // Only get the module status if you can read from configOpt\n    if (this.permissions.configOpt.read) this.getRgwModuleStatus();\n  }\n\n  startPollingMultisiteInfo(): void {\n    const observables = [\n      this.rgwRealmService.getAllRealmsInfo(),\n      this.rgwZonegroupService.getAllZonegroupsInfo(),\n      this.rgwZoneService.getAllZonesInfo()\n    ];\n\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n\n    this.sub = this.timerService\n      .get(() => forkJoin(observables), this.timerServiceVariable.TIMER_SERVICE_PERIOD * 2)\n      .subscribe(\n        (multisiteInfo: [object, object, object]) => {\n          this.multisiteInfo = multisiteInfo;\n          this.loadingIndicator = false;\n          this.nodes = this.abstractTreeData(multisiteInfo);\n        },\n        (_error) => {}\n      );\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  private getRgwModuleStatus() {\n    this.rgwMultisiteService.getRgwModuleStatus().subscribe((status: boolean) => {\n      this.rgwModuleStatus = status;\n    });\n  }\n\n  private abstractTreeData(multisiteInfo: [object, object, object]): any[] {\n    let allNodes: object[] = [];\n    let rootNodes = {};\n    let firstChildNodes = {};\n    let allFirstChildNodes = [];\n    let secondChildNodes = {};\n    let allSecondChildNodes: {}[] = [];\n    this.realms = multisiteInfo[0]['realms'];\n    this.zonegroups = multisiteInfo[1]['zonegroups'];\n    this.zones = multisiteInfo[2]['zones'];\n    this.defaultRealmId = multisiteInfo[0]['default_realm'];\n    this.defaultZonegroupId = multisiteInfo[1]['default_zonegroup'];\n    this.defaultZoneId = multisiteInfo[2]['default_zone'];\n    this.defaultsInfo = this.getDefaultsEntities(\n      this.defaultRealmId,\n      this.defaultZonegroupId,\n      this.defaultZoneId\n    );\n    if (this.realms.length > 0) {\n      // get tree for realm -> zonegroup -> zone\n      for (const realm of this.realms) {\n        const result = this.rgwRealmService.getRealmTree(realm, this.defaultRealmId);\n        rootNodes = result['nodes'];\n        this.realmIds = this.realmIds.concat(result['realmIds']);\n        for (const zonegroup of this.zonegroups) {\n          if (zonegroup.realm_id === realm.id) {\n            firstChildNodes = this.rgwZonegroupService.getZonegroupTree(\n              zonegroup,\n              this.defaultZonegroupId,\n              realm\n            );\n            for (const zone of zonegroup.zones) {\n              const zoneResult = this.rgwZoneService.getZoneTree(\n                zone,\n                this.defaultZoneId,\n                this.zones,\n                zonegroup,\n                realm\n              );\n              secondChildNodes = zoneResult['nodes'];\n              this.zoneIds = this.zoneIds.concat(zoneResult['zoneIds']);\n              allSecondChildNodes.push(secondChildNodes);\n              secondChildNodes = {};\n            }\n            allSecondChildNodes = allSecondChildNodes.map((x) => ({\n              ...x,\n              parentNode: firstChildNodes\n            }));\n            firstChildNodes['children'] = allSecondChildNodes;\n            allSecondChildNodes = [];\n            allFirstChildNodes.push(firstChildNodes);\n            firstChildNodes = {};\n          }\n        }\n        allFirstChildNodes = allFirstChildNodes.map((x) => ({ ...x, parentNode: rootNodes }));\n        rootNodes['children'] = allFirstChildNodes;\n        allNodes.push({ ...rootNodes, label: rootNodes?.['name'] || rootNodes?.['id'] });\n        firstChildNodes = {};\n        secondChildNodes = {};\n        rootNodes = {};\n        allFirstChildNodes = [];\n        allSecondChildNodes = [];\n      }\n    }\n    if (this.zonegroups.length > 0) {\n      // get tree for zonegroup -> zone (standalone zonegroups that don't match a realm eg(initial default))\n      for (const zonegroup of this.zonegroups) {\n        if (!this.realmIds.includes(zonegroup.realm_id)) {\n          rootNodes = this.rgwZonegroupService.getZonegroupTree(zonegroup, this.defaultZonegroupId);\n          for (const zone of zonegroup.zones) {\n            const zoneResult = this.rgwZoneService.getZoneTree(\n              zone,\n              this.defaultZoneId,\n              this.zones,\n              zonegroup\n            );\n            firstChildNodes = zoneResult['nodes'];\n            this.zoneIds = this.zoneIds.concat(zoneResult['zoneIds']);\n            allFirstChildNodes.push(firstChildNodes);\n            firstChildNodes = {};\n          }\n          allFirstChildNodes = allFirstChildNodes.map((x) => ({ ...x, parentNode: rootNodes }));\n          rootNodes['children'] = allFirstChildNodes;\n          allNodes.push({ ...rootNodes, label: rootNodes?.['name'] || rootNodes?.['id'] });\n          firstChildNodes = {};\n          rootNodes = {};\n          allFirstChildNodes = [];\n        }\n      }\n    }\n    if (this.zones.length > 0) {\n      // get tree for standalone zones(zones that do not belong to a zonegroup)\n      for (const zone of this.zones) {\n        if (this.zoneIds.length > 0 && !this.zoneIds.includes(zone.id)) {\n          const zoneResult = this.rgwZoneService.getZoneTree(zone, this.defaultZoneId, this.zones);\n          rootNodes = zoneResult['nodes'];\n          allNodes.push({ ...rootNodes, label: rootNodes?.['name'] || rootNodes?.['id'] });\n          rootNodes = {};\n        }\n      }\n    }\n    if (this.realms.length < 1 && this.zonegroups.length < 1 && this.zones.length < 1) {\n      return [\n        {\n          name: 'No nodes!',\n          label: 'No nodes!'\n        }\n      ];\n    }\n    this.realmIds = [];\n    this.zoneIds = [];\n    this.evaluateMigrateAndReplicationActions();\n    this.rgwMultisiteService.restartGatewayMessage$.subscribe((value) => {\n      if (value !== null) {\n        this.restartGatewayMessage = value;\n      } else {\n        this.checkRestartGatewayMessage();\n      }\n    });\n    return allNodes;\n  }\n\n  checkRestartGatewayMessage() {\n    this.rgwDaemonService.list().subscribe((data: any) => {\n      const realmName = data.map((item: { [x: string]: any }) => item['realm_name']);\n      if (\n        this.defaultRealmId !== '' &&\n        this.defaultZonegroupId !== '' &&\n        this.defaultZoneId !== '' &&\n        realmName.includes('')\n      ) {\n        this.restartGatewayMessage = true;\n      } else {\n        this.restartGatewayMessage = false;\n      }\n    });\n  }\n\n  getDefaultsEntities(\n    defaultRealmId: string,\n    defaultZonegroupId: string,\n    defaultZoneId: string\n  ): any {\n    const defaultRealm = this.realms?.find((x: { id: string }) => x.id === defaultRealmId);\n    const defaultZonegroup = this.zonegroups?.find(\n      (x: { id: string }) => x.id === defaultZonegroupId\n    );\n    const defaultZone = this.zones?.find((x: { id: string }) => x.id === defaultZoneId);\n\n    return {\n      defaultRealmName: defaultRealm?.name,\n      defaultZonegroupName: defaultZonegroup?.name,\n      defaultZoneName: defaultZone?.name\n    };\n  }\n\n  onNodeSelected(node: Node) {\n    this.metadataTitle = node?.value?.name;\n    this.metadata = node?.value?.info;\n    this.activeNodeId = node?.value?.id;\n    node.expanded = true;\n  }\n\n  getDisable() {\n    let isMasterZone = true;\n    if (this.defaultRealmId === '') {\n      return this.messages.noDefaultRealm;\n    } else {\n      this.zonegroups.forEach((zgp: any) => {\n        if (_.isEmpty(zgp.master_zone)) {\n          isMasterZone = false;\n        }\n      });\n      if (!isMasterZone) {\n        setTimeout(() => {\n          this.editTitle =\n            'Please create a master zone for each existing zonegroup to enable this feature';\n        }, 1);\n        return this.messages.noMasterZone;\n      } else {\n        setTimeout(() => {\n          this.editTitle = 'Edit';\n        }, 1);\n        return false;\n      }\n    }\n  }\n\n  evaluateMigrateAndReplicationActions() {\n    if (\n      this.realms.length === 0 &&\n      this.zonegroups.length === 1 &&\n      this.zonegroups[0].name === 'default' &&\n      this.zones.length === 1 &&\n      this.zones[0].name === 'default'\n    ) {\n      this.showMigrateAndReplicationActions = true;\n    } else {\n      this.showMigrateAndReplicationActions = false;\n    }\n    return this.showMigrateAndReplicationActions;\n  }\n\n  isDeleteDisabled(node: Node): { isDisabled: boolean; deleteTitle: string } {\n    let isDisabled: boolean = false;\n    let deleteTitle: string = this.deleteTitle;\n    let masterZonegroupCount: number = 0;\n    if (node?.value?.type === 'realm' && node?.data?.is_default && this.realms.length < 2) {\n      isDisabled = true;\n    }\n\n    if (node?.data?.type === 'zonegroup') {\n      if (this.zonegroups.length < 2) {\n        deleteTitle = 'You can not delete the only zonegroup available';\n        isDisabled = true;\n      } else if (node?.data?.is_default) {\n        deleteTitle = 'You can not delete the default zonegroup';\n        isDisabled = true;\n      } else if (node?.data?.is_master) {\n        for (let zonegroup of this.zonegroups) {\n          if (zonegroup.is_master === true) {\n            masterZonegroupCount++;\n            if (masterZonegroupCount > 1) break;\n          }\n        }\n        if (masterZonegroupCount < 2) {\n          deleteTitle = 'You can not delete the only master zonegroup available';\n          isDisabled = true;\n        }\n      }\n    }\n\n    if (node?.data?.type === 'zone') {\n      if (this.zones.length < 2) {\n        deleteTitle = 'You can not delete the only zone available';\n        isDisabled = true;\n      } else if (node?.data?.is_default) {\n        deleteTitle = 'You can not delete the default zone';\n        isDisabled = true;\n      } else if (node?.data?.is_master && node?.data?.zone_zonegroup.zones.length < 2) {\n        deleteTitle =\n          'You can not delete the master zone as there are no more zones in this zonegroup';\n        isDisabled = true;\n      }\n    }\n\n    if (!isDisabled) {\n      this.deleteTitle = 'Delete';\n    }\n\n    return { isDisabled, deleteTitle };\n  }\n\n  delete(node: Node) {\n    if (node?.data?.type === 'realm') {\n      const modalRef = this.cdsModalService.show(DeleteConfirmationModalComponent, {\n        itemDescription: $localize`${node?.data?.type} ${node?.data?.name}`,\n        itemNames: [`${node?.data?.name}`],\n        submitAction: () => {\n          this.rgwRealmService.delete(node?.data?.name).subscribe(\n            () => {\n              this.notificationService.show(\n                NotificationType.success,\n                $localize`Realm: '${node?.data?.name}' deleted successfully`\n              );\n              this.cdsModalService.dismissAll();\n            },\n            () => {\n              this.cdsModalService.stopLoadingSpinner(modalRef.deletionForm);\n            }\n          );\n        }\n      });\n    } else if (node?.data?.type === 'zonegroup') {\n      this.modalRef = this.modalService.show(RgwMultisiteZonegroupDeletionFormComponent, {\n        zonegroup: node.data\n      });\n    } else if (node?.data?.type === 'zone') {\n      this.modalRef = this.modalService.show(RgwMultisiteZoneDeletionFormComponent, {\n        zone: node.data\n      });\n    }\n  }\n\n  enableRgwModule() {\n    this.mgrModuleService.updateModuleState(\n      this.MODULE_NAME,\n      false,\n      null,\n      this.NAVIGATE_TO,\n      'Enabled RGW Module',\n      true\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-rgw-sync-primary-zone',\n  templateUrl: './rgw-sync-primary-zone.component.html',\n  styleUrls: ['./rgw-sync-primary-zone.component.scss']\n})\nexport class RgwSyncPrimaryZoneComponent {\n  icons = Icons;\n\n  @Input()\n  realm: string;\n\n  @Input()\n  zonegroup: string;\n\n  @Input()\n  zone: string;\n\n  constructor() {}\n}\n","<ul class=\"pb-5\">\n  <li>\n    <svg [cdsIcon]=\"icons.reweight\"\n         [size]=\"icons.size20\"\n         class=\"cds-icon--size-07\"></svg>\n  </li>\n  <li class=\"badge badge-info mt-2\">{{realm}}</li>\n  <li>\n    <svg [cdsIcon]=\"icons.down\"\n         class=\" cds-icon--size-07\"></svg>\n  </li>\n  <li>\n    <i [ngClass]=\"[icons.large2x, icons.cubes]\"\n       class=\"mt-2\"></i>\n  </li>\n  <p class=\"badge badge-info mt-2\">{{zonegroup}}</p>\n  <li>\n    <svg [cdsIcon]=\"icons.down\"\n         class=\"cds-icon--size-07\"></svg>\n  </li>\n  <li>\n    <svg [cdsIcon]=\"icons.deploy\"\n         [size]=\"icons.size20\"\n         class=\"cds-icon--size-07 cds-icon\"></svg>\n  </li>\n  <li class=\"badge badge-info mt-2\">{{zone}}</li>\n</ul>\n","<span *ngIf=\"metadataSyncInfo === 'no sync (zone is master)'\">\n  <ul class=\"me-2\">\n    <li><b i18n>Status:</b></li>\n    <li>No Sync</li>\n  </ul>\n</span>\n<span *ngIf=\"metadataSyncInfo !== 'no sync (zone is master)'\">\n  <ul class=\"me-2\">\n    <ng-template #upToDateTpl>\n      <li class=\"badge badge-success\"\n          i18n>Up to Date</li>\n    </ng-template>\n    <cds-toggletip  [dropShadow]=\"true\"\n                    [align]=\"align\">\n      <div cdsToggletipButton\n           class=\"toggleTipBtn\">\n        <ng-template #showMetadataStatus>\n          <a  *ngIf=\"metadataSyncInfo.syncstatus !== 'Not Syncing From Zone'\"\n              class=\"lead text-primary\"\n              popoverClass=\"rgw-overview-card-popover\"\n              i18n>{{ metadataSyncInfo.syncstatus | titlecase }}</a>\n          <a  *ngIf=\"metadataSyncInfo.syncstatus === 'Not Syncing From Zone'\"\n              class=\"lead text-primary\"\n              i18n>Not Syncing</a>\n        </ng-template>\n        <li><b i18n>Status:</b></li>\n        <li *ngIf=\"metadataSyncInfo.syncstatus?.includes('failed') || metadataSyncInfo.syncstatus?.includes('error'); else showMetadataStatus\">\n          <svg  [cdsIcon]=\"icons.danger\"\n                [size]=\"icons.size16\"\n                class=\"cds-danger-color\"></svg>\n          <a class=\"lead text-danger\"\n             i18n>Error</a>\n        </li>\n      </div>\n      <div cdsToggletipContent>\n        <div class=\"cds--popover-scroll-container\">\n          <ul class=\"text-center\">\n            <li><h5><b i18n>Metadata Sync Status:</b></h5></li>\n            <li *ngFor=\"let status of metadataSyncInfo.fullSyncStatus\">\n              <span *ngIf=\"!status?.includes(metadataSyncInfo.syncstatus) && !status?.includes('failed') && !status?.includes('error')\">\n                <span *ngIf=\"status?.includes(':')\">\n                  <b>{{ status.split(':')[0] | titlecase }}</b>:{{ status.split(':')[1] | titlecase}}\n                </span>\n                <span *ngIf=\"!status?.includes(':')\">\n                  <b>{{ status | titlecase }}</b>\n                </span>\n              </span>\n              <span *ngIf=\"status?.includes('failed') || status?.includes('error')\">\n                  {{ status | titlecase }}\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </cds-toggletip>\n    <li class=\"mt-4 fw-bold\"\n        i18n>\n        Last Synced:\n    </li>\n    <li class=\"badge badge-info\"\n        *ngIf=\"metadataSyncInfo.timestamp; else upToDateTpl\">{{ metadataSyncInfo.timestamp | relativeDate }}</li>\n  </ul>\n</span>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-rgw-sync-metadata-info',\n  templateUrl: './rgw-sync-metadata-info.component.html',\n  styleUrls: ['./rgw-sync-metadata-info.component.scss']\n})\nexport class RgwSyncMetadataInfoComponent {\n  icons = Icons;\n  align = 'top';\n  @Input()\n  metadataSyncInfo: any = {};\n\n  constructor() {}\n}\n","<ul class=\"me-2\">\n  <ng-template #upToDateTpl>\n    <li class=\"badge badge-success\"\n        i18n>Up to Date</li>\n  </ng-template>\n  <cds-toggletip  [dropShadow]=\"true\"\n                  [align]=\"align\">\n    <div  cdsToggletipButton\n          class=\"toggleTipBtn\">\n    <ng-template #showStatus>\n      <a  *ngIf=\"zone.syncstatus !== 'Not Syncing From Zone'\"\n          class=\"lead text-primary\"\n          i18n>{{ zone.syncstatus | titlecase }}</a>\n      <a  *ngIf=\"zone.syncstatus === 'Not Syncing From Zone'\"\n          class=\"lead text-primary\"\n          i18n>Not Syncing</a>\n    </ng-template>\n    <li><b>Status:</b></li>\n    <li *ngIf=\"zone.syncstatus?.includes('failed') || zone.syncstatus?.includes('error'); else showStatus\">\n      <svg  [cdsIcon]=\"icons.danger\"\n            [size]=\"icons.size16\"\n            class=\"cds-danger-color\"></svg>\n      <a  class=\"lead text-danger\"\n          i18n>Error</a>\n    </li>\n  </div>\n  <div cdsToggletipContent>\n    <div class=\"cds--popover-scroll-container\">\n      <ul class=\"text-center\">\n        <li><h5><b i18n>Sync Status:</b></h5></li>\n        <li *ngFor=\"let status of zone.fullSyncStatus\">\n          <span *ngIf=\"!status?.includes(zone.name) && !status?.includes(zone.syncstatus) && !status?.includes('failed') && !status?.includes('error')\">\n            <span *ngIf=\"status?.includes(':')\">\n              <b>{{ status.split(': ')[0] | titlecase }}</b>:{{ status.split(': ')[1] | titlecase}}\n            </span>\n            <span *ngIf=\"!status?.includes(':')\">\n              <b>{{ status | titlecase }}</b>\n            </span>\n          </span>\n          <span *ngIf=\"status?.includes('failed') || status?.includes('error')\">\n            {{ status | titlecase }}\n          </span>\n        </li>\n      </ul>\n    </div>\n  </div>\n  </cds-toggletip>\n  <li class=\"mt-4 fw-bold\"\n      i18n>\n      Last Synced:\n  </li>\n  <li class=\"badge badge-info\"\n      *ngIf=\"zone.timestamp; else upToDateTpl\">{{ zone.timestamp | relativeDate }}</li>\n</ul>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-rgw-sync-data-info',\n  templateUrl: './rgw-sync-data-info.component.html',\n  styleUrls: ['./rgw-sync-data-info.component.scss']\n})\nexport class RgwSyncDataInfoComponent {\n  icons = Icons;\n  align = 'top';\n  @Input()\n  zone: any = {};\n  constructor() {}\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <cd-card cardTitle=\"Inventory\"\n             i18n-title\n             class=\"col-sm-3 px-3 d-flex\"\n             aria-label=\"Inventory card\">\n\n      <cd-card-row [data]=\"rgwDaemonCount\"\n                   link=\"/rgw/daemon\"\n                   title=\"Gateway\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"rgwDaemonCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"rgwRealmCount\"\n                   link=\"/rgw/multisite\"\n                   title=\"Realm\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"rgwRealmCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"rgwZonegroupCount\"\n                   link=\"/rgw/multisite\"\n                   title=\"Zone Group\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"rgwZonegroupCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"rgwZoneCount\"\n                   link=\"/rgw/multisite\"\n                   title=\"Zone\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"rgwZoneCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"rgwBucketCount\"\n                   link=\"/rgw/bucket\"\n                   title=\"Bucket\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"rgwBucketCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"UserCount\"\n                   link=\"/rgw/user\"\n                   title=\"User\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"UserCount != null\"></cd-card-row>\n\n      <cd-card-row [data]=\"objectCount\"\n                   title=\"Object\"\n                   summaryType=\"simplified\"\n                   *ngIf=\"objectCount != null\"></cd-card-row>\n    </cd-card>\n    <cd-card cardTitle=\"Performance Statistics\"\n             i18n-title\n             class=\"col-sm-6 d-flex\"\n             ria-label=\"Performance Statistics card\">\n      <div class=\"ms-4 me-4 mt-0\">\n        <cd-dashboard-time-selector (selectedTime)=\"getPrometheusData($event)\">\n        </cd-dashboard-time-selector>\n        <cd-dashboard-area-chart chartTitle=\"Requests/sec\"\n                                 dataUnits=\"\"\n                                 [labelsArray]=\"['Requests/sec']\"\n                                 [dataArray]=\"[queriesResults.RGW_REQUEST_PER_SECOND]\">\n        </cd-dashboard-area-chart>\n        <cd-dashboard-area-chart chartTitle=\"Latency\"\n                                 dataUnits=\"ms\"\n                                 decimals=\"2\"\n                                 [labelsArray]=\"['GET', 'PUT']\"\n                                 [dataArray]=\"[queriesResults.AVG_GET_LATENCY, queriesResults.AVG_PUT_LATENCY]\">\n        </cd-dashboard-area-chart>\n        <cd-dashboard-area-chart chartTitle=\"Bandwidth\"\n                                 dataUnits=\"B\"\n                                 [labelsArray]=\"['GET', 'PUT']\"\n                                 [dataArray]=\"[queriesResults.GET_BANDWIDTH, queriesResults.PUT_BANDWIDTH]\">\n        </cd-dashboard-area-chart>\n      </div>\n    </cd-card>\n    <div class=\"col-lg-3\">\n      <cd-card cardTitle=\"Used Capacity\"\n               i18n-title\n               class=\"col-sm-2 d-flex w-100 h-50 pb-3\"\n               aria-label=\"Used Capacity\"\n               [alignItemsCenter]=\"true\"\n               [justifyContentCenter]=\"true\">\n        <span  class=\"ms-4 me-4 text-center\">\n          <h1>{{ totalPoolUsedBytes | dimlessBinary}}</h1>\n        </span>\n      </cd-card>\n      <cd-card cardTitle=\"Average Object Size\"\n               i18n-title\n               class=\"col-sm-2 d-flex w-100 h-50 pt-3\"\n               aria-label=\"Avg Object Size\"\n               [alignItemsCenter]=\"true\"\n               [justifyContentCenter]=\"true\">\n        <span class=\"ms-4 me-4 text-center\">\n          <h1>{{ averageObjectSize | dimlessBinary}}</h1>\n        </span>\n      </cd-card>\n    </div>\n  </div>\n\n  <div class=\"row pt-4 pb-4\">\n    <cd-card cardTitle=\"Multi-Site Sync Status\"\n             i18n-title>\n      <ng-template #notConfigured>\n        <span class=\"pe-5 ps-5\">\n          <cd-alert-panel type=\"info\"\n                          i18n>\n            Multi-site needs to be configured in order to see the multi-site sync status.\n            Please consult the&nbsp;<cd-doc section=\"multisite\"></cd-doc>&nbsp;on how to configure and enable the multi-site functionality.\n          </cd-alert-panel>\n        </span>\n      </ng-template>\n      <span *ngIf=\"loading\"\n            class=\"d-flex justify-content-center\">\n        <i [ngClass]=\"[icons.large3x, icons.spinner, icons.spin]\"></i>\n      </span>\n      <div class=\"row\"\n           *ngIf=\"multisiteSyncStatus$ | async\">\n        <div class=\"row pt-2\"\n             *ngIf=\"showMultisiteCard; else notConfigured\">\n          <cd-card cardTitle=\"Primary Source Zone\"\n                   class=\"col-lg-3 d-flex justify-content-center align-primary-zone\"\n                   [alignItemsCenter]=\"true\"\n                   [justifyContentCenter]=\"true\">\n            <span *ngIf=\"loading\"\n                  class=\"d-flex justify-content-center\">\n              <i [ngClass]=\"[icons.large3x, icons.spinner, icons.spin]\"></i>\n            </span>\n            <span *ngIf=\"!loading\"\n                  class=\"d-flex justify-content-center\">\n              <cd-rgw-sync-primary-zone [realm]=\"realm\"\n                                        [zonegroup]=\"zonegroup\"\n                                        [zone]=\"zone\">\n              </cd-rgw-sync-primary-zone>\n            </span>\n          </cd-card>\n          <div class=\"col-lg-9\">\n            <cd-card cardTitle=\"Source Zones\"\n                     class=\"d-flex h-100\">\n              <span *ngIf=\"loading\"\n                    class=\"d-flex justify-content-center\">\n                <i [ngClass]=\"[icons.large3x, icons.spinner, icons.spin]\"></i>\n              </span>\n              <div class=\"row\"\n                   *ngIf=\"!loading\">\n                <cd-card *ngFor=\"let zone of replicaZonesInfo; trackBy: trackByFn\"\n                         cardTitle=\"{{zone.name}}\"\n                         cardType=\"zone\"\n                         shadowClass=\"true\"\n                         i18n-title\n                         class=\"col-sm-9 col-lg-6 align-replica-zones d-flex pt-4\"\n                         aria-label=\"Source Zones Card\">\n                  <div class=\"row pb-4 ps-3 pe-3\">\n                    <cd-card *ngFor=\"let title of chartTitles\"\n                             [cardTitle]=\"title\"\n                             i18n-title\n                             cardType=\"syncCards\"\n                             removeBorder=\"true\"\n                             class=\"col-sm-9 col-lg-6\"\n                             [ngClass]=\"{ 'border-left': title === 'Data Sync' }\"\n                             aria-label=\"Charts Card\"\n                             [alignItemsCenter]=\"true\"\n                             [justifyContentCenter]=\"true\">\n                      <span class=\"me-2 text-center\"\n                            *ngIf=\"title === 'Metadata Sync'\">\n                        <cd-rgw-sync-metadata-info [metadataSyncInfo]=\"metadataSyncInfo\">\n                        </cd-rgw-sync-metadata-info>\n                      </span>\n                      <span class=\"me-2\"\n                            *ngIf=\"title === 'Data Sync'\">\n                        <cd-rgw-sync-data-info [zone]=\"zone\">\n                        </cd-rgw-sync-data-info>\n                      </span>\n                    </cd-card>\n                  </div>\n                </cd-card>\n              </div>\n            </cd-card>\n          </div>\n        </div>\n      </div>\n    </cd-card>\n  </div>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable, ReplaySubject, Subscription, combineLatest, of } from 'rxjs';\n\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\n\nimport { RgwPromqls as queries } from '~/app/shared/enum/dashboard-promqls.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { catchError, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\n\n@Component({\n  selector: 'cd-rgw-overview-dashboard',\n  templateUrl: './rgw-overview-dashboard.component.html',\n  styleUrls: ['./rgw-overview-dashboard.component.scss']\n})\nexport class RgwOverviewDashboardComponent implements OnInit, OnDestroy {\n  icons = Icons;\n\n  interval = new Subscription();\n  permissions: Permissions;\n  rgwDaemonCount = 0;\n  rgwRealmCount = 0;\n  rgwZonegroupCount = 0;\n  rgwZoneCount = 0;\n  rgwBucketCount = 0;\n  objectCount = 0;\n  UserCount = 0;\n  totalPoolUsedBytes = 0;\n  averageObjectSize = 0;\n  realmData: any;\n  realmSub: Subscription;\n  multisiteInfo: object[] = [];\n  ZonegroupSub: Subscription;\n  ZoneSUb: Subscription;\n  queriesResults: { [key: string]: [] } = {\n    RGW_REQUEST_PER_SECOND: [],\n    BANDWIDTH: [],\n    AVG_GET_LATENCY: [],\n    AVG_PUT_LATENCY: []\n  };\n  timerGetPrometheusDataSub: Subscription;\n  chartTitles = ['Metadata Sync', 'Data Sync'];\n  realm: string;\n  zonegroup: string;\n  zone: string;\n  metadataSyncInfo: string;\n  replicaZonesInfo: any = [];\n  metadataSyncData: {};\n  showMultisiteCard = true;\n  loading = true;\n  multisiteSyncStatus$: Observable<any>;\n  subject = new ReplaySubject<any>();\n  fetchDataSub: Subscription;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private refreshIntervalService: RefreshIntervalService,\n    private rgwDaemonService: RgwDaemonService,\n    private rgwRealmService: RgwRealmService,\n    private rgwZonegroupService: RgwZonegroupService,\n    private rgwZoneService: RgwZoneService,\n    private rgwBucketService: RgwBucketService,\n    private prometheusService: PrometheusService,\n    private rgwMultisiteService: RgwMultisiteService,\n    private notificationService: NotificationService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    this.interval = this.refreshIntervalService.intervalData$.subscribe(() => {\n      this.fetchDataSub = combineLatest([\n        this.rgwDaemonService.list(),\n        this.rgwBucketService.fetchAndTransformBuckets(),\n        this.rgwBucketService.totalNumObjects$,\n        this.rgwBucketService.totalUsedCapacity$,\n        this.rgwBucketService.averageObjectSize$,\n        this.rgwBucketService.getTotalBucketsAndUsersLength()\n      ]).subscribe(([daemonData, _, objectCount, usedCapacity, averageSize, bucketData]) => {\n        this.rgwDaemonCount = daemonData.length;\n        this.objectCount = objectCount;\n        this.totalPoolUsedBytes = usedCapacity;\n        this.averageObjectSize = averageSize;\n        this.rgwBucketCount = bucketData.buckets_count;\n        this.UserCount = bucketData.users_count;\n      });\n      this.getSyncStatus();\n    });\n    this.realmSub = this.rgwRealmService.list().subscribe((data: any) => {\n      this.rgwRealmCount = data['realms'].length || 0;\n    });\n    this.ZonegroupSub = this.rgwZonegroupService.list().subscribe((data: any) => {\n      this.rgwZonegroupCount = data['zonegroups'].length;\n    });\n    this.ZoneSUb = this.rgwZoneService.list().subscribe((data: any) => {\n      this.rgwZoneCount = data['zones'].length;\n    });\n    this.getPrometheusData(this.prometheusService.lastHourDateObject);\n    this.multisiteSyncStatus$ = this.subject.pipe(\n      switchMap(() =>\n        this.rgwMultisiteService.getSyncStatus().pipe(\n          tap((data: any) => {\n            this.loading = false;\n            this.replicaZonesInfo = data['dataSyncInfo'];\n            this.metadataSyncInfo = data['metadataSyncInfo'];\n            if (this.replicaZonesInfo.length === 0) {\n              this.showMultisiteCard = false;\n              this.loading = false;\n            }\n            [this.realm, this.zonegroup, this.zone] = data['primaryZoneData'];\n          }),\n          catchError((err) => {\n            err.preventDefault();\n            this.loading = false;\n            this.showMultisiteCard = false;\n            const errorMessage = $localize`Unable to fetch sync status`;\n            this.notificationService.show(\n              NotificationType.error,\n              errorMessage,\n              err.error.detail || err.error.message\n            );\n            return of(true);\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n  }\n\n  ngOnDestroy() {\n    this.interval?.unsubscribe();\n    this.realmSub?.unsubscribe();\n    this.ZonegroupSub?.unsubscribe();\n    this.ZoneSUb?.unsubscribe();\n    this.fetchDataSub?.unsubscribe();\n    this.prometheusService?.unsubscribe();\n  }\n\n  getPrometheusData(selectedTime: any) {\n    this.queriesResults = this.prometheusService.getRangeQueriesData(\n      selectedTime,\n      queries,\n      this.queriesResults,\n      true\n    );\n  }\n\n  getSyncStatus() {\n    this.subject.next();\n  }\n\n  trackByFn(zone: any) {\n    return zone;\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form\n      #frm=\"ngForm\"\n      [formGroup]=\"syncPolicyForm\"\n      *cdFormLoading=\"loading\"\n      novalidate>\n      <div class=\"modal-body\">\n        <!-- Group Id -->\n        <div class=\"form-group row\">\n          <label\n            class=\"cd-col-form-label required\"\n            for=\"group_id\"\n            i18n>Group Name</label>\n          <div class=\"cd-col-form-input\">\n            <input\n              id=\"group_id\"\n              name=\"group_id\"\n              class=\"form-control\"\n              type=\"text\"\n              i18n-placeholder\n              placeholder=\"Group Name...\"\n              formControlName=\"group_id\"\n              [readonly]=\"editing\"/>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"syncPolicyForm.showError('group_id', frm, 'required')\"\n              i18n>This field is required.</span>\n          </div>\n        </div>\n        <!-- Status -->\n        <div class=\"form-group row\">\n          <label\n            class=\"cd-col-form-label required\"\n            for=\"status\"\n            i18n>Status</label>\n          <div class=\"cd-col-form-input\">\n            <select\n                id=\"status\"\n                name=\"status\"\n                class=\"form-select\"\n                formControlName=\"status\">\n              <option\n                i18n\n                value=\"{{syncPolicyStatus.ENABLED}}\">{{syncPolicyStatus.ENABLED | upperFirst }}</option>\n              <option\n                i18n\n                value=\"{{syncPolicyStatus.ALLOWED}}\">{{syncPolicyStatus.ALLOWED | upperFirst }}</option>\n              <option\n                i18n\n                value=\"{{syncPolicyStatus.FORBIDDEN}}\">{{syncPolicyStatus.FORBIDDEN | upperFirst }}</option>\n            </select>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"syncPolicyForm.showError('status', frm, 'required')\"\n              i18n>This field is required.</span>\n          </div>\n        </div>\n        <!-- Bucket Name -->\n        <div class=\"form-group row\">\n          <label\n            class=\"cd-col-form-label\"\n            for=\"bucket_name\"\n            i18n>Bucket Name</label>\n          <div class=\"cd-col-form-input\">\n            <input\n              id=\"bucket_name\"\n              name=\"bucket_name\"\n              class=\"form-control\"\n              type=\"text\"\n              i18n-placeholder\n              placeholder=\"Bucket Name...\"\n              formControlName=\"bucket_name\"\n              [ngbTypeahead]=\"bucketDataSource\"/>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"syncPolicyForm.showError('bucket_name', frm, 'bucketNameNotAllowed')\"\n              i18n>The bucket with chosen name does not exist.</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                                [form]=\"syncPolicyForm\"\n                                [disabled]=\"syncPolicyForm.pending || syncPolicyForm.pristine || syncPolicyForm.invalid\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, ValidationErrors, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, timer as observableTimer, of } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  mergeMap,\n  switchMapTo\n} from 'rxjs/operators';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwMultisiteSyncPolicyStatus } from '../models/rgw-multisite';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'cd-rgw-multisite-sync-policy-form',\n  templateUrl: './rgw-multisite-sync-policy-form.component.html',\n  styleUrls: ['./rgw-multisite-sync-policy-form.component.scss']\n})\nexport class RgwMultisiteSyncPolicyFormComponent extends CdForm implements OnInit {\n  syncPolicyForm: CdFormGroup;\n  editing = false;\n  action: string;\n  resource: string;\n  syncPolicyStatus = RgwMultisiteSyncPolicyStatus;\n  pageURL: string;\n  bucketDataSource = (text$: Observable<string>) => {\n    return text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      mergeMap((token: string) => this.getBucketTypeahead(token))\n    );\n  };\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    public actionLabels: ActionLabelsI18n,\n    private fb: CdFormBuilder,\n    private rgwMultisiteService: RgwMultisiteService,\n    private notificationService: NotificationService,\n    private rgwBucketService: RgwBucketService\n  ) {\n    super();\n    this.editing = this.router.url.includes('(modal:edit');\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`Sync Policy Group`;\n    this.createForm();\n    this.loadingReady();\n    this.pageURL = 'rgw/multisite/sync-policy';\n  }\n\n  ngOnInit(): void {\n    if (this.editing) {\n      this.route.paramMap.subscribe((params: any) => {\n        const groupName = params.get('groupName');\n        if (groupName) {\n          const bucketName = params.get('bucketName');\n          this.loadingStart();\n          this.rgwMultisiteService\n            .getSyncPolicyGroup(groupName, bucketName)\n            .subscribe((syncPolicy: any) => {\n              this.loadingReady();\n              if (syncPolicy) {\n                this.syncPolicyForm.get('bucket_name').disable();\n                this.syncPolicyForm.patchValue({\n                  group_id: syncPolicy.id,\n                  status: syncPolicy.status,\n                  bucket_name: bucketName\n                });\n              } else {\n                this.goToListView();\n              }\n            });\n        }\n      });\n    }\n  }\n\n  goToListView() {\n    // passing state in order to return to same tab on details page\n    this.router.navigate([this.pageURL, { outlets: { modal: null }, state: { reload: true } }]);\n  }\n\n  createForm() {\n    this.syncPolicyForm = this.fb.group({\n      group_id: ['', Validators.required],\n      status: [`${this.syncPolicyStatus.ENABLED}`, Validators.required],\n      bucket_name: ['', , this.bucketExistence(true)]\n    });\n  }\n\n  submit() {\n    if (this.syncPolicyForm.pristine) {\n      this.goToListView();\n      return;\n    }\n\n    // Ensure that no validation is pending\n    if (this.syncPolicyForm.pending) {\n      this.syncPolicyForm.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    if (!this.editing) {\n      // Add\n      this.rgwMultisiteService.createSyncPolicyGroup(this.syncPolicyForm.getRawValue()).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Created Sync Policy Group '${this.syncPolicyForm.getValue('group_id')}'`\n          );\n          this.goToListView();\n        },\n        () => {\n          // Reset the 'Submit' button.\n          this.syncPolicyForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    } else {\n      this.rgwMultisiteService.modifySyncPolicyGroup(this.syncPolicyForm.getRawValue()).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Modified Sync Policy Group '${this.syncPolicyForm.getValue('group_id')}'`\n          );\n          this.goToListView();\n        },\n        () => {\n          // Reset the 'Submit' button.\n          this.syncPolicyForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    }\n  }\n\n  bucketExistence(requiredExistenceResult: boolean): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (control.dirty) {\n        return observableTimer(500).pipe(\n          switchMapTo(this.rgwBucketService.exists(control.value)),\n          map((existenceResult: boolean) =>\n            existenceResult === requiredExistenceResult ? null : { bucketNameNotAllowed: true }\n          )\n        );\n      }\n      return of(null);\n    };\n  }\n\n  private getBucketTypeahead(path: string): Observable<any> {\n    if (_.isString(path) && path !== '/' && path !== '') {\n      return this.rgwBucketService.list().pipe(\n        map((bucketList: any) =>\n          bucketList\n            .filter((bucketName: string) => bucketName.toLowerCase().includes(path))\n            .slice(0, 15)\n        ),\n        catchError(() => of([$localize`Error while retrieving bucket names.`]))\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} RGW Encryption Configurations</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"configForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"configForm\">\n    <div class=\"modal-body\">\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"encryptionType\"\n               i18n>Encryption Type</label>\n        <div class=\"col-md-auto custom-checkbox form-check-inline ms-3\">\n          <input class=\"form-check-input\"\n                 formControlName=\"encryptionType\"\n                 id=\"s3Enabled\"\n                 type=\"radio\"\n                 (change)=\"checkKmsProviders()\"\n                 [attr.disabled]=\"editing && configForm.getValue('encryptionType') !== ENCRYPTION_TYPE.SSE_S3 ? true : null\"\n                 [value]=\"ENCRYPTION_TYPE.SSE_S3\">\n          <label class=\"custom-check-label\"\n                 [ngClass]=\"{'text-muted': editing && configForm.getValue('encryptionType') !== ENCRYPTION_TYPE.SSE_S3}\"\n                 for=\"s3Enabled\"\n                 i18n>SSE-S3</label>\n        </div>\n\n        <div class=\"col-md-auto custom-checkbox form-check-inline\">\n          <input class=\"form-check-input\"\n                 formControlName=\"encryptionType\"\n                 id=\"kmsEnabled\"\n                 (change)=\"checkKmsProviders()\"\n                 [value]=\"ENCRYPTION_TYPE.SSE_KMS\"\n                 [attr.disabled]=\"editing && configForm.getValue('encryptionType') !== ENCRYPTION_TYPE.SSE_KMS ? true : null\"\n                 type=\"radio\">\n          <label class=\"custom-check-label\"\n                 [ngClass]=\"{'text-muted': editing && configForm.getValue('encryptionType') !== ENCRYPTION_TYPE.SSE_KMS}\"\n                 for=\"kmsEnabled\"\n                 i18n>SSE-KMS</label>\n        </div>\n      </div>\n\n      <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"kms_provider\"\n                 i18n>Key management service provider</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"kms_provider\"\n                    class=\"form-select\"\n                    (change)=\"setKmsProvider()\"\n                    formControlName=\"kms_provider\">\n              <option *ngIf=\"kmsProviders !== null && kmsProviders.length === 0\"\n                      ngValue=\"null\"\n                      i18n>-- No kms providers available --</option>\n              <option *ngIf=\"kmsProviders !== null && kmsProviders.length > 0\"\n                      ngValue=\"\"\n                      i18n>-- Select a provider --</option>\n              <option *ngFor=\"let provider of kmsProviders\"\n                      [value]=\"provider\">{{ provider }}</option>\n            </select>\n            <cd-help-text>\n              <span i18n>Where the encryption keys are stored.\n              </span>\n            </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"configForm.showError('kms_provider', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"kmsProviders.length !== 0 && configForm.getValue('kms_provider') !== ''\">\n        <div *ngIf=\"(configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT) || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"auth\"\n                   i18n>Authentication Method</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"auth\"\n                      formControlName=\"auth\">\n                <option *ngFor=\"let auth of authMethods\"\n                        [value]=\"auth\">{{ auth }}</option>\n              </select>\n              <cd-help-text>\n                <span i18n>Type of authentication method to be used with Vault\n                </span>\n              </cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"configForm.showError('auth', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"(configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT) || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"secret_engine\"\n                   i18n>Secret Engine</label>\n            <div class=\"cd-col-form-input\">\n              <select class=\"form-select\"\n                      id=\"secret_engine\"\n                      formControlName=\"secret_engine\">\n                <option *ngFor=\"let secret_engine of secretEngines\"\n                        [value]=\"secret_engine\">{{ secret_engine }}</option>\n              </select>\n              <cd-help-text>\n                <span i18n>Vault Secret Engine to be used to retrieve encryption keys.\n                </span>\n              </cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"configForm.showError('secret_engine', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"(configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT) || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"secret_path\"\n                   i18n>Secret Path\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input  class=\"form-control\"\n                      type=\"text\"\n                      id=\"secret_path\"\n                      formControlName=\"secret_path\"\n                      placeholder=\"/v1/secret/data\">\n                <cd-help-text>\n                  <span i18n>Vault secret URL prefix, which can be used to restrict access to a particular subset of the Vault secret space.\n                  </span>\n                </cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"configForm.showError('secret_path', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"(configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') == KMS_PROVIDER.VAULT) || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"namespace\"\n                   i18n>Namespace\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input  class=\"form-control\"\n                      id=\"namespace\"\n                      type=\"text\"\n                      placeholder=\"tenant1\"\n                      formControlName=\"namespace\">\n              <cd-help-text>\n                <span i18n>Vault Namespace to be used to select your tenant.\n                </span>\n              </cd-help-text>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label  class=\"cd-col-form-label required\"\n                    for=\"addr\">\n              <span i18n\n                    *ngIf=\"configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT\">Vault Address\n              </span>\n              <span i18n\n                    *ngIf=\"configForm.getValue('kms_provider') === KMS_PROVIDER.KMIP\">KMIP Address\n              </span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input  class=\"form-control\"\n                      id=\"addr\"\n                      formControlName=\"addr\"\n                      placeholder=\"http://127.0.0.1:8000\"\n                      i18n>\n                <cd-help-text >\n                  <span *ngIf=\"configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT\"\n                        i18n>Vault server base address.\n                  </span>\n                  <span *ngIf=\"configForm.getValue('kms_provider') === KMS_PROVIDER.KMIP\"\n                        i18n>Kmip server base address.\n                  </span>\n                </cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"configForm.showError('addr', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"(configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') === KMS_PROVIDER.VAULT)|| configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div  *ngIf=\"configForm.getValue('auth') === 'token'\"\n                class=\"form-group row\">\n          <label  class=\"cd-col-form-label required\"\n                  for=\"token\">\n          <span i18n>Token</span>\n          <cd-helper i18n>\n            The token authentication method expects a Vault token to be present in a plaintext file.\n          </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input  type=\"file\"\n                    id=\"token\"\n                    formControlName=\"token\"\n                    (change)=\"fileUpload($event.target.files, 'token')\">\n              <cd-help-text>\n                <span i18n>If authentication method is 'token', provide a path to the token file.\n                </span>\n              </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"configForm.showError('token', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n          </div>\n        </div>\n\n      <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS && configForm.getValue('kms_provider') === KMS_PROVIDER.KMIP\">\n        <div class=\"form-group row\">\n          <label  class=\"cd-col-form-label\"\n                  for=\"kms_key_template\"\n                  i18n>KMS Key Template\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input  class=\"form-control\"\n                    id=\"kms_key_template\"\n                    placeholder=\"$keyid\"\n                    formControlName=\"kms_key_template\">\n            <cd-help-text>\n              <span i18n>sse-kms; kmip key names\n              </span>\n            </cd-help-text>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label  class=\"cd-col-form-label\"\n                  for=\"s3_key_template\"\n                  i18n>S3 Key Template\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input  class=\"form-control\"\n                    id=\"s3_key_template\"\n                    placeholder=\"$keyid\"\n                    formControlName=\"s3_key_template\">\n            <cd-help-text>\n              <span i18n>sse-s3; kmip key template\n              </span>\n            </cd-help-text>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label  class=\"cd-col-form-label\"\n                  for=\"username\"\n                  i18n>Username\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input  id=\"username\"\n                    class=\"form-control\"\n                    [attr.disabled]=\"configForm.getValue('kms_provider') !== KMS_PROVIDER.KMIP ? true : null\"\n                    formControlName=\"username\">\n            <cd-help-text>\n              <span i18n>When authenticating via username\n              </span>\n            </cd-help-text>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label  class=\"cd-col-form-label\"\n                  for=\"password\"\n                  i18n>Password\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input  id=\"password\"\n                    class=\"form-control\"\n                    type=\"password\"\n                    [attr.disabled]=\"configForm.getValue('kms_provider') != KMS_PROVIDER.KMIP\"\n                    formControlName=\"password\">\n            <cd-help-text>\n              <span i18n>optional w/ username\n              </span>\n            </cd-help-text>\n          </div>\n        </div>\n      </div>\n\n        <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"ssl_cert\">\n            <span i18n>CA Certificate Path</span>\n            <cd-helper i18n>The SSL certificate in PEM format. Please provide file path to the RGW host.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n            <input  type=\"text\"\n                    id=\"ssl_cert\"\n                    class=\"form-control\"\n                    formControlName=\"ssl_cert\"\n                    placeholder=\"/path/to/ca_cert.pem\">\n            <cd-help-text>\n              <span i18n>\n                Path for custom ca certificate for accessing server\n              </span>\n            </cd-help-text>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"client_cert\">\n            <span i18n>Client Certificate Path</span>\n            <cd-helper i18n>The Client certificate in PEM format. Please provide file path to the RGW host.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input  type=\"text\"\n                      id=\"client_cert\"\n                      class=\"form-control\"\n                      formControlName=\"client_cert\"\n                      placeholder=\"/path/to/client_cert.pem\">\n              <cd-help-text>\n                <span i18n>\n                  Path for custom client certificate for accessing server\n                </span>\n              </cd-help-text>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_KMS || configForm.getValue('encryptionType') === ENCRYPTION_TYPE.SSE_S3\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"client_key\">\n            <span i18n>Client Private Key Path</span>\n            <cd-helper i18n>The Client Private Key in PEM format. Please provide file path to the RGW host.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input  type=\"text\"\n                      id=\"client_key\"\n                      formControlName=\"client_key\"\n                      placeholder=\"/path/to/client_key.pem\"\n                      class=\"form-control\">\n              <cd-help-text>\n                <span i18n>\n                  Path for private key required for client cert\n                </span>\n              </cd-help-text>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                            [submitText]=\"actionLabels.SUBMIT\"\n                            [form]=\"configForm\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport {\n  rgwBucketEncryptionModel,\n  KMS_PROVIDER,\n  ENCRYPTION_TYPE\n} from '../models/rgw-bucket-encryption';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { KmipConfig, VaultConfig } from '~/app/shared/models/rgw-encryption-config-keys';\n\n@Component({\n  selector: 'cd-rgw-config-modal',\n  templateUrl: './rgw-config-modal.component.html',\n  styleUrls: ['./rgw-config-modal.component.scss']\n})\nexport class RgwConfigModalComponent implements OnInit {\n  readonly vaultAddress = /^((https?:\\/\\/)|(www.))(?:([a-zA-Z]+)|(\\d+\\.\\d+.\\d+.\\d+)):\\d{4}$/;\n\n  kmsProviders: string[];\n\n  configForm: CdFormGroup;\n\n  @Output()\n  submitAction = new EventEmitter();\n  authMethods: string[];\n  secretEngines: string[];\n\n  selectedEncryptionConfigValues: any = {};\n  allEncryptionConfigValues: any = [];\n  editing = false;\n  action: string;\n  table: TableComponent;\n  ENCRYPTION_TYPE = ENCRYPTION_TYPE;\n  KMS_PROVIDER = KMS_PROVIDER;\n  constructor(\n    private formBuilder: CdFormBuilder,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private rgwBucketService: RgwBucketService,\n    private notificationService: NotificationService\n  ) {\n    this.createForm();\n  }\n  ngOnInit(): void {\n    this.kmsProviders = rgwBucketEncryptionModel.kmsProviders;\n    this.authMethods = rgwBucketEncryptionModel.authMethods;\n    this.secretEngines = rgwBucketEncryptionModel.secretEngines;\n    if (this.editing && this.selectedEncryptionConfigValues) {\n      const patchValues = {\n        addr: this.selectedEncryptionConfigValues['addr'],\n        encryptionType: this.selectedEncryptionConfigValues['encryption_type'],\n        kms_provider: this.selectedEncryptionConfigValues['backend'],\n        auth: this.selectedEncryptionConfigValues['auth'],\n        secret_engine: this.selectedEncryptionConfigValues['secret_engine'],\n        secret_path: this.selectedEncryptionConfigValues['prefix'],\n        namespace: this.selectedEncryptionConfigValues['namespace'],\n        kms_key_template: this.selectedEncryptionConfigValues['kms_key_template'],\n        s3_key_template: this.selectedEncryptionConfigValues['s3_key_template'],\n        username: this.selectedEncryptionConfigValues['username'],\n        password: this.selectedEncryptionConfigValues['password'],\n        ssl_cert:\n          this.selectedEncryptionConfigValues['backend'] === KMS_PROVIDER.VAULT\n            ? this.selectedEncryptionConfigValues['ssl_cacert']\n            : this.selectedEncryptionConfigValues['ca_path'],\n        client_cert:\n          this.selectedEncryptionConfigValues['backend'] === KMS_PROVIDER.VAULT\n            ? this.selectedEncryptionConfigValues['ssl_clientcert']\n            : this.selectedEncryptionConfigValues['client_cert'],\n        client_key:\n          this.selectedEncryptionConfigValues['backend'] === KMS_PROVIDER.VAULT\n            ? this.selectedEncryptionConfigValues['ssl_clientkey']\n            : this.selectedEncryptionConfigValues['client_key']\n      };\n      this.configForm.patchValue(patchValues);\n      this.configForm.get('kms_provider').disable();\n    }\n    this.checkKmsProviders();\n  }\n\n  setKmsProvider() {\n    const selectedEncryptionType = this.configForm.get('encryptionType').value;\n    this.kmsProviders =\n      selectedEncryptionType === ENCRYPTION_TYPE.SSE_KMS\n        ? [KMS_PROVIDER.VAULT, KMS_PROVIDER.KMIP]\n        : [KMS_PROVIDER.VAULT];\n  }\n  checkKmsProviders() {\n    if (!this.editing) {\n      this.setKmsProvider();\n    }\n\n    if (\n      this.allEncryptionConfigValues &&\n      this.allEncryptionConfigValues.hasOwnProperty(ENCRYPTION_TYPE.SSE_KMS) &&\n      !this.editing\n    ) {\n      const kmsBackends = Object.values(\n        this.allEncryptionConfigValues[ENCRYPTION_TYPE.SSE_KMS]\n      ).map((config: any) => config.backend);\n      if (this.configForm.get('encryptionType').value === ENCRYPTION_TYPE.SSE_KMS) {\n        this.kmsProviders = this.kmsProviders.filter((provider) => !kmsBackends.includes(provider));\n      }\n    }\n    if (\n      this.allEncryptionConfigValues &&\n      this.allEncryptionConfigValues.hasOwnProperty('s3') &&\n      !this.editing\n    ) {\n      const s3Backends = Object.values(this.allEncryptionConfigValues[ENCRYPTION_TYPE.SSE_S3]).map(\n        (config: any) => config.backend\n      );\n      if (this.configForm.get('encryptionType').value === ENCRYPTION_TYPE.SSE_S3) {\n        this.kmsProviders = this.kmsProviders.filter((provider) => !s3Backends.includes(provider));\n      }\n    }\n    if (!this.editing) {\n      if (this.kmsProviders.length > 0) {\n        this.configForm.get('kms_provider').setValue(this.kmsProviders[0]);\n      }\n    }\n  }\n\n  createForm() {\n    this.configForm = this.formBuilder.group({\n      addr: [\n        null,\n        [\n          Validators.required,\n          CdValidators.custom('vaultPattern', (value: string) => {\n            if (_.isEmpty(value)) {\n              return false;\n            }\n            return !this.vaultAddress.test(value);\n          })\n        ]\n      ],\n      kms_provider: ['vault', Validators.required],\n      encryptionType: ['kms', Validators.required],\n      auth: [\n        'token',\n        CdValidators.requiredIf({\n          kms_provider: 'vault'\n        })\n      ],\n      secret_engine: [\n        'kv',\n        CdValidators.requiredIf({\n          kms_provider: 'vault'\n        })\n      ],\n      secret_path: ['/'],\n      namespace: [null],\n      token: [\n        null,\n        [\n          CdValidators.requiredIf({\n            auth: 'token',\n            kms_provider: 'vault'\n          })\n        ]\n      ],\n      ssl_cert: [''],\n      client_cert: [''],\n      client_key: [''],\n      kmsEnabled: [{ value: false }],\n      s3Enabled: [{ value: false }],\n      kms_key_template: [null],\n      s3_key_template: [null],\n      username: [''],\n      password: ['']\n    });\n  }\n\n  fileUpload(files: FileList, controlName: string) {\n    const file: File = files[0];\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      const control: AbstractControl = this.configForm.get(controlName);\n      control.setValue(file);\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n  }\n\n  onSubmit() {\n    const values = this.configForm.getRawValue();\n    let encryptionData: VaultConfig | KmipConfig;\n    if (values['kms_provider'] === KMS_PROVIDER.VAULT) {\n      encryptionData = {\n        kms_provider: values['kms_provider'],\n        encryption_type: values['encryptionType'],\n        config: {\n          addr: values['addr'],\n          auth: values['auth'],\n          prefix: values['secret_path'],\n          secret_engine: values['secret_engine'],\n          namespace: values['namespace'],\n          token_file: values['token'],\n          ssl_cacert: values['ssl_cert'],\n          ssl_clientcert: values['client_cert'],\n          ssl_clientkey: values['client_key']\n        }\n      };\n    } else if (values['kms_provider'] === KMS_PROVIDER.KMIP) {\n      encryptionData = {\n        kms_provider: values['kms_provider'],\n        encryption_type: values['encryptionType'],\n        config: {\n          addr: values['addr'],\n          username: values['username'],\n          password: values['password'],\n          kms_key_template: values['kms_key_template'],\n          s3_key_template: values['s3_key_template'],\n          client_key: values['client_key'],\n          ca_path: values['ssl_cert'],\n          client_cert: values['client_cert']\n        }\n      };\n    }\n    this.rgwBucketService.setEncryptionConfig(encryptionData).subscribe({\n      next: () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated RGW Encryption Configuration values`\n        );\n      },\n      error: (error: Error) => {\n        this.notificationService.show(NotificationType.error, error.message);\n        this.configForm.setErrors({ cdSubmitButton: true });\n      },\n      complete: () => {\n        this.activeModal.close();\n        this.table?.refreshBtn();\n      }\n    });\n  }\n}\n","import { ENCRYPTION_TYPE } from '~/app/ceph/rgw/models/rgw-bucket-encryption';\n\nexport enum rgwEncryptionConfigKeys {\n  auth = 'Authentication Method',\n  encryption_type = 'Encryption Type',\n  backend = 'Backend',\n  prefix = 'Prefix',\n  namespace = 'Namespace',\n  secret_engine = 'Secret Engine',\n  addr = 'Address',\n  token_file = 'Token File',\n  ssl_cacert = 'SSL CA Certificate',\n  ssl_clientcert = 'SSL Client Certificate',\n  ssl_clientkey = 'SSL Client Key',\n  verify_ssl = 'Verify SSL',\n  ca_path = 'CA Path',\n  client_cert = 'Client Certificate',\n  client_key = 'Client Key',\n  kms_key_template = 'KMS Key Template',\n  password = 'Password',\n  s3_key_template = 'S3 Key Template',\n  username = 'Username'\n}\n\nexport interface VaultConfig {\n  config: {\n    addr: string;\n    auth: string;\n    prefix: string;\n    secret_engine: string;\n    namespace: string;\n    token_file: string;\n    ssl_cacert: string;\n    ssl_clientcert: string;\n    ssl_clientkey: string;\n  };\n  kms_provider: string;\n  encryption_type: ENCRYPTION_TYPE;\n}\n\nexport interface KmipConfig {\n  config: {\n    addr: string;\n    username: string;\n    password: string;\n    s3_key_template: string;\n    client_cert: string;\n    client_key: string;\n    ca_path: string;\n    kms_key_template: string;\n  };\n  encryption_type: ENCRYPTION_TYPE;\n  kms_provider: string;\n}\n\nexport interface encryptionDatafromAPI {\n  kms: {\n    vault: VaultConfig;\n    kmip: KmipConfig;\n  };\n  s3: {\n    vault: VaultConfig;\n  };\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       id=\"tabset-config-details\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"config-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [data]=\"transformedData\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n  </nav>\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { rgwEncryptionConfigKeys } from '~/app/shared/models/rgw-encryption-config-keys';\n\n@Component({\n  selector: 'cd-rgw-config-details',\n  templateUrl: './rgw-config-details.component.html',\n  styleUrls: ['./rgw-config-details.component.scss']\n})\nexport class RgwConfigDetailsComponent implements OnChanges {\n  transformedData: {};\n  @Input()\n  selection: any;\n\n  @Input()\n  excludeProps: any[] = [];\n  filteredEncryptionConfigValues: {};\n\n  ngOnChanges(): void {\n    if (this.selection) {\n      this.filteredEncryptionConfigValues = Object.keys(this.selection)\n        .filter((key) => !this.excludeProps.includes(key))\n        .reduce((obj, key) => {\n          obj[key] = this.selection[key];\n          return obj;\n        }, {});\n      const transformedData = {};\n      for (const key in this.filteredEncryptionConfigValues) {\n        if (rgwEncryptionConfigKeys[key]) {\n          transformedData[rgwEncryptionConfigKeys[key]] = this.filteredEncryptionConfigValues[key];\n        } else {\n          transformedData[key] = this.filteredEncryptionConfigValues[key];\n        }\n      }\n      this.transformedData = transformedData;\n    }\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\">\n  <ng-container ngbNavItem>\n    <a ngbNavLink\n       i18n>Server-side Encryption</a>\n    <ng-template ngbNavContent>\n      <cd-table #table\n                [data]=\"encryptionConfigValues\"\n                [columns]=\"columns\"\n                (fetchData)=\"fetchData()\"\n                identifier=\"unique_id\"\n                [forceIdentifier]=\"true\"\n                [hasDetails]=\"true\"\n                (updateSelection)=\"updateSelection($event)\"\n                (setExpandedRow)=\"setExpandedRow($event)\"\n                columnMode=\"flex\"\n                selectionType=\"single\">\n        <cd-table-actions class=\"table-actions\"\n                          [permission]=\"permissions.configOpt\"\n                          [selection]=\"selection\"\n                          [tableActions]=\"tableActions\">\n        </cd-table-actions>\n        <cd-rgw-config-details *cdTableDetail\n                               [selection]=\"expandedRow\"\n                               [excludeProps]=\"excludeProps\">\n        </cd-rgw-config-details>\n      </cd-table>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\n\nimport { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { Permissions } from '~/app/shared/models/permissions';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { RgwConfigModalComponent } from '../rgw-config-modal/rgw-config-modal.component';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { ENCRYPTION_TYPE } from '../models/rgw-bucket-encryption';\nimport {\n  KmipConfig,\n  VaultConfig,\n  encryptionDatafromAPI\n} from '~/app/shared/models/rgw-encryption-config-keys';\n\n@Component({\n  selector: 'cd-rgw-configuration-page',\n  templateUrl: './rgw-configuration-page.component.html',\n  styleUrls: ['./rgw-configuration-page.component.scss']\n})\nexport class RgwConfigurationPageComponent extends ListWithDetails implements OnInit {\n  readonly vaultAddress = /^((https?:\\/\\/)|(www.))(?:([a-zA-Z]+)|(\\d+\\.\\d+.\\d+.\\d+)):\\d{4}$/;\n  @ViewChild(TableComponent)\n  table: TableComponent;\n\n  kmsProviders: string[];\n\n  columns: Array<CdTableColumn> = [];\n\n  configForm: CdFormGroup;\n  permissions: Permissions;\n  encryptionConfigValues: any = [];\n  selection: CdTableSelection = new CdTableSelection();\n\n  @Output()\n  submitAction = new EventEmitter();\n  authMethods: string[];\n  secretEngines: string[];\n  tableActions: CdTableAction[];\n  bsModalRef: NgbModalRef;\n  filteredEncryptionConfigValues: {};\n  excludeProps: any[] = [];\n  disableCreate = true;\n  allEncryptionValues: any;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private rgwBucketService: RgwBucketService,\n    public authStorageService: AuthStorageService,\n    private modalService: ModalService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Encryption Type`,\n        prop: 'encryption_type',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Key Management Service Provider`,\n        prop: 'backend',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Address`,\n        prop: 'addr',\n        flexGrow: 1\n      }\n    ];\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        name: this.actionLabels.CREATE,\n        click: () => this.openRgwConfigModal(false),\n        disable: () => this.disableCreate\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        name: this.actionLabels.EDIT,\n        click: () => this.openRgwConfigModal(true)\n      }\n    ];\n\n    this.excludeProps = this.columns.map((column) => column.prop);\n    this.excludeProps.push('unique_id');\n  }\n\n  getBackend(encryptionData: encryptionDatafromAPI, encryptionType: ENCRYPTION_TYPE) {\n    const backendSet = new Set(Object.keys(encryptionData[encryptionType]));\n    const result =\n      encryptionType === ENCRYPTION_TYPE.SSE_KMS\n        ? backendSet.has('kmip') && backendSet.has('vault')\n        : backendSet.has('vault');\n    return result;\n  }\n\n  openRgwConfigModal(edit: boolean) {\n    if (edit) {\n      const initialState = {\n        action: 'edit',\n        editing: true,\n        selectedEncryptionConfigValues: this.selection.first(),\n        table: this.table\n      };\n      this.bsModalRef = this.modalService.show(RgwConfigModalComponent, initialState, {\n        size: 'lg'\n      });\n    } else {\n      const initialState = {\n        action: 'create',\n        allEncryptionConfigValues: this.allEncryptionValues\n      };\n      this.bsModalRef = this.modalService.show(RgwConfigModalComponent, initialState, {\n        size: 'lg'\n      });\n    }\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  setExpandedRow(expandedRow: VaultConfig | KmipConfig) {\n    super.setExpandedRow(expandedRow);\n  }\n\n  flattenData(data: encryptionDatafromAPI) {\n    const combinedArray = [];\n    for (const kmsData of Object.values(data[ENCRYPTION_TYPE.SSE_KMS])) {\n      combinedArray.push(kmsData);\n    }\n    for (const s3Data of Object.values(data[ENCRYPTION_TYPE.SSE_S3])) {\n      combinedArray.push(s3Data);\n    }\n    return combinedArray;\n  }\n\n  fetchData() {\n    this.rgwBucketService.getEncryptionConfig().subscribe((data: encryptionDatafromAPI) => {\n      this.allEncryptionValues = data;\n      const kmsBackends = this.getBackend(data, ENCRYPTION_TYPE.SSE_KMS);\n      const s3Backends = this.getBackend(data, ENCRYPTION_TYPE.SSE_S3);\n      this.disableCreate = kmsBackends && s3Backends;\n      this.encryptionConfigValues = this.flattenData(data);\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RequestModel } from '~/app/ceph/rgw/models/rgw-storage-class.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwStorageClassService {\n  private baseUrl = 'api/rgw/zonegroup';\n  private url = `${this.baseUrl}/storage-class`;\n\n  constructor(private http: HttpClient) {}\n\n  removeStorageClass(placement_target: string, storage_class: string) {\n    return this.http.delete(`${this.url}/${placement_target}/${storage_class}`, {\n      observe: 'response'\n    });\n  }\n\n  createStorageClass(requestModel: RequestModel) {\n    return this.http.post(`${this.url}`, requestModel);\n  }\n\n  editStorageClass(requestModel: RequestModel) {\n    return this.http.put(`${this.url}`, requestModel);\n  }\n\n  getPlacement_target(placement_id: string) {\n    return this.http.get(`${this.baseUrl}/get_placement_target_by_placement_id/${placement_id}`);\n  }\n}\n","<ng-container *ngIf=\"!!selection\">\n  <cds-tabs type=\"contained\"\n            theme=\"light\">\n    <cds-tab heading=\"Details\">\n      <table\n        class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n        data-testid=\"rgw-storage-details\"\n      >\n        <tbody>\n          @if( isTierMatch(\n            TIER_TYPE_DISPLAY.LOCAL\n          )){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Zone Group\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ zoneGroupText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.zonegroup_name }}</td>\n          </tr>\n        }\n        @if(isTierMatch(\n            TIER_TYPE_DISPLAY.LOCAL\n          )){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Placement Target\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  Placement Target defines the destination and rules for moving objects between\n                  storage tiers.\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.placement_target }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Target Path\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ targetPathText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.target_path }}</td>\n          </tr>\n        }\n        @if(isTierMatch(TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Access key\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ targetAccessKeyText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>\n              <div cdsCol\n                   [columnNumbers]=\"{ md: 4 }\"\n                   class=\"d-flex\">\n                <input\n                  cdsPassword\n                  type=\"password\"\n                  readonly\n                  id=\"access_key\"\n                  [value]=\"selection?.access_key\"\n                />\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"access_key\"></button>\n                <cd-copy-2-clipboard-button source=\"access_key\"> </cd-copy-2-clipboard-button>\n              </div>\n            </td>\n          </tr>\n        }\n        @if(isTierMatch(TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Secret key\n              <cd-helper class=\"text-pre-wrap\">\n                <span> {{ targetSecretKeyText }} </span>\n              </cd-helper>\n            </td>\n            <td>\n              <div cdsCol\n                   [columnNumbers]=\"{ md: 4 }\"\n                   class=\"d-flex\">\n                <input\n                  cdsPassword\n                  type=\"password\"\n                  readonly\n                  id=\"secret\"\n                  [value]=\"selection?.secret\"\n                />\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"secret\"></button>\n                <cd-copy-2-clipboard-button source=\"secret\"> </cd-copy-2-clipboard-button>\n              </div>\n            </td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Host Style\n              <cd-helper class=\"text-pre-wrap\">\n                <span>{{ hostStyleText }}</span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.host_style }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Head Object (Stub File)\n              <cd-helper class=\"text-pre-wrap\">\n                <span> {{ retainHeadObjectText }}</span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.retain_head_object ? 'Enabled' : 'Disabled' }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Allow Read Through\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ allowReadThroughText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.allow_read_through ? 'Enabled' : 'Disabled' }}</td>\n          </tr>\n        }\n        @if(isTierMatch(TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER) && (selection?.allow_read_through)) {\n          <tr *ngIf=\"isTierMatch(TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER) && (selection?.allow_read_through)\">\n            <td class=\"bold\"\n                i18n>\n              Read through Restore Days\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ readthroughrestoreDaysText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.read_through_restore_days }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Glacier Restore Days\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ glacierRestoreDayText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.glacier_restore_days }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.GLACIER)) {\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Glacier Restore Tier Type\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ glacierRestoreTiertypeText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.glacier_restore_tier_type }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Restore Storage Class\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ restoreStorageClassText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.restore_storage_class }}</td>\n          </tr>\n        }\n          @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Multipart Minimum Part Size\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ multipartMinPartText }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.multipart_min_part_size | dimlessBinary }}</td>\n          </tr>\n        }\n        @if(isTierMatch( TIER_TYPE_DISPLAY.CLOUD_TIER, TIER_TYPE_DISPLAY.GLACIER)){\n          <tr>\n            <td class=\"bold\"\n                i18n>\n              Multipart Sync Threshold\n              <cd-helper class=\"text-pre-wrap\">\n                <span>\n                  {{ multipartSyncThreholdText  }}\n                </span>\n              </cd-helper>\n            </td>\n            <td>{{ selection?.multipart_sync_threshold | dimlessBinary }}</td>\n          </tr>\n        }\n        </tbody>\n      </table>\n    </cds-tab>\n  </cds-tabs>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport {\n  ALLOW_READ_THROUGH_TEXT,\n  HOST_STYLE,\n  MULTIPART_MIN_PART_TEXT,\n  MULTIPART_SYNC_THRESHOLD_TEXT,\n  RETAIN_HEAD_OBJECT_TEXT,\n  StorageClassDetails,\n  TARGET_ACCESS_KEY_TEXT,\n  TARGET_PATH_TEXT,\n  TARGET_SECRET_KEY_TEXT,\n  TIER_TYPE_DISPLAY,\n  TIER_TYPE,\n  GLACIER_RESTORE_DAY_TEXT,\n  GLACIER_RESTORE_TIER_TYPE_TEXT,\n  RESTORE_DAYS_TEXT,\n  READTHROUGH_RESTORE_DAYS_TEXT,\n  RESTORE_STORAGE_CLASS_TEXT,\n  ZONEGROUP_TEXT\n} from '../models/rgw-storage-class.model';\n@Component({\n  selector: 'cd-rgw-storage-class-details',\n  templateUrl: './rgw-storage-class-details.component.html',\n  styleUrls: ['./rgw-storage-class-details.component.scss']\n})\nexport class RgwStorageClassDetailsComponent implements OnChanges {\n  @Input()\n  selection: StorageClassDetails;\n  columns: CdTableColumn[] = [];\n  storageDetails: StorageClassDetails;\n  allowReadThroughText = ALLOW_READ_THROUGH_TEXT;\n  retainHeadObjectText = RETAIN_HEAD_OBJECT_TEXT;\n  multipartMinPartText = MULTIPART_MIN_PART_TEXT;\n  multipartSyncThreholdText = MULTIPART_SYNC_THRESHOLD_TEXT;\n  targetAccessKeyText = TARGET_ACCESS_KEY_TEXT;\n  targetSecretKeyText = TARGET_SECRET_KEY_TEXT;\n  targetPathText = TARGET_PATH_TEXT;\n  hostStyleText = HOST_STYLE;\n  TIER_TYPE_DISPLAY = TIER_TYPE_DISPLAY;\n  TIER_TYPE = TIER_TYPE;\n  glacierRestoreDayText = GLACIER_RESTORE_DAY_TEXT;\n  glacierRestoreTiertypeText = GLACIER_RESTORE_TIER_TYPE_TEXT;\n  restoreDaysText = RESTORE_DAYS_TEXT;\n  readthroughrestoreDaysText = READTHROUGH_RESTORE_DAYS_TEXT;\n  restoreStorageClassText = RESTORE_STORAGE_CLASS_TEXT;\n  zoneGroupText = ZONEGROUP_TEXT;\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.storageDetails = {\n        zonegroup_name: this.selection.zonegroup_name,\n        placement_targets: this.selection.placement_targets,\n        access_key: this.selection.access_key,\n        secret: this.selection.secret,\n        target_path: this.selection.target_path,\n        tier_type: this.selection.tier_type,\n        multipart_min_part_size: this.selection.multipart_min_part_size,\n        multipart_sync_threshold: this.selection.multipart_sync_threshold,\n        host_style: this.selection.host_style,\n        retain_head_object: this.selection.retain_head_object,\n        allow_read_through: this.selection.allow_read_through,\n        glacier_restore_days: this.selection.glacier_restore_days,\n        glacier_restore_tier_type: this.selection.glacier_restore_tier_type,\n        restore_storage_class: this.selection.restore_storage_class,\n        read_through_restore_days: this.selection.read_through_restore_days\n      };\n    }\n  }\n\n  isTierMatch(...types: string[]): boolean {\n    const tier_type = this.selection.tier_type?.toLowerCase();\n    return types.some((type) => type.toLowerCase() === tier_type);\n  }\n}\n","<legend>\n  <cd-help-text i18n>\n    A storage class for tiering defines the policies for automatically moving objects between different storage tiers.\n  </cd-help-text>\n</legend>\n<cd-table\n  [data]=\"storageClassList\"\n  columnMode=\"flex\"\n  [columns]=\"columns\"\n  (fetchData)=\"loadStorageClass()\"\n  identifier=\"uniqueId\"\n  [forceIdentifier]=\"true\"\n  selectionType=\"single\"\n  [hasDetails]=\"true\"\n  (setExpandedRow)=\"setExpandedRow($event)\"\n  (updateSelection)=\"updateSelection($event)\"\n>\n  <div class=\"table-actions\">\n    <cd-table-actions class=\"btn-group\"\n                      [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n  <cd-rgw-storage-class-details *cdTableDetail\n                                [selection]=\"expandedRow\">\n  </cd-rgw-storage-class-details>\n</cd-table>\n","import { Component, OnInit } from '@angular/core';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\n\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport {\n  StorageClass,\n  TIER_TYPE,\n  TIER_TYPE_DISPLAY,\n  ZoneGroupDetails\n} from '../models/rgw-storage-class.model';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { RgwStorageClassService } from '~/app/shared/api/rgw-storage-class.service';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { BucketTieringUtils } from '../utils/rgw-bucket-tiering';\nimport { Router } from '@angular/router';\n\nconst BASE_URL = 'rgw/tiering';\n@Component({\n  selector: 'cd-rgw-storage-class-list',\n  templateUrl: './rgw-storage-class-list.component.html',\n  styleUrls: ['./rgw-storage-class-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwStorageClassListComponent extends ListWithDetails implements OnInit {\n  columns: CdTableColumn[];\n  selection = new CdTableSelection();\n  permission: Permission;\n  tableActions: CdTableAction[];\n  storageClassList: StorageClass[] = [];\n\n  constructor(\n    private rgwZonegroupService: RgwZonegroupService,\n    public actionLabels: ActionLabelsI18n,\n    private cdsModalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private authStorageService: AuthStorageService,\n    private rgwStorageClassService: RgwStorageClassService,\n    private router: Router,\n    private urlBuilder: URLBuilderService\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().rgw;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        prop: 'uniqueId',\n        isInvisible: true,\n        isHidden: true\n      },\n      {\n        name: $localize`Storage Class`,\n        prop: 'storage_class',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Type`,\n        prop: 'tier_type',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Zone Group`,\n        prop: 'zonegroup_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Placement Target`,\n        prop: 'placement_target',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Target Region`,\n        prop: 'region',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Target Endpoint`,\n        prop: 'endpoint',\n        flexGrow: 2\n      }\n    ];\n    const getStorageUri = () =>\n      this.selection.first() &&\n      `${encodeURI(this.selection.first().zonegroup_name)}/${encodeURI(\n        this.selection.first().placement_target\n      )}/${encodeURI(this.selection.first().storage_class)}`;\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.router.navigate([this.urlBuilder.getCreate()]),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        routerLink: () => [`/rgw/tiering/edit/${getStorageUri()}`]\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeStorageClassModal()\n      }\n    ];\n  }\n\n  loadStorageClass(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.rgwZonegroupService.getAllZonegroupsInfo().subscribe(\n        (data: ZoneGroupDetails) => {\n          this.storageClassList = [];\n          const tierObj = BucketTieringUtils.filterAndMapTierTargets(data);\n          const tierConfig = tierObj.map((tier) => ({\n            ...tier,\n            tier_type: this.mapTierTypeDisplay(tier.tier_type)\n          }));\n\n          this.transformTierData(tierConfig);\n          this.storageClassList.push(...tierConfig);\n          resolve();\n        },\n        (error) => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  private mapTierTypeDisplay(tierType: string): string {\n    switch (tierType?.toLowerCase()) {\n      case TIER_TYPE.CLOUD_TIER:\n        return TIER_TYPE_DISPLAY.CLOUD_TIER;\n      case TIER_TYPE.LOCAL:\n        return TIER_TYPE_DISPLAY.LOCAL;\n      case TIER_TYPE.GLACIER:\n        return TIER_TYPE_DISPLAY.GLACIER;\n      default:\n        return tierType;\n    }\n  }\n\n  transformTierData(tierConfig: any[]) {\n    tierConfig.forEach((item, index) => {\n      const zone_group = item?.zone_group;\n      const storageClass = item?.storage_class;\n      const uniqueId = `${zone_group}-${storageClass}-${index}`;\n      item.uniqueId = uniqueId;\n    });\n    return tierConfig;\n  }\n\n  removeStorageClassModal() {\n    const storage_class = this.selection.first().storage_class;\n    const placement_target = this.selection.first().placement_target;\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Tiering Storage Class`,\n      itemNames: [storage_class],\n      actionDescription: 'remove',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('rgw/zonegroup/storage-class', {\n            placement_target: placement_target,\n            storage_class: storage_class\n          }),\n          call: this.rgwStorageClassService.removeStorageClass(placement_target, storage_class)\n        })\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  setExpandedRow(expandedRow: any) {\n    super.setExpandedRow(expandedRow);\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M2 26H30V28H2zM25.4 9c.8-.8.8-2 0-2.8 0 0 0 0 0 0l-3.6-3.6c-.8-.8-2-.8-2.8 0 0 0 0 0 0 0l-15 15V24h6.4L25.4 9zM20.4 4L24 7.6l-3 3L17.4 7 20.4 4zM6 22v-3.6l10-10 3.6 3.6-10 10H6z\"\n    }\n  }],\n  \"name\": \"edit\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M20,16a5,5,0,0,0,10,0,1,1,0,0,0-.1055-.4473L25.896,7.5562a.8913.8913,0,0,0-.0454-.0816A1,1,0,0,0,25,7H18.8218A3.0155,3.0155,0,0,0,17,5.1841V2H15V5.1841A3.0155,3.0155,0,0,0,13.1782,7H7a1,1,0,0,0-.8945.5527l-4,8A1,1,0,0,0,2,16a5,5,0,0,0,10,0,1,1,0,0,0-.1055-.4473L8.6182,9h4.56A3.0147,3.0147,0,0,0,15,10.8154V28H6v2H26V28H17V10.8159A3.0155,3.0155,0,0,0,18.8218,9h4.56l-3.2763,6.5527A1,1,0,0,0,20,16ZM7,19a2.9958,2.9958,0,0,1-2.8152-2h5.63A2.9956,2.9956,0,0,1,7,19Zm2.3821-4H4.6179L7,10.2363ZM16,9a1,1,0,1,1,1-1A1.0009,1.0009,0,0,1,16,9Zm9,10a2.9958,2.9958,0,0,1-2.8152-2h5.63A2.9956,2.9956,0,0,1,25,19Zm0-8.7637L27.3821,15H22.6179Z\"\n    }\n  }],\n  \"name\": \"scales\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 2c1.4 0 2.5 1.1 2.5 2.5S9.4 7 8 7 5.5 5.9 5.5 4.5 6.6 2 8 2M8 1C6.1 1 4.5 2.6 4.5 4.5S6.1 8 8 8s3.5-1.6 3.5-3.5S9.9 1 8 1zM13 15h-1v-2.5c0-1.4-1.1-2.5-2.5-2.5h-3C5.1 10 4 11.1 4 12.5V15H3v-2.5C3 10.6 4.6 9 6.5 9h3c1.9 0 3.5 1.6 3.5 3.5V15z\"\n    }\n  }],\n  \"name\": \"user\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28.5039,8.1362l-12-7a1,1,0,0,0-1.0078,0l-12,7A1,1,0,0,0,3,9V23a1,1,0,0,0,.4961.8638l12,7a1,1,0,0,0,1.0078,0l12-7A1,1,0,0,0,29,23V9A1,1,0,0,0,28.5039,8.1362ZM16,3.1577,26.0156,9,16,14.8423,5.9844,9ZM5,10.7412l10,5.833V28.2588L5,22.4258ZM17,28.2588V16.5742l10-5.833V22.4258Z\"\n    }\n  }],\n  \"name\": \"cube\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M23,20a5,5,0,0,0-3.89,1.89L11.8,17.32a4.46,4.46,0,0,0,0-2.64l7.31-4.57A5,5,0,1,0,18,7a4.79,4.79,0,0,0,.2,1.32l-7.31,4.57a5,5,0,1,0,0,6.22l7.31,4.57A4.79,4.79,0,0,0,18,25a5,5,0,1,0,5-5ZM23,4a3,3,0,1,1-3,3A3,3,0,0,1,23,4ZM7,19a3,3,0,1,1,3-3A3,3,0,0,1,7,19Zm16,9a3,3,0,1,1,3-3A3,3,0,0,1,23,28Z\"\n    }\n  }],\n  \"name\": \"share\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M21,2a8.9977,8.9977,0,0,0-8.6119,11.6118L2,24v6H8L18.3881,19.6118A9,9,0,1,0,21,2Zm0,16a7.0125,7.0125,0,0,1-2.0322-.3022L17.821,17.35l-.8472.8472-3.1811,3.1812L12.4141,20,11,21.4141l1.3787,1.3786-1.5859,1.586L9.4141,23,8,24.4141l1.3787,1.3786L7.1716,28H4V24.8284l9.8023-9.8023.8472-.8474-.3473-1.1467A7,7,0,1,1,21,18Z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"22\",\n      \"cy\": \"10\",\n      \"r\": \"2\"\n    }\n  }],\n  \"name\": \"password\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M12.3 9.3L8.5 13.1 8.5 1 7.5 1 7.5 13.1 3.7 9.3 3 10 8 15 13 10z\"\n    }\n  }],\n  \"name\": \"arrow--down\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M12.1,2A9.8,9.8,0,0,0,6.7,3.6L13.1,10a2.1,2.1,0,0,1,.2,3,2.1,2.1,0,0,1-3-.2L3.7,6.4A9.84,9.84,0,0,0,2,12.1,10.14,10.14,0,0,0,12.1,22.2a10.9,10.9,0,0,0,2.6-.3l6.7,6.7a5,5,0,0,0,7.1-7.1l-6.7-6.7a10.9,10.9,0,0,0,.3-2.6A10,10,0,0,0,12.1,2Zm8,10.1a7.61,7.61,0,0,1-.3,2.1l-.3,1.1.8.8L27,22.8a2.88,2.88,0,0,1,.9,2.1A2.72,2.72,0,0,1,27,27a2.9,2.9,0,0,1-4.2,0l-6.7-6.7-.8-.8-1.1.3a7.61,7.61,0,0,1-2.1.3,8.27,8.27,0,0,1-5.7-2.3A7.63,7.63,0,0,1,4,12.1a8.33,8.33,0,0,1,.3-2.2l4.4,4.4a4.14,4.14,0,0,0,5.9.2,4.14,4.14,0,0,0-.2-5.9L10,4.2a6.45,6.45,0,0,1,2-.3,8.27,8.27,0,0,1,5.7,2.3A8.49,8.49,0,0,1,20.1,12.1Z\"\n    }\n  }],\n  \"name\": \"tools\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28,12a2,2,0,0,0,2-2V4a2,2,0,0,0-2-2H4A2,2,0,0,0,2,4v6a2,2,0,0,0,2,2H15v4H9a2,2,0,0,0-2,2v4H4a2,2,0,0,0-2,2v4a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V24a2,2,0,0,0-2-2H9V18H23v4H20a2,2,0,0,0-2,2v4a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V24a2,2,0,0,0-2-2H25V18a2,2,0,0,0-2-2H17V12ZM12,28H4V24h8Zm16,0H20V24h8ZM4,4H28v6H4Z\"\n    }\n  }],\n  \"name\": \"parent-child\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"stroke-width\": \"0\",\n      \"d\": \"M28 8v-3c0-2.2056-1.7944-4-4-4s-4 1.7944-4 4v3c-1.1028 0-2 .8975-2 2v6c0 1.1025.8972 2 2 2h8c1.1028 0 2-.8975 2-2v-6c0-1.1025-.8972-2-2-2zm-6-3c0-1.1025.8972-2 2-2s2 .8975 2 2v3h-4v-3zm-2 11v-6h8v6h-8zM16 30h-2v-5c-.0018-1.6561-1.3439-2.9982-3-3h-4c-1.6561.0018-2.9982 1.3439-3 3v5h-2v-5c.0033-2.7601 2.2399-4.9967 5-5h4c2.7601.0033 4.9967 2.2399 5 5v5zM9 10c1.6569 0 3 1.3431 3 3s-1.3431 3-3 3-3-1.3431-3-3 1.3431-3 3-3m0-2c-2.7614 0-5 2.2386-5 5s2.2386 5 5 5 5-2.2386 5-5-2.2386-5-5-5z\"\n    }\n  }],\n  \"name\": \"user--access-locked\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","<!-- Account quota -->\n<div *ngIf=\"selection.quota\">\n  <legend i18n>Account quota</legend>\n  <cd-table-key-value [data]=\"quota\">\n  </cd-table-key-value>\n</div>\n\n<!-- Bucket quota -->\n<div *ngIf=\"selection.bucket_quota\">\n  <legend i18n>Bucket quota</legend>\n  <cd-table-key-value [data]=\"bucket_quota\">\n  </cd-table-key-value>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\n\n@Component({\n  selector: 'cd-rgw-user-accounts-details',\n  templateUrl: './rgw-user-accounts-details.component.html',\n  styleUrls: ['./rgw-user-accounts-details.component.scss']\n})\nexport class RgwUserAccountsDetailsComponent implements OnChanges {\n  @Input()\n  selection: any;\n  quota = {};\n  bucket_quota = {};\n\n  constructor(private dimlessBinary: DimlessBinaryPipe) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.selection && changes.selection.currentValue) {\n      this.quota = this.createDisplayValues('quota');\n      this.bucket_quota = this.createDisplayValues('bucket_quota');\n    }\n  }\n\n  createDisplayValues(quota_type: string) {\n    return {\n      Enabled: this.selection[quota_type].enabled ? 'Yes' : 'No',\n      'Maximum size': this.selection[quota_type].enabled\n        ? this.selection[quota_type].max_size <= -1\n          ? 'Unlimited'\n          : this.dimlessBinary.transform(this.selection[quota_type].max_size)\n        : '-',\n      'Maximum objects': this.selection[quota_type].enabled\n        ? this.selection[quota_type].max_objects <= -1\n          ? 'Unlimited'\n          : this.selection[quota_type].max_objects\n        : '-'\n    };\n  }\n}\n","<cd-rgw-user-tabs></cd-rgw-user-tabs>\n<legend i18n>\n  User Accounts\n  <cd-help-text>\n    Administrators can assign unique credentials to users or applications, enabling granular access control and enhancing security across the cluster.\n  </cd-help-text>\n</legend>\n<cd-table #table\n          [autoReload]=\"false\"\n          [data]=\"accounts\"\n          [columns]=\"columns\"\n          selectionType=\"single\"\n          columnMode=\"flex\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\"\n          identifier=\"id\"\n          (fetchData)=\"getAccountsList($event)\"\n          [status]=\"tableStatus\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-rgw-user-accounts-details *cdTableDetail\n                                [selection]=\"expandedRow\">\n  </cd-rgw-user-accounts-details>\n</cd-table>\n\n","import { Component, NgZone, OnInit, ViewChild } from '@angular/core';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Account } from '../models/rgw-user-accounts';\nimport { RgwUserAccountsService } from '~/app/shared/api/rgw-user-accounts.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { Router } from '@angular/router';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { Observable, Subscriber, forkJoin as observableForkJoin } from 'rxjs';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\n\nconst BASE_URL = 'rgw/accounts';\n\n@Component({\n  selector: 'cd-rgw-user-accounts',\n  templateUrl: './rgw-user-accounts.component.html',\n  styleUrls: ['./rgw-user-accounts.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwUserAccountsComponent extends ListWithDetails implements OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  permission: Permission;\n  tableActions: CdTableAction[] = [];\n  columns: CdTableColumn[] = [];\n  accounts: Account[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n  declare staleTimeout: number;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private router: Router,\n    private rgwUserAccountsService: RgwUserAccountsService,\n    private cdsModalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    protected ngZone: NgZone\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().rgw;\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Tenant`,\n        prop: 'tenant',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Account id`,\n        prop: 'id',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Email address`,\n        prop: 'email',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Max users`,\n        prop: 'max_users',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      },\n      {\n        name: $localize`Max roles`,\n        prop: 'max_roles',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      },\n      {\n        name: $localize`Max groups`,\n        prop: 'max_groups',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      },\n      {\n        name: $localize`Max. buckets`,\n        prop: 'max_buckets',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      },\n      {\n        name: $localize`Max access keys`,\n        prop: 'max_access_keys',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          '-1': $localize`Disabled`,\n          0: $localize`Unlimited`\n        }\n      }\n    ];\n    const getEditURL = () => {\n      if (this.selection.first().groupName && this.selection.first().id) {\n        return `${URLVerbs.EDIT}/${this.selection.first().id}\n        }`;\n      }\n      return `${URLVerbs.EDIT}/${this.selection.first().id}`;\n    };\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      click: () => this.router.navigate([`${BASE_URL}/${URLVerbs.CREATE}`]),\n      name: this.actionLabels.CREATE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.router.navigate([`${BASE_URL}/${getEditURL()}`]),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      name: this.actionLabels.DELETE\n    };\n    this.tableActions = [addAction, editAction, deleteAction];\n    this.setTableRefreshTimeout();\n  }\n\n  getAccountsList(context?: CdTableFetchDataContext) {\n    this.setTableRefreshTimeout();\n    this.rgwUserAccountsService.list(true).subscribe({\n      next: (accounts: Account[]) => {\n        this.accounts = accounts;\n      },\n      error: () => {\n        if (context) {\n          context.error();\n        }\n      }\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    const account_name = this.selection.first().name;\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Account`,\n      itemNames: [account_name],\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask(BASE_URL, {\n                account_names: [account_name]\n              }),\n              call: observableForkJoin(\n                this.selection.selected.map((account: Account) => {\n                  return this.rgwUserAccountsService.remove(account.id);\n                })\n              )\n            })\n            .subscribe({\n              error: (error: any) => {\n                // Forward the error to the observer.\n                observer.error(error);\n                // Reload the data table content because some deletions might\n                // have been executed successfully in the meanwhile.\n                this.table.refreshBtn();\n              },\n              complete: () => {\n                // Notify the observer that we are done.\n                observer.complete();\n                // Reload the data table content.\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"accountForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"accountForm\"\n          novalidate>\n\n      <div i18n=\"form title\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}\n      </div>\n\n      <!-- Account Name -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"Account Name\"\n                        for=\"acc_name\"\n                        cdRequiredField=\"Account Name\"\n                        [invalid]=\"!accountForm.controls.name.valid && accountForm.controls.name.dirty\"\n                        [invalidText]=\"accountIdError\"\n                        i18n>Account Name\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Enter account name\"\n                 id=\"acc_name\"\n                 name=\"acc_name\"\n                 formControlName=\"name\"/>\n        </cds-text-label>\n        <ng-template #accountIdError>\n          <span *ngIf=\"accountForm.showError('name', formDir, 'required')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n>This field is required.</ng-container>\n          </span>\n        </ng-template>\n      </div>\n      <!-- Tenant -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"tenant\"\n                        for=\"tenant\"\n                        i18n>Tenant\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Enter tenant\"\n                 id=\"tenant\"\n                 name=\"tenant\"\n                 formControlName=\"tenant\"/>\n        </cds-text-label>\n      </div>\n\n      <!-- Email -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"email\"\n                        for=\"email\"\n                        [invalid]=\"!accountForm.controls.email.valid && accountForm.controls.email.dirty\"\n                        [invalidText]=\"emailError\"\n                        i18n>Email\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Enter email\"\n                 id=\"email\"\n                 name=\"email\"\n                 formControlName=\"email\"/>\n        </cds-text-label>\n        <ng-template #emailError>\n          <span *ngIf=\"accountForm.showError('email', formDir, 'email')\">\n            <ng-container i18n> Please enter a valid email </ng-container>\n          </span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Max. bucket mode -->\n          <ng-container *ngTemplateOutlet=\"selectModeTemplate;context: { formControl: 'max_buckets_mode' }\"></ng-container>\n        </div>\n        <div cdsCol>\n        <!-- Max buckets -->\n        <span *ngIf=\"1 == accountForm.get('max_buckets_mode').value\">\n          <ng-container *ngTemplateOutlet=\"accountMaxValueTemplate;context: { formControl: 'max_buckets' }\"></ng-container>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Max. users mode -->\n          <ng-container *ngTemplateOutlet=\"selectModeTemplate;context: { formControl: 'max_users_mode' }\"></ng-container>\n        </div>\n        <div cdsCol>\n        <!-- Max users -->\n        <span *ngIf=\"1 == accountForm.get('max_users_mode').value\">\n          <ng-container *ngTemplateOutlet=\"accountMaxValueTemplate;context: { formControl: 'max_users' }\"></ng-container>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Max. roles mode -->\n          <ng-container *ngTemplateOutlet=\"selectModeTemplate;context: { formControl: 'max_roles_mode' }\"></ng-container>\n        </div>\n        <div cdsCol>\n        <!-- Max roles -->\n        <span *ngIf=\"1 == accountForm.get('max_roles_mode').value\">\n          <ng-container *ngTemplateOutlet=\"accountMaxValueTemplate;context: { formControl: 'max_roles' }\"></ng-container>\n        </span>\n        </div>\n      </div>\n\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Max. group mode -->\n          <ng-container *ngTemplateOutlet=\"selectModeTemplate;context: { formControl: 'max_groups_mode' }\"></ng-container>\n        </div>\n        <div cdsCol>\n        <!-- Max group -->\n        <span *ngIf=\"1 == accountForm.get('max_groups_mode').value\">\n          <ng-container *ngTemplateOutlet=\"accountMaxValueTemplate;context: { formControl: 'max_groups' }\"></ng-container>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Max. acess keys mode -->\n          <ng-container *ngTemplateOutlet=\"selectModeTemplate;context: { formControl: 'max_access_keys_mode' }\"></ng-container>\n        </div>\n        <div cdsCol>\n        <!-- Max acess keys -->\n        <span *ngIf=\"1 == accountForm.get('max_access_keys_mode').value\">\n          <ng-container *ngTemplateOutlet=\"accountMaxValueTemplate;context: { formControl: 'max_access_keys' }\"></ng-container>\n        </span>\n        </div>\n      </div>\n\n      <!-- Account Quota -->\n      <div class=\"form-item\">\n        <ng-container *ngTemplateOutlet=\"quotaTemplate;context: { formControl: {\n                      enabled: 'account_quota_enabled',\n                      unlimitedSize: 'account_quota_max_size_unlimited',\n                      maxSize: 'account_quota_max_size',\n                      unlimitedObjects: 'account_quota_max_objects_unlimited',\n                      maxObjects: 'account_quota_max_objects'\n                      },\n                      quotaType: 'account'\n                      }\">\n        </ng-container>\n      </div>\n\n      <!-- Bucket Quota -->\n      <div class=\"form-item\">\n        <ng-container *ngTemplateOutlet=\"quotaTemplate;\n                      context: {\n                      formControl: {\n                      enabled: 'bucket_quota_enabled',\n                      unlimitedSize: 'bucket_quota_max_size_unlimited',\n                      maxSize: 'bucket_quota_max_size',\n                      unlimitedObjects: 'bucket_quota_max_objects_unlimited',\n                      maxObjects: 'bucket_quota_max_objects'\n                      },\n                      quotaType: 'bucket'\n                      }\">\n        </ng-container>\n      </div>\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"formDir\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            wrappingClass=\"text-right\"></cd-form-button-panel>\n\n    </form>\n  </ng-container>\n</div>\n\n<ng-template #selectModeTemplate\n             [formGroup]=\"accountForm\"\n             let-formControl=\"formControl\">\n  <cds-select [formControlName]=\"formControl\"\n              [name]=\"formControl\"\n              [id]=\"formControl\"\n              label=\"{{formControl.split('_')[1] | upperFirst}} Mode\"\n              (change)=\"onModeChange($event.target.value, formControl)\"\n              [helperText]=\"getHelperTextForMode(formControl)\">\n    <option value=\"0\">Unlimited</option>\n    <option value=\"-1\">Disabled</option>\n    <option value=\"1\">Custom</option>\n  </cds-select>\n</ng-template>\n\n<ng-template #accountMaxValueTemplate\n             let-formControl=\"formControl\"\n             [formGroup]=\"accountForm\">\n<cds-number [id]=\"formControl\"\n            [name]=\"formControl\"\n            formControlName=\"{{formControl}}\"\n            label=\"{{formControl.split('_')[0] | upperFirst}}. {{formControl.split('_').length > 2 ? formControl.split('_')[1]+' '+formControl.split('_')[2]: formControl.split('_')[1]}}\"\n            [min]=\"1\"\n            cdRequiredField=\"{{formControl.split('_')[0] | upperFirst}}. {{formControl.split('_').length > 2 ? formControl.split('_')[1]+' '+formControl.split('_')[2]: formControl.split('_')[1]}}\"\n            [invalid]=\"!accountForm.controls[formControl].valid && accountForm.controls[formControl].dirty\"\n            [invalidText]=\"maxValError\"></cds-number>\n<ng-template #maxValError>\n  <span *ngIf=\"accountForm.showError(formControl, formDir, 'required')\"\n        i18n>This field is required.</span>\n  <span *ngIf=\"accountForm.controls[formControl].value == 0 && accountForm.showError(formControl, formDir, 'min')\"\n        i18n>Enter number greater than 0</span>\n  <span *ngIf=\"accountForm.showError(formControl, formDir, 'pattern')\"\n        i18n>Enter a valid positive number</span>\n</ng-template>\n</ng-template>\n\n<ng-template #quotaTemplate\n             let-quotaType=\"quotaType\"\n             let-formControl=\"formControl\"\n             [formGroup]=\"accountForm\">\n  <fieldset class=\"cds--fieldset\">\n    <legend class=\"cds--label\">{{quotaType | upperFirst}} Quota</legend>\n    <div *ngIf=\"quotaType == 'account';else bucket\"\n         class=\"quota-heading\">Set quota on account owned by users.</div>\n    <ng-template #bucket>\n      <div class=\"quota-heading\">\n        Set quota on buckets owned by an account.\n      </div>\n    </ng-template>\n    <!-- Enabled -->\n    <cds-checkbox [formControlName]=\"formControl.enabled\"\n                  [id]=\"quotaType+'_checkbox'\">\n      Enabled\n    </cds-checkbox >\n    <div class=\"quota-sub-block\"\n         *ngIf=\"accountForm.controls[formControl.enabled].value\">\n      <!-- Unlimited size -->\n      <cds-checkbox *ngIf=\"accountForm.controls[formControl.enabled].value\"\n                    [formControlName]=\"formControl.unlimitedSize\"\n                    [id]=\"quotaType+'unlimitedSize_checkbox'\">\n                    Unlimited size\n      </cds-checkbox>\n      <!-- Maximum size -->\n      <div class=\"input-wrapper\"\n           *ngIf=\"accountForm.controls[formControl.enabled].value && !accountForm.getValue(formControl.unlimitedSize)\">\n        <cds-text-label [label]=\"formControl.maxSize\"\n                        [for]=\"formControl.maxSize\"\n                        cdRequiredField=\"Max. size\"\n                        [invalid]=\"!accountForm.controls[formControl.maxSize].valid && accountForm.controls[formControl.maxSize].dirty\"\n                        [invalidText]=\"quotaSizeError\"\n                        i18n>Max. size\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Enter size\"\n                 [id]=\"formControl.maxSize\"\n                 [name]=\"formControl.maxSize\"\n                 [formControlName]=\"formControl.maxSize\"\n                 cdDimlessBinary/>\n        </cds-text-label>\n        <ng-template #quotaSizeError>\n          <span *ngIf=\"accountForm.showError(formControl.maxSize, formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span *ngIf=\"accountForm.showError(formControl.maxSize, formDir, 'quotaMaxSize')\"\n                i18n>Enter a valid value.</span>\n          <span *ngIf=\"accountForm.showError(formControl.maxSize, formDir, 'pattern')\"\n                i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n        </ng-template>\n      </div>\n      <!-- Unlimited objects -->\n      <cds-checkbox *ngIf=\"accountForm.controls[formControl.enabled].value\"\n                    [formControlName]=\"formControl.unlimitedObjects\"\n                    [id]=\"quotaType+'unlimitedObjects_checkbox'\">\n                    Unlimited objects\n      </cds-checkbox>\n    <!-- Maximum objects -->\n      <div class=\"input-wrapper\"\n           *ngIf=\"accountForm.controls[formControl.enabled].value && !accountForm.getValue(formControl.unlimitedObjects)\">\n        <cds-text-label [label]=\"formControl.maxObjects\"\n                        [for]=\"formControl.maxObjects\"\n                        cdRequiredField=\"Max. objects\"\n                        [invalid]=\"!accountForm.controls[formControl.maxObjects].valid && accountForm.controls[formControl.maxObjects].dirty\"\n                        [invalidText]=\"quotaObjectError\"\n                        i18n>Max. objects\n          <input cdsText\n                 type=\"number\"\n                 placeholder=\"Enter number of objects\"\n                 [id]=\"formControl.maxObjects\"\n                 [name]=\"formControl.maxObjects\"\n                 [formControlName]=\"formControl.maxObjects\"/>\n        </cds-text-label>\n        <ng-template #quotaObjectError>\n          <span *ngIf=\"accountForm.showError(formControl.maxObjects, formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span *ngIf=\"accountForm.showError(formControl.maxObjects, formDir, 'pattern')\"\n                i18n>Enter a valid positive number</span>\n        </ng-template>\n      </div>\n    </div>\n  </fieldset>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, ValidationErrors, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RgwUserAccountsService } from '~/app/shared/api/rgw-user-accounts.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { Account } from '../models/rgw-user-accounts';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdValidators, isEmptyInputValue } from '~/app/shared/forms/cd-validators';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { Observable, concat as observableConcat } from 'rxjs';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'cd-rgw-user-accounts-form',\n  templateUrl: './rgw-user-accounts-form.component.html',\n  styleUrls: ['./rgw-user-accounts-form.component.scss']\n})\nexport class RgwUserAccountsFormComponent extends CdForm implements OnInit {\n  accountForm: CdFormGroup;\n  action: string;\n  resource: string;\n  editing: boolean = false;\n  submitObservables: Observable<Object>[] = [];\n\n  constructor(\n    private router: Router,\n    private actionLabels: ActionLabelsI18n,\n    private rgwUserAccountsService: RgwUserAccountsService,\n    private notificationService: NotificationService,\n    private formBuilder: CdFormBuilder,\n    private route: ActivatedRoute\n  ) {\n    super();\n    this.editing = this.router.url.includes('rgw/accounts/edit');\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`Account`;\n    this.createForm();\n    this.loadingReady();\n  }\n\n  ngOnInit(): void {\n    if (this.editing) {\n      this.route.paramMap.subscribe((params: any) => {\n        const account_id = params.get('id');\n        this.rgwUserAccountsService.get(account_id).subscribe((accountData: Account) => {\n          // Get the default values.\n          const defaults = _.clone(this.accountForm.value);\n          // Extract the values displayed in the form.\n          let value: any = _.pick(accountData, _.keys(this.accountForm.value));\n          // Map the max. values.\n          ['max_users', 'max_roles', 'max_groups', 'max_buckets', 'max_access_keys'].forEach(\n            (formControlName: string) => {\n              this.mapValuesForMode(value, formControlName);\n            }\n          );\n          // Map the quota values.\n          ['account', 'bucket'].forEach((type: string) => {\n            let quota: any = {};\n            if (type == 'bucket') {\n              quota = accountData.bucket_quota;\n            } else {\n              quota = accountData.quota;\n            }\n            value[type + '_quota_enabled'] = quota.enabled;\n            if (quota.max_size < 0) {\n              value[type + '_quota_max_size_unlimited'] = true;\n              value[type + '_quota_max_size'] = null;\n            } else {\n              value[type + '_quota_max_size_unlimited'] = false;\n              value[type + '_quota_max_size'] = `${quota.max_size} B`;\n            }\n            if (quota.max_objects < 0) {\n              value[type + '_quota_max_objects_unlimited'] = true;\n              value[type + '_quota_max_objects'] = null;\n            } else {\n              value[type + '_quota_max_objects_unlimited'] = false;\n              value[type + '_quota_max_objects'] = quota.max_objects;\n            }\n          });\n          // Merge with default values.\n          value = _.merge(defaults, value);\n          // Update the form.\n          this.accountForm.setValue(value);\n          this.accountForm.get('tenant').disable();\n        });\n      });\n    }\n  }\n\n  mapValuesForMode(value: any, formControlName: string) {\n    switch (value[formControlName]) {\n      case -1:\n        value[`${formControlName}_mode`] = '-1';\n        value[formControlName] = '';\n        break;\n      case 0:\n        value[`${formControlName}_mode`] = '0';\n        value[formControlName] = '';\n        break;\n      default:\n        value[`${formControlName}_mode`] = '1';\n        break;\n    }\n  }\n\n  private createForm() {\n    this.accountForm = this.formBuilder.group({\n      id: [''],\n      tenant: [''],\n      name: ['', Validators.required],\n      email: ['', CdValidators.email],\n      max_users_mode: ['1'],\n      max_users: [\n        1000,\n        [\n          CdValidators.requiredIf({ max_users_mode: '1' }),\n          CdValidators.number(false),\n          Validators.min(1)\n        ]\n      ],\n      max_roles_mode: ['1'],\n      max_roles: [\n        1000,\n        [\n          CdValidators.requiredIf({ max_roles_mode: '1' }),\n          CdValidators.number(false),\n          Validators.min(1)\n        ]\n      ],\n      max_groups_mode: ['1'],\n      max_groups: [\n        1000,\n        [\n          CdValidators.requiredIf({ max_groups_mode: '1' }),\n          CdValidators.number(false),\n          Validators.min(1)\n        ]\n      ],\n      max_access_keys_mode: ['1'],\n      max_access_keys: [\n        4,\n        [\n          CdValidators.requiredIf({ max_access_keys_mode: '1' }),\n          CdValidators.number(false),\n          Validators.min(1)\n        ]\n      ],\n      max_buckets_mode: ['1'],\n      max_buckets: [\n        1000,\n        [\n          CdValidators.requiredIf({ max_buckets_mode: '1' }),\n          CdValidators.number(false),\n          Validators.min(1)\n        ]\n      ],\n      account_quota_enabled: [false],\n      account_quota_max_size_unlimited: [true],\n      account_quota_max_size: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              account_quota_enabled: true,\n              account_quota_max_size_unlimited: false\n            },\n            [Validators.required, this.quotaMaxSizeValidator]\n          )\n        ]\n      ],\n      account_quota_max_objects_unlimited: [true],\n      account_quota_max_objects: [\n        null,\n        [\n          CdValidators.requiredIf({\n            account_quota_enabled: true,\n            account_quota_max_objects_unlimited: false\n          }),\n          Validators.pattern(/^[0-9]+$/)\n        ]\n      ],\n      bucket_quota_enabled: [false],\n      bucket_quota_max_size_unlimited: [true],\n      bucket_quota_max_size: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              bucket_quota_enabled: true,\n              bucket_quota_max_size_unlimited: false\n            },\n            [Validators.required, this.quotaMaxSizeValidator]\n          )\n        ]\n      ],\n      bucket_quota_max_objects_unlimited: [true],\n      bucket_quota_max_objects: [\n        null,\n        [\n          CdValidators.requiredIf({\n            bucket_quota_enabled: true,\n            bucket_quota_max_objects_unlimited: false\n          }),\n          Validators.pattern(/^[0-9]+$/)\n        ]\n      ]\n    });\n  }\n\n  /**\n   * Validate the quota maximum size, e.g. 1096, 1K, 30M or 1.9MiB.\n   */\n  quotaMaxSizeValidator(control: AbstractControl): ValidationErrors | null {\n    if (isEmptyInputValue(control.value)) {\n      return null;\n    }\n    const m = RegExp('^(\\\\d+(\\\\.\\\\d+)?)\\\\s*(B|K(B|iB)?|M(B|iB)?|G(B|iB)?|T(B|iB)?)?$', 'i').exec(\n      control.value\n    );\n    if (m === null) {\n      return { quotaMaxSize: true };\n    }\n    const bytes = new FormatterService().toBytes(control.value);\n    return bytes < 1024 ? { quotaMaxSize: true } : null;\n  }\n\n  submit() {\n    let notificationTitle: string = '';\n    if (this.accountForm.invalid) {\n      return;\n    }\n\n    if (this.accountForm.pending) {\n      this.accountForm.setErrors({ cdSubmitButton: true });\n      return;\n    }\n\n    const formvalue = this.accountForm.value;\n    const payload = {\n      account_id: formvalue.id,\n      account_name: formvalue.name,\n      email: formvalue.email,\n      tenant: formvalue.tenant,\n      max_users: this.getValueFromFormControl('max_users'),\n      max_buckets: this.getValueFromFormControl('max_buckets'),\n      max_roles: this.getValueFromFormControl('max_roles'),\n      max_group: this.getValueFromFormControl('max_groups'),\n      max_access_keys: this.getValueFromFormControl('max_access_keys')\n    };\n    if (!this.editing) {\n      delete payload.account_id;\n      notificationTitle = $localize`Account created successfully`;\n      this.rgwUserAccountsService.create(payload).subscribe({\n        next: (account: Account) => {\n          this.accountForm.get('id').setValue(account.id);\n          this.setQuotaConfig();\n          this.notificationService.show(NotificationType.success, notificationTitle);\n        },\n        error: () => {\n          // Reset the 'Submit' button.\n          this.accountForm.setErrors({ cdSubmitButton: true });\n        }\n      });\n    } else {\n      notificationTitle = $localize`Account modified successfully`;\n      this.rgwUserAccountsService.modify(payload).subscribe({\n        next: (account: Account) => {\n          this.accountForm.get('id').setValue(account.id);\n          this.setQuotaConfig();\n          this.notificationService.show(NotificationType.success, notificationTitle);\n        },\n        error: () => {\n          // Reset the 'Submit' button.\n          this.accountForm.setErrors({ cdSubmitButton: true });\n        }\n      });\n    }\n  }\n\n  setQuotaConfig() {\n    const accountId: string = this.accountForm.get('id').value;\n    // Check if account quota has been modified.\n    if (this._isQuotaConfDirty('account')) {\n      const accountQuotaArgs = this._getQuotaArgs('account');\n      this.submitObservables.push(\n        this.rgwUserAccountsService.setQuota(accountId, accountQuotaArgs)\n      );\n    }\n    // Check if bucket quota has been modified.\n    if (this._isQuotaConfDirty('bucket')) {\n      const bucketQuotaArgs = this._getQuotaArgs('bucket');\n      this.submitObservables.push(this.rgwUserAccountsService.setQuota(accountId, bucketQuotaArgs));\n    }\n    // Finally execute all observables one by one in serial.\n    observableConcat(...this.submitObservables).subscribe({\n      error: () => {\n        // Reset the 'Submit' button.\n        this.accountForm.setErrors({ cdSubmitButton: true });\n      },\n      complete: () => {\n        this.goToListView();\n      }\n    });\n    if (this.submitObservables.length == 0) {\n      this.goToListView();\n    }\n  }\n\n  /**\n   * Helper function to get the arguments for the API request when any\n   * quota configuration has been modified.\n   */\n  private _getQuotaArgs(quotaType: string) {\n    const result = {\n      quota_type: quotaType,\n      enabled: this.accountForm.getValue(`${quotaType}_quota_enabled`),\n      max_size: '-1',\n      max_objects: '-1'\n    };\n    if (!this.accountForm.getValue(`${quotaType}_quota_max_size_unlimited`)) {\n      // Convert the given value to bytes.\n      const bytes = new FormatterService().toBytes(\n        this.accountForm.getValue(`${quotaType}_quota_max_size`)\n      );\n      // Finally convert the value to KiB.\n      result['max_size'] = bytes.toFixed(0) as any;\n    }\n    if (!this.accountForm.getValue(`${quotaType}_quota_max_objects_unlimited`)) {\n      result['max_objects'] = `${this.accountForm.getValue(`${quotaType}_quota_max_objects`)}`;\n    }\n    return result;\n  }\n\n  /**\n   * Check if any quota has been modified.\n   * @return {Boolean} Returns TRUE if the quota has been modified.\n   */\n  private _isQuotaConfDirty(quotaType: string): boolean {\n    return [\n      `${quotaType}_quota_enabled`,\n      `${quotaType}_quota_max_size_unlimited`,\n      `${quotaType}_quota_max_size`,\n      `${quotaType}_quota_max_objects_unlimited`,\n      `${quotaType}_quota_max_objects`\n    ].some((path) => {\n      return this.accountForm.get(path).dirty;\n    });\n  }\n\n  onModeChange(mode: string, formControlName: string) {\n    if (mode === '1') {\n      // If 'Custom' mode is selected, then ensure that the form field\n      // 'Max. buckets' contains a valid value. Set it to default if\n      // necessary.\n      if (!this.accountForm.get(formControlName).valid) {\n        this.accountForm.patchValue({\n          [formControlName]: 1000\n        });\n      }\n    }\n  }\n\n  goToListView(): void {\n    this.router.navigate(['rgw/accounts']);\n  }\n\n  getValueFromFormControl(formControlName: string) {\n    const formvalue = this.accountForm.value;\n    return formvalue[`${formControlName}_mode`] == 1\n      ? formvalue[formControlName]\n      : formvalue[`${formControlName}_mode`];\n  }\n\n  getHelperTextForMode(formControl: string) {\n    const resourceName =\n      formControl.split('_').length > 3\n        ? formControl.split('_')[1] + ' ' + formControl.split('_')[2]\n        : formControl.split('_')[1];\n    if (this.accountForm.getValue(formControl) == -1) {\n      return `${resourceName[0].toUpperCase() + resourceName.slice(1, -1)} creation is disabled.`;\n    } else if (this.accountForm.getValue(formControl) == 0) {\n      return `Unlimited ${resourceName.slice(0, -1)} creation allowed.`;\n    }\n    return '';\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{ md: 4 }\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"storageClassForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"storageClassForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">\n        {{ action | titlecase }} {{ resource | upperFirst }}\n\n        <cd-help-text [formAllFieldsRequired]=\"true\"></cd-help-text>\n      </div>\n      <div class=\"form-item\">\n        <cds-select\n          label=\"Type\"\n          i18n-label\n          for=\"storageClassType\"\n          formControlName=\"storageClassType\"\n          [helperText]=\"helpTextLabels.storageClassText\"\n          id=\"storageClassType\"\n          [invalid]=\"storageClassForm.showError('storageClassType', formDir, 'required')\"\n          [invalidText]=\"storageError\"\n        >\n          <option value=\"\"\n                  i18n>-- Select Storage Class --</option>\n          <option *ngFor=\"let opt of storageClassOptions\"\n                  [value]=\"opt.value\"\n                  i18n>\n            {{ opt.label }}\n          </option>\n        </cds-select>\n        <ng-template #storageError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"storageClassForm.showError('storageClassType', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n        <div cdsCol>\n          <!-- Zone Group -->\n          <cds-select\n            label=\"Zone Group Name\"\n            i18n-label\n            formControlName=\"zonegroup\"\n            id=\"zonegroup\"\n            [invalid]=\"storageClassForm.showError('zonegroup', formDir, 'required')\"\n            (change)=\"onZonegroupChange()\"\n            [invalidText]=\"zonegroupError\"\n          >\n            <option\n              *ngFor=\"let zonegrp of zonegroupNames\"\n              [value]=\"zonegrp.name\"\n              [selected]=\"zonegrp.name === storageClassForm.getValue('zonegroup')\"\n              i18n\n            >\n              {{ zonegrp.name }}\n            </option>\n          </cds-select>\n          <ng-template #zonegroupError>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"storageClassForm.showError('zonegroup', formDir, 'required')\"\n              i18n\n              >This field is required.</span\n            >\n          </ng-template>\n        </div>\n        <div cdsCol>\n          <!-- Placement Target -->\n          <cds-select\n            label=\"Placement Target\"\n            i18n-label\n            formControlName=\"placement_target\"\n            id=\"placement_target\"\n            [invalid]=\"storageClassForm.showError('placement_target', formDir, 'required')\"\n            [invalidText]=\"placementError\"\n          >\n            <option [value]=\"\"\n                    i18n>--Select--</option>\n            <option\n              *ngFor=\"let placementTarget of placementTargets\"\n              [value]=\"placementTarget\"\n              [selected]=\"placementTarget === storageClassForm.getValue('placement_target')\"\n              i18n\n            >\n              {{ placementTarget }}\n            </option>\n          </cds-select>\n          <ng-template #placementError>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"storageClassForm.showError('placement_target', formDir, 'required')\"\n              i18n\n              >This field is required.</span\n            >\n          </ng-template>\n        </div>\n      </div>\n      <!-- Storage Class -->\n      <div class=\"form-item\">\n        <cds-text-label\n          labelInputID=\"storage_class\"\n          i18n\n          [disabled]=\"editing\"\n          [invalid]=\"\n            storageClassForm.controls.storage_class.invalid &&\n            storageClassForm.controls.storage_class.dirty\n          \"\n          [invalidText]=\"storageClassError\"\n          >Name\n          <input\n            cdsText\n            type=\"type\"\n            id=\"storage_class\"\n            formControlName=\"storage_class\"\n            [invalid]=\"storageClassForm.showError('storage_class', formDir, 'required')\"\n          />\n        </cds-text-label>\n        <ng-template #storageClassError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"storageClassForm.showError('storage_class', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n      @if( isTierMatch( TIER_TYPE.CLOUD_TIER, TIER_TYPE.GLACIER )){\n      <div>\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n          <div cdsCol>\n            <!-- Target Region -->\n            <cds-text-label\n              labelInputID=\"region\"\n              i18n\n              [invalid]=\"storageClassForm.showError('region', formDir, 'required')\"\n              [invalidText]=\"regionError\"\n              [helperText]=\"helpTextLabels.targetRegionText\"\n              >Target Region\n              <input\n                cdsText\n                type=\"text\"\n                id=\"region\"\n                formControlName=\"region\"\n                placeholder=\"e.g, us-east-1\"\n                i18n-placeholder\n                [invalid]=\"storageClassForm.showError('region', formDir, 'required')\"\n              />\n            </cds-text-label>\n            <ng-template #regionError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('region', formDir, 'required')\"\n                i18n\n                >This field is required.</span\n              >\n            </ng-template>\n          </div>\n          <div cdsCol>\n            <!-- Target Endpoint -->\n            <cds-text-label\n            labelInputID=\"target_endpoint\"\n            i18n\n            [invalid]=\"storageClassForm.showError('target_endpoint', formDir, 'invalidURL') || storageClassForm.showError('target_endpoint', formDir, 'required')\"\n            [invalidText]=\"endpointError\"\n            [helperText]=\"helpTextLabels.targetEndpointText\"\n            >Target Endpoint\n            <input\n              cdsText\n              type=\"text\"\n              placeholder=\"e.g, http://ceph-node-00.com:80\"\n              i18n-placeholder\n              id=\"target_endpoint\"\n              formControlName=\"target_endpoint\"\n              [invalid]=\"storageClassForm.showError('target_endpoint', formDir, 'invalidURL') || storageClassForm.showError('target_endpoint', formDir, 'required')\"\n              [invalidText]=\"endpointError\"\n            />\n          </cds-text-label>\n            <ng-template #endpointError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('target_endpoint', formDir, 'required')\"\n                i18n\n                >This field is required.</span\n              >\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"storageClassForm.showError('target_endpoint', formDir, 'invalidURL')\"\n                    i18n>Please enter a valid URL.</span>\n            </ng-template>\n          </div>\n        </div>\n        <!-- Access Key  -->\n        <div class=\"form-item\">\n          <div cdsCol\n               [columnNumbers]=\"{ md: 12 }\"\n               class=\"d-flex\">\n            <cds-password-label\n              labelInputID=\"access_key\"\n              [invalid]=\"storageClassForm.showError('access_key', formDir, 'required')\"\n              [invalidText]=\"accessError\"\n              [helperText]=\"helpTextLabels.targetAccessKeyText\"\n              i18n\n              >Target Access Key\n              <input\n                cdsPassword\n                type=\"password\"\n                id=\"access_key\"\n                formControlName=\"access_key\"\n                [invalid]=\"storageClassForm.showError('access_key', formDir, 'required')\"\n              />\n            </cds-password-label>\n            <cd-copy-2-clipboard-button class=\"clipboard\"> </cd-copy-2-clipboard-button>\n            <ng-template #accessError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('access_key', formDir, 'required')\"\n                i18n\n                >This field is required.</span\n              >\n            </ng-template>\n          </div>\n        </div>\n        <!-- Secret Key  -->\n        <div class=\"form-item\">\n          <div cdsCol\n               [columnNumbers]=\"{ md: 12 }\"\n               class=\"d-flex\">\n            <cds-password-label\n              labelInputID=\"secret_key\"\n              [helperText]=\"helpTextLabels.targetSecretKeyText\"\n              [invalid]=\"storageClassForm.showError('secret_key', formDir, 'required')\"\n              [invalidText]=\"secretError\"\n              i18n\n              >Target Secret Key\n              <input\n                cdsPassword\n                type=\"password\"\n                id=\"secret_key\"\n                formControlName=\"secret_key\"\n                [invalid]=\"storageClassForm.showError('secret_key', formDir, 'required')\"\n              />\n            </cds-password-label>\n            <cd-copy-2-clipboard-button class=\"clipboard\"> </cd-copy-2-clipboard-button>\n            <ng-template #secretError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('secret_key', formDir, 'required')\"\n                i18n\n                >This field is required.</span\n              >\n            </ng-template>\n          </div>\n        </div>\n        <!-- Target Path -->\n        <div class=\"form-item\">\n          <cds-text-label\n            labelInputID=\"target_path\"\n            i18n\n            [invalid]=\"storageClassForm.showError('target_path', formDir, 'required')\"\n            [invalidText]=\"targetError\"\n            [helperText]=\"helpTextLabels.targetPathText\"\n            >Target Path\n            <input\n              cdsText\n              type=\"text\"\n              id=\"target_path\"\n              formControlName=\"target_path\"\n              [invalid]=\"storageClassForm.showError('target_path', formDir, 'required')\"\n            />\n          </cds-text-label>\n          <ng-template #targetError>\n            <span\n              class=\"invalid-feedback\"\n              *ngIf=\"storageClassForm.showError('target_path', formDir, 'required')\"\n              i18n\n              >This field is required.</span\n            >\n          </ng-template>\n        </div>\n        <div class=\"form-item\">\n          <cds-checkbox\n            id=\"allow_read_through\"\n            formControlName=\"allow_read_through\"\n            cdOptionalField=\"Allow Read Through\"\n            i18n\n            (change)=\"onAllowReadThroughChange($event)\"\n            >Allow Read Through\n            <cd-help-text>{{ helpTextLabels?.allowReadThroughText }}</cd-help-text>\n          </cds-checkbox>\n        </div>\n        <div class=\"form-item\">\n          <cds-checkbox\n            id=\"retain_head_object\"\n            formControlName=\"retain_head_object\"\n            cdOptionalField=\"Head Object (Stub File)\"\n            i18n\n            >Head Object (Stub File)\n            <cd-help-text>{{ helpTextLabels?.retainHeadObjectText }}</cd-help-text>\n          </cds-checkbox>\n        </div>\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n          <div cdsCol>\n            <cds-number\n              name=\"read_through_restore_days\"\n              formControlName=\"read_through_restore_days\"\n              id=\"read_through_restore_days\"\n              min=\"1\"\n              label=\"ReadThrough Restore Days\"\n              [helperText]=\"helpTextLabels.readthroughrestoreDaysText\"\n              i18n-helperText\n              i18n-label\n              i18n\n              [invalid]=\"\n                storageClassForm.controls.read_through_restore_days.invalid &&\n                storageClassForm.controls.read_through_restore_days.dirty\n              \"\n              [invalidText]=\"readThroughError\"\n            ></cds-number>\n            <ng-template #readThroughError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('read_through_restore_days', formDir, 'pattern')\"\n                i18n\n                >The entered value must be a positive integer.</span\n              >\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('read_through_restore_days', formDir, 'lockDays')\"\n                i18n\n                >ReadThrough Restore Days must be positive.</span\n              >\n            </ng-template>\n          </div>\n          <div cdsCol>\n            <cds-select\n              formControlName=\"restore_storage_class\"\n              label=\"Restore Storage Class\"\n              id=\"restore_storage_class\"\n              [helperText]=\"helpTextLabels.restoreStorageClassText\"\n              i18n-label\n            >\n              <option value=\"\"\n                      i18n>-- Select the glacier restore storage class --</option>\n              <option [ngValue]=\"standard\"\n                      i18n>Standard</option>\n            </cds-select>\n          </div>\n        </div>\n      </div>\n      } @if(isTierMatch(TIER_TYPE.GLACIER)){\n      <div>\n        <legend class=\"cd-header\"\n                i18n>Glacier Configuration</legend>\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n          <div cdsCol>\n            <cds-select\n              formControlName=\"glacier_restore_tier_type\"\n              label=\"Glacier Restore Tier Type\"\n              cdRequiredField=\"Glacier Restore Tier Type\"\n              id=\"glacier_restore_tier_type\"\n              [invalid]=\"\n                storageClassForm.controls.glacier_restore_tier_type.invalid &&\n                storageClassForm.controls.glacier_restore_tier_type.dirty\n              \"\n              [invalidText]=\"glacierError\"\n              [helperText]=\"helpTextLabels.tiertypeText\"\n              i18n-label\n            >\n              <option value=\"\"\n                      i18n>-- Select the glacier restore tier type --</option>\n              <option [ngValue]=\"standard\"\n                      i18n>Standard</option>\n              <option [ngValue]=\"expedited\"\n                      i18n>Expedited</option>\n            </cds-select>\n            <ng-template #glacierError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('glacier_restore_tier_type', formDir, 'required')\"\n                i18n\n                >This field is required.</span\n              >\n            </ng-template>\n          </div>\n          <div cdsCol>\n            <cds-number\n              [id]=\"'glacier_restore_days'\"\n              [formControlName]=\"'glacier_restore_days'\"\n              [label]=\"'Glacier Restore Days'\"\n              [helperText]=\"helpTextLabels.restoreDaysText\"\n              [min]=\"1\"\n              i18n-helperText\n              i18n-label\n              i18n\n              [invalid]=\"\n                storageClassForm.controls.glacier_restore_days.invalid &&\n                storageClassForm.controls.glacier_restore_days.dirty\n              \"\n              [invalidText]=\"glacierRestoreError\"\n            >\n            </cds-number>\n            <ng-template #glacierRestoreError>\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('glacier_restore_days', formDir, 'pattern')\"\n                i18n\n                >The entered value must be a positive integer.</span\n              >\n              <span\n                class=\"invalid-feedback\"\n                *ngIf=\"storageClassForm.showError('glacier_restore_days', formDir, 'lockDays')\"\n                i18n\n                >Glacier Restore Days must be positive.</span\n              >\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      } @if( isTierMatch( TIER_TYPE.CLOUD_TIER, TIER_TYPE.GLACIER )){\n      <fieldset>\n        <div>\n          <ng-template #title>\n            <h5 class=\"cds--accordion__title cd-header\">Advanced</h5>\n          </ng-template>\n          <fieldset>\n            <cds-accordion size=\"lg\"\n                           class=\"form-item\">\n              <cds-accordion-item\n                [title]=\"title\"\n                id=\"advanced-fieldset\"\n                (selected)=\"showAdvanced = !showAdvanced\"\n              >\n                <!-- Multi Part Sync Threshold -->\n                <div class=\"form-item form-item-append\"\n                     cdsRow>\n                  <div cdsCol>\n                    <cds-text-label\n                      labelInputID=\"multipart_sync_threshold\"\n                      i18n\n                      [helperText]=\"helpTextLabels.multipartSyncThresholdText\"\n                      cdOptionalField=\"Multipart Sync Threshold\"\n                      >Multipart Sync Threshold\n                      <input\n                        cdsText\n                        type=\"text\"\n                        id=\"multipart_sync_threshold\"\n                        formControlName=\"multipart_sync_threshold\"\n                        cdDimlessBinary\n                      />\n                    </cds-text-label>\n                  </div>\n                  <div cdsCol>\n                    <cds-text-label\n                      labelInputID=\"multipart_min_part_size\"\n                      i18n\n                      [helperText]=\"helpTextLabels.multipartMinPartText\"\n                      cdOptionalField=\"Multipart Minimum Part Size\"\n                      >Multipart Minimum Part Size\n                      <input\n                        cdsText\n                        type=\"text\"\n                        id=\"multipart_min_part_size\"\n                        formControlName=\"multipart_min_part_size\"\n                        cdDimlessBinary\n                      />\n                    </cds-text-label>\n                  </div>\n                </div>\n              </cds-accordion-item>\n            </cds-accordion>\n          </fieldset>\n        </div>\n      </fieldset>\n      } @if( isTierMatch( TIER_TYPE.CLOUD_TIER, TIER_TYPE.GLACIER )){\n      <cd-alert-panel type=\"warning\"\n                      spacingClass=\"mb-2\">\n        <span i18n>RGW service would be restarted after creating the storage class.</span>\n      </cd-alert-panel>\n      }\n      <cd-form-button-panel\n        (submitActionEvent)=\"submitAction()\"\n        [form]=\"storageClassForm\"\n        [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n        wrappingClass=\"text-right\"\n      ></cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, Validators } from '@angular/forms';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport _ from 'lodash';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RgwStorageClassService } from '~/app/shared/api/rgw-storage-class.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport {\n  ALLOW_READ_THROUGH_TEXT,\n  DEFAULT_PLACEMENT,\n  MULTIPART_MIN_PART_TEXT,\n  MULTIPART_SYNC_THRESHOLD_TEXT,\n  PlacementTarget,\n  RequestModel,\n  RETAIN_HEAD_OBJECT_TEXT,\n  StorageClass,\n  Target,\n  TARGET_ACCESS_KEY_TEXT,\n  TARGET_ENDPOINT_TEXT,\n  TARGET_PATH_TEXT,\n  TARGET_REGION_TEXT,\n  TARGET_SECRET_KEY_TEXT,\n  TierTarget,\n  TIER_TYPE,\n  ZoneGroup,\n  ZoneGroupDetails,\n  CLOUDS3_STORAGE_CLASS_TEXT,\n  LOCAL_STORAGE_CLASS_TEXT,\n  GLACIER_STORAGE_CLASS_TEXT,\n  GLACIER_RESTORE_DAY_TEXT,\n  GLACIER_RESTORE_TIER_TYPE_TEXT,\n  RESTORE_DAYS_TEXT,\n  READTHROUGH_RESTORE_DAYS_TEXT,\n  RESTORE_STORAGE_CLASS_TEXT,\n  TIER_TYPE_DISPLAY,\n  S3Glacier,\n  StorageClassOption,\n  STORAGE_CLASS_CONSTANTS,\n  STANDARD_TIER_TYPE_TEXT,\n  EXPEDITED_TIER_TYPE_TEXT,\n  TextLabels,\n  CLOUD_TIER_REQUIRED_FIELDS,\n  GLACIER_REQUIRED_FIELDS\n} from '../models/rgw-storage-class.model';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\n\n@Component({\n  selector: 'cd-rgw-storage-class-form',\n  templateUrl: './rgw-storage-class-form.component.html',\n  styleUrls: ['./rgw-storage-class-form.component.scss']\n})\nexport class RgwStorageClassFormComponent extends CdForm implements OnInit {\n  storageClassForm: CdFormGroup;\n  action: string;\n  resource: string;\n  editing: boolean;\n  showAdvanced: boolean = false;\n  defaultZoneGroup: string;\n  zonegroupNames: ZoneGroup[];\n  placementTargets: string[] = [];\n  selectedZoneGroup: string;\n  defaultZonegroup: ZoneGroup;\n  zoneGroupDetails: ZoneGroupDetails;\n  storageClassInfo: StorageClass;\n  tierTargetInfo: TierTarget;\n  glacierStorageClassDetails: S3Glacier;\n  allowReadThrough: boolean = false;\n  TIER_TYPE = TIER_TYPE;\n  TIER_TYPE_DISPLAY = TIER_TYPE_DISPLAY;\n  storageClassOptions: StorageClassOption[];\n  helpTextLabels: TextLabels;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private formBuilder: CdFormBuilder,\n    private notificationService: NotificationService,\n    private rgwStorageService: RgwStorageClassService,\n    private rgwZoneGroupService: RgwZonegroupService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public formatter: FormatterService\n  ) {\n    super();\n    this.resource = $localize`Tiering Storage Class`;\n    this.editing = this.router.url.startsWith(`/rgw/tiering/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n  }\n\n  ngOnInit() {\n    this.helpTextLabels = {\n      targetPathText: TARGET_PATH_TEXT,\n      targetEndpointText: TARGET_ENDPOINT_TEXT,\n      targetRegionText: TARGET_REGION_TEXT,\n      targetAccessKeyText: TARGET_ACCESS_KEY_TEXT,\n      targetSecretKeyText: TARGET_SECRET_KEY_TEXT,\n      retainHeadObjectText: RETAIN_HEAD_OBJECT_TEXT,\n      allowReadThroughText: ALLOW_READ_THROUGH_TEXT,\n      storageClassText: LOCAL_STORAGE_CLASS_TEXT,\n      multipartMinPartText: MULTIPART_MIN_PART_TEXT,\n      multipartSyncThresholdText: MULTIPART_SYNC_THRESHOLD_TEXT,\n      tiertypeText: STANDARD_TIER_TYPE_TEXT,\n      glacierRestoreDayText: GLACIER_RESTORE_DAY_TEXT,\n      glacierRestoreTiertypeText: GLACIER_RESTORE_TIER_TYPE_TEXT,\n      restoreDaysText: RESTORE_DAYS_TEXT,\n      readthroughrestoreDaysText: READTHROUGH_RESTORE_DAYS_TEXT,\n      restoreStorageClassText: RESTORE_STORAGE_CLASS_TEXT\n    };\n    this.storageClassOptions = [\n      { value: TIER_TYPE.LOCAL, label: TIER_TYPE_DISPLAY.LOCAL },\n      { value: TIER_TYPE.CLOUD_TIER, label: TIER_TYPE_DISPLAY.CLOUD_TIER },\n      { value: TIER_TYPE.GLACIER, label: TIER_TYPE_DISPLAY.GLACIER }\n    ];\n    this.createForm();\n    this.storageClassTypeText();\n    this.updateTierTypeHelpText();\n    this.loadingReady();\n    this.loadZoneGroup();\n    if (this.editing) {\n      this.route.params.subscribe((params: StorageClass) => {\n        this.storageClassInfo = params;\n      });\n      this.rgwStorageService\n        .getPlacement_target(this.storageClassInfo.placement_target)\n        .subscribe((placementTargetInfo: PlacementTarget) => {\n          this.tierTargetInfo = this.getTierTargetByStorageClass(\n            placementTargetInfo,\n            this.storageClassInfo.storage_class\n          );\n          let response = this.tierTargetInfo?.val?.s3;\n          this.storageClassForm.get('zonegroup').disable();\n          this.storageClassForm.get('placement_target').disable();\n          this.storageClassForm.get('storage_class').disable();\n          if (\n            this.tierTargetInfo?.val?.tier_type === TIER_TYPE.CLOUD_TIER ||\n            this.tierTargetInfo?.val?.tier_type === TIER_TYPE.GLACIER\n          ) {\n            this.storageClassForm.get('storageClassType').disable();\n          }\n          this.storageClassForm.patchValue({\n            zonegroup: this.storageClassInfo?.zonegroup_name,\n            region: response?.region,\n            placement_target: this.storageClassInfo?.placement_target,\n            storageClassType: this.tierTargetInfo?.val?.tier_type ?? TIER_TYPE.LOCAL,\n            target_endpoint: response?.endpoint,\n            storage_class: this.storageClassInfo?.storage_class,\n            access_key: response?.access_key,\n            secret_key: response?.secret,\n            target_path: response?.target_path,\n            retain_head_object: this.tierTargetInfo?.val?.retain_head_object || false,\n            multipart_sync_threshold: response?.multipart_sync_threshold || '',\n            multipart_min_part_size: response?.multipart_min_part_size || '',\n            allow_read_through: this.tierTargetInfo?.val?.allow_read_through || false,\n            restore_storage_class: this.tierTargetInfo?.val?.restore_storage_class,\n            read_through_restore_days: this.tierTargetInfo?.val?.read_through_restore_days\n          });\n          if (this.tierTargetInfo?.val?.tier_type == TIER_TYPE.GLACIER) {\n            let glacierResponse = this.tierTargetInfo?.val['s3-glacier'];\n            this.storageClassForm.patchValue({\n              glacier_restore_tier_type: glacierResponse.glacier_restore_tier_type,\n              glacier_restore_days: glacierResponse.glacier_restore_days\n            });\n          }\n        });\n    }\n    this.storageClassForm.get('storageClassType').valueChanges.subscribe((value) => {\n      this.updateValidatorsBasedOnStorageClass(value);\n    });\n    this.storageClassForm.get('allow_read_through').valueChanges.subscribe((value) => {\n      this.onAllowReadThroughChange(value);\n    });\n  }\n\n  private updateValidatorsBasedOnStorageClass(value: string) {\n    GLACIER_REQUIRED_FIELDS.forEach((field) => {\n      const control = this.storageClassForm.get(field);\n\n      if (\n        (value === TIER_TYPE.CLOUD_TIER && CLOUD_TIER_REQUIRED_FIELDS.includes(field)) ||\n        (value === TIER_TYPE.GLACIER && GLACIER_REQUIRED_FIELDS.includes(field))\n      ) {\n        control.setValidators([Validators.required]);\n      } else {\n        control.clearValidators();\n      }\n      control.updateValueAndValidity();\n    });\n\n    if (this.editing) {\n      const defaultValues = {\n        allow_read_through: false,\n        read_through_restore_days: STORAGE_CLASS_CONSTANTS.DEFAULT_READTHROUGH_RESTORE_DAYS,\n        restore_storage_class: STORAGE_CLASS_CONSTANTS.DEFAULT_STORAGE_CLASS,\n        multipart_min_part_size: STORAGE_CLASS_CONSTANTS.DEFAULT_MULTIPART_MIN_PART_SIZE,\n        multipart_sync_threshold: STORAGE_CLASS_CONSTANTS.DEFAULT_MULTIPART_SYNC_THRESHOLD\n      };\n      Object.keys(defaultValues).forEach((key) => {\n        this.storageClassForm.get(key).setValue(defaultValues[key]);\n      });\n    }\n  }\n\n  storageClassTypeText() {\n    this.storageClassForm?.get('storageClassType')?.valueChanges.subscribe((value) => {\n      if (value === TIER_TYPE.LOCAL) {\n        this.helpTextLabels.storageClassText = LOCAL_STORAGE_CLASS_TEXT;\n      } else if (value === TIER_TYPE.CLOUD_TIER) {\n        this.helpTextLabels.storageClassText = CLOUDS3_STORAGE_CLASS_TEXT;\n      } else if (value === TIER_TYPE.GLACIER) {\n        this.helpTextLabels.storageClassText = GLACIER_STORAGE_CLASS_TEXT;\n      }\n    });\n  }\n\n  updateTierTypeHelpText() {\n    this.storageClassForm?.get('glacier_restore_tier_type')?.valueChanges.subscribe((value) => {\n      if (value === STORAGE_CLASS_CONSTANTS.DEFAULT_STORAGE_CLASS) {\n        this.helpTextLabels.tiertypeText = STANDARD_TIER_TYPE_TEXT;\n      } else {\n        this.helpTextLabels.tiertypeText = EXPEDITED_TIER_TYPE_TEXT;\n      }\n    });\n  }\n\n  createForm() {\n    const self = this;\n\n    const lockDaysValidator = CdValidators.custom('lockDays', () => {\n      if (!self.storageClassForm || !self.storageClassForm.getRawValue()) {\n        return false;\n      }\n\n      const lockDays = Number(self.storageClassForm.getValue('read_through_restore_days'));\n      return !Number.isInteger(lockDays) || lockDays === 0;\n    });\n    this.storageClassForm = this.formBuilder.group({\n      storage_class: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      zonegroup: new FormControl(this.selectedZoneGroup, {\n        validators: [Validators.required]\n      }),\n      region: new FormControl('', [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.CLOUD_TIER }, [Validators.required])\n      ]),\n      placement_target: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      target_endpoint: new FormControl(null, {\n        validators: [CdValidators.url, Validators.required]\n      }),\n      access_key: new FormControl(null, [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.CLOUD_TIER }, [Validators.required])\n      ]),\n      secret_key: new FormControl(null, [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.CLOUD_TIER }, [Validators.required])\n      ]),\n      target_path: new FormControl('', [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.CLOUD_TIER }, [Validators.required])\n      ]),\n      retain_head_object: new FormControl(true),\n      glacier_restore_tier_type: new FormControl(STORAGE_CLASS_CONSTANTS.DEFAULT_STORAGE_CLASS, [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.GLACIER }, [Validators.required])\n      ]),\n      glacier_restore_days: new FormControl(STORAGE_CLASS_CONSTANTS.DEFAULT_GLACIER_RESTORE_DAYS, [\n        CdValidators.composeIf({ storageClassType: TIER_TYPE.GLACIER || TIER_TYPE.CLOUD_TIER }, [\n          CdValidators.number(false),\n          lockDaysValidator\n        ])\n      ]),\n      restore_storage_class: new FormControl(STORAGE_CLASS_CONSTANTS.DEFAULT_STORAGE_CLASS),\n      read_through_restore_days: new FormControl(\n        {\n          value: STORAGE_CLASS_CONSTANTS.DEFAULT_READTHROUGH_RESTORE_DAYS,\n          disabled: true\n        },\n        CdValidators.composeIf(\n          (form: AbstractControl) => {\n            const type = form.get('storageClassType')?.value;\n            return type === TIER_TYPE.GLACIER || type === TIER_TYPE.CLOUD_TIER;\n          },\n          [CdValidators.number(false), lockDaysValidator]\n        )\n      ),\n      multipart_sync_threshold: new FormControl(\n        STORAGE_CLASS_CONSTANTS.DEFAULT_MULTIPART_SYNC_THRESHOLD\n      ),\n      multipart_min_part_size: new FormControl(\n        STORAGE_CLASS_CONSTANTS.DEFAULT_MULTIPART_MIN_PART_SIZE\n      ),\n      allow_read_through: new FormControl(false),\n      storageClassType: new FormControl(TIER_TYPE.LOCAL, Validators.required)\n    });\n  }\n\n  loadZoneGroup(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.rgwZoneGroupService.getAllZonegroupsInfo().subscribe(\n        (data: ZoneGroupDetails) => {\n          this.zoneGroupDetails = data;\n          this.zonegroupNames = [];\n          this.placementTargets = [];\n          if (data.zonegroups && data.zonegroups.length > 0) {\n            this.zonegroupNames = data.zonegroups.map((zoneGroup: ZoneGroup) => {\n              return {\n                id: zoneGroup.id,\n                name: zoneGroup.name\n              };\n            });\n          }\n          this.defaultZonegroup = this.zonegroupNames.find(\n            (zonegroups: ZoneGroup) => zonegroups.id === data.default_zonegroup\n          );\n          this.storageClassForm.get('zonegroup').setValue(this.defaultZonegroup.name);\n          this.onZonegroupChange();\n          resolve();\n        },\n        (error) => reject(error)\n      );\n    });\n  }\n\n  onZonegroupChange() {\n    const zoneGroupControl = this.storageClassForm.get('zonegroup').value;\n    const selectedZoneGroup = this.zoneGroupDetails.zonegroups.find(\n      (zonegroup) => zonegroup.name === zoneGroupControl\n    );\n    const defaultPlacementTarget = selectedZoneGroup.placement_targets.find(\n      (target: Target) => target.name === DEFAULT_PLACEMENT\n    );\n    if (selectedZoneGroup) {\n      const placementTargetNames = selectedZoneGroup.placement_targets.map(\n        (target: Target) => target.name\n      );\n      this.placementTargets = placementTargetNames;\n    }\n    if (defaultPlacementTarget && !this.editing) {\n      this.storageClassForm.get('placement_target').setValue(defaultPlacementTarget.name);\n    } else {\n      this.storageClassForm\n        .get('placement_target')\n        .setValue(this.storageClassInfo.placement_target);\n    }\n  }\n\n  submitAction() {\n    const component = this;\n    const requestModel = this.buildRequest();\n    const storageclassName = this.storageClassForm.get('storage_class').value;\n    if (this.editing) {\n      this.rgwStorageService.editStorageClass(requestModel).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Updated Storage Class '${storageclassName}'`\n          );\n          this.goToListView();\n        },\n        () => {\n          component.storageClassForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    } else {\n      this.rgwStorageService.createStorageClass(requestModel).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Created Storage Class '${storageclassName}'`\n          );\n          this.goToListView();\n        },\n        () => {\n          component.storageClassForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    }\n  }\n\n  goToListView() {\n    this.router.navigate([`rgw/tiering`]);\n  }\n\n  getTierTargetByStorageClass(placementTargetInfo: PlacementTarget, storageClass: string) {\n    const tierTarget = placementTargetInfo?.tier_targets?.find(\n      (target: TierTarget) => target.val.storage_class === storageClass\n    );\n    return tierTarget;\n  }\n\n  onAllowReadThroughChange(checked: boolean): void {\n    this.allowReadThrough = checked;\n    const readThroughDaysControl = this.storageClassForm.get('read_through_restore_days');\n    if (this.allowReadThrough) {\n      this.storageClassForm.get('retain_head_object')?.setValue(true);\n      this.storageClassForm.get('retain_head_object')?.disable();\n      readThroughDaysControl?.enable();\n    } else {\n      this.storageClassForm.get('retain_head_object')?.enable();\n      readThroughDaysControl?.disable();\n    }\n  }\n\n  isTierMatch(...types: string[]): boolean {\n    const tierType = this.storageClassForm.getValue('storageClassType');\n    return types.includes(tierType);\n  }\n\n  buildRequest() {\n    if (this.storageClassForm.errors) return null;\n\n    const rawFormValue = _.cloneDeep(this.storageClassForm.value);\n    const zoneGroup = this.storageClassForm.get('zonegroup').value;\n    const storageClass = this.storageClassForm.get('storage_class').value;\n    const placementId = this.storageClassForm.get('placement_target').value;\n    const storageClassType = this.storageClassForm.get('storageClassType').value;\n    const retain_head_object = this.storageClassForm.get('retain_head_object').value;\n    const multipart_min_part_size = this.formatter.toBytes(\n      this.storageClassForm.get('multipart_min_part_size').value\n    );\n    const multipart_sync_threshold = this.formatter.toBytes(\n      this.storageClassForm.get('multipart_sync_threshold').value\n    );\n    return this.buildPlacementTargets(\n      storageClassType,\n      zoneGroup,\n      placementId,\n      storageClass,\n      retain_head_object,\n      rawFormValue,\n      multipart_sync_threshold,\n      multipart_min_part_size\n    );\n  }\n\n  private buildPlacementTargets(\n    storageClassType: string,\n    zoneGroup: string,\n    placementId: string,\n    storageClass: string,\n    retain_head_object: boolean,\n    rawFormValue: any,\n    multipart_sync_threshold: number,\n    multipart_min_part_size: number\n  ): RequestModel {\n    const baseTarget = {\n      placement_id: placementId,\n      storage_class: storageClass\n    };\n\n    if (storageClassType === TIER_TYPE.LOCAL) {\n      return {\n        zone_group: zoneGroup,\n        placement_targets: [baseTarget]\n      };\n    }\n\n    const tierConfig = {\n      endpoint: rawFormValue.target_endpoint,\n      access_key: rawFormValue.access_key,\n      secret: rawFormValue.secret_key,\n      target_path: rawFormValue.target_path,\n      retain_head_object,\n      allow_read_through: rawFormValue.allow_read_through,\n      region: rawFormValue.region,\n      multipart_sync_threshold: multipart_sync_threshold,\n      multipart_min_part_size: multipart_min_part_size,\n      restore_storage_class: rawFormValue.restore_storage_class,\n      ...(rawFormValue.allow_read_through\n        ? { read_through_restore_days: rawFormValue.read_through_restore_days }\n        : {})\n    };\n\n    if (storageClassType === TIER_TYPE.CLOUD_TIER) {\n      return {\n        zone_group: zoneGroup,\n        placement_targets: [\n          {\n            ...baseTarget,\n            tier_type: TIER_TYPE.CLOUD_TIER,\n            tier_config: {\n              ...tierConfig\n            }\n          }\n        ]\n      };\n    }\n\n    if (storageClassType === TIER_TYPE.GLACIER) {\n      return {\n        zone_group: zoneGroup,\n        placement_targets: [\n          {\n            ...baseTarget,\n            tier_type: TIER_TYPE.GLACIER,\n            tier_config: {\n              ...tierConfig,\n              glacier_restore_days: rawFormValue.glacier_restore_days,\n              glacier_restore_tier_type: rawFormValue.glacier_restore_tier_type\n            }\n          }\n        ]\n      };\n    }\n    return {\n      zone_group: zoneGroup,\n      placement_targets: [baseTarget]\n    };\n  }\n}\n","<ng-container *ngIf=\"!!selection\">\n  <cds-tabs type=\"contained\"\n            theme=\"light\">\n    <cds-tab heading=\"Details\"\n             i18n-heading>\n      <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n             data-testid=\"rgw-topic-details\">\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold\">Push endpoint arguments</td>\n            <td>{{ selection?.dest?.push_endpoint_args }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Push endpoint topic</td>\n            <td class=\"w-75\">{{ selection?.dest?.push_endpoint_topic}}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Push endpoint</td>\n            <td class=\"w-75\">{{ selection?.dest?.push_endpoint }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Stored secret</td>\n            <td class=\"w-75\">{{ selection?.dest?.stored_secret}}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Persistent</td>\n            <td>{{ selection?.dest?.persistent }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Persistent queue</td>\n            <td>{{ selection?.dest?.persistent_queue }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Time to live</td>\n            <td>{{ selection?.dest?.time_to_live }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Max retries</td>\n            <td>{{ selection?.dest?.max_retries }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Retry sleep duration</td>\n            <td>{{ selection?.dest?.retry_sleep_duration }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Opaque data</td>\n            <td>{{ selection?.opaqueData }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </cds-tab>\n    <cds-tab heading=\"Policies\"\n             i18n-heading>\n      <div class=\"table-scroller\">\n        <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n          <tbody>\n            <tr>\n              <td i18n\n                  class=\"bold w-25 \">Policy</td>\n              <td><pre>{{ policy | json  }}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </cds-tab>\n    <cds-tab heading=\"Subscribed buckets\"\n             i18n-heading>\n      <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold w-25\">Subscribed buckets</td>\n            <td><pre>{{ selection.subscribed_buckets | json}}</pre></td>\n          </tr>\n        </tbody>\n      </table>\n    </cds-tab>\n  </cds-tabs>\n</ng-container>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { Topic } from '~/app/shared/models/topic.model';\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'cd-rgw-topic-details',\n  templateUrl: './rgw-topic-details.component.html',\n  styleUrls: ['./rgw-topic-details.component.scss']\n})\nexport class RgwTopicDetailsComponent implements OnChanges {\n  @Input()\n  selection: Topic;\n  policy: string | object = '{}';\n  constructor() {}\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['selection'] && this.selection) {\n      if (_.isString(this.selection.policy)) {\n        try {\n          this.policy = JSON.parse(this.selection.policy);\n        } catch (e) {\n          this.policy = '{}';\n        }\n      } else {\n        this.policy = this.selection.policy || {};\n      }\n    }\n  }\n}\n","  <ng-container>\n  <cd-table #table\n            [autoReload]=\"false\"\n            [data]=\"topics$ | async\"\n            [columns]=\"columns\"\n            columnMode=\"flex\"\n            selectionType=\"single\"\n            [hasDetails]=\"true\"\n            id=\"key\"\n            (setExpandedRow)=\"setExpandedRow($event)\"\n            (updateSelection)=\"updateSelection($event)\"\n            (fetchData)=\"fetchData()\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-rgw-topic-details *cdTableDetail\n                        [selection]=\"expandedRow\"></cd-rgw-topic-details>\n  </cd-table>\n  </ng-container>\n","import { Component, NgZone, OnInit, ViewChild } from '@angular/core';\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { Permission } from '~/app/shared/models/permissions';\n\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { RgwTopicService } from '~/app/shared/api/rgw-topic.service';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { Topic } from '~/app/shared/models/topic.model';\nimport { BehaviorSubject, Observable, of, Subscriber } from 'rxjs';\nimport { catchError, shareReplay, switchMap } from 'rxjs/operators';\n\nconst BASE_URL = 'rgw/topic';\n@Component({\n  selector: 'cd-rgw-topic-list',\n  templateUrl: './rgw-topic-list.component.html',\n  styleUrls: ['./rgw-topic-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RgwTopicListComponent extends ListWithDetails implements OnInit {\n  @ViewChild('table', { static: true })\n  table: TableComponent;\n  columns: CdTableColumn[];\n  permission: Permission;\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n  errorMessage: string;\n  selection: CdTableSelection = new CdTableSelection();\n  topicsSubject = new BehaviorSubject<Topic[]>([]);\n  topics$ = this.topicsSubject.asObservable();\n  name: string;\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private rgwTopicService: RgwTopicService,\n    private modalService: ModalCdsService,\n    private urlBuilder: URLBuilderService,\n    private taskWrapper: TaskWrapperService,\n    protected ngZone: NgZone\n  ) {\n    super(ngZone);\n    this.permission = this.authStorageService.getPermissions().rgw;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Owner`,\n        prop: 'owner',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Amazon resource name`,\n        prop: 'arn',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Push endpoint`,\n        prop: 'dest.push_endpoint',\n        flexGrow: 2\n      }\n    ];\n\n    const getBucketUri = () =>\n      this.selection.first() && `${encodeURIComponent(this.selection.first().key)}`;\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      name: this.actionLabels.CREATE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => this.urlBuilder.getEdit(getBucketUri()),\n      name: this.actionLabels.EDIT\n    };\n\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteAction(),\n      disable: () => !this.selection.hasSelection,\n      name: this.actionLabels.DELETE,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n    };\n    this.tableActions = [addAction, editAction, deleteAction];\n    this.setTableRefreshTimeout();\n    this.topics$ = this.topicsSubject.pipe(\n      switchMap(() =>\n        this.rgwTopicService.listTopic().pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n  }\n  fetchData() {\n    this.topicsSubject.next([]);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    const key = this.selection.first().key;\n    const name = this.selection.first().name;\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Topic`,\n      itemNames: [name],\n      submitActionObservable: () => {\n        return new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rgw/topic/delete', {\n                name: [name]\n              }),\n              call: this.rgwTopicService.delete(key)\n            })\n            .subscribe({\n              error: (error: any) => {\n                observer.error(error);\n              },\n              complete: () => {\n                observer.complete();\n                this.table.refreshBtn();\n              }\n            });\n        });\n      }\n    });\n  }\n}\n","export interface Destination {\n  push_endpoint: string;\n  push_endpoint_args: string;\n  push_endpoint_topic: string;\n  stored_secret: boolean;\n  persistent: boolean;\n  persistent_queue: string;\n  time_to_live: number;\n  max_retries: number;\n  retry_sleep_duration: number;\n}\n\nexport interface Topic {\n  owner: string;\n  name: string;\n  arn: string;\n  dest: Destination;\n  opaqueData: string;\n  policy: string | {};\n  key: string;\n  subscribed_buckets: any[];\n}\n\nexport interface TopicRequest {\n  owner: string;\n  name: string;\n  push_endpoint: string;\n  opaque_data: string;\n  policy: {} | string;\n  persistent?: string;\n  time_to_live?: string;\n  max_retries?: string;\n  retry_sleep_duration?: string;\n  verify_ssl?: boolean;\n  cloud_events?: string;\n  ca_location?: string;\n  amqp_exchange?: string;\n  ack_level?: string;\n  use_ssl?: boolean;\n  kafka_brokers?: string;\n  mechanism?: string;\n}\n\nexport const KAFKA_MECHANISM = {\n  PLAIN: 'PLAIN',\n  SCRAM256: 'SCRAM-SHA-256',\n  SCRAM512: 'SCRAM-SHA-512'\n};\nexport const END_POINT_TYPE = {\n  HTTP: 'HTTP',\n  AMQP: 'AMQP',\n  Kafka: 'KAFKA'\n};\nexport const AMQP_ACK_LEVEL = {\n  none: 'none',\n  broker: 'broker',\n  routable: 'routable'\n};\nexport const KAFKA_ACK_LEVEL = {\n  none: 'none',\n  broker: 'broker'\n};\nexport enum URLPort {\n  HTTP = '80',\n  HTTPS = '443',\n  AMQP = '5672',\n  AMQPS = '5671',\n  KAFKA = '9092',\n  KAFKA_SSL = '9093'\n}\nexport enum HostURLProtocol {\n  http = 'http',\n  https = 'https',\n  amqp = 'amqp',\n  amqps = 'amqps',\n  kafka = 'kafka'\n}\nexport enum Endpoint {\n  HTTP = 'HTTP',\n  AMQP = 'AMQP',\n  AMQPS = 'AMQPS',\n  KAFKA = 'KAFKA'\n}\n\nexport enum UrlProtocol {\n  HTTP = 'http:',\n  HTTPS = 'https:',\n  AMQP = 'amqp:',\n  AMQPS = 'amqps:',\n  KAFKA = 'kafka'\n}\n\nexport const URL_FORMAT_PLACEHOLDERS = {\n  http: 'http[s]://<fqdn>[:<port]...',\n  amqp: 'amqp[s]://[<user>:<password>@]<fqdn>[:<port>][/<vhost>]...',\n  kafka: 'kafka://[<user>:<password>@]<fqdn>[:<port>]...'\n};\n","<div cdsCol\n     *cdFormLoading=\"loading\"\n     [columnNumbers]=\"{ md: 4 }\">\n  <form name=\"topicForm\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"topicForm\"\n        novalidate>\n    <div class=\"form-header\">\n      {{ action | titlecase }} {{ resource | upperFirst }}\n      <cd-help-text>\n        <span i18n>\n            Configure the push endpoint parameters to send notifications. On successful creation, you'll receive the topic's unique Amazon Resource Name\n        </span>\n      </cd-help-text>\n    </div>\n\n    <div class=\"form-item form-item-append\"\n         cdsRow>\n      <!-- Topic Type-->\n      <div cdsCol>\n        <cds-select formControlName=\"endpointType\"\n                    label=\"Type\"\n                    i18n-label\n                    cdRequiredField=\"Type\"\n                    id=\"endpointType\"\n                    (change)=\"onEndpointTypeChange();\"\n                    [invalid]=\"topicForm.controls.endpointType.invalid && topicForm.controls.endpointType.dirty\"\n                    [invalidText]=\"topicTypeError\"\n                    helperText=\"This user will manage and configure the topic’s settings.\"\n                    i18n-helperText>\n          <option i18n\n                  *ngIf=\"endpointType === null\"\n                  value=\"null\">Loading... </option>\n          <option i18n\n                  *ngIf=\"endpointType !== null\"\n                  value=\"\">-- Select a Topic type --</option>\n          <option *ngFor=\"let data of endpointType\"\n                  i18n>{{ data | upperFirst }} </option>\n        </cds-select>\n        <ng-template #topicTypeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"topicForm.showError('endpointType', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- owner -->\n      <div cdsCol>\n        <cds-select\n          formControlName=\"owner\"\n          label=\"User\"\n          i18n-label\n          cdRequiredField=\"Owner\"\n          [invalid]=\"topicForm.controls.owner.invalid && topicForm.controls.owner.dirty\"\n          id=\"owner\"\n          helperText=\"This owner will define and control the topic’s settings\"\n          [invalidText]=\"ownerError\"\n          i18n-helperText>\n          <option i18n\n                  *ngIf=\"owners === null\"\n                  value=\"null\">Loading... </option>\n          <option i18n\n                  *ngIf=\"owners !== null\"\n                  value=\"\">-- Select a user --</option>\n          <option *ngFor=\"let data of owners\"\n                  i18n\n                  [value]=\"data\">{{ data }}</option>\n        </cds-select>\n        <ng-template #ownerError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"topicForm.showError('owner', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"selectedOption\">\n      <div class=\"form-item form-item-append\"\n           cdsRow>\n\n        <!-- Topic Name -->\n        <div cdsCol>\n          <cds-text-label\n            labelInputID=\"name\"\n            i18n\n            i18n-helperText\n            cdRequiredField=\"Name\"\n            [invalid]=\"topicForm.controls.name.invalid && topicForm.controls.name.dirty\"\n            [invalidText]=\"nameError\"\n            helperText=\"Enter a Topic name\">Name\n\n          <input cdsText\n                 type=\"text\"\n                 id=\"name\"\n                 autofocus\n                 formControlName=\"name\"\n                 [invalid]=\"topicForm.controls.name.invalid && topicForm.controls.name.dirty\"/>\n          </cds-text-label>\n\n          <ng-template #nameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.showError('name', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.showError('name', formDir, 'notUnique')\"\n                  i18n>The name is already in use. Please choose a different one</span>\n          </ng-template>\n        </div>\n      </div>\n      <div class=\"form-item\"\n           cdsRow>\n        <fieldset>\n          <legend i18n\n                  cdsCol\n                  class=\"cd-header\">\n                Generate push endpoint\n            <cd-help-text> Configure the endpoint URL to receive push notifications</cd-help-text>\n          </legend>\n\n          <!-- Enable SSL -->\n          <div cdsCol\n               [columnNumbers]=\"{sm: 4}\">\n            <cds-checkbox id=\"enable_ssl\"\n                          formControlName=\"enable_ssl\"\n                          (checkedChange)=\"onSecureSSLChange($event)\">\n              <ng-container i18n>SSL</ng-container>\n              <cd-help-text i18n>\n                Enabling SSL ensures that your connection is encrypted and secure. You must have a valid SSL certificate installed on your server.\n              </cd-help-text>\n            </cds-checkbox>\n          </div>\n\n          <!-- Verify ssl -->\n          <div cdsCol\n               *ngIf=\"(selectedOption === hostProtocols.AMQP || selectedOption === hostProtocols.HTTP)\"\n               [columnNumbers]=\"{sm: 4}\">\n\n            <cds-checkbox id=\"verify_ssl\"\n                          formControlName=\"verify_ssl\">\n              <ng-container i18n>Verify SSL</ng-container>\n              <cd-help-text i18n>Ensures that the server's SSL certificate is valid and trusted.</cd-help-text>\n            </cds-checkbox>\n          </div>\n\n          <!-- Cloud Event-->\n          <div cdsCol\n               *ngIf=\"(selectedOption == hostProtocols.HTTP)\"\n               [columnNumbers]=\"{sm: 4}\">\n            <cds-checkbox id=\"cloud_events\"\n                          formControlName=\"cloud_events\">\n              <ng-container i18n>Cloud events</ng-container>\n              <cd-help-text i18n>Captures cloud events as triggers for notifications.</cd-help-text>\n            </cds-checkbox>\n          </div>\n        </fieldset>\n      </div>\n\n      <div cdsRow\n           class=\"form-item form-item-append\">\n\n        <!-- Fqdn-->\n        <div cdsCol>\n          <cds-text-label\n            labelInputID=\"fqdn\"\n            cdRequiredField=\"RGW Gateway Hostname\"\n            [invalid]=\"topicForm.controls.fqdn.invalid && topicForm.controls.fqdn.dirty\"\n            [invalidText]=\"fqdnError\"\n            helperText=\"Enter the FQDN to configure the topic's settings and behavior\"\n            i18n-helperText\n            i18n>\n           RGW Gateway hostname\n          <input cdsText\n                 type=\"text\"\n                 id=\"fqdn\"\n                 placeholder=\"e.g., 127.0.0.1 or localhost\"\n                 formControlName=\"fqdn\"\n                 [invalid]=\"topicForm.controls.fqdn.invalid && topicForm.controls.fqdn.dirty\"\n                 (change)=\"generatePushEndpoint()\"/>\n          </cds-text-label>\n          <ng-template #fqdnError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.showError('fqdn', formDir, 'required')\">This field is required</span>\n          </ng-template>\n        </div>\n\n        <!-- Port-->\n        <div cdsCol>\n          <cds-number\n            id=\"Port\"\n            formControlName=\"port\"\n            cdRequiredField=\"Port\"\n            label=\"Port\"\n            i18n-label\n            [min]=\"1\"\n            [invalid]=\"topicForm.controls.port.invalid && topicForm.controls.port.dirty\"\n            [invalidText]=\"portError\"\n            (change)=\"generatePushEndpoint()\"\n            helperText=\"Enter the port number for the push endpoint\"\n            i18n-helperText\n          ></cds-number>\n          <ng-template #portError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.showError('port', formDir, 'required')\"\n                  i18n>This field is required</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.controls.port.hasError('pattern') && topicForm.controls.port.touched\"\n                  i18n> Port must be a valid integer</span>\n          </ng-template>\n        </div>\n      </div>\n\n      <div cdsRow\n           *ngIf=\"(selectedOption === hostProtocols.AMQP || selectedOption === hostProtocols.KAFKA)\"\n           class=\"form-item form-item-append\">\n\n        <!-- User-->\n        <div cdsCol>\n          <cds-text-label labelInputID=\"User\"\n                          i18n\n                          helperText=\"Enter the user for the push endpoint\"\n                          i18n-helperText>\n            User\n            <input cdsText\n                   type=\"text\"\n                   id=\"user\"\n                   formControlName=\"user\"\n                   (change)=\"generatePushEndpoint()\"/>\n          </cds-text-label>\n        </div>\n\n        <!-- password-->\n        <div cdsCol\n             *ngIf=\"(selectedOption !==hostProtocols.HTTP)\">\n          <cds-password-label labelInputID=\"password\"\n                              [invalid]=\"!topicForm.controls.password.valid && topicForm.controls.password.dirty\"\n                              [invalidText]=\"passwordError\"\n                              i18n\n                              helperText=\"Enter the password for the push endpoint\"\n                              i18n-helperText\n                              >\n            Password\n            <input cdsPassword\n                   type=\"password\"\n                   autocomplete=\"new-password\"\n                   formControlName=\"password\"\n                   (change)=\"generatePushEndpoint()\"/>\n          </cds-password-label>\n          <ng-template #passwordError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('password', formDir, 'required')\"\n                  i18n>This field is required</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('password', formDir, 'passwordPolicy')\">\n              {{ passwordValuation }}\n            </span>\n          </ng-template>\n        </div>\n      </div>\n\n      <!--Vhost-->\n      <div cdsRow\n           class=\"form-item form-item-append\"\n           *ngIf=\"(selectedOption === hostProtocols.AMQP)\">\n        <div cdsCol>\n          <cds-text-label labelInputID=\"Virtual Host(vhost)\"\n                          i18n\n                          helperText=\"Enter the vhost for the push endpoint\"\n                          i18n-helperText>\n            Virtual Host(vhost)\n          <input cdsText\n                 type=\"text\"\n                 id=\"vhost\"\n                 (change)=\"generatePushEndpoint()\"\n                 formControlName=\"vhost\" />\n          </cds-text-label>\n        </div>\n      </div>\n\n      <div cdsRow\n           class=\"form-item form-item-append\">\n\n        <!--push_endpoint -->\n        <div cdsCol>\n          <cds-text-label\n            labelInputID=\"push_endpoint\"\n            i18n\n            cdRequiredField=\"Push endpoint\"\n            [invalid]=\"topicForm.controls.push_endpoint.invalid && topicForm.controls.push_endpoint.dirty\"\n            [invalidText]=\"endpointError\"\n            helperText=\"Specify the endpoint URL for receiving push notifications\"\n            i18n-helperText>\n            Push endpoint\n            <input\n              cdsText\n              type=\"text\"\n              [placeholder]=\"pushEndpointPlaceholder\"\n              i18n-placeholder\n              id=\"push_endpoint\"\n              formControlName=\"push_endpoint\"\n              [invalid]=\"topicForm.controls.push_endpoint.invalid && topicForm.controls.push_endpoint.dirty\"\n            />\n          </cds-text-label>\n          <ng-template #endpointError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"topicForm.showError('push_endpoint', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n      </div>\n      <ng-container *ngIf=\"selectedOption === hostProtocols.AMQP || selectedOption === hostProtocols.KAFKA\">\n        <div class=\"form-item\">\n        <fieldset>\n          <legend i18n\n                  class=\"cd-header\">\n            {{ selectedOption === 'AMQP' ? 'AMQP attributes' : 'KAFKA attributes' }}\n            <cd-help-text> {{ attributeHelpText }}</cd-help-text>\n          </legend>\n        </fieldset>\n          <ng-container *ngIf=\"selectedOption === 'KAFKA'\">\n            <div cdsRow\n                 class=\"form-item-append\">\n\n              <div cdsCol\n                   *ngIf=\"selectedOption === 'KAFKA'\">\n                <cds-checkbox id=\"use-ssl\"\n                              formControlName=\"use_ssl\">\n                  <ng-container i18n>Use SSL</ng-container>\n                  <cd-help-text i18n>\n                    Enabling SSL encrypts communication between your Kafka client and broker, ensuring the confidentiality and integrity of your messages\n                  </cd-help-text>\n                </cds-checkbox>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n\n        <!---CA location--->\n          <div cdsCol\n               *ngIf=\"selectedOption === hostProtocols.AMQP || selectedOption === hostProtocols.KAFKA\">\n            <cds-text-label labelInputID=\"Ca-location\"\n                            i18n\n                            helperText=\"The file path of the CA certificate used to verify the server\"\n                            i18n-helperText>\n              CA location\n              <input cdsText\n                     type=\"text\"\n                     id=\"ca_location\"\n                     formControlName=\"ca_location\"/>\n            </cds-text-label>\n          </div>\n          <div cdsCol\n               *ngIf=\"selectedOption === hostProtocols.AMQP\">\n            <cds-text-label labelInputID=\"AMQP exchange\"\n                            i18n\n                            helperText=\"Name of the AMQP exchange to publish messages to; must exist on the broker\"\n                            i18n-helperText>\n              AMQP exchange\n              <input cdsText\n                     type=\"text\"\n                     id=\"amqp_exchange\"\n                     formControlName=\"amqp_exchange\"/>\n            </cds-text-label>\n          </div>\n\n          <!-- mechanism-->\n          <div cdsCol\n               *ngIf=\"selectedOption ===hostProtocols.KAFKA\">\n            <cds-select formControlName=\"mechanism\"\n                        label=\"Mechanism\"\n                        i18n-label\n                        id=\"mechanism\"\n                        helperText=\"Select the authentication mechanism to connect to the Kafka broker\"\n                        i18n-helperText>\n              <option i18n\n                      value=\"\">-- Select a KAFKA mechanism --</option>\n              <option *ngFor=\"let data of kafkaMechanism\"\n                      i18n>{{ data }}</option>\n            </cds-select>\n          </div>\n        </div>\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n\n          <!-- Ack level -->\n          <div cdsCol\n               *ngIf=\"selectedOption === hostProtocols.AMQP || selectedOption === hostProtocols.KAFKA\">\n            <cds-select formControlName=\"ack_level\"\n                        label=\"Ack level\"\n                        i18n-label\n                        id=\"ack_level\"\n                        helperText=\"Select the acknowledgment level to control message delivery guarantees between client and broker\"\n                        i18n-helperText>\n              <option i18n\n                      value=\"\">-- Select the {{ selectedOption }} ack level --</option>\n              <option *ngFor=\"let level of ackLevels\"\n                      [value]=\"level\"\n                      i18n>{{ level }}</option>\n            </cds-select>\n          </div>\n\n          <!-- kafka-brokers-->\n          <div cdsCol\n               *ngIf=\"selectedOption === hostProtocols.KAFKA\">\n            <cds-text-label labelInputID=\"kafka_brokers\"\n                            i18n\n                            helperText=\"Specify the address of the Kafka broker (e.g., host:9092) \"\n                            i18n-helperText>\n              Kafka brokers\n              <input cdsText\n                     type=\"text\"\n                     id=\"kafka_brokers\"\n                     formControlName=\"kafka_brokers\"/>\n            </cds-text-label>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container>\n        <div cdsRow\n             class=\"form-item form-item-append\">\n          <legend i18n\n                  cdsCol\n                  class=\"cd-header\">\n            Additional common attributes\n            <cd-help-text>Configure additional attributes to customize the topic's behavior and settings</cd-help-text>\n          </legend>\n\n          <!-- Persistent-->\n          <div cdsCol\n               [columnNumbers]=\"{sm: 4}\">\n            <cds-checkbox id=\"persistent\"\n                          formControlName=\"persistent\">\n              <ng-container i18n>Persistent</ng-container>\n              <cd-help-text i18n> Select the checkbox to ensure notifications are retried.</cd-help-text>\n            </cds-checkbox>\n          </div>\n        </div>\n        <div cdsRow\n             class=\"form-item form-item-append\">\n\n          <!-- Opaque data-->\n          <div cdsCol>\n            <cds-text-label labelInputID=\"opaque_data\"\n                            i18n\n                            i18n-helperText\n                            helperText=\"A user-defined metadata added to all notifications that are triggered by the topic.\">\n              Opaque data\n              <input cdsText\n                     type=\"text\"\n                     id=\"opaqueData\"\n                     formControlName=\"OpaqueData\"/>\n            </cds-text-label>\n          </div>\n\n          <!-- Time to live-->\n          <div cdsCol>\n            <cds-number id=\"time_to_live\"\n                        formControlName=\"time_to_live\"\n                        label=\"Time to live\"\n                        i18n-label\n                        [min]=\"1\"\n                        helperText=\"Time limit (in seconds) for retaining notifications\"\n                        i18n-helperText>Time to live </cds-number>\n          </div>\n\n          <!-- Max retries-->\n          <div cdsCol>\n            <cds-number id=\"max_retries\"\n                        label=\"Max retries\"\n                        formControlName=\"max_retries\"\n                        i18n-label\n                        [min]=\"1\"\n                        helperText=\"Max retries before expiring notifications\"\n                        i18n-helperText> Max retries </cds-number>\n          </div>\n\n          <!-- Retry sleep duration-->\n          <div cdsCol>\n            <cds-number\n              id=\"retry_sleep_duration\"\n              label=\"Retry sleep duration\"\n              formControlName=\"retry_sleep_duration\"\n              i18n-label\n              [min]=\"1\"\n              helperText=\"Controls the frequency of retrying the notifications\"\n              i18n-helperText\n            >\n              Retry sleep duration\n            </cds-number>\n          </div>\n        </div>\n\n        <div cdsRow\n             class=\"form-item form-item-append\">\n\n          <!-- policy-->\n          <div cdsCol>\n            <cds-textarea-label i18n>\n              <span> {{'Policy'}}</span>\n              <textarea cdsTextArea\n                        #topicPolicyTextArea\n                        row=\"4\"\n                        cols=\"200\"\n                        formControlName=\"policy\"\n                        aria-label=\"textarea\"\n                        (change)=\"textAreaOnChange('topicPolicyTextArea')\"></textarea>\n            </cds-textarea-label>\n            <cd-help-text i18n>JSON formatted document</cd-help-text>\n            <div cdsRow>\n              <div cdsCol>\n                <cds-button-set class=\"mt-1\">\n                  <button cdsButton=\"tertiary\"\n                          id=\"example-generator-button\"\n                          (click)=\"openUrl('https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html?icmpid=docs_amazons3_console')\"\n                          i18n>\n                    Policy examples\n                    <svg cdsIcon=\"launch\"\n                         size=\"16\"\n                         class=\"cds--btn__icon\"></svg>\n                  </button>\n                  <button cdsButton=\"tertiary\"\n                          id=\"example-generator-button\"\n                          (click)=\"openUrl('https://awspolicygen.s3.amazonaws.com/policygen.html')\"\n                          i18n>\n                    Policy generator\n                    <svg cdsIcon=\"launch\"\n                         size=\"16\"\n                         class=\"cds--btn__icon\"></svg>\n                  </button>\n                </cds-button-set>\n              </div>\n              <div cdsCol>\n                <cds-button-set class=\"float-end mt-1\">\n                  <button cdsButton=\"tertiary\"\n                          id=\"clear-bucket-policy\"\n                          (click)=\"clearTextArea('policy', '{}')\"\n                          i18n>\n                    Clear\n                    <svg cdsIcon=\"close\"\n                         size=\"32\"\n                         class=\"cds--btn__icon\"></svg>\n                  </button>\n                </cds-button-set>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n    <div class=\"card-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                            [form]=\"topicForm\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            wrappingClass=\"text-right\"></cd-form-button-panel>\n    </div>\n  </form>\n  </div>\n","import { AfterViewChecked, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport * as _ from 'lodash';\nimport { TextAreaJsonFormatterService } from '~/app/shared/services/text-area-json-formatter.service';\nimport { RgwTopicService } from '~/app/shared/api/rgw-topic.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport {\n  AMQP_ACK_LEVEL,\n  TopicRequest,\n  END_POINT_TYPE,\n  KAFKA_ACK_LEVEL,\n  KAFKA_MECHANISM,\n  Topic,\n  URLPort,\n  HostURLProtocol,\n  URL_FORMAT_PLACEHOLDERS,\n  UrlProtocol,\n  Endpoint\n} from '~/app/shared/models/topic.model';\n\nconst BASE_URL = 'rgw/topic';\n@Component({\n  selector: 'cd-rgw-topic-form',\n  templateUrl: './rgw-topic-form.component.html',\n  styleUrls: ['./rgw-topic-form.component.scss']\n})\nexport class RgwTopicFormComponent extends CdForm implements OnInit, AfterViewChecked {\n  @ViewChild('topicPolicyTextArea')\n  public topicPolicyTextArea: ElementRef<any>;\n  topicForm: CdFormGroup;\n  action: string;\n  resource: string;\n  endpointType: string[] = [];\n  ackLevels: string[] = [];\n  selectedOption: string;\n  port: string;\n  owners: string[];\n  vhost: string;\n  kafkaMechanism: string[] = [];\n  editing: boolean = false;\n  topicId: string;\n  hostProtocols: typeof Endpoint = Endpoint;\n  key: string = '';\n  protocolPlaceholders: Record<string, string> = {\n    HTTP: URL_FORMAT_PLACEHOLDERS.http,\n    AMQP: URL_FORMAT_PLACEHOLDERS.amqp,\n    KAFKA: URL_FORMAT_PLACEHOLDERS.kafka\n  };\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private textAreaJsonFormatterService: TextAreaJsonFormatterService,\n    public rgwTopicService: RgwTopicService,\n    private rgwUserService: RgwUserService,\n    public notificationService: NotificationService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/rgw/topic/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`topic`;\n  }\n\n  ngAfterViewChecked(): void {\n    this.textAreaOnChange(this.topicPolicyTextArea);\n  }\n\n  ngOnInit(): void {\n    this.endpointType = Object.values(END_POINT_TYPE);\n    this.createForm();\n    this.rgwUserService.enumerate().subscribe((data: string[]) => {\n      this.owners = data.sort();\n      if (this.editing) {\n        this.topicId = this.route.snapshot.paramMap.get('name');\n        this.topicId = decodeURIComponent(this.topicId);\n        this.loadTopicData(this.topicId);\n      } else {\n        this.loadingReady();\n      }\n    });\n\n    this.topicForm.get('user')?.valueChanges.subscribe(() => this.setMechanism());\n    this.topicForm.get('password')?.valueChanges.subscribe(() => this.setMechanism());\n    this.topicForm.get('endpointType')?.valueChanges.subscribe((option: string) => {\n      this.ackLevels = Object.values(option === Endpoint.AMQP ? AMQP_ACK_LEVEL : KAFKA_ACK_LEVEL);\n    });\n    this.kafkaMechanism = Object.values(KAFKA_MECHANISM);\n\n    this.setMechanism();\n\n    this.topicForm.get('enable_ssl')!.valueChanges.subscribe((enabled: boolean) => {\n      const verifySSLControl = this.topicForm.get('verify_ssl');\n      const useSSLControl = this.topicForm.get('use_ssl');\n      if (enabled) {\n        verifySSLControl!.enable();\n        useSSLControl!.enable();\n      } else {\n        verifySSLControl!.disable();\n        useSSLControl!.disable();\n        useSSLControl!.setValue(false);\n        verifySSLControl!.setValue(false);\n      }\n    });\n  }\n\n  loadTopicData(topicId: string) {\n    this.rgwTopicService.getTopic(topicId).subscribe((topic: Topic) => {\n      this.topicForm.get('name')?.disable();\n      let url = topic.dest.push_endpoint;\n      let hostname = url.split('://')[0];\n      let endpointType: string;\n      if (hostname === HostURLProtocol.amqp || hostname === HostURLProtocol.amqps) {\n        endpointType = Endpoint.AMQP;\n      } else if (hostname === HostURLProtocol.https || hostname === HostURLProtocol.http) {\n        endpointType = Endpoint.HTTP;\n      } else {\n        endpointType = Endpoint.KAFKA;\n      }\n      this.selectedOption = endpointType;\n      this.getPushUrlQueryValues(topic);\n      this.topicForm.get('owner').disable();\n      this.loadingReady();\n    });\n  }\n\n  get pushEndpointPlaceholder(): string {\n    return (\n      this.protocolPlaceholders[this.topicForm.get('endpointType')?.value] ||\n      $localize`Enter endpoint URL`\n    );\n  }\n\n  createForm() {\n    this.topicForm = new CdFormGroup({\n      owner: new UntypedFormControl('', { validators: [Validators.required] }),\n      name: new UntypedFormControl(\n        '',\n        [Validators.required],\n        CdValidators.unique(this.rgwTopicService.exists, this.rgwTopicService)\n      ),\n      push_endpoint: new UntypedFormControl(\n        { value: '', disabled: true },\n        { validators: [Validators.required] }\n      ),\n      OpaqueData: new UntypedFormControl(''),\n      persistent: new UntypedFormControl('0'),\n      max_retries: new UntypedFormControl('0'),\n      time_to_live: new UntypedFormControl('0'),\n      retry_sleep_duration: new UntypedFormControl('0'),\n      policy: new UntypedFormControl('{}', CdValidators.json()),\n      endpointType: new UntypedFormControl('', { validators: [Validators.required] }),\n      port: new UntypedFormControl('', {\n        validators: [Validators.required, Validators.pattern('^[0-9]+$')]\n      }),\n      verify_ssl: new UntypedFormControl(true),\n      enable_ssl: new UntypedFormControl(true),\n      cloud_events: new UntypedFormControl(),\n      user: new UntypedFormControl(),\n      password: new UntypedFormControl(),\n      vhost: new UntypedFormControl(),\n      ca_location: new UntypedFormControl(),\n      amqp_exchange: new UntypedFormControl(),\n      ack_level: new UntypedFormControl(),\n      use_ssl: new UntypedFormControl(false),\n      kafka_brokers: new UntypedFormControl(),\n      mechanism: new UntypedFormControl(),\n      fqdn: new UntypedFormControl('', { validators: [Validators.required] })\n    });\n  }\n\n  onEndpointTypeChange() {\n    this.selectedOption = this.topicForm.get('endpointType').value;\n    const secureSslChecked = this.topicForm.get('enable_ssl')?.value;\n    this.vhost = '/';\n    this.setDefaultPort(secureSslChecked, this.selectedOption);\n    this.generatePushEndpoint(secureSslChecked);\n    this.reset();\n  }\n\n  setDefaultPort(enableSSL: boolean, selectedValue: string) {\n    this.port = this.getPort(selectedValue as HostURLProtocol, enableSSL).toString();\n    this.topicForm.patchValue({ port: this.port });\n  }\n\n  onSecureSSLChange(event: any) {\n    const ssl = !!event;\n    this.port = this.getPort(this.selectedOption as HostURLProtocol, ssl).toString();\n    this.topicForm.patchValue({ port: this.port });\n    this.generatePushEndpoint(ssl);\n  }\n\n  private getPort(protocol: HostURLProtocol, ssl: boolean): number {\n    const map = {\n      [Endpoint.HTTP]: [URLPort.HTTP, URLPort.HTTPS],\n      [Endpoint.AMQP]: [URLPort.AMQP, URLPort.AMQPS],\n      [Endpoint.KAFKA]: [URLPort.KAFKA, URLPort.KAFKA_SSL]\n    };\n    return ssl ? map[protocol][1] : map[protocol][0];\n  }\n\n  textAreaOnChange(textArea: ElementRef<any>) {\n    this.textAreaJsonFormatterService.format(textArea);\n  }\n  setMechanism(): void {\n    const user = this.topicForm.get('user')?.value;\n    const password = this.topicForm.get('password')?.value;\n    const mechanismControl = this.topicForm.get('mechanism');\n    let defaultMechanism = '';\n    if (user && password) {\n      defaultMechanism = KAFKA_MECHANISM.PLAIN;\n    }\n    mechanismControl?.setValue(defaultMechanism);\n  }\n\n  generatePushEndpoint(secureSsl?: boolean) {\n    if (!this.selectedOption) {\n      return;\n    }\n    let generatedEndpoint = '';\n    const ssl = secureSsl !== undefined ? secureSsl : this.topicForm.get('enable_ssl')?.value;\n    const fqdn = this.topicForm.get('fqdn')?.value || '<fqdn>';\n    const port = this.topicForm.get('port')?.value || '[:port]';\n    switch (this.selectedOption) {\n      case Endpoint.HTTP:\n        generatedEndpoint = `http${ssl ? 's' : ''}://${fqdn}:${port}`;\n        break;\n      case Endpoint.AMQP:\n        generatedEndpoint = this.generateAMQPEndpoint(port, fqdn, ssl ? 's' : '');\n\n        break;\n      case Endpoint.KAFKA:\n        generatedEndpoint = this.generateKafkaEndpoint(fqdn, port);\n        break;\n      default:\n        generatedEndpoint = '';\n    }\n    if (generatedEndpoint) {\n      this.topicForm.patchValue({ push_endpoint: generatedEndpoint });\n    }\n  }\n\n  generateAMQPEndpoint(port: string, fqdn: string, ssl: string): string {\n    let generatedEndpoint;\n    const userAmqp = this.topicForm.get('user')?.value;\n    const passwordAmqp = this.topicForm.get('password')?.value;\n    const vhostAmqp = this.topicForm.get('vhost')?.value || '/';\n    generatedEndpoint = `amqp${ssl ? 's' : ''}://${fqdn}:${port}${vhostAmqp}`;\n    if (userAmqp && passwordAmqp) {\n      generatedEndpoint = `amqp${\n        ssl ? 's' : ''\n      }://${userAmqp}:${passwordAmqp}@${fqdn}:${port}${vhostAmqp}`;\n    }\n    return generatedEndpoint;\n  }\n\n  generateKafkaEndpoint(fqdn: string, port: string): string {\n    let generatedEndpoint;\n    const kafkaProtocol = HostURLProtocol.kafka;\n    const userKafka = this.topicForm.get('user')?.value;\n    const passwordKafka = this.topicForm.get('password')?.value;\n    const kafkaBrokers = this.topicForm.get('kafka_brokers')?.value;\n    generatedEndpoint = `${kafkaProtocol}://${fqdn}:${port}`;\n    if (userKafka && passwordKafka) {\n      generatedEndpoint = `${kafkaProtocol}://${userKafka}:${passwordKafka}@${fqdn}:${port}`;\n    } else if (kafkaBrokers) {\n      generatedEndpoint = `kafka://${kafkaBrokers}`;\n    } else {\n      generatedEndpoint = `kafka://${fqdn}:${port}`;\n    }\n\n    return generatedEndpoint;\n  }\n\n  getTopicPolicy() {\n    return this.topicForm.getValue('policy') || '{}';\n  }\n\n  getPushUrlQueryValues(topic: Topic) {\n    let url = topic.dest.push_endpoint;\n    let pushEndpointUrl = this.convertUrlToObject(url);\n    let pushendpointArg = topic.dest.push_endpoint_args;\n    const pushendpointAddarg = this.extractAdditionalValues(pushendpointArg);\n    const protocol = pushEndpointUrl.protocol?.toLowerCase();\n    switch (protocol) {\n      case UrlProtocol.AMQP:\n      case UrlProtocol.AMQPS:\n        this.selectedOption = Endpoint.AMQP;\n        break;\n\n      case UrlProtocol.HTTP:\n      case UrlProtocol.HTTPS:\n        this.selectedOption = Endpoint.HTTP;\n        break;\n\n      default:\n        this.selectedOption = Endpoint.KAFKA;\n        break;\n    }\n\n    const defaults: typeof this.topicForm.value = _.clone(this.topicForm.value);\n    const keys = Object.keys(this.topicForm.value) as (keyof typeof topic)[];\n    let value: Pick<typeof topic, typeof keys[number]> = _.pick(topic, keys);\n\n    value = _.merge(defaults, value);\n    if (!this.owners.includes(value['owner'])) {\n      this.owners.push(value['owner']);\n      this.topicForm.get('owner').disable();\n    }\n    this.topicForm.patchValue({ endpointType: this.selectedOption });\n    this.topicForm.patchValue({\n      name: topic.name,\n      owner: topic.owner,\n      push_endpoint: topic.dest.push_endpoint,\n      OpaqueData: topic.opaqueData,\n      persistent: topic.dest.persistent,\n      max_retries: topic.dest.max_retries,\n      time_to_live: topic.dest.time_to_live,\n      retry_sleep_duration: topic.dest.retry_sleep_duration,\n      policy: topic.policy,\n      port: pushEndpointUrl.port,\n      fqdn: pushEndpointUrl.hostname,\n      vhost: pushEndpointUrl.pathname,\n      user: pushEndpointUrl.username,\n      password: pushEndpointUrl.password,\n      ca_location: pushendpointAddarg.ca_location,\n      mechanism: pushendpointAddarg.mechanism,\n      enable_ssl:\n        pushEndpointUrl.protocol === UrlProtocol.HTTPS ||\n        pushEndpointUrl.protocol == UrlProtocol.AMQPS ||\n        pushEndpointUrl.protocol === UrlProtocol.KAFKA\n          ? true\n          : false,\n      verify_ssl: pushendpointAddarg.verify_ssl,\n      cloud_events: pushendpointAddarg.cloud_events,\n      amqp_exchange: pushendpointAddarg.amqp_exchange,\n      ack_level: pushendpointAddarg.ack_level,\n      use_ssl: pushendpointAddarg.use_ssl,\n      kafka_brokers: pushendpointAddarg.kafka_brokers\n    });\n  }\n\n  convertUrlToObject(url: string) {\n    const urlObj = new URL(url);\n\n    return {\n      protocol: urlObj.protocol,\n      hostname: urlObj.hostname,\n      pathname: urlObj.pathname,\n      hash: urlObj.hash,\n      port: this.getPortFromUrl(url),\n      username: urlObj.username,\n      password: urlObj.password\n    };\n  }\n\n  getPortFromUrl(url: string): string {\n    const urlObj = new URL(url);\n    let port = urlObj.port;\n    if (!port) {\n      port =\n        urlObj.protocol === UrlProtocol.HTTPS\n          ? URLPort.HTTPS\n          : urlObj.protocol === UrlProtocol.HTTP\n          ? URLPort.HTTP\n          : '';\n    }\n    return port;\n  }\n\n  extractAdditionalValues(str: string): { [key: string]: string } {\n    let obj: { [key: string]: string } = {};\n    let pairs = str.split('&');\n    pairs.forEach((pair) => {\n      let [key, value] = pair.split('=');\n      if (key && value) {\n        obj[key] = value;\n      }\n    });\n    return obj;\n  }\n\n  openUrl(url: string) {\n    window.open(url, '_blank');\n  }\n\n  submitAction() {\n    if (this.topicForm.invalid || this.topicForm.pending) {\n      return this.topicForm.setErrors({ cdSubmitButton: true });\n    }\n    const notificationTitle = this.editing\n      ? $localize`Topic updated successfully`\n      : $localize`Topic created successfully`;\n    const formValue = this.topicForm.getRawValue();\n    const topicPolicy = this.getTopicPolicy();\n    const payload = this.generatePayload(formValue, topicPolicy);\n\n    const action = this.rgwTopicService.create(payload);\n\n    action.subscribe({\n      next: () => {\n        this.notificationService.show(NotificationType.success, notificationTitle);\n        this.goToListView();\n      },\n      error: () => this.topicForm.setErrors({ cdSubmitButton: true })\n    });\n  }\n\n  generatePayload(formValue: any, topicPolicy: any): TopicRequest {\n    const basePayload: TopicRequest = {\n      name: formValue.name,\n      owner: formValue.owner,\n      push_endpoint: formValue.push_endpoint,\n      opaque_data: formValue.OpaqueData,\n      persistent: formValue.persistent,\n      time_to_live: formValue.time_to_live,\n      max_retries: formValue.max_retries,\n      retry_sleep_duration: formValue.retry_sleep_duration,\n      policy: topicPolicy\n    };\n\n    const topicType = formValue.endpointType;\n\n    const additionalFieldsMap: Record<string, Partial<TopicRequest>> = {\n      [Endpoint.KAFKA]: {\n        use_ssl: formValue.use_ssl,\n        ack_level: formValue.ack_level,\n        kafka_brokers: formValue.kafka_brokers,\n        ca_location: formValue.ca_location,\n        mechanism: formValue.mechanism\n      },\n      [Endpoint.AMQP]: {\n        verify_ssl: formValue.verify_ssl,\n        amqp_exchange: formValue.amqp_exchange,\n        ack_level: formValue.ack_level,\n        ca_location: formValue.ca_location\n      },\n      [Endpoint.HTTP]: {\n        verify_ssl: formValue.verify_ssl,\n        cloud_events: formValue.cloud_events\n      }\n    };\n\n    if (additionalFieldsMap[topicType]) {\n      Object.assign(basePayload, additionalFieldsMap[topicType]);\n    }\n\n    return basePayload;\n  }\n\n  get attributeHelpText(): string {\n    return this.selectedOption === this.hostProtocols.AMQP\n      ? $localize`Choose the configuration settings for the AMQP connection`\n      : $localize`Choose the configuration settings for the KAFKA connection`;\n  }\n\n  goToListView() {\n    this.router.navigate([BASE_URL]);\n  }\n\n  clearTextArea(field: string, defaultValue: string = '') {\n    this.topicForm.get(field)?.setValue(defaultValue);\n    this.topicForm.markAsDirty();\n    this.topicForm.updateValueAndValidity();\n  }\n\n  reset() {\n    this.topicForm.patchValue({ enable_ssl: true });\n    this.topicForm.patchValue({ port: this.port });\n    this.topicForm.patchValue({ vhost: this.vhost });\n  }\n}\n","import { CommonModule, TitleCasePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n  NgbNavModule,\n  NgbPopoverModule,\n  NgbProgressbar,\n  NgbTooltipModule,\n  NgbTypeaheadModule\n} from '@ng-bootstrap/ng-bootstrap';\nimport { PipesModule } from '~/app/shared/pipes/pipes.module';\n\nimport { ActionLabels, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CRUDTableComponent } from '~/app/shared/datatable/crud-table/crud-table.component';\nimport { FeatureTogglesGuardService } from '~/app/shared/services/feature-toggles-guard.service';\nimport { ModuleStatusGuardService } from '~/app/shared/services/module-status-guard.service';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { PerformanceCounterModule } from '../performance-counter/performance-counter.module';\nimport { RgwBucketDetailsComponent } from './rgw-bucket-details/rgw-bucket-details.component';\nimport { RgwBucketFormComponent } from './rgw-bucket-form/rgw-bucket-form.component';\nimport { RgwBucketListComponent } from './rgw-bucket-list/rgw-bucket-list.component';\nimport { RgwConfigModalComponent } from './rgw-config-modal/rgw-config-modal.component';\nimport { RgwDaemonDetailsComponent } from './rgw-daemon-details/rgw-daemon-details.component';\nimport { RgwDaemonListComponent } from './rgw-daemon-list/rgw-daemon-list.component';\nimport { RgwUserCapabilityModalComponent } from './rgw-user-capability-modal/rgw-user-capability-modal.component';\nimport { RgwUserDetailsComponent } from './rgw-user-details/rgw-user-details.component';\nimport { RgwUserFormComponent } from './rgw-user-form/rgw-user-form.component';\nimport { RgwUserListComponent } from './rgw-user-list/rgw-user-list.component';\nimport { RgwUserS3KeyModalComponent } from './rgw-user-s3-key-modal/rgw-user-s3-key-modal.component';\nimport { RgwUserSubuserModalComponent } from './rgw-user-subuser-modal/rgw-user-subuser-modal.component';\nimport { RgwUserSwiftKeyModalComponent } from './rgw-user-swift-key-modal/rgw-user-swift-key-modal.component';\nimport { RgwUserTabsComponent } from './rgw-user-tabs/rgw-user-tabs.component';\nimport { RgwMultisiteDetailsComponent } from './rgw-multisite-details/rgw-multisite-details.component';\nimport { DataTableModule } from '~/app/shared/datatable/datatable.module';\nimport { RgwMultisiteRealmFormComponent } from './rgw-multisite-realm-form/rgw-multisite-realm-form.component';\nimport { RgwMultisiteZonegroupFormComponent } from './rgw-multisite-zonegroup-form/rgw-multisite-zonegroup-form.component';\nimport { RgwMultisiteZoneFormComponent } from './rgw-multisite-zone-form/rgw-multisite-zone-form.component';\nimport { CrudFormComponent } from '~/app/shared/forms/crud-form/crud-form.component';\nimport { RgwMultisiteZoneDeletionFormComponent } from './models/rgw-multisite-zone-deletion-form/rgw-multisite-zone-deletion-form.component';\nimport { RgwMultisiteZonegroupDeletionFormComponent } from './models/rgw-multisite-zonegroup-deletion-form/rgw-multisite-zonegroup-deletion-form.component';\nimport { RgwSystemUserComponent } from './rgw-system-user/rgw-system-user.component';\nimport { RgwMultisiteMigrateComponent } from './rgw-multisite-migrate/rgw-multisite-migrate.component';\nimport { RgwMultisiteImportComponent } from './rgw-multisite-import/rgw-multisite-import.component';\nimport { RgwMultisiteExportComponent } from './rgw-multisite-export/rgw-multisite-export.component';\nimport { CreateRgwServiceEntitiesComponent } from './create-rgw-service-entities/create-rgw-service-entities.component';\nimport { RgwOverviewDashboardComponent } from './rgw-overview-dashboard/rgw-overview-dashboard.component';\nimport { DashboardV3Module } from '../dashboard-v3/dashboard-v3.module';\nimport { RgwSyncPrimaryZoneComponent } from './rgw-sync-primary-zone/rgw-sync-primary-zone.component';\nimport { RgwSyncMetadataInfoComponent } from './rgw-sync-metadata-info/rgw-sync-metadata-info.component';\nimport { RgwSyncDataInfoComponent } from './rgw-sync-data-info/rgw-sync-data-info.component';\nimport { BucketTagModalComponent } from './bucket-tag-modal/bucket-tag-modal.component';\nimport { NfsFormComponent } from '../nfs/nfs-form/nfs-form.component';\nimport { RgwMultisiteSyncPolicyComponent } from './rgw-multisite-sync-policy/rgw-multisite-sync-policy.component';\nimport { RgwMultisiteSyncPolicyFormComponent } from './rgw-multisite-sync-policy-form/rgw-multisite-sync-policy-form.component';\nimport { RgwConfigurationPageComponent } from './rgw-configuration-page/rgw-configuration-page.component';\nimport { RgwConfigDetailsComponent } from './rgw-config-details/rgw-config-details.component';\nimport { RgwMultisiteWizardComponent } from './rgw-multisite-wizard/rgw-multisite-wizard.component';\nimport { RgwMultisiteSyncPolicyDetailsComponent } from './rgw-multisite-sync-policy-details/rgw-multisite-sync-policy-details.component';\nimport { RgwMultisiteSyncFlowModalComponent } from './rgw-multisite-sync-flow-modal/rgw-multisite-sync-flow-modal.component';\nimport { RgwMultisiteSyncPipeModalComponent } from './rgw-multisite-sync-pipe-modal/rgw-multisite-sync-pipe-modal.component';\nimport { RgwMultisiteTabsComponent } from './rgw-multisite-tabs/rgw-multisite-tabs.component';\nimport { RgwStorageClassListComponent } from './rgw-storage-class-list/rgw-storage-class-list.component';\n\nimport {\n  ButtonModule,\n  GridModule,\n  IconModule,\n  LoadingModule,\n  ModalModule,\n  ProgressIndicatorModule,\n  CodeSnippetModule,\n  InputModule,\n  CheckboxModule,\n  TreeviewModule,\n  RadioModule,\n  SelectModule,\n  NumberModule,\n  TabsModule,\n  AccordionModule,\n  TagModule,\n  TooltipModule,\n  ComboBoxModule,\n  ToggletipModule,\n  IconService,\n  LayoutModule\n} from 'carbon-components-angular';\nimport EditIcon from '@carbon/icons/es/edit/16';\nimport ScalesIcon from '@carbon/icons/es/scales/20';\nimport UserIcon from '@carbon/icons/es/user/16';\nimport CubeIcon from '@carbon/icons/es/cube/20';\nimport ShareIcon from '@carbon/icons/es/share/16';\nimport ViewIcon from '@carbon/icons/es/view/16';\nimport PasswordIcon from '@carbon/icons/es/password/16';\nimport ArrowDownIcon from '@carbon/icons/es/arrow--down/16';\nimport ProgressBarRoundIcon from '@carbon/icons/es/progress-bar--round/32';\nimport ToolsIcon from '@carbon/icons/es/tools/32';\nimport ParentChild from '@carbon/icons/es/parent-child/20';\nimport UserAccessLocked from '@carbon/icons/es/user--access-locked/16';\n\nimport { CephSharedModule } from '../shared/ceph-shared.module';\nimport { RgwUserAccountsComponent } from './rgw-user-accounts/rgw-user-accounts.component';\nimport { RgwUserAccountsFormComponent } from './rgw-user-accounts-form/rgw-user-accounts-form.component';\nimport { RgwUserAccountsDetailsComponent } from './rgw-user-accounts-details/rgw-user-accounts-details.component';\nimport { RgwStorageClassDetailsComponent } from './rgw-storage-class-details/rgw-storage-class-details.component';\nimport { RgwStorageClassFormComponent } from './rgw-storage-class-form/rgw-storage-class-form.component';\nimport { RgwBucketTieringFormComponent } from './rgw-bucket-tiering-form/rgw-bucket-tiering-form.component';\nimport { RgwBucketLifecycleListComponent } from './rgw-bucket-lifecycle-list/rgw-bucket-lifecycle-list.component';\nimport { RgwRateLimitComponent } from './rgw-rate-limit/rgw-rate-limit.component';\nimport { RgwRateLimitDetailsComponent } from './rgw-rate-limit-details/rgw-rate-limit-details.component';\nimport { NfsClusterComponent } from '../nfs/nfs-cluster/nfs-cluster.component';\nimport { RgwTopicListComponent } from './rgw-topic-list/rgw-topic-list.component';\nimport { RgwTopicDetailsComponent } from './rgw-topic-details/rgw-topic-details.component';\nimport { RgwTopicFormComponent } from './rgw-topic-form/rgw-topic-form.component';\nimport { RgwBucketNotificationListComponent } from './rgw-bucket-notification-list/rgw-bucket-notification-list.component';\nimport { RgwNotificationFormComponent } from './rgw-notification-form/rgw-notification-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CephSharedModule,\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule.withConfig({ callSetDisabledState: 'whenDisabledForLegacyCode' }),\n    PerformanceCounterModule,\n    NgbNavModule,\n    RouterModule,\n    NgbTooltipModule,\n    NgbPopoverModule,\n    PipesModule,\n    TreeviewModule,\n    DataTableModule,\n    DashboardV3Module,\n    NgbTypeaheadModule,\n    ModalModule,\n    GridModule,\n    ProgressIndicatorModule,\n    CodeSnippetModule,\n    ButtonModule,\n    LoadingModule,\n    IconModule,\n    NgbProgressbar,\n    InputModule,\n    AccordionModule,\n    CheckboxModule,\n    NumberModule,\n    TabsModule,\n    TagModule,\n    TooltipModule,\n    ComboBoxModule,\n    ToggletipModule,\n    RadioModule,\n    SelectModule,\n    LayoutModule\n  ],\n  exports: [\n    RgwDaemonDetailsComponent,\n    RgwBucketFormComponent,\n    RgwBucketListComponent,\n    RgwBucketDetailsComponent,\n    RgwUserListComponent,\n    RgwUserDetailsComponent,\n    RgwStorageClassListComponent\n  ],\n  declarations: [\n    RgwRateLimitComponent,\n    RgwDaemonListComponent,\n    RgwDaemonDetailsComponent,\n    RgwBucketFormComponent,\n    RgwBucketListComponent,\n    RgwBucketDetailsComponent,\n    RgwUserListComponent,\n    RgwUserDetailsComponent,\n    RgwBucketFormComponent,\n    RgwUserFormComponent,\n    RgwUserSwiftKeyModalComponent,\n    RgwUserS3KeyModalComponent,\n    RgwUserCapabilityModalComponent,\n    RgwUserSubuserModalComponent,\n    RgwConfigModalComponent,\n    RgwUserTabsComponent,\n    RgwMultisiteDetailsComponent,\n    RgwMultisiteRealmFormComponent,\n    RgwMultisiteZonegroupFormComponent,\n    RgwMultisiteZoneFormComponent,\n    RgwMultisiteZoneDeletionFormComponent,\n    RgwMultisiteZonegroupDeletionFormComponent,\n    RgwSystemUserComponent,\n    RgwMultisiteMigrateComponent,\n    RgwMultisiteImportComponent,\n    RgwMultisiteExportComponent,\n    CreateRgwServiceEntitiesComponent,\n    RgwOverviewDashboardComponent,\n    RgwSyncPrimaryZoneComponent,\n    RgwSyncMetadataInfoComponent,\n    RgwSyncDataInfoComponent,\n    BucketTagModalComponent,\n    RgwMultisiteSyncPolicyComponent,\n    RgwMultisiteSyncPolicyFormComponent,\n    RgwConfigDetailsComponent,\n    RgwConfigurationPageComponent,\n    RgwMultisiteWizardComponent,\n    RgwMultisiteSyncPolicyDetailsComponent,\n    RgwMultisiteSyncFlowModalComponent,\n    RgwMultisiteSyncPipeModalComponent,\n    RgwMultisiteTabsComponent,\n    RgwUserAccountsComponent,\n    RgwUserAccountsFormComponent,\n    RgwUserAccountsDetailsComponent,\n    RgwStorageClassListComponent,\n    RgwStorageClassDetailsComponent,\n    RgwStorageClassFormComponent,\n    RgwBucketTieringFormComponent,\n    RgwBucketLifecycleListComponent,\n    RgwRateLimitDetailsComponent,\n    RgwTopicListComponent,\n    RgwTopicDetailsComponent,\n    RgwTopicFormComponent,\n    RgwBucketNotificationListComponent,\n    RgwNotificationFormComponent\n  ],\n  providers: [TitleCasePipe]\n})\nexport class RgwModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      EditIcon,\n      ScalesIcon,\n      CubeIcon,\n      UserIcon,\n      ShareIcon,\n      ViewIcon,\n      PasswordIcon,\n      ArrowDownIcon,\n      ProgressBarRoundIcon,\n      ToolsIcon,\n      ParentChild,\n      UserAccessLocked\n    ]);\n  }\n}\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'rbd',\n    pathMatch: 'full' // Required for a clean reload on daemon selection.\n  },\n  { path: 'daemon', component: RgwDaemonListComponent, data: { breadcrumbs: 'Gateways' } },\n  {\n    path: 'user',\n    data: { breadcrumbs: 'Users' },\n    children: [\n      { path: '', component: RgwUserListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RgwUserFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:uid`,\n        component: RgwUserFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'accounts',\n    data: { breadcrumbs: 'Accounts' },\n    children: [\n      { path: '', component: RgwUserAccountsComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RgwUserAccountsFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:id`,\n        component: RgwUserAccountsFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'roles',\n    data: {\n      breadcrumbs: 'Roles',\n      resource: 'api.rgw.roles@1.0',\n      tabs: [\n        {\n          name: 'Users',\n          url: '/rgw/user'\n        },\n        {\n          name: 'Accounts',\n          url: '/rgw/accounts'\n        },\n        {\n          name: 'Roles',\n          url: '/rgw/roles'\n        }\n      ]\n    },\n    children: [\n      {\n        path: '',\n        component: CRUDTableComponent\n      },\n      {\n        path: URLVerbs.CREATE,\n        component: CrudFormComponent,\n        data: {\n          breadcrumbs: ActionLabels.CREATE\n        }\n      },\n      {\n        path: URLVerbs.EDIT,\n        component: CrudFormComponent,\n        data: {\n          breadcrumbs: ActionLabels.EDIT\n        }\n      }\n    ]\n  },\n  {\n    path: 'bucket',\n    data: { breadcrumbs: 'Buckets' },\n    children: [\n      { path: '', component: RgwBucketListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RgwBucketFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:bid/:owner`,\n        component: RgwBucketFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'overview',\n    data: { breadcrumbs: 'Overview' },\n    children: [{ path: '', component: RgwOverviewDashboardComponent }]\n  },\n  {\n    path: 'multisite',\n    data: { breadcrumbs: 'Multi-site' },\n    children: [\n      { path: '', redirectTo: 'configuration', pathMatch: 'full' },\n      {\n        path: 'configuration',\n        component: RgwMultisiteDetailsComponent,\n        data: { breadcrumbs: 'Configuration' },\n        children: [\n          {\n            path: 'setup-multisite-replication',\n            component: RgwMultisiteWizardComponent,\n            outlet: 'modal'\n          }\n        ]\n      },\n      {\n        path: 'sync-policy',\n        component: RgwMultisiteSyncPolicyComponent,\n        data: { breadcrumbs: 'Sync-policy' },\n        children: [\n          {\n            path: `${URLVerbs.CREATE}`,\n            component: RgwMultisiteSyncPolicyFormComponent,\n            outlet: 'modal'\n          },\n          {\n            path: `${URLVerbs.EDIT}/:groupName`,\n            component: RgwMultisiteSyncPolicyFormComponent,\n            outlet: 'modal'\n          },\n          {\n            path: `${URLVerbs.EDIT}/:groupName/:bucketName`,\n            component: RgwMultisiteSyncPolicyFormComponent,\n            outlet: 'modal'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    path: 'tiering',\n    data: { breadcrumbs: 'Tiering' },\n    children: [\n      { path: '', component: RgwStorageClassListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RgwStorageClassFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:zonegroup_name/:placement_target/:storage_class`,\n        component: RgwStorageClassFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'nfs',\n    canActivateChild: [FeatureTogglesGuardService, ModuleStatusGuardService],\n    data: {\n      moduleStatusGuardConfig: {\n        uiApiPath: 'nfs-ganesha',\n        redirectTo: 'error',\n        section: 'nfs-ganesha',\n        section_info: 'NFS GANESHA',\n        header: 'NFS-Ganesha is not configured'\n      },\n      breadcrumbs: 'NFS'\n    },\n    children: [\n      { path: '', component: NfsClusterComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: NfsFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:cluster_id/:export_id`,\n        component: NfsFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'configuration',\n    data: { breadcrumbs: 'Configuration' },\n    children: [{ path: '', component: RgwConfigurationPageComponent }]\n  },\n  {\n    path: 'topic',\n    data: { breadcrumbs: 'Topic' },\n    children: [\n      { path: '', component: RgwTopicListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RgwTopicFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:name`,\n        component: RgwTopicFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RgwModule, RouterModule.forChild(routes)]\n})\nexport class RoutedRgwModule {}\n"],"x_google_ignoreList":[109,110,111,112,113,114,115,116,117,118]}