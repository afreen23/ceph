{"version":3,"file":"default-node_modules_ng-block-ui_fesm2020_ng-block-ui_mjs.js","mappings":"yWAIqC,MAAAA,EAAA,mBAAAC,EAAAC,KAAAC,OAAAD,IAAA,SAAAE,EAAAC,EAAAC,GAiV6vB,GAjV7vB,EAAAD,IAyEoEE,2BAAE,WAAFA,mBAAE,GAAFA,4BAwQyrB,EAAAF,EAAA,OAAAG,EAxQzrBD,0BAAE,GAAFA,uDAAE,IAAAC,EAAAC,SAAAD,EAAAE,eAAA,IAwQirB,WAAAC,EAAAN,EAAAC,GAAgB,GAAhB,EAAAD,IAxQnrBE,2BAAE,WAAFA,sBAAE,WAAFA,uBAAE,EAAAH,EAAA,aAAFG,4BAwQmsB,EAAAF,EAAA,OAAAG,EAxQnsBD,kDAAE,GAAFA,uBAAE,OAAAC,EAAAC,SAAAD,EAAAE,eAwQ+mB,WAAAE,EAAAP,EAAAC,GAAA,UAAAO,EAAAR,EAAAC,GAAA,EAAAD,GAxQjnBE,uBAAE,EAAAK,EAAA,yBAAFL,mCAwQ0vB,OA/U71BO,EAAqB,gBAE3B,MAAMC,GAENA,EAAeC,MAAQ,QACvBD,EAAeE,KAAO,OACtBF,EAAeG,OAAS,SACxBH,EAAeI,MAAQ,QACvBJ,EAAeK,aAAe,eAC9BL,EAAeM,YAAc,cAE7B,MAAMC,EACFC,cACIC,KAAKC,gBAAkB,CAAC,EACxBD,KAAKE,iBAAmB,CAAC,EACzBF,KAAKG,eAAiB,IAAIC,gBAAc,GACxCJ,KAAKK,kBAAoBL,KAAKG,eAAeG,eAC7CN,KAAKK,kBAAkBE,UAAUP,KAAKQ,kBAAkBC,KAAKT,MACjE,CACAU,cACI,OAAOV,KAAKC,eAChB,CACAU,eAAeC,EAAW,CAAC,GACvBZ,KAAKC,gBAAkB,IAAKD,KAAKC,mBAAoBW,EACzD,CACAC,SAASC,EAAOxB,GACZ,MAAMyB,EAAU,CACZD,OACAE,UAAU,EACVC,WAAY,EACZC,MAAOlB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeC,MAAOsB,GAChEM,OAAQpB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeG,OAAQoB,GAClEO,KAAMrB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeE,KAAMqB,GAC9DQ,MAAOtB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeI,MAAOmB,GAChES,YAAavB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeK,aAAckB,GAC7EU,YAAaxB,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeM,YAAaiB,IAEhF,OAAAd,KAAKE,iBAAiBY,GAAQd,KAAKE,iBAAiBY,IAASC,EACtDA,CACX,CACAU,UACI,OAAOzB,KAAKK,iBAChB,CACAqB,cAAcC,GACV3B,KAAKmB,SAASnB,KAAKG,eAAgBZ,EAAeI,MAAOgC,EAC7D,CACAnB,mBAAoBoB,SAAQd,SACxB,IAAIE,EAAW,KACf,OAAQY,GACJ,KAAMrC,EAAeC,MACjBwB,GAAW,EACX,MACJ,KAAMzB,EAAeE,KACrB,KAAMF,EAAeI,MACjBqB,GAAW,EAGF,OAAbA,IACAhB,KAAKE,iBAAiBY,GAAME,SAAWA,EAE/C,CACAG,SAASU,EAASD,EAAQd,EAAOxB,GAC7B,OAAQL,IACJ4C,EAAQC,KAAK,CACThB,OACAc,SACA3C,WACH,CAET,EAEJa,EAAuBiC,UAAI,SAAAC,GAAA,WAAAA,GAAwFlC,EAAsB,EACzIA,EAAuBmC,WADkFlD,+BAAE,CAAAmD,MACYpC,EAAsBqC,QAAtBrC,EAAsBiC,YA4G7I,MAAMK,EACFrC,YAAYgB,EAASsB,EAAUC,GAC3BtC,KAAKe,QAAUA,EACff,KAAKqC,SAAWA,EAChBrC,KAAKsC,mBAAqBA,EAC1BtC,KAAKc,KAAOxB,EACZU,KAAKuC,kBAAoB,CACrBC,cAAe,GACfC,aAAc,GACdC,eAAgB,GAChBzB,WAAY,EACZ0B,eAAgB,EAChBC,cAAe,GAEnB5C,KAAK6C,MAAQ,IAAK7C,KAAKuC,kBAC3B,CACAO,WACI9C,KAAKY,SAAWZ,KAAKe,QAAQL,cAC7BV,KAAK+C,oBAAsB/C,KAAKgD,mBAAmBhD,KAAKe,QAAQU,UACpE,CACAwB,kBACI,IACI,IAAKjD,KAAKkD,YACN,OAAO,EAEX,GAAIlD,KAAKkD,uBAAuBC,cAC5BnD,KAAKoD,eAAeC,mBAAmBrD,KAAKkD,iBAE3C,CACD,MAAMI,EAAetD,KAAKqC,SAASkB,wBAAwBvD,KAAKkD,aAChElD,KAAKwD,gBAAkBxD,KAAKoD,eAAeK,gBAAgBH,GAC3DtD,KAAK0D,oBAAoB1D,KAAKf,QAClC,CACJ,OACO0E,GACHC,QAAQD,MAAM,eAAgBA,EAClC,CACJ,CACAE,qBACI7D,KAAK8D,eACT,CACAd,mBAAmBe,GACf,OAAOA,EAASxD,UAAUyD,GAAShE,KAAKiE,kBAAkBD,GAC9D,CACAC,kBAAkBD,GACd,OAAQA,EAAMpC,QACV,KAAKrC,EAAeC,MAChBQ,KAAKkE,QAAQF,GACb,MACJ,KAAKzE,EAAeE,KAChBO,KAAKmE,OAAOH,GACZ,MACJ,KAAKzE,EAAeG,OAChBM,KAAKoE,SAASJ,GACd,MACJ,KAAKzE,EAAeI,MAChBK,KAAKqE,QAAQL,GACb,MACJ,KAAKzE,EAAeK,aAChBI,KAAKsE,aACL,MACJ,KAAK/E,EAAeM,YAChBG,KAAKmE,OAAOH,GACZhE,KAAKuE,cAAcP,EAAMlD,MAGrC,CACAoD,SAAUpD,OAAM7B,YACZ,GAAI6B,IAASd,KAAKc,KAAM,CACpB,MAAM0D,EAAQxE,KAAKyE,YAAczE,KAAKY,SAAS6D,YAAc,EAC7DzE,KAAK6C,MAAMF,gBAAkB,EAC7B,MAAM+B,EAAeC,WAAW,KAC5B3E,KAAK6C,MAAM5B,YAAc,EACzBjB,KAAK4E,UAAU3F,GACfe,KAAK6E,0BAAyB,EAC/BL,GACHxE,KAAK6C,MAAML,cAAcsC,KAAKJ,EAClC,CACJ,CACAP,QAASrD,SACL,GAAIA,IAASd,KAAKc,KAAM,CACpB,MAAMiE,EAAY/E,KAAK6C,MAAMD,cAAgB,EAC7C,GAAI5C,KAAK6C,MAAMF,eAAiBoC,GAAa,EAAG,CAC5C,MAAMP,EAAQxE,KAAKgF,WAAahF,KAAKY,SAASoE,WAAa,EAC3DhF,KAAK6C,MAAMD,cAAgBmC,EAC3B,MAAME,EAAcN,WAAW,KAC3B3E,KAAK6C,MAAM5B,YAAc,EACzBjB,KAAK6E,2BACL7E,KAAK8D,eAAc,EACpBU,GACHxE,KAAK6C,MAAMJ,aAAaqC,KAAKG,EACjC,CACJ,CACJ,CACAb,UAAWtD,OAAM7B,YACb,GAAI6B,IAASd,KAAKc,KAAM,CACpB,MAAM0D,EAAQxE,KAAKyE,YAAczE,KAAKY,SAAS6D,YAAc,EAC7DS,aAAalF,KAAK6C,MAAMH,eAAe,IACvC,MAAMyC,EAAgBR,WAAW,KAC7B3E,KAAKoF,cAAcnG,EAAO,EAC3BuF,GACHxE,KAAK6C,MAAMH,eAAeoC,KAAKK,EACnC,CACJ,CACAd,SAAUvD,SACFA,IAASd,KAAKc,MACdd,KAAKsE,YAEb,CACAc,cAAcnG,GACVe,KAAK4E,UAAU3F,EACnB,CACA2F,UAAU3F,GACNe,KAAKf,QAAUA,GAAWe,KAAKd,gBAAkBc,KAAKY,SAAS3B,QAC/De,KAAK0D,oBAAoB1D,KAAKf,SAC9Be,KAAK8D,eACT,CACAJ,oBAAoB2B,GACZrF,KAAKwD,iBAAmBxD,KAAKwD,2BAA2B8B,iBACxDtF,KAAKwD,gBAAgB+B,SAAStG,QAAUoG,EAEhD,CACAf,aACI,IACOtE,KAAK6C,MAAML,iBACXxC,KAAK6C,MAAMJ,gBACXzC,KAAK6C,MAAMH,gBAChB8C,QAAQN,cACVlF,KAAK6C,MAAQ,IAAK7C,KAAKuC,mBACvBvC,KAAK6E,2BACL7E,KAAK8D,eACT,CACAS,cAAczD,GACNd,KAAK+C,qBAAuBjC,IAASd,KAAKc,MAC1Cd,KAAK+C,oBAAoBvB,aAEjC,CACAqD,2BACI,GAAI7E,KAAKe,QAAQb,iBAAiBF,KAAKc,MAAO,CAC1C,MAAQG,cAAejB,KAAK6C,MAC5B7C,KAAKe,QAAQb,iBAAiBF,KAAKc,MAAMG,WAAaA,CAC1D,CACJ,CACA6C,gBACS9D,KAAKsC,mBAAmBmD,WACzBzF,KAAKsC,mBAAmBwB,eAEhC,CACA4B,cACI1F,KAAKsE,aACLtE,KAAKuE,cAAcvE,KAAKc,MACxBd,KAAKe,QAAQW,cAAc1B,KAAKc,KACpC,EAEJsB,EAAwBL,UAAI,SAAAC,GAAA,WAAAA,GAAwFI,GAvQXrD,8BAuQoDe,GAvQpDf,8BAuQuFA,4BAvQvFA,8BAuQ+HA,qBAAoB,EAC5PqD,EAAwBuD,UAxQiF5G,8BAAE,CAAA6G,KAwQHxD,EAAuByD,UAAA,uBAAAC,UAAA,SAAAjH,EAAAC,GAA0U,GAA1U,EAAAD,GAxQtBE,wBAAEP,EAAA,EAwQ8UuH,oBAAgB,EAAAlH,EAAA,KAAAmH,EAxQhWjH,2BAAEiH,EAAFjH,6BAAED,EAAAsE,eAAA4C,EAAAC,MAAA,GAAAC,OAAA,CAAApF,KAAA,OAAA2D,WAAA,aAAAO,UAAA,YAAA9F,eAAA,+BAAAgE,YAAA,8BAAAiD,MAAA,EAAAC,KAAA,EAAAC,OAAA,sKAAAC,SAAA,SAAAzH,EAAAC,GAAA,EAAAD,IAAFE,2BAAE,WAAFA,uBAAE,EAAAI,EAAA,YAAFJ,CAwQmiB,EAAAM,EAAA,YAxQniBN,4BAwQgxB,EAAAF,IAxQhxBE,mCAAE,oBAAAD,EAAAgC,KAAA,IAAAhC,EAAAyH,UAAA,IAAFxH,uBAAE,UAAFA,4BAAE,EAAAN,EAAAK,EAAA+D,MAAA5B,WAAA,IAAFlC,+CAAE,QAAAD,EAAAoE,aAAFnE,+CAAE,OAAAD,EAAAoE,aAwQquB,EAAAsD,aAAA,CAA4iCC,UAA8FA,QAAOC,OAAA,27BAAAC,cAAA,IAqBj+D,MAAMC,EACF7G,YAAYgB,GACRf,KAAKe,QAAUA,CACnB,CACA+B,WACI9C,KAAKc,KAAOd,KAAKc,MAAQxB,EACzBU,KAAKsG,SAAWtG,KAAKsG,UAAYtG,KAAKe,QAAQd,gBAAgBqG,QAClE,EAEJM,EAAiB7E,UAAI,SAAAC,GAAA,WAAAA,GAAwF4E,GAtSJ7H,8BAsSsCe,GAAsB,EACrK8G,EAAiBjB,UAvSwF5G,8BAAE,CAAA6G,KAuSVgB,EAAgBf,UAAA,eAAAK,OAAA,CAAApF,KAAA,OAAA7B,QAAA,UAAAwF,WAAA,aAAAO,UAAA,YAAAsB,SAAA,YAAAO,mBA/BkvB,MA+BlvBV,MAAA,EAAAC,KAAA,EAAAC,OAAA,2DAAAC,SAAA,SAAAzH,EAAAC,GAAA,EAAAD,IAvSRE,uDAAE,GAAFA,sBAAE,yBAgTpF,EAAAF,IAhTkFE,+CAAE,OAAAD,EAAAgC,KAAF/B,CA0StF,UAAAD,EAAAG,QA1SsFF,CA2ShF,WAAAD,EAAAwH,SA3SgFvH,CA4S9E,aAAAD,EAAA2F,WA5S8E1F,CA6S1E,YAAAD,EAAAkG,WACF,EAAAwB,aAAA,CAGkCpE,GAAuBuE,cAAA,IA8BtF,MAAMG,EACF/G,YAAYgH,GACR/G,KAAK+G,gBAAkBA,EACvB/G,KAAKgH,eAAiBhH,KAAK+G,gBAAgBlG,UAC/C,CAIAK,MAAM+F,EAAQhI,GACVe,KAAKmB,SAAS8F,EAAQ1H,EAAeC,MAAOP,EAChD,CAIAoC,KAAK4F,GACDjH,KAAKmB,SAAS8F,EAAQ1H,EAAeE,KACzC,CAIA6B,MAAM2F,GACFjH,KAAKmB,SAAS8F,EAAQ1H,EAAeI,MACzC,CAIA4B,cACIvB,KAAKgH,eAAezF,aACxB,CAIAH,OAAO6F,EAAQhI,GACXe,KAAKmB,SAAS8F,EAAQ1H,EAAeG,OAAQT,EACjD,CAIAuC,YAAYyF,GACRjH,KAAKmB,SAAS8F,EAAQ1H,EAAeM,YACzC,CAIAmB,SAASiG,EAAS,MACd,MAAMC,EAAUD,EAASjH,KAAKmH,QAAQF,GAAU,KAC1CG,EAAYpH,KAAK+G,gBAAgB7G,iBACvC,OAAOmH,OAAOC,KAAKF,GAAWG,KAAMC,GAC3BN,EAGEA,EAAQO,QAAQL,EAAUI,GAAK1G,OAAS,GAAKsG,EAAUI,GAAKxG,SAFxDoG,EAAUI,GAAKxG,SAIlC,CACAG,SAAS8F,EAAS,GAAIrB,EAAM3G,GACNe,KAAKmH,QAAQF,GACrBzB,QAAQkC,GAAK1H,KAAK+G,gBAAgBlG,SAAS6G,GAAG9B,GAAM3G,GAClE,CACAkI,QAAQF,EAAS,IACb,MAAyB,iBAAXA,EAAsB,CAACA,GAAUA,CACnD,EAEJH,EAAe/E,UAAI,SAAAC,GAAA,WAAAA,GAAwF8E,GA7YF/H,qBA6YkCe,GAAsB,EACjKgH,EAAe7E,WA9Y0FlD,+BAAE,CAAAmD,MA8YI4E,EAAc3E,QAAd2E,EAAc/E,YAK7H,MAAM4F,EACF5H,YAAY6H,EAAgBC,EAAwBC,EAASC,EAAaC,EAAUC,GAChFjI,KAAK4H,eAAiBA,EACtB5H,KAAK6H,uBAAyBA,EAC9B7H,KAAK8H,QAAUA,EACf9H,KAAK+H,YAAcA,EACnB/H,KAAKgI,SAAWA,EAChBhI,KAAKiI,yBAA2BA,CACpC,CACA,WAAIlH,CAAQD,GAAQd,KAAKkI,YAAcpH,CAAM,CAE7C,kBAAIqH,CAAelJ,GAAWe,KAAKf,QAAUA,CAAS,CAEtD,mBAAImJ,CAAgB9B,GAAYtG,KAAKsG,SAAWA,CAAU,CAE1D,qBAAI+B,CAAkB5D,GAClBzE,KAAKyE,WAAaA,EAAa6D,OAAO7D,GAAc,IACxD,CAEA,oBAAI8D,CAAiBvD,GACjBhF,KAAKgF,UAAYA,EAAYsD,OAAOtD,GAAa,IACrD,CAEAlC,WACI,IACI9C,KAAK8H,QAAQzE,mBAAmBrD,KAAK+H,aACrC,MAAMS,EAAgBxI,KAAKyI,mBAC3B,GAAID,IAAkBxI,KAAK0I,sBAAsBF,GAAgB,CAC7DxI,KAAKgI,SAASW,SAASH,EAAe,qBACtCxI,KAAK4I,oBAAsB5I,KAAKyD,kBAChC,IAAIoF,EAAiB7I,KAAK8I,gBAAgB9I,KAAK8H,QAAQiB,QAAQC,eAC/D,GAAIH,EAAgB,CAChB,MAAMjI,EAAWZ,KAAK6H,uBAAuBnH,cAC7C8H,EAAcS,YAAYJ,GAC1B7I,KAAK4I,oBAAoBrD,SAASgB,UAAY,4BAC9CvG,KAAK4I,oBAAoBrD,SAASzE,KAAOd,KAAKkI,aAAe5I,EACzDU,KAAKf,UACLe,KAAK4I,oBAAoBrD,SAASrG,eAAiBc,KAAKf,SACxDe,KAAKyE,aACLzE,KAAK4I,oBAAoBrD,SAASd,WAAazE,KAAKyE,YACpDzE,KAAKgF,YACLhF,KAAK4I,oBAAoBrD,SAASP,UAAYhF,KAAKgF,YACnDhF,KAAKsG,UAAY1F,EAAS0F,YAC1BtG,KAAK4I,oBAAoBrD,SAASrC,YAAclD,KAAKsG,UAAY1F,EAAS0F,SAClF,CACJ,CACJ,OACO3C,GACHC,QAAQD,MAAM,eAAgBA,EAClC,CACJ,CACA+E,sBAAsBK,GAElB,MAAMG,EAAgBH,GAAW,CAAC,EAClC,IAAMI,YAAaD,EACnBC,SAAWC,MAAMC,KAAKF,GAAY,IAAIG,UAC/BH,EAAS5B,KAAMgC,GAAOA,GAAuB,aAAjBA,EAAGC,UAC1C,CACAf,mBAEI,OADqBzI,KAAK8H,QAAQ2B,IAAI,GAClBC,UAAU,EAClC,CAEAZ,gBAAgBC,GACZ,MAAMY,EAAcZ,EAAQY,aAAe,CAAC,EACtCC,EAAkBb,EAAQa,iBAAmB,CAAC,EACpD,MAAO,CACHD,EACAA,EAAYA,YACZC,EACAA,EAAgBA,iBAClBC,KAAMC,GAAMA,GAAqB,qBAAhBA,EAAEN,UACzB,CACA/F,kBACI,MAAMsG,EAA2B/J,KAAKiI,yBAAyB1E,wBAAwBnB,GACvF,OAAOpC,KAAK8H,QAAQrE,gBAAgBsG,EACxC,CACArE,cACQ1F,KAAKkI,aACLlI,KAAK4H,eAAetG,MAAMtB,KAAKkI,YAEvC,EAEJP,EAAiB5F,UAAI,SAAAC,GAAA,WAAAA,GAAwF2F,GAteJ5I,8BAsesC+H,GAtetC/H,8BAseiEe,GAtejEf,8BAseoGA,oBAtepGA,8BAseoIA,eAtepIA,8BAse+JA,aAte/JA,8BAsewLA,4BAA2B,EAC5T4I,EAAiBqC,UAvewFjL,8BAAE,CAAA6G,KAueV+B,EAAgB9B,UAAA,oBAAAK,OAAA,CAAAnF,QAAA,UAAAoH,eAAA,iBAAAC,gBAAA,kBAAAC,kBAAA,oBAAAE,iBAAA,sBAgBjH,MAAM0B,EAAyB,IAAInK,EAE7BoK,EAAwB,IAAIC,iBAAe,yBACjD,SAASC,EAAgBxJ,GACrBqJ,SAAuBtJ,eAAeC,GAC/BqJ,CACX,CACA,MAAMI,EACF,cAAOC,CAAQ1J,EAAW,CAAC,GACvB,MAAO,CACH2J,SAAUF,EACVG,UAAW,CACP,CACIC,QAASP,EACTQ,SAAU9J,GAEd,CACI6J,QAAS3K,EACT6K,WAAYP,EACZQ,KAAM,CAACV,IAEXpD,GAGZ,EAEJuD,EAActI,UAAI,SAAAC,GAAA,WAAAA,GAAwFqI,EAAa,EACvHA,EAAcQ,UAlhB2F9L,6BAAE,CAAA6G,KAkhBAyE,IAK3GA,EAAcS,UAvhB2F/L,6BAAE,CAAAgM,QAAA,CAuhByBC,kBAwBpI,IAAIC,EAAoB,EACxB,SAASC,EAAQC,EAAWvK,EAAW,CAAC,GACpC,OAAKA,EAASwK,gBAKP,SAAUnE,EAAQO,GACrB,MAAM6D,EAAS,IAAI7D,aACnBH,OAAOiE,eAAerE,EAAQO,EAAK,CAC/BiC,IAAK,WACD,GAAIzJ,KAAKqL,GACL,OAAOrL,KAAKqL,GAEhB,MAAM1J,EAAe,GAAGwJ,KAAaF,MACrC,OAAAjL,KAAKqL,GAAUpB,EAAuBpJ,SAASc,GACxC3B,KAAKqL,EAChB,EACAE,IAAK,SAAUC,GACXxL,KAAKqL,GAAUG,CACnB,GAER,EAnBW,SAAUvE,EAAQwE,GACrBxE,EAAOwE,GAAexB,EAAuBpJ,SAASsK,EAC1D,CAkBR","names":["_c0","_c1","a0","active","BlockUIContentComponent_div_1_div_2_Template","rf","ctx","i0","ctx_r0","message","defaultMessage","BlockUIContentComponent_div_1_Template","BlockUIContentComponent_2_ng_template_0_Template","BlockUIContentComponent_2_Template","BlockUIDefaultName","BlockUIActions","START","STOP","UPDATE","RESET","RESET_GLOBAL","UNSUBSCRIBE","BlockUIInstanceService","constructor","this","blockUISettings","blockUIInstances","blockUISubject","ReplaySubject","blockUIObservable","asObservable","subscribe","blockUIMiddleware","bind","getSettings","updateSettings","settings","decorate","name","blockUI","isActive","blockCount","start","dispatch","update","stop","reset","resetGlobal","unsubscribe","observe","clearInstance","instanceName","action","subject","next","ɵfac","__ngFactoryType__","ɵprov","token","factory","BlockUIContentComponent","resolver","changeDetectionRef","defaultBlockState","startTimeouts","stopTimeouts","updateTimeouts","startCallCount","stopCallCount","state","ngOnInit","blockUISubscription","subscribeToBlockUI","ngAfterViewInit","templateCmp","TemplateRef","templateOutlet","createEmbeddedView","templateComp","resolveComponentFactory","templateCompRef","createComponent","updateBlockTemplate","error","console","ngAfterViewChecked","detectChanges","blockUI$","event","onDispatchedEvent","onStart","onStop","onUpdate","onReset","resetState","onUnsubscribe","delay","delayStart","startTimeout","setTimeout","showBlock","updateInstanceBlockCount","push","stopCount","delayStop","stopTimeout","clearTimeout","updateTimeout","updateMessage","msg","ComponentRef","instance","forEach","destroyed","ngOnDestroy","ɵcmp","type","selectors","viewQuery","ViewContainerRef","_t","first","inputs","decls","vars","consts","template","className","dependencies","i2","styles","encapsulation","BlockUIComponent","ngContentSelectors","BlockUIService","blockUIInstance","globalDispatch","target","targets","toArray","instances","Object","keys","some","key","indexOf","i","BlockUIDirective","blockUIService","blockUIInstanceService","viewRef","templateRef","renderer","componentFactoryResolver","blockTarget","blockUIMessage","blockUITemplate","blockUIDelayStart","Number","blockUIDelayStop","parentElement","getParentElement","isComponentInTemplate","addClass","blockUIComponentRef","blockUIContent","findContentNode","element","nativeElement","appendChild","targetElement","children","Array","from","reverse","el","localName","get","rootNodes","nextSibling","previousSibling","find","e","resolvedBlockUIComponent","ɵdir","BlockUIServiceInstance","BlockUIModuleSettings","InjectionToken","provideInstance","BlockUIModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","ɵmod","ɵinj","imports","CommonModule","blockInstanceGuid","BlockUI","blockName","scopeToInstance","secret","defineProperty","set","value","propertyKey"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/ng-block-ui/fesm2020/ng-block-ui.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, TemplateRef, ComponentRef, ViewContainerRef, Component, ViewEncapsulation, Input, ViewChild, Directive, InjectionToken, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\n\nconst BlockUIDefaultName = 'block-ui-main';\n\nclass BlockUIActions {\n}\nBlockUIActions.START = 'start';\nBlockUIActions.STOP = 'stop';\nBlockUIActions.UPDATE = 'update';\nBlockUIActions.RESET = 'reset';\nBlockUIActions.RESET_GLOBAL = 'reset_global';\nBlockUIActions.UNSUBSCRIBE = 'unsubscribe';\n\nclass BlockUIInstanceService {\n    constructor() {\n        this.blockUISettings = {};\n        this.blockUIInstances = {};\n        this.blockUISubject = new ReplaySubject(1);\n        this.blockUIObservable = this.blockUISubject.asObservable();\n        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));\n    }\n    getSettings() {\n        return this.blockUISettings;\n    }\n    updateSettings(settings = {}) {\n        this.blockUISettings = { ...this.blockUISettings, ...settings };\n    }\n    decorate(name = BlockUIDefaultName) {\n        const blockUI = {\n            name,\n            isActive: false,\n            blockCount: 0,\n            start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),\n            update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),\n            stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),\n            reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),\n            resetGlobal: this.dispatch(this.blockUISubject, BlockUIActions.RESET_GLOBAL, name),\n            unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)\n        };\n        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;\n        return blockUI;\n    }\n    observe() {\n        return this.blockUIObservable;\n    }\n    clearInstance(instanceName) {\n        this.dispatch(this.blockUISubject, BlockUIActions.RESET, instanceName);\n    }\n    blockUIMiddleware({ action, name }) {\n        let isActive = null;\n        switch (action) {\n            case (BlockUIActions.START):\n                isActive = true;\n                break;\n            case (BlockUIActions.STOP):\n            case (BlockUIActions.RESET):\n                isActive = false;\n                break;\n        }\n        if (isActive !== null) {\n            this.blockUIInstances[name].isActive = isActive;\n        }\n    }\n    dispatch(subject, action, name = BlockUIDefaultName) {\n        return (message) => {\n            subject.next({\n                name,\n                action,\n                message\n            });\n        };\n    }\n}\nBlockUIInstanceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIInstanceService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nBlockUIInstanceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIInstanceService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIInstanceService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n// Spinner style - https://github.com/lukehaas/css-loaders\nconst styles = `\n.block-ui-wrapper {\n  display: none;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.70);\n  z-index: 30000;\n  cursor: wait;\n}\n\n.block-ui-wrapper.block-ui-wrapper--element {\n  position: absolute;\n}\n\n.block-ui-wrapper.active {\n  display: block;\n}\n\n.block-ui-wrapper.block-ui-main {\n  position: fixed;\n}\n\n.block-ui-spinner,\n.block-ui-template {\n  position: absolute;\n  top: 40%;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.block-ui-spinner > .message {\n  font-size: 1.3em;\n  text-align: center;\n  color: #fff;\n}\n\n.block-ui__element {\n  position: relative;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 7px auto;\n  font-size: 5px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid #ffffff;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\n\nconst template = `\n<div class=\"block-ui-wrapper {{name}} {{className}}\" [ngClass]=\"{ 'active': state.blockCount > 0 }\">\n  <div class=\"block-ui-spinner\" *ngIf=\"!templateCmp\">\n    <div class=\"loader\"></div>\n    <div *ngIf=\"message || defaultMessage\" class=\"message\">\n      {{ message || defaultMessage }}\n    </div>\n  </div>\n  <ng-template *ngIf=\"templateCmp\" #templateOutlet></ng-template>\n</div>\n`;\n\nclass BlockUIContentComponent {\n    constructor(blockUI, resolver, changeDetectionRef) {\n        this.blockUI = blockUI;\n        this.resolver = resolver;\n        this.changeDetectionRef = changeDetectionRef;\n        this.name = BlockUIDefaultName;\n        this.defaultBlockState = {\n            startTimeouts: [],\n            stopTimeouts: [],\n            updateTimeouts: [],\n            blockCount: 0,\n            startCallCount: 0,\n            stopCallCount: 0\n        };\n        this.state = { ...this.defaultBlockState };\n    }\n    ngOnInit() {\n        this.settings = this.blockUI.getSettings();\n        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());\n    }\n    ngAfterViewInit() {\n        try {\n            if (!this.templateCmp) {\n                return false;\n            }\n            if (this.templateCmp instanceof TemplateRef) {\n                this.templateOutlet.createEmbeddedView(this.templateCmp);\n            }\n            else {\n                const templateComp = this.resolver.resolveComponentFactory(this.templateCmp);\n                this.templateCompRef = this.templateOutlet.createComponent(templateComp);\n                this.updateBlockTemplate(this.message);\n            }\n        }\n        catch (error) {\n            console.error('ng-block-ui:', error);\n        }\n    }\n    ngAfterViewChecked() {\n        this.detectChanges();\n    }\n    subscribeToBlockUI(blockUI$) {\n        return blockUI$.subscribe(event => this.onDispatchedEvent(event));\n    }\n    onDispatchedEvent(event) {\n        switch (event.action) {\n            case BlockUIActions.START:\n                this.onStart(event);\n                break;\n            case BlockUIActions.STOP:\n                this.onStop(event);\n                break;\n            case BlockUIActions.UPDATE:\n                this.onUpdate(event);\n                break;\n            case BlockUIActions.RESET:\n                this.onReset(event);\n                break;\n            case BlockUIActions.RESET_GLOBAL:\n                this.resetState();\n                break;\n            case BlockUIActions.UNSUBSCRIBE:\n                this.onStop(event);\n                this.onUnsubscribe(event.name);\n                break;\n        }\n    }\n    onStart({ name, message }) {\n        if (name === this.name) {\n            const delay = this.delayStart ?? this.settings.delayStart ?? 0;\n            this.state.startCallCount += 1;\n            const startTimeout = setTimeout(() => {\n                this.state.blockCount += 1;\n                this.showBlock(message);\n                this.updateInstanceBlockCount();\n            }, delay);\n            this.state.startTimeouts.push(startTimeout);\n        }\n    }\n    onStop({ name }) {\n        if (name === this.name) {\n            const stopCount = this.state.stopCallCount + 1;\n            if (this.state.startCallCount - stopCount >= 0) {\n                const delay = this.delayStop ?? this.settings.delayStop ?? 0;\n                this.state.stopCallCount = stopCount;\n                const stopTimeout = setTimeout(() => {\n                    this.state.blockCount -= 1;\n                    this.updateInstanceBlockCount();\n                    this.detectChanges();\n                }, delay);\n                this.state.stopTimeouts.push(stopTimeout);\n            }\n        }\n    }\n    onUpdate({ name, message }) {\n        if (name === this.name) {\n            const delay = this.delayStart || this.settings.delayStart || 0;\n            clearTimeout(this.state.updateTimeouts[0]);\n            const updateTimeout = setTimeout(() => {\n                this.updateMessage(message);\n            }, delay);\n            this.state.updateTimeouts.push(updateTimeout);\n        }\n    }\n    onReset({ name }) {\n        if (name === this.name) {\n            this.resetState();\n        }\n    }\n    updateMessage(message) {\n        this.showBlock(message);\n    }\n    showBlock(message) {\n        this.message = message || this.defaultMessage || this.settings.message;\n        this.updateBlockTemplate(this.message);\n        this.detectChanges();\n    }\n    updateBlockTemplate(msg) {\n        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {\n            this.templateCompRef.instance.message = msg;\n        }\n    }\n    resetState() {\n        [\n            ...this.state.startTimeouts,\n            ...this.state.stopTimeouts,\n            ...this.state.updateTimeouts\n        ].forEach(clearTimeout);\n        this.state = { ...this.defaultBlockState };\n        this.updateInstanceBlockCount();\n        this.detectChanges();\n    }\n    onUnsubscribe(name) {\n        if (this.blockUISubscription && name === this.name) {\n            this.blockUISubscription.unsubscribe();\n        }\n    }\n    updateInstanceBlockCount() {\n        if (this.blockUI.blockUIInstances[this.name]) {\n            const { blockCount } = this.state;\n            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;\n        }\n    }\n    detectChanges() {\n        if (!this.changeDetectionRef['destroyed']) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.resetState();\n        this.onUnsubscribe(this.name);\n        this.blockUI.clearInstance(this.name);\n    }\n}\nBlockUIContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIContentComponent, deps: [{ token: BlockUIInstanceService }, { token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBlockUIContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BlockUIContentComponent, selector: \"block-ui-content\", inputs: { name: \"name\", delayStart: \"delayStart\", delayStop: \"delayStop\", defaultMessage: [\"message\", \"defaultMessage\"], templateCmp: [\"template\", \"templateCmp\"] }, viewQueries: [{ propertyName: \"templateOutlet\", first: true, predicate: [\"templateOutlet\"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: \"\\n<div class=\\\"block-ui-wrapper {{name}} {{className}}\\\" [ngClass]=\\\"{ 'active': state.blockCount > 0 }\\\">\\n  <div class=\\\"block-ui-spinner\\\" *ngIf=\\\"!templateCmp\\\">\\n    <div class=\\\"loader\\\"></div>\\n    <div *ngIf=\\\"message || defaultMessage\\\" class=\\\"message\\\">\\n      {{ message || defaultMessage }}\\n    </div>\\n  </div>\\n  <ng-template *ngIf=\\\"templateCmp\\\" #templateOutlet></ng-template>\\n</div>\\n\", isInline: true, styles: [\".block-ui-wrapper{display:none;position:fixed;height:100%;width:100%;top:0;left:0;background:rgba(0,0,0,.7);z-index:30000;cursor:wait}.block-ui-wrapper.block-ui-wrapper--element{position:absolute}.block-ui-wrapper.active{display:block}.block-ui-wrapper.block-ui-main{position:fixed}.block-ui-spinner,.block-ui-template{position:absolute;top:40%;margin:0 auto;left:0;right:0;transform:translateY(-50%)}.block-ui-spinner>.message{font-size:1.3em;text-align:center;color:#fff}.block-ui__element{position:relative}.loader,.loader:after{border-radius:50%;width:10em;height:10em}.loader{margin:7px auto;font-size:5px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,.2);border-right:1.1em solid rgba(255,255,255,.2);border-bottom:1.1em solid rgba(255,255,255,.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:load8 1.1s infinite linear}@keyframes load8{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'block-ui-content', template: template, encapsulation: ViewEncapsulation.None, styles: [\".block-ui-wrapper{display:none;position:fixed;height:100%;width:100%;top:0;left:0;background:rgba(0,0,0,.7);z-index:30000;cursor:wait}.block-ui-wrapper.block-ui-wrapper--element{position:absolute}.block-ui-wrapper.active{display:block}.block-ui-wrapper.block-ui-main{position:fixed}.block-ui-spinner,.block-ui-template{position:absolute;top:40%;margin:0 auto;left:0;right:0;transform:translateY(-50%)}.block-ui-spinner>.message{font-size:1.3em;text-align:center;color:#fff}.block-ui__element{position:relative}.loader,.loader:after{border-radius:50%;width:10em;height:10em}.loader{margin:7px auto;font-size:5px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,.2);border-right:1.1em solid rgba(255,255,255,.2);border-bottom:1.1em solid rgba(255,255,255,.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:load8 1.1s infinite linear}@keyframes load8{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BlockUIInstanceService }, { type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{\n                type: Input\n            }], delayStart: [{\n                type: Input\n            }], delayStop: [{\n                type: Input\n            }], defaultMessage: [{\n                type: Input,\n                args: ['message']\n            }], templateCmp: [{\n                type: Input,\n                args: ['template']\n            }], templateOutlet: [{\n                type: ViewChild,\n                args: ['templateOutlet', { read: ViewContainerRef }]\n            }] } });\n\nclass BlockUIComponent {\n    constructor(blockUI) {\n        this.blockUI = blockUI;\n    }\n    ngOnInit() {\n        this.name = this.name || BlockUIDefaultName;\n        this.template = this.template || this.blockUI.blockUISettings.template;\n    }\n}\nBlockUIComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIComponent, deps: [{ token: BlockUIInstanceService }], target: i0.ɵɵFactoryTarget.Component });\nBlockUIComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BlockUIComponent, selector: \"block-ui\", inputs: { name: \"name\", message: \"message\", delayStart: \"delayStart\", delayStop: \"delayStop\", template: \"template\" }, ngImport: i0, template: `\n    <ng-content></ng-content>\n    <block-ui-content\n      [name]=\"name\"\n      [message]=\"message\"\n      [template]=\"template\"\n      [delayStart]=\"delayStart\"\n      [delayStop]=\"delayStop\"\n    >\n    </block-ui-content>\n  `, isInline: true, dependencies: [{ kind: \"component\", type: BlockUIContentComponent, selector: \"block-ui-content\", inputs: [\"name\", \"delayStart\", \"delayStop\", \"message\", \"template\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'block-ui',\n                    template: `\n    <ng-content></ng-content>\n    <block-ui-content\n      [name]=\"name\"\n      [message]=\"message\"\n      [template]=\"template\"\n      [delayStart]=\"delayStart\"\n      [delayStop]=\"delayStop\"\n    >\n    </block-ui-content>\n  `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: BlockUIInstanceService }]; }, propDecorators: { name: [{\n                type: Input\n            }], message: [{\n                type: Input\n            }], delayStart: [{\n                type: Input\n            }], delayStop: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }] } });\n\nclass BlockUIService {\n    constructor(blockUIInstance) {\n        this.blockUIInstance = blockUIInstance;\n        this.globalDispatch = this.blockUIInstance.decorate();\n    }\n    /**\n    * Starts blocking for given BlockUI instance or instances\n    */\n    start(target, message) {\n        this.dispatch(target, BlockUIActions.START, message);\n    }\n    /**\n    * Stops blocking for given BlockUI instance or instances\n    */\n    stop(target) {\n        this.dispatch(target, BlockUIActions.STOP);\n    }\n    /**\n    * Reset blocking for given BlockUI instance or instances\n    */\n    reset(target) {\n        this.dispatch(target, BlockUIActions.RESET);\n    }\n    /**\n    * Reset blocking for all BlockUI instances\n    */\n    resetGlobal() {\n        this.globalDispatch.resetGlobal();\n    }\n    /**\n    * Updates message for given BlockUI instance or instances\n    */\n    update(target, message) {\n        this.dispatch(target, BlockUIActions.UPDATE, message);\n    }\n    /**\n    * Unsubscribes for given BlockUI instance or instances\n    */\n    unsubscribe(target) {\n        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);\n    }\n    /**\n    * Checks if BlockUI is actively blocking\n    */\n    isActive(target = null) {\n        const targets = target ? this.toArray(target) : null;\n        const instances = this.blockUIInstance.blockUIInstances;\n        return Object.keys(instances).some((key) => {\n            if (!targets) {\n                return instances[key].isActive;\n            }\n            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;\n        });\n    }\n    dispatch(target = [], type, message) {\n        const instances = this.toArray(target);\n        instances.forEach(i => this.blockUIInstance.decorate(i)[type](message));\n    }\n    toArray(target = []) {\n        return typeof target === 'string' ? [target] : target;\n    }\n}\nBlockUIService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIService, deps: [{ token: BlockUIInstanceService }], target: i0.ɵɵFactoryTarget.Injectable });\nBlockUIService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: BlockUIInstanceService }]; } });\n\nclass BlockUIDirective {\n    constructor(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {\n        this.blockUIService = blockUIService;\n        this.blockUIInstanceService = blockUIInstanceService;\n        this.viewRef = viewRef;\n        this.templateRef = templateRef;\n        this.renderer = renderer;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n    set blockUI(name) { this.blockTarget = name; }\n    ;\n    set blockUIMessage(message) { this.message = message; }\n    ;\n    set blockUITemplate(template) { this.template = template; }\n    ;\n    set blockUIDelayStart(delayStart) {\n        this.delayStart = delayStart ? Number(delayStart) : null;\n    }\n    ;\n    set blockUIDelayStop(delayStop) {\n        this.delayStop = delayStop ? Number(delayStop) : null;\n    }\n    ;\n    ngOnInit() {\n        try {\n            this.viewRef.createEmbeddedView(this.templateRef);\n            const parentElement = this.getParentElement();\n            if (parentElement && !this.isComponentInTemplate(parentElement)) {\n                this.renderer.addClass(parentElement, 'block-ui__element');\n                this.blockUIComponentRef = this.createComponent();\n                let blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);\n                if (blockUIContent) {\n                    const settings = this.blockUIInstanceService.getSettings();\n                    parentElement.appendChild(blockUIContent);\n                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';\n                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;\n                    if (this.message)\n                        this.blockUIComponentRef.instance.defaultMessage = this.message;\n                    if (this.delayStart)\n                        this.blockUIComponentRef.instance.delayStart = this.delayStart;\n                    if (this.delayStop)\n                        this.blockUIComponentRef.instance.delayStop = this.delayStop;\n                    if (this.template || settings.template)\n                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;\n                }\n            }\n        }\n        catch (error) {\n            console.error('ng-block-ui:', error);\n        }\n    }\n    isComponentInTemplate(element) {\n        // Needed because of https://github.com/microsoft/TypeScript/issues/26235\n        const targetElement = element || {};\n        let { children } = targetElement;\n        children = Array.from(children || []).reverse();\n        return children.some((el) => el && el.localName === 'block-ui');\n    }\n    getParentElement() {\n        const embeddedView = this.viewRef.get(0);\n        return embeddedView.rootNodes[0];\n    }\n    // Needed for IE (#17)\n    findContentNode(element) {\n        const nextSibling = element.nextSibling || {};\n        const previousSibling = element.previousSibling || {};\n        return [\n            nextSibling,\n            nextSibling.nextSibling,\n            previousSibling,\n            previousSibling.previousSibling\n        ].find((e) => e && e.localName === 'block-ui-content');\n    }\n    createComponent() {\n        const resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);\n        return this.viewRef.createComponent(resolvedBlockUIComponent);\n    }\n    ngOnDestroy() {\n        if (this.blockTarget) {\n            this.blockUIService.reset(this.blockTarget);\n        }\n    }\n}\nBlockUIDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIDirective, deps: [{ token: BlockUIService }, { token: BlockUIInstanceService }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.Renderer2 }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });\nBlockUIDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BlockUIDirective, selector: \"[blockUI]\", inputs: { blockUI: \"blockUI\", blockUIMessage: \"blockUIMessage\", blockUITemplate: \"blockUITemplate\", blockUIDelayStart: \"blockUIDelayStart\", blockUIDelayStop: \"blockUIDelayStop\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[blockUI]' }]\n        }], ctorParameters: function () { return [{ type: BlockUIService }, { type: BlockUIInstanceService }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.Renderer2 }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { blockUI: [{\n                type: Input\n            }], blockUIMessage: [{\n                type: Input\n            }], blockUITemplate: [{\n                type: Input\n            }], blockUIDelayStart: [{\n                type: Input\n            }], blockUIDelayStop: [{\n                type: Input\n            }] } });\n\nconst BlockUIServiceInstance = new BlockUIInstanceService();\n// Needed for AOT compiling\nconst BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');\nfunction provideInstance(settings) {\n    BlockUIServiceInstance.updateSettings(settings);\n    return BlockUIServiceInstance;\n}\nclass BlockUIModule {\n    static forRoot(settings = {}) {\n        return {\n            ngModule: BlockUIModule,\n            providers: [\n                {\n                    provide: BlockUIModuleSettings,\n                    useValue: settings\n                },\n                {\n                    provide: BlockUIInstanceService,\n                    useFactory: provideInstance,\n                    deps: [BlockUIModuleSettings]\n                },\n                BlockUIService\n            ]\n        };\n    }\n}\nBlockUIModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBlockUIModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIModule, declarations: [BlockUIComponent,\n        BlockUIDirective,\n        BlockUIContentComponent], imports: [CommonModule], exports: [BlockUIComponent,\n        BlockUIDirective,\n        BlockUIContentComponent] });\nBlockUIModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BlockUIModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    entryComponents: [\n                        BlockUIComponent,\n                        BlockUIContentComponent\n                    ],\n                    declarations: [\n                        BlockUIComponent,\n                        BlockUIDirective,\n                        BlockUIContentComponent\n                    ],\n                    exports: [\n                        BlockUIComponent,\n                        BlockUIDirective,\n                        BlockUIContentComponent\n                    ]\n                }]\n        }] });\n\nlet blockInstanceGuid = 1;\nfunction BlockUI(blockName, settings = {}) {\n    if (!settings.scopeToInstance) {\n        return function (target, propertyKey) {\n            target[propertyKey] = BlockUIServiceInstance.decorate(blockName);\n        };\n    }\n    return function (target, key) {\n        const secret = `_${key}-block-ui`;\n        Object.defineProperty(target, key, {\n            get: function () {\n                if (this[secret]) {\n                    return this[secret];\n                }\n                const instanceName = `${blockName}-${blockInstanceGuid++}`;\n                this[secret] = BlockUIServiceInstance.decorate(instanceName);\n                return this[secret];\n            },\n            set: function (value) {\n                this[secret] = value;\n            },\n        });\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockUIDefaultName as BLOCKUI_DEFAULT, BlockUI, BlockUIComponent, BlockUIContentComponent, BlockUIDirective, BlockUIModule, BlockUIService };\n"],"x_google_ignoreList":[0]}