{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-popover_mjs.js","mappings":"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","names":["min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","evaluate","value","param","getSide","placement","split","getAlignment","getAxisLength","axis","yAxisSides","Set","getSideAxis","has","getAlignmentAxis","getOppositeAxis","getOppositeAlignmentPlacement","replace","alignment","lrPlacement","rlPlacement","tbPlacement","btPlacement","getOppositeAxisPlacements","flipAlignment","direction","rtl","list","getSideList","side","isStart","map","concat","getOppositePlacement","getPaddingObject","padding","expandPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition","_ref2","_asyncToGenerator","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextY","data","reset","initialPlacement","elements","nextX","_x","_x2","_x3","apply","this","arguments","detectOverflow","_x4","_x5","_detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","originSides","_convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","offset","_middlewareData$offse","_middlewareData$arrow","diffCoords","convertValueToCoords","_x6","_x7","arrow","alignmentOffset","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","invalidOverflowDisplayValues","isOverflowElement","overflow","overflowX","overflowY","display","getComputedStyle","test","tableElements","isTableElement","topLayerSelectors","isTopLayer","some","selector","matches","transformProperties","willChangeValues","containValues","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","willChange","includes","contain","CSS","supports","lastTraversableNodeNames","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","parent","Object","getPrototypeOf","visualViewport","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","shouldAddVisualOffsets","isFixed","floatingOffsetParent","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","html","clientWidth","clientHeight","visualViewportBased","getDocumentRect","scroll","scrollWidth","scrollHeight","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","ancestor","set","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","getTrueOffsetParent","polyfill","getContainingBlock","topLayer","clippingAncestors","_c","firstClippingAncestor","clippingRect","reduce","accRect","getOffsetParentFn","getDimensionsFn","getDimensions","getClientRects","Array","from","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","observeMove","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","observe","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","flip","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","initialSideAxis","isBasePlacement","getExpandedPlacements","oppositePlacement","hasFallbackAxisSideDirection","push","placements","overflows","overflowsData","sides","getAlignmentSides","mainAlignmentSide","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","d","resetPlacement","sort","a","b","_overflowsData$filter2","currentSideAxis","acc","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","clamp","shouldAddOffset","u","centerOffset","_c0","PopoverContent_span_4_Template","rf","ctx","i0","PopoverContent_span_5_Template","PopoverContainer","constructor","elementRef","ngZone","renderer","changeDetectorRef","_align","alignmentClassPrefix","onClose","EventEmitter","onOpen","isOpenChange","caret","dropShadow","highContrast","autoAlign","containerClass","isOpen","align","previousAlignment","updateAlignmentClass","handleChange","open","event","emit","caretRef","getPropertyValue","caretOffset","caretHeight","nativeElement","popoverContentRef","unmountFloatingElement","recomputePosition","bind","cleanUp","markForCheck","roundByDPR","dpr","devicePixelRatio","_this","runOutsideAngular","Map","mergedOptions","platformWithCache","computePosition$1","assign","style","transform","arrowX","arrowY","staticSide","ngOnChanges","changes","originalState","firstChange","querySelector","setAttribute","ngAfterViewInit","initializeReferences","ngOnDestroy","undefined","newAlignment","regexp","RegExp","classList","className","removeClass","addClass","ɵfac","__ngFactoryType__","ɵdir","type","selectors","hostVars","hostBindings","inputs","outputs","features","PopoverContent","popoverClass","popoverContent","closest","detectChanges","ɵcmp","viewQuery","_t","first","ngContentSelectors","decls","vars","consts","template","dependencies","i1","encapsulation","PopoverModule","ɵmod","ɵinj","imports","CommonModule","asyncGeneratorStep","n","t","e","r","o","c","done","Promise","resolve","then","_next","_throw"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-popover.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nconst yAxisSides = /*#__PURE__*/new Set(['top', 'bottom']);\nfunction getSideAxis(placement) {\n  return yAxisSides.has(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nconst lrPlacement = ['left', 'right'];\nconst rlPlacement = ['right', 'left'];\nconst tbPlacement = ['top', 'bottom'];\nconst btPlacement = ['bottom', 'top'];\nfunction getSideList(side, isStart, rtl) {\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rlPlacement : lrPlacement;\n      return isStart ? lrPlacement : rlPlacement;\n    case 'left':\n    case 'right':\n      return isStart ? tbPlacement : btPlacement;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nconst originSides = /*#__PURE__*/new Set(['left', 'top']);\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = originSides.has(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = originSides.has(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nconst invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);\n}\nconst tableElements = /*#__PURE__*/new Set(['table', 'td', 'th']);\nfunction isTableElement(element) {\n  return tableElements.has(getNodeName(element));\n}\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(element) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (_e) {\n      return false;\n    }\n  });\n}\nconst transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];\nconst willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];\nconst containValues = ['paint', 'layout', 'strict', 'content'];\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nconst lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);\nfunction isLastTraversableNode(node) {\n  return lastTraversableNodeNames.has(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { detectOverflow, offset } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = currentWin.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = currentWin.frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(floating) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return floating.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const x = rect.left + scroll.scrollLeft - offsets.x;\n  const y = rect.top + scroll.scrollTop - offsets.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element) || isTopLayer(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(data.floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, flip, hide, inline, limitShift, platform, shift, size };\n","import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, HostBinding, Component, ViewChild, NgModule } from '@angular/core';\nimport { autoUpdate, computePosition, offset, flip, arrow } from '@floating-ui/dom';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PopoverContainer {\n    constructor(elementRef, ngZone, renderer, changeDetectorRef) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        this._align = \"bottom\";\n        this.alignmentClassPrefix = \"cds--popover--\";\n        /**\n         * Emits an event when the dialog is closed\n         */\n        this.onClose = new EventEmitter();\n        /**\n         * Emits an event when the dialog is opened\n         */\n        this.onOpen = new EventEmitter();\n        /**\n         * Emits an event when the state of `isOpen` changes. Allows `isOpen` to be double bound\n         */\n        this.isOpenChange = new EventEmitter();\n        /**\n         * Show caret at the alignment position\n         */\n        this.caret = true;\n        /**\n         * Enable drop shadow around the popover container\n         */\n        this.dropShadow = true;\n        /**\n         * Enable high contrast for popover container\n         */\n        this.highContrast = false;\n        /**\n         * **Experimental**: Use floating-ui to position the tooltip\n         * This is not toggleable - should be assigned once\n         */\n        this.autoAlign = false;\n        this.containerClass = true;\n        this.isOpen = false;\n    }\n    /**\n     * Set alignment of popover\n     * As of v5, `oldPlacements` are now deprecated in favor of Placements\n     *\n     * When `autoAlign` is set to `true`, alignment may change for best placement\n     */\n    set align(alignment) {\n        // If alignment is not passed, the default value will be `undefined`.\n        if (!alignment) {\n            return;\n        }\n        const previousAlignment = this._align;\n        switch (alignment) {\n            case \"top-left\":\n                this._align = \"top-start\";\n                break;\n            case \"top-right\":\n                this._align = \"top-end\";\n                break;\n            case \"bottom-left\":\n                this._align = \"bottom-start\";\n                break;\n            case \"bottom-right\":\n                this._align = \"bottom-end\";\n                break;\n            case \"left-top\":\n                this._align = \"left-start\";\n                break;\n            case \"left-bottom\":\n                this._align = \"left-end\";\n                break;\n            case \"right-top\":\n                this._align = \"right-start\";\n                break;\n            case \"right-bottom\":\n                this._align = \"right-end\";\n                break;\n            default:\n                this._align = alignment;\n                break;\n        }\n        this.updateAlignmentClass(this._align, previousAlignment);\n    }\n    /**\n     * Handles emitting open/close event\n     * @param open - Is the popover container open\n     * @param event - Event\n     */\n    handleChange(open, event) {\n        // We only emit the event when parameter has an event to keep existing behavior\n        if ((this.isOpen !== open) && event) {\n            this.isOpenChange.emit(open);\n        }\n        if (open) {\n            if (event) {\n                this.onOpen.emit(event);\n            }\n            // when auto alignment is enabled, use auto update to set the placement for the element\n            if (this.autoAlign) {\n                if (this.caretRef) {\n                    // Get caret offset/height property\n                    // Getting computed styles once every open, otherwise expensive.\n                    const computedStyle = getComputedStyle(this.caretRef);\n                    const offset = computedStyle.getPropertyValue(\"--cds-popover-offset\");\n                    const height = computedStyle.getPropertyValue(\"--cds-popover-caret-height\");\n                    this.caretOffset = (offset?.includes(\"px\") ? Number(offset.split(\"px\", 1)[0]) : Number(offset.split(\"rem\", 1)[0]) * 16) || 10;\n                    this.caretHeight = (height?.includes(\"px\") ? Number(height.split(\"px\", 1)[0]) : Number(height.split(\"rem\", 1)[0]) * 16) || 6;\n                }\n                if (this.elementRef.nativeElement && this.popoverContentRef) {\n                    this.unmountFloatingElement = autoUpdate(this.elementRef.nativeElement, this.popoverContentRef, this.recomputePosition.bind(this));\n                }\n            }\n        }\n        else {\n            this.cleanUp();\n            if (event) {\n                this.onClose.emit(event);\n            }\n        }\n        this.isOpen = open;\n        this.changeDetectorRef.markForCheck();\n    }\n    roundByDPR(value) {\n        const dpr = window.devicePixelRatio || 1;\n        return Math.round(value * dpr) / dpr;\n    }\n    /**\n     * Compute position of tooltip when autoAlign is enabled\n     */\n    recomputePosition() {\n        // Run outside of angular zone to avoid unnecessary change detection and rely on floating-ui\n        this.ngZone.runOutsideAngular(async () => {\n            const { x, y, placement, middlewareData } = await computePosition(this.elementRef.nativeElement, this.popoverContentRef, {\n                placement: this._align,\n                strategy: \"fixed\",\n                middleware: [\n                    offset(this.caretOffset),\n                    flip({ fallbackAxisSideDirection: \"start\" }),\n                    arrow({ element: this.caretRef })\n                ]\n            });\n            const previousAlignment = this._align;\n            this._align = placement;\n            this.updateAlignmentClass(this._align, previousAlignment);\n            // Using CSSOM to manipulate CSS to avoid content security policy inline-src\n            // https://github.com/w3c/webappsec-csp/issues/212\n            Object.assign(this.popoverContentRef.style, {\n                position: \"fixed\",\n                top: \"0\",\n                left: \"0\",\n                // Using transform instead of top/left position to improve performance\n                transform: `translate(${this.roundByDPR(x)}px,${this.roundByDPR(y)}px)`\n            });\n            if (middlewareData.arrow) {\n                const { x: arrowX, y: arrowY } = middlewareData.arrow;\n                const staticSide = {\n                    top: \"bottom\",\n                    right: \"left\",\n                    bottom: \"top\",\n                    left: \"right\"\n                }[placement.split(\"-\")[0]];\n                this.caretRef.style.left = arrowX != null ? `${arrowX}px` : \"\";\n                this.caretRef.style.top = arrowY != null ? `${arrowY}px` : \"\";\n                this.caretRef.style.right = \"\";\n                this.caretRef.style.bottom = \"\";\n                if (staticSide) {\n                    this.caretRef.style[staticSide] = `${-this.caretHeight}px`;\n                }\n            }\n        });\n    }\n    /**\n     * Close the popover and reopen it with updated values without emitting an event\n     * @param changes\n     */\n    ngOnChanges(changes) {\n        // Close and reopen the popover, handle alignment/programmatic open/close\n        const originalState = this.isOpen;\n        this.handleChange(false);\n        // Ignore first change since content is not initialized\n        if (changes.autoAlign && !changes.autoAlign.firstChange) {\n            // Reset the inline styles\n            this.popoverContentRef = this.elementRef.nativeElement.querySelector(\".cds--popover-content\");\n            this.popoverContentRef.setAttribute(\"style\", \"\");\n            this.caretRef = this.elementRef.nativeElement.querySelector(\"span.cds--popover-caret\");\n        }\n        this.handleChange(originalState);\n    }\n    /**\n     * Handle initialization of element\n     */\n    ngAfterViewInit() {\n        this.initializeReferences();\n    }\n    initializeReferences() {\n        this.updateAlignmentClass(this._align);\n        // Initialize html references since they will not change and are required for popover components\n        this.popoverContentRef = this.elementRef.nativeElement.querySelector(\".cds--popover-content\");\n        this.caretRef = this.elementRef.nativeElement.querySelector(\"span.cds--popover-caret\");\n        // Handle initial isOpen\n        this.handleChange(this.isOpen);\n    }\n    /**\n     * Clean up\n     */\n    ngOnDestroy() {\n        this.cleanUp();\n    }\n    /**\n     * Clean up `autoUpdate` if auto alignment is enabled\n     */\n    cleanUp() {\n        if (this.unmountFloatingElement) {\n            this.unmountFloatingElement();\n        }\n        this.unmountFloatingElement = undefined;\n    }\n    /**\n     * Replace existing previous alignment class with new\n     * @param previousAlignment\n     */\n    updateAlignmentClass(newAlignment, previousAlignment) {\n        if (this.elementRef.nativeElement && previousAlignment !== newAlignment) {\n            const regexp = new RegExp(\"right|top|left|bottom\");\n            // Since we are constantly switching, it's safer to delete all matching class names\n            this.elementRef.nativeElement.classList.forEach(className => {\n                if (regexp.test(className)) {\n                    this.renderer.removeClass(this.elementRef.nativeElement, `${className}`);\n                }\n            });\n            this.renderer.addClass(this.elementRef.nativeElement, `${this.alignmentClassPrefix}${newAlignment}`);\n        }\n    }\n}\nPopoverContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverContainer, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\nPopoverContainer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: PopoverContainer, selector: \"[cdsPopover], [ibmPopover]\", inputs: { align: \"align\", caret: \"caret\", dropShadow: \"dropShadow\", highContrast: \"highContrast\", autoAlign: \"autoAlign\", isOpen: \"isOpen\" }, outputs: { onClose: \"onClose\", onOpen: \"onOpen\", isOpenChange: \"isOpenChange\" }, host: { properties: { \"class.cds--popover--caret\": \"this.caret\", \"class.cds--popover--drop-shadow\": \"this.dropShadow\", \"class.cds--popover--high-contrast\": \"this.highContrast\", \"class.cds--popover--auto-align\": \"this.autoAlign\", \"class.cds--popover-container\": \"this.containerClass\", \"class.cds--popover--open\": \"this.isOpen\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverContainer, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsPopover], [ibmPopover]\"\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { align: [{\n                type: Input\n            }], onClose: [{\n                type: Output\n            }], onOpen: [{\n                type: Output\n            }], isOpenChange: [{\n                type: Output\n            }], caret: [{\n                type: HostBinding,\n                args: [\"class.cds--popover--caret\"]\n            }, {\n                type: Input\n            }], dropShadow: [{\n                type: HostBinding,\n                args: [\"class.cds--popover--drop-shadow\"]\n            }, {\n                type: Input\n            }], highContrast: [{\n                type: HostBinding,\n                args: [\"class.cds--popover--high-contrast\"]\n            }, {\n                type: Input\n            }], autoAlign: [{\n                type: HostBinding,\n                args: [\"class.cds--popover--auto-align\"]\n            }, {\n                type: Input\n            }], containerClass: [{\n                type: HostBinding,\n                args: [\"class.cds--popover-container\"]\n            }], isOpen: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"class.cds--popover--open\"]\n            }] } });\n\n/**\n * [See demo](../../?path=/story/components-popover--basic)\n */\nclass PopoverContent {\n    constructor(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.popoverClass = true;\n        this.autoAlign = false;\n    }\n    ngAfterViewInit() {\n        if (this.popoverContent) {\n            // Check we are in a popover with autoAlign enabled\n            this.autoAlign = !!this.popoverContent.nativeElement.closest(\".cds--popover--auto-align\");\n            // Run change detection manually to resolve ExpressionHasChanged\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\nPopoverContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverContent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nPopoverContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: PopoverContent, selector: \"cds-popover-content, ibm-popover-content\", host: { properties: { \"class.cds--popover\": \"this.popoverClass\" } }, viewQueries: [{ propertyName: \"popoverContent\", first: true, predicate: [\"content\"], descendants: true }], ngImport: i0, template: `\n\t\t<span class=\"cds--popover-content\" #content>\n\t\t\t<div>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t\t<span *ngIf=\"autoAlign\" class=\"cds--popover-caret cds--popover--auto-align\"></span>\n\t\t</span>\n\t\t<span *ngIf=\"!autoAlign\" class=\"cds--popover-caret\"></span>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-popover-content, ibm-popover-content\",\n                    template: `\n\t\t<span class=\"cds--popover-content\" #content>\n\t\t\t<div>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t\t<span *ngIf=\"autoAlign\" class=\"cds--popover-caret cds--popover--auto-align\"></span>\n\t\t</span>\n\t\t<span *ngIf=\"!autoAlign\" class=\"cds--popover-caret\"></span>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { popoverClass: [{\n                type: HostBinding,\n                args: [\"class.cds--popover\"]\n            }], popoverContent: [{\n                type: ViewChild,\n                args: [\"content\"]\n            }] } });\n\nclass PopoverModule {\n}\nPopoverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPopoverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverModule, declarations: [PopoverContainer,\n        PopoverContent], imports: [CommonModule], exports: [PopoverContainer,\n        PopoverContent] });\nPopoverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: PopoverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        PopoverContainer,\n                        PopoverContent\n                    ],\n                    exports: [\n                        PopoverContainer,\n                        PopoverContent\n                    ],\n                    imports: [CommonModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PopoverContainer, PopoverContent, PopoverModule };\n","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };"],"x_google_ignoreList":[0,1,2,3,4,5]}