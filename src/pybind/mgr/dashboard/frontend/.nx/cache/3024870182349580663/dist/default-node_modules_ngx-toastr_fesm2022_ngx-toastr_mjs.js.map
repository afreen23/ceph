{"version":3,"file":"default-node_modules_ngx-toastr_fesm2022_ngx-toastr_mjs.js","mappings":"wpBAKgD,MAAAA,EAAA,gCAAAC,EAAAC,EAAAC,GAAA,KAAAD,EAAA,OAAAE,EAU6CC,0DAAE,cAAFA,uBAAE,mBAAFA,0BAAED,GAAA,MAAAE,EAAFD,4BAAE,OAAFA,wBAwyB9CC,EAAAC,SAAQ,GAxyBsCF,2BAAE,YAAFA,mBAAE,UAAFA,4BA0yBlF,WAAAG,EAAAN,EAAAC,GA1yBoF,GA0yBpF,EAAAD,IA1yBkFG,oCAAE,GAAFA,mBAAE,GAAFA,qCAAE,EAAAH,EAAA,OAAAI,EAAFD,0BAAE,GAAFA,uDAAE,IAAAC,EAAAG,gBAAA,MA4yBd,WAAAC,EAAAR,EAAAC,GACzE,GADyE,EAAAD,IA5yBYG,2BAAE,SAAFA,mBAAE,GAAFA,uBAAE,EAAAG,EAAA,sBAAFH,4BA6yBrF,EAAAH,EAAA,OAAAI,EA7yBqFD,mDAAEC,EAAAK,QAAAC,YAAFP,wBAAE,aAAAC,EAAAO,OAAFR,uDAAE,IAAAC,EAAAO,MAAA,KAAFR,+CAAE,OAAAC,EAAAG,gBA4yB3C,WAAAK,EAAAZ,EAAAC,GAI5C,GAJ4C,EAAAD,GA5yByCG,sBAAE,WAgzBvF,EAAAH,EAAA,OAAAI,EAhzBqFD,mDAAEC,EAAAK,QAAAI,cAAFV,uBAAE,YAAAC,EAAAU,QAAFX,2BA+yBrC,WAAAY,EAAAf,EAAAC,GAKhD,GALgD,EAAAD,IA/yBqCG,2BAAE,WAAFA,mBAAE,GAAFA,4BAozBrF,EAAAH,EAAA,OAAAI,EApzBqFD,mDAAEC,EAAAK,QAAAI,cAAFV,wBAAE,aAAAC,EAAAU,SAAFX,uDAAE,IAAAC,EAAAU,QAAA,IAozB7F,WAAAE,EAAAhB,EAAAC,GAGM,GAHN,EAAAD,IApzB2FG,2BAAE,SAAFA,sBAAE,WAAFA,4BAuzBrF,EAAAH,EAAA,OAAAI,EAvzBqFD,4EAAE,QAAAC,EAAAa,QAAA,IAszBlC,WAAAC,EAAAlB,EAAAC,GAAA,KAAAD,EAAA,OAAAE,EAtzBgCC,0DAAE,cAAFA,uBAAE,mBAAFA,0BAAED,GAAA,MAAAE,EAAFD,4BAAE,OAAFA,wBAqmC9CC,EAAAC,SAAQ,GArmCsCF,2BAAE,YAAFA,mBAAE,UAAFA,4BAumClF,WAAAgB,EAAAnB,EAAAC,GAvmCoF,GAumCpF,EAAAD,IAvmCkFG,oCAAE,GAAFA,mBAAE,GAAFA,qCAAE,EAAAH,EAAA,OAAAI,EAAFD,0BAAE,GAAFA,uDAAE,IAAAC,EAAAG,gBAAA,MAymCd,WAAAa,EAAApB,EAAAC,GACzE,GADyE,EAAAD,IAzmCYG,2BAAE,SAAFA,mBAAE,GAAFA,uBAAE,EAAAgB,EAAA,sBAAFhB,4BA0mCrF,EAAAH,EAAA,OAAAI,EA1mCqFD,mDAAEC,EAAAK,QAAAC,YAAFP,wBAAE,aAAAC,EAAAO,OAAFR,uDAAE,IAAAC,EAAAO,MAAA,KAAFR,+CAAE,OAAAC,EAAAG,gBAymC3C,WAAAc,EAAArB,EAAAC,GAI5C,GAJ4C,EAAAD,GAzmCyCG,sBAAE,WA6mCvF,EAAAH,EAAA,OAAAI,EA7mCqFD,mDAAEC,EAAAK,QAAAI,cAAFV,uBAAE,YAAAC,EAAAU,QAAFX,2BA4mCrC,WAAAmB,EAAAtB,EAAAC,GAKhD,GALgD,EAAAD,IA5mCqCG,2BAAE,WAAFA,mBAAE,GAAFA,4BAinCrF,EAAAH,EAAA,OAAAI,EAjnCqFD,mDAAEC,EAAAK,QAAAI,cAAFV,wBAAE,aAAAC,EAAAU,SAAFX,uDAAE,IAAAC,EAAAU,QAAA,IAinC7F,WAAAS,EAAAvB,EAAAC,GAGM,GAHN,EAAAD,IAjnC2FG,2BAAE,SAAFA,sBAAE,WAAFA,4BAonCrF,EAAAH,EAAA,OAAAI,EApnCqFD,4EAAE,QAAAC,EAAAa,QAAA,IAmnClC,EA3nC7D,MAAMO,EACFC,GACAC,YAAYD,GACRE,KAAKF,GAAKA,CACd,CACAG,sBACI,OAAOD,KAAKF,GAAGI,aACnB,CACAC,iBAAW,SAAAC,GAAA,WAAAA,GAAwFP,GAAVrB,8BAAmDA,cAAa,EACzJ2B,iBADyF3B,8BAAE,CAAA6B,KACJR,EAAuBS,UAAA,2BAAAC,SAAA,mBAAAC,YAAA,IAclH,MAAMC,EACFC,cAEAC,UAMAC,iBAEAC,SACAd,YAAYY,EAAWE,GACnBb,KAAKW,UAAYA,EACjBX,KAAKa,SAAWA,CACpB,CAEAC,OAAOC,EAAMC,GACT,OAAAhB,KAAKU,cAAgBK,EACdA,EAAKD,OAAOd,KAAMgB,EAC7B,CAEAC,SACI,MAAMF,EAAOf,KAAKU,cAClB,GAAIK,EACA,OAAAf,KAAKU,mBAAgBQ,EACdH,EAAKE,QAEpB,CAEA,cAAIE,GACA,OAA6B,MAAtBnB,KAAKU,aAChB,CAKAU,gBAAgBL,GACZf,KAAKU,cAAgBK,CACzB,EAMJ,MAAMM,EAEFC,gBAEAC,WACAT,OAAOU,EAAQR,GACX,OAAAhB,KAAKsB,gBAAkBE,EAChBxB,KAAKyB,sBAAsBD,EAAQR,EAC9C,CACAC,SACQjB,KAAKsB,iBACLtB,KAAKsB,gBAAgBF,kBAEzBpB,KAAKsB,qBAAkBJ,EACnBlB,KAAKuB,aACLvB,KAAKuB,aACLvB,KAAKuB,gBAAaL,EAE1B,CACAQ,aAAaC,GACT3B,KAAKuB,WAAaI,CACtB,EAMJ,MAAMC,EACFC,YAEAC,kBAEAlD,gBAAkB,EAElBmD,aAAe,IAAIC,UAEnBC,UAAY,IAAID,UAEhBE,aAAe,IAAIF,UAEnBG,cAAgB,IAAIH,UAEpBI,gBAAkB,IAAIJ,UACtBjC,YAAY8B,GACR7B,KAAK6B,YAAcA,CACvB,CACAQ,cACIrC,KAAKkC,aAAaI,OAClBtC,KAAKkC,aAAaK,UACtB,CACAC,eACI,OAAOxC,KAAKkC,aAAaO,cAC7B,CACAC,eACI,OAAO1C,KAAKmC,cAAcM,cAC9B,CACAE,iBACI,OAAO3C,KAAKoC,gBAAgBK,cAChC,CAIAG,QACI5C,KAAK6B,YAAYZ,SACjBjB,KAAK+B,aAAaO,OAClBtC,KAAKkC,aAAaI,OAClBtC,KAAK+B,aAAaQ,WAClBvC,KAAKkC,aAAaK,WAClBvC,KAAKiC,UAAUM,WACfvC,KAAKmC,cAAcI,WACnBvC,KAAKoC,gBAAgBG,UACzB,CAEAM,cACI,OAAO7C,KAAK+B,aAAaU,cAC7B,CACAK,aACI,OAAO9C,KAAKiC,UAAUc,SAC1B,CACAC,WACIhD,KAAKiC,UAAUK,OACftC,KAAKiC,UAAUM,UACnB,CAEAU,gBACI,OAAOjD,KAAKiC,UAAUQ,cAC1B,CAEAS,YAAYC,EAAcR,GAClBQ,GACAnD,KAAKmC,cAAcG,OAEnBK,GACA3C,KAAKoC,gBAAgBE,OAAOtC,KAAKpB,gBAEzC,EAMJ,MAAMwE,EACFC,QACAC,OACAnE,QACAH,MACAuE,UACAC,SACAC,OAAS,IAAIzB,UACb0B,UAAY,IAAI1B,UAChBjC,YAAYsD,EAASC,EAAQnE,EAASH,EAAOuE,EAAWC,GACpDxD,KAAKqD,QAAUA,EACfrD,KAAKsD,OAASA,EACdtD,KAAKb,QAAUA,EACfa,KAAKhB,MAAQA,EACbgB,KAAKuD,UAAYA,EACjBvD,KAAKwD,SAAWA,EAChBxD,KAAKwD,SAASX,cAAcc,UAAU,KAClC3D,KAAK0D,UAAUnB,WACfvC,KAAKyD,OAAOlB,UAAS,EAE7B,CAEAqB,aACI5D,KAAKyD,OAAOnB,OACRtC,KAAKsD,OAAOO,cACZ7D,KAAKyD,OAAOlB,UAEpB,CACAuB,QACI,OAAO9D,KAAKyD,OAAOhB,cACvB,CAEAsB,cAAcC,GACVhE,KAAK0D,UAAUpB,KAAK0B,EACxB,CACAC,WACI,OAAOjE,KAAK0D,UAAUjB,cAC1B,EAEJ,MAAMyB,EAAiC,CACnCC,UAAW,EACXC,aAAa,EACbpD,aAAa,EACbqD,mBAAmB,EACnBC,iBAAiB,EACjBC,yBAAyB,EACzBC,wBAAwB,EACxBC,YAAa,CACTC,MAAO,cACPC,KAAM,aACNC,QAAS,gBACTC,QAAS,iBAGbC,aAAa,EACbC,gBAAgB,EAChBC,QAAS,IACTC,gBAAiB,IACjBC,YAAY,EACZC,aAAa,EACbC,WAAY,aACZC,cAAe,kBACftG,WAAY,cACZG,aAAc,gBACdoG,OAAQ,UACRC,SAAU,IACV1B,cAAc,EACd2B,gBAAgB,EAChBC,kBAAmB,cAEjBC,EAAe,IAAIC,iBAAe,eAQxC,MAAMC,UAAsBvE,EACxBwE,gBACAC,0BACAC,QACAhG,YAAY8F,EAAiBC,EAA2BC,GACpDC,QACAhG,KAAK6F,gBAAkBA,EACvB7F,KAAK8F,0BAA4BA,EACjC9F,KAAK+F,QAAUA,CACnB,CAKAtE,sBAAsBD,EAAQR,GAC1B,MAAMiF,EAAmBjG,KAAK8F,0BAA0BI,wBAAwB1E,EAAOb,WACvF,IAAIwF,EAMJA,SAAeF,EAAiBG,OAAO5E,EAAOX,UAK9Cb,KAAK+F,QAAQM,WAAWF,EAAaG,UACrCtG,KAAK0B,aAAa,KACd1B,KAAK+F,QAAQQ,WAAWJ,EAAaG,UACrCH,EAAaK,SAAQ,GAIrBxF,EACAhB,KAAK6F,gBAAgBY,aAAazG,KAAK0G,sBAAsBP,GAAenG,KAAK6F,gBAAgBc,YAGjG3G,KAAK6F,gBAAgBe,YAAY5G,KAAK0G,sBAAsBP,IAEzDA,CACX,CAEAO,sBAAsBP,GAClB,OAAOA,EAAaG,SAASO,UAAU,EAC3C,EAIJ,MAAMC,EACFC,aAAYC,UAAOC,YACnBC,kBACAC,cACQnH,KAAKkH,mBAAqBlH,KAAKkH,kBAAkBE,YACjDpH,KAAKkH,kBAAkBE,WAAWC,YAAYrH,KAAKkH,kBAE3D,CAOAjH,sBACI,OAAKD,KAAKkH,mBACNlH,KAAKsH,mBAEFtH,KAAKkH,iBAChB,CAMAI,mBACI,MAAMC,EAAYvH,KAAK+G,UAAUS,cAAc,OAC/CD,EAAUE,UAAUC,IAAI,qBACxBH,EAAUI,aAAa,YAAa,UACpC3H,KAAK+G,UAAUa,KAAKhB,YAAYW,GAChCvH,KAAKkH,kBAAoBK,CAC7B,CACApH,iBAAW,SAAAC,GAAA,WAAAA,GAAwF0G,EAAgB,EACnH3G,kBAjUyF3B,+BAAE,CAAAqJ,MAiUYf,EAAgBgB,QAAhBhB,EAAgBiB,UAAAC,WAAc,SAWzI,MAAMC,EACFC,YACAnI,YAAYmI,GACRlI,KAAKkI,YAAcA,CACvB,CACApH,OAAOU,EAAQR,GAAc,GACzB,OAAOhB,KAAKkI,YAAYpH,OAAOU,EAAQR,EAC3C,CAKAC,SACI,OAAOjB,KAAKkI,YAAYjH,QAC5B,EAWJ,MAAMkH,EACFC,qBAAoBpB,UAAOF,GAC3BhB,6BAA4BkB,UAAOqB,4BACnCtC,WAAUiB,UAAOsB,kBACjBvB,aAAYC,UAAOC,YAEnBsB,cAAgB,IAAIC,IAKpBpC,OAAOf,EAAeoD,GAElB,OAAOzI,KAAK0I,kBAAkB1I,KAAK2I,eAAetD,EAAeoD,GACrE,CACAE,eAAetD,EAAgB,GAAIoD,GAC/B,OAAKzI,KAAKuI,cAAcK,IAAIH,IACxBzI,KAAKuI,cAAcM,IAAIJ,EAAkB,CAAC,GAEzCzI,KAAKuI,cAAcK,IAAIH,GAAkBpD,KAC1CrF,KAAKuI,cAAcK,IAAIH,GAAkBpD,GAAiBrF,KAAK8I,mBAAmBzD,EAAeoD,IAE9FzI,KAAKuI,cAAcK,IAAIH,GAAkBpD,EACpD,CAKAyD,mBAAmBzD,EAAeoD,GAC9B,MAAMM,EAAO/I,KAAK+G,UAAUS,cAAc,OAC1CuB,SAAKC,GAAK,kBACVD,EAAKtB,UAAUC,IAAIrC,GACnB0D,EAAKtB,UAAUC,IAAI,mBACde,EAIDA,EAAiBxI,sBAAsB2G,YAAYmC,GAHnD/I,KAAKoI,kBAAkBnI,sBAAsB2G,YAAYmC,GAKtDA,CACX,CAMAE,kBAAkBF,GACd,OAAO,IAAInD,EAAcmD,EAAM/I,KAAK8F,0BAA2B9F,KAAK+F,QACxE,CAKA2C,kBAAkBK,GACd,OAAO,IAAId,EAAWjI,KAAKiJ,kBAAkBF,GACjD,CACA5I,iBAAW,SAAAC,GAAA,WAAAA,GAAwF+H,EAAO,EAC1GhI,kBA9ZyF3B,+BAAE,CAAAqJ,MA8ZYM,EAAOL,QAAPK,EAAOJ,UAAAC,WAAc,SAOhI,MAAMkB,EACFC,QACAC,UACAC,UACAC,OACAC,aACAC,gBAAkB,EAClBC,OAAS,GACThB,iBACAiB,qBACAC,MAAQ,EACR5J,YAAY8H,EAAOsB,EAASC,EAAWC,EAAWC,GAC9CtJ,KAAKmJ,QAAUA,EACfnJ,KAAKoJ,UAAYA,EACjBpJ,KAAKqJ,UAAYA,EACjBrJ,KAAKsJ,OAASA,EACdtJ,KAAKuJ,aAAe,IACb1B,EAAM+B,WACN/B,EAAMvE,QAETuE,EAAMvE,OAAOmB,cACbzE,KAAKuJ,aAAa9E,YAAc,IACzBoD,EAAM+B,QAAQnF,eACdoD,EAAMvE,OAAOmB,aAG5B,CAEAoF,KAAK1K,EAASH,EAAO8K,EAAW,CAAC,EAAGzJ,EAAO,IACvC,OAAOL,KAAK+J,sBAAsB1J,EAAMlB,EAASH,EAAOgB,KAAKgK,YAAYF,GAC7E,CAEAlF,QAAQzF,EAASH,EAAO8K,EAAW,CAAC,GAChC,MAAMzJ,EAAOL,KAAKuJ,aAAa9E,YAAYG,SAAW,GACtD,OAAO5E,KAAK+J,sBAAsB1J,EAAMlB,EAASH,EAAOgB,KAAKgK,YAAYF,GAC7E,CAEApF,MAAMvF,EAASH,EAAO8K,EAAW,CAAC,GAC9B,MAAMzJ,EAAOL,KAAKuJ,aAAa9E,YAAYC,OAAS,GACpD,OAAO1E,KAAK+J,sBAAsB1J,EAAMlB,EAASH,EAAOgB,KAAKgK,YAAYF,GAC7E,CAEAnF,KAAKxF,EAASH,EAAO8K,EAAW,CAAC,GAC7B,MAAMzJ,EAAOL,KAAKuJ,aAAa9E,YAAYE,MAAQ,GACnD,OAAO3E,KAAK+J,sBAAsB1J,EAAMlB,EAASH,EAAOgB,KAAKgK,YAAYF,GAC7E,CAEAjF,QAAQ1F,EAASH,EAAO8K,EAAW,CAAC,GAChC,MAAMzJ,EAAOL,KAAKuJ,aAAa9E,YAAYI,SAAW,GACtD,OAAO7E,KAAK+J,sBAAsB1J,EAAMlB,EAASH,EAAOgB,KAAKgK,YAAYF,GAC7E,CAIAG,MAAM5G,GAEF,UAAW6G,KAASlK,KAAKyJ,OACrB,QAAgBvI,IAAZmC,GACA,GAAI6G,EAAM7G,UAAYA,EAElB,YADA6G,EAAM1G,SAASnB,mBAKnB6H,EAAM1G,SAASnB,aAG3B,CAIA3D,OAAO2E,GACH,MAAM8G,EAAQnK,KAAKoK,WAAW/G,GAO9B,IANK8G,IAGLA,EAAME,YAAY7G,SAASZ,QAC3B5C,KAAKyJ,OAAOa,OAAOH,EAAMR,MAAO,GAChC3J,KAAKwJ,gBAAkBxJ,KAAKwJ,gBAAkB,GACzCxJ,KAAKuJ,aAAapF,YAAcnE,KAAKyJ,OAAOc,QAC7C,OAAO,EAEX,GAAIvK,KAAKwJ,gBAAkBxJ,KAAKuJ,aAAapF,WAAanE,KAAKyJ,OAAOzJ,KAAKwJ,iBAAkB,CACzF,MAAMgB,EAAIxK,KAAKyJ,OAAOzJ,KAAKwJ,iBAAiBhG,SACvCgH,EAAE1H,eACH9C,KAAKwJ,gBAAkBxJ,KAAKwJ,gBAAkB,EAC9CgB,EAAExH,WAEV,CACA,OAAO,CACX,CAIAyH,cAAczL,EAAQ,GAAIG,EAAU,GAAIuL,EAAkBpG,GACtD,MAAQE,0BAA2BxE,KAAKuJ,aACxC,UAAWW,KAASlK,KAAKyJ,OAAQ,CAC7B,MAAMkB,EAAoBnG,GAA0B0F,EAAMlL,QAAUA,EACpE,KAAMwF,GAA0BmG,IAAsBT,EAAM/K,UAAYA,EACpE+K,SAAM1G,SAASN,YAAYwH,EAAkBpG,GACtC4F,CAEf,CACA,OAAO,IACX,CAEAF,YAAYF,EAAW,CAAC,GACpB,MAAO,IAAK9J,KAAKuJ,gBAAiBO,EACtC,CAIAM,WAAW/G,GACP,QAASuH,EAAI,EAAGA,EAAI5K,KAAKyJ,OAAOc,OAAQK,IACpC,GAAI5K,KAAKyJ,OAAOmB,GAAGvH,UAAYA,EAC3B,MAAO,CAAEsG,MAAOiB,EAAGP,YAAarK,KAAKyJ,OAAOmB,IAGpD,OAAO,IACX,CAIAb,sBAAsBxG,EAAWpE,EAASH,EAAOsE,GAC7C,OAAIA,EAAOkC,eACAxF,KAAKsJ,OAAOuB,IAAI,IAAM7K,KAAK8K,mBAAmBvH,EAAWpE,EAASH,EAAOsE,IAE7EtD,KAAK8K,mBAAmBvH,EAAWpE,EAASH,EAAOsE,EAC9D,CAKAwH,mBAAmBvH,EAAWpE,EAASH,EAAOsE,GAC1C,IAAKA,EAAOyH,eACR,MAAM,IAAIC,MAAM,2BAKpB,MAAMC,EAAYjL,KAAKyK,cAAczL,EAAOG,EAASa,KAAKuJ,aAAahF,yBAA2BjB,EAAO0B,QAAU,EAAGhF,KAAKuJ,aAAajF,iBACxI,IAAMtE,KAAKuJ,aAAa/E,wBAA0BxF,GAAUG,IACxDa,KAAKuJ,aAAalF,mBACJ,OAAd4G,EACA,OAAOA,EAEXjL,KAAK0J,qBAAuBvK,EAC5B,IAAI+L,GAAe,EACflL,KAAKuJ,aAAapF,WAAanE,KAAKwJ,iBAAmBxJ,KAAKuJ,aAAapF,YACzE+G,GAAe,EACXlL,KAAKuJ,aAAanF,aAClBpE,KAAKiK,MAAMjK,KAAKyJ,OAAO,GAAGpG,UAGlC,MAAM8H,EAAanL,KAAKmJ,QAAQ/C,OAAO9C,EAAO+B,cAAerF,KAAKyI,kBAClEzI,KAAK2J,MAAQ3J,KAAK2J,MAAQ,EAC1B,IAAIyB,EAAmBjM,EACnBA,GAAWmE,EAAO4B,aAClBkG,EAAmBpL,KAAKqJ,UAAUgC,SAASC,kBAAgBC,KAAMpM,IAErE,MAAMqE,EAAW,IAAI5B,EAASuJ,GACxBK,EAAe,IAAIpI,EAAapD,KAAK2J,MAAOrG,EAAQ8H,EAAkBpM,EAAOuE,EAAWC,GAExFiI,EAAY,CAAC,CAAEC,QAAStI,EAAcuI,SAAUH,IAChDI,GAAgBC,WAASzF,OAAO,CAAEqF,YAAWK,OAAQ9L,KAAKoJ,YAC1DzI,GAAY,IAAIF,EAAgB6C,EAAOyH,eAAgBa,IACvDpK,EAAS2J,EAAWrK,OAAOH,GAAW2C,EAAOtC,aACnDwC,EAAS1B,kBAAoBN,EAAOuK,SACpC,MAAMC,EAAM,CACR3I,QAASrD,KAAK2J,MACd3K,MAAOA,GAAS,GAChBG,QAASA,GAAW,GACpBqE,WACAyI,QAASzI,EAASP,gBAClBiJ,SAAU1I,EAASX,cACnBiB,MAAO0H,EAAa1H,QACpBG,SAAUuH,EAAavH,WACvBzC,UAEJ,OAAK0J,IACDlL,KAAKwJ,gBAAkBxJ,KAAKwJ,gBAAkB,EAC9C2C,WAAW,KACPH,EAAIxI,SAASR,UAAS,IAG9BhD,KAAKyJ,OAAO2C,KAAKJ,GACVA,CACX,CACA7L,iBAAW,SAAAC,GAAA,WAAAA,GAAwF8I,GAjmBV1K,qBAimByCkH,GAjmBzClH,qBAimBkE2J,GAjmBlE3J,qBAimBsFA,YAjmBtFA,qBAimB8G6N,gBAjmB9G7N,qBAimB0IA,UAAS,EAC5O2B,kBAlmByF3B,+BAAE,CAAAqJ,MAkmBYqB,EAAapB,QAAboB,EAAanB,UAAAC,WAAc,SAUtI,MAAMsE,EACFC,cACAf,aACAlC,OACAnK,QACAH,MACAF,QACAF,gBACA4N,gBAEAlN,SAAQmN,WAAO,GAEfC,aAAe,GACfC,MAEA,UAAIC,GACA,OAAO5M,KAAK2M,OAChB,CAEA,gBAAIE,GACA,GAA2B,aAAvB7M,KAAK2M,QAAQG,MACb,MAAO,MAGf,CACAC,QACAC,WACAC,SACAC,IACAC,KACAC,KACAC,KACAtN,YAAYwM,EAAef,EAAclC,GACrCtJ,KAAKuM,cAAgBA,EACrBvM,KAAKwL,aAAeA,EACpBxL,KAAKsJ,OAASA,EACdtJ,KAAKb,QAAUqM,EAAarM,QAC5Ba,KAAKhB,MAAQwM,EAAaxM,MAC1BgB,KAAKlB,QAAU0M,EAAalI,OAC5BtD,KAAKwM,gBAAkBhB,EAAalI,OAAO0B,QAC3ChF,KAAK0M,aAAe,GAAGlB,EAAajI,aAAaiI,EAAalI,OAAO8B,aACrEpF,KAAKkN,IAAM1B,EAAahI,SAASP,gBAAgBU,UAAU,KACvD3D,KAAKsN,eAAc,GAEvBtN,KAAKmN,KAAO3B,EAAahI,SAAShB,eAAemB,UAAU,KACvD3D,KAAKtB,QAAO,GAEhBsB,KAAKoN,KAAO5B,EAAahI,SAASd,eAAeiB,UAAU,KACvD3D,KAAKmD,cAAa,GAEtBnD,KAAKqN,KAAO7B,EAAahI,SAASb,iBAAiBgB,UAAU4J,IACzDvN,KAAKpB,gBAAkB2O,IAE3BvN,KAAK2M,SAAQF,UAAO,CAChBK,MAAO,WACPU,OAAQ,CACJjI,SAAUvF,KAAKwL,aAAalI,OAAOiC,SACnCD,OAAQ,YAGpB,CACA6B,cACInH,KAAKkN,IAAIO,cACTzN,KAAKmN,KAAKM,cACVzN,KAAKoN,KAAKK,cACVzN,KAAKqN,KAAKI,cACVC,cAAc1N,KAAKgN,YACnBW,aAAa3N,KAAK+M,QACtB,CAIAO,gBACItN,KAAK2M,MAAMiB,OAAOjB,QAAeA,EAAOG,MAAO,aACT,IAAhC9M,KAAKlB,QAAQiG,gBAA2D,YAAhC/E,KAAKlB,QAAQiG,gBACvD/E,KAAKlB,QAAQkG,UACbhF,KAAK6N,eAAe,IAAM7N,KAAKtB,SAAUsB,KAAKlB,QAAQkG,SACtDhF,KAAKiN,cAAea,MAAOC,UAAY/N,KAAKlB,QAAQkG,QAChDhF,KAAKlB,QAAQqG,aACbnF,KAAKgO,gBAAgB,IAAMhO,KAAKiO,iBAAkB,IAG9D,CAIAA,iBACI,GAAqB,IAAjBjO,KAAKV,SAAkC,MAAjBU,KAAKV,UAAoBU,KAAKlB,QAAQkG,QAC5D,OAEJ,MAAMkJ,OAAUJ,MAAOC,UACjBI,EAAYnO,KAAKiN,SAAWiB,EAClClO,KAAKV,MAAMuJ,IAAKsF,EAAYnO,KAAKlB,QAAQkG,QAAW,KACb,eAAnChF,KAAKlB,QAAQ2G,mBACbzF,KAAKV,MAAMsO,OAAOtO,GAAS,IAAMA,GAEjCU,KAAKV,SAAW,GAChBU,KAAKV,MAAMuJ,IAAI,GAEf7I,KAAKV,SAAW,KAChBU,KAAKV,MAAMuJ,IAAI,IAEvB,CACA1F,eACIwK,aAAa3N,KAAK+M,SAClBW,cAAc1N,KAAKgN,YACnBhN,KAAK2M,MAAMiB,OAAOjB,QAAeA,EAAOG,MAAO,YAC/C9M,KAAK6N,eAAe,IAAM7N,KAAKtB,SAAUsB,KAAKwM,iBAC9CxM,KAAKlB,QAAQkG,QAAUhF,KAAKwM,gBAC5BxM,KAAKiN,cAAea,MAAOC,WAAa/N,KAAKlB,QAAQkG,SAAW,GAChEhF,KAAKV,MAAMuJ,KAAI,GACX7I,KAAKlB,QAAQqG,aACbnF,KAAKgO,gBAAgB,IAAMhO,KAAKiO,iBAAkB,GAE1D,CAIAvP,SAC+B,YAAvBsB,KAAK2M,QAAQG,QAGjBa,aAAa3N,KAAK+M,SAClB/M,KAAK2M,MAAMiB,OAAOjB,QAAeA,EAAOG,MAAO,aAC/C9M,KAAK6N,eAAe,IAAM7N,KAAKuM,cAAc7N,OAAOsB,KAAKwL,aAAanI,UAAWrD,KAAKwL,aAAalI,OAAOiC,UAC9G,CACA6I,WAC+B,YAAvBpO,KAAK2M,QAAQG,QAGjB9M,KAAKwL,aAAa5H,aACd5D,KAAKlB,QAAQ+E,cACb7D,KAAKtB,SAEb,CACA2P,cAC+B,YAAvBrO,KAAK2M,QAAQG,OAGmB,oBAAhC9M,KAAKlB,QAAQiG,iBACb4I,aAAa3N,KAAK+M,SAClB/M,KAAKlB,QAAQkG,QAAU,EACvBhF,KAAKiN,SAAW,EAEhBS,cAAc1N,KAAKgN,YACnBhN,KAAKV,MAAMuJ,IAAI,GAEvB,CACAyF,oBACyC,IAAhCtO,KAAKlB,QAAQiG,gBAA2D,oBAAhC/E,KAAKlB,QAAQiG,gBACrB,IAAjC/E,KAAKlB,QAAQmG,iBACU,YAAvBjF,KAAK2M,QAAQG,QAGjB9M,KAAK6N,eAAe,IAAM7N,KAAKtB,SAAUsB,KAAKlB,QAAQmG,iBACtDjF,KAAKlB,QAAQkG,QAAUhF,KAAKlB,QAAQmG,gBACpCjF,KAAKiN,cAAea,MAAOC,WAAa/N,KAAKlB,QAAQkG,SAAW,GAChEhF,KAAKV,MAAMuJ,KAAI,GACX7I,KAAKlB,QAAQqG,aACbnF,KAAKgO,gBAAgB,IAAMhO,KAAKiO,iBAAkB,IAE1D,CACAJ,eAAeU,EAAMxB,GACb/M,KAAKsJ,OACLtJ,KAAKsJ,OAAOkF,kBAAkB,IAAOxO,KAAK+M,QAAUZ,WAAW,IAAMnM,KAAKyO,iBAAiBF,GAAOxB,IAGlG/M,KAAK+M,QAAUZ,WAAW,IAAMoC,IAAQxB,EAEhD,CACAiB,gBAAgBO,EAAMxB,GACd/M,KAAKsJ,OACLtJ,KAAKsJ,OAAOkF,kBAAkB,IAAOxO,KAAKgN,WAAa0B,YAAY,IAAM1O,KAAKyO,iBAAiBF,GAAOxB,IAGtG/M,KAAKgN,WAAa0B,YAAY,IAAMH,IAAQxB,EAEpD,CACA0B,iBAAiBF,GACTvO,KAAKsJ,OACLtJ,KAAKsJ,OAAOuB,IAAI,IAAM0D,KAGtBA,GAER,CACApO,iBAAW,SAAAC,GAAA,WAAAA,GAAwFkM,GAtyBV9N,8BAsyBiC0K,GAtyBjC1K,8BAsyB2D4E,GAtyB3D5E,8BAsyBoFA,UAAS,EACtL2B,iBAvyByF3B,8BAAE,CAAA6B,KAuyBJiM,EAAKhM,UAAA,4BAAAqO,SAAA,EAAAC,aAAA,SAAAvQ,EAAAC,GAAA,EAAAD,GAvyBHG,uBAAE,0BAuyBJF,EAAA8P,UAAU,EAvyBR5P,CAuyBG,+BAALF,EAAA+P,aAAa,EAvyBX7P,CAuyBG,+BAALF,EAAAgQ,kBAAkB,GAAb,EAAAjQ,IAvyBHG,oCAAE,YAAAF,EAAAsO,QAAFpO,uBAAEF,EAAAoO,cAAFlO,wBAAE,UAAAF,EAAAuO,cAuyBC,EAAArM,YAAA,EAAAqO,SAAA,CAvyBHrQ,iCAAEsQ,MAAA3Q,EAAA4Q,MAAA,EAAAC,KAAA,EAAAC,OAAA,iXAAAC,SAAA,SAAA7Q,EAAAC,GAAA,EAAAD,GAAFG,uBAAE,EAAAJ,EAAA,eAAFI,CAwyBwB,EAAAK,EAAA,YAxyBxBL,CA2yBjB,EAAAS,EAAA,YA3yBiBT,CA+yBpC,EAAAY,EAAA,YA/yBoCZ,CAkzB9B,EAAAa,EAAA,aAG5B,EAAAhB,IArzB0DG,uBAAE,OAAAF,EAAAQ,QAAAgG,aAAFtG,+CAAE,OAAAF,EAAAU,OAAFR,+CAAE,OAAAF,EAAAa,SAAAb,EAAAQ,QAAAoG,YAAF1G,+CAAE,OAAAF,EAAAa,UAAAb,EAAAQ,QAAAoG,YAAF1G,+CAAE,OAAAF,EAAAQ,QAAAqG,aAqzB9D,EAAAgK,aAAA,CAG8BC,QAAIC,cAAA,EAAAC,KAAA,CAAAC,UAA+E,IACtIC,WAAQ,WAAY,IAChB7C,SAAM,cAAY8C,SAAM,CAAEC,QAAS,MAAI,EACvC/C,SAAM,YAAU8C,SAAM,CAAEC,QAAS,MAAI,EACrC/C,SAAM,aAAW8C,SAAM,CAAEC,QAAS,MAAI,EACtCC,cAAW,wBAAsBC,WAAQ,mCAAgC,EACzED,cAAW,uBAAqBC,WAAQ,sCAE/CC,gBAAA,IA0DT,MAAMC,EAAsB,IACrB5L,EACH6G,eAAgBuB,GAsBdyD,EAAgBA,CAACzM,EAAS,CAAC,KAC7B,MAAMmI,EAAY,CACd,CACIC,QAAShG,EACTiG,SAAU,CACN/B,QAASkG,EACTxM,YAIZ,SAAO0M,4BAAyBvE,EAAS,EAG7C,MAAMwE,EACF,cAAOC,CAAQ5M,EAAS,CAAC,GACrB,MAAO,CACH6M,SAAUF,EACVxE,UAAW,CAACsE,EAAczM,IAElC,CACAnD,iBAAW,SAAAC,GAAA,WAAAA,GAAwF6P,EAAY,EAC/G9P,iBAv6ByF3B,6BAAE,CAAA6B,KAu6BS4P,IACpG9P,iBAx6ByF3B,6BAAE,IAi7B/F,MAAM4R,EACF,cAAOF,CAAQ5M,EAAS,CAAC,GACrB,MAAO,CACH6M,SAAUF,EACVxE,UAAW,CACP,CACIC,QAAShG,EACTiG,SAAU,CACN/B,QAAS1F,EACTZ,YAKpB,CACAnD,iBAAW,SAAAC,GAAA,WAAAA,GAAwFgQ,EAAyB,EAC5HjQ,iBAj8ByF3B,6BAAE,CAAA6B,KAi8BS+P,IACpGjQ,iBAl8ByF3B,6BAAE,IAy8B/F,MAAM6R,EACF9D,cACAf,aACA8E,OACAnR,QACAH,MACAF,QACAF,gBACA4N,gBAEAlN,SAAQmN,WAAO,GAEfC,aAAe,GAEf,gBAAIG,GACA,MAAqB,aAAjB7M,KAAK2M,QACE,OAEJ,IACX,CAEAA,SAAQF,UAAO,YACfM,QACAC,WACAC,SACAC,IACAC,KACAC,KACAC,KACAtN,YAAYwM,EAAef,EAAc8E,GACrCtQ,KAAKuM,cAAgBA,EACrBvM,KAAKwL,aAAeA,EACpBxL,KAAKsQ,OAASA,EACdtQ,KAAKb,QAAUqM,EAAarM,QAC5Ba,KAAKhB,MAAQwM,EAAaxM,MAC1BgB,KAAKlB,QAAU0M,EAAalI,OAC5BtD,KAAKwM,gBAAkBhB,EAAalI,OAAO0B,QAC3ChF,KAAK0M,aAAe,GAAGlB,EAAajI,aAAaiI,EAAalI,OAAO8B,aACrEpF,KAAKkN,IAAM1B,EAAahI,SAASP,gBAAgBU,UAAU,KACvD3D,KAAKsN,eAAc,GAEvBtN,KAAKmN,KAAO3B,EAAahI,SAAShB,eAAemB,UAAU,KACvD3D,KAAKtB,QAAO,GAEhBsB,KAAKoN,KAAO5B,EAAahI,SAASd,eAAeiB,UAAU,KACvD3D,KAAKmD,cAAa,GAEtBnD,KAAKqN,KAAO7B,EAAahI,SAASb,iBAAiBgB,UAAU4J,IACzDvN,KAAKpB,gBAAkB2O,GAE/B,CACApG,cACInH,KAAKkN,IAAIO,cACTzN,KAAKmN,KAAKM,cACVzN,KAAKoN,KAAKK,cACVzN,KAAKqN,KAAKI,cACVC,cAAc1N,KAAKgN,YACnBW,aAAa3N,KAAK+M,QACtB,CAIAO,gBACItN,KAAK2M,MAAM9D,IAAI,aACuB,IAAhC7I,KAAKlB,QAAQiG,gBAA2D,YAAhC/E,KAAKlB,QAAQiG,iBAAiC/E,KAAKlB,QAAQkG,UACrGhF,KAAK+M,QAAUZ,WAAW,KACtBnM,KAAKtB,QAAO,EACbsB,KAAKlB,QAAQkG,SAChBhF,KAAKiN,cAAea,MAAOC,UAAY/N,KAAKlB,QAAQkG,QAChDhF,KAAKlB,QAAQqG,cACbnF,KAAKgN,WAAa0B,YAAY,IAAM1O,KAAKiO,iBAAkB,MAG/DjO,KAAKlB,QAAQ0G,gBACbxF,KAAKsQ,OAAOC,MAEpB,CAIAtC,iBACI,GAAqB,IAAjBjO,KAAKV,SAAkC,MAAjBU,KAAKV,UAAoBU,KAAKlB,QAAQkG,QAC5D,OAEJ,MAAMkJ,OAAUJ,MAAOC,UACjBI,EAAYnO,KAAKiN,SAAWiB,EAClClO,KAAKV,MAAMuJ,IAAKsF,EAAYnO,KAAKlB,QAAQkG,QAAW,KACb,eAAnChF,KAAKlB,QAAQ2G,mBACbzF,KAAKV,MAAMsO,OAAOtO,GAAS,IAAMA,GAEjCU,KAAKV,SAAW,GAChBU,KAAKV,MAAMuJ,IAAI,GAEf7I,KAAKV,SAAW,KAChBU,KAAKV,MAAMuJ,IAAI,IAEvB,CACA1F,eACIwK,aAAa3N,KAAK+M,SAClBW,cAAc1N,KAAKgN,YACnBhN,KAAK2M,MAAM9D,IAAI,UACf7I,KAAKlB,QAAQkG,QAAUhF,KAAKwM,gBAC5BxM,KAAK+M,QAAUZ,WAAW,IAAMnM,KAAKtB,SAAUsB,KAAKwM,iBACpDxM,KAAKiN,cAAea,MAAOC,WAAa/N,KAAKwM,iBAAmB,GAChExM,KAAKV,MAAMuJ,KAAI,GACX7I,KAAKlB,QAAQqG,cACbnF,KAAKgN,WAAa0B,YAAY,IAAM1O,KAAKiO,iBAAkB,IAEnE,CAIAvP,SACyB,YAAjBsB,KAAK2M,UAGTgB,aAAa3N,KAAK+M,SAClB/M,KAAK2M,MAAM9D,IAAI,WACf7I,KAAK+M,QAAUZ,WAAW,IAAMnM,KAAKuM,cAAc7N,OAAOsB,KAAKwL,aAAanI,UAChF,CACA+K,WACyB,YAAjBpO,KAAK2M,UAGT3M,KAAKwL,aAAa5H,aACd5D,KAAKlB,QAAQ+E,cACb7D,KAAKtB,SAEb,CACA2P,cACyB,YAAjBrO,KAAK2M,UAGTgB,aAAa3N,KAAK+M,SAClB/M,KAAKlB,QAAQkG,QAAU,EACvBhF,KAAKiN,SAAW,EAEhBS,cAAc1N,KAAKgN,YACnBhN,KAAKV,MAAMuJ,IAAI,GACnB,CACAyF,oBACyC,IAAhCtO,KAAKlB,QAAQiG,gBAA2D,oBAAhC/E,KAAKlB,QAAQiG,gBACrB,IAAjC/E,KAAKlB,QAAQmG,iBACI,YAAjBjF,KAAK2M,UAGT3M,KAAK+M,QAAUZ,WAAW,IAAMnM,KAAKtB,SAAUsB,KAAKlB,QAAQmG,iBAC5DjF,KAAKlB,QAAQkG,QAAUhF,KAAKlB,QAAQmG,gBACpCjF,KAAKiN,cAAea,MAAOC,WAAa/N,KAAKlB,QAAQkG,SAAW,GAChEhF,KAAKV,MAAMuJ,KAAI,GACX7I,KAAKlB,QAAQqG,cACbnF,KAAKgN,WAAa0B,YAAY,IAAM1O,KAAKiO,iBAAkB,KAEnE,CACA9N,iBAAW,SAAAC,GAAA,WAAAA,GAAwFiQ,GAnmCV7R,8BAmmC4C0K,GAnmC5C1K,8BAmmCsE4E,GAnmCtE5E,8BAmmC+FA,kBAAiB,EACzM2B,iBApmCyF3B,8BAAE,CAAA6B,KAomCJgQ,EAAgB/P,UAAA,4BAAAqO,SAAA,EAAAC,aAAA,SAAAvQ,EAAAC,GAAA,EAAAD,GApmCdG,uBAAE,0BAomCJF,EAAA8P,UAAU,EApmCR5P,CAomCc,+BAAhBF,EAAA+P,aAAa,EApmCX7P,CAomCc,+BAAhBF,EAAAgQ,kBAAkB,GAAF,EAAAjQ,IApmCdG,uBAAEF,EAAAoO,cAAFlO,wBAAE,UAAAF,EAAAuO,cAomCY,EAAArM,YAAA,EAAAqO,SAAA,CApmCdrQ,iCAAEsQ,MAAA3Q,EAAA4Q,MAAA,EAAAC,KAAA,EAAAC,OAAA,iXAAAC,SAAA,SAAA7Q,EAAAC,GAAA,EAAAD,GAAFG,uBAAE,EAAAe,EAAA,eAAFf,CAqmCwB,EAAAiB,EAAA,YArmCxBjB,CAwmCjB,EAAAkB,EAAA,YAxmCiBlB,CA4mCpC,EAAAmB,EAAA,YA5mCoCnB,CA+mC9B,EAAAoB,EAAA,aAG5B,EAAAvB,IAlnC0DG,uBAAE,OAAAF,EAAAQ,QAAAgG,aAAFtG,+CAAE,OAAAF,EAAAU,OAAFR,+CAAE,OAAAF,EAAAa,SAAAb,EAAAQ,QAAAoG,YAAF1G,+CAAE,OAAAF,EAAAa,UAAAb,EAAAQ,QAAAoG,YAAF1G,+CAAE,OAAAF,EAAAQ,QAAAqG,aAknC9D,EAAAgK,aAAA,CAG8BC,QAAIC,cAAA,EAAAQ,gBAAA,IA4CnE,MAAMW,EAAkC,IACjCtM,EACH6G,eAAgBsF,GAEpB,MAAMI,EACF,cAAOP,CAAQ5M,EAAS,CAAC,GACrB,MAAO,CACH6M,SAAUM,EACVhF,UAAW,CACP,CACIC,QAAShG,EACTiG,SAAU,CACN/B,QAAS4G,EACTlN,YAKpB,CACAnD,iBAAW,SAAAC,GAAA,WAAAA,GAAwFqQ,EAAsB,EACzHtQ,iBArrCyF3B,6BAAE,CAAA6B,KAqrCSoQ,IACpGtQ,iBAtrCyF3B,6BAAE","names":["_c0","Toast_button_0_Template","rf","ctx","_r1","i0","ctx_r1","remove","Toast_div_1_ng_container_2_Template","duplicatesCount","Toast_div_1_Template","options","titleClass","title","Toast_div_2_Template","messageClass","message","Toast_div_3_Template","Toast_div_4_Template","width","ToastNoAnimation_button_0_Template","ToastNoAnimation_div_1_ng_container_2_Template","ToastNoAnimation_div_1_Template","ToastNoAnimation_div_2_Template","ToastNoAnimation_div_3_Template","ToastNoAnimation_div_4_Template","ToastContainerDirective","el","constructor","this","getContainerElement","nativeElement","static","__ngFactoryType__","type","selectors","exportAs","standalone","ComponentPortal","_attachedHost","component","viewContainerRef","injector","attach","host","newestOnTop","detach","undefined","isAttached","setAttachedHost","BasePortalHost","_attachedPortal","_disposeFn","portal","attachComponentPortal","setDisposeFn","fn","ToastRef","_overlayRef","componentInstance","_afterClosed","Subject","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","next","complete","manualClosed","asObservable","timeoutReset","countDuplicate","close","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastPackage","toastId","config","toastType","toastRef","_onTap","_onAction","subscribe","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","InjectionToken","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","super","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","inject","DOCUMENT","_containerElement","ngOnDestroy","parentNode","removeChild","_createContainer","container","createElement","classList","add","setAttribute","body","token","factory","ɵfac","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","ComponentFactoryResolver","ApplicationRef","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ToastrService","overlay","_injector","sanitizer","ngZone","toastrConfig","currentlyActive","toasts","previousToastMessage","index","default","show","override","_preBuildNotification","applyConfig","clear","toast","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","keepInactive","overlayRef","sanitizedMessage","sanitize","SecurityContext","HTML","toastPackage","providers","provide","useValue","toastInjector","Injector","parent","instance","ins","onShown","onHidden","setTimeout","push","i2","Toast","toastrService","originalTimeout","signal","toastClasses","state","_state","displayStyle","value","timeout","intervalId","hideTime","sub","sub1","sub2","sub3","activateToast","count","params","unsubscribe","clearInterval","clearTimeout","update","outsideTimeout","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","hostVars","hostBindings","features","attrs","decls","vars","consts","template","dependencies","NgIf","encapsulation","data","animation","trigger","style","opacity","transition","animate","changeDetection","DefaultGlobalConfig","provideToastr","makeEnvironmentProviders","ToastrModule","forRoot","ngModule","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-toastr/fesm2022/ngx-toastr.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    el;\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastContainerDirective, isStandalone: true, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    _attachedHost;\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    _overlayRef;\n    /** The instance of component opened into the toast. */\n    componentInstance;\n    /** Count of duplicates of this toast */\n    duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    _afterClosed = new Subject();\n    /** triggered when toast is activated */\n    _activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    _manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    _resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    _countDuplicate = new Subject();\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    toastId;\n    config;\n    message;\n    title;\n    toastType;\n    toastRef;\n    _onTap = new Subject();\n    _onAction = new Subject();\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    _hostDomElement;\n    _componentFactoryResolver;\n    _appRef;\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalHost;\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }] });\n\nclass Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    state;\n    /** controls animation */\n    get _state() {\n        return this.state();\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state().value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n        this.state = signal({\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.update(state => ({ ...state, value: 'active' }));\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n            this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.update(state => ({ ...state, value: 'active' }));\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.update(state => ({ ...state, value: 'removed' }));\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width.set(0);\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state().value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: Toast, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this._state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('flyInOut', [\n                state('inactive', style({ opacity: 0 })),\n                state('active', style({ opacity: 1 })),\n                state('removed', style({ opacity: 0 })),\n                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n                        ]),\n                    ],\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], _state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n    const providers = [\n        {\n            provide: TOAST_CONFIG,\n            useValue: {\n                default: DefaultGlobalConfig,\n                config,\n            }\n        }\n    ];\n    return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [provideToastr(config)],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, imports: [Toast], exports: [Toast] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nclass ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state() === 'inactive') {\n            return 'none';\n        }\n        return null;\n    }\n    /** controls animation */\n    state = signal('inactive');\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.set('active');\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.set('active');\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.set('removed');\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width.set(0);\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state() === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastNoAnimation, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, imports: [ToastNoAnimation], exports: [ToastNoAnimation] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n"],"x_google_ignoreList":[0]}