{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-skeleton_mjs.js","mappings":"oSAKA,SAAAA,EAAAC,EAAAC,GAiDM,GAjDN,EAAAD,GAWsGE,sBAAE,SAsClG,EAAAF,EAAA,OAAAG,EAAAF,EAAAG,UAtCgGF,wBAAE,QAAAC,EAqChF,EAvCxB,MAAME,GAENA,EAAoBC,UAAI,SAAAC,GAAA,WAAAA,GAAwFF,EAAmB,EACnIA,EAAoBG,UADkFN,8BAAE,CAAAO,KACJJ,EAAmBK,UAAA,4DAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,mCAAAC,SAAA,SAAAd,EAAAC,GAAA,EAAAD,GADjBE,sBAAE,UAExD,EAAAa,cAAA,IAUhD,MAAMC,EACFC,cACIC,KAAKC,MAAQ,EACbD,KAAKE,aAAe,IACpBF,KAAKG,aAAe,GACxB,CAIAC,aAAaC,EAAKC,GACd,MAAO,IAAGC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAAO,KAClE,CACAK,cAGIV,KAAKW,WACDC,MAAMC,KAAKD,MAAMZ,KAAKC,OAAOa,QACxBC,IAAIC,GAAOhB,KAAKI,aAAaJ,KAAKE,aAAcF,KAAKG,cAClE,EAEJL,EAAaV,UAAI,SAAAC,GAAA,WAAAA,GAAwFS,EAAY,EACrHA,EAAaR,UAjCyFN,8BAAE,CAAAO,KAiCXO,EAAYN,UAAA,8CAAAyB,OAAA,CAAAhB,MAAA,QAAAC,aAAA,eAAAC,aAAA,gBAAAe,SAAA,CAjCHlC,kCAAES,MAAA,EAAAC,KAAA,EAAAC,OAAA,0FAAAC,SAAA,SAAAd,EAAAC,GAAA,EAAAD,GAAFE,uBAAE,EAAAH,EAAA,WAqC/E,EAAAC,GArC6EE,uBAAE,UAAAD,EAAA4B,WAmCtE,EAAAQ,aAAA,CAI4BC,WAAUvB,cAAA,IAqBxE,MAAMwB,GAENA,EAAejC,UAAI,SAAAC,GAAA,WAAAA,GAAwFgC,EAAc,EACzHA,EAAeC,UA/DuFtC,6BAAE,CAAAO,KA+DI8B,IAG5GA,EAAeE,UAlEuFvC,6BAAE,CAAAwC,QAAA,CAkE8BC","names":["SkeletonText_p_0_Template","rf","ctx","i0","width_r1","$implicit","SkeletonPlaceholder","ɵfac","__ngFactoryType__","ɵcmp","type","selectors","decls","vars","consts","template","encapsulation","SkeletonText","constructor","this","lines","minLineWidth","maxLineWidth","getRandomInt","min","max","Math","floor","random","ngOnChanges","lineWidths","Array","from","keys","map","num","inputs","features","dependencies","i1","SkeletonModule","ɵmod","ɵinj","imports","CommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-skeleton.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { SkeletonModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-skeleton--basic)\n */\nclass SkeletonPlaceholder {\n}\nSkeletonPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSkeletonPlaceholder.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: SkeletonPlaceholder, selector: \"cds-skeleton-placeholder, ibm-skeleton-placeholder\", ngImport: i0, template: `\n\t\t<div class=\"cds--skeleton__placeholder\"></div>`, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonPlaceholder, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-skeleton-placeholder, ibm-skeleton-placeholder\",\n                    template: `\n\t\t<div class=\"cds--skeleton__placeholder\"></div>`\n                }]\n        }] });\n\nclass SkeletonText {\n    constructor() {\n        this.lines = 5;\n        this.minLineWidth = 100;\n        this.maxLineWidth = 300;\n    }\n    /**\n     * Returns a random width in pixels based off a min width, and a max width.\n     */\n    getRandomInt(min, max) {\n        return `${Math.floor(Math.random() * (max - min + 1) + min) + \"px\"}`;\n    }\n    ngOnChanges() {\n        // Creates an array of length defined by input lines with content from\n        // 0 to lines - 1, maps each value to a random width in pixels.\n        this.lineWidths =\n            Array.from(Array(this.lines).keys())\n                .map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));\n    }\n}\nSkeletonText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonText, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSkeletonText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: SkeletonText, selector: \"cds-skeleton-text, ibm-skeleton-text\", inputs: { lines: \"lines\", minLineWidth: \"minLineWidth\", maxLineWidth: \"maxLineWidth\" }, usesOnChanges: true, ngImport: i0, template: `\n\t\t<p\n\t\t\t*ngFor=\"let width of lineWidths\"\n\t\t\tclass=\"cds--skeleton__text\"\n\t\t\t[style.width]=\"width\">\n\t\t</p>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonText, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-skeleton-text, ibm-skeleton-text\",\n                    template: `\n\t\t<p\n\t\t\t*ngFor=\"let width of lineWidths\"\n\t\t\tclass=\"cds--skeleton__text\"\n\t\t\t[style.width]=\"width\">\n\t\t</p>\n\t`\n                }]\n        }], propDecorators: { lines: [{\n                type: Input\n            }], minLineWidth: [{\n                type: Input\n            }], maxLineWidth: [{\n                type: Input\n            }] } });\n\nclass SkeletonModule {\n}\nSkeletonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSkeletonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonModule, declarations: [SkeletonPlaceholder,\n        SkeletonText], imports: [CommonModule], exports: [SkeletonPlaceholder,\n        SkeletonText] });\nSkeletonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SkeletonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SkeletonPlaceholder,\n                        SkeletonText\n                    ],\n                    exports: [\n                        SkeletonPlaceholder,\n                        SkeletonText\n                    ],\n                    imports: [\n                        CommonModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SkeletonModule, SkeletonPlaceholder, SkeletonText };\n"],"x_google_ignoreList":[0]}