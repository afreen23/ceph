{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-notification_mjs.js","mappings":"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","names":["_c0","a0","$implicit","_c1","a1","ActionableNotification__svg_svg_1_Template","rf","ctx","i0","ctx_r0","iconDictionary","notificationObj","type","variant","ActionableNotification_div_4_Template","title","ActionableNotification_div_5_ng_container_2_Template","link_r2","href","text","ActionableNotification_div_5_Template","message","links","ActionableNotification_ng_container_6_Template","ActionableNotification_ng_container_7_button_1_Template","_r3","$event","action_r4","onClick","ActionableNotification_ng_container_7_Template","actions","ActionableNotification_ng_container_8_Template","ActionableNotification_button_9_Template","_r5","onClose","closeLabel","Notification__svg_svg_1_Template","Notification_div_3_Template","Notification_div_4_Template","Notification_ng_container_5_Template","Notification_button_6_Template","_r2","Toast__svg_svg_0_Template","Toast_h3_2_Template","Toast_div_3_Template","subtitle","Toast_p_4_Template","caption","Toast_ng_container_5_Template","Toast_button_6_Template","ActionableButton","constructor","this","actionableButton","ɵfac","__ngFactoryType__","ɵdir","selectors","hostVars","hostBindings","ActionableSubtitle","baseClass","ActionableTitle","NotificationDisplayService","applicationRef","close","notificationRef","hostView","setTimeout","detachView","destroy","ɵprov","token","factory","BaseNotification","notificationDisplayService","i18n","EventEmitter","error","info","success","warning","defaultNotificationObj","showClose","get","role","_notificationObj","Object","assign","roleAttr","emit","action","event","click","isObservable","next","i2","ɵcmp","outputs","decls","vars","template","encapsulation","ActionableNotification","super","notificationID","notificationCount","notificationClass","obj","of","toastVariant","isError","isInfo","isInfoSquare","isSuccess","isWarning","isWarningAlt","isLowContrast","lowContrast","isCloseHidden","inputs","features","consts","actionsTemplate","dependencies","i3","i3$1","i5","i4","NotificationSubtitle","NotificationTitle","Notification","ToastTitle","ToastSubtitle","ToastCaption","Toast","toastID","toastCount","toastClass","ngOnInit","NOTIFICATION","CLOSE_BUTTON","NotificationService","injector","viewContainer","ngZone","notificationRefs","Array","showNotification","notificationComp","createComponent","instance","push","target","document","querySelector","appendChild","location","nativeElement","body","notificationClassName","notificationList","createElement","className","firstChild","insertBefore","duration","runOutsideAngular","run","smart","getSmartTimeout","subscribe","componentRef","showToast","showActionable","index","indexOf","splice","timeout","trim","split","length","ngOnDestroy","forEach","ref","NotificationModule","ɵmod","ɵinj","providers","imports","ButtonModule","CommonModule","I18nModule","ExperimentalModule","LinkModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-notification.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, HostBinding, Injectable, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';\nimport { isObservable, of } from 'rxjs';\nimport * as i2 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport * as i3 from 'carbon-components-angular/button';\nimport { ButtonModule } from 'carbon-components-angular/button';\nimport * as i3$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from 'carbon-components-angular/link';\nimport { LinkModule } from 'carbon-components-angular/link';\nimport * as i4 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { ExperimentalModule } from 'carbon-components-angular/experimental';\n\nclass ActionableButton {\n    constructor() {\n        this.actionableButton = true;\n        this.type = \"button\";\n    }\n}\nActionableButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableButton, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nActionableButton.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ActionableButton, selector: \"[cdsActionableButton], [ibmActionableButton]\", host: { properties: { \"class.cds--actionable-notification__action-button\": \"this.actionableButton\", \"attr.type\": \"this.type\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableButton, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsActionableButton], [ibmActionableButton]\"\n                }]\n        }], propDecorators: { actionableButton: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification__action-button\"]\n            }], type: [{\n                type: HostBinding,\n                args: [\"attr.type\"]\n            }] } });\n\nclass ActionableSubtitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nActionableSubtitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableSubtitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nActionableSubtitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ActionableSubtitle, selector: \"[cdsActionableSubtitle], [ibmActionableSubtitle]\", host: { properties: { \"class.cds--actionable-notification__subtitle\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableSubtitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsActionableSubtitle], [ibmActionableSubtitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification__subtitle\"]\n            }] } });\n\nclass ActionableTitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nActionableTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nActionableTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ActionableTitle, selector: \"[cdsActionableTitle], [ibmActionableTitle]\", host: { properties: { \"class.cds--actionable-notification__title\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsActionableTitle], [ibmActionableTitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification__title\"]\n            }] } });\n\nclass NotificationDisplayService {\n    constructor(applicationRef) {\n        this.applicationRef = applicationRef;\n    }\n    /**\n     * Programatically closes notification based on `notificationRef`.\t *\n     */\n    close(notificationRef) {\n        if (notificationRef.hostView) {\n            setTimeout(() => {\n                this.applicationRef.detachView(notificationRef.hostView);\n                notificationRef.destroy();\n            }, 200);\n        }\n    }\n}\nNotificationDisplayService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationDisplayService, deps: [{ token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationDisplayService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationDisplayService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationDisplayService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }]; } });\n\n/**\n * Base class for `Notification`, `ActionableNotification`, & `Toast`\n * consisting of common functionality\n *\n * Get started with importing the module:\n *\n * ```typescript\n * import { NotificationModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-notification--inline-notification)\n */\nclass BaseNotification {\n    constructor(notificationDisplayService, i18n) {\n        this.notificationDisplayService = notificationDisplayService;\n        this.i18n = i18n;\n        /**\n         * Emits on close.\n         */\n        this.close = new EventEmitter();\n        // Get icon name(value) for service based on the notification type (key)\n        this.iconDictionary = {\n            \"error\": \"error--filled\",\n            \"info\": \"information--filled\",\n            \"info-square\": \"information--square--filled\",\n            \"success\": \"checkmark--filled\",\n            \"warning\": \"warning--filled\",\n            \"warning-alt\": \"warning--alt--filled\"\n        };\n        this.defaultNotificationObj = {\n            title: \"\",\n            message: \"\",\n            type: \"info\",\n            showClose: true,\n            closeLabel: this.i18n.get(\"NOTIFICATION.CLOSE_BUTTON\"),\n            role: \"status\"\n        };\n        this._notificationObj = Object.assign({}, this.defaultNotificationObj);\n    }\n    /**\n     * Set role attribute for component\n     * `Status` is default for inline-notification & toast component\n     * `alertdialog` is default for actionable-notification\n     */\n    get roleAttr() {\n        return this._notificationObj.role;\n    }\n    /**\n     * Emits close event.\n     */\n    onClose() {\n        this.close.emit();\n    }\n    onClick(action, event) {\n        if (!action.click) {\n            return;\n        }\n        if (isObservable(action.click)) {\n            action.click.next({ event, action });\n        }\n        else {\n            action.click({ event, action });\n        }\n    }\n    destroy() {\n        this.notificationDisplayService.close(this);\n    }\n}\nBaseNotification.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseNotification, deps: [{ token: NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nBaseNotification.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: BaseNotification, selector: \"ng-component\", outputs: { close: \"close\" }, host: { properties: { \"attr.role\": \"this.roleAttr\" } }, ngImport: i0, template: \"\", isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: BaseNotification, decorators: [{\n            type: Component,\n            args: [{\n                    template: \"\"\n                }]\n        }], ctorParameters: function () { return [{ type: NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { roleAttr: [{\n                type: HostBinding,\n                args: [\"attr.role\"]\n            }], close: [{\n                type: Output\n            }] } });\n\n/**\n * Actionable notification allows for interactive elements within a notification. There are two variants offered, inline & toast.\n *\n * [See demo](../../?path=/story/components-notification--actionable-notification)\n */\nclass ActionableNotification extends BaseNotification {\n    constructor(notificationDisplayService, i18n) {\n        super(notificationDisplayService, i18n);\n        this.notificationDisplayService = notificationDisplayService;\n        this.i18n = i18n;\n        this.notificationID = `notification-${ActionableNotification.notificationCount++}`;\n        this.notificationClass = true;\n        /**\n         * Set default variant & role, alternatives can be provided through notificationObj property\n         */\n        this.defaultNotificationObj = {\n            ...this.defaultNotificationObj,\n            variant: \"inline\",\n            role: \"alertdialog\"\n        };\n    }\n    /**\n     * Can have `type`, `title`, and `message` members.\n     *\n     * `type` can be one of `\"error\"`, `\"info\"`, `\"info-square\"`, `\"warning\"`, `\"warning-alt\"`, or `\"success\"`\n     *\n     * `message` is the message to display\n     */\n    get notificationObj() {\n        return this._notificationObj;\n    }\n    set notificationObj(obj) {\n        if (obj.closeLabel && !isObservable(obj.closeLabel)) {\n            obj.closeLabel = of(obj.closeLabel);\n        }\n        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);\n    }\n    get toastVariant() { return this.notificationObj.variant === \"toast\"; }\n    get isError() { return this.notificationObj.type === \"error\"; }\n    get isInfo() { return this.notificationObj.type === \"info\"; }\n    get isInfoSquare() { return this.notificationObj.type === \"info-square\"; }\n    get isSuccess() { return this.notificationObj.type === \"success\"; }\n    get isWarning() { return this.notificationObj.type === \"warning\"; }\n    get isWarningAlt() { return this.notificationObj.type === \"warning-alt\"; }\n    get isLowContrast() { return this.notificationObj.lowContrast; }\n    get isCloseHidden() { return !this._notificationObj.showClose; }\n}\nActionableNotification.notificationCount = 0;\nActionableNotification.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableNotification, deps: [{ token: NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nActionableNotification.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ActionableNotification, selector: \"cds-actionable-notification, ibm-actionable-notification\", inputs: { notificationObj: \"notificationObj\" }, host: { properties: { \"attr.id\": \"this.notificationID\", \"class.cds--actionable-notification\": \"this.notificationClass\", \"class.cds--actionable-notification--toast\": \"this.toastVariant\", \"class.cds--actionable-notification--error\": \"this.isError\", \"class.cds--actionable-notification--info\": \"this.isInfo\", \"class.cds--actionable-notification--info-square\": \"this.isInfoSquare\", \"class.cds--actionable-notification--success\": \"this.isSuccess\", \"class.cds--actionable-notification--warning\": \"this.isWarning\", \"class.cds--actionable-notification--warning-alt\": \"this.isWarningAlt\", \"class.cds--actionable-notification--low-contrast\": \"this.isLowContrast\", \"class.cds--actionable-notification--hide-close-button\": \"this.isCloseHidden\" } }, usesInheritance: true, ngImport: i0, template: `\n\t\t<div class=\"cds--actionable-notification__details\">\n\t\t\t<svg\n\t\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\t\tsize=\"20\"\n\t\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--inline-notification__icon': notificationObj.variant === 'inline',\n\t\t\t\t\t'cds--toast-notification__icon': notificationObj.variant === 'toast'\n\t\t\t\t}\"\n\t\t\t\tclass=\"cds--actionable-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"cds--actionable-notification__text-wrapper\">\n\t\t\t\t<div class=\"cds--actionable-notification__content\">\n\t\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsActionableTitle [innerHTML]=\"notificationObj.title\"></div>\n\t\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsActionableSubtitle>\n\t\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t\t\t<a cdsLink [href]=\"link.href\">{{link.text}}</a>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj }\"></ng-container>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-container *ngIf=\"!notificationObj.actionsTemplate\">\n\t\t\t<button\n\t\t\t\t*ngFor=\"let action of notificationObj.actions\"\n\t\t\t\t(click)=\"onClick(action, $event)\"\n\t\t\t\t[cdsButton]=\"notificationObj.variant === 'inline' ? 'ghost' : 'tertiary'\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\tcdsActionableButton>\n\t\t\t\t{{action.text}}\n\t\t\t</button>\n\t\t</ng-container>\n\t\t<ng-container *ngTemplateOutlet=\"notificationObj.actionsTemplate; context: { $implicit: notificationObj }\"></ng-container>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"cds--actionable-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--actionable-notification__close-icon\"></svg>\n\t\t</button>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i3.Button, selector: \"[cdsButton], [ibmButton]\", inputs: [\"ibmButton\", \"cdsButton\", \"size\", \"skeleton\", \"iconOnly\", \"isExpressive\"] }, { kind: \"directive\", type: i3$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3$1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i5.Link, selector: \"[cdsLink], [ibmLink]\", inputs: [\"inline\", \"disabled\"] }, { kind: \"directive\", type: i4.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"directive\", type: ActionableButton, selector: \"[cdsActionableButton], [ibmActionableButton]\" }, { kind: \"directive\", type: ActionableTitle, selector: \"[cdsActionableTitle], [ibmActionableTitle]\" }, { kind: \"directive\", type: ActionableSubtitle, selector: \"[cdsActionableSubtitle], [ibmActionableSubtitle]\" }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ActionableNotification, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-actionable-notification, ibm-actionable-notification\",\n                    template: `\n\t\t<div class=\"cds--actionable-notification__details\">\n\t\t\t<svg\n\t\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\t\tsize=\"20\"\n\t\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--inline-notification__icon': notificationObj.variant === 'inline',\n\t\t\t\t\t'cds--toast-notification__icon': notificationObj.variant === 'toast'\n\t\t\t\t}\"\n\t\t\t\tclass=\"cds--actionable-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"cds--actionable-notification__text-wrapper\">\n\t\t\t\t<div class=\"cds--actionable-notification__content\">\n\t\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsActionableTitle [innerHTML]=\"notificationObj.title\"></div>\n\t\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsActionableSubtitle>\n\t\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t\t\t<a cdsLink [href]=\"link.href\">{{link.text}}</a>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj }\"></ng-container>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-container *ngIf=\"!notificationObj.actionsTemplate\">\n\t\t\t<button\n\t\t\t\t*ngFor=\"let action of notificationObj.actions\"\n\t\t\t\t(click)=\"onClick(action, $event)\"\n\t\t\t\t[cdsButton]=\"notificationObj.variant === 'inline' ? 'ghost' : 'tertiary'\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\tcdsActionableButton>\n\t\t\t\t{{action.text}}\n\t\t\t</button>\n\t\t</ng-container>\n\t\t<ng-container *ngTemplateOutlet=\"notificationObj.actionsTemplate; context: { $implicit: notificationObj }\"></ng-container>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"cds--actionable-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--actionable-notification__close-icon\"></svg>\n\t\t</button>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{\n                type: Input\n            }], notificationID: [{\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], notificationClass: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification\"]\n            }], toastVariant: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--toast\"]\n            }], isError: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--error\"]\n            }], isInfo: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--info\"]\n            }], isInfoSquare: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--info-square\"]\n            }], isSuccess: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--success\"]\n            }], isWarning: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--warning\"]\n            }], isWarningAlt: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--warning-alt\"]\n            }], isLowContrast: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--low-contrast\"]\n            }], isCloseHidden: [{\n                type: HostBinding,\n                args: [\"class.cds--actionable-notification--hide-close-button\"]\n            }] } });\n\nclass NotificationSubtitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nNotificationSubtitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationSubtitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNotificationSubtitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: NotificationSubtitle, selector: \"[cdsNotificationSubtitle], [ibmNotificationSubtitle]\", host: { properties: { \"class.cds--inline-notification__subtitle\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationSubtitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsNotificationSubtitle], [ibmNotificationSubtitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification__subtitle\"]\n            }] } });\n\nclass NotificationTitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nNotificationTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNotificationTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: NotificationTitle, selector: \"[cdsNotificationTitle], [ibmNotificationTitle]\", host: { properties: { \"class.cds--inline-notification__title\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsNotificationTitle], [ibmNotificationTitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification__title\"]\n            }] } });\n\n/**\n * Notification messages are displayed toward the top of the UI and do not interrupt user’s work.\n *\n * [See demo](../../?path=/story/components-notification--basic)\n */\nclass Notification extends BaseNotification {\n    constructor(notificationDisplayService, i18n) {\n        super(notificationDisplayService, i18n);\n        this.notificationDisplayService = notificationDisplayService;\n        this.i18n = i18n;\n        this.notificationID = `notification-${Notification.notificationCount++}`;\n        this.notificationClass = true;\n    }\n    /**\n     * Can have `type`, `title`, and `message` members.\n     *\n     * `type` can be one of `\"error\"`, `\"info\"`, `\"info-square\"`, `\"warning\"`, `\"warning-alt\"`, or `\"success\"`\n     *\n     * `message` is the message to display\n     */\n    get notificationObj() {\n        return this._notificationObj;\n    }\n    set notificationObj(obj) {\n        if (obj.closeLabel && !isObservable(obj.closeLabel)) {\n            obj.closeLabel = of(obj.closeLabel);\n        }\n        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);\n    }\n    get isError() { return this.notificationObj.type === \"error\"; }\n    get isInfo() { return this.notificationObj.type === \"info\"; }\n    get isInfoSquare() { return this.notificationObj.type === \"info-square\"; }\n    get isSuccess() { return this.notificationObj.type === \"success\"; }\n    get isWarning() { return this.notificationObj.type === \"warning\"; }\n    get isWarningAlt() { return this.notificationObj.type === \"warning-alt\"; }\n    get isLowContrast() { return this.notificationObj.lowContrast; }\n    get isCloseHidden() { return !this.notificationObj.showClose; }\n}\nNotification.notificationCount = 0;\nNotification.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Notification, deps: [{ token: NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nNotification.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Notification, selector: \"cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification\", inputs: { notificationObj: \"notificationObj\" }, host: { properties: { \"attr.id\": \"this.notificationID\", \"class.cds--inline-notification\": \"this.notificationClass\", \"class.cds--inline-notification--error\": \"this.isError\", \"class.cds--inline-notification--info\": \"this.isInfo\", \"class.cds--inline-notification--info-square\": \"this.isInfoSquare\", \"class.cds--inline-notification--success\": \"this.isSuccess\", \"class.cds--inline-notification--warning\": \"this.isWarning\", \"class.cds--inline-notification--warning-alt\": \"this.isWarningAlt\", \"class.cds--inline-notification--low-contrast\": \"this.isLowContrast\", \"class.cds--inline-notification--hide-close-button\": \"this.isCloseHidden\" } }, usesInheritance: true, ngImport: i0, template: `\n\t\t<div class=\"cds--inline-notification__details\">\n\t\t\t<svg\n\t\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\t\tsize=\"20\"\n\t\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\t\tclass=\"cds--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"cds--inline-notification__text-wrapper\">\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsNotificationTitle [innerHTML]=\"notificationObj.title\"></div>\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsNotificationSubtitle>\n\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t</div>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"cds--inline-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--inline-notification__close-icon\"></svg>\n\t\t</button>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3$1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i4.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"directive\", type: NotificationTitle, selector: \"[cdsNotificationTitle], [ibmNotificationTitle]\" }, { kind: \"directive\", type: NotificationSubtitle, selector: \"[cdsNotificationSubtitle], [ibmNotificationSubtitle]\" }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Notification, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification\",\n                    template: `\n\t\t<div class=\"cds--inline-notification__details\">\n\t\t\t<svg\n\t\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\t\tsize=\"20\"\n\t\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\t\tclass=\"cds--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"cds--inline-notification__text-wrapper\">\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsNotificationTitle [innerHTML]=\"notificationObj.title\"></div>\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" cdsNotificationSubtitle>\n\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t</div>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"cds--inline-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--inline-notification__close-icon\"></svg>\n\t\t</button>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{\n                type: Input\n            }], notificationID: [{\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], notificationClass: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification\"]\n            }], isError: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--error\"]\n            }], isInfo: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--info\"]\n            }], isInfoSquare: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--info-square\"]\n            }], isSuccess: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--success\"]\n            }], isWarning: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--warning\"]\n            }], isWarningAlt: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--warning-alt\"]\n            }], isLowContrast: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--low-contrast\"]\n            }], isCloseHidden: [{\n                type: HostBinding,\n                args: [\"class.cds--inline-notification--hide-close-button\"]\n            }] } });\n\nclass ToastTitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nToastTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nToastTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ToastTitle, selector: \"[cdsToastTitle], [ibmToastTitle]\", host: { properties: { \"class.cds--toast-notification__title\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsToastTitle], [ibmToastTitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification__title\"]\n            }] } });\n\nclass ToastSubtitle {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nToastSubtitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastSubtitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nToastSubtitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ToastSubtitle, selector: \"[cdsToastSubtitle], [ibmToastSubtitle]\", host: { properties: { \"class.cds--toast-notification__subtitle\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastSubtitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsToastSubtitle], [ibmToastSubtitle]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification__subtitle\"]\n            }] } });\n\nclass ToastCaption {\n    constructor() {\n        this.baseClass = true;\n    }\n}\nToastCaption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastCaption, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nToastCaption.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ToastCaption, selector: \"[cdsToastCaption], [ibmToastCaption]\", host: { properties: { \"class.cds--toast-notification__caption\": \"this.baseClass\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ToastCaption, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[cdsToastCaption], [ibmToastCaption]\"\n                }]\n        }], propDecorators: { baseClass: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification__caption\"]\n            }] } });\n\n/**\n * Toast messages are displayed toward the top of the UI and do not interrupt user’s work.\n *\n * [See demo](../../?path=/story/components-notification--toast)\n */\nclass Toast extends BaseNotification {\n    constructor(notificationDisplayService, i18n) {\n        super(notificationDisplayService, i18n);\n        this.notificationDisplayService = notificationDisplayService;\n        this.i18n = i18n;\n        this.toastID = `toast-${Toast.toastCount++}`;\n        this.toastClass = true;\n    }\n    /**\n     * Can have `type`, `title`, `subtitle`, and `caption` members.\n     *\n     * `type` can be one of `\"error\"`, `\"info\"`, `\"info-square\"`, `\"warning\"`, `\"warning-alt\"`, or `\"success\"`\n     */\n    set notificationObj(obj) {\n        if (obj.closeLabel && !isObservable(obj.closeLabel)) {\n            obj.closeLabel = of(obj.closeLabel);\n        }\n        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);\n    }\n    get notificationObj() {\n        return this._notificationObj;\n    }\n    get isError() { return this.notificationObj.type === \"error\"; }\n    get isInfo() { return this.notificationObj.type === \"info\"; }\n    get isInfoSquare() { return this.notificationObj.type === \"info-square\"; }\n    get isSuccess() { return this.notificationObj.type === \"success\"; }\n    get isWarning() { return this.notificationObj.type === \"warning\"; }\n    get isWarningAlt() { return this.notificationObj.type === \"warning-alt\"; }\n    get isLowContrast() { return this.notificationObj.lowContrast; }\n    get isCloseHidden() { return !this.notificationObj.showClose; }\n    ngOnInit() {\n        if (!this.notificationObj.closeLabel) {\n            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;\n        }\n    }\n}\nToast.toastCount = 0;\nToast.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Toast, deps: [{ token: NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nToast.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Toast, selector: \"cds-toast, ibm-toast\", inputs: { notificationObj: \"notificationObj\" }, host: { properties: { \"attr.id\": \"this.toastID\", \"class.cds--toast-notification\": \"this.toastClass\", \"class.cds--toast-notification--error\": \"this.isError\", \"class.cds--toast-notification--info\": \"this.isInfo\", \"class.cds--toast-notification--info-square\": \"this.isInfoSquare\", \"class.cds--toast-notification--success\": \"this.isSuccess\", \"class.cds--toast-notification--warning\": \"this.isWarning\", \"class.cds--toast-notification--warning-alt\": \"this.isWarningAlt\", \"class.cds--toast-notification--low-contrast\": \"this.isLowContrast\", \"class.cds--toast-notification--hide-close-button\": \"this.isCloseHidden\" } }, usesInheritance: true, ngImport: i0, template: `\n\t\t<svg\n\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\tclass=\"cds--toast-notification__icon\">\n\t\t</svg>\n\t\t<div class=\"cds--toast-notification__details\">\n\t\t\t<h3 *ngIf=\"!notificationObj.template\" cdsToastTitle [innerHTML]=\"notificationObj.title\"></h3>\n\t\t\t<div *ngIf=\"!notificationObj.template\" cdsToastSubtitle>\n\t\t\t\t<span [innerHTML]=\"notificationObj.subtitle\"></span>\n\t\t\t</div>\n\t\t\t<p *ngIf=\"!notificationObj.template\" cdsToastCaption [innerHTML]=\"notificationObj.caption\"></p>\n\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj }\"></ng-container>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\tclass=\"cds--toast-notification__close-button\"\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\t(click)=\"onClose()\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--toast-notification__close-icon\"></svg>\n\t\t</button>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3$1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i4.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }, { kind: \"directive\", type: ToastTitle, selector: \"[cdsToastTitle], [ibmToastTitle]\" }, { kind: \"directive\", type: ToastSubtitle, selector: \"[cdsToastSubtitle], [ibmToastSubtitle]\" }, { kind: \"directive\", type: ToastCaption, selector: \"[cdsToastCaption], [ibmToastCaption]\" }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-toast, ibm-toast\",\n                    template: `\n\t\t<svg\n\t\t\t[cdsIcon]=\"iconDictionary[notificationObj.type]\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type\"\n\t\t\tclass=\"cds--toast-notification__icon\">\n\t\t</svg>\n\t\t<div class=\"cds--toast-notification__details\">\n\t\t\t<h3 *ngIf=\"!notificationObj.template\" cdsToastTitle [innerHTML]=\"notificationObj.title\"></h3>\n\t\t\t<div *ngIf=\"!notificationObj.template\" cdsToastSubtitle>\n\t\t\t\t<span [innerHTML]=\"notificationObj.subtitle\"></span>\n\t\t\t</div>\n\t\t\t<p *ngIf=\"!notificationObj.template\" cdsToastCaption [innerHTML]=\"notificationObj.caption\"></p>\n\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj }\"></ng-container>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\tclass=\"cds--toast-notification__close-button\"\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\t(click)=\"onClose()\">\n\t\t\t<svg cdsIcon=\"close\" size=\"16\" class=\"cds--toast-notification__close-icon\"></svg>\n\t\t</button>\n\t`\n                }]\n        }], ctorParameters: function () { return [{ type: NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{\n                type: Input\n            }], toastID: [{\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], toastClass: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification\"]\n            }], isError: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--error\"]\n            }], isInfo: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--info\"]\n            }], isInfoSquare: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--info-square\"]\n            }], isSuccess: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--success\"]\n            }], isWarning: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--warning\"]\n            }], isWarningAlt: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--warning-alt\"]\n            }], isLowContrast: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--low-contrast\"]\n            }], isCloseHidden: [{\n                type: HostBinding,\n                args: [\"class.cds--toast-notification--hide-close-button\"]\n            }] } });\n\n/**\n * Provides a way to use the notification component.\n *\n * Notifications are displayed toward the top of the UI and do not interrupt the user’s work.\n */\nclass NotificationService {\n    /**\n     * Constructs Notification Service\n     */\n    constructor(injector, viewContainer, ngZone) {\n        this.injector = injector;\n        this.viewContainer = viewContainer;\n        this.ngZone = ngZone;\n        /**\n         * An array containing `ComponentRef`s to all the notifications this service instance\n         * is responsible for.\n         *\n         */\n        this.notificationRefs = new Array();\n        this.onClose = new EventEmitter();\n    }\n    /**\n     * Shows the notification based on the `notificationObj`.\n     *\n     * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n     *\n     * **Members:**\n     *\n     * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n     * * `message` is message for notification to display\n     * * `target` is css selector defining an element to append notification to. If not provided,\n     * `showNotification()` creates a place for the notification in `body`\n     * * `duration` is number of ms to close the notification after. If used in combination with `smart`,\n     * it's added to the calculated timeout\n     * * `smart`, set to `true` if you want to use smart notification.\n     *\n     * **Example:**\n     * ```typescript\n     * // Info notification, saying \"Sample message.\" added to the element with id notification-container\n     * // uses smart timeout with added duration of 1 second.\n     * {\n     *\ttype: \"info\",\n     *\tmessage: \"Sample message.\",\n     *\ttarget: \"#notification-container\",\n     *\tduration: 1000,\n     *\tsmart: true\n     * }\n     * ```\n     *\n     * @param [notificationComp=Notification] If provided, used to resolve component factory\n     */\n    showNotification(notificationObj, notificationComp = Notification) {\n        const notificationRef = this.viewContainer.createComponent(notificationComp);\n        notificationRef.instance.notificationObj = notificationObj;\n        this.notificationRefs.push(notificationRef);\n        this.onClose = notificationRef.instance.close;\n        if (notificationObj.target) {\n            document.querySelector(notificationObj.target).appendChild(notificationRef.location.nativeElement);\n        }\n        else {\n            let body = document.querySelector(\"body\");\n            // get or create a container for alert list\n            let notificationClassName = \"notification-overlay\";\n            let notificationList = body.querySelector(`.${notificationClassName}`);\n            if (!notificationList) {\n                notificationList = document.createElement(\"div\");\n                notificationList.className = notificationClassName;\n                body.appendChild(notificationList);\n            }\n            // add the notification to the top of the list\n            if (notificationList.firstChild) {\n                notificationList.insertBefore(notificationRef.location.nativeElement, notificationList.firstChild);\n            }\n            else {\n                notificationList.appendChild(notificationRef.location.nativeElement);\n            }\n        }\n        if (notificationObj.duration && notificationObj.duration > 0) {\n            this.ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.ngZone.run(() => {\n                        this.close(notificationRef);\n                    });\n                }, notificationObj.duration);\n            });\n        }\n        if (notificationObj.smart) {\n            this.ngZone.runOutsideAngular(() => {\n                // let it disappear after calculated timeout\n                setTimeout(() => {\n                    this.ngZone.run(() => {\n                        this.close(notificationRef);\n                    });\n                }, this.getSmartTimeout(notificationObj));\n            });\n        }\n        this.onClose.subscribe(() => {\n            this.close(notificationRef);\n        });\n        notificationRef.instance.componentRef = notificationRef;\n        return notificationRef.instance;\n    }\n    showToast(notificationObj, notificationComp = Toast) {\n        return this.showNotification(notificationObj, notificationComp);\n    }\n    showActionable(notificationObj, notificationComp = ActionableNotification) {\n        return this.showNotification(notificationObj, notificationComp);\n    }\n    /**\n     * Programatically closes notification based on `notificationRef`.\n     *\n     * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close\n     */\n    close(notificationRef) {\n        if (notificationRef) {\n            if (notificationRef instanceof Notification) {\n                this.close(notificationRef.componentRef);\n            }\n            else {\n                notificationRef.destroy();\n                const index = this.notificationRefs.indexOf(notificationRef);\n                if (index !== -1) {\n                    this.notificationRefs.splice(index, 1);\n                }\n            }\n        }\n    }\n    /**\n     * Calculates the amount of time user needs to read the message in the notification.\n     *\n     * @param notificationObj Same object used to instantiate notification.\n     *\n     * In addition to `type` and `message` members, use `duration` member to add\n     * some extra time (in ms) to timeout if you need to.\n     * @returns calculated timeout (in ms) for smart notification\n     */\n    getSmartTimeout(notificationObj) {\n        // calculate timeout\n        let timeout = 600; // start with reaction time\n        // custom duration\n        timeout += notificationObj.duration || 0;\n        // message type\n        switch (notificationObj.type) {\n            case \"info\":\n            case \"info-square\":\n            case \"success\":\n            default: {\n                break;\n            }\n            case \"danger\": {\n                timeout += 3000;\n                break;\n            }\n            case \"warning\":\n            case \"warning-alt\": {\n                timeout += 1500;\n                break;\n            }\n        }\n        // message length\n        // average reader reads around 200 words per minute, or it takes them ~0.3s per word\n        // let's use 1.5 factor for below average speed readers and have 0.45s per word\n        let wordCount = notificationObj.message.trim().split(/\\s+/).length;\n        timeout += wordCount * 450;\n        return timeout;\n    }\n    /**\n     * OnDestroy hook.\n     *\n     * Destroys all living notifications it is responsible for.\n     *\n     */\n    ngOnDestroy() {\n        this.notificationRefs.forEach((ref) => {\n            ref.destroy();\n        });\n    }\n}\nNotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationService, deps: [{ token: i0.Injector }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ViewContainerRef }, { type: i0.NgZone }]; } });\n\nclass NotificationModule {\n}\nNotificationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNotificationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationModule, declarations: [ActionableButton,\n        ActionableNotification,\n        ActionableTitle,\n        ActionableSubtitle,\n        BaseNotification,\n        Notification,\n        Toast,\n        ToastTitle,\n        ToastSubtitle,\n        ToastCaption,\n        NotificationTitle,\n        NotificationSubtitle], imports: [ButtonModule,\n        CommonModule,\n        I18nModule,\n        ExperimentalModule,\n        LinkModule,\n        IconModule], exports: [Notification,\n        ActionableButton,\n        ActionableNotification,\n        ActionableTitle,\n        ActionableSubtitle,\n        Toast,\n        ToastTitle,\n        ToastSubtitle,\n        ToastCaption,\n        NotificationTitle,\n        NotificationSubtitle] });\nNotificationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationModule, providers: [NotificationService, NotificationDisplayService], imports: [ButtonModule,\n        CommonModule,\n        I18nModule,\n        ExperimentalModule,\n        LinkModule,\n        IconModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: NotificationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ActionableButton,\n                        ActionableNotification,\n                        ActionableTitle,\n                        ActionableSubtitle,\n                        BaseNotification,\n                        Notification,\n                        Toast,\n                        ToastTitle,\n                        ToastSubtitle,\n                        ToastCaption,\n                        NotificationTitle,\n                        NotificationSubtitle\n                    ],\n                    exports: [\n                        Notification,\n                        ActionableButton,\n                        ActionableNotification,\n                        ActionableTitle,\n                        ActionableSubtitle,\n                        Toast,\n                        ToastTitle,\n                        ToastSubtitle,\n                        ToastCaption,\n                        NotificationTitle,\n                        NotificationSubtitle\n                    ],\n                    imports: [\n                        ButtonModule,\n                        CommonModule,\n                        I18nModule,\n                        ExperimentalModule,\n                        LinkModule,\n                        IconModule\n                    ],\n                    providers: [NotificationService, NotificationDisplayService]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActionableButton, ActionableNotification, ActionableSubtitle, ActionableTitle, BaseNotification, Notification, NotificationDisplayService, NotificationModule, NotificationService, NotificationSubtitle, NotificationTitle, Toast, ToastCaption, ToastSubtitle, ToastTitle };\n"],"x_google_ignoreList":[0]}