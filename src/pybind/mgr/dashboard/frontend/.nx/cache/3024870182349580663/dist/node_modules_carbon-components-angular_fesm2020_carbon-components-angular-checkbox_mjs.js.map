{"version":3,"file":"node_modules_carbon-components-angular_fesm2020_carbon-components-angular-checkbox_mjs.js","mappings":"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","names":["_c0","_c2","a0","_c3","CheckboxState","Init","Indeterminate","Checked","Unchecked","Checkbox","constructor","changeDetectorRef","this","disabled","skeleton","hideLabel","id","checkboxCount","click","EventEmitter","checkedChange","indeterminateChange","_checked","_indeterminate","currentCheckboxState","onTouched","propagateChange","_","indeterminate","transitionCheckboxState","checked","inputCheckbox","nativeElement","markForCheck","emit","setChecked","toggle","writeValue","value","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusOut","onChange","event","stopPropagation","onClick","observers","length","preventDefault","emitChangeEvent","newState","ngAfterViewInit","resetIndeterminate","Promise","resolve","then","ɵfac","__ngFactoryType__","i0","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","first","hostBindings","inputs","name","required","ariaLabel","ariaLabelledby","outputs","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","ngContentSelectors","decls","vars","consts","template","_r1","$event","dependencies","i1","encapsulation","changeDetection","CheckboxModule","ɵmod","ɵinj","imports","CommonModule","FormsModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-checkbox.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Defines the set of states for a checkbox component.\n */\nvar CheckboxState;\n(function (CheckboxState) {\n    CheckboxState[CheckboxState[\"Init\"] = 0] = \"Init\";\n    CheckboxState[CheckboxState[\"Indeterminate\"] = 1] = \"Indeterminate\";\n    CheckboxState[CheckboxState[\"Checked\"] = 2] = \"Checked\";\n    CheckboxState[CheckboxState[\"Unchecked\"] = 3] = \"Unchecked\";\n})(CheckboxState || (CheckboxState = {}));\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { CheckboxModule } from 'carbon-components-angular';\n * ```\n *\n * [See demo](../../?path=/story/components-checkbox--basic)\n */\nclass Checkbox {\n    /**\n     * Creates an instance of `Checkbox`.\n     */\n    constructor(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Set to `true` for a disabled checkbox.\n         */\n        this.disabled = false;\n        /**\n         * Set to `true` for a loading checkbox.\n         */\n        this.skeleton = false;\n        /**\n         * Set to `true` to hide the checkbox labels.\n         */\n        this.hideLabel = false;\n        /**\n         * The unique id for the checkbox component.\n         */\n        this.id = `checkbox-${Checkbox.checkboxCount}`;\n        /**\n         * Emits click event.\n         */\n        this.click = new EventEmitter();\n        /**\n         * Emits an event when the value of the checkbox changes.\n         *\n         * Allows double biding with the `checked` Input.\n         */\n        this.checkedChange = new EventEmitter();\n        /**\n         * Emits event notifying other classes when a change in state occurs specifically\n         * on an indeterminate checkbox.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Set to `true` if the input checkbox is selected (or checked).\n         */\n        this._checked = false;\n        /**\n         * Set to `true` if the input checkbox is in state indeterminate.\n         */\n        this._indeterminate = false;\n        /**\n         * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n         */\n        this.currentCheckboxState = CheckboxState.Init;\n        /**\n         * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n         */\n        this.onTouched = () => { };\n        /**\n         * Method set in `registerOnChange` to propagate changes back to the form.\n         */\n        this.propagateChange = (_) => { };\n        Checkbox.checkboxCount++;\n    }\n    /**\n     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n     *\n     * Allows double binding with the `indeterminateChange` Output.\n     */\n    set indeterminate(indeterminate) {\n        if (indeterminate === this._indeterminate) {\n            return;\n        }\n        this._indeterminate = indeterminate;\n        if (this._indeterminate) {\n            this.transitionCheckboxState(CheckboxState.Indeterminate);\n        }\n        else {\n            this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n        }\n        if (this.inputCheckbox && this.inputCheckbox.nativeElement) {\n            this.inputCheckbox.nativeElement.indeterminate = indeterminate;\n        }\n        this.changeDetectorRef.markForCheck();\n        this.indeterminateChange.emit(this._indeterminate);\n    }\n    /**\n     * Reflects whether the checkbox state is indeterminate.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    /**\n     * Sets the `checked` state. `true` for checked, `false` for unchecked\n     *\n     * Allows double binding with the `checkedChange` Output.\n     */\n    set checked(checked) {\n        this.setChecked(checked, false);\n    }\n    /**\n     * Returns value `true` if state is selected for the checkbox.\n     */\n    get checked() {\n        return this._checked;\n    }\n    /**\n     * Toggle the selected state of the checkbox.\n     */\n    toggle() {\n        // Flip checked and reset indeterminate\n        this.setChecked(!this.checked, true);\n    }\n    /**\n     * Writes a value from `ngModel` to the component.\n     *\n     * In this case the value is the `checked` property.\n     *\n     * @param value boolean, corresponds to the `checked` property.\n     */\n    writeValue(value) {\n        // Set checked and reset indeterminate\n        this.setChecked(!!value, true);\n    }\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the checkbox.\n     *\n     * ex: `this.formGroup.get(\"myCheckbox\").disable();`\n     *\n     * @param isDisabled `true` to disable the checkbox\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n    }\n    focusOut() {\n        this.onTouched();\n    }\n    /**\n     * Executes on the event of a change within `Checkbox` to block propagation.\n     */\n    onChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Handles click events on the `Checkbox` and emits changes to other classes.\n     */\n    onClick(event) {\n        if (this.click.observers.length) {\n            // Disable default checkbox activation behavior which flips checked and resets indeterminate.\n            // This allows the parent component to control the checked/indeterminate properties.\n            event.preventDefault();\n            this.click.emit();\n            return;\n        }\n        if (!this.disabled) {\n            this.toggle();\n            this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n            this.emitChangeEvent();\n        }\n    }\n    /**\n     * Handles changes between checkbox states.\n     */\n    transitionCheckboxState(newState) {\n        this.currentCheckboxState = newState;\n    }\n    /**\n     * Creates instance of `CheckboxChange` used to propagate the change event.\n     */\n    emitChangeEvent() {\n        this.checkedChange.emit(this.checked);\n        this.propagateChange(this.checked);\n    }\n    /**\n     * Updates the checkbox if it is in the indeterminate state.\n     */\n    ngAfterViewInit() {\n        if (this.indeterminate && this.inputCheckbox && this.inputCheckbox.nativeElement) {\n            this.inputCheckbox.nativeElement.indeterminate = true;\n        }\n    }\n    /**\n     * Sets checked state and optionally resets indeterminate state.\n     */\n    setChecked(checked, resetIndeterminate) {\n        if (checked === this._checked) {\n            return;\n        }\n        this._checked = checked;\n        // Reset indeterminate if requested\n        if (resetIndeterminate && this._indeterminate) {\n            this._indeterminate = false;\n            Promise.resolve().then(() => {\n                this.indeterminateChange.emit(this._indeterminate);\n            });\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n}\n/**\n * Variable used for creating unique ids for checkbox components.\n */\nCheckbox.checkboxCount = 0;\nCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Checkbox, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Checkbox, selector: \"cds-checkbox, ibm-checkbox\", inputs: { disabled: \"disabled\", skeleton: \"skeleton\", hideLabel: \"hideLabel\", name: \"name\", id: \"id\", required: \"required\", value: \"value\", ariaLabel: \"ariaLabel\", ariaLabelledby: \"ariaLabelledby\", indeterminate: \"indeterminate\", checked: \"checked\" }, outputs: { click: \"click\", checkedChange: \"checkedChange\", indeterminateChange: \"indeterminateChange\" }, host: { listeners: { \"focusout\": \"focusOut()\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: Checkbox,\n            multi: true\n        }\n    ], viewQueries: [{ propertyName: \"inputCheckbox\", first: true, predicate: [\"inputCheckbox\"], descendants: true }], ngImport: i0, template: `\n\t\t<div class=\"cds--form-item cds--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"cds--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"cds--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'cds--visually-hidden' : hideLabel}\" class=\"cds--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Checkbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-checkbox, ibm-checkbox\",\n                    template: `\n\t\t<div class=\"cds--form-item cds--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"cds--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"cds--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'cds--visually-hidden' : hideLabel}\" class=\"cds--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: Checkbox,\n                            multi: true\n                        }\n                    ],\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], hideLabel: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], ariaLabelledby: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], click: [{\n                type: Output\n            }], checkedChange: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], inputCheckbox: [{\n                type: ViewChild,\n                args: [\"inputCheckbox\"]\n            }], focusOut: [{\n                type: HostListener,\n                args: [\"focusout\"]\n            }] } });\n\n// modules\nclass CheckboxModule {\n}\nCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: CheckboxModule, declarations: [Checkbox], imports: [CommonModule,\n        FormsModule], exports: [Checkbox] });\nCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CheckboxModule, imports: [CommonModule,\n        FormsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: CheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        Checkbox\n                    ],\n                    exports: [\n                        Checkbox\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Checkbox, CheckboxModule, CheckboxState };\n"],"x_google_ignoreList":[0]}