{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-slider_mjs.js","mappings":"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","names":["_c0","_c1","_c2","_c3","_c4","_c6","a0","_c7","a1","_c8","_c9","insetInlineStart","Slider_ng_container_0_label_1_ng_container_1_Template","rf","ctx","i0","ctx_r1","label","Slider_ng_container_0_label_1_2_ng_template_0_Template","Slider_ng_container_0_label_1_2_Template","Slider_ng_container_0_label_1_Template","id","labelId","disabled","isTemplate","Slider_ng_container_0_ng_container_6_Template","_r3","$event","onMouseDown","onKeyDown","getFractionComplete","value","Slider_ng_container_0_ng_container_7_div_1_Template","_r4","i_r5","index","thumb_r6","$implicit","Slider_ng_container_0_ng_container_7_Template","trackThumbsBy","Slider_ng_container_0_Template","_r1","onClick","readonly","bottomRangeId","isRange","step","min","max","toString","topRangeId","Slider_ng_template_1_label_0_Template","Slider_ng_template_1_Template","Slider","constructor","elementRef","eventService","changeDetection","this","count","shiftMultiplier","skeleton","disableArrowKeys","valueChange","EventEmitter","hostClass","fractionComplete","isMouseDown","_min","_max","_value","_previousValue","_disabled","_readonly","_focusedThumbIndex","propagateChange","_","onTouched","v","Number","filledTrack","updateTrackRangeWidth","nativeElement","style","transform","scaleX","inputs","length","forEach","input","valueToEmit","emit","getInputs","readOnly","ngAfterViewInit","onDocument","onMouseMove","bind","onMouseUp","detectChanges","type","classList","add","setAttribute","on","event","onChange","onFocus","item","registerOnChange","fn","registerOnTouched","writeValue","track","trackWidth","getBoundingClientRect","width","convertToPx","complete","convertToValue","pxAmount","range","unrounded","Math","round","incrementValue","multiplier","decrementValue","fraction","fraction2","target","trackLeft","left","trackValue","clientX","abs","select","undefined","preventDefault","thumbs","toArray","focus","shiftKey","key","TemplateRef","querySelectorAll","ɵfac","__ngFactoryType__","i1","ɵcmp","selectors","viewQuery","_t","first","hostVars","hostBindings","outputs","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","ngContentSelectors","decls","vars","consts","template","skeletonTemplate_r7","dependencies","i2","encapsulation","SliderModule","ɵmod","ɵinj","imports","CommonModule","UtilsModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-slider.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, TemplateRef, Component, Input, Output, HostBinding, ViewChildren, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'carbon-components-angular/utils';\nimport { UtilsModule } from 'carbon-components-angular/utils';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Used to select from ranges of values. [See here](https://www.carbondesignsystem.com/components/slider/usage) for usage information.\n *\n * Get started with importing the module:\n *\n * ```typescript\n * import { SliderModule } from 'carbon-components-angular';\n * ```\n *\n * The simplest possible slider usage looks something like:\n *\n * ```html\n *\t<cds-slider></cds-slider>\n * ```\n *\n * That will render a slider without labels or alternative value input. Labels can be provided by\n * elements with `[minLabel]` and `[maxLabel]` attributes, and an `input` (may use the `ibmInput` directive) can be supplied\n * for use as an alternative value field.\n *\n * ex:\n *\n * ```html\n * <!-- Full example -->\n * <cds-slider>\n *\t\t<span minLabel>0GB</span>\n *\t\t<span maxLabel>100GB</span>\n *\t\t<input/>\n * </cds-slider>\n *\n * <!-- with just an input -->\n * <cds-slider>\n *\t\t<input/>\n * </cds-slider>\n *\n * <!-- with just one label -->\n * <cds-slider>\n *\t\t<span maxLabel>Maximum</span>\n * </cds-slider>\n * ```\n *\n * Slider supports `NgModel` by default, as well as two way binding to the `value` input.\n *\n * [See demo](../../?path=/story/components-slider--advanced)\n */\nclass Slider {\n    constructor(elementRef, eventService, changeDetection) {\n        this.elementRef = elementRef;\n        this.eventService = eventService;\n        this.changeDetection = changeDetection;\n        /** The interval for our range */\n        this.step = 1;\n        /** Base ID for the slider. The min and max labels get IDs `${this.id}-bottom-range` and `${this.id}-top-range` respectively */\n        this.id = `slider-${Slider.count++}`;\n        /** Value used to \"multiply\" the `step` when using arrow keys to select values */\n        this.shiftMultiplier = 4;\n        /** Set to `true` for a loading slider */\n        this.skeleton = false;\n        /** Set to `true` for a slider without arrow key interactions. */\n        this.disableArrowKeys = false;\n        /** Emits every time a new value is selected */\n        this.valueChange = new EventEmitter();\n        this.hostClass = true;\n        this.labelId = `${this.id}-label`;\n        this.bottomRangeId = `${this.id}-bottom-range`;\n        this.topRangeId = `${this.id}-top-range`;\n        this.fractionComplete = 0;\n        this.isMouseDown = false;\n        this._min = 0;\n        this._max = 100;\n        this._value = [this.min];\n        this._previousValue = [this.min];\n        this._disabled = false;\n        this._readonly = false;\n        this._focusedThumbIndex = 0;\n        /** Send changes back to the model */\n        this.propagateChange = (_) => { };\n        /** Callback to notify the model when our input has been touched */\n        this.onTouched = () => { };\n    }\n    /** The lower bound of our range */\n    set min(v) {\n        if (!v) {\n            return;\n        }\n        this._min = v;\n        // force the component to update\n        this.value = this.value;\n    }\n    get min() {\n        return this._min;\n    }\n    /** The upper bound of our range */\n    set max(v) {\n        if (!v) {\n            return;\n        }\n        this._max = v;\n        // force the component to update\n        this.value = this.value;\n    }\n    get max() {\n        return this._max;\n    }\n    /** Set the initial value. Available for two way binding */\n    set value(v) {\n        if (!v) {\n            v = [this.min];\n        }\n        if (typeof v === \"number\" || typeof v === \"string\") {\n            v = [Number(v)];\n        }\n        if (v[0] < this.min) {\n            v[0] = this.min;\n        }\n        if (v[0] > this.max) {\n            v[0] = this.max;\n        }\n        if (this.isRange()) {\n            if (this._previousValue[0] !== v[0]) { // left moved\n                if (v[0] > v[1] - this.step) {\n                    // stop the left handle if surpassing the right one\n                    v[0] = v[1] - this.step;\n                }\n                else if (v[0] > this.max) {\n                    v[0] = this.max;\n                }\n                else if (v[0] < this.min) {\n                    v[0] = this.min;\n                }\n            }\n            if (this._previousValue[1] !== v[1]) { // right moved\n                if (v[1] > this.max) {\n                    v[1] = this.max;\n                }\n                else if (v[1] < this._value[0] + this.step) {\n                    // stop the right handle if surpassing the left one\n                    v[1] = this._value[0] + this.step;\n                }\n                else if (v[1] < this.min) {\n                    v[1] = this.min;\n                }\n            }\n        }\n        this._previousValue = [...this._value]; // store a copy, enable detection which handle moved\n        this._value = [...v]; // triggers change detection when ngModel value is an array (for range)\n        if (this.isRange() && this.filledTrack) {\n            this.updateTrackRangeWidth();\n        }\n        else if (this.filledTrack) {\n            this.filledTrack.nativeElement.style.transform = `translate(0%, -50%) ${this.scaleX(this.getFractionComplete(v[0]))}`;\n        }\n        if (this.inputs && this.inputs.length) {\n            this.inputs.forEach((input, index) => {\n                input.value = this._value[index].toString();\n            });\n        }\n        const valueToEmit = this.isRange() ? v : v[0];\n        this.propagateChange(valueToEmit);\n        this.valueChange.emit(valueToEmit);\n    }\n    get value() {\n        if (this.isRange()) {\n            return this._value;\n        }\n        return this._value[0];\n    }\n    /** Disables the range visually and functionally */\n    set disabled(v) {\n        this._disabled = v;\n        // for some reason `this.input` never exists here, so we have to query for it here too\n        const inputs = this.getInputs();\n        if (inputs && inputs.length > 0) {\n            inputs.forEach(input => input.disabled = v);\n        }\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    /** Set to `true` for a readonly state. */\n    set readonly(v) {\n        this._readonly = v;\n        // for some reason `this.input` never exists here, so we have to query for it here too\n        const inputs = this.getInputs();\n        if (inputs && inputs.length > 0) {\n            inputs.forEach(input => input.readOnly = v);\n        }\n    }\n    get readonly() {\n        return this._readonly;\n    }\n    ngAfterViewInit() {\n        // bind mousemove and mouseup to the document so we don't have issues tracking the mouse\n        this.eventService.onDocument(\"mousemove\", this.onMouseMove.bind(this));\n        this.eventService.onDocument(\"mouseup\", this.onMouseUp.bind(this));\n        // apply any values we got from before the view initialized\n        this.changeDetection.detectChanges();\n        // TODO: ontouchstart/ontouchmove/ontouchend\n        // set up the optional input\n        this.inputs = this.getInputs();\n        if (this.inputs && this.inputs.length > 0) {\n            this.inputs.forEach((input, index) => {\n                input.type = \"number\";\n                input.classList.add(\"cds--slider-text-input\");\n                input.classList.add(\"cds--text-input\");\n                input.setAttribute(\"aria-labelledby\", `${this.bottomRangeId} ${this.topRangeId}`);\n                input.value = index < this._value.length ? this._value[index].toString() : this.max.toString();\n                // bind events on our optional input\n                this.eventService.on(input, \"change\", event => this.onChange(event, index));\n                if (index === 0) {\n                    this.eventService.on(input, \"focus\", this.onFocus.bind(this));\n                }\n            });\n        }\n    }\n    trackThumbsBy(index, item) {\n        return index;\n    }\n    /** Register a change propagation function for `ControlValueAccessor` */\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    /** Register a callback to notify when our input has been touched */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /** Receives a value from the model */\n    writeValue(v) {\n        this.value = v;\n    }\n    /**\n     * Returns the amount of \"completeness\" of a value as a fraction of the total track width\n     */\n    getFractionComplete(value) {\n        if (!this.track) {\n            return 0;\n        }\n        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;\n        return this.convertToPx(value) / trackWidth;\n    }\n    /** Helper function to return the CSS transform `scaleX` function */\n    scaleX(complete) {\n        return `scaleX(${complete})`;\n    }\n    /** Converts a given px value to a \"real\" value in our range */\n    convertToValue(pxAmount) {\n        // basic concept borrowed from carbon-components\n        // https://github.com/carbon-design-system/carbon/blob/43bf3abdc2f8bdaa38aa84e0f733adde1e1e8894/src/components/slider/slider.js#L147-L151\n        const range = this.max - this.min;\n        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;\n        const unrounded = pxAmount / trackWidth;\n        const rounded = Math.round((range * unrounded) / this.step) * this.step;\n        return rounded + this.min;\n    }\n    /** Converts a given \"real\" value to a px value we can update the view with */\n    convertToPx(value) {\n        if (!this.track) {\n            return 0;\n        }\n        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;\n        if (value >= this.max) {\n            return trackWidth;\n        }\n        if (value <= this.min) {\n            return 0;\n        }\n        // account for value shifting by subtracting min from value and max\n        return Math.round(trackWidth * ((value - this.min) / (this.max - this.min)));\n    }\n    /**\n     * Increments the value by the step value, or the step value multiplied by the `multiplier` argument.\n     *\n     * @argument multiplier Defaults to `1`, multiplied with the step value.\n     */\n    incrementValue(multiplier = 1, index = 0) {\n        this._value[index] = this._value[index] + (this.step * multiplier);\n        this.value = this.value; // run the setter\n    }\n    /**\n     * Decrements the value by the step value, or the step value multiplied by the `multiplier` argument.\n     *\n     * @argument multiplier Defaults to `1`, multiplied with the step value.\n     */\n    decrementValue(multiplier = 1, index = 0) {\n        this._value[index] = this._value[index] - (this.step * multiplier);\n        this.value = this.value; // run the setter\n    }\n    /**\n     * Determines if the slider is in range mode.\n     */\n    isRange() {\n        return this._value.length > 1;\n    }\n    /**\n     * Range mode only.\n     * Updates the track width to span from the low thumb to the high thumb\n     */\n    updateTrackRangeWidth() {\n        const fraction = this.getFractionComplete(this._value[0]);\n        const fraction2 = this.getFractionComplete(this._value[1]);\n        this.filledTrack.nativeElement.style.transform = `translate(${fraction * 100}%, -50%) ${this.scaleX(fraction2 - fraction)}`;\n    }\n    /** Change handler for the optional input */\n    onChange(event, index) {\n        this._value[index] = Number(event.target.value);\n        this.value = this.value;\n    }\n    /**\n     * Handles clicks on the slider, and setting the value to it's \"real\" equivalent.\n     * Will assign the value to the closest thumb if in range mode.\n     * */\n    onClick(event) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        const trackLeft = this.track.nativeElement.getBoundingClientRect().left;\n        const trackValue = this.convertToValue(event.clientX - trackLeft);\n        if (this.isRange()) {\n            if (Math.abs(this._value[0] - trackValue) < Math.abs(this._value[1] - trackValue)) {\n                this._value[0] = trackValue;\n            }\n            else {\n                this._value[1] = trackValue;\n            }\n        }\n        else {\n            this._value[0] = trackValue;\n        }\n        this.value = this.value;\n    }\n    /** Focus handler for the optional input */\n    onFocus({ target }) {\n        target.select();\n    }\n    /** Mouse move handler. Responsible for updating the value and visual selection based on mouse movement */\n    onMouseMove(event) {\n        if (this.disabled || this.readonly || !this.isMouseDown) {\n            return;\n        }\n        const track = this.track.nativeElement.getBoundingClientRect();\n        let value;\n        if (event.clientX - track.left <= track.width\n            && event.clientX - track.left >= 0) {\n            value = this.convertToValue(event.clientX - track.left);\n        }\n        // if the mouse is beyond the max, set the value to `max`\n        if (event.clientX - track.left > track.width) {\n            value = this.max;\n        }\n        // if the mouse is below the min, set the value to `min`\n        if (event.clientX - track.left < 0) {\n            value = this.min;\n        }\n        if (value !== undefined) {\n            this._value[this._focusedThumbIndex] = value;\n            this.value = this.value;\n        }\n    }\n    /**\n     * Enables the `onMouseMove` handler\n     *\n     * @param {boolean} thumb If true then `thumb` is clicked down, otherwise `thumb2` is clicked down.\n     */\n    onMouseDown(event, index = 0) {\n        event.preventDefault();\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this._focusedThumbIndex = index;\n        this.thumbs.toArray()[index].nativeElement.focus();\n        this.isMouseDown = true;\n    }\n    /** Disables the `onMouseMove` handler */\n    onMouseUp() {\n        this.isMouseDown = false;\n    }\n    /**\n     * Calls `incrementValue` for ArrowRight and ArrowUp, `decrementValue` for ArrowLeft and ArrowDown.\n     *\n     * @param {boolean} thumb If true then `thumb` is pressed down, otherwise `thumb2` is pressed down.\n     */\n    onKeyDown(event, index = 0) {\n        if (this.disableArrowKeys || this.readonly) {\n            return;\n        }\n        const multiplier = event.shiftKey ? this.shiftMultiplier : 1;\n        if (event.key === \"ArrowLeft\" || event.key === \"ArrowDown\") {\n            this.decrementValue(multiplier, index);\n            this.thumbs.toArray()[index].nativeElement.focus();\n            event.preventDefault();\n        }\n        else if (event.key === \"ArrowRight\" || event.key === \"ArrowUp\") {\n            this.incrementValue(multiplier, index);\n            this.thumbs.toArray()[index].nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    /** Get optional input fields */\n    getInputs() {\n        return this.elementRef.nativeElement.querySelectorAll(\"input:not([type=range])\");\n    }\n}\n/** Used to generate unique IDs */\nSlider.count = 0;\nSlider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Slider, deps: [{ token: i0.ElementRef }, { token: i1.EventService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nSlider.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: Slider, selector: \"cds-slider, ibm-slider\", inputs: { min: \"min\", max: \"max\", step: \"step\", value: \"value\", id: \"id\", shiftMultiplier: \"shiftMultiplier\", skeleton: \"skeleton\", label: \"label\", disableArrowKeys: \"disableArrowKeys\", disabled: \"disabled\", readonly: \"readonly\" }, outputs: { valueChange: \"valueChange\" }, host: { properties: { \"class.cds--form-item\": \"this.hostClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: Slider,\n            multi: true\n        }\n    ], viewQueries: [{ propertyName: \"track\", first: true, predicate: [\"track\"], descendants: true }, { propertyName: \"filledTrack\", first: true, predicate: [\"filledTrack\"], descendants: true }, { propertyName: \"range\", first: true, predicate: [\"range\"], descendants: true }, { propertyName: \"thumbs\", predicate: [\"thumbs\"], descendants: true }], ngImport: i0, template: `\n\t\t<ng-container *ngIf=\"!skeleton; else skeletonTemplate\">\n\t\t\t<label\n\t\t\t\t*ngIf=\"label\"\n\t\t\t\t[for]=\"id\"\n\t\t\t\t[id]=\"labelId\"\n\t\t\t\tclass=\"cds--label\"\n\t\t\t\t[ngClass]=\"{'cds--label--disabled': disabled}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t</label>\n\t\t\t<div\n\t\t\t\tclass=\"cds--slider-container\"\n\t\t\t\t[ngClass]=\"{ 'cds--slider-container--readonly': readonly }\">\n\t\t\t\t<label [id]=\"bottomRangeId\" class=\"cds--slider__range-label\">\n\t\t\t\t\t<ng-content select=\"[minLabel]\"></ng-content>\n\t\t\t\t</label>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"cds--slider\"\n\t\t\t\t\t(click)=\"onClick($event)\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--slider--disabled': disabled,\n\t\t\t\t\t\t'cds--slider--readonly': readonly\n\t\t\t\t\t}\">\n\t\t\t\t\t<ng-container *ngIf=\"!isRange()\">\n\t\t\t\t\t\t<div class=\"cds--slider__thumb-wrapper\"\n\t\t\t\t\t\t\t[ngStyle]=\"{insetInlineStart: getFractionComplete(value) * 100 + '%'}\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t#thumbs\n\t\t\t\t\t\t\t\trole=\"slider\"\n\t\t\t\t\t\t\t\t[id]=\"id\"\n\t\t\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t\t\tclass=\"cds--slider__thumb\"\n\t\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t\t(mousedown)=\"onMouseDown($event)\"\n\t\t\t\t\t\t\t\t(keydown)=\"onKeyDown($event)\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngIf=\"isRange()\">\n\t\t\t\t\t\t<div class=\"cds--slider__thumb-wrapper\"\n\t\t\t\t\t\t [ngStyle]=\"{insetInlineStart: getFractionComplete(thumb) * 100 + '%'}\"\n\t\t\t\t\t\t *ngFor=\"let thumb of value; let i = index; trackBy: trackThumbsBy\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t#thumbs\n\t\t\t\t\t\t\t\trole=\"slider\"\n\t\t\t\t\t\t\t\t[id]=\"id + (i > 0 ? '-' + i : '')\"\n\t\t\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t\t\tclass=\"cds--slider__thumb\"\n\t\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t\t(mousedown)=\"onMouseDown($event, i)\"\n\t\t\t\t\t\t\t\t(keydown)=\"onKeyDown($event, i)\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<div\n\t\t\t\t\t\t#track\n\t\t\t\t\t\tclass=\"cds--slider__track\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\t#filledTrack\n\t\t\t\t\t\tclass=\"cds--slider__filled-track\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\t#range\n\t\t\t\t\t\taria-label=\"slider\"\n\t\t\t\t\t\tclass=\"cds--slider__input\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t[step]=\"step\"\n\t\t\t\t\t\t[min]=\"min\"\n\t\t\t\t\t\t[max]=\"max\"\n\t\t\t\t\t\t[value]=\"value.toString()\">\n\t\t\t\t</div>\n\t\t\t\t<label [id]=\"topRangeId\" class=\"cds--slider__range-label\">\n\t\t\t\t\t<ng-content select=\"[maxLabel]\"></ng-content>\n\t\t\t\t</label>\n\t\t\t\t<ng-content select=\"input\"></ng-content>\n\t\t\t</div>\n\t\t</ng-container>\n\n\t\t<ng-template #skeletonTemplate>\n\t\t\t<label *ngIf=\"label\" class=\"cds--label cds--skeleton\"></label>\n\t\t\t<div class=\"cds--slider-container cds--skeleton\">\n\t\t\t\t<span class=\"cds--slider__range-label\"></span>\n\t\t\t\t<div class=\"cds--slider\">\n\t\t\t\t\t<div class=\"cds--slider__thumb\"></div>\n\t\t\t\t\t<div class=\"cds--slider__track\"></div>\n\t\t\t\t\t<div class=\"cds--slider__filled-track\"></div>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"cds--slider__range-label\"></span>\n\t\t\t</div>\n\t\t</ng-template>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: Slider, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-slider, ibm-slider\",\n                    template: `\n\t\t<ng-container *ngIf=\"!skeleton; else skeletonTemplate\">\n\t\t\t<label\n\t\t\t\t*ngIf=\"label\"\n\t\t\t\t[for]=\"id\"\n\t\t\t\t[id]=\"labelId\"\n\t\t\t\tclass=\"cds--label\"\n\t\t\t\t[ngClass]=\"{'cds--label--disabled': disabled}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t</label>\n\t\t\t<div\n\t\t\t\tclass=\"cds--slider-container\"\n\t\t\t\t[ngClass]=\"{ 'cds--slider-container--readonly': readonly }\">\n\t\t\t\t<label [id]=\"bottomRangeId\" class=\"cds--slider__range-label\">\n\t\t\t\t\t<ng-content select=\"[minLabel]\"></ng-content>\n\t\t\t\t</label>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"cds--slider\"\n\t\t\t\t\t(click)=\"onClick($event)\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--slider--disabled': disabled,\n\t\t\t\t\t\t'cds--slider--readonly': readonly\n\t\t\t\t\t}\">\n\t\t\t\t\t<ng-container *ngIf=\"!isRange()\">\n\t\t\t\t\t\t<div class=\"cds--slider__thumb-wrapper\"\n\t\t\t\t\t\t\t[ngStyle]=\"{insetInlineStart: getFractionComplete(value) * 100 + '%'}\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t#thumbs\n\t\t\t\t\t\t\t\trole=\"slider\"\n\t\t\t\t\t\t\t\t[id]=\"id\"\n\t\t\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t\t\tclass=\"cds--slider__thumb\"\n\t\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t\t(mousedown)=\"onMouseDown($event)\"\n\t\t\t\t\t\t\t\t(keydown)=\"onKeyDown($event)\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngIf=\"isRange()\">\n\t\t\t\t\t\t<div class=\"cds--slider__thumb-wrapper\"\n\t\t\t\t\t\t [ngStyle]=\"{insetInlineStart: getFractionComplete(thumb) * 100 + '%'}\"\n\t\t\t\t\t\t *ngFor=\"let thumb of value; let i = index; trackBy: trackThumbsBy\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t#thumbs\n\t\t\t\t\t\t\t\trole=\"slider\"\n\t\t\t\t\t\t\t\t[id]=\"id + (i > 0 ? '-' + i : '')\"\n\t\t\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t\t\tclass=\"cds--slider__thumb\"\n\t\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t\t(mousedown)=\"onMouseDown($event, i)\"\n\t\t\t\t\t\t\t\t(keydown)=\"onKeyDown($event, i)\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<div\n\t\t\t\t\t\t#track\n\t\t\t\t\t\tclass=\"cds--slider__track\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\t#filledTrack\n\t\t\t\t\t\tclass=\"cds--slider__filled-track\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\t#range\n\t\t\t\t\t\taria-label=\"slider\"\n\t\t\t\t\t\tclass=\"cds--slider__input\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t[step]=\"step\"\n\t\t\t\t\t\t[min]=\"min\"\n\t\t\t\t\t\t[max]=\"max\"\n\t\t\t\t\t\t[value]=\"value.toString()\">\n\t\t\t\t</div>\n\t\t\t\t<label [id]=\"topRangeId\" class=\"cds--slider__range-label\">\n\t\t\t\t\t<ng-content select=\"[maxLabel]\"></ng-content>\n\t\t\t\t</label>\n\t\t\t\t<ng-content select=\"input\"></ng-content>\n\t\t\t</div>\n\t\t</ng-container>\n\n\t\t<ng-template #skeletonTemplate>\n\t\t\t<label *ngIf=\"label\" class=\"cds--label cds--skeleton\"></label>\n\t\t\t<div class=\"cds--slider-container cds--skeleton\">\n\t\t\t\t<span class=\"cds--slider__range-label\"></span>\n\t\t\t\t<div class=\"cds--slider\">\n\t\t\t\t\t<div class=\"cds--slider__thumb\"></div>\n\t\t\t\t\t<div class=\"cds--slider__track\"></div>\n\t\t\t\t\t<div class=\"cds--slider__filled-track\"></div>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"cds--slider__range-label\"></span>\n\t\t\t</div>\n\t\t</ng-template>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: Slider,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.EventService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], shiftMultiplier: [{\n                type: Input\n            }], skeleton: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], disableArrowKeys: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], hostClass: [{\n                type: HostBinding,\n                args: [\"class.cds--form-item\"]\n            }], thumbs: [{\n                type: ViewChildren,\n                args: [\"thumbs\"]\n            }], track: [{\n                type: ViewChild,\n                args: [\"track\"]\n            }], filledTrack: [{\n                type: ViewChild,\n                args: [\"filledTrack\"]\n            }], range: [{\n                type: ViewChild,\n                args: [\"range\"]\n            }] } });\n\nclass SliderModule {\n}\nSliderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSliderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: SliderModule, declarations: [Slider], imports: [CommonModule,\n        UtilsModule], exports: [Slider] });\nSliderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SliderModule, imports: [CommonModule,\n        UtilsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: SliderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [Slider],\n                    exports: [Slider],\n                    imports: [\n                        CommonModule,\n                        UtilsModule\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Slider, SliderModule };\n"],"x_google_ignoreList":[0]}