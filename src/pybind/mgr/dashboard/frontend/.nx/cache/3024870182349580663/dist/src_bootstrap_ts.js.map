{"version":3,"file":"src_bootstrap_ts.js","mappings":"0QAQA,IAAIA,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,4CAGTC,KAAQ,gBACRC,KAAQ,sCChBV,IAAIX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8IAGTC,KAAQ,QACRC,KAAQ,qCChBV,IAAIC,EAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8IAGTC,KAAQ,QACRC,KAAQ,sCChBV,IAAIX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,gJAGTC,KAAQ,SACRC,KAAQ,sCChBV,IAAIC,EAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,kGAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,6FAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,8GAGTC,KAAQ,sBACRC,KAAQ,sCC1BV,IAAIC,EAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8FAGTC,KAAQ,QACRC,KAAQ,sCChBV,IAAIC,EAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,qFAEN,CACDR,KAAQ,OACRC,MAAS,CACPG,KAAQ,OACRI,EAAK,mCAGTC,KAAQ,mBACRC,KAAQ,sCCtBV,IAAIX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,6PAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,iHAGTC,KAAQ,OACRC,KAAQ,eC3BV,SAASE,EAASC,EAAGC,EAAGC,GAClBF,aAAaG,SAAQH,EAAII,EAAWJ,EAAGE,IACvCD,aAAaE,SAAQF,EAAIG,EAAWH,EAAGC,IAE3C,IAAIG,EAAIC,EAAMN,EAAGC,EAAGC,GAEpB,OAAOG,GAAK,CACVE,MAAOF,EAAE,GACTG,IAAKH,EAAE,GACPI,IAAKP,EAAIQ,MAAM,EAAGL,EAAE,IACpBM,KAAMT,EAAIQ,MAAML,EAAE,GAAKL,EAAEY,OAAQP,EAAE,IACnCQ,KAAMX,EAAIQ,MAAML,EAAE,GAAKJ,EAAEW,QAE7B,CAEA,SAASR,EAAWU,EAAKZ,GACvB,IAAIa,EAAIb,EAAIc,MAAMF,GAClB,OAAOC,EAAIA,EAAE,GAAK,IACpB,CAGA,SAAST,EAAMN,EAAGC,EAAGC,GACnB,IAAIe,EAAMC,EAAKC,EAAMC,EAAOC,EACxBC,EAAKpB,EAAIqB,QAAQvB,GACjBwB,EAAKtB,EAAIqB,QAAQtB,EAAGqB,EAAK,GACzBG,EAAIH,EAER,GAAIA,GAAM,GAAKE,EAAK,EAAG,CACrB,GAAGxB,IAAIC,EACL,MAAO,CAACqB,EAAIE,GAKd,IAHAP,EAAO,GACPE,EAAOjB,EAAIU,OAEJa,GAAK,IAAMJ,GACZI,GAAKH,GACPL,EAAKS,KAAKD,GACVH,EAAKpB,EAAIqB,QAAQvB,EAAGyB,EAAI,IACA,GAAfR,EAAKL,OACdS,EAAS,CAAEJ,EAAKU,MAAOH,KAEvBN,EAAMD,EAAKU,OACDR,IACRA,EAAOD,EACPE,EAAQI,GAGVA,EAAKtB,EAAIqB,QAAQtB,EAAGwB,EAAI,IAG1BA,EAAIH,EAAKE,GAAMF,GAAM,EAAIA,EAAKE,EAG5BP,EAAKL,SACPS,EAAS,CAAEF,EAAMC,GAErB,CAEA,OAAOC,CACT,CA5DAO,EAAOC,QAAU9B,EAqBjBA,EAASO,MAAQA,kBCtBjB,IAAIP,EAAW+B,EAAQ,OAEvBF,EAAOC,QA6DP,SAASE,EAAU7B,GACjB,OAAKA,GASoB,OAArBA,EAAI8B,OAAO,EAAG,KAChB9B,EAAM,SAAWA,EAAI8B,OAAO,IAGvBC,EA7DT,SAASC,EAAahC,GACpB,OAAOA,EAAIiC,MAAM,QAAQC,KAAKC,GACnBF,MAAM,OAAOC,KAAKE,GAClBH,MAAM,OAAOC,KAAKG,GAClBJ,MAAM,OAAOC,KAAKI,GAClBL,MAAM,OAAOC,KAAKK,EAC/B,CAuDgBP,CAAahC,IAAM,GAAMwC,IAAIC,IAZlC,EAaX,EA1EA,IAAIN,EAAW,UAAUO,KAAKC,SAAS,KACnCP,EAAU,SAASM,KAAKC,SAAS,KACjCN,EAAW,UAAUK,KAAKC,SAAS,KACnCL,EAAW,UAAUI,KAAKC,SAAS,KACnCJ,EAAY,WAAWG,KAAKC,SAAS,KAEzC,SAASC,EAAQ5C,GACf,OAAO6C,SAAS7C,EAAK,KAAOA,EACxB6C,SAAS7C,EAAK,IACdA,EAAI8C,WAAW,EACrB,CAUA,SAASL,EAAezC,GACtB,OAAOA,EAAIiC,MAAME,GAAUD,KAAK,MACrBD,MAAMG,GAASF,KAAK,KACpBD,MAAMI,GAAUH,KAAK,KACrBD,MAAMK,GAAUJ,KAAK,KACrBD,MAAMM,GAAWL,KAAK,IACnC,CAMA,SAASa,EAAgB/C,GACvB,IAAKA,EACH,MAAO,CAAC,IAEV,IAAIgD,EAAQ,GACRnC,EAAIhB,EAAS,IAAK,IAAKG,GAE3B,IAAKa,EACH,OAAOb,EAAIiC,MAAM,KAEnB,IAAI1B,EAAMM,EAAEN,IACRE,EAAOI,EAAEJ,KACTE,EAAOE,EAAEF,KACTsC,EAAI1C,EAAI0B,MAAM,KAElBgB,EAAEA,EAAEvC,OAAO,IAAM,IAAMD,EAAO,IAC9B,IAAIyC,EAAYH,EAAgBpC,GAChC,OAAIA,EAAKD,SACPuC,EAAEA,EAAEvC,OAAO,IAAMwC,EAAUC,QAC3BF,EAAEzB,KAAK4B,MAAMH,EAAGC,IAGlBF,EAAMxB,KAAK4B,MAAMJ,EAAOC,GAEjBD,CACT,CAmBA,SAASK,EAAQrD,GACf,MAAO,IAAMA,EAAM,GACrB,CACA,SAASsD,EAASC,GAChB,MAAO,SAASC,KAAKD,EACvB,CAEA,SAASE,EAAIlC,EAAGmC,GACd,OAAOnC,GAAKmC,CACd,CACA,SAASC,EAAIpC,EAAGmC,GACd,OAAOnC,GAAKmC,CACd,CAEA,SAAS3B,EAAO/B,EAAK4D,GACnB,IAAIC,EAAa,GAEbhD,EAAIhB,EAAS,IAAK,IAAKG,GAC3B,IAAKa,EAAG,MAAO,CAACb,GAGhB,IAAIO,EAAMM,EAAEN,IACRI,EAAOE,EAAEF,KAAKD,OACdqB,EAAOlB,EAAEF,MAAM,GACf,CAAC,IAEL,GAAI,MAAM6C,KAAK3C,EAAEN,KACf,QAASuD,EAAI,EAAGA,EAAInD,EAAKD,OAAQoD,IAAK,CACpC,IAAIC,EAAYxD,EAAK,IAAMM,EAAEJ,KAAO,IAAME,EAAKmD,GAC/CD,EAAWrC,KAAKuC,EAClB,KACK,CACL,IAaIC,GAkBAC,GA/BAC,EAAoB,iCAAiCV,KAAK3C,EAAEJ,MAC5D0D,EAAkB,uCAAuCX,KAAK3C,EAAEJ,MAChE2D,EAAaF,GAAqBC,EAClCE,GAAYxD,EAAEJ,KAAKY,QAAQ,MAAQ,EACvC,IAAK+C,IAAeC,GAElB,OAAIxD,EAAEF,KAAKG,MAAM,cAERiB,EADP/B,EAAMa,EAAEN,IAAM,IAAMM,EAAEJ,KAAO4B,EAAWxB,EAAEF,MAGrC,CAACX,GAIV,GAAIoE,EACFJ,GAAInD,EAAEJ,KAAKwB,MAAM,aAAM,GAGN,KADjB+B,GAAIjB,EAAgBlC,EAAEJ,OAChBC,QAGa,KADjBsD,GAAIjC,EAAOiC,GAAE,IAAI,GAAOxB,IAAIa,IACtB3C,OACJ,OAAOC,EAAK6B,IAAI,SAASS,IACvB,OAAOpC,EAAEN,IAAMyD,GAAE,GAAKf,EACxB,GASN,GAAImB,EAAY,CACd,IAAIE,GAAI1B,EAAQoB,GAAE,IACdN,GAAId,EAAQoB,GAAE,IACd1E,GAAQoD,KAAK6B,IAAIP,GAAE,GAAGtD,OAAQsD,GAAE,GAAGtD,QACnC8D,GAAmB,GAAZR,GAAEtD,OACTgC,KAAK+B,IAAI7B,EAAQoB,GAAE,KACnB,EACAR,GAAOC,EACGC,GAAIY,KAEhBE,KAAQ,EACRhB,GAAOG,GAET,IAAIe,GAAMV,GAAEW,KAAKrB,GAEjBW,GAAI,GAEJ,QAAS1C,GAAI+C,GAAGd,GAAKjC,GAAGmC,IAAInC,IAAKiD,GAAM,CACrC,IAAII,EACJ,GAAIT,EAEQ,QADVS,EAAIC,OAAOC,aAAavD,OAEtBqD,EAAI,YAENA,EAAIC,OAAOtD,IACPmD,GAAK,CACP,IAAIK,EAAOzF,GAAQsF,EAAElE,OACrB,GAAIqE,EAAO,EAAG,CACZ,IAAIC,GAAI,IAAIC,MAAMF,EAAO,GAAG7C,KAAK,KAE/B0C,EADErD,GAAI,EACF,IAAMyD,GAAIJ,EAAEpE,MAAM,GAElBwE,GAAIJ,CACZ,CACF,CAEFX,GAAEzC,KAAKoD,EACT,CACF,KAAO,CACLX,GAAI,GAEJ,QAASiB,GAAI,EAAGA,GAAIlB,GAAEtD,OAAQwE,KAC5BjB,GAAEzC,KAAK4B,MAAMa,GAAGlC,EAAOiC,GAAEkB,KAAI,GAEjC,CAEA,IAASA,GAAI,EAAGA,GAAIjB,GAAEvD,OAAQwE,KAC5B,IAASpB,EAAI,EAAGA,EAAInD,EAAKD,OAAQoD,IAAK,CAChCC,EAAYxD,EAAM0D,GAAEiB,IAAKvE,EAAKmD,KAC7BF,GAASQ,GAAcL,IAC1BF,EAAWrC,KAAKuC,EACpB,CAEJ,CAEA,OAAOF,CACT,yGCnMM,MAAOsB,EAgBXC,YAAoBC,GAAAC,KAAAD,YAfXC,KAAAC,YAAc,CAAC,IAAK,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACrED,KAAAE,qBAAuB,CAC9B,MACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEOF,KAAAG,cAAgB,CAAC,KAAM,UAAM,KAAM,IAAK,KAAM,MAC9CH,KAAAI,eAAiB,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEhB,CAElDC,aACEC,EACAC,EACAC,EAAwB,GACxBC,EACAC,EACAC,EAAmB,GAEnB,OAAOX,KAAKD,UAAUa,mBAAmBN,EAAOC,EAAOC,EAAeC,EAAQC,EAAQC,EACxF,CAEAE,kBAAkBP,EAAYC,EAAeC,EAAuBG,EAAmB,GACrF,OAAOX,KAAKK,aAAaC,EAAOC,EAAOC,EAAe,KAAMR,KAAKC,YAAaU,EAChF,CAEAG,2BACER,EACAC,EACAC,EACAG,EAAmB,GAEnB,OAAOX,KAAKK,aACVC,EACAC,EACAC,EACA,KACAR,KAAKE,qBACLS,EAEJ,CAEAI,oBAAoBT,EAAYC,EAAeC,EAAuBG,EAAmB,GACvF,OAAOX,KAAKK,aAAaC,EAAOC,EAAOC,EAAe,IAAMR,KAAKG,cAAeQ,EAClF,CAEAK,qBACEV,EACAC,EACAC,EAAwB,GACxBG,EAAmB,GAEnB,OAAOX,KAAKK,aAAaC,EAAOC,EAAOC,EAAe,IAAMR,KAAKI,eAAgBO,EACnF,iDA5DWd,GAAsBoB,qBAAAC,KAAA,+DAAtBrB,EAAsBsB,QAAtBtB,EAAsBuB,UAAAC,WAFrB,QAAM,mMCQZJ,oCAAA,GACEA,sBAAA,4JAAMA,sBAAA,GAEAA,uBAFA,UAAAA,4BAAA,EAAAK,EAAAC,EAAAC,eAEAP,CAF2D,UAAAA,4BAAA,EAAAQ,EAAAF,EAAAC,cAAA,gBAE3DP,CADuD,QAAAS,EAAAC,OAClCV,sBAAAS,EAAAC,2FAG7BV,sBAAA,4EACEA,8CAAAM,EAAAK,kBAAAX,CACFM,EAAAM,4GAbFZ,2BAAA,YAEEA,sBAAA,YAGAA,uBAAA,EAAAa,EAAA,uBAKAb,sBAAA,UACAA,uBAAA,EAAAc,EAAA,cAGFd,qIAXOA,sBAAA,GAAAA,wBAAA,mBAAAS,EAAAM,sBAEUf,+CAAA,QAAAM,EAAAU,WAAAC,SAAAR,EAAAC,QAMTV,sBAAA,GAAAA,uBAAA,OAAAM,EAAAY,UAAAT,EAAAU,aADAnB,uBAAA,MAAAS,EAAA,KAAAA,EAAAU,cAAA,MAAAnB,CAA6D,MAAAS,EAAA,KAAAA,EAAAW,uEAZvEpB,2BAAA,SAAAA,wBAAA,KAEEA,uBAAA,EAAAqB,EAAA,aAeFrB,6EAfQA,sBAAA,GAAAA,uBAAA,WAAAS,EAAAa,KAAAnH,SCgBN,MAAOoH,EAqDX1C,YACU2C,EACAC,EACAC,EACAC,EACA7C,EACA8C,GALA7C,KAAAyC,YACAzC,KAAA0C,gBACA1C,KAAA2C,yBACA3C,KAAA4C,cACA5C,KAAAD,YACAC,KAAA6C,kBA/CV7C,KAAA8C,YAAyB,GAEzB9C,KAAAW,SAAoB,EAEpBX,KAAAwB,eAAgB,EAEhBxB,KAAA+C,gBAA2B,EAQ3B/C,KAAAgD,UAAiB,CAAEC,QAAS,IAC5BjD,KAAAkD,QAAe,GACflD,KAAAmD,iBAAwB,GAIjBnD,KAAAoD,sBAA+B,CACpC,CACEC,WAAWC,GACT,IAAKA,EAAMJ,QAAQK,QAAQC,WACzB,OAEF,MACEC,MACAC,WAAa/H,QAAMgI,OAAK3J,SAAOC,YAC7BqJ,EACJG,EAAIG,OACJH,EAAII,YAAcP,EAAMJ,QAAQK,QAAQO,gBAAgBC,YACxDN,EAAIO,UAAYV,EAAMJ,QAAQK,QAAQO,gBAAgBG,YACtDR,EAAIS,YAAYZ,EAAMJ,QAAQK,QAAQO,gBAAgBK,YAAc,IACpEV,EAAIW,eAAiBd,EAAMJ,QAAQK,QAAQO,gBAAgBO,iBAC3DZ,EAAIa,WAAW3I,GAAMgI,GAAK3J,GAAOC,IACjCwJ,EAAIc,SACN,IAYFvE,KAAKwE,YAAc,CACjB,CACExE,KAAKyC,UAAUgC,cAAc,2BAC7BzE,KAAKyC,UAAUgC,cAAc,iCAE/B,CACEzE,KAAKyC,UAAUgC,cAAc,sBAC7BzE,KAAKyC,UAAUgC,cAAc,mCAE/B,CACEzE,KAAKyC,UAAUgC,cAAc,qBAC7BzE,KAAKyC,UAAUgC,cAAc,kCAE/B,CACEzE,KAAKyC,UAAUgC,cAAc,oBAC7BzE,KAAKyC,UAAUgC,cAAc,iCAE/B,CACEzE,KAAKyC,UAAUgC,cAAc,sBAC7BzE,KAAKyC,UAAUgC,cAAc,mCAE/B,CACEzE,KAAKyC,UAAUgC,cAAc,mBAC7BzE,KAAKyC,UAAUgC,cAAc,iCAIjCzE,KAAKkD,QAAU,CACbK,QAAS,CACPmB,OAAQ,CACNC,SAAS,GAEXC,QAAS,CACPC,KAAM,QACNC,SAAU,SAAUC,GAClBA,EAAaH,QAAQ5F,EAAI,GACzB+F,EAAaH,QAAQxG,EAAI,CAC3B,EAAE4G,KAAKhF,MACPiF,WAAW,EACXC,eAAe,EACfC,gBAAiBnF,KAAKyC,UAAUgC,cAAc,kCAC9CW,UAAW,CACTC,MAAO,SAAUC,GACf,OAAOA,EAAY,GAAGC,MACxB,EACA5D,MAAQ6D,GAEJ,IACAA,EAAQvC,QAAQtB,MAChB,MACA6D,EAAQC,eACR,IACAzF,KAAK0F,iBAKblC,YAAY,EACZM,gBAAiB,CACfC,YAAa/D,KAAKyC,UAAUgC,cAAc,gCAC1CR,YAAa,IAGjB0B,YAAY,EACZC,qBAAqB,EACrBC,WAAW,EACXC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZC,MAAO,CACLhB,WAAW,GAEbiB,OAAQ,CACNlH,EAAG,CACD2F,SAAS,EACTwB,KAAM,OACNC,KAAM,CACJzB,SAAS,GAEX0B,KAAM,CACJC,cAAe,0BAGnBlI,EAAG,CACDmI,SAAWC,GAAwBA,EAAcxM,MAAQ,IACzDoM,KAAM,CACJzB,SAAS,GAEX8B,aAAa,EACbC,MAAO,CACLC,cAAe,KAKzB,CAEAC,YAAYC,GACV7G,KAAK8G,gBAAgBD,EACvB,CAEAE,kBACE/G,KAAK8G,gBAAgB,KACvB,CAEQA,gBAAgBD,GACtB7G,KAAK8C,YAAYkE,QAAQ,CAACC,EAAgBC,KACxC,MAAMC,EAAaD,EAAQlH,KAAKwE,aAAapJ,OAC7C4E,KAAKgD,UAAUC,QAAQiE,GAAS,CAC9BvF,MAAO,GACPY,KAAM,GACN6E,QAAS,GACTpF,qBAAsBhC,KAAKwE,YAAY2C,GAAY,GACnDhC,gBAAiBnF,KAAKwE,YAAY2C,GAAY,GAC9CpD,YAAa/D,KAAKwE,YAAY2C,GAAY,GAC1ClD,YAAa,EACblK,KAAM,CACJsN,OAAQ,WAGZrH,KAAKgD,UAAUC,QAAQiE,GAAOvF,MAAQ3B,KAAK8C,YAAYoE,EAAK,GAG9DlH,KAAKsH,gBAEDtH,KAAKuH,YAAY,IAAInM,SACvB4E,KAAKuH,UAAYV,GAASU,WAAWC,cAAgBxH,KAAKuH,UAC1DvH,KAAKmD,iBAAmBnD,KAAKgD,UAC7BhD,KAAKuH,WAAWP,QAAQ,CAACS,EAAgCP,KACvDlH,KAAKgD,UAAUC,QAAQiE,GAAO3E,KAAOvC,KAAK0H,WAAW1H,KAAKuH,UAAUL,IACpE,IAAIS,EAAmB3H,KAAKuH,YAAYL,KAASlH,KAAKuH,UAAUL,IAAQ9L,OAAS,GAC7E4E,KAAKuH,UAAUL,GAAOlH,KAAKuH,UAAUL,IAAQ9L,OAAS,GAAG,GACzD,EACAuM,KAEA3H,KAAKmD,iBAAiBF,QAAQiE,GAAO9E,YACrCpC,KAAKmD,iBAAiBF,QAAQiE,GAAO7E,kBACnCrC,KAAK4H,aAAaD,GAAkBhL,MAAM,MAC7CqD,KAAK4B,kBAAmB5B,KAAK6B,wBAA0B7B,KAAK4H,aAC3D5H,KAAKmC,UACLxF,MAAM,KACRqD,KAAKmD,iBAAiBF,QAAQiE,GAAOS,iBAAsBA,KAG/D3H,KAAKmD,iBAAiBF,QAAQ4E,KAC5B,CAACrN,EAAiCC,IAChCqN,WAAWrN,EAAEkN,kBAAuBG,WAAWtN,EAAEmN,oBAInD3H,KAAKsD,OACPtD,KAAKsD,MAAMA,MAAMyE,QAErB,CAEQL,WAAWM,GACjB,IAAIC,EAAgB,GACpBA,SAAgBD,GAAO9K,IAAKqF,KAC1BvD,EAAa,IAAVuD,EAAK,GACRnE,EAAG8J,OAAOlI,KAAKmI,wBAAwB5F,EAAK,IAAI6F,QAAQ,YAAa,QAEhEH,CACT,CAEQE,wBAAwB5F,GAC9B,IAAI8F,EAAwB,GAC5B,OAA4B,OAAxBrI,KAAK0F,iBAEL2C,EADqB,MAAnBrI,KAAKsI,UACStI,KAAK6C,gBAAgBhC,kBACnC0B,EACAvC,KAAKsI,UACLtI,KAAK0F,eACL1F,KAAKW,UAEqB,QAAnBX,KAAKsI,UACEtI,KAAK6C,gBAAgB/B,2BACnCyB,EACAvC,KAAKsI,UACLtI,KAAK0F,eACL1F,KAAKW,UAEqB,OAAnBX,KAAKsI,UACEtI,KAAK6C,gBAAgB9B,oBACnCwB,EACAvC,KAAKsI,UACLtI,KAAK0F,eACL1F,KAAKW,UAGSX,KAAK6C,gBAAgB7B,qBACnCuB,EACAvC,KAAKsI,UACLtI,KAAK0F,eACL1F,KAAKW,WAIJ0H,CACT,CAEQT,aAAarF,GACnB,IAAI8F,EAAwB,GAC5B,OACEA,EADqB,MAAnBrI,KAAKsI,UACStI,KAAK0C,cAAc6F,UAAUhG,EAAMvC,KAAKW,UAC5B,QAAnBX,KAAKsI,UACEtI,KAAK2C,uBAAuB4F,UAAUhG,EAAMvC,KAAKW,UACrC,OAAnBX,KAAKsI,UACEtI,KAAKD,UAAUyI,cAAcjG,EAAM,IAAM,CAAC,KAAM,KAAMvC,KAAKW,UAE3DX,KAAK4C,YAAY2F,UAAUhG,EAAMvC,KAAKW,UAEjD0H,CACT,CAEQf,gBACN,IAAKtH,KAAKsD,MAER,YADAtD,KAAK0F,eAAiB,IAIxB,IAAIvD,EAAW,EACXsG,EAAoB,GAExB,MAAMC,EAAgB1I,KAAKuH,WAAWoB,OAAO,CAACX,EAAiBzF,IACtDyF,EAAMY,OAAOrG,GAAMrF,IAAK2L,GAA6BA,EAAO,KAClE,IAEH1G,EAAWuG,EAAgBtL,KAAK6B,OAAOyJ,EAAcxL,IAAIgL,SAAW,GACnE/F,EAAUsG,GAAqBzI,KAAK4H,aAAazF,GAAUxF,MAAM,KAE/CqD,KAAKsD,MAAMA,MAAMJ,QAAQgD,OAAO9H,EACxCsI,MAAMoC,SAAYxI,GACb,IAAVA,EACK,KAEJmI,EAGE,GAAGnI,KAASmI,IAFV,GAAGnI,IAIdN,KAAK0F,eAAiB+C,GAAqB,GAC3CzI,KAAKsD,MAAMA,MAAMyE,QACnB,iDAjTWvF,GAA2BvB,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,GAAA,4DAA3B3G,EAA2B4G,UAAA,8BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BAC3BC,qBAAkB,iYDpBnBC,2EAAA,mCAGNA,2EAAA,sDAEE,oCAEA,6GACA,6DACE,qCAE2B,mCAAgB,4DAC7C,+DACA,uCAAM,sCAAiC,qCAA4B,0DACnE,+DACU,sCAAwB,sCAClC,6GACF,sjBApBJvI,2BADF,UACEA,CADoB,WAElBA,sBAAA,QACAA,2BAAA,SAAAA,mBAAA,KACwBA,2BACxBA,uBAAA,EAAAwI,EAAA,aAkBFxI,2BAGEA,2BADF,UACEA,CADoC,WAElCA,sBAAA,cAQNA,sCA/BYA,sBAAA,GAAAA,sBAAAwC,EAAAxB,uCACchB,+CAAA,UAAAwC,EAAAN,iBAAAF,SAqBjBhC,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAjG,EAAAV,eAAAU,EAAAV,iBAEK9B,wBAGAA,uBAHA,WAAAwC,EAAAT,UAAAC,QAGAhC,CAH8B,UAAAwC,EAAAP,QAG9BjC,CAFmB,cAEnBA,CADe,UAAAwC,EAAAL,wXExBzBnC,2BAAA,cAC8BA,mBAAA,GAC9BA,qDADQA,uBAAA,UAAA0I,EAAArJ,OAAsBW,uDAAA,GAAA0I,EAAAvP,KAAA,MCE5B,MAAOwP,EAOX9J,cALAE,KAAA6J,aAAe,IAAIC,eAMjB9J,KAAK+J,MAAQ,CACX,CACE3P,KAAMoP,0BACNlJ,MAAON,KAAKgK,WAAW,IAAQ,IAEjC,CACE5P,KAAMoP,2BACNlJ,MAAON,KAAKgK,WAAW,IAAS,IAElC,CACE5P,KAAMoP,2BACNlJ,MAAON,KAAKgK,WAAW,KAAS,IAElC,CACE5P,KAAMoP,uBACNlJ,MAAON,KAAKgK,WAAW,KAAM,KAE/B,CACE5P,KAAMoP,wBACNlJ,MAAON,KAAKgK,WAAW,MAAU,KAEnC,CACE5P,KAAMoP,wBACNlJ,MAAON,KAAKgK,WAAW,MAAU,KAEnC,CACE5P,KAAMoP,yBACNlJ,MAAON,KAAKgK,WAAW,MAAW,MAEpC,CACE5P,KAAMoP,yBACNlJ,MAAON,KAAKgK,WAAW,MAAW,OAGtChK,KAAKqG,KAAOrG,KAAK+J,MAAM,GAAGzJ,KAC5B,CAEA2J,WACEjK,KAAK6J,aAAaK,KAAKlK,KAAKgK,WAAWhK,KAAKqG,KAAKrL,IAAMgF,KAAKqG,KAAKtL,MAAOiF,KAAKqG,KAAK8D,MACpF,CAEOH,WAAWI,EAAoBD,GAQpC,MAL2B,CACzBpP,MAHmBsP,MAASC,OAASF,EAIrCpP,IAHsBqP,MAASC,OAI/BH,KAAMA,EAGV,iDA1DWP,EAA8B,4DAA9BA,EAA8BR,UAAA,iCAAAmB,QAAA,CAAAV,aAAA,gBAAAW,MAAA,EAAAC,KAAA,EAAAC,OAAA,yJAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDRzCrI,2BADF,UACEA,CADwB,cAGhBA,6BAAA,yBAAA2J,GAAA3J,sCAAAwC,EAAA4C,KAAAuE,KAAAnH,EAAA4C,KAAAuE,IAAA,GACA3J,uBAAA,kCAAiBwC,EAAAwG,UAAU,GAEjChJ,uBAAA,EAAA4J,EAAA,gBAIJ5J,oCAPUA,qDAAA,UAAAwC,EAAA4C,MAGkBpF,+CAAA,UAAAwC,EAAAsG,kYE0CtB,MAAOe,oDAAiB,2DAAjBA,GAAiB,+DAFjB,IAACC,oBAAcC,gCAA4BC,QAAA,CA1BpDC,IACAC,eACAC,eACAC,IACAC,eACAC,mBACAC,cACAC,sBACAC,yBAEAC,kBACAC,wBAAmB,mBC/BhB,IAAKC,8BAAc,KACxBC,KAAA,OACAD,EAAAE,IAAA,kQCFA9K,oCAAA,GACAA,2BAAA,YAAAA,wBAAA,uCAIAA,sBAAA,kBAGAA,mDACAA,sBAAA,mGALAA,sBAAA,GAAAA,8CAAA,IAAA+K,GAAA3G,mCAKapE,+CAAA,YAAA+K,GAAAC,UAAA7R,OCDT,MAAO8R,EALbpM,cAMEE,KAAAqF,MAAQmE,oEADG0C,EAA0B,4DAA1BA,EAA0B9C,UAAA,6BAAA+C,OAAA,CAAAF,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDLpC5C,4EACD,kCACA,wEAEA,4GAPAvI,uBAAA,EAAAoL,EAAA,4BAAepL,uBAAA,SAAAwC,GAAAwI,mJEcfhL,sBAAA,0EACyBA,uBAAA,YAAAM,GAAA+K,iFAfzBrL,oCAAA,GACAA,2BAAA,gBAQUA,uBAFA,0BAAA2J,GAAA3J,0BAAAsL,IAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EAExC3J,CAFyC,uBAAAA,0BAAAsL,IAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC5BM,EAAAkL,WAAU,EACvBxL,CADwB,2BAAA2J,GAAA3J,0BAAAsL,IAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACLM,EAAAmL,gBAAA9B,GAAuB,GACpD3J,sBAAA,wBAIAA,uBAAA,EAAA0L,EAAA,gCAEA1L,wHAfUA,wBAKAA,uBALA,gBAKAA,CALmB,OAAA2L,GAKnB3L,CAJiB,UAAAM,GAAAsL,QAIjB5L,CAFmB,iBAOXA,wBAEAA,uBAFA,YAAAM,GAAA0K,UAEAhL,CAFuB,aAAAM,GAAAuL,WAEvB7L,CADyB,eAAAM,GAAAwL,2CAY3C9L,2BADA,SACAA,CADyC,eAEvCA,mBAAA,GAEFA,kFAFEA,sBAAA,GAAAA,+BAAA,IAAA+L,GAAAC,WAAA,IAAAD,GAAAE,KAAA,iCAFFjM,uBAAA,EAAAkM,EAAA,yCAAOlM,uBAAA,OAAA+L,GAAAC,YAAAD,GAAAE,mCAaPjM,2BADA,SACAA,CADyC,eAEvCA,mBAAA,GAEFA,mFAFEA,sBAAA,GAAAA,+BAAA,IAAAmM,GAAAC,GAAA,IAAAD,GAAAF,KAAA,mCAHFjM,2BAAA,UACAA,uBAAA,EAAAqM,EAAA,cAKArM,wDALOA,+CAAA,OAAAmM,GAAAC,IAAAD,GAAAF,mCADPjM,uBAAA,EAAAsM,GAAA,2CAA0BtM,uBAAA,UAAAuM,kCAatBvM,2BADF,SACEA,CAD6B,eACVA,mBAAA,GACrBA,mFADqBA,sBAAA,GAAAA,8BAAAwM,GAAAC,wCAFvBzM,2BAAA,UACEA,uBAAA,EAAA0M,GAAA,cAGF1M,wDAHSA,+CAAA,OAAAwM,GAAAC,uCADTzM,uBAAA,EAAA2M,GAAA,2CAA0B3M,uBAAA,UAAA4M,KCvBtB,MAAOC,WAA4BC,IAkBvCjO,YACSkO,GACGC,GACFC,GACAC,EACAC,GAERC,QANOrO,KAAAgO,gBACGhO,KAAAiO,UACFjO,KAAAkO,sBACAlO,KAAAmO,aACAnO,KAAAoO,cAbVpO,KAAA6M,QAA2B,GAC3B7M,KAAAiM,UAA8B,IAAIqC,IAClCtO,KAAA+M,aAAgC,GAIhC/M,KAAAuO,QAAU,IAAIC,kBAA8B,GAU5C,CAEAC,WACEzO,KAAKoO,YAAYM,SAASC,UAAWD,KACnC1O,KAAK4O,WAAaF,KAEpB1O,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBC,IAC3D9O,KAAK+O,UAAY/O,KAAKuO,QAAQS,QAAKC,aAAU,IAAMjP,KAAKmO,WAAWe,mBACnElP,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,qBACN2F,KAAM,UACNC,SAAU,EACVC,aAAcrP,KAAKsP,aAErB,CACElV,KAAMoP,sBACN2F,KAAM,UACNC,SAAU,EACVC,aAAcrP,KAAKuP,WAErB,CACEnV,KAAMoP,8BACN2F,KAAM,aACNC,SAAU,EACVC,aAAcrP,KAAKwP,cAGzB,CAEA/C,WACEzM,KAAKuO,QAAQkB,KAAK,GACpB,CAEA/C,gBAAgBT,IACdjM,KAAKiM,UAAYA,EACnB,mDAnEW6B,IAAmB7M,8BAAAC,MAAAD,sEAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAA,4DAAnB6E,GAAmB1E,UAAA,qBAAAC,UAAA,SAAAC,GAAA7F,OAAA,EAAA6F,yYAFnB,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IALzC,iBAKuE1O,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,oWAAAC,SAAA,SAAArB,GAAA7F,IAAA,EAAA6F,KDpBtFrI,uBAAA,EAAA4O,EAAA,oDA2CA5O,uBAxBA,EAAA6O,EAAA,yBAAA7O,mCAwBAA,CArBC,EAAA8O,GAAA,yBAAA9O,mCAqBDA,CAVC,EAAA+O,GAAA,yBAAA/O,2CAjCcA,uBAAA,OAAAA,wBAAA,WAAAwC,GAAAmL,WAAA,KAAAnL,GAAAmL,WAAAqB,YAAAxM,GAAAsL,6cEQX9N,2BAFF,YAEEA,CADiC,aACjCA,mBAAA,KAEFA,qDAsCcA,2BAAA,UAAAA,mBAAA,KACkCA,mDAElCA,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,0CACAA,sBAAA,QACAA,oCAAA,GAAAA,mBAAA,0CAA+CA,mBAAA,mCACjDA,sDARFA,2BAAA,aAIEA,uBAHA,EAAAiP,GAAA,cAGAjP,CAFW,EAAAkP,GAAA,eAOblP,wIARSA,+CAAA,OAAAmP,GAAAC,UAAAC,EAAA,YAAAC,GAAA,aAGAtP,+CAAA,OAAAmP,GAAAC,UAAAC,EAAA,YAAAC,GAAA,sEAmBTtP,sBAAA,iEACQA,+CAAA,QAAAuP,EAAAlQ,OAAqBW,sBAAAuP,EAAAlQ,6DAG7BW,2BAAA,UACEA,mBAAA,GACFA,2GADEA,uDAAA,IAAAmP,GAAAK,kBAAAH,GAAA,+BADFrP,uBAAA,EAAAyP,GAAA,6FAAOzP,uBAAA,OAAAmP,GAAAO,SAAAL,EAAA,0EAgBPrP,sBAAA,iEACQA,+CAAA,QAAA2P,GAAiB3P,sBAAA2P,+FA5E/B3P,2BAFJ,QAEIA,CAFuF,WAEvFA,CADsB,QAEpBA,mBAAA,GACAA,2BAAA,wBAGiBA,uBAAA,yBAAAqP,GAAArP,0BAAA4P,GAAA3J,MAAAkJ,GAAAnP,4BAAA,OAAAA,wBAASmP,GAAAU,aAAAR,IAAmB,gCAI3CrP,sBAAA,YAIJA,2DAKIA,2BAHJ,QAGIA,CAHC,WAGDA,CADqB,uBACrBA,wBAAA,KAMEA,sBAAA,eAMFA,mDACAA,uBAAA,GAAA8P,GAAA,yBAAA9P,oCAYFA,2BAIEA,2BADF,YACEA,CADqB,oBACrBA,wBAAA,MAOEA,sBAAA,gBACAA,uBAAA,GAAA+P,GAAA,iBAEF/P,mDACAA,uBAAA,GAAAgQ,GAAA,yBAAAhQ,oCAKFA,2BAIEA,2BADF,YACEA,CAD0B,oBAC1BA,wBAAA,MAOEA,sBAAA,gBACAA,uBAAA,GAAAiQ,GAAA,iBAEFjQ,wBAIRA,uKAlFOA,+CAAA,YAAAkQ,GAEDlQ,sBAAA,GAAAA,+BAAA,WAAAqP,GAAA,OAoBkBrP,sBAAA,GACAA,uBADA,WAAAkQ,EAAAC,SAAAC,UAAAC,OAAAH,EAAAC,SAAAC,UAAAE,MACAtQ,CADmF,cAAAuQ,IAQ1FvQ,sBAAA,GAAAA,uBAAA,WAAAkQ,EAAAC,SAAAC,UAAAC,OAAAH,EAAAC,SAAAC,UAAAE,OAuBGtQ,sBAAA,GAAAA,uBAAA,aAAAwQ,IAGexQ,sBAAA,GAAAA,uBAAA,UAAAmP,GAAAsB,eAiBfzQ,sBAAA,GAAAA,uBAAA,aAAAmP,GAAAuB,iBAGiB1Q,sBAAA,GAAAA,uBAAA,UAAAmP,GAAAwB,WADV3Q,sBAAAmP,GAAAyB,iDC3E3B,MAAOC,GAcXhS,YAAoBqO,GAAAnO,KAAAmO,aALpBnO,KAAA4R,UAAmB,GACnB5R,KAAA0R,cAAuB,GACvB1R,KAAA+R,MAAQC,IAGqC,CAE7CvD,WACEzO,KAAK4R,UAAYK,OAAOC,KAAKlS,KAAKmO,WAAWyD,WAC7C5R,KAAK0R,cAAgB1R,KAAKmO,WAAWuD,cACrCS,YAAUnS,KAAKoS,QAAUC,IACZrS,KAAKsS,YACbC,WAAWF,EAAM,GAEtBrS,KAAKwS,iBAAmBxS,KAAKyS,KAAKC,IAAI,UACxC,CAEAC,uBACE,OAAI3S,KAAKyS,KAAK9B,SAAS,eACd,GAAG3Q,KAAKyS,KAAK9B,SAAS,kBAAkBnH,4CAE1CA,uCACT,CAEAiH,kBAAkBvJ,GAChB,MAAM0L,EAAiB5S,KAAK0R,cAAcmB,KAAMC,IACvC9S,KAAK2Q,SAASzJ,EAAO,iBAAmB4L,GAAsBxS,OAEvE,OAAO6R,iBAAeS,GAAkBA,EAAeG,KAAO,EAChE,CAEAlB,mBACE,OAAI7R,KAAKyS,KAAK9B,SAAS,UACd,GAAG3Q,KAAKyS,KAAK9B,SAAS,cAAcnH,2CAEtCA,mEACT,CAEA8I,YACEtS,KAAKwS,iBAAmBxS,KAAKyS,KAAKC,IAAI,WAEtC,MAAMM,EAAW,uFACXC,EAAgB,GAAGD,cAAqBA,MACxCE,GAAK,IAAIC,IAAY,CACzB9B,UAAW,IAAI+B,qBAAmB,GAAI,CACpCC,WAAY,CAACC,aAAWC,SAAUD,aAAWE,QAAQP,MAEvDQ,YAAa,IAAIL,qBAAmB,IACpCM,OAAQ,IAAIN,qBAAmB,MAGjC,OAAApT,KAAKwS,iBAAiBtW,KAAKgX,IACpBA,EACT,CAEApC,aAAa5J,GACXlH,KAAKwS,iBAAmBxS,KAAKyS,KAAKC,IAAI,WACtC1S,KAAKwS,iBAAiBmB,SAASzM,EACjC,CAEAmJ,UAAUnJ,EAAe0M,EAAiBC,GAAiB7U,IACzD,OAAagB,KAAKyS,KAAKrB,SAASgB,QAAShB,SAASlK,GAAOmJ,UAAUuD,EAASC,GAAS7U,GACvF,CAEA2R,SAASzJ,EAAe0M,GACtB,OAAA5T,KAAKwS,iBAAmBxS,KAAKyS,KAAKC,IAAI,WACvB1S,KAAKwS,iBAAiBsB,GAAG5M,GAC1ByJ,SAASiD,EACzB,CAEAG,UAAU7M,GACR,OAAOA,CACT,iDAjFW4K,IAAsB7Q,8BAAAC,KAAA,4DAAtB4Q,GAAsB1I,UAAA,yBAAA4K,eAAA,SAAA1K,EAAA7F,GAAAwQ,OAAA,EAAA3K,sPDZpBE,oFAuGcA,yFAhGZA,mGA6B8BA,qFAC/B,kDA6BeA,uFACf,oDAA+B,6EAC/B,0DAC6B,mCAAgB,qHAiB9BA,kFACf,sCAAiB,iCAAwB,6EACzC,0DACyB,qCAAY,qHA1CxBA,qGAGUA,6HAEAA,i1CArDrCvI,2BADF,WACEA,CADqB,eACrBA,mBAAA,KACoBA,2BAEpBA,2BAAA,cAEEA,uBAAA,EAAAiT,GAAA,eAMAjT,oCAAA,MACEA,uBAAA,EAAAkT,GAAA,oDAwFElT,2BAFJ,WAEIA,CAFQ,WAERA,CADU,gBAGFA,uBAAA,mBAAAA,iCAAAsL,IAAAtL,wBAASwC,GAAA6O,YAAW,GAE1BrR,oCAAA,IAAAA,mBAAA,uEACAA,sBAAA,aAOVA,yCA7GOA,sBAAA,GAAAA,uBAAA,YAAAwC,GAAAgP,MAEIxR,sBAAA,GAAAA,uBAAA,WAAAwC,GAAAgP,KAAAC,IAAA,WAAApS,MAAAlF,QAOiB6F,sBAAA,GAAiDA,uBAAjD,UAAAwC,GAAA+O,iBAAApB,SAAiDnQ,CAAnB,eAAAwC,GAAAsQ,ulBEUhD9S,sBAAA,+FAEAA,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,iEACQA,+CAAA,QAAAmT,EAAAC,YAA6BpT,sBAAAmT,EAAAC,wGAEvCpT,2BAAA,uBAIgBA,uBAAA,oBAAAA,0BAAAqT,GAAA,MAAAlE,GAAAnP,0BAAA,UAAAA,wBAAWmP,GAAAmE,OAAAC,SAAA,CAAiB,YAAa,CAAAC,QAAU,CAAAC,MAAA,CAAS,cAAa,GAJzFzT,mBAAA,MAMAA,mDAEEA,2BAAA,UAAAA,mBAAA,MACgCA,mDAGhCA,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA0T,GAAA,kHACO1T,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,aAAAE,EAAA,wBAAAH,GAAAyE,YAAA,KAAAzE,GAAAyE,YAAAzZ,0EAQT6F,2BAFF,WAEEA,CADqB,mBAGTA,uBAAA,yBAAAA,0BAAA6T,GAAA,MAAA1E,GAAAnP,0BAAA,UAAAA,wBAAemP,GAAA2E,qBAAoB,GAE7C9T,2BAAA,eAAAA,mBAAA,MACmBA,2BACnBA,2BAAA,eAAAA,mBAAA,MAGJA,uFAkBMA,sBAAA,+FAEAA,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,iEACQA,+CAAA,QAAA+T,EAAA5a,MAA0B6G,sBAAA+T,EAAA5a,yDAGlC6G,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAAgU,GAAA,mHACOhU,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,UAAAE,EAAA,8EAtBTtP,2BAFF,WAEEA,CADqC,mBAOzBA,uBAAA,oBAAAA,0BAAAiU,GAAA,MAAA9E,GAAAnP,0BAAA,UAAAA,wBAAUmP,GAAA+E,sBAAqB,GAN3ClU,wBAAA,MAiBEA,uBANA,EAAAmU,GAAA,gBAMAnU,CALiB,EAAAoU,GAAA,gBAKjBpU,CAHiB,EAAAqU,GAAA,gBAGjBrU,CADiB,EAAAsU,GAAA,iBAGnBtU,mDACAA,uBAAA,EAAAuU,GAAA,0BAAAvU,oCAKFA,sGAlBcA,wBAEAA,uBAFA,UAAAmP,GAAAwE,QAAAxD,SAAAqE,KAAArE,SAAAsE,QAAAC,SAAAvF,GAAAwE,QAAAxD,SAAAqE,KAAArE,SAAAsE,QAAAnE,MAEAtQ,CAF4G,cAAA2U,EAE5G3U,CAD2B,kBAAAmP,GAAAyF,YAG5B5U,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAyF,YAEA5U,+CAAA,cAAAmP,GAAAyF,YAAA,IAAAzF,GAAAyF,WAAAza,QAEA6F,+CAAA,cAAAmP,GAAAyF,YAAAzF,GAAAyF,WAAAza,OAAA,GAEsB6F,+CAAA,UAAAmP,GAAAyF,oEAuB/B5U,sBAAA,+FAEAA,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,iEACQA,+CAAA,QAAA6U,EAAAC,SAAuB9U,sBAAA6U,EAAAC,4DAG/B9U,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA+U,GAAA,mHACO/U,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,UAAAE,EAAA,wCArBTtP,2BAFF,WAEEA,CADsF,oBACtFA,wBAAA,MAgBEA,uBANA,EAAAgV,GAAA,gBAMAhV,CALiB,EAAAiV,GAAA,gBAKjBjV,CAHiB,EAAAkV,GAAA,gBAGjBlV,CADiB,EAAAmV,GAAA,iBAGnBnV,mDACAA,uBAAA,EAAAoV,GAAA,0BAAApV,oCAKFA,oGAlBcA,wBAEAA,uBAFA,UAAAmP,GAAAwE,QAAAxD,SAAAqE,KAAArE,SAAA2E,QAAAJ,SAAAvF,GAAAwE,QAAAxD,SAAAqE,KAAArE,SAAA2E,QAAAxE,MAEAtQ,CAF4G,cAAAqV,EAE5GrV,CAD2B,kBAAAmP,GAAAmG,aAG5BtV,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAmG,aAEAtV,+CAAA,cAAAmP,GAAAmG,aAAA,IAAAnG,GAAAmG,YAAAnb,QAEA6F,+CAAA,cAAAmP,GAAAmG,aAAAnG,GAAAmG,YAAAnb,OAAA,GAEgB6F,+CAAA,UAAAmP,GAAAmG,qCAc7BtV,2BAFF,WAEEA,CADqC,sBACrCA,mBAAA,MAIFA,qDAeIA,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAAuV,GAAA,mHACOvV,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,kBAAAE,EAAA,wCAZTtP,2BAFF,WAEEA,CAD8C,wBAC9CA,wBAAA,MAIEA,sBAAA,eAKFA,mDACAA,uBAAA,EAAAwV,GAAA,0BAAAxV,oCAKFA,oGAdkBA,wBACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAsF,gBAAAf,SAAAvF,GAAAwE,QAAAxD,SAAAsF,gBAAAnF,MACAtQ,CADgG,cAAA0V,GAOvG1V,sBAAA,GAAAA,uBAAA,UAAAmP,GAAAwE,QAAAxD,SAAAsF,gBAAAf,SAAAvF,GAAAwE,QAAAxD,SAAAsF,gBAAAnF,+DAmBPtQ,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,kGACQA,wBACAA,uBADA,QAAA2V,EAAAxc,KACA6G,CADyB,WAAA2V,EAAAxc,OAAAgW,GAAAwE,QAAAlC,IAAA,mBAAApS,OAC6CW,sBAAA2V,EAAAxc,kGAdhF6G,2BAFF,WAEEA,CADyF,oBAM7EA,uBAAA,oBAAAA,0BAAA4V,GAAA,MAAAzG,GAAAnP,0BAAA,UAAAA,wBAAUmP,GAAA0G,YAAW,GALjC7V,wBAAA,MAYEA,uBAJA,EAAA8V,GAAA,gBAIA9V,CAHiB,EAAA+V,GAAA,gBAGjB/V,CADiB,EAAAgW,GAAA,kBAIjBhW,sBAAA,eACFA,wBACFA,0EAXcA,+CAAA,kBAAAmP,EAAA8G,eAEDjW,sBAAA,GAAAA,uBAAA,cAAAmP,EAAA8G,eAEAjW,+CAAA,cAAAmP,EAAA8G,eAAA9G,EAAA8G,cAAA9b,QAAA,GAEsB6F,+CAAA,UAAAmP,EAAA8G,eAGvBjW,+CAAA,QAAAmP,EAAA+G,oBAA6BlW,sBAAAmP,EAAA+G,uGAgBvClW,sBAAA,+FAEAA,sBAAA,8FAEAA,sBAAA,kGAEAA,sBAAA,kGACQA,wBACAA,uBADA,QAAAmW,EAAAhd,KACA6G,CADwB,WAAAmW,EAAAhd,OAAAgW,GAAAwE,QAAAlC,IAAA,aAAApS,OACuCW,sBAAAmW,EAAAhd,wDAGvE6G,2BAAA,aAAAA,mBAAA,MAKAA,qDALAA,uBAAA,EAAAoW,EAAA,yDACWpW,uBAAA,OAAAmP,EAAAwE,QAAAjE,SAAA,qBAAAP,EAAA+G,qBAAA/G,EAAAwE,QAAAjE,SAAA,+EAtBb1P,2BAFF,YAEEA,CADyF,oBAO7EA,uBAAA,oBAAAA,0BAAAqW,GAAA,MAAAlH,GAAAnP,0BAAA,UAAAA,wBAAUmP,GAAAmH,gBAAe,GANrCtW,wBAAA,MAgBEA,uBANA,EAAAuW,GAAA,gBAMAvW,CALiB,EAAAwW,GAAA,gBAKjBxW,CAHiB,EAAAyW,EAAA,gBAGjBzW,CADiB,EAAA0W,GAAA,kBAInB1W,mDACAA,uBAAA,EAAA2W,GAAA,0BAAA3W,oCAQFA,sGAvBcA,wBAGAA,uBAHA,kBAAAmP,GAAAyH,WAGA5W,CAHgC,UAAAmP,GAAAwE,QAAAxD,SAAA0G,UAAAnC,SAAAvF,GAAAwE,QAAAxD,SAAA0G,UAAAvG,MAGhCtQ,CADoF,cAAA8W,GAGrF9W,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAyH,YAEA5W,+CAAA,cAAAmP,GAAAyH,YAAA,IAAAzH,GAAAyH,WAAAzc,QAEA6F,+CAAA,cAAAmP,GAAAyH,YAAAzH,GAAAyH,WAAAzc,OAAA,GAEqB6F,+CAAA,UAAAmP,GAAAyH,oCAkC5B5W,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,wBAAA,MAEoCA,sBAAA,UAA4BA,2EAChEA,2BAAA,aAAAA,mBAAA,MAEsEA,mDACtEA,2BAAA,aAAAA,mBAAA,MAE0DA,qDAF1DA,uBATA,EAAA+W,GAAA,cASA/W,CAPW,EAAAgX,GAAA,cAOXhX,CAJW,EAAAiX,GAAA,cAIXjX,CADW,EAAAkX,GAAA,mHAPJlX,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,OAAAE,EAAA,aAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAlC,IAAA,QAAA0F,SAAA,oBAAAhI,GAAAwE,QAAAlC,IAAA,QAAA2F,SAGApX,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,OAAAE,EAAA,YAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,OAAAE,EAAA,kDA3BTtP,2BAFF,WAEEA,CADqC,wBACrCA,wBAAA,MAMEA,sBAAA,eASFA,mDACAA,uBAAA,EAAAqX,GAAA,0BAAArX,oCAcFA,oGA1BkBA,wBACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAmH,KAAA5C,SAAAvF,GAAAwE,QAAAxD,SAAAmH,KAAAhH,MACAtQ,CAD0E,cAAAuX,GASjFvX,sBAAA,GACAA,uBADA,eAAAmP,GAAAqI,eACAxX,CAD+B,UAAAmP,GAAAwE,QAAAxD,SAAAmH,KAAA5C,SAAAvF,GAAAwE,QAAAxD,SAAAmH,KAAAhH,+BAsCtCtQ,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,wBAAA,MAGuBA,sBAAA,WAC4CA,6EAJnEA,uBAHA,EAAAyX,GAAA,cAGAzX,CADW,EAAA0X,GAAA,mHADJ1X,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,OAAAE,EAAA,aAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,OAAAE,EAAA,oDApBTtP,2BAFF,WAEEA,CADwF,wBACxFA,wBAAA,MAKEA,sBAAA,eASFA,mDACAA,uBAAA,EAAA2X,GAAA,0BAAA3X,oCAUFA,oGAtBkBA,wBACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAmH,KAAA5C,SAAAvF,GAAAwE,QAAAxD,SAAAmH,KAAAhH,MACAtQ,CAD0E,cAAA4X,GASjF5X,sBAAA,GACAA,uBADA,eAAAmP,GAAA0I,iBACA7X,CADiC,UAAAmP,GAAAwE,QAAAxD,SAAAmH,KAAA5C,SAAAvF,GAAAwE,QAAAxD,SAAAmH,KAAAhH,+BAiCtCtQ,2BAAA,aAAAA,mBAAA,MAGkCA,qDAHlCA,uBAAA,EAAA8X,GAAA,kHACO9X,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,gBAAAE,EAAA,aAAAH,GAAAwE,QAAAvE,UAAA,gBAAAE,EAAA,qCA0BTtP,2BAAA,UAAAA,mBAAA,MAAiFA,2BAAOA,sBAAA,QACxFA,2BAAA,UAAAA,mBAAA,MAA2FA,mDAG3FA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAE0DA,mDAC1DA,2BAAA,aAAAA,mBAAA,MAE6GA,mDAC7GA,2BAAA,aAAAA,mBAAA,MAE2EA,qDAF3EA,uBATA,EAAA+X,GAAA,cASA/X,CAPW,EAAAgY,GAAA,cAOXhY,CAJW,EAAAiY,GAAA,cAIXjY,CADW,EAAAkY,GAAA,mHAPJlY,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,SAAAE,EAAA,aAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,SAAAE,EAAA,wBAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,SAAAE,EAAA,YAGAtP,+CAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,SAAAE,EAAA,oBAAAH,GAAAwE,QAAAjE,SAAA,sCA/BT1P,2BAFF,WAEEA,CADkF,wBAClFA,wBAAA,MAMEA,sBAAA,eASFA,mDAKAA,uBAJA,EAAAmY,GAAA,0BAAAnY,mCAIAA,CAJ2B,EAAAoY,GAAA,0BAAApY,oCAkB7BA,kIAhCkBA,wBAGAA,uBAHA,aAAAqY,EAGArY,CAH2B,UAAAmP,GAAAwE,QAAAxD,SAAAmI,OAAA5D,SAAAvF,GAAAwE,QAAAxD,SAAAmI,OAAAhI,MAG3BtQ,CAD8E,cAAAuY,IAUrFvY,sBAAA,GAAAA,uBAAA,UAAAmP,GAAAwE,QAAAxD,SAAAmI,OAAA5D,SAAAvF,GAAAwE,QAAAxD,SAAAmI,OAAAhI,+DAqCPtQ,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,iEACQA,+CAAA,QAAAwY,EAAAnZ,OAA2BW,sBAAAwY,EAAAnZ,6DAGnCW,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,IAAAmP,EAAAK,kBAAAL,EAAAwE,QAAAjE,SAAA,+CADF1P,uBAAA,EAAAyY,GAAA,0DAAOzY,uBAAA,OAAAmP,EAAAwE,QAAAjE,SAAA,wCAKP1P,2BAAA,UAAAA,wBAAA,MAGqCA,sBAAA,gBACMA,6EAJ3CA,uBAAA,EAAA0Y,GAAA,0DAAO1Y,uBAAA,cAAAmP,EAAAwE,QAAAjE,SAAA,wBAAAP,EAAAwJ,wCAOP3Y,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA4Y,GAAA,kHACO5Y,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,cAAAE,EAAA,qEAkBPtP,sBAAA,+FAEAA,sBAAA,kGAEAA,sBAAA,iEACQA,+CAAA,QAAA6Y,GAAiB7Y,sBAAA6Y,sDAGzB7Y,2BAAA,UAAAA,mBAAA,MACmLA,mDAEnLA,2BAAA,UAAAA,mBAAA,MACmKA,mDAEnKA,2BAAA,UAAAA,mBAAA,MAC+JA,kDAE/JA,2BAAA,UAAAA,mBAAA,MACkIA,oDADlIA,uBATA,EAAA8Y,GAAA,eASA9Y,CARW,EAAA+Y,GAAA,eAQX/Y,CALW,EAAAgZ,GAAA,eAKXhZ,CAFW,EAAAiZ,EAAA,0DAPJjZ,uBAAA,uBAAAmP,EAAAwE,QAAAjE,SAAA,WAGA1P,+CAAA,0BAAAmP,EAAAwE,QAAAjE,SAAA,WAGA1P,+CAAA,sBAAAmP,EAAAwE,QAAAjE,SAAA,WAGA1P,+CAAA,0BAAAmP,EAAAwE,QAAAjE,SAAA,kCAIP1P,2BAAA,aAAAA,mBAAA,MAEkCA,oDAFlCA,uBAAA,EAAAkZ,EAAA,kHACOlZ,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,SAAAE,EAAA,oCAuBPtP,2BAAA,aAAAA,mBAAA,MAGkCA,qDAHlCA,uBAAA,EAAAmZ,EAAA,kHACOnZ,uBAAA,OAAAmP,GAAAwE,QAAAvE,UAAA,eAAAE,EAAA,aAAAH,GAAAwE,QAAAvE,UAAA,eAAAE,EAAA,wCAaXtP,2BAAA,wBAEEA,mBAAA,GACFA,sEADEA,uDAAA,IAAAmP,EAAAiK,oBAAA,sEAjcNpZ,oCAAA,GAKIA,2BAJF,cAIEA,CADe,YACfA,mBAAA,2EAC6EA,2BAI3EA,2BADF,WACEA,CADqB,mBACrBA,wBAAA,MAiBEA,uBANA,GAAAqZ,GAAA,gBAMArZ,CALiB,GAAAsZ,GAAA,gBAKjBtZ,CAHiB,GAAAuZ,GAAA,gBAGjBvZ,CADiB,GAAAwZ,GAAA,iBAGnBxZ,mDAYAA,uBAXA,GAAAyZ,GAAA,wBAWAzZ,CANqB,GAAA0Z,GAAA,yBAAA1Z,mCAMrBA,CAJgC,GAAA2Z,GAAA,yBAAA3Z,oCASlCA,2BAGAA,uBAAA,GAAA4Z,GAAA,cAcA5Z,2BAAA,aAgCEA,uBA9BA,GAAA6Z,GAAA,aA8BA7Z,CA7BuC,GAAA8Z,GAAA,cAwDzC9Z,2BAuHAA,uBApHA,GAAA+Z,GAAA,aAoHA/Z,CAnHuC,GAAAga,GAAA,aAmHvCha,CA3GgD,GAAAia,GAAA,aA2GhDja,CAxF2F,GAAAka,GAAA,aAwF3Fla,CAnEyF,GAAAma,GAAA,aAmEzFna,CAlCuC,GAAAoa,GAAA,cAiErCpa,2BADF,YACEA,CADqB,gBACrBA,mBAAA,OAEoCA,2BACpCA,2BAAA,sBAAAA,mBAAA,OAKwBA,2BACxBA,2BAAA,sBAAAA,mBAAA,OAKwBA,2BACtBA,uBAAA,GAAAqa,GAAA,yBAAAra,oCAMFA,2BAGFA,uBAAA,GAAAsa,GAAA,cAwCEta,2BADF,YACEA,CADqB,oBACrBA,wBAAA,OAiBEA,uBAJA,GAAAua,GAAA,gBAIAva,CAHiB,GAAAwa,GAAA,gBAGjBxa,CADiB,GAAAya,GAAA,iBAGnBza,mDAaAA,uBAZA,GAAA0a,GAAA,yBAAA1a,mCAYAA,CAZ+B,GAAA2a,GAAA,yBAAA3a,mCAY/BA,CAPgC,GAAA4a,GAAA,yBAAA5a,oCAYlCA,2BAIEA,2BADF,YACEA,CADqB,oBACrBA,wBAAA,OAeEA,uBAJA,GAAA6a,GAAA,gBAIA7a,CAHiB,GAAA8a,GAAA,gBAGjB9a,CADiB,GAAA+a,GAAA,iBAGnB/a,mDAcAA,uBAbA,GAAAgb,EAAA,yBAAAhb,mCAaAA,CAb2B,GAAAib,EAAA,yBAAAjb,oCAkB7BA,2BAIEA,2BADF,YACEA,CADqB,gBACrBA,mBAAA,OAE0CA,2BAC1CA,2BAAA,sBAAAA,mBAAA,OAKsBA,2BACtBA,2BAAA,sBAAAA,mBAAA,OAKsBA,2BACtBA,uBAAA,GAAAkb,GAAA,yBAAAlb,oCAMFA,2BAGAA,sBAAA,+BAMAA,uBAAA,GAAAmb,GAAA,yBAIAnb,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAA6D,GAAAnP,4BAAA,OAAAA,wBAAqBmP,GAAAiM,eAAc,GAK3Dpb,oYArcMA,+CAAA,YAAAmP,GAAAwE,SAGqB3T,sBAAA,GAAAA,8CAAA,KAAAmP,GAAAkM,QAAArb,CAAoDA,wBAAA,KAAAmP,GAAAmM,sCAU/Dtb,sBAAA,GAGAA,uBAHA,UAAAmP,GAAAwE,QAAAxD,SAAAiD,WAAAsB,SAAAvF,GAAAwE,QAAAxD,SAAAiD,WAAA9C,MAGAtQ,CAHsF,cAAAub,GAGtFvb,CAF4B,kBAAAmP,GAAAyE,YAE5B5T,CADiC,aAAAwb,GAGlCxb,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAyE,aAEA5T,+CAAA,cAAAmP,GAAAyE,aAAA,IAAAzE,GAAAyE,YAAAzZ,QAEA6F,+CAAA,cAAAmP,GAAAyE,aAAAzE,GAAAyE,YAAAzZ,OAAA,GAEmB6F,+CAAA,UAAAmP,GAAAyE,aAGb5T,+CAAA,kBAAAmP,GAAAyE,YAAA,KAAAzE,GAAAyE,YAAAzZ,SAmBb6F,sBAAA,GAAAA,uBAAA,eAAAmP,GAAAwJ,iBAAAxJ,GAAAsM,QAiBEzb,sBAAA,GAAAA,uBAAA,gBAAAmP,GAAAwJ,gBA8BA3Y,+CAAA,eAAAmP,GAAAwJ,gBAAA,SAAAxJ,GAAAwE,QAAAjE,SAAA,oBA8BF1P,+CAAA,gBAAAmP,GAAAwJ,gBAQA3Y,+CAAA,OAAAmP,GAAAwE,QAAAjE,SAAA,mBAmBA1P,+CAAA,gBAAAmP,GAAAwJ,gBAAAxJ,GAAAwE,QAAAjE,SAAA,QAAA+E,UAAAtF,GAAAsM,QAqBFzb,+CAAA,gBAAAmP,GAAAwJ,gBAAAxJ,GAAAwE,QAAAjE,SAAA,QAAA+E,UAAAtF,GAAAsM,QAiCEzb,+CAAA,gBAAAmP,GAAAwJ,gBAmCA3Y,+CAAA,eAAAmP,GAAAwJ,gBAAA,WAAAxJ,GAAAwE,QAAAjE,SAAA,oBAoCU1P,sBAAA,GACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAuL,cAAAhH,SAAAvF,GAAAwE,QAAAxD,SAAAuL,cAAApL,MACAtQ,CAD4F,cAAA2b,IAM5F3b,sBAAA,GACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAyL,cAAAlH,SAAAvF,GAAAwE,QAAAxD,SAAAyL,cAAAtL,MACAtQ,CAD4F,cAAA2b,IAatG3b,sBAAA,GAAAA,uBAAA,OAAAmP,GAAAwE,QAAAjE,SAAA,kBAAAP,GAAAwE,QAAAjE,SAAA,kBA6CQ1P,sBAAA,GAKAA,uBALA,UAAAmP,GAAAwE,QAAAxD,SAAAqC,YAAAkC,SAAAvF,GAAAwE,QAAAxD,SAAAqC,YAAAlC,MAKAtQ,CALwF,cAAA6b,GAKxF7b,CAJ+B,aAAA8b,GAI/B9b,CAH+B,cAAAmP,GAAAwE,QAAAjE,SAAA,wBAAAP,GAAAwJ,eAG/B3Y,CAF6E,WAAA+b,GAE7E/b,CAD8B,kBAAAmP,GAAAsB,eAG/BzQ,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAsB,eAEAzQ,+CAAA,cAAAmP,GAAAsB,eAAA,IAAAtB,GAAAsB,cAAAtW,QAEsB6F,+CAAA,UAAAmP,GAAAsB,eA8BrBzQ,sBAAA,GAGAA,uBAHA,UAAAmP,GAAAwE,QAAAxD,SAAAsC,OAAAiC,SAAAvF,GAAAwE,QAAAxD,SAAAsC,OAAAnC,MAGAtQ,CAH8E,cAAAgc,GAG9Ehc,CAF2B,kBAAAmP,GAAAwB,UAE3B3Q,CAD+B,aAAAic,IAGhCjc,sBAAA,GAAAA,uBAAA,cAAAmP,GAAAwB,WAEA3Q,+CAAA,cAAAmP,GAAAwB,WAAA,IAAAxB,GAAAwB,UAAAxW,QAEkB6F,+CAAA,UAAAmP,GAAAwB,WA+Bf3Q,sBAAA,GACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAA+L,aAAAxH,SAAAvF,GAAAwE,QAAAxD,SAAA+L,aAAA5L,MACAtQ,CAD0F,cAAAmc,IAM1Fnc,sBAAA,GACAA,uBADA,UAAAmP,GAAAwE,QAAAxD,SAAAiM,aAAA1H,SAAAvF,GAAAwE,QAAAxD,SAAAiM,aAAA9L,MACAtQ,CAD0F,cAAAmc,IAYtFnc,sBAAA,GACAA,uBADA,OAAAmP,GAAAwE,QACA3T,CADgB,UAAAmP,GAAAgC,SAOnBnR,sBAAA,GAAAA,uBAAA,SAAAmP,GAAAiK,qBAIKpZ,wBAEAA,uBAFA,OAAAmP,GAAAwE,QAEA3T,CAFgB,aAAAmP,GAAAiK,oBAEhBpZ,CADkC,aAAAA,wBAAA,MAAAmP,GAAAkM,QAAA,IAAArb,wBAAA,MAAAmP,GAAAmM,YC7ZxD,MAAOe,WAAyBC,IAuDpCzd,YACUoO,EACAC,EACAqP,GACAC,GACAC,GACAnJ,GACAoJ,GACAC,GACAC,GACAC,GACAC,GACD/P,IAEPK,QAbQrO,KAAAkO,qBACAlO,KAAAmO,aACAnO,KAAAwd,iBACAxd,KAAAyd,oBACAzd,KAAA0d,SACA1d,KAAAuU,UACAvU,KAAA2d,oBACA3d,KAAA4d,kBACA5d,KAAA6d,kBACA7d,KAAA8d,eACA9d,KAAA+d,eACD/d,KAAAgO,gBA/DThO,KAAAoS,QAAiB,GAIjBpS,KAAA0c,QAAS,EAET1c,KAAAqU,WAAqB,KACrBrU,KAAAge,UAAoB,KAEpBhe,KAAA6U,YAAwC,KACxC7U,KAAA+R,MAAQC,KAERhS,KAAA6V,WAAoB,KAEpB7V,KAAAuW,YAAqB,KAGrBvW,KAAAqa,oBAA8B,KAE9Bra,KAAAie,kBAAoB,CAAElS,IAAK,MAC3B/L,KAAA0R,cAAuB,GACvB1R,KAAA4R,UAAmB,GAKnB5R,KAAAkX,cAAuB,GACvBlX,KAAA6X,WAAoB,GAEpB7X,KAAAke,eAAyB,GACzBle,KAAAme,oBAA8B,GAC9Bne,KAAAoe,eAAyB,GACzBpe,KAAAmX,mBAAqBkH,KAErBre,KAAAyY,eAAkB6F,IACTA,GAAMtP,QACXuP,gBAAa,MAAG,EAChBC,2BAAoB,EACpBC,YAAUC,IAAkB1e,KAAK2e,iBAAiBD,MAAM,EACxDxhB,OAAK0hB,IAAkBA,KAI3B5e,KAAA8Y,iBAAoBwF,IACXA,GAAMtP,QACXuP,gBAAa,MAAG,EAChBC,2BAAoB,EACpBC,YAAUC,IAAkB1e,KAAK6e,mBAAmBH,MAmBtD1e,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBiQ,KAC3D9e,KAAKuc,SAAW/S,sBAChBxJ,KAAK4Z,kBAAiBmF,KAAiB/e,KAAKuU,OAAOyK,IACrD,CAEAvQ,WACEzO,KAAK0R,cAAgB1R,KAAKmO,WAAWuD,cACrC1R,KAAK4R,UAAYK,OAAOC,KAAKlS,KAAKmO,WAAWyD,WAC7C5R,KAAKif,aACL,MAAMC,EAA8B,CAAClf,KAAKmO,WAAWgR,gBAEjDnf,KAAK4Z,iBAAmB/N,IAAeE,IACzCmT,EAAShjB,KAAK8D,KAAK6d,eAAenL,IAAI,WAEtCwM,EAAShjB,KAAK8D,KAAKmO,WAAWiR,eAG5Bpf,KAAKuU,OAAOyK,IAAIK,WAAW,OAAIC,KAAgBtf,KAAK4Z,8BACtD5Z,KAAK0c,QAAS,GAGZ1c,KAAK0c,QACP1c,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAK0d,MAAM8B,OAAO7Q,UACf6Q,IACCxf,KAAKqU,WAAaoL,mBAAmBD,EAAOnL,YAC5CrU,KAAKge,UAAYyB,mBAAmBD,EAAOxB,WACvCwB,EAAOE,kBACT1f,KAAK4U,QAAQlC,IAAI,mBAAmBiN,SAASH,EAAOE,iBAChDF,EAAOE,kBAAoBE,KAAcC,OAC3C7f,KAAK8f,YAEL9f,KAAK+f,YAGTb,EAAShjB,KAAK8D,KAAKmO,WAAWuE,IAAI1S,KAAKqU,WAAYrU,KAAKge,YACxDhe,KAAKggB,QAAQd,EAAQ,GAGzBlf,KAAK4U,QAAQlC,IAAI,cAAcuN,UAC/BjgB,KAAK4U,QAAQlC,IAAI,QAAQuN,UACzBjgB,KAAK4U,QAAQlC,IAAI,QAAQuN,YAEzBjgB,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK0d,MAAM8B,OAAO7Q,UACf6Q,IACCxf,KAAKke,eAAiBsB,EAAO9J,QAC7B1V,KAAKme,oBAAsBqB,EAAOW,gBAC9BX,EAAO1H,YAAW9X,KAAKoe,eAAiBoB,EAAO1H,aAInD9X,KAAK4Z,iBAAmB/N,IAAeE,MACzC/L,KAAK4U,QAAQlC,IAAI,mBAAmBiN,SAAS,UAC7C3f,KAAK8f,aAEP9f,KAAKggB,QAAQd,GAEjB,CAEAc,QAAQd,IACNkB,cAASlB,GAAUvQ,UAAWpM,IAC5BvC,KAAKqgB,gBAAgB9d,EAAK,IAC1BvC,KAAKsgB,aAAa/d,EAAK,IACnBA,EAAK,IACPvC,KAAKugB,aAAahe,EAAK,IAEzBvC,KAAKwgB,cAAY,EAErB,CAEArL,sBACEnV,KAAKygB,yBACP,CAEM3J,YAAS,IAAA4J,EAAA1gB,KAAA,SAAA2gB,KAAA,YACb,MAAMjL,EAAUgL,EAAK9L,QAAQjE,SAAS,QAAQ+E,QACxCkL,GAAYF,EAAK9L,QAAQjE,SAAS,yBAClC+P,EAAKG,oBAEVD,KAAcF,EAAKvJ,mBAChBuJ,EAAKlD,cAAc9K,IAAIgD,GACvBgL,EAAKlD,cAAc9K,IAAIgD,EAASkL,KAClCjS,UAAWpM,KACXme,EAAK7I,WAAatV,KAEpBme,EAAKI,uBAAwB,EAXhB,EAYf,CAEAC,aAAarL,GACX1V,KAAKyd,iBAAiB/K,IAAIgD,GAAS/G,UAAWpM,IAC5CvC,KAAKkX,cAAgB3U,GAEzB,CAEAse,mBACE,MAAMG,EAAShhB,KAAK4U,QAAQjE,SAAS,QAAQ+E,QACvCuL,EAAcjhB,KAAK4U,QAAQjE,SAAS,mBAE1C,OAAO,IAAIuQ,QAAc,CAACC,GAASC,MAC7BH,GAAejhB,KAAKmX,mBACtBnX,KAAKqhB,WAAW,YAAcrhB,KAAKmX,oBACX,IAAf8J,EACTjhB,KAAKyd,iBACF6D,KAAKN,EAAQC,GACbjS,QAAK9R,OAAKqF,IAASA,GAAKgW,OACxB5J,UACE4J,KACCvY,KAAKqhB,WAAW9I,IAChB4I,IAAO,EAERI,IAAUH,GAAOG,MAGtBvhB,KAAKqhB,WAAW,IAChBrhB,KAAK8gB,yBAEPK,IAAO,EAEX,CAGAV,0BACE,MAAMO,EAAShhB,KAAK4U,QAAQjE,SAAS,QAAQ+E,QAC7C1V,KAAK+gB,aAAaC,GAClBhhB,KAAK8W,YACL9W,KAAKqhB,WAAW,YAAcrhB,KAAKmX,oBACnCnX,KAAK8gB,uBACP,CAEAvJ,gBACE,OAAO,IAAI2J,QAAc,CAACC,EAASC,KACjC,MAAMI,GAASxhB,KAAK4U,QAAQjE,SAAS,aAC/BsQ,GAAcjhB,KAAK4U,QAAQjE,SAAS,mBACpC+E,GAAU1V,KAAK4U,QAAQjE,SAAS,QAAQ+E,QAE9C1V,KAAKwd,cACF8D,KAAK5L,GAAS8L,GAAQP,KAAgBjhB,KAAKmX,mBAAqB,GAAK8J,IACrEjS,QAAK9R,OAAKqF,IAASA,GAAKgW,OACxB5J,UACE4J,KACCvY,KAAKqhB,WAAW9I,IAChB4I,GAAO,EAERI,IAAUH,EAAOG,IAAM,EAGhC,CAEAT,wBACE,MAAMW,EAAiBzhB,KAAK4U,QAAQlC,IAAI,mBAAmBpS,MACrDohB,EAAmB1hB,KAAK4U,QAAQlC,IAAI,aAGtC+O,GAAkBzhB,KAAKmX,mBACzBuK,GAAkBC,cAAc,CAACrO,aAAWC,WAE5CmO,GAAkBE,kBAEpBF,GAAkBG,wBACpB,CAEAR,WAAW9I,GACTvY,KAAK4U,QAAQrC,WAAW,CAAEgG,KAAMA,GAClC,CAEA0G,aACEjf,KAAK4U,QAAU,IAAIzB,IAAY,CAE7BkB,WAAY,IAAIjB,qBAAmB,GAAI,CACrCC,WAAY,CAACC,aAAWC,YAE1BgF,KAAM,IAAInF,qBAAmB,GAAI,CAC/BC,WAAY,CACVC,aAAWC,SACXuO,KAAaC,OAAO,kBAAmB/hB,KAAKgiB,2BAGhDrF,cAAe,IAAIvJ,sBAAmB,EAAM,CAC1CC,WAAY,CACVyO,KAAaG,WAAW,CAAEpF,eAAe,GAAUvc,IACzCA,MAIduc,cAAe,IAAIzJ,sBAAmB,EAAM,CAC1CC,WAAY,CACVyO,KAAaG,WAAW,CAAEtF,eAAe,GAAUrc,IACzCA,MAIdiZ,OAAQ,IAAInG,qBAAmB,GAAI,CACjCC,WAAY,CACVyO,KAAaG,WAAW,CAAEpF,eAAe,EAAMF,eAAe,IAC9DrJ,aAAWE,QAAQ,oBAGvBC,YAAa,IAAIL,qBAAmB,MACpCM,OAAQ,IAAIN,qBAAmBpT,KAAK4R,UAAU,IAC9CuL,aAAc,IAAI/J,sBAAmB,EAAM,CACzCC,WAAY,CACVyO,KAAaG,WAAW,CAAE5E,cAAc,GAAU/c,IACxCA,MAId+c,aAAc,IAAIjK,sBAAmB,EAAM,CACzCC,WAAY,CACVyO,KAAaG,WAAW,CAAE9E,cAAc,GAAU7c,IACxCA,MAId8R,QAASpS,KAAK8d,YAAY9V,MAAM,IAChCka,eAAgB,IAAI9O,sBAAmB,GAGvCqC,KAAM,IAAItC,IAAY,CACpB/Y,KAAM,IAAIgZ,qBAAmBpT,KAAK4Z,eAAgB,CAChDvG,WAAY,CAACC,aAAWC,YAG1BwC,QAAS,IAAI3C,qBAAmB,GAAI,CAClCC,WAAY,CACVyO,KAAaG,WAAW,CACtB7nB,KAAM,WAKZsb,QAAS,IAAItC,qBAAmB,GAAI,CAClCC,WAAY,CACVyO,KAAaG,WAAW,CACtB7nB,KAAM,cAOd+lB,gBAAiB,IAAI/M,qBAAmBpT,KAAKmX,oBAC7CW,UAAW,IAAI1E,qBAAmB,IAClCsD,gBAAiB,IAAItD,qBACnB,mBACA0O,KAAaG,WAAW,CAAEC,gBAAgB,EAAM,YAAa,UAI/DxC,gBAAiB,IAAItM,qBACnB,KACA0O,KAAaG,WAAW,CACtB,YAAa,UAIrB,CAEA1B,aAAa4B,GACW,SAAlBA,EAAI1M,KAAKrb,OACX+nB,EAAIzL,gBAAkByL,EAAI1M,KAAKiB,iBAGjCyL,EAAItF,eAA6C,IAA7BsF,EAAIC,UAAUrmB,QAAQ,GAC1ComB,EAAIxF,eAA6C,IAA7BwF,EAAIC,UAAUrmB,QAAQ,UACnComB,EAAIC,UAEXD,EAAI9E,cAAiD,IAAlC8E,EAAIE,WAAWtmB,QAAQ,OAC1ComB,EAAIhF,cAAiD,IAAlCgF,EAAIE,WAAWtmB,QAAQ,cACnComB,EAAIE,WAEXpQ,OAAOqQ,QAAQtiB,KAAKmO,WAAWyD,WAAW5K,QAAQ,EAAEub,EAAKjiB,OACnDA,GAAM4B,SAASigB,EAAIzO,UACrByO,EAAIzO,OAAS6O,KAIjBJ,EAAI/P,QAAQpL,QAASqL,IACnB,IAAImQ,GAAa,GACjBnQ,EAAOhB,UAAUrK,QAASyb,KACxBD,IAAcC,GAAU,OAEtBD,GAAWpnB,QAAU,IACvBonB,GAAaA,GAAWE,UAAU,EAAGF,GAAWpnB,OAAS,IAE3DiX,EAAOhB,UAAYmR,KAGrBxiB,KAAK4U,QAAQrC,WAAW4P,GACxBniB,KAAK2iB,oBACL3iB,KAAKoS,QAAU+P,EAAI/P,OACrB,CAEAiO,gBAAgBuC,GACd5iB,KAAK6U,YAAc,GACnB,UAAWgO,KAAWD,EACpB5iB,KAAK6U,YAAY3Y,KAAK,CAAEmY,WAAYwO,KAEjC7iB,KAAK0c,QAAU1c,KAAK6U,YAAYzZ,OAAS,GAC5C4E,KAAK4U,QAAQlC,IAAI,cAAciN,SAAS3f,KAAK6U,YAAY,GAAGR,WAEhE,CAEAiM,aAAa6B,GACPniB,KAAK4Z,iBAAmB/N,IAAeE,IACzC/L,KAAK8iB,cAAcX,GAEnBniB,KAAK+iB,mBAAmBZ,IAErBniB,KAAK0c,QAAU1c,KAAK4Z,iBAAmB/N,IAAeE,KACzD/L,KAAK4U,QAAQrC,WAAW,CACtBgG,KAAM,GACN9E,YAAazT,KAAKie,kBAAkBpS,IAAeE,MAGzD,CAEAiX,qBACO7Q,YAAUnS,KAAKke,kBAClBle,KAAK4U,QAAQrC,WAAW,CACtBkD,KAAM,CACJC,QAAS1V,KAAKke,kBAGlBle,KAAK+gB,aAAa/gB,KAAKke,iBAEpB/L,YAAUnS,KAAKme,uBAClBne,KAAK4U,QAAQrC,WAAW,CACtB4N,gBAAiBngB,KAAKme,sBAExBne,KAAK8W,aAEF3E,YAAUnS,KAAKoe,kBAClBpe,KAAK4U,QAAQrC,WAAW,CACtBuF,UAAW9X,KAAKoe,iBAElBpe,KAAKuX,gBAET,CAEAwL,mBAAmB3D,GACjBpf,KAAK6V,WAAauJ,EACbpf,KAAK0c,QACR1c,KAAKgjB,oBAET,CAEAF,cAAcG,GACU,IAAlBA,EAAO7nB,QACT4E,KAAK6d,eACFqF,iBACAlU,QACCyP,YAAUyE,IACR,IAAKA,EACH,MAAM,IAAIC,MAAM,sCAElB,SAAOC,OAAG,EAAI,IAGjBzU,UAAU,CACT4S,MAAQA,IACN,MAAM8B,GAAYrjB,KAAKmO,WAAWmV,QAAQzQ,KAAM0Q,IAAMA,GAAEjjB,QAAUN,KAAK4Z,gBACpE4J,MACHxjB,KAAKqa,oBAAsB7Q,YAAY6Z,gCAAuC9B,GAAK,GAI7F,CAEAxB,WACE/f,KAAK4U,QAAQlC,IAAI,gBAAgB+Q,SACjCzjB,KAAK4U,QAAQlC,IAAI,QAAQiN,SAAS,IAClC3f,KAAK4U,QAAQlC,IAAI,QAAQuN,UACzBjgB,KAAK4d,eAAe8F,OAAO/U,UAAWgV,IACpC3jB,KAAKuW,YAAcoN,GAEvB,CAEA7D,YACE9f,KAAK4U,QAAQlC,IAAI,QAAQ+Q,SACzBzjB,KAAK4U,QAAQlC,IAAI,gBAAgBiN,SAAS,IAC1C3f,KAAK4U,QAAQlC,IAAI,QAAQuN,UAEzBjgB,KAAK2iB,mBACP,CAEA5N,qBACE/U,KAAK4U,QAAQjE,SAAS,qBAAuBiP,KAAcC,OACvD7f,KAAK8f,YACL9f,KAAK+f,UACX,CAEA6D,0BACE,MAAMxpB,EAAO4F,KAAK4U,QAAQjE,SAAS,QAC7BkT,EAAa7jB,KAAK4U,QAAQjE,SAAS,eACzC3Q,KAAKie,kBAAkB7jB,GAAQypB,CACjC,CAEA7B,uBAAuB1hB,GACrB,MAAiB,MAAVA,CACT,CAEAqiB,oBACE,MAAMpK,EAAOvY,KAAK4U,QAAQlC,IAAI,QAC1B1S,KAAK4Z,iBAAmB/N,IAAeE,IACzCwM,EAAKuL,mBAAmB,CAAChC,KAAaiC,iBAAgB,EAAM/jB,KAAK2d,oBAEjEpF,EAAKuL,mBAAmB,CAAC9jB,KAAKgkB,eAAc,KAG1ChkB,KAAK0c,QACPnE,EAAK0L,aAET,CAEAxT,kBAAkBoT,GAChB,MAAMjR,EAAiB5S,KAAK0R,cAAcmB,KAAMC,KAC9C,GAAI+Q,IAAe/Q,GAAsBxS,MACvC,OAAOwS,KAGX,OAAOX,iBAAeS,GAAkBA,EAAeG,KAAO,EAChE,CAEAmR,QACE,OACE/R,aAAWnS,KAAK4U,QAAQjE,SAAS,gBACjCwB,aAAWnS,KAAK4U,QAAQjE,SAAS,SAE1B3Q,KAAK4U,QAAQjE,SAAS,cAAgB,IAAM3Q,KAAK4U,QAAQjE,SAAS,QAEpE,EACT,CAEQgO,iBAAiBpG,GACvB,IAAKpG,aAAWoG,IAAkB,MAATA,EACvB,SAAO6K,MAAG,IAGZ,MAAMpC,EAAShhB,KAAK4U,QAAQjE,SAAS,QAAQ+E,QAC7C,OAAO1V,KAAKmO,WAAWgW,MAAMnD,EAAQzI,GAAMvJ,QACzC9R,OAAKrB,IACHA,GAAOuoB,MAAMC,OAAQC,IAAoBA,GAAQC,cAAcriB,SAASqW,IAAOrd,MAAM,EAAG,MAAG,EAE7FspB,cAAW,OAAMpB,MAAG,CAAC5Z,4CAEzB,CAEQqV,mBAAmBtG,GACzB,OAAIpG,aAAWoG,IAAkB,MAATA,GAAyB,KAATA,EAC/BvY,KAAK2d,iBAAiB+F,OAAO1U,QAClC9R,OAAKunB,GACHA,EACGJ,OAAQK,IAAuBA,GAAWH,cAAcriB,SAASqW,IACjErd,MAAM,EAAG,MAAG,EAEjBspB,cAAW,OAAMpB,MAAG,CAAC5Z,qDAAkD,EAGlE4Z,MAAG,GAEd,CAEA/G,eACE,IAAIC,EACJ,MAAMqI,EAAe3kB,KAAK4kB,eAGxBtI,EADEtc,KAAK0c,OACE1c,KAAK+d,YAAY8G,mBAAmB,CAC3CC,KAAM,IAAIC,IAAa,WAAY,CACjC1Q,WAAYrU,KAAKqU,WACjB2J,UAAW7L,aAAWnS,KAAKge,aAE7BgH,KAAMhlB,KAAKmO,WAAWpG,OAAO/H,KAAKqU,WAAYlC,aAAWnS,KAAKge,WAAY2G,KAInE3kB,KAAK+d,YAAY8G,mBAAmB,CAC3CC,KAAM,IAAIC,IAAa,aAAc,CACnCxM,KAAMoM,EAAapM,KACnB9C,KAAMkP,EAAalP,KACnBpB,WAAYsQ,EAAatQ,aAE3B2Q,KAAMhlB,KAAKmO,WAAW8W,OAAON,KAIjCrI,EAAO3N,UAAU,CACf4S,MAAQ2D,IAAuCllB,KAAKmlB,cAAcD,IAClEE,SAAUA,IAAMplB,KAAKuU,OAAOC,SAAS,CAAC,OAAI8K,KAAgBtf,KAAK4Z,yBAEnE,CAEQuL,cAAcD,GAElBA,EAAc3D,MAAM8D,QACpBH,EAAc3D,MAAM8D,OACjBC,WACApjB,SAAS,UAAUlC,KAAK4U,QAAQjE,SAAS,gCAE5C3Q,KAAK4U,QAAQlC,IAAI,UAAU6S,UAAU,CAAEC,qBAAqB,IAE9DxlB,KAAK4U,QAAQ2Q,UAAU,CAAEE,gBAAgB,GAC3C,CAEQb,eACN,MAAMD,EAAoBxS,cAAYnS,KAAK4U,QAAQtU,OACnDqkB,SAAalP,KAAOzV,KAAK4U,QAAQlC,IAAI,QAAQpS,MACzCN,KAAK0c,SACPiI,EAAa3G,UAAY7L,aAAWnS,KAAKge,WACzC2G,EAAapM,KAAOvY,KAAK4U,QAAQlC,IAAI,QAAQpS,MACzCqkB,EAAalP,KAAKrb,OAASyR,IAAeE,MAC5C4Y,EAAalP,KAAKM,QAAU/V,KAAK4U,QAAQjE,SAAS,QAAQoF,UAI1D4O,EAAalP,KAAKrb,OAASyR,IAAeE,YACrC4Y,EAAalP,KAAKC,QACY,WAAjCiP,EAAajF,uBACRiF,EAAalP,KAAKM,QAEzB4O,EAAapM,KAAO,WAGfoM,EAAalP,KAAKM,eAEpB4O,EAAajF,uBACbiF,EAAa7M,iBACb6M,EAAaxE,gBAEpBwE,EAAavC,UAAY,GACrBuC,EAAahI,eACfgI,EAAavC,UAAUlmB,KAAK,GAE1ByoB,EAAa9H,eACf8H,EAAavC,UAAUlmB,KAAK,IAEzByoB,EAAahI,gBAAkBgI,EAAa9H,gBAC/C8H,EAAapL,OAAS,aAEjBoL,EAAahI,qBACbgI,EAAa9H,cAEpB8H,EAAatC,WAAa,GACtBsC,EAAatH,cACfsH,EAAatC,WAAWnmB,KAAK,cAExByoB,EAAatH,aAChBsH,EAAaxH,cACfwH,EAAatC,WAAWnmB,KAAK,cAExByoB,EAAaxH,aAEpBwH,EAAavS,QAAQpL,QAASqL,IACxBF,aAAWE,EAAOhB,WACpBgB,EAAOhB,UAAYc,IAAEE,EAAOhB,WACzB1U,MAAM,SACN+oB,OACArB,OAAQ5B,IAAwB,KAAZA,IACpBniB,QAEH+R,EAAOhB,UAAY,GAGhBgB,EAAOqB,SACVrB,EAAOqB,OAASiR,EAAajR,QAG1BrB,EAAOoB,cACVpB,EAAOoB,YAAckR,EAAalR,gBAIF,IAAhCkR,EAAazC,gBAAuD,QAA3ByC,EAAalP,KAAKrb,KAC7DuqB,EAAalP,KAAKiB,gBAAkB,KAEpCiO,EAAalP,KAAKiB,gBAAkBiO,EAAajO,uBAE5CiO,EAAajO,gBAEbiO,CACT,CAEQX,cAAc2B,GACpB,OAAQ/R,IACN,GAAIA,EAAQgS,WAAahS,EAAQtT,MAC/B,SAAO8iB,MAAG,CAAE7P,UAAU,IAExB,MAAMyN,GAAShhB,KAAK4U,QAAQjE,SAAS,QAAQ+E,QAC7C,OAAO1V,KAAKmO,WAAWgW,MAAMnD,GAAQpN,EAAQtT,OAAO0O,QAClD9R,OAAK2oB,IACHA,GAAUzB,MAAMliB,SAAS0R,EAAQtT,SAAWqlB,EACxC,KACA,CAAEG,oBAAoB,KAAM,EAElCtB,cAAW,OAAMpB,MAAG,CAAE0C,oBAAoB,KAAQ,CAGxD,iDA5pBWxI,IAAgBrc,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,kBAAAjI,8BAAAiI,UAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,KAAA/kB,8BAAAglB,KAAAhlB,8BAAAilB,KAAAjlB,8BAAAklB,MAAA,4DAAhB7I,GAAgBlU,UAAA,kBAAAC,UAAA,SAAAC,EAAA7F,OAAA,EAAA6F,sXDlCEE,qFAAA,kCAAyB,qCAe9CA,2EAAA,kEAC2B,wKAC3B,oFAC2C,wKAC3C,kFACyC,wKACzC,0DACqC,mCAAwB,8MAsPlDA,qGAMMA,mFAMAA,kFA+DjBA,2EAAA,kEAC2B,oIAC3B,wFAC+C,oIAC/C,0DACmC,mCAAsB,4KAkCzDA,2EAAA,kEAC2B,oIAC3B,mFAC0C,oIAC1C,0DACyB,mCAAY,4KA0B1BA,2GAMMA,iFAMAA,iFA5YEA,8IAGRA,8GAMAA,qGAYEA,oFAEAA,kFAoBXA,2EAAA,iEAC2B,oKAC3B,6FACqD,oKACrD,2FACmD,oKACnD,yDACkC,mCAAqB,4MAK5CA,qGAiBXA,2EAAA,iEAC2B,oKAC3B,oFAC4C,oKAC5C,kFAC0C,oKAC1C,yDAC+B,mCAAkB,4MAKtCA,qGAWIA,mGAQEA,0FACnB,gDASWA,qGAcXA,2EAAA,iEAC2B,iJAC3B,gGACwD,iJACxD,yDAE8E,mCAAqB,iJACnG,uCAAqC,mCAAwB,yLAgB/DA,2EAAA,iEAC2B,oKAC3B,4FACoD,oKACpD,0FACkD,oKAClD,yDAEuE,mCAAoB,4MAM5EA,uGAiBOA,qFAHoBA,gFACxC,gDAaWA,qGAGAA,oGAAyB,oCAAO,qDAGhCA,yIAGAA,6HAcSA,4FAFpBA,2EAAA,gDAaWA,qGAGAA,sLACY,kDACuC,oCAyBjDA,qGAeOA,uFAFpBA,2EAAA,gDAWWA,oJACAA,8JAKAA,qGAGAA,6HAGAA,0KAGAA,8IAiCAA,wNAE0B,qCAA0B,oFAMpDA,qGA0BAA,sPAGAA,sOAGAA,kOAGAA,qMAKAA,qGAyBAA,iqIAtbrBvI,2BAAA,YAEEA,uBAAA,EAAAmlB,GAAA,yBA0cFnlB,kCA3cKA,uBAAA,gBAAAA,4BAAA,EAAAK,KACYL,+CAAA,gBAAAwC,GAAA4iB,m2BEOTplB,sBAAA,uEAAoBA,uBAAA,OAAA+K,GAAAzJ,mCASpBtB,sBAAA,+DAGUA,uBAFA,OAAA+K,GAAAoG,QAEAnR,CAFgB,UAAA+K,GAAAsa,8CAnBlCrlB,oCAAA,GACEA,2BAAA,aAIEA,oCAAA,KACEA,2BAAA,SAAAA,mBAAA,KACeA,2BACfA,uBAAA,EAAAslB,GAAA,yDAKFtlB,oCAAA,KACEA,2BAAA,SAAAA,mBAAA,KACsCA,2BACtCA,uBAAA,GAAAulB,GAAA,yDAYJvlB,2BAEAA,sBAAA,2HAfYA,sBAAA,GAAAA,sBAAA+K,GAAAoG,QAAAhX,mCAeP6F,sBAAA,GAAAA,uBAAA,eAAAwlB,KCrBD,MAAOC,GAUX5mB,cAFAE,KAAAoS,QAAiB,GAGfpS,KAAKsmB,eAAiB,CACpB,CACElsB,KAAMoP,qBACN2F,KAAM,YACNC,SAAU,GAEZ,CACEhV,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,GAEZ,CACEhV,KAAMoP,kBACN2F,KAAM,SACNC,SAAU,GAGhB,CAEAxI,cACM5G,KAAKiM,YACPjM,KAAK2mB,aAAe3mB,KAAKiM,UAEzBjM,KAAKoS,QAAUpS,KAAK2mB,aAAavU,QAEjCpS,KAAKuC,KAAO,GACZvC,KAAKuC,KAAKiH,oBAAsBxJ,KAAK2mB,aAAatS,WAClDrU,KAAKuC,KAAKiH,yBAA2BxJ,KAAK2mB,aAAavE,UAAUllB,IAC9D0pB,IAAqB,OAASA,IAEjC5mB,KAAKuC,KAAKiH,mBAAqBxJ,KAAK2mB,aAAapN,OACjDvZ,KAAKuC,KAAKiH,wBAA0BxJ,KAAK2mB,aAAalT,YACtDzT,KAAKuC,KAAKiH,mBAAqBxJ,KAAK2mB,aAAajT,OACjD1T,KAAKuC,KAAKiH,sBAAwBxJ,KAAK2mB,aAAatE,WACpDriB,KAAKuC,KAAKiH,iBAAmBxJ,KAAK2mB,aAAapO,KAEX,SAAhCvY,KAAK2mB,aAAalR,KAAKrb,MACzB4F,KAAKuC,KAAKiH,4BAA8BA,kBACxCxJ,KAAKuC,KAAKiH,wBAA0BxJ,KAAK2mB,aAAalR,KAAKM,QAC3D/V,KAAKuC,KAAKiH,8BAAgCxJ,KAAK2mB,aAAalR,KAAKC,QACjE1V,KAAKuC,KAAKiH,2BAA6BxJ,KAAK2mB,aAAalR,KAAKiB,kBAE9D1W,KAAKuC,KAAKiH,4BAA8BA,0BACxCxJ,KAAKuC,KAAKiH,gCAAkCxJ,KAAK2mB,aAAalR,KAAKM,SAGzE,mDAzDW2Q,GAAmB,4DAAnBA,GAAmBtd,UAAA,qBAAA+C,OAAA,CAAAF,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,gBDFlB5C,qFAQAA,oFAAS,iZAfvBvI,uBAAA,EAAA6lB,GAAA,6BAAe7lB,uBAAA,OAAAwC,GAAAwI,yQEkBbhL,sBAAA,kEACgBA,uBAAA,YAAAM,GAAA+K,uCAMhBrL,oCAAA,GAAAA,mBAAA,oEAEAA,oCAAA,GAAAA,mBAAA,sEAAAA,uBAFA,EAAA8lB,EAAA,sBAEA9lB,CADmB,EAAA+lB,GAAA,oDADJ/lB,uBAAA,gBAAAgmB,GAAA7sB,MAEA6G,+CAAA,eAAAgmB,GAAA7sB,oCAOb6G,2BADF,SACEA,CADuC,gBACpBA,mBAAA,GACrBA,0DADqBA,sBAAA,GAAAA,+BAAA,OAAAimB,GAAA,iCADrBjmB,uBAAA,EAAAkmB,GAAA,4CAA2BlmB,uBAAA,UAAAmmB,kCAQzBnmB,2BADF,SACEA,CADyC,gBACtBA,mBAAA,GACrBA,0DADqBA,sBAAA,GAAAA,8BAAAomB,iCADrBpmB,uBAAA,EAAAqmB,GAAA,4CAA4BrmB,uBAAA,UAAAsmB,+BAO5BtmB,2BAAA,aAAAA,mBAAA,KAG8CA,yDAC9CA,2BAAA,UAA2BA,mBAAA,GAAWA,kFAAXA,sDAAAumB,iCAA3BvmB,uBAJA,EAAAwmB,GAAA,cAIAxmB,CAD6C,EAAAymB,GAAA,4CAHtCzmB,uBAAA,YAAAumB,IAIAvmB,+CAAA,YAAAumB,KCtBF,IAAK5H,kBAAa,KACvBC,OAAA,SACAD,GAAA+H,KAAA,OASI,MAAOC,WAAyB7Z,IAwCpCjO,YACUoO,GACA2Z,GACA1Z,GACA2Z,GACA/J,GACAxJ,GACDvG,IAEPK,QARQrO,KAAAkO,sBACAlO,KAAA6nB,gBACA7nB,KAAAmO,cACAnO,KAAA8nB,mBACA9nB,KAAA+d,eACA/d,KAAAuU,UACDvU,KAAAgO,gBAzBThO,KAAAiM,UAAY,IAAIqC,IAKhBtO,KAAA+nB,kBAAmB,EAGnB/nB,KAAAgoB,SAAW,CACT,aAAeC,MAEX1P,KAAM0P,GAAS1P,KACflE,WAAY4T,GAAS5T,WACrBoB,KAAMwS,GAASxS,QAenBzV,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBC,IAC3D9O,KAAKyV,QAAOsJ,KAAiB/e,KAAKuU,OAAOyK,KACzC,MAAMkJ,MAAS5I,KAAgBtf,KAAKyV,MAC9B0S,GAAYA,IAChBnoB,KAAKiM,UAAUmc,SACf,GAAGC,UAAUroB,KAAKiM,UAAUmc,QAAQ/T,eAAegU,UACjDroB,KAAKiM,UAAUmc,QAAQpK,aAGrBsK,GAA8B,CAClCxb,WAAY,SACZyb,KAAMvW,KAAMwW,IACZC,WAAYA,IAAM,IAAIP,gBACtBQ,aAAezc,KAAiCA,GAAU0c,mBAC1DvuB,KAAM4F,KAAKgO,aAAakS,QAGpB0I,GAA4B,CAChC9b,WAAY,SACZyb,KAAMvW,KAAM6W,KACZJ,WAAYA,IAAM,CAChB,IAAIP,eAAmBC,OACvB,CACEzI,gBACE1f,KAAKyV,OAAS5J,IAAeE,KAAQoG,YAAUnS,KAAKiM,WAAWmc,SAAS7P,MAEpEqH,GAAc+H,KADd/H,GAAcC,SAIxBzlB,KAAM4F,KAAKgO,aAAauR,MAGpBuJ,GAA8B,CAClChc,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAKipB,iBAClB7uB,KAAM4F,KAAKgO,aAAakb,QAG1BlpB,KAAK+M,aAAe,CAACub,GAAcM,GAAYE,GACjD,CAEAra,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,eACNC,SAAU,EACV+Z,mBAAoBC,IAAaC,WAEnC,CACEjvB,KAAM4F,KAAKyV,OAAS5J,IAAeC,KAAOtC,gBAAkBA,kBAC5D2F,KAAM,OACNC,SAAU,EACVC,aAAcrP,KAAKspB,SACnBH,mBAAoBC,IAAa7Q,MAEnC,CACEne,KAAMoP,kBACN2F,KAAM,SACNC,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,aACNC,SAAU,GAEZ,CACEhV,KAAMoP,2BACN2F,KAAM,OACNC,SAAU,EACVC,aAAcrP,KAAKsjB,SAErB,CACElpB,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,GAEZ,CACEhV,KAAMoP,wBACN2F,KAAM,YACNC,SAAU,EACVC,aAAcrP,KAAKupB,aAErB,CACEnvB,KAAMoP,sBACN2F,KAAM,aACNC,SAAU,EACVC,aAAcrP,KAAKwpB,eAIvBxpB,KAAK8nB,gBAAgB2B,KACnB,IAAMzpB,KAAKmO,WAAWuV,KAAK1jB,KAAK0pB,WAC/BC,IAAS3pB,KAAK4pB,gBAAgBD,IAC9BttB,IAAa2D,KAAK3D,QAAUA,GAC7B,IAAM2D,KAAK6pB,eACX7pB,KAAK8pB,WACL9pB,KAAK+pB,WACL/pB,KAAKgoB,SAET,CAEAgC,cACMhqB,KAAKiqB,yBACPjqB,KAAKiqB,wBAAwBC,aAEjC,CAEAN,gBAAgBD,IACd,IAAI9tB,GAAgB,GAEpBsuB,OADqBR,GAAKtF,OAAQvV,IAAaA,GAAI2G,MAAMrb,OAAS4F,KAAKyV,MAC1DzO,QAAS8H,KACpBA,GAAIsb,GAAK,GAAGtb,GAAIuF,cAAcvF,GAAIkP,YAClClP,GAAIub,MAAQ,UACZxuB,GAASA,GAAO+M,OAAOkG,GAAG,GAErBjT,EACT,CAEAguB,eACE7pB,KAAKsqB,MAAMC,QACXvqB,KAAKwqB,gBAAkB,CAAE9b,OAAQ+b,IAAgBC,eACnD,CAEAX,WAAWY,GAAY7F,IACrB,OACE6F,GAAMtW,aAAeyQ,GAAKmD,SAAS5T,YACnCsW,GAAM3M,YAAc8G,GAAKmD,SAASjK,SAEtC,CAEA8L,WAAWhF,IACT,MAAO,CAAC,aAAc,aAAc,YAAY5iB,SAAS4iB,GAAK1qB,KAChE,CAEAsS,gBAAgBT,IACdjM,KAAKiM,UAAYA,EACnB,CAEAgd,iBACE,MAAM5U,GAAarU,KAAKiM,UAAUmc,QAAQ/T,WACpC2J,GAAYhe,KAAKiM,UAAUmc,QAAQpK,UAEzChe,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEC,OAAQC,IAAeC,KACvBC,gBAAiB1hB,sBACjB2hB,UAAW,CAAC,GAAG9W,MAAc2J,MAC7BoN,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,aAAc,CACnC1Q,WAAYA,GACZ2J,UAAWA,KAEbgH,KAAMhlB,KAAKmO,WAAWkd,OAAOhX,GAAY2J,OAGjD,mDA/MW4J,IAAgB3mB,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,MAAA,4DAAhB6B,GAAgBxe,UAAA,kBAAAC,UAAA,SAAAC,GAAA7F,OAAA,EAAA6F,0vBAFhB,CAACgiB,MAAgBrqB,wCAAAuJ,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,sBDZT5C,oFAEAA,4FAsBDA,uGAA2BA,8mBAlD/CvI,2BAAA,kBASUA,uBADA,0BAAA2J,IAAA3J,iCAAAsL,IAAAtL,wBAAkBwC,GAAA+I,eAAA5B,IAAsB,EACxC3J,CADyC,2BAAA2J,IAAA3J,iCAAAsL,IAAAtL,wBACtBwC,GAAAiJ,gBAAA9B,IAAuB,GAClD3J,2BAAA,WACEA,sBAAA,yBAKFA,2BAEAA,uBAAA,EAAAsqB,EAAA,yBAGFtqB,2BAwBAA,uBAtBA,EAAAuqB,GAAA,yBAAAvqB,mCAsBAA,CArBoC,EAAAwqB,GAAA,yBAAAxqB,mCAqBpCA,CAbwC,EAAAyqB,GAAA,yBAAAzqB,mCAaxCA,CANyC,GAAA0qB,GAAA,yBAAA1qB,2CAhC/BA,uBANA,OAAAwC,GAAApH,QAMA4E,CANgB,UAAAwC,GAAAoJ,QAMhB5L,CAJmB,iBASPA,sBAAA,GAEAA,uBAFA,aAAAwC,GAAAqJ,WAEA7L,CAFyB,YAAAwC,GAAAwI,UAEzBhL,CADuB,eAAAwC,GAAAsJ,8IEXtC,MAAMgS,EAAoBC,GAC/BA,EAAIK,WAAW,YAAcxT,IAAeE,IAAMF,IAAeC,KAEtDwT,EAAmB7J,GAC9BA,IAAS5J,IAAeC,KAAO,SAAW,wFCOtC,MAAO8f,oDAAwB,2DAAxBA,GAAwB,8DAJzBzgB,eAAcE,IAAcC,iBAAY,2GCG7C,IAAMugB,EAAN,MAAMA,GAGX/rB,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,mBAEyB,CAEvC0E,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI1S,KAAKgf,IAC5B,CAEAtM,IAAIqZ,EAAsBC,GACxB,OAAOhsB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO+M,KAAgBC,KAAchd,QAChEyP,YAAUkL,MACDsC,MAAatC,EAAKuC,WAG/B,iDAfWL,IAAyB5qB,qBAAAC,cAAA,+DAAzB2qB,GAAyB1qB,QAAzB0qB,GAAyBzqB,UAAAC,WAFxB,QAAM,GAEPwqB,KAAyBM,cAAA,CAJrCC,O,mCAO2BC,gBAHfR,iGCJT5qB,mBAAA,4DAAAA,+BAAA,IAAAA,wBAAA,IAAAqrB,EAAAhsB,OAAA,IAAAgsB,EAAAC,KAAA,qEARJtrB,2BAAA,gBAKUA,uBAAA,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAirB,YAAA5hB,GAAmB,GACxC3J,uBAAA,EAAAwrB,EAAA,yBAAAxrB,oCAIFA,uEANUA,uBAHA,OAAAM,EAAA2qB,SAGAjrB,CAHiB,UAAAM,EAAAsL,QAGjB5L,CAFmB,sCAU3BA,2BAAA,sBAAAA,mBAAA,KACuDA,4BCCnD,MAAOyrB,EAmBX5sB,YAAoB6sB,GAAA3sB,KAAA2sB,4BAlBpB3sB,KAAA6M,QAAgC,GAChC7M,KAAAksB,SAA0B,EAiBiD,CAE3Ezd,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,GAEZ,CACEhV,KAAMoP,iBACN2F,KAAM,QACNE,aAAcrP,KAAK4sB,SACnBxd,SAAU,GAGhB,CAEAod,YAAYhnB,GACVxF,KAAK2sB,0BAA0Bja,IAAI1S,KAAK6sB,YAAa7sB,KAAK8sB,WAAWne,UAClEgb,IACC3pB,KAAKksB,SAAWvC,GAEjBpI,IACsB,MAAjBA,EAAM7S,QACR6S,EAAMwL,iBACN/sB,KAAKksB,SAAW,MAEhB1mB,EAAQ+b,OAAK,EAIrB,iDAxDWmL,GAAgCzrB,8BAAAC,GAAA,4DAAhCwrB,EAAgCtjB,UAAA,mCAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,8NDDtBE,uVAFvBvI,uBAXA,EAAA+rB,EAAA,iBAWA/rB,CAN4C,EAAAgsB,EAAA,yBAAAhsB,4EALjBA,uBAAhB,OAAAwC,EAAAyoB,SAAgBjrB,CAAA,WAAAisB,2HEArB,MAAOC,GAOP,MAAOC,GAiBP,MAAOC,GAwBP,MAAOC,GAKN,IAAKC,IAMAC,GANAD,QAA4B,KACtCE,QAAA,UACAF,EAAAG,UAAA,YACAH,EAAAI,QAAA,UAGF,SAAYH,GACVA,EAAAI,YAAA,cACAJ,EAAAK,YAAA,aACF,CAHA,CAAYL,MAAQ,0DC3Db,MAAMzhB,EAAM,MAEZ,IAAK+hB,aAAiB,KAC3BC,mBAAA,qBACAD,EAAAE,uBAAA,yBAGK,MAAMC,EAAyD,CACpE,CAACH,EAAkBC,oBAAqB,6CACxC,CAACD,EAAkBE,wBAAyB,0JCQxC,MAAO9iB,oDAAgB,2DAAhBA,GAAgB,8DAJjBC,eAAc+iB,IAAiB7iB,IAAcD,eAAc+iB,MAAW,wECb5E,MAAOC,SACKpuB,KAAAquB,eAAiB,OAAQ,QACzBruB,KAAAsuB,iBAAmB,SAAU,QAC7BtuB,KAAAuuB,iBAAmB,SAAU,QAC7BvuB,KAAAwuB,iBAAmB,SAAU,QAC7BxuB,KAAAyuB,iBAAmB,CACjCL,EAAWC,eACXD,EAAWE,iBACXF,EAAWG,iBACXH,EAAWI,iBACX,CAIF1uB,YAAmBqG,GACjB,GADiBnG,KAAAmG,QACZnG,KAAK0uB,cACR,MAAM,IAAIvL,MAAM,uCAGlBnjB,KAAK2uB,eACP,CAEQD,cACN,OAAON,EAAWK,iBAAiBvsB,SAASlC,KAAKmG,KACnD,CAEQwoB,gBACN,OAAQ3uB,KAAKmG,MACX,KAAKioB,EAAWC,eACdruB,KAAK4uB,OAAS,CAAC,SAAU,SACzB,MACF,KAAKR,EAAWE,iBACdtuB,KAAK4uB,OAAS,CACZ,aACA,gBACA,cACA,WACA,OACA,WACA,kBACA,kBACA,UACA,SACA,aACA,gBACA,SACA,YACA,WACA,iBAEF,MACF,KAAKR,EAAWG,iBACdvuB,KAAK4uB,OAAS,CACZ,mBACA,mBACA,OACA,aACA,eACA,mBACA,mBACA,WACA,iBACA,QACA,cAEF,MACF,QACE5uB,KAAK4uB,OAAS,GAEpB,iBC3DI,MAAOC,EAGX/uB,cACEE,KAAK8uB,WAAa9uB,KAAK+uB,kBACzB,CAEAC,cACE,OAAOZ,EAAWK,gBACpB,CAEAQ,gBAAgBC,GACd,MAAMC,EAAWnvB,KAAKovB,oBAAoBF,GAE1C,GAAwB,IAApBC,EAAS/zB,OACX,OAAOgzB,EAAWI,iBAGpB,MAAMa,EAAgBld,cACpBic,EAAWK,iBACXL,EAAWK,iBAAiBvxB,IACzBoyB,GAAand,iBAAenS,KAAK8uB,WAAWQ,GAAUV,OAAQO,GAAU/zB,SAI7E,GAAIi0B,EAAcjB,EAAWG,kBAAoB,EAC/C,OAAOH,EAAWG,iBAGpB,MAAMgB,EAAkBF,EAAcjB,EAAWE,kBACjD,OAAIa,EAAS/zB,OAASi0B,EAAcjB,EAAWC,gBAAkBkB,EACxDnB,EAAWI,iBAGbe,EAAkBnB,EAAWE,iBAAmBF,EAAWC,cACpE,CAEQU,mBACN,OAAO5c,cACLic,EAAWK,iBACXL,EAAWK,iBAAiBvxB,IAAKoyB,GAAa,IAAIlB,EAAWkB,IAEjE,CAEQF,oBAAoBF,GAC1B,MAAMC,EAAWD,EACd9mB,QAAQ,YAAa,KACrBonB,OACA7yB,MAAM,KAET,OAAOwV,SAAOgd,EAChB,iDAnDWN,EAAiB,+DAAjBA,EAAiB1tB,QAAjB0tB,EAAiBztB,UAAAC,WAFhB6J,KAAgB,0MCGxB,MAAOukB,EACX3vB,YAAoBgsB,IAAA9rB,KAAA8rB,OAAmB,CAEvCpI,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI,WACvB,CAEA2Y,OAAOjxB,IACL,OAAO4F,KAAK8rB,KAAKT,OAAO,YAAYjxB,KACtC,CAEAsY,IAAItY,IACF,OAAO4F,KAAK8rB,KAAKpZ,IAAI,YAAYtY,KACnC,CAEA6qB,OAAOyK,IACL,OAAO1vB,KAAK8rB,KAAKzwB,KAAK,WAAYq0B,GACpC,CAEAC,MAAMv1B,GAAcw1B,IAClB,OAAO5vB,KAAK8rB,KAAKzwB,KAAK,YAAYjB,WAAc,CAAEy1B,SAAUD,IAC9D,CAEA7nB,OAAO2nB,IACL,OAAO1vB,KAAK8rB,KAAKgE,IAAI,YAAYJ,GAAKt1B,OAAQs1B,GAChD,CAEAK,OAAO31B,IACL,OAAO4F,KAAK0jB,OAAO1U,QACjByP,YAAUuR,KACR,MAAMD,EAASC,GAAM3wB,KAAM4wB,GAClBA,EAAY71B,OAASA,IAE9B,SAAO6xB,MAAa8D,EAAM,GAGhC,mDApCWN,GAAWxuB,qBAAAC,cAAA,+DAAXuuB,EAAWtuB,QAAXsuB,EAAWruB,UAAAC,WAFV,QAAM,ECHd,MAAO6uB,EACXpwB,YAAoBgsB,IAAA9rB,KAAA8rB,OAAmB,CAEvCpI,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI,eACvB,mDALWwd,GAAYjvB,qBAAAC,cAAA,+DAAZgvB,EAAY/uB,QAAZ+uB,EAAY9uB,UAAAC,WAFX,QAAM,MCJR8uB,+DAAY,KACtBC,QAAA,UCDI,MAAOC,kLC4BHpvB,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,yCAGFA,sDACAA,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,yCAGFA,wDAJAA,uBALA,EAAAqvB,GAAA,cAKArvB,CAL8D,EAAAsvB,GAAA,mHAAvDtvB,uBAAA,OAAAuvB,EAAAC,SAAApgB,UAAA,OAAAqgB,GAAA,aAKAzvB,+CAAA,OAAAuvB,EAAAC,SAAApgB,UAAA,OAAAqgB,GAAA,mFA/BfzvB,oCAAA,GAKIA,2BAJF,aAIEA,CADe,YACfA,mBAAA,0EAEAA,2BAGEA,2BADF,WACEA,CADqB,uBACrBA,wBAAA,KAMEA,sBADA,aACAA,CADqE,eASvEA,mDACAA,uBAAA,GAAA0vB,GAAA,yBAAA1vB,oCAYFA,2BAGEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAEAA,sBAAA,eAOAA,wBACFA,6BAGEA,2BADF,YACEA,CADsB,qBACNA,mBAAA,kBAAWA,2BAC3BA,sBAAA,+BAMFA,2BAGEA,2BADF,YACEA,CADqB,qGACCA,uBAAA,+BAAAA,0BAAAsL,IAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAMvD3vB,+IAlEMA,+CAAA,YAAAuvB,EAAAC,UAGqBxvB,sBAAA,GAAAA,8CAAA,KAAAuvB,EAAAlU,QAAArb,CACzBA,wBAAA,KAAAuvB,EAAAjU,sCAKkBtb,sBAAA,GACAA,uBADA,WAAAuvB,EAAAC,SAAArf,SAAAhX,KAAAkX,OAAAkf,EAAAC,SAAArf,SAAAhX,KAAAmX,MACAtQ,CADyE,cAAA4vB,IAGjF5vB,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAK,GAAAkvB,EAAA3rB,OAAA2rB,EAAAM,aAAAV,UAOCnvB,+CAAA,WAAAuvB,EAAAC,SAAArf,SAAAhX,KAAAkX,OAAAkf,EAAAC,SAAArf,SAAAhX,KAAAmX,OAgCctQ,sBAAA,IAKAA,uBALA,OAAAuvB,EAAAO,mBAKA9vB,CAL2B,UAAAuvB,EAAA3jB,QAK3B5L,CAJmB,OAAAuvB,EAAAC,SAInBxvB,CAHiB,SAAAuvB,EAAAQ,OAGjB/vB,CADiB,eAAAuvB,EAAAS,cAMlBhwB,sBAAA,GACAA,uBADA,OAAAuvB,EAAAC,SACAxvB,CADiB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,YC1CzC,MAAO2U,WAA0B3T,IAerCzd,YACU4d,GACAnJ,GACA4c,EACAC,EACAC,EACDrjB,GAEPK,QAPQrO,KAAA0d,SACA1d,KAAAuU,UACAvU,KAAAmxB,cACAnxB,KAAAoxB,eACApxB,KAAAqxB,sBACDrxB,KAAAgO,eAhBThO,KAAAgxB,OAAwB,GACxBhxB,KAAA+wB,mBAAiC,GACjC/wB,KAAAixB,aAAe,GAEfjxB,KAAA8wB,aAAeX,EAebnwB,KAAKuc,SAAW/S,gBAChBxJ,KAAKif,YAEP,CAEAA,aACEjf,KAAKywB,SAAW,IAAItd,IAAY,CAC9B/Y,KAAM,IAAIgZ,qBAAmB,GAAI,CAC/BC,WAAY,CAACC,aAAWC,UACxB+d,gBAAiB,CAACxP,KAAayP,OAAOvxB,KAAKmxB,YAAYpB,OAAQ/vB,KAAKmxB,gBAEtEK,YAAa,IAAIpe,qBAAmB,IACpC2d,mBAAoB,IAAI3d,qBAAmB,KAE/C,CAEA3E,WACEzO,KAAK6M,QAAU,CACb,CACEsC,KAAM,QACN/U,KAAMoP,eACN4F,SAAU,GAEZ,CACED,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,EACVqiB,UAAW,eAEb,CACEtiB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,eAEb,CACEtiB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,eAEb,CACEtiB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,gBAGXzxB,KAAKuU,OAAOyK,IAAIK,WAAW,gCAC7Brf,KAAK6E,KAAO7E,KAAK8wB,aAAaV,QAC9BpwB,KAAKsc,OAAStc,KAAKgO,aAAauR,MAEhCvf,KAAKsc,OAAStc,KAAKgO,aAAakS,OAE9BlgB,KAAK6E,OAAS7E,KAAK8wB,aAAaV,QAClCpwB,KAAK0xB,WAEL1xB,KAAK2xB,YAET,CAEAA,aAEE3xB,KAAKoxB,aAAa1N,OAAO/U,UAAWqiB,KAClChxB,KAAKgxB,OAASA,GAEdhxB,KAAKwgB,cAAY,EAErB,CAEAkR,WAEE1xB,KAAKywB,SAAS/d,IAAI,QAAQuN,UAE1BjgB,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,KAC3B,MAAMoS,GAAc,GACpBA,GAAY11B,KAAK8D,KAAKoxB,aAAa1N,QACnCkO,GAAY11B,KAAK8D,KAAKmxB,YAAYze,IAAI8M,GAAOplB,QAAK,EAClDy3B,YAAmBD,IAAajjB,UAAWgb,IACzC3pB,KAAKgxB,OAASrH,EAAK,GACnB,CAAC,OAAQ,cAAe,sBAAsB3iB,QAASub,GACrDviB,KAAKywB,SAAS/d,IAAI6P,GAAK5C,SAASgK,EAAK,GAAGpH,KAE1CviB,KAAKixB,aAAetH,EAAK,GAAGoH,mBAE5B/wB,KAAKwgB,cAAY,EAClB,EAEL,CAEAsR,aACE,MAAMC,GAAgB,IAAI1B,EAC1B,OAAC,OAAQ,cAAe,sBAAsBrpB,QAC3Cub,IAASwP,GAAcxP,IAAOviB,KAAKywB,SAAS/d,IAAI6P,IAAKjiB,OAEjDyxB,EACT,CAEAzJ,eACE,MAAMyJ,GAAgB/xB,KAAK8xB,aAC3B9xB,KAAKmxB,YAAYlM,OAAO8M,IAAepjB,UACrC,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,0BAA0BuoB,GAAc33B,SAE1C4F,KAAKuU,OAAOC,SAAS,CAAC,0BAAyB,EAEjD,KACExU,KAAKywB,SAASlL,UAAU,CAAEE,gBAAgB,GAAM,EAGtD,CAEAmD,aACE,MAAMmJ,GAAgB/xB,KAAK8xB,aAC3B9xB,KAAKmxB,YAAYppB,OAAOgqB,IAAepjB,UACrC,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,0BAA0BuoB,GAAc33B,SAE1C4F,KAAKuU,OAAOC,SAAS,CAAC,0BAAyB,EAEjD,KACExU,KAAKywB,SAASlL,UAAU,CAAEE,gBAAgB,GAAM,EAGtD,CAEAmL,SACM5wB,KAAK6E,OAAS7E,KAAK8wB,aAAaV,QAClCpwB,KAAK4oB,aAEL5oB,KAAKsoB,cAET,mDAhKW4I,IAAiBjwB,8BAAAC,kBAAAD,8BAAAC,UAAAD,8BAAA8H,GAAA9H,8BAAA+H,GAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAAjBgoB,GAAiB9nB,UAAA,mBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,wBDLA5C,qFAXCA,qFAAA,kCAAyB,sCAQ3BA,gFACnB,oCAA8D,qCAC9D,iDAyBmBA,uFACrB,iDAfuBA,sGAKAA,m1BAlC/BvI,2BAAA,WAEEA,uBAAA,EAAAixB,GAAA,wBAuEFjxB,mCAxEKA,uBAAA,gBAAAA,4BAAA,EAAAyI,KACYzI,+CAAA,gBAAAwC,EAAA4iB,0nBEFjBplB,oCAAA,GACEA,sBAAA,gGAAUA,wBAOAA,uBAPA,OAAA+K,GAAA+kB,mBAOA9vB,CAP2B,UAAA+K,GAAAa,QAO3B5L,CANmB,gBAMnBA,CAJoB,gBAIpBA,CAHoB,cAGpBA,CAFkB,YAElBA,CADgB,YCKtB,MAAOkxB,GALbryB,cAaEE,KAAA+wB,mBAAiC,GAEjCtiB,WACEzO,KAAK6M,QAAU,CACb,CACEsC,KAAM,QACN/U,KAAMoP,iBACN4F,SAAU,GAEZ,CACED,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,EACVqiB,UAAW,YACXtI,mBAAoBC,IAAagJ,WAEnC,CACEjjB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,YACXtI,mBAAoBC,IAAagJ,WAEnC,CACEjjB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,YACXtI,mBAAoBC,IAAagJ,WAEnC,CACEjjB,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACVqiB,UAAW,YACXtI,mBAAoBC,IAAagJ,WAGvC,CAEAxrB,cACE,GAAI5G,KAAKiM,UAAW,CAClBjM,KAAK2mB,aAAe3mB,KAAKiM,UAEzB,MAAM8kB,GAA4B,GAClC5e,UAAOnS,KAAKgxB,OAASqB,KACnB,MAAMC,EAAwB,CAAEC,MAAM,EAAOtN,QAAQ,EAAOld,QAAQ,EAAOsjB,QAAQ,GACnFiH,EAAiBD,MAAWA,GACxBA,MAASryB,KAAK2mB,aAAaoK,oBAC7B5e,UAAOnS,KAAK2mB,aAAaoK,mBAAsBsB,IAASvlB,IACtDwlB,EAAiBxlB,IAAc,IAGnCikB,GAAmB70B,KAAKo2B,EAAgB,GAE1CtyB,KAAK+wB,mBAAqBA,EAC5B,CACF,mDAjEWoB,GAAoB,4DAApBA,GAAoB/oB,UAAA,sBAAA+C,OAAA,CAAAF,UAAA,YAAA+kB,OAAA,UAAAnK,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,4GAAAC,SAAA,SAAArB,GAAA7F,GAAA,EAAA6F,IDZjCrI,uBAAA,EAAAuxB,GAAA,4BAAevxB,uBAAA,OAAAwC,EAAAwI,wKEQT,MAAOwmB,GAGX3yB,YAAmByU,IAAAvU,KAAAuU,SAAiB,mDAHzBke,IAAiBxxB,8BAAAC,UAAA,4DAAjBuxB,GAAiBrpB,UAAA,mBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,gBCDlB5C,mFAQAA,mbAbRvI,2BAFJ,SAEIA,CAFqB,SAErBA,CADmB,SACnBA,mBAAA,KAMFA,6BAEEA,2BADF,SACEA,CADmB,SACnBA,mBAAA,KAOJA,uCAXOA,sBAAA,GAAAA,uBAAA,0BAAAA,4BAAA,EAAAyI,KAQAzI,sBAAA,GAAAA,uBAAA,0BAAAA,4BAAA,EAAAyI,qFCELzI,sBAAA,kEAEiBA,uBADA,YAAA+K,GAAAM,YACArL,CADyB,SAAA+K,GAAAglB,SCetC,MAAO0B,WAA0B3kB,KAUrCjO,YACUqxB,GACAC,GACAuB,EACAzkB,EACA2Z,EACAwJ,EACAuB,EACD5kB,IAEPK,QATQrO,KAAAmxB,eACAnxB,KAAAoxB,gBACApxB,KAAA2yB,YACA3yB,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAAqxB,sBACArxB,KAAA4yB,aACD5yB,KAAAgO,gBAZThO,KAAAiM,UAAY,IAAIqC,KAedtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBgkB,KAC3D,MAAMC,GAA2B,CAC/BhmB,WAAY,SACZyb,KAAMvW,MAAMwW,IACZC,WAAYA,IAAMzoB,KAAK4yB,WAAWG,YAClC34B,KAAM4F,KAAKgO,aAAakS,QAEpB8S,GAA6B,CACjClmB,WAAY,SACZyb,KAAMvW,MAAM2d,MACZv1B,KAAM4F,KAAKgO,aAAailB,MACxBhT,QAASA,KAAOjgB,KAAKiM,UAAU0c,mBAC/BK,MAAOA,IAAMhpB,KAAKkzB,aAEdtK,GAA4B,CAChC9b,WAAY,SACZyb,KAAMvW,MAAM6W,KACZ5I,QAASA,KAAOjgB,KAAKiM,UAAU0c,oBAAsB3oB,KAAKiM,UAAUmc,QAAQ+K,OAC5E1K,WAAYA,IACVzoB,KAAKiM,UAAUmc,SAAWpoB,KAAK4yB,WAAWQ,QAAQpzB,KAAKiM,UAAUmc,QAAQhuB,MAC3EA,KAAM4F,KAAKgO,aAAauR,MAEpBuJ,EAA8B,CAClChc,WAAY,SACZyb,KAAMvW,MAAM+W,QACZ9I,QAASA,KAAOjgB,KAAKiM,UAAU0c,oBAAsB3oB,KAAKiM,UAAUmc,QAAQ+K,OAC5EnK,MAAOA,IAAMhpB,KAAKqzB,kBAClBj5B,KAAM4F,KAAKgO,aAAakb,QAE1BlpB,KAAK+M,aAAe,CAAC+lB,GAAWE,GAAapK,GAAYE,EAC3D,CAEAra,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,EACVJ,KAAMhP,KAAK2yB,WAEb,CACEv4B,KAAMoP,uBACN2F,KAAM,SACNsiB,UAAW,YACXriB,SAAU,EACV+Z,mBAAoBC,IAAagJ,WAGvC,CAEAkB,YACElT,cAAS,CAACpgB,KAAKmxB,YAAYzN,OAAQ1jB,KAAKoxB,aAAa1N,SAAS/U,UAC3DpM,KACCvC,KAAKgwB,MAAQztB,GAAK,GAClBvC,KAAKgxB,OAASzuB,GAAK,EAAC,EAG1B,CAEAmK,gBAAgBT,IACdjM,KAAKiM,UAAYA,EACnB,CAEAsnB,WAAW7D,IACT1vB,KAAKmxB,YAAY9F,OAAOqE,IAAM/gB,UAC5B,KACE3O,KAAKszB,WACLtzB,KAAK6nB,aAAa2L,aAClBxzB,KAAKqxB,oBAAoBxG,KAAKmH,IAAiBC,QAASzoB,0BAA0BkmB,MAAO,EAE3F,KACE1vB,KAAK4qB,SAAS6I,kBAAkBC,oBAAkB,EAGxD,CAEAL,kBACE,MAAMj5B,GAAO4F,KAAKiM,UAAUmc,QAAQhuB,KACpC4F,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,KAAkC,CACvEI,gBAAiB,OACjBC,UAAW,CAAC/wB,IACZiiB,aAAcA,IAAMrc,KAAKuzB,WAAWn5B,KAExC,CAEA84B,YACE,MAAM94B,GAAO4F,KAAKiM,UAAUmc,QAAQhuB,KACpC4F,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAK8I,IAAoB,CACzDC,OAAQ,CACN,CACEztB,KAAM,OACN/L,KAAM,UACNkG,MAAO,GAAGlG,WACVuH,MAAO6H,oBACP+J,UAAU,IAGdsgB,UAAWrqB,sBACXsqB,iBAAkBtqB,sBAClBuqB,SAAWlrB,KACT7I,KAAKmxB,YAAYxB,MAAMv1B,GAAMyO,GAAO+mB,SAAYjhB,UAAU,KACxD3O,KAAKszB,WACLtzB,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,yBAAyBX,GAAO+mB,kBAAqBx1B,MAAO,EAE/D,GAGP,mDAvIWs4B,IAAiBzxB,8BAAAC,GAAAD,8BAAA8H,GAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA,4DAAjB0M,GAAiBtpB,UAAA,mBAAAyd,SAAA,CAAA5lB,+BAFjB,CAAC,CAAEyO,QAASC,KAAmBC,SAAU,IAAID,KANzC,4BAMuE1O,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,sRAAAC,SAAA,SAAArB,GAAA7F,GAAA,EAAA6F,KD9BxFrI,sBAAA,kBAEAA,2BAAA,gBAQUA,uBAFA,0BAAA2J,GAAA,OAAkBnH,EAAA+I,eAAA5B,EAAsB,EAExC3J,CAFyC,8BAC5BwC,EAAA6vB,UAAU,EACvBryB,CADwB,2BAAA2J,GAAA,OACLnH,EAAAiJ,gBAAA9B,EAAuB,GAClD3J,sBAAA,wBAKAA,uBAAA,EAAA+yB,GAAA,yBAIF/yB,mCAlBUA,wBAKAA,uBALA,OAAAwC,EAAAusB,MAKA/uB,CALc,UAAAwC,EAAAoJ,QAKd5L,CAHmB,iBAQTA,wBAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,2DEb/BknB,2HAAZ,SAAYA,IACVA,GAAA7D,QAAA,SACF,CAFA,CAAY6D,QAAY,KCAlB,MAAOC,gKC6BHjzB,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,0CAGFA,sDACAA,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,0CAGFA,wDAJAA,uBALA,EAAAkzB,GAAA,cAKAlzB,CALkE,EAAAmzB,GAAA,mHAA3DnzB,uBAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,WAAAqgB,GAAA,aAKAzvB,+CAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,WAAAqgB,GAAA,2EAcTzvB,sBAAA,uFAEYA,0DAAA,OAAAuvB,GAAA8D,mDAWVrzB,2BAAA,aAAAA,mBAAA,MAGAA,sDACAA,2BAAA,aAAAA,mBAAA,MAEkCA,yDAClCA,2BAAA,aAEEA,mBAAA,GACFA,wEADEA,uDAAA,IAAAuvB,GAAA+D,kBAAA,kCAFFtzB,uBAPA,EAAAuzB,GAAA,cAOAvzB,CALW,EAAAwzB,GAAA,cAKXxzB,CADW,EAAAyzB,GAAA,mHALJzzB,uBAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,WAAAqgB,GAAA,UAIAzvB,+CAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,WAAAqgB,GAAA,aAGAzvB,+CAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,WAAAqgB,GAAA,8CAoBPzvB,2BAAA,aAAAA,mBAAA,MAE4DA,qDAC5DA,2BAAA,aAAAA,mBAAA,MAEkCA,wDAFlCA,uBAHA,EAAA0zB,GAAA,cAGA1zB,CADW,EAAA2zB,EAAA,mHADJ3zB,uBAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,kBAAAqgB,GAAA,UAGAzvB,+CAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,kBAAAqgB,GAAA,uCAULzvB,2BAFF,iBAEEA,CAD8D,UAE1DA,mBAAA,+FAC8BA,2BAAA,YAAQA,mBAAA,OAACA,2BAASA,mBAAA,8EAEpDA,2BACAA,2BAAA,UAAMA,mBAAA,iDACJA,2BAAA,UACsBA,mBAAA,8BAAwBA,2BAC1CA,mBAAA,uDAERA,wDASFA,2BAAA,aAAAA,mBAAA,MAGAA,yDAzBAA,2BAFF,WAEEA,CADuC,uBACgDA,mBAAA,GACrFA,uBAAA,EAAA4zB,EAAA,qBAaF5zB,sBAAA,4BAOFA,2BACEA,uBAAA,EAAA6zB,GAAA,eAIF7zB,gIA1BmBA,+CAAA,UAAAA,4BAAA,EAAAQ,GAAA+uB,EAAAuE,sBAAAC,kBAAA,IAAsE/zB,uDAAA,mCAEzEA,+CAAA,UAAAuvB,EAAAuE,sBAAAC,mBAYO/zB,wBAGAA,uBAHA,UAAAuvB,EAAA6D,SAAA3hB,IAAA,qBAGAzR,CAH6C,aAG7CA,CADiB,cAAAuvB,EAAAyE,aAO/Bh0B,+CAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,oBAAAqgB,GAAA,wCA6BLzvB,2BAAA,aAAAA,mBAAA,MAGAA,wDAHAA,uBAAA,EAAAi0B,GAAA,mHACOj0B,uBAAA,OAAAuvB,EAAA6D,SAAAhkB,UAAA,QAAAqgB,GAAA,wCAQTzvB,2BAFF,WAEEA,CADoB,sBACpBA,wBAAA,MAYEA,sBAAA,uBACFA,wBACFA,0EANiBA,wBACAA,uBADA,kBACAA,CADqB,QAAAuvB,GAAA2E,qCAUpCl0B,2BAFF,WAEEA,CAD4B,qBAC5BA,mBAAA,MAKFA,wDAIEA,2BAFF,WAEEA,CAD2D,qBAC3DA,mBAAA,MAKFA,kGA/LJA,oCAAA,GAKIA,2BAJF,cAIEA,CADe,YACfA,mBAAA,0EAEAA,2BAGEA,2BADF,WACEA,CADqB,uBACrBA,wBAAA,MAKEA,sBAAA,eAUFA,mDACAA,uBAAA,GAAAm0B,GAAA,yBAAAn0B,oCAYFA,2BAGEA,2BADF,YACEA,CADqB,4BACrBA,wBAAA,MAKAA,uBAAA,GAAAo0B,GAAA,oBAIAp0B,sBAAA,eAOAA,mDACAA,uBAAA,GAAAq0B,GAAA,yBAAAr0B,oCAaFA,2BAIEA,2BADF,YACEA,CADqB,4BACrBA,wBAAA,OAKEA,sBAAA,eAKFA,mDACAA,uBAAA,GAAAs0B,GAAA,yBAAAt0B,oCAQFA,2BAEAA,uBAAA,GAAAu0B,GAAA,cA+BEv0B,2BADF,YACEA,CADqB,wBACrBA,wBAAA,OAEEA,sBAAA,eAKFA,wBACFA,6BAGEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,OAKEA,sBAAA,eAKFA,mDACAA,uBAAA,GAAAw0B,GAAA,yBAAAx0B,oCAMFA,2BA6BAA,uBA3BA,GAAAy0B,GAAA,aA2BAz0B,CA1BsB,GAAA00B,GAAA,aA0BtB10B,CAR8B,GAAA20B,GAAA,cAiB9B30B,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,IAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAKrD3vB,uOAnMMA,+CAAA,YAAAuvB,EAAA6D,UAGqBpzB,sBAAA,GAAAA,8CAAA,KAAAuvB,EAAAlU,QAAArb,CACzBA,wBAAA,KAAAuvB,EAAAjU,sCAKkBtb,sBAAA,GACAA,uBADA,WAAAuvB,EAAA6D,SAAAjjB,SAAAykB,SAAAvkB,OAAAkf,EAAA6D,SAAAjjB,SAAAykB,SAAAtkB,MACAtQ,CADiF,cAAA60B,IAQxF70B,sBAAA,GAAAA,uBAAA,WAAAuvB,EAAA6D,SAAAjjB,SAAAykB,SAAAvkB,OAAAkf,EAAA6D,SAAAjjB,SAAAykB,SAAAtkB,OAuBWtQ,sBAAA,GACAA,uBADA,WAAAuvB,EAAA6D,SAAAjjB,SAAA2kB,SAAAzkB,OAAAkf,EAAA6D,SAAAjjB,SAAA2kB,SAAAxkB,MACAtQ,CADiF,cAAA+0B,GAGzF/0B,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8D,uBAAAl5B,OAAA,GA+BQ6F,sBAAA,GACAA,uBADA,WAAAuvB,EAAA6D,SAAAjjB,SAAA6kB,gBAAA3kB,OAAAkf,EAAA6D,SAAAjjB,SAAA6kB,gBAAA1kB,MACAtQ,CAD+F,cAAAi1B,GAoB/Gj1B,sBAAA,GAAAA,uBAAA,QAAAuvB,EAAAtiB,mBAAAioB,SA0CYl1B,sBAAA,GACAA,uBADA,WAAAuvB,EAAA6D,SAAAjjB,SAAAglB,MAAA9kB,OAAAkf,EAAA6D,SAAAjjB,SAAAglB,MAAA7kB,MACAtQ,CAD2E,cAAAo1B,GAmBvFp1B,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA2E,UAkBAl0B,+CAAA,QAAAuvB,EAAA8F,iBASAr1B,+CAAA,QAAAuvB,EAAA8F,kBAAA9F,EAAAtiB,mBAAAioB,SASgBl1B,wBACAA,uBADA,OAAAuvB,EAAA6D,SACApzB,CADiB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,sCASxCtb,2BAAH,MAAGA,CAAA,YAAAA,mBAAA,MAAkGA,6BACrGA,sBAAA,QACAA,2BAAA,OAAAA,mBAAA,MAAyFA,2BAEzFA,oCAAA,GAAAA,mBAAA,uEAIAA,sBAAA,uEACqBA,uBADA,UAAAuvB,GAAA6D,SAAA3hB,IAAA,qBACAzR,CAD6C,eCjL9D,MAAOs1B,WAA0BhZ,IAuBrCzd,YACU02B,GACAtoB,GACAwP,EACDnJ,EACCsT,EACAsJ,EACAsF,EACApF,GACDrjB,GACC0oB,GACA5Y,GACA6Y,GAERtoB,QAbQrO,KAAAw2B,eACAx2B,KAAAkO,sBACAlO,KAAA0d,QACD1d,KAAAuU,SACCvU,KAAA6nB,eACA7nB,KAAAmxB,cACAnxB,KAAAy2B,cACAz2B,KAAAqxB,uBACDrxB,KAAAgO,gBACChO,KAAA02B,yBACA12B,KAAA8d,eACA9d,KAAA22B,kBA1BV32B,KAAA42B,aAAe3C,GAGfj0B,KAAA62B,SAAW,IAAIC,KAAe,CAAEC,MAAOvtB,iCAGvCxJ,KAAAs0B,uBAAyB,GAGzBt0B,KAAA+R,MAAQC,MAERhS,KAAAg3B,oBAAsB,aAEtBh3B,KAAAi1B,aAAuB,EAgBrBj1B,KAAKuc,SAAW/S,gBAChBxJ,KAAKif,aACLjf,KAAK62B,SAAW,IAAIC,KAAe,CAAEC,MAAOvtB,gCAC9C,CAEAyV,aACEjf,KAAK02B,sBAAsBO,cAActoB,UAAWuoB,KAClDl3B,KAAKs0B,uBAAyB4C,KAEhCl3B,KAAKq0B,SAAWr0B,KAAK8d,YAAYqZ,MAC/B,CACEtB,SAAU,CACR,GACA,CAACviB,aAAWC,UACZ,CAACuO,KAAayP,OAAOvxB,KAAKy2B,YAAYW,iBAAkBp3B,KAAKy2B,eAE/Dr8B,KAAM,CAAC,IACP27B,SAAU,CACR,GACA,GAEA,CACEjU,KAAauV,eACXr3B,KAAKy2B,YACL,IAAMz2B,KAAKq0B,SAAS1jB,SAAS,YAC7B,CAAC2mB,GAAiBC,GAAiBC,KACjCx3B,KAAKy3B,2BAA6Bz3B,KAAK02B,sBAAsBgB,qBAC3DH,IAEFv3B,KAAKu0B,kBAAoBpiB,eAAYqlB,EAAW,GAAE,KAK1DvB,gBAAiB,CAAC,IAClB0B,kBAAmB,CAAC,IACpBvB,MAAO,CAAC,GAAI,CAACtU,KAAasU,QAC1BpG,MAAO,CAAC,IACR4H,QAAS,EAAC,EAAM,CAACtkB,aAAWC,WAC5BskB,kBAAmB,EAAC,IAEtB,CACExkB,WAAY,CAACyO,KAAatmB,MAAM,WAAY,qBAGlD,CAEAiT,WACMzO,KAAKuU,OAAOyK,IAAIK,WAAW,gCAC7Brf,KAAK6E,KAAO7E,KAAK42B,aAAaxG,QAC9BpwB,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAKi1B,aAAc,IAEnBj1B,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAKi1B,aAAc,GAGrB,MAAMrD,GAAc,CAAC5xB,KAAKmxB,YAAYzN,OAAQ1jB,KAAK22B,gBAAgBmB,wBACnEjG,cAAmBD,IAAajjB,UAC7B9S,KAQC,GAPAmE,KAAKm1B,SAAWhjB,SAAMtW,GAAO,GAAK6zB,IAChCA,EAAKkI,SAAU,EACflI,EAAKx1B,QAAU,GAAGw1B,EAAKt1B,SAASs1B,EAAK8B,cAC9B9B,IAET1vB,KAAK+0B,sBAAwB,IAAIgD,KAAwBl8B,GAAO,IAE5DmE,KAAK6E,OAAS7E,KAAK42B,aAAaxG,QAClCpwB,KAAK0xB,eACA,CACL,GAAI1xB,KAAK+0B,sBAAsBC,kBAAoB,EAAG,CACpD,MAAMgD,EAAyBh4B,KAAKq0B,SAAS3hB,IAAI,qBAC3CulB,EAAiB5tB,OACvB4tB,EAAezP,IAAIxoB,KAAK+0B,sBAAsBC,kBAAmB,OACjEgD,EAAuBrY,SAASsY,EAAeC,OAAOl4B,KAAKg3B,sBAC3DgB,EAAuBrW,cAAc,CAACrO,aAAWC,UACnD,CAEAvT,KAAKwgB,cACP,GAGN,CAEAkR,WACE1xB,KAAKm4B,iBACLn4B,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,KAC3B,MAAMqW,GAAWrW,GAAOqW,SACxB71B,KAAKy2B,YAAY/jB,IAAImjB,IAAUlnB,UAAWypB,IACxCp4B,KAAKq4B,SAAWlmB,eAAYimB,GAC5Bp4B,KAAKs4B,YAAYF,GACjBp4B,KAAKwgB,cAAY,EAClB,EAEL,CAEA2X,iBACEn4B,KAAKq0B,SAAS3hB,IAAI,YAAYuN,SAChC,CAEAqY,YAAYD,IACV,CAAC,WAAY,OAAQ,QAAS,QAAS,UAAW,qBAAqBrxB,QAASub,GAC9EviB,KAAKq0B,SAAS3hB,IAAI6P,GAAK5C,SAAS0Y,GAAS9V,KAE3C,MAAM0V,GAAiBI,GAASV,kBAE5BM,IACFj4B,KAAKi1B,aAAc,EACnBj1B,KAAKq0B,SACF3hB,IAAI,qBACJiN,SAAStV,KAAwB,IAAjB4tB,IAAuBC,OAAOl4B,KAAKg3B,uBAEtDh3B,KAAKi1B,aAAc,CAEvB,CAEAnD,aACE,MAAMsG,GAAgB,IAAIlE,GAE1B,CAAC,WAAY,WAAY,OAAQ,QAAS,QAAS,UAAW,qBAAqBltB,QAChFub,IACC6V,GAAc7V,GAAOviB,KAAKq0B,SAAS3hB,IAAI6P,GAAKjiB,QAGhD,MAAM23B,GAAiBj4B,KAAKq0B,SAAS3hB,IAAI,qBAAqBpS,MAC9D,GAAI23B,GAAgB,CAClBj4B,KAAKi1B,aAAc,EACnB,MAAMsD,EAAMluB,KAAO4tB,GAAgBj4B,KAAKg3B,sBAEtCh3B,KAAK6E,OAAS7E,KAAK42B,aAAaxG,SAChCpwB,KAAKq4B,SAASV,oBAAsBY,EAAIjuB,SAExCiuB,EAAIC,IAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAIC,OAAQ,KAE1CP,GAAcT,kBAAuBY,EAAIjuB,MAC3C,CACA,OAAO8tB,EACT,CAEA9P,eACE,MAAM8P,GAAgBp4B,KAAK8xB,aAC3B9xB,KAAKy2B,YAAYxR,OAAOmT,IAAezpB,UACrC,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,0BAA0B4uB,GAAcvC,aAE1C71B,KAAKuU,OAAOC,SAAS,CAAC,0BAAyB,EAEjD,KACExU,KAAKq0B,SAAS9O,UAAU,CAAEE,gBAAgB,GAAM,EAGtD,CAEAmD,aACE,GAAI5oB,KAAK44B,sCAAuC,CAC9C,MAAMC,GAAe,CACnBhF,UAAWrqB,uBACXsvB,WAAYtvB,oBACZuvB,QAAS/4B,KAAKg5B,sCACdjF,SAAUA,KACR/zB,KAAK4qB,SAASqO,QACdj5B,KAAKk5B,cAAY,EAEnBC,SAAUA,KACRn5B,KAAKq0B,SAAS9O,UAAU,CAAEE,gBAAgB,IAC1CzlB,KAAKq0B,SAAS3hB,IAAI,SAAS6X,MAAMvqB,KAAKq0B,SAAS3hB,IAAI,SAASpS,MAAK,GAGrEN,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKuO,KAA4BP,GACrE,MACE74B,KAAKk5B,cAET,CAEO5C,gBACL,OAAOt2B,KAAKkO,mBAAmBmrB,gBAAkBr5B,KAAKq0B,SAAS1jB,SAAS,WAC1E,CAEQ2oB,sBAEN,OADsBt5B,KAAKs2B,iBAGzBt2B,KAAKq4B,WACJlmB,aAAUnS,KAAKq4B,SAASrI,MAAOhwB,KAAKq0B,SAAS1jB,SAAS,SAE3D,CAEQioB,sCAEN,OADsB54B,KAAKs2B,kBACFt2B,KAAKu5B,6BAA6Bv5B,KAAKq0B,SAAS1jB,SAAS,SACpF,CAEQ4oB,6BAA6BvJ,GAAuB,IAC1D,UAAWN,MAAQ1vB,KAAKm1B,SACtB,IAAiC,IAA7BnF,GAAMj0B,QAAQ2zB,GAAKt1B,OAAgBs1B,GAAKqB,mBAAmB8B,KAAS,CACtE,MAAM2G,EAAkB9J,GAAKqB,mBAAmB8B,KAChD,MAAO,CAAC,OAAQ,UAAU4G,MAAO3sB,IACgB,IAAxC0sB,EAAgBz9B,QAAQ+Q,GAEnC,CAEF,OAAO,CACT,CAEQosB,eACN,MAAMd,GAAgBp4B,KAAK8xB,aAC3B9xB,KAAKy2B,YAAY1uB,OAAOqwB,IAAezpB,UACrC,KACM3O,KAAKs5B,sBACPt5B,KAAKw2B,YAAYkD,OAAO,KACtB15B,KAAKqxB,oBAAoBxG,KACvBmH,IAAiB1Q,KACjB9X,mFAAkF,IAItFxJ,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,0BAA0B4uB,GAAcvC,aAE1C71B,KAAKuU,OAAOC,SAAS,CAAC,2BAAyB,EAGnD,KACExU,KAAKq0B,SAAS9O,UAAU,CAAEE,gBAAgB,GAAM,EAGtD,CAEAkU,sBACE35B,KAAKq0B,SAAS3hB,IAAI,qBAAqBiN,cAASia,EAClD,CAEAhJ,SACM5wB,KAAK6E,OAAS7E,KAAK42B,aAAaxG,QAClCpwB,KAAK4oB,aAEL5oB,KAAKsoB,cAET,mDAvRWiO,IAAiBt1B,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,kBAAA/H,8BAAA+H,UAAA/H,8BAAAgI,MAAAhI,8BAAAiI,GAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,MAAAhlB,8BAAAilB,MAAAjlB,8BAAAklB,MAAA,4DAAjBoQ,GAAiBntB,UAAA,mBAAAC,UAAA,SAAAC,GAAA7F,MAAA,EAAA6F,mTDlBAE,yFAMDA,kIAhBEA,qFAAA,kCAAyB,sCAQ3BA,oFACnB,iDA8BuBA,oFACzB,2DAGA,6DACA,iDA6ByBA,6FACvB,iDAgDmBA,qFACnB,kDAYmBA,kFAEnB,kDAnHqBA,uGAKAA,4GA4BVA,+HAIAA,oGAwBAA,8HAGAA,qGA8BFA,sGA8BEA,6FAaeA,6FAM1BA,2EAAA,gDAAmB,oDASFA,sFASAA,sHAcTA,0JAERA,+JAEWA,grEAjNrBvI,2BAAA,YAEEA,uBAAA,EAAA44B,GAAA,yBAwMF54B,2BAUAA,uBARA,EAAA64B,GAAA,yBAAA74B,mCAQAA,CARoD,EAAA84B,GAAA,yBAAA94B,4CA3M/CA,uBAAA,gBAAAA,4BAAA,EAAAK,KACYL,+CAAA,gBAAAwC,EAAA4iB,uhBEgBfplB,2BAAA,UACEA,mBAAA,GACFA,kEADEA,uDAAA,IAAA+4B,GAAA,GAAAC,EAAA,0CADFh5B,uBAAA,EAAAi5B,GAAA,2CAAuBj5B,uBAAA,UAAAk5B,kCAYrBl5B,2BAHF,UAGEA,CADyB,WACKA,mBAAA,GAChCA,uGAHKA,wBADA,gBAAAm5B,EAAAC,cAAAC,EAAAC,sBACAt5B,CADsE,iBAAAm5B,EAAAC,cAAAC,EAAAE,wBAAAJ,EAAAC,eAAAC,EAAAC,uBAG3Ct5B,sBAAA,GAAAA,+BAAA,IAAAw5B,GAAA,kCAQhCx5B,sBAAA,4FAKGA,uBAAAq5B,EAAAvoB,MAAA2oB,SADAz5B,wBADA,oBAAA05B,GAAAN,cAAAC,EAAAC,sBACAt5B,CAD0E,qBAAA05B,GAAAN,cAAAC,EAAAE,wBAAAG,GAAAN,eAAAC,EAAAC,qDAH7Et5B,uBAAA,EAAA25B,GAAA,WAMA35B,2BAAA,2CAAmCA,mBAAA,oCAAuDA,qGANtFA,uBAAA,OAAA05B,EAAAN,cAAAC,EAAAE,wBAMEv5B,0DAAA,QAAAA,wBAAA,IAAA45B,KAA6B55B,sBAAA,GAAAA,sDAAA,IAAA05B,EAAAG,4BAAA,OCd/B,MAAOC,GAmBXj7B,YACU22B,GACA9D,GACA9K,EACAwJ,EACAnjB,EACA0kB,EACA+D,EACD3oB,IAPChO,KAAAy2B,eACAz2B,KAAA2yB,aACA3yB,KAAA6nB,eACA7nB,KAAAqxB,sBACArxB,KAAAkO,qBACAlO,KAAA4yB,aACA5yB,KAAA22B,kBACD32B,KAAAgO,gBAbThO,KAAAiM,UAAY,IAAIqC,KAChBtO,KAAA+R,MAAQC,MAcNhS,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBgkB,KAC3D,MAAMC,GAA2B,CAC/BhmB,WAAY,SACZyb,KAAMvW,MAAMwW,IACZC,WAAYA,IAAMzoB,KAAK4yB,WAAWG,YAClC34B,KAAM4F,KAAKgO,aAAakS,QAEpB0I,GAA4B,CAChC9b,WAAY,SACZyb,KAAMvW,MAAM6W,KACZJ,WAAYA,IACVzoB,KAAKiM,UAAUmc,SAAWpoB,KAAK4yB,WAAWQ,QAAQpzB,KAAKiM,UAAUmc,QAAQyN,UAC3Ez7B,KAAM4F,KAAKgO,aAAauR,MAEpBuJ,GAA8B,CAClChc,WAAY,SACZyb,KAAMvW,MAAM+W,QACZC,MAAOA,IAAMhpB,KAAKg7B,kBAClB5gC,KAAM4F,KAAKgO,aAAakb,QAE1BlpB,KAAK+M,aAAe,CAAC+lB,GAAWlK,GAAYE,GAC9C,CAEAra,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,oBACN2F,KAAM,WACNC,SAAU,EACVC,aAAcrP,KAAKi7B,YAErB,CACE7gC,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,EACVJ,KAAMhP,KAAK2yB,WAEb,CACEv4B,KAAMoP,iBACN2F,KAAM,QACNC,SAAU,EACVJ,KAAMhP,KAAK2yB,WAEb,CACEv4B,KAAMoP,iBACN2F,KAAM,QACNC,SAAU,EACVC,aAAcrP,KAAKk7B,cAErB,CACE9gC,KAAMoP,mBACN2F,KAAM,UACNC,SAAU,EACV+Z,mBAAoBC,IAAagJ,WAEnC,CACEh4B,KAAMoP,4BACN2F,KAAM,oBACNC,SAAU,EACVC,aAAcrP,KAAKm7B,cAIvBn7B,KAAK22B,gBAAgByE,UADM,CAAC,gCAAiC,kCACpBzsB,UAAWpM,KAClDvC,KAAKw6B,uBAAyBj4B,GAAK84B,8BACnCr7B,KAAKu6B,sBAAwBh4B,GAAK+4B,6BAAA,EAEtC,CAEAC,WACEv7B,KAAKy2B,YAAY/S,OAAO/U,UAAWgV,KACjCA,GAAM3c,QAAS6rB,KACbA,GAAKiI,4BAAiC,EAClCjI,GAAK8E,mBAAwB9E,GAAK8E,kBAAuB,IAC3D9E,GAAK8E,kBAAmD,IAA5B9E,GAAK8E,kBACjC9E,GAAKiI,4BAAiC96B,KAAKw7B,+BACzC3I,GAAK8E,mBAEP9E,GAAKwH,cAAmBr6B,KAAKy7B,iBAAiB5I,GAAK8E,mBAAiB,GAGxE33B,KAAK2jB,MAAQA,IAEjB,CAEAjX,gBAAgBT,IACdjM,KAAKiM,UAAYA,EACnB,CAEAyvB,WAAW7F,IACT71B,KAAKy2B,YAAYpL,OAAOwK,IAAUlnB,UAChC,KACE3O,KAAKu7B,WACLv7B,KAAK6nB,aAAa2L,aAClBxzB,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,0BAA0BqsB,MAAW,EAGzC,KACE71B,KAAK4qB,SAAS6I,kBAAkBC,oBAAkB,EAGxD,CAEAsH,kBACE,MAAMW,GAAkB37B,KAAKkO,mBAAmBmrB,cAC1CxD,GAAW71B,KAAKiM,UAAUmc,QAAQyN,SACpC8F,KAAoB9F,GASxB71B,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,KAAkC,CACvEC,OAAQC,KAAeC,KACvBC,gBAAiB,OACjBC,UAAW,CAAC0K,IACZxZ,aAAcA,IAAMrc,KAAK07B,WAAW7F,MAZpC71B,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBzQ,MACjB/X,mCAAmCqsB,MACnCrsB,4CAA4CqsB,OAWlD,CAEA+F,oBAAoBC,IAClB,OAAuB,OAAnBA,IAA2B77B,KAAKw6B,uBAAyB,GACpD,GAEax6B,KAAKy7B,iBAAiBI,KACvB77B,KAAKu6B,sBACjB,oBAEA,oBAEX,CAEAuB,gBAAgBD,IACd,OAAuB,OAAnBA,IAA2B77B,KAAKw6B,uBAAyB,GACpD,GAEax6B,KAAKy7B,iBAAiBI,KACvB77B,KAAKu6B,sBACjB,gBAEA,gBAEX,CAEAkB,iBAAiBp1B,IACf,QAAauzB,IAATvzB,IAA8B,MAARA,GACxB,OAEF,GAAIA,GAAO,EACT,OAAO,EAGT,OAAOjJ,KAAK6B,IAAI,EAAG7B,KAAK2+B,MAAM/7B,KAAKg8B,iBAAiB31B,IADrC,OAEjB,CAEAm1B,+BAA+Bn1B,IAC7B,MAAM41B,GAAcj8B,KAAKg8B,iBAAiB31B,IAC1C,OAA+C,GAAxCjJ,KAAK2+B,MAAME,QAAkC,GACtD,CAEAD,iBAAiB31B,IACf,OAAOA,GAAO61B,KAAKC,KACrB,mDApMWpB,IAAiB95B,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA,4DAAjB+U,GAAiB3xB,UAAA,mBAAAC,UAAA,SAAAC,GAAA7F,MAAA,EAAA6F,0YAFjB,CAAC,CAAEoG,QAASC,KAAmBC,SAAU,IAAID,KANzC,6BAMuEnF,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDY5E5C,ykBAxCZvI,sBAAA,kBAEAA,2BAAA,gBAMUA,uBADA,uBAAAA,iCAAAsL,GAAAtL,wBAAawC,EAAA83B,WAAU,EACvBt6B,CADwB,2BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBACLwC,EAAAiJ,gBAAA9B,GAAuB,GAClD3J,sBAAA,wBAKFA,2BAoBAA,uBAlBA,EAAAm7B,GAAA,yBAAAn7B,mCAkBAA,CAjBoC,EAAAo7B,GAAA,yBAAAp7B,mCAiBpCA,CARgC,EAAAq7B,GAAA,yBAAAr7B,2CAxBtBA,wBAEAA,uBAFA,OAAAwC,EAAAkgB,MAEA1iB,CAFc,UAAAwC,EAAAoJ,SAQJ5L,wBAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,qWEHvCzS,GAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,yJAEN,CACDR,KAAQ,OACRC,MAAS,CACPG,KAAQ,OACRI,EAAK,8EACL,iBAAkB,gBAGtBC,KAAQ,cACRC,KAAQ,wCCoDJ,MAAOkiC,GACXz8B,YAAoB08B,IAAAx8B,KAAAw8B,eAClBx8B,KAAKw8B,YAAYC,YAAY,CAACC,KAAaC,KAAOC,GAAWC,KAAgBC,KAAOC,MACtF,mDAHWR,IAAUt7B,qBAAAC,gBAAA,2DAAVq7B,IAAU,8DAtCnBpxB,eACAK,cACAC,sBACAJ,IACA2xB,iBACAC,eACAC,cACAC,gBACAC,cACAC,kBACAC,eACAC,gBACAC,gBACAC,eACAC,oBACAC,oBACAvyB,eACAwyB,mBACAzP,IACA7iB,eACAuyB,YACAT,cACAF,cACAD,eACAa,oBAAc,EAoBlB,MAAMC,GAAiB,CACrB,CAAExlB,KAAM,GAAIylB,WAAY,QAASC,UAAW,QAC5C,CACE1lB,KAAM,QACNhW,KAAM,CAAE27B,YAAa,SACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWrD,IACvB,CACExiB,KAAM8lB,KAASne,OACfke,UAAW7H,GACXh0B,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,iBAClB6e,UAAW7H,GACXh0B,KAAM,CAAE27B,YAAaI,KAAa/e,SAIxC,CACEhH,KAAM,QACNhW,KAAM,CAAE27B,YAAa,SACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAW1L,IACvB,CACEna,KAAM8lB,KAASne,OACfke,UAAWlN,GACX3uB,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,aAClB6e,UAAWlN,GACX3uB,KAAM,CAAE27B,YAAaI,KAAa/e,UASpC,MAAOgf,wDAAgB,2DAAhBA,IAAgB,8DAFjBhC,GAAYjxB,eAAakzB,SAAST,MAAO,sEC9H/C,MAAOU,UAAuBtb,OAM9B,MAAOub,UAA+BD,EAA5C3+B,kCACEE,KAAA2+B,OAASn1B,0BACTxJ,KAAA4+B,QAAUp1B;0DAEVxJ,KAAAuoB,KAAOvW,KAAM0oB,OACf,EAQM,MAAOmE,UAAiCJ,EAA9C3+B,kCACEE,KAAA2+B,OAASn1B,uBACTxJ,KAAA4+B,QAAUp1B;8EAEVxJ,KAAAuoB,KAAOvW,KAAM0oB,OACf,qCC1BM,MAAgBoE,EACpBC,sBAAsBC,EAAeC,GACnC,MAAO,6BAA6BD,KAASC,QAC/C,2GCYI,MAAOC,EACXp/B,YACUoO,EACA4d,EACAvX,EACAmJ,GAHA1d,KAAAkO,qBACAlO,KAAA8rB,OACA9rB,KAAAuU,SACAvU,KAAA0d,OACP,CAEHyhB,MAAMzgB,GACJ,OAAO1e,KAAK8rB,KAAKzwB,KAAK,iBAAkB,CAAEqjB,MAAOA,GACnD,CAEA0gB,MAAMC,GACJ,OAAOr/B,KAAK8rB,KAAKzwB,KAAK,WAAYgkC,GAAarwB,QAC7CswB,OAAK3V,IACH3pB,KAAKkO,mBAAmBsqB,IACtB7O,EAAKkM,SACLlM,EAAK4V,YACL5V,EAAK6V,IACL7V,EAAKgO,kBACLhO,EAAKkO,kBAAiB,GAI9B,CAEA6B,OAAO5wB,EAAqB,MAC1B,OAAO9I,KAAK8rB,KAAKzwB,KAAK,kBAAmB,MAAMsT,UAAWgb,IAExD,GADA3pB,KAAKkO,mBAAmBuxB,SACH,UAAjB9V,EAAK/C,SACP,OAAO8Y,OAAOC,SAASv3B,QAAQuhB,EAAKiW,cAEtC,MAAM5gB,EAAM7M,MAAMnS,KAAK0d,MAAMmiB,SAASC,YAAa,YAAa,UAChE9/B,KAAKuU,OAAOC,SAAS,CAACwK,GAAM,CAAE+gB,oBAAoB,IAC9Cj3B,GACFA,IAEF42B,OAAOC,SAASv3B,QAAQuhB,EAAKiW,aAAY,EAE7C,iDAvCWV,GAAWj+B,qBAAAC,KAAAD,qBAAA8H,cAAA9H,qBAAA+H,UAAA/H,qBAAA+H,kBAAA,+DAAXk2B,EAAW/9B,QAAX+9B,EAAW99B,UAAAC,WAFV,QAAM,qFCAd,MAAO2+B,UAA2BlB,IAGtCh/B,YAAoBgsB,GAClBzd,QADkBrO,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,aAId,CAEA0E,KAAKuc,EAAwBC,GAC3B,MAAMh9B,EAAU,CACdi9B,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjDvf,OAAQygB,EAEV/8B,QAAqB,YAArBA,OACIg9B,IACFh9B,EAAQsc,OAAStc,EAAQsc,OAAO6gB,OAAO,eAAgBH,IAElD,IAAII,IACTtgC,KAAK8rB,KAAKpZ,IAAuB1S,KAAKgf,IAAK9b,GAE/C,CAEAq9B,WAAWL,GACT,OAAOlgC,KAAK8rB,KAAKpZ,IAAc,GAAG1S,KAAKgf,OAAOkhB,YAChD,CAEAjb,OAAOub,GACL,MAAMN,EAAcM,EAAYxU,WAC5B,GAAGwU,EAAYzU,gBAAmByU,EAAYxU,aAC9CwU,EAAYzU,aAChB,OAAO/rB,KAAK8rB,KAAKzwB,KACf2E,KAAKgf,IACL,CACEyhB,aAAcP,EACdQ,aAAcF,GAEhB,CAAEG,QAAS,YAEf,CAEA54B,OAAOy4B,GACL,MAAMN,EAAcM,EAAYxU,WAC5B,GAAGwU,EAAYzU,gBAAmByU,EAAYxU,aAC9CwU,EAAYzU,aAChB,OAAO/rB,KAAK8rB,KAAKgE,IACf,GAAG9vB,KAAKgf,OAAOkhB,IACf,CACEO,aAAcP,EACdQ,aAAcF,GAEhB,CAAEG,QAAS,YAEf,CAEAtV,OAAO6U,GACL,OAAOlgC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOkhB,IAAe,CAAES,QAAS,YACnE,CAEAC,gBACE,OAAO5gC,KAAK8rB,KAAKpZ,IAAc,GAAG1S,KAAKgf,kBACzC,iDA3DWghB,GAAkB/+B,qBAAAC,cAAA,+DAAlB8+B,EAAkB7+B,QAAlB6+B,EAAkB5+B,UAAAC,WAFjB,QAAM,yGCDd,MAAOw/B,EAGX/gC,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAA8gC,QAAU,4BAE6B,CAEvCpuB,IAAIquB,EAAiBzf,GAAO,GAC1B,OAAOthB,KAAK8rB,KAAKpZ,IAA4B,GAAG1S,KAAK8gC,WAAWC,IAAW,CACzEvhB,OAAQ,CACN8B,KAAMA,IAGZ,CAEA2D,OACE8b,EACAC,EACAC,EACA5mC,EACA6mC,EACAC,EACAt8B,GAEA,OAAO7E,KAAK8rB,KAAKzwB,KACf2E,KAAK8gC,QACL,CACEM,SAAUL,EACVM,WAAYL,EACZM,YAAaL,EACb5mC,KAAMA,EACN6mC,IAAKA,EACLC,IAAKA,EACLt8B,KAAMA,GAER,CAAE87B,QAAS,YAEf,CAEArf,KAAKyf,EAAiBC,GACpB,OAAOhhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAWC,SAAgB,CACtDvhB,OAAQ,CACN6hB,WAAYL,IAGlB,CAEAjR,OAAOiR,EAAmBD,GACxB,OAAO/gC,KAAKshB,KAAKyf,EAASC,GAAWhyB,QACnCuyB,UAAM,IAAI,EACV/c,cAAYjD,IACNpP,eAAaoP,EAAMwL,iBACrBxL,EAAMwL,kBAAc,EAEf3J,OAAG,KAGhB,CAEArb,OAAOg5B,EAAiBC,EAAmB3mC,GACzC,OAAO2F,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,WAAWC,IAAW,CACjDM,WAAYL,EACZ3mC,KAAMA,GAEV,CAEAolC,OAAOsB,EAAiBC,GACtB,OAAOhhC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,WAAWC,IAAW,CACpDvhB,OAAQ,CACN6hB,WAAYL,GAEdL,QAAS,YAEb,iDAvEWE,GAA2B5/B,qBAAAC,cAAA,+DAA3B2/B,EAA2B1/B,QAA3B0/B,EAA2Bz/B,UAAAC,WAF1B,QAAM,yGCEd,MAAOmgC,EAGX1hC,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAA8gC,QAAU,sBAE6B,CAEvCpuB,IAAIsO,EAAgBygB,EAA6B,GAAIngB,GAAO,GAC1D,OAAOthB,KAAK8rB,KAAKpZ,IAAuB,GAAG1S,KAAK8gC,WAAW9f,IAAU,CACnExB,OAAQ,CACN6hB,WAAYI,EACZngB,KAAMA,IAGZ,CAEA2D,OACEjE,EACA0gB,EACAD,EACAR,EACA5mC,EACA6mC,EACAC,EACAt8B,EACA88B,GAEA,OAAO3hC,KAAK8rB,KAAKzwB,KACf2E,KAAK8gC,QACL,CACEM,SAAUpgB,EACV4gB,YAAaF,EACbL,WAAYI,EACZH,YAAaL,EACb5mC,KAAMA,EACN6mC,IAAKA,EACLC,IAAKA,EACLt8B,KAAMA,EACNg9B,mBAAoBF,GAEtB,CAAEhB,QAAS,YAEf,CAEArf,KAAKN,EAAgB0gB,EAAuBD,EAA6B,IACvE,OAAOzhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAW9f,SAAe,CACrDxB,OAAQ,CACNoiB,YAAaF,EACbL,WAAYI,IAGlB,CAEAhC,OACEze,EACA0gB,EACAD,EAA6B,GAC7BK,GAA2B,GAE3B,OAAO9hC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,WAAW9f,IAAU,CACnDxB,OAAQ,CACNoiB,YAAaF,EACbL,WAAYI,EACZM,iBAAkBD,GAEpBnB,QAAS,YAEb,CAEA5Q,OAAO2R,EAAuB1gB,EAAgBygB,EAA6B,IACzE,OAAOzhC,KAAKshB,KAAKN,EAAQ0gB,EAAeD,GAAoBzyB,QAC1DuyB,UAAM,IAAI,EACV/c,cAAYjD,IACNpP,eAAaoP,EAAMwL,iBACrBxL,EAAMwL,kBAAc,EAEf3J,OAAG,KAGhB,CAEA4e,WAAWhhB,EAAgBggB,EAAY,IACrC,OAAOhhC,KAAK8rB,KAAKpZ,IAAa,GAAG1S,KAAK8gC,WAAW9f,WAAiB,CAChExB,OAAQ,CACN6hB,WAAYL,IAGlB,CAEAj5B,OAAOiZ,EAAgB0gB,EAAuBrnC,EAAconC,EAA6B,IACvF,OAAOzhC,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,WAAW9f,IAAU,CAChD4gB,YAAaF,EACbrnC,KAAMA,EACNgnC,WAAYI,GAEhB,CAEAQ,aACEjhB,EACA0gB,EACAV,EAAY,IAEZ,OAAOhhC,KAAK8rB,KAAKpZ,IACf,GAAG1S,KAAK8gC,oBAAoB9f,KAAU0gB,IACtC,CACEliB,OAAQ,CACN6hB,WAAYL,IAIpB,CAEAkB,gBAAgBC,EAAsBnhB,EAAgB0gB,EAAuBV,EAAY,IACvF,OAAOhhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,oBAAoB9f,KAAU0gB,SAAsB,CAC/EliB,OAAQ,CACN4iB,UAAWD,EACXd,WAAYL,IAGlB,CAEAqB,eACErhB,EACAmhB,EACAT,EACAV,EAAoB,IAEpB,OAAOhhC,KAAKkiC,gBAAgBlhB,EAAQmhB,EAAcT,EAAeV,GAAWhyB,QAC1EuyB,UAAM,IAAI,EACV/c,cAAYjD,IACNpP,eAAaoP,EAAMwL,iBACrBxL,EAAMwL,kBAAc,EAEf3J,OAAG,KAGhB,CAEAkf,eACEthB,EACAmhB,EACAT,EACAV,EAAoB,IAEpB,OAAOhhC,KAAK8rB,KAAKzwB,KACf,GAAG2E,KAAK8gC,oBACR,CACEM,SAAUpgB,EACV4gB,YAAaF,EACbU,UAAWD,EACXd,WAAYL,GAEd,CAAEL,QAAS,YAEf,CAEA4B,eAAevhB,EAAgB0gB,EAAuBS,EAAsBnB,EAAY,IACtF,OAAOhhC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,oBAAoB9f,KAAU0gB,IAAiB,CAC7EliB,OAAQ,CACN4iB,UAAWD,EACXd,WAAYL,GAEdL,QAAS,YAEb,CAEA6B,oBACExhB,EACA0gB,EACAS,EACAM,EACAzB,EAAY,GACZ0B,EAAkB,IAElB,OAAO1iC,KAAK8rB,KAAKzwB,KACf,GAAG2E,KAAK8gC,yBACR,CACEM,SAAUpgB,EACV4gB,YAAaF,EACbU,UAAWD,EACXQ,WAAYF,EACZpB,WAAYL,EACZ4B,kBAAmBF,GAErB,CAAE/B,QAAS,YAEf,iDAxLWa,GAAsBvgC,qBAAAC,cAAA,+DAAtBsgC,EAAsBrgC,QAAtBqgC,EAAsBpgC,UAAAC,WAFrB,QAAM,+DCAd,MAAOwhC,EACX/iC,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAE/BgX,UAAUC,EAAaC,GAC7B,GAAKD,EAAOziC,MAGZ,OAAOyiC,EAAOziC,MAAMuS,KAAMowB,GAAWA,EAAED,UAAYA,EACrD,CAEAryB,SAASoyB,EAAaC,GACpB,IAAIpkB,EAAM5e,KAAK8iC,UAAUC,EAAQC,GACjC,IAAKpkB,EAAK,CACR,MAAMskB,EAAaF,EAAQjnC,QAAQ,MAChB,IAAfmnC,IACFtkB,EAAM5e,KAAK8iC,UAAUC,EAAQC,EAAQtgB,UAAU,EAAGwgB,IAEtD,CAIA,OAHKtkB,IACHA,EAAM5e,KAAK8iC,UAAUC,EAAQ,WAE3BnkB,EACKA,EAAIte,MAENyiC,EAAOI,OAChB,CAEAC,gBACE,OAAOpjC,KAAK8rB,KAAKpZ,IAAI,oBACvB,CAEAA,IAAI2wB,GACF,OAAOrjC,KAAK8rB,KAAKpZ,IAAI,oBAAoB2wB,IAC3C,CAEAhf,OAAOif,GACL,OAAOtjC,KAAK8rB,KAAKpZ,IAAI,iCAAiC4wB,EAAkB1mC,KAAK,OAC/E,CAEAqoB,OAAOoe,GACL,OAAOrjC,KAAK8rB,KAAKzwB,KAAK,oBAAqBgoC,EAC7C,CAEAhY,OAAOgY,EAAsBL,GAC3B,OAAOhjC,KAAK8rB,KAAKT,OAAO,oBAAoBgY,aAAwBL,IACtE,CAEAO,WAAWC,GACT,OAAOxjC,KAAK8rB,KAAKgE,IAAI,oBAAqB0T,EAC5C,iDAjDWX,GAAoB5hC,qBAAAC,cAAA,+DAApB2hC,EAAoB1hC,QAApB0hC,EAAoBzhC,UAAAC,WAFnB,QAAM,+DCEd,MAAOoiC,EAUX3jC,YAAoBgsB,GAAA9rB,KAAA8rB,OATpB9rB,KAAA0jC,QAAU,iBAEV1jC,KAAA2jC,aAAe,CAEbC,KAAMp6B,mEACNq6B,eAAgBr6B,6EAChBs6B,aAAct6B,oDAGuB,CAEvCyb,OAAO8e,GACL,OAAO/jC,KAAK8rB,KAAKzwB,KAAK2E,KAAK0jC,QAASK,EAAM,CAAEpD,QAAS,YACvD,CAEAtV,OAAOjxB,GACL,OAAO4F,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK0jC,WAAWtpC,IAAQ,CAAEumC,QAAS,YAChE,CAEAqD,UACE,OAAOhkC,KAAK8rB,KAAKpZ,IAAI,MAAM1S,KAAK0jC,eAClC,iDAtBWD,GAAgBxiC,qBAAAC,cAAA,+DAAhBuiC,EAAgBtiC,QAAhBsiC,EAAgBriC,UAAAC,WAFf,QAAM,yICcd,MAAO4iC,UAAoBnF,IAM/Bh/B,YAAoBgsB,EAA0BoY,GAC5C71B,QADkBrO,KAAA8rB,OAA0B9rB,KAAAkkC,gBAL9ClkC,KAAA8gC,QAAU,WACV9gC,KAAAmkC,UAAY,cAEZnkC,KAAAokC,iBAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,MAAO,UAI9E,CAEA1gB,KAAKlE,EAAa6kB,GAChB7kB,SAASA,EAAOgZ,IAAI,QAAS6L,GACtBrkC,KAAK8rB,KACTpZ,IAAc1S,KAAK8gC,QAAS,CAC3BX,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjDvf,OAAQA,EACRmhB,QAAS,aAEV3xB,QACC9R,OAAKm7B,GACIA,EAASl9B,KAAQ+B,IAAKonC,IAC3BA,EAAKnE,QAAa9H,EAAS8H,QACpBmE,KAIjB,CAEArf,OAAOvX,EAAkB62B,EAAc7jC,EAAkBgO,GACvD,OAAO1O,KAAK8rB,KAAKzwB,KACf2E,KAAK8gC,QACL,CAAEpzB,SAAUA,EAAU62B,KAAMA,EAAM7jC,OAAQA,EAAQgO,OAAQA,GAC1D,CAAEiyB,QAAS,WAAYR,QAAS,CAAEC,OAAQoE,IAAcC,gBAAgB,IAAK,OAEjF,CAEApZ,OAAO3d,GACL,OAAO1N,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,WAAWpzB,IAAY,CAAEizB,QAAS,YACpE,CAEA+D,WAAWh3B,GACT,OAAO1N,KAAK8rB,KACTpZ,IAAgB,GAAG1S,KAAK8gC,WAAWpzB,aACnCsB,QAAK9R,OAAKynC,GAAYA,EAAQznC,IAAK0nC,GAAW5kC,KAAKkkC,cAAcW,cAAcD,KACpF,CAEAE,aAAap3B,GACX,OAAO1N,KAAK8rB,KAAKpZ,IAAyB,GAAG1S,KAAK8gC,WAAWpzB,UAC/D,CAEA6yB,WAAW7yB,GACT,OAAO1N,KAAK8rB,KAAKpZ,IAAc,GAAG1S,KAAK8gC,WAAWpzB,YACpD,CAEAq3B,YACE,OAAO/kC,KAAK8rB,KAAKpZ,IAAc,GAAG1S,KAAKmkC,mBACzC,CAEAp8B,OACE2F,EACAs3B,GAAe,EACftkC,EAAmB,GACnBukC,GAAc,EACdC,GAAQ,EACRC,GAAQ,GAER,OAAOnlC,KAAK8rB,KAAKgE,IACf,GAAG9vB,KAAK8gC,WAAWpzB,IACnB,CACE03B,cAAeJ,EACftkC,OAAQA,EACRukC,YAAaA,EACbC,MAAOA,EACPC,MAAOA,GAET,CAAEhF,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,KAEvD,CAEAsG,eAAe33B,EAAkBk3B,EAAgBU,GAC/C,OAAOtlC,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,WAAWpzB,oBAA4B,CACnEk3B,SACAU,YAEJ,CAEQC,mBAAmBC,GACzB,IAAIhmB,EAAS,IAAIimB,aACjB,OAAID,IACFhmB,EAASA,EAAO6gB,OAAO,UAAWluB,aAAWqzB,KAExChmB,CACT,CAQAkmB,aAAah4B,EAAkB83B,GAC7B,MAAMhmB,EAASxf,KAAKulC,mBAAmBC,GACvC,OAAOxlC,KAAK8rB,KAAKpZ,IAAmB,GAAG1S,KAAK8gC,WAAWpzB,cAAsB,CAC3E8R,OAAQA,GAEZ,CAOAmmB,cAAcH,GACZ,MAAMhmB,EAASxf,KAAKulC,mBAAmBC,GACvC,OAAOxlC,KAAK8rB,KAAKpZ,IAAqB,GAAG1S,KAAKmkC,sBAAuB,CAAE3kB,OAAQA,GACjF,CAQAomB,oBAAoBl4B,EAAmB83B,GACrC,IAAIK,EACJ,OACEA,EADEn4B,EACW1N,KAAK0lC,aAAah4B,EAAU83B,GAASx2B,QAAK82B,cAE1C9lC,KAAK2lC,cAAcH,GAE3BK,EAAW72B,QAChByP,YAAUsnB,IACR,MAAMpB,EAAUxyB,YAAU4zB,EAAQzB,GACzBA,EAAKK,QAAQznC,IAAK0nC,IACvBA,EAAOl3B,SAAW42B,EAAKlqC,KACvBwqC,EAAO1D,IAAM0D,EAAOoB,UAChB,GAAGpB,EAAOoB,aAAapB,EAAOl3B,YAAYk3B,EAAOrsB,OACjD,GAAGqsB,EAAOl3B,YAAYk3B,EAAOrsB,OAC1BqsB,KAGX,SAAO3Y,MAAa0Y,EAAO,GAGjC,CAEAsB,cACE,OAAOjmC,KAAK8rB,KAAKpZ,IAAY,GAAG1S,KAAKmkC,iBACvC,iDApJWF,GAAWhjC,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAXk7B,EAAW9iC,QAAX8iC,EAAW7iC,UAAAC,WAFV,QAAM,4ICLpB,MAAM6kC,EAAS,SAKT,MAAOC,EAMXrmC,YACUsmC,EACAta,EACAuF,EACA9c,EACA8xB,GAJArmC,KAAAomC,UACApmC,KAAA8rB,OACA9rB,KAAAqxB,sBACArxB,KAAAuU,SACAvU,KAAAqmC,iBAVFrmC,KAAAgf,IAAM,iBACdhf,KAAAsmC,iBAAmB,IAAIC,UAEdvmC,KAAAwmC,iBAAmB,GAQzB,CAMH9iB,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAqB,GAAG1S,KAAKgf,MAChD,CAOAynB,UAAUrqC,GACR,OAAO4D,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO5iB,IACtC,CAQAsqC,aAAatqC,EAAgB2mC,GAC3B,OAAO/iC,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO5iB,IAAU,CAAE2mC,OAAQA,GAC1D,CAMAtf,OAAOrnB,GACL,OAAO4D,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,OAAO5iB,WAAiB,KACxD,CAMA6jB,QAAQ7jB,GACN,OAAO4D,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,OAAO5iB,YAAkB,KACzD,CAOAuqC,WAAWvqC,GACT,OAAO4D,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO5iB,YACtC,CAKAwqC,kBACExqC,EACAw7B,GAAmB,EACnBtN,EAAwB,KACxBuc,EAAqB,GACrBC,EACAC,EACAC,EAA8Bx9B,2CAERouB,EAAU53B,KAAKigB,QAAQ7jB,GAAU4D,KAAKyjB,OAAOrnB,IAErDuS,UAAU,CACtBc,KAAMA,KAEJzP,KAAKsmC,iBAAiB72B,MAAI,EAE5B8R,MAAOA,KAELvhB,KAAKqxB,oBAAoB4V,iBAAgB,GACzCjnC,KAAKomC,QAAQrrC,MAAMmrC,EAAQc,IAAmB,EAE9CE,SAAMlnC,KAAKwmC,kBACRx3B,QACCC,aAAU,IAAMjP,KAAK0jB,SAAM,EAC3ByjB,aAAWC,GACTA,EAAOp4B,QACLswB,OAAI,SAEH,EACD+H,SAAMrnC,KAAKwmC,qBAIhB73B,UAAU,CACTc,KAAMA,KAgBJ,GAdAzP,KAAKqxB,oBAAoB4V,iBAAgB,GACzCjnC,KAAKomC,QAAQkB,KAAKpB,GAEd5b,GACFA,EAAMid,aAGJT,GACF9mC,KAAKqxB,oBAAoBxG,KACvBmH,IAAiBC,QACjBzoB,YAAYs9B,KAIZD,EAAY,CACd,MAAMryB,EAAWA,IAAMxU,KAAKuU,OAAOC,SAAS,CAACqyB,IACzCE,EACF/mC,KAAKuU,OAAOwyB,cAAc,IAAK,CAAEhH,oBAAoB,IAAQyH,KAAKhzB,GAElEA,GAEJ,CAEAxU,KAAKsmC,iBAAiB72B,OACtBzP,KAAKqmC,eAAeoB,cAAY,GAEnC,GAGT,iDAtIWtB,GAAgBllC,qBAAAC,kBAAAD,qBAAA8H,cAAA9H,qBAAA+H,KAAA/H,qBAAAgI,UAAAhI,qBAAAiI,KAAA,+DAAhBi9B,EAAgBhlC,QAAhBglC,EAAgB/kC,UAAAC,WAFf,QAAM,sHCLd,MAAOqmC,EAUX5nC,YACUgsB,EACA6b,EACAtB,EACA9xB,GAHAvU,KAAA8rB,OACA9rB,KAAA2nC,eACA3nC,KAAAqmC,iBACArmC,KAAAuU,SAbVvU,KAAA4nC,qBAAuB,IACf5nC,KAAA6nC,SAAW,IAAIr5B,kBAAqB,MAC5CxO,KAAA8nC,QAAU9nC,KAAK6nC,SAASE,eAChB/nC,KAAAgoC,kBAAoB,IAAIx5B,kBAAqB,MACrDxO,KAAAioC,mBAAqBjoC,KAAKgoC,kBAAkBD,eAC5C/nC,KAAAkoC,qBAAsB,EACtBloC,KAAAmoC,oBAAqB,EACrBnoC,KAAAooC,0BAAmC,EAOhC,CAEHX,eACE,OAAOznC,KAAK2nC,aACTj1B,IAAI,IAAM1S,KAAKqoC,aAAc,KAC7B15B,UAAU3O,KAAKsoC,qBACpB,CAEAC,iCACE,OAAOvoC,KAAKwoC,oBACd,CAEQA,qBACN,OAAAxoC,KAAKyoC,mBAAmB95B,UAAU3O,KAAK0oC,iCAChC1oC,KAAK2nC,aACTj1B,IAAI,IAAM1S,KAAKyoC,mBAAoBzoC,KAAK4nC,sBACxCj5B,UAAU3O,KAAK0oC,gCACpB,CAEAC,4BAA4Bl5B,EAA2B8R,GACrD,OAAOvhB,KAAKioC,mBAAmBj5B,QAAKqV,UAAQ/jB,KAAYA,IAAQqO,UAAUc,EAAM8R,EAClF,CAEAikB,UACE,OAAOxlC,KAAKqoC,aAAa15B,UAAU3O,KAAKsoC,qBAC1C,CAEAM,qBACE,OAAO5oC,KAAKyoC,mBAAmB95B,UAAU3O,KAAK0oC,gCAChD,CAEAG,cAAcp5B,EAA2B8R,GACvC,OAAOvhB,KAAK8nC,QACT94B,QACCqV,UAAQ/jB,KAAYA,IAAK,EACzB8nB,YAEDzZ,UAAUc,EAAM8R,EACrB,CAEA5S,UAAUc,EAA2B8R,GACnC,OAAOvhB,KAAK8nC,QAAQ94B,QAAKqV,UAAQ/jB,KAAYA,IAAQqO,UAAUc,EAAM8R,EACvE,CAEAunB,WAAWjmB,GACT,OAAO7iB,KAAK8rB,KAAKgE,IAAI,+BAAgC,CAAEiT,OAAQlgB,GACjE,CAEAwlB,aACE,OAAOroC,KAAK8rB,KAAKpZ,IAAI,+BACvB,CAEAq2B,cAAcC,EAAqBC,GACjC,OAAOjpC,KAAK8rB,KAAKT,OAAO,oCAAoC2d,KAAeC,IAC7E,CAEAC,YACE9uC,EACA4kB,EACAmqB,EACAtT,EACAuT,GAAS,EACTC,EAAkB,IAElB,OAAOrpC,KAAK8rB,KAAKgE,IAAI,iCAAkC,CACrD11B,KAAMA,EACN4kB,MACAsqB,cAAeH,EACftT,SAAUA,EACVuT,OAAQA,EACRC,gBAAiBA,GAErB,CAEAE,WACEvqB,EACAmqB,EACAtT,EACAE,EACAyT,EAAU,GACVC,GAAM,EACNC,EAAO,GACPC,GAEA,OAAO3pC,KAAK8rB,KAAKzwB,KAAK,yBAA0B,CAC9C2jB,MACAsqB,cAAeH,EACftT,WACAE,WACAyT,UACAI,WAAYH,EACZJ,gBAAiBK,EACjBC,IAAKA,GAET,CAEAE,iBACE7qB,EACA6W,EACAE,EACA0T,GAAM,EACNC,EAAO,GACPC,EACAG,GAEA,MAAMC,EAAmB,CACvB/qB,MACA6W,WACAE,WACA6T,WAAYH,EACZJ,gBAAiBK,EACjBC,IAAKA,GAGP,OAAIG,IACFC,EAAYD,cAAgBA,GAGvB9pC,KAAK8rB,KAAKgE,IAAI,sCAAuCia,EAC9D,CAEQzB,qBACN,OAAQ/lC,IACNvC,KAAK6nC,SAASp4B,KAAKlN,EAAI,CAE3B,CAEQmmC,gCACN,OAAQnmC,IACNvC,KAAKgoC,kBAAkBv4B,KAAKlN,EAAI,CAEpC,CAEAkmC,mBACE,OAAOzoC,KAAK8rB,KAAKpZ,IAAY,uCAC/B,CAEAs3B,2BAA2B9B,GACzB,YAA4BtO,IAAxBsO,IACFloC,KAAKkoC,oBAAsBA,GAEtBloC,KAAKkoC,mBACd,CAEA+B,eAAe9B,GACb,YAA2BvO,IAAvBuO,IACFnoC,KAAKmoC,mBAAqBA,GAErBnoC,KAAKmoC,kBACd,CAEA+B,gCAAgC9B,GAC9B,YAAkCxO,IAA9BwO,IACFpoC,KAAKooC,0BAA4BA,GAE5BpoC,KAAKooC,yBACd,CAEA+B,oBAAoBC,GAClBpqC,KAAKwlC,UACLxlC,KAAK4oC,qBACL5oC,KAAKqmC,eAAeb,UAChB4E,EAAaloC,SAAS,aACxBlC,KAAKuU,OAAOwyB,cAAc,QAAS,CAAEhH,oBAAoB,IAAQyH,KAAK,KACpExnC,KAAKuU,OAAOC,SAAS,CAAC41B,GAAa,GAGrCpqC,KAAKuU,OAAOwyB,cAAc,IAAK,CAAEhH,oBAAoB,IAAQyH,KAAK,KAChExnC,KAAKuU,OAAOC,SAAS,CAAC41B,GAAa,EAGzC,iDA1LW1C,GAAmBzmC,qBAAAC,cAAAD,qBAAA8H,KAAA9H,qBAAA+H,KAAA/H,qBAAAgI,UAAA,+DAAnBy+B,EAAmBvmC,QAAnBumC,EAAmBtmC,UAAAC,WAFlB,QAAM,+FCOd,MAAOgpC,UAAmBvL,IAsC9Bh/B,YAAoBgsB,GAClBzd,QADkBrO,KAAA8rB,OArCpB9rB,KAAA0jC,QAAU,kBACV1jC,KAAAsqC,UAAY,qBAEZtqC,KAAA0R,cAAgB,CACd,CACEpR,MAAO,KACPyS,KAAMvJ,kCAER,CACElJ,MAAO,KACPyS,KAAMvJ,iEAER,CACElJ,MAAO,OACPyS,KAAMvJ,qCAIVxJ,KAAAsjB,QAAmC,CACjC,CACEhjB,MAAOuL,IAAeC,KACtB0X,MAAOha,kBACP+gC,UAAU,GAEZ,CACEjqC,MAAOuL,IAAeE,IACtByX,MAAOha,0BACP+gC,UAAU,IAGdvqC,KAAA4R,UAAY,CACV44B,eAAgB,CAAC,iBAAkB,aAAc,QACjDC,eAAgB,CAAC,iBAAkB,eAAgB,UACnDC,YAAa,CAAC,cAAe,aAAc,QAC3CC,WAAY,CAAC,aAAc,YAAa,MAAO,eAAgB,iBAKjE,CAEAjnB,KAAKgG,GACH,OAAO1pB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK0jC,iBAAkB,CAC7ClkB,OAAQ,CAAEnL,WAAYqV,IAE1B,CAEAhX,IAAIgX,EAAmBkhB,GACrB,OAAO5qC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK0jC,kBAAkBha,KAAakhB,IAC9D,CAEA3lB,OAAOnW,GACL,OAAO9O,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK0jC,iBAAkB50B,EAAK,CACnDqxB,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjD4B,QAAS,YAEb,CAEA54B,OAAO2hB,EAAmBU,EAAYtb,GACpC,OAAO9O,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK0jC,kBAAkBha,KAAaU,IAAMtb,EAAK,CACrEqxB,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjD4B,QAAS,YAEb,CAEAtV,OAAO3B,EAAmBkhB,GACxB,OAAO5qC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK0jC,kBAAkBha,KAAakhB,IAAY,CACzEzK,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjD4B,QAAS,YAEb,CAEAxhB,eACE,OAAOnf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK0jC,kBAAmB,CAC9CvD,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,KAErD,CAEA5a,MAAMzO,EAAiBm1B,GACrB,OAAKn1B,EAGE1V,KAAK8rB,KAAKpZ,IAAe,GAAG1S,KAAKsqC,mBAAmB50B,cAAoBm1B,MAAU,EAFhFC,cAAWthC,+CAGtB,CAEAuhC,QACE,OAAO/qC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKsqC,kBAC/B,CAEAlrB,cACE,OAAOpf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKsqC,+BAC/B,CAEAp7B,iBACE,OAAOlP,KAAK8rB,KAAKpZ,IAAkB,GAAG1S,KAAK0jC,kBAAmB,CAC5DvD,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjDvf,OAAQ,CAAE8B,MAAM,IAEpB,iDAnGW+oB,GAAUppC,qBAAAC,cAAA,+DAAVmpC,EAAUlpC,QAAVkpC,EAAUjpC,UAAAC,WAFT,QAAM,mFCFd,MAAO2pC,EAQXlrC,YAAoBgsB,GAAA9rB,KAAA8rB,OAPZ9rB,KAAAgf,IAAM,sBAEdhf,KAAAirC,gBAAkB,CAChBC,eAAgB1hC,0EAChB2hC,eAAgB3hC,kEAGqB,CAEvCkF,SACE,OAAO1O,KAAK8rB,KAAKpZ,IAAwB,GAAG1S,KAAKgf,aACnD,CAEAosB,WAAW18B,EAA4BmY,GACrC,OAAO1U,UAAQ0U,EAAWwkB,GAAYl5B,QAAMzD,EAAOmY,SAAU,GAAGwkB,eAClE,CAEAC,0BACE58B,EACAmY,GAEA,QAAKnY,IAGAA,EAAOuB,WAGPjQ,KAAKorC,WAAW18B,EAAQmY,IACpB7mB,KAAKirC,gBAAgBE,eAHrBnrC,KAAKirC,gBAAgBC,eAMhC,CAEAK,UACE,OAAOvrC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,eAC/B,iDApCWgsB,GAAmB/pC,qBAAAC,cAAA,+DAAnB8pC,EAAmB7pC,QAAnB6pC,EAAmB5pC,UAAAC,WAFlB,QAAM,oDCPd,MAAOi/B,EAIXxgC,YAAY0rC,GACVxrC,KAAK6lC,WAAa2F,EAAIx8B,QACpB9R,OAAKm7B,IACHr4B,KAAKyrC,MAAQvjC,OAAOmwB,EAAS8H,SAASztB,IAAI,kBACnC2lB,EAASl9B,MAAWk9B,IAGjC,2GCAK,IAAMqT,EAAN,MAAMA,GAGX5rC,YAAoBgsB,EAA0B6f,GAA1B3rC,KAAA8rB,OAA0B9rB,KAAA2rC,0BAF9C3rC,KAAA0jC,QAAU,UAEuF,CAEjGze,OAAOnG,GACL,OAAO9e,KAAK8rB,KAAKzwB,KAAK2E,KAAK0jC,QAAS5kB,EAAM,CAAE6hB,QAAS,YACvD,CAEA54B,OAAO+W,GACL,IAAI1kB,EACJ,OAAI0kB,EAAK8sB,eAAe,YACtBxxC,EAAO0kB,EAAK+sB,eACL/sB,EAAK+sB,UAEZzxC,EAAO0kB,EAAKA,YACLA,EAAKA,MAEP9e,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK0jC,WAAWoI,mBAAmB1xC,KAAS0kB,EAAM,CACxE6hB,QAAS,YAEb,CAEAtV,OAAOjxB,GACL,OAAO4F,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK0jC,WAAWtpC,IAAQ,CAAEumC,QAAS,YAChE,CAEAjuB,IAAIuuB,GACF,OAAOjhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK0jC,WAAWzC,IAC1C,CAEA8K,UACE,OAAO/rC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK0jC,qBAC/B,CAEAsI,iBAAiB/K,GACf,OAAOjhC,KAAK8rB,KAAKpZ,IAA6B,GAAG1S,KAAK0jC,WAAWzC,mBAA0BjyB,QAEzF9R,OAAK2L,GACHA,EAAO3L,IAAKytB,GACV1Y,OAAOg6B,OAAOthB,EAAO3qB,KAAK2rC,wBAAwBO,gBAAgBvhB,EAAMvwB,SAIhF,CAEA4pC,UACE,OAAOhkC,KAAK8rB,KAAKpZ,IAAI,MAAM1S,KAAK0jC,eAClC,CAEAhgB,KAAK9pB,EAAkB,IACrB,MAAMuyC,EAAWvyC,EAAMgD,KAAK,KAC5B,OAAOoD,KAAK8rB,KACTpZ,IAAI,GAAG1S,KAAK0jC,iBAAiByI,KAC7BC,YACA5E,KAAM7d,GACEA,EAEb,iDA1DW+hB,IAAWzqC,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAX2iC,GAAWvqC,QAAXuqC,GAAWtqC,UAAAC,WAFV,QAAM,GAEPqqC,KAAWvf,cAAA,CAJvBC,O,mCAO2BC,aAA6CggB,OAH5DX,yGCaP,MAAOY,EAeXxsC,YAAoBgsB,GAAA9rB,KAAA8rB,OAbpB9rB,KAAAusC,UAAY,IACHvsC,KAAAwsC,mBAAqB,CAC5BzxC,MAAOsP,MAASC,OAAS,KACzBtP,IAAKqP,MAASC,OACdH,KAAM,IAEAnK,KAAA8gC,QAAU,iBACV9gC,KAAAysC,YAAc,CACpBC,aAAc,0CACdC,WAAY,yCAEN3sC,KAAA4sC,SAAsC,EAEP,CAEvC1iB,cACMlqB,KAAK6sC,2BACP7sC,KAAK6sC,0BAA0B3iB,aAEnC,CAGA4iB,kBAAkBttB,GAChB,OAAOxf,KAAK8rB,KAAKpZ,IAAS,GAAG1S,KAAK8gC,eAAgB,CAAEthB,UACtD,CAGAutB,uBAAuBvtB,GACrB,OAAOxf,KAAK8rB,KAAKpZ,IAAS,GAAG1S,KAAK8gC,gCAAiC,CAAEthB,UACvE,CAEAwtB,yBAAyBC,EAA8BC,GACrDltC,KAAKmtC,oBAAoBntC,KAAKysC,YAAYC,aAAcO,EAAIC,EAC9D,CAEAE,4BACEptC,KAAKqtC,eAAertC,KAAKysC,YAAYC,aACvC,CAEAY,uBAAuBL,EAA8BC,GACnDltC,KAAKmtC,oBAAoBntC,KAAKysC,YAAYE,WAAYM,EAAIC,EAC5D,CAEAK,0BACEvtC,KAAKqtC,eAAertC,KAAKysC,YAAYE,WACvC,CAEAa,UAAUC,GAAwB,EAAOjuB,EAAS,IAChDA,SAAOkuB,eAAoBD,EACpBztC,KAAK8rB,KAAKpZ,IAAyB1S,KAAK8gC,QAAS,CAAEthB,UAC5D,CAEAmuB,YAAYnuB,EAAS,IACnB,OAAOxf,KAAK8rB,KAAKpZ,IAA2B,GAAG1S,KAAK8gC,mBAAoB,CAAEthB,UAC5E,CAEAouB,SACEznC,EAAwC,OAExC,OAAOnG,KAAK8rB,KAAKpZ,IAAuC,GAAG1S,KAAK8gC,iBAAiB9xB,QAC/E9R,OAAK2wC,IACC,CAAC,WAAY,YAAY3rC,SAASiE,IACpC0nC,EAAMC,OAAO5wC,IAAKi6B,IAChBA,EAAM0W,MAAQ1W,EAAM0W,MAAMxpB,OAAQ0f,GAASA,EAAK59B,OAASA,EAAI,GAG1D0nC,IAGb,CAEAE,WAAWC,GACT,OAAOhuC,KAAK8rB,KAAKzwB,KAAa,GAAG2E,KAAK8gC,kBAAmBkN,EAAS,CAAErN,QAAS,YAC/E,CAEAsN,cAAcC,GACZ,OAAOluC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,mBAAmBoN,IAAa,CAAEvN,QAAS,YAC7E,CAEAwN,iBACEC,GAEA,MAAMpvB,EAAM,GAAGhf,KAAK8gC,8BAClBsN,GAAgBA,EAAahkB,GAAKgkB,EAAahkB,GAAK,SAEtD,OAAOpqB,KAAK8rB,KAAKpZ,IAAgCsM,EACnD,CAEAmuB,oBAAoBnuB,EAAaiuB,EAA8BC,GAC7D,MAAMmB,EAAUruC,KAAK4sC,SAAS5tB,QACd4a,IAAZyU,EACFruC,KAAK8rB,KAAKpZ,IAAIsM,GAAKrQ,UAChBpM,IACCvC,KAAK4sC,SAAS5tB,GAAOhf,KAAKsuC,iBAAiB/rC,GAC3CvC,KAAKmtC,oBAAoBnuB,EAAKiuB,EAAIC,EAAM,EAEzCvjB,IACqB,MAAhBA,EAAKjb,SACP1O,KAAK4sC,SAAS5tB,GAAO,MAIN,KAAZqvB,EACTpB,EAAGoB,GAECnB,GACFA,GAGN,CAGAG,eAAeruB,GACbhf,KAAK4sC,SAAS5tB,GAAO,EACvB,CAEQsvB,iBAAiB/rC,GACvB,OAAOA,EAAKjC,OAASiC,EAAKgsC,UAAY,EACxC,CAEAC,kBAAkBC,GAChB,OAAOzuC,KAAK+sC,uBAAuB,CAAEvtB,OAAQivB,IAASz/B,QACpD9R,OAAKrB,GAA8BA,IAAM,EACzC2oB,cAAW,OAAMpB,MAAG,CAAEvnB,OAAQ,MAElC,CAEA6yC,kBAAkBnsC,GAChB,MAAMjC,EAAgBwH,WAAWvF,GAAQ,IAEzC,OAAOosC,SAASruC,GAASA,EAAQ,IACnC,CAEAsuC,oBAAoB/kC,EAAmBglC,EAAcC,EAAqBC,GACxE,OAAA/uC,KAAKstC,uBAAuB,KACtBttC,KAAK6sC,2BACP7sC,KAAK6sC,0BAA0B3iB,cAEjClqB,KAAK6sC,6BAA4B3F,SAAM,EAAGlnC,KAAKusC,WAC5Cv9B,QACCC,aAAU,KACRpF,EAAe7J,KAAKgvC,gBAAgBnlC,GACpC,MAAM+nB,EAAc,GACpB,UAAWqd,KAAaJ,EACtB,GAAIA,EAAQjD,eAAeqD,GAAY,CACrC,MAAMR,EAAQI,EAAQI,GACtBrd,EAAY11B,KACV8D,KAAK8sC,kBAAkB,CACrBttB,OAAQssB,mBAAmB2C,GAC3B1zC,MAAO8O,EAAa9O,MACpBC,IAAK6O,EAAa7O,IAClBmP,KAAMN,EAAaM,OAClB6E,QAAK9R,OAAKqF,KAAiB0sC,YAAW1sC,WAE7C,CAEF,SAAO6d,YAASwR,EAAW,IAG9BjjB,UAAWugC,IACVA,EAAQloC,QAAQ,EAAGioC,YAAW1sC,WACxBA,EAAK1G,OAAOT,OACd0zC,EAAeG,GAAa1sC,EAAK1G,OAAO,GAAGgN,OAE3CimC,EAAeG,GAAa,QAGErV,IAA9BkV,EAAeG,IACe,KAA9BH,EAAeG,IACfF,GAEAD,EAAeG,GAAWjoC,QAASmoC,IAC7BC,MAAMtnC,WAAWqnC,EAAW,OAC9BA,EAAW,GAAK,MAEnB,EAEJ,EACF,GAEEL,CACT,CAEQE,gBAAgBnlC,GACtB,IAAIwlC,EAAgB,GAChBjlC,EAAaP,EAAa7O,IAAS6O,EAAa9O,MAGpDs0C,SAAgB,CACdt0C,MAHmBsP,MAASC,OAASF,EAIrCpP,IAHsBqP,MAASC,OAI/BH,KAAMN,EAAaM,MAEdklC,CACT,CAEAC,oBAAoB9vB,GAClB,OAAOxf,KAAK8rB,KAAKpZ,IAAS,GAAG1S,KAAK8gC,gCAAiC,CAAEthB,UACvE,CAEA+vB,8BAA8B/vB,GAC5B,OAAOxf,KAAK8rB,KAAKpZ,IAAS,GAAG1S,KAAK8gC,eAAgB,CAAEthB,UACtD,CAEAgwB,2BACEV,EACAW,EACAC,EACAC,EACAC,EACAC,GAEA,OAAO,IAAIC,aAAYC,IACrB/vC,KAAKstC,uBAAuB,KACtBttC,KAAK6sC,2BACP7sC,KAAK6sC,0BAA0B3iB,cAGjClqB,KAAK6sC,6BAA4B3F,SAAM,EAAGlnC,KAAKusC,WAAW59B,UAAU,KAClE,IAAIqhC,EAAkB,GAClBC,EAAuB,GAE3Bh+B,OAAOqQ,QAAQqtB,GAAqB3oC,QAAQ,EAAEub,EAAK2tB,MACjD,UAAWjB,KAAaU,EAAoBptB,GAAKssB,QAC/C,GACEc,EAAoBptB,GAAKssB,QAAQjD,eAAeqD,IAChDW,EAAqB1tC,SAAS+sC,GAC9B,CACA,MAAMR,EAAQkB,EAAoBptB,GAAKssB,QAAQI,GACzCl0C,EAAQiF,KAAKgvC,gBAAgBW,EAAoBptB,GAAK1Y,cAAc9O,MACpEC,EAAMgF,KAAKgvC,gBAAgBW,EAAoBptB,GAAK1Y,cAAc7O,IAClEmP,GAAOnK,KAAKgvC,gBAAgBW,EAAoBptB,GAAK1Y,cAAcM,KAEzE,GAAIulC,EAAkBxtC,SAAS+sC,GAAY,CACzC,MAAMkB,GAAUnwC,KAAKuvC,8BAA8B,CACjD/vB,OAAQssB,mBAAmB2C,GAC3B1zC,QACAC,MACAmP,UAEF6lC,EAAS9zC,KAAKi0C,IACdF,EAAW/zC,KAAK+yC,EAClB,KAAO,CACL,MAAMkB,GAAUnwC,KAAKsvC,oBAAoB,CACvC9vB,OAAQssB,mBAAmB2C,GAC3B1zC,QACAC,MACAmP,UAEF6lC,EAAS9zC,KAAKi0C,IACdF,EAAW/zC,KAAK+yC,EAClB,CACF,IAIJW,EAAuBC,KAEvBzvB,YAAS4vB,GAAUrhC,UAChByhC,IACC,QAASn0C,EAAI,EAAGA,EAAIm0C,EAAUh1C,OAAQa,IAAK,CACzC,MAAMsG,EAAO6tC,EAAUn0C,GACjBgzC,EAAYgB,EAAWh0C,GACzBsG,EAAK1G,OAAOT,SACVq0C,EAAavtC,SAAS+sC,GACxBH,EAAeG,GAAa1sC,EAAK1G,OAEjCizC,EAAeG,GAAa1sC,EAAK1G,OAAOqB,IACrCrB,GAA2BA,EAAOyE,OAI3C,CACAyvC,EAAStgC,KAAKq/B,GACdiB,EAAS3qB,UAAQ,EAElB7D,IACCwuB,EAASxuB,MAAMA,EAAK,EACrB,EAEJ,EACF,EAEL,iDA7RW+qB,GAAiBrrC,qBAAAC,cAAA,+DAAjBorC,EAAiBnrC,QAAjBmrC,EAAiBlrC,UAAAC,WAFhB,QAAM,qJCTb,IAAMgvC,EAAN,MAAMA,WAAmBvR,IAC9Bh/B,YAAoBgsB,EAA0B6f,GAC5Ct9B,QADkBrO,KAAA8rB,OAA0B9rB,KAAA2rC,yBAE9C,CAEA2E,UAAUxxB,GACR,OAAuD,IAAhD3M,YAAU2M,EAAKyxB,qBAAsB,SAAkBzxB,EAAK0xB,UAAUtuC,SAAS,IACxF,CAEA+iB,OAAOwrB,GACL,OAAOzwC,KAAK8rB,KAAKzwB,KAAK,kBAAmBo1C,EAAK,CAAE9P,QAAS,YAC3D,CAEAtV,OAAOqlB,GACL,OAAO1wC,KAAK8rB,KAAKT,OAAO,mBAAmBqlB,EAAUC,oBAAqB,CACxEhQ,QAAS,YAEb,CAEA54B,OAAO2oC,EAAsBD,GAC3B,OAAOzwC,KAAK8rB,KAAKgE,IAAI,mBAAmB4gB,EAAUC,oBAAqBF,EAAK,CAC1E9P,QAAS,YAEb,CAEAjuB,IAAIg+B,GACF,OAAO1wC,KAAK8rB,KAAKpZ,IAAI,mBAAmBg+B,EAAUC,oBACpD,CAEAjtB,KAAKlE,GACH,OAAOxf,KAAK8rB,KACTpZ,IAAe,kBAAmB,CACjC8M,OAAQA,EACR2gB,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjD4B,QAAS,aAEV3xB,QACC9R,OAAKm7B,GACIA,EAASl9B,KAAQ+B,IAAK4hB,IAC3BA,EAAKxe,MAAMpD,IAAK0zC,IACTA,EAAMC,eAGXD,EAAMC,cAAc3zC,IAAK4zC,GACvB7+B,OAAOg6B,OAAO6E,EAAQ9wC,KAAK2rC,wBAAwBO,gBAAgB4E,EAAO12C,QAErEw2C,IAET9xB,EAAKqhB,QAAa9H,EAAS8H,QACpBrhB,KAIjB,CAEAiyB,KAAKL,EAAsBD,GACzB,OAAOzwC,KAAK8rB,KAAKzwB,KAAK,mBAAmBq1C,EAAUC,yBAA0BF,EAAK,CAChF9P,QAAS,YAEb,CAEAqQ,QAAQN,GACN,OAAO1wC,KAAK8rB,KAAKzwB,KAAK,mBAAmBq1C,EAAUC,4BAA6B,KAAM,CACpFhQ,QAAS,YAEb,CAEAsQ,kBACE,OAAOjxC,KAAK8rB,KAAKpZ,IAAI,mCACvB,CAEAw+B,qBACE,OAAOlxC,KAAK8rB,KAAKpZ,IAAY,uCAC/B,CAEA4vB,eACEoO,EACavO,EACbgP,GAEA,MAAMhB,EAAU,CACdiB,cAAejP,EACfgP,oBAAqBA,GAEvB,OAAOnxC,KAAK8rB,KAAKzwB,KAAK,mBAAmBq1C,EAAUC,yBAA0BR,EAAS,CACpFxP,QAAS,YAEb,CAEA0Q,eAAeX,EAAsBvO,EAAmCmP,GACtE,MAAMnB,EAAU,CACdoB,cAAeD,GAEjB,OAAOtxC,KAAK8rB,KAAKgE,IACf,mBAAmB4gB,EAAUC,0BAA0BxO,IACvDgO,EACA,CACExP,QAAS,YAGf,CAEA6Q,gBAAgBd,EAAsBvO,EAAmCsP,GACvE,MAAMtB,EAAU,CACduB,aAAcD,GAEhB,OAAOzxC,KAAK8rB,KAAKgE,IACf,mBAAmB4gB,EAAUC,0BAA0BxO,IACvDgO,EACA,CACExP,QAAS,YAGf,CAEAgR,iBAAiBjB,EAAsBvO,GACrC,OAAOniC,KAAK8rB,KAAKzwB,KACf,mBAAmBq1C,EAAUC,0BAA0BxO,aACvD,KACA,CAAExB,QAAS,YAEf,CAEAiR,cAAclB,EAAsBvO,EAAsBgO,GACxD,OAAOnwC,KAAK8rB,KAAKzwB,KACf,mBAAmBq1C,EAAUC,0BAA0BxO,UACvDgO,EACA,CAAExP,QAAS,YAEf,CAEA4B,eAAemO,EAAsBvO,GACnC,OAAOniC,KAAK8rB,KAAKT,OAAO,mBAAmBqlB,EAAUC,0BAA0BxO,IAAgB,CAC7FxB,QAAS,YAEb,CAEAkR,YACE,OAAO7xC,KAAK8rB,KAAKpZ,IAAI,yBACvB,CAEAo/B,gBAAgBhzB,EAAc6iB,GAC5B,MAAMwO,EAAU,CACdxO,UAAWA,GAEb,OAAO3hC,KAAK8rB,KAAKzwB,KAAK,kBAAkByjB,cAAkBqxB,EAAS,CAAExP,QAAS,YAChF,CAEAoR,eAAejzB,GACb,OAAO9e,KAAK8rB,KAAKpZ,IAAI,kBAAkBoM,eACzC,CAEAkzB,gBAAgBlzB,EAAc6iB,GAC5B,OAAO3hC,KAAK8rB,KAAKT,OAAO,kBAAkBvM,eAAkB6iB,IAAa,CACvEhB,QAAS,YAEb,CAEAsR,UAAUvB,EAAsBrJ,GAC9B,OAAOrnC,KAAK8rB,KAAKzwB,KACf,mBAAmBq1C,EAAUC,+BAC7B,CAAEtJ,MAAOA,GACT,CAAE1G,QAAS,YAEf,CAEAuR,WAAWjR,GACT,OAAOjhC,KAAK8rB,KAAKzwB,KAAK,0CAA0C4lC,IAAY,KAAM,CAChFN,QAAS,YAEb,CAEAwR,aAAazB,EAAmC0B,GAC9C,OAAOpyC,KAAK8rB,KAAKzwB,KACf,yBAAyBq1C,EAAUC,4BACnC,CAAE0B,eAAgBD,GAClB,CAAEzR,QAAS,YAEf,CAEA2R,YAAY5B,EAAsBxL,GAAQ,GACxC,OAAOllC,KAAK8rB,KAAKT,OACf,yBAAyBqlB,EAAUC,4BAA4BzL,IAC/D,CAAEvE,QAAS,YAEf,iDAzLW0P,IAAUpvC,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAVsnC,GAAUlvC,QAAVkvC,GAAUjvC,UAAAC,WAFT,QAAM,IA6ElB8qB,gBAAA,IAEGomB,WAAA,EAAAC,MAAW,E,4EADDC,IAASlzC,OAAAmzC,WAAA,E,iFAatBvmB,cAAA,IAA4DomB,WAAA,EAAAC,MAAW,E,4EAA7CC,IAASlzC,iBAAA,E,iFAanC4sB,cAAA,IAA6DomB,WAAA,EAAAC,MAAW,E,4EAA7CC,IAASlzC,OAAAmzC,WAAA,E,kFAsEpCvmB,cAAA,IAAoComB,WAAA,EAAAC,MAAW,E,4EAAvBC,IAASlzC,UAAA,E,4EA5KtB8wC,KAAUlkB,cAAA,CAJtBC,O,mCAK2BC,aAA6CggB,OAD5DgE,qJCEN,IAAMsC,EAAN,MAAMA,WAAyB7T,IAWpCh/B,YAAoBgsB,EAA0B8mB,GAC5CvkC,QADkBrO,KAAA8rB,OAA0B9rB,KAAA4yC,mBAVtC5yC,KAAAgf,IAAM,iBACNhf,KAAA6yC,eAAiB,IAAIrkC,kBAA0B,IAC/CxO,KAAA8yC,uBAAyB,IAAItkC,kBAAwB,GACrDxO,KAAA+yC,yBAA2B,IAAIvkC,kBAAwB,GACvDxO,KAAAgzC,yBAA2B,IAAIxkC,kBAAwB,GAC/DxO,KAAAizC,SAAWjzC,KAAK6yC,eAAe9K,eAC/B/nC,KAAAkzC,iBAAmBlzC,KAAK8yC,uBAAuB/K,eAC/C/nC,KAAAmzC,mBAAqBnzC,KAAK+yC,yBAAyBhL,eACnD/nC,KAAAozC,mBAAqBpzC,KAAKgzC,yBAAyBjL,cAInD,CAEAsL,2BACE,OAAOrzC,KAAK0jB,MAAK,GAAM1U,QACrB9R,OAAKo2C,IACH,IAAIC,EAAkB,EAClBC,EAAoB,EACpBC,EAAoB,EACxB,MAAMC,EAAqBJ,EAAQp2C,IAAKy2C,GAAW3zC,KAAK4zC,gBAAgBD,IACxED,EAAmB1sC,QAAS2sC,IAC1BJ,GAAmBI,GAAQE,aAAe,EAC1CL,GAAqBG,GAAQG,aAAe,IAE9CL,EAAoBzzC,KAAK+zC,2BAA2BR,EAAiBC,GACrExzC,KAAK6yC,eAAepjC,KAAKikC,GACzB1zC,KAAK8yC,uBAAuBrjC,KAAK8jC,GACjCvzC,KAAK+yC,yBAAyBtjC,KAAK+jC,GACnCxzC,KAAKgzC,yBAAyBvjC,KAAKgkC,EAAiB,GAG1D,CAEAG,gBAAgBD,GACd,MAAMK,EAAgBL,GAAQM,cAAcC,UAAY,EAClDC,EAAmBR,GAAQM,cAAcG,aAAe,EACxDN,EAAcH,EAAOU,QAAW,aAAcC,aAAkB,EAChET,EAAcF,EAAOU,QAAW,aAAcR,aAAkB,EACtE,MAAO,IACFF,EACHG,cACAD,cACAU,WAAYv0C,KAAKw0C,mBAAmBV,EAAaE,GACjDS,aAAcz0C,KAAK00C,qBAAqBb,EAAaM,GAEzD,CAEAK,mBAAmBV,EAAqBE,GACtC,OAAOA,EAAgB,EAAIF,EAAcE,OAAgBpa,CAC3D,CAEA8a,qBAAqBb,EAAqBM,GACxC,OAAOA,EAAmB,EAAIN,EAAcM,OAAmBva,CACjE,CAEAma,2BAA2BR,EAAyBC,GAClD,OAAOD,EAAkB,EAAIC,EAAoBD,EAAkB,CACrE,CAMA7vB,KAAKixB,GAAiB,EAAOzT,EAAc,IACzC,OAAOlhC,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAO6gB,OAAO,QAASsU,EAAMrvB,YAClC4b,IACF1hB,EAASA,EAAO6gB,OAAO,MAAOa,IAEzBlhC,KAAK8rB,KAAKpZ,IAAI1S,KAAKgf,IAAK,CAC7BmhB,QAAS,CAAEC,OAAQpgC,KAAK++B,sBAAsB,EAAG,IACjDvf,OAAQA,KAGd,CAEA9M,IAAIihC,GACF,OAAO3zC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO20B,IAAU,CAAEn0B,OAAQA,IAE5D,CAEAo1B,gCACE,OAAO50C,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,MAAM1S,KAAKgf,8BAA+B,CAAEQ,OAAQA,IAE7E,CAEAyF,OACE0uB,EACAzS,EACA2T,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,IAEA,OAAOx1C,KAAK4yC,iBAAiBzC,QAAS3wB,KACpC,MAAMi2B,GAAe,CACnB9B,SACAzS,MACA2T,YACAa,aAAcn2C,OAAOw1C,GACrBC,YACAC,6BACAC,iBAAkB31C,OAAO21C,GACzBC,kBACAC,SACAC,KAAMA,GACNM,cAAeL,GACfM,WAAYL,GACZC,YAAaA,GACbK,YAAar2B,GAAO9M,IAAI,gBAG1B,OAAIoiC,IACFW,GAAaK,iBAAsBhB,GAG9B90C,KAAK8rB,KAAKzwB,KAAK2E,KAAKgf,IAAK,KAAM,CACpCQ,OAAQ,IAAIimB,aAAW,CAAEsQ,WAAYN,MACtC,EAEL,CAEA1tC,OACE4rC,EACAqC,EACA9U,EACA+U,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACApB,GACAC,GACAC,GACAC,GACAkB,IAEA,OAAO12C,KAAK4yC,iBAAiBzC,QAAS3wB,KACpCA,GAASA,GAAOm3B,UAAU,CACxBC,UAAWZ,EACX9U,IAAKA,EACL2V,iBAAkBZ,EAClBf,iBAAkB31C,OAAO22C,GACzBf,gBAAiBgB,EACjBf,OAAQgB,EACRU,WAAYT,EACZU,iBAAkBT,EAClBU,cAAeT,EACfvB,UAAWwB,GACXvB,2BAA4BwB,GAC5BpB,KAAMA,GACNM,cAAeL,GACfM,WAAYL,GACZC,YAAaA,GACbkB,UAAWA,KAEN12C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO20B,IAAU,KAAM,CAAEn0B,OAAQA,MAElE,CAEA6L,OAAOsoB,GACL,OAAO3zC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAO20B,IAAU,CAAEn0B,OAAQA,IAE/D,CAOAuQ,OAAO4jB,GACL,OAAO3zC,KAAK0S,IAAIihC,GAAQ3kC,QACtBuyB,UAAM,IAAI,EACV/c,cAAYjD,IACNpP,eAAaoP,EAAMwL,iBACrBxL,EAAMwL,kBAAc,EAEfd,OAAa,KAG1B,CAEAgrB,YAAYC,GACV,OAAIA,EAAWC,4BAAiC,EACvC/5C,KAAK2+B,MAAkD,QAA5Cmb,EAAWC,6BAGxBD,EAAWjC,4BAAiC,CACrD,CAEAmC,oBAAoBrU,GAClB,MAAMsU,EAAU,IACXtU,GAEL,OAAO/iC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,0BAA2Bq4B,EAAS,CAAE73B,OAAQA,IAE/E,CAEA83B,cAAc3D,GACZ,OAAO3zC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO20B,kBAAwB,CAAEn0B,OAAQA,IAE1E,CAEA+3B,iBAAiB5D,GACf,OAAO3zC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO20B,qBAA2B,CAAEn0B,OAAQA,IAE7E,CAEAg4B,sBACE,OAAOx3C,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,0BAA2B,CAAEQ,OAAQA,IAEtE,CAEAi4B,aAAaC,EAAqBhB,EAAmBiB,EAAeC,GAClE,OAAO53C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBe,YAAaA,EACbhB,UAAWA,EACXiB,MAAOA,EACPC,OAAQA,IAEH53C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,gBAAiB,KAAM,CAAEQ,OAAQA,KAElE,CAEAq4B,aAAaH,EAAqBC,EAAeC,GAC/C,OAAO53C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBe,YAAaA,EACbC,MAAOA,EACPC,OAAQA,IAEH53C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,gBAAiB,CAAEQ,OAAQA,KAE5D,CACAs4B,sBAAsBC,EAAaC,GACjC,OAAOh4C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO+4B,cAAiBC,EACvD,CACAC,mBAAmB/W,GACjB,OAAOlhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAOkiB,cACtC,CACAgX,2BACE,OAAOl4C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,gBAC/B,CAEAm5B,iBAAiBT,GACf,OAAO13C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBe,YAAaA,IAER13C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,mBAAoB,CAAEQ,OAAQA,KAE/D,CAEA44B,gBAAgBV,EAAqBtJ,EAAsBuJ,GACzD,OAAO33C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBe,YAAaA,EACbtJ,aAAcA,EACduJ,MAAOA,IAEF33C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,mBAAoB,KAAM,CAAEQ,OAAQA,KAErE,CAEA64B,mBAAmBX,EAAqBY,GACtC,OAAOt4C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBe,YAAaA,EACbY,gBAAiBA,IAEZt4C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,mBAAoB,CAAEQ,YAE1D,iDAtSWmzB,IAAgB1xC,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAhB4pC,GAAgBxxC,QAAhBwxC,GAAgBvxC,UAAAC,WAFf,QAAM,GAEPsxC,KAAgBxmB,cAAA,CAJ5BC,O,mCAe2BC,aAAsCksB,OAXrD5F,+HCJN,IAAM4F,EAAN,MAAMA,GAOXz4C,YAAoBgsB,GAAA9rB,KAAA8rB,OANZ9rB,KAAAgf,IAAM,iBACNhf,KAAAw4C,QAAU,IAAIhqC,kBAA6B,IACnDxO,KAAAy4C,SAAWz4C,KAAKw4C,QAAQzQ,eAChB/nC,KAAA04C,eAAiB,IAAIlqC,kBAA2B,MACxDxO,KAAA24C,gBAAkB34C,KAAK04C,eAAe3Q,cAEC,CAEvCrkB,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAiB1S,KAAKgf,KAAKhQ,QAC1CswB,OAAKkZ,IACHx4C,KAAKw4C,QAAQ/oC,KAAK+oC,GAClB,MAAME,EAAiB14C,KAAK04C,eAAe/nC,YAGvCwB,YAAUumC,SAAmB9e,IAAcznB,SAAOqmC,EAAS,CAAEpuB,GAAIsuB,EAAetuB,OAClFpqB,KAAK44C,oBAAoBJ,EAAO,GAIxC,CAEA9lC,IAAI0X,GACF,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAOoL,IACtC,CAEAyuB,aAAaC,GACX94C,KAAK04C,eAAejpC,KAAKqpC,EAC3B,CAEQF,oBAAoBJ,GAC1B,GAAuB,IAAnBA,EAAQp9C,OACV,OAAO,KAGT,UAAW09C,KAAUN,EACnB,GAAIM,EAAO3V,QACT,OAAAnjC,KAAK64C,aAAaC,GACXA,EAIX,OAAA94C,KAAK64C,aAAaL,EAAQ,IACnBA,EAAQ,EACjB,CAEArI,QAAQ1gC,GACN,OAAOzP,KAAK04C,eAAe1pC,QACzByP,YAAUq6B,GAER3mC,YAAU2mC,GACN94C,KAAK0jB,OAAO1U,QACVyP,YAAU+5B,GACRrmC,YAAUqmC,IAAO,EAAI1N,cAAW,yBAA2B9qC,KAAK24C,mBACjE,EAEHv1B,MAAG01B,KAAO,EAEhBC,QAAK,IAAC,EACNt6B,YAAUq6B,IACR,IAAIt5B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAO6gB,OAAO,cAAeyY,EAAO1uB,IACtC3a,EAAK+P,EAAM,GAGxB,CAEAw5B,mBAAmBC,EAAoBC,EAAwBC,GAC7D,OAAOn5C,KAAKmwC,QAAS3wB,IACnBA,EAASA,EAAOm3B,UAAU,CACxBsC,WAAYA,EACZC,eAAgBA,EAChBC,UAAWA,IAENn5C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,2BAA4B,KAAM,CAAEQ,OAAQA,KAE7E,iDA7EW+4B,IAAgBt3C,qBAAAC,cAAA,+DAAhBq3C,GAAgBp3C,QAAhBo3C,GAAgBn3C,UAAAC,WAFf,QAAM,GAEPk3C,KAAgBpsB,cAAA,CAJ5BC,O,mCAW2BC,gBAPfksB,sHCDP,MAAOa,EAOXt5C,YACUgsB,EACD8mB,EACCyG,GAFAr5C,KAAA8rB,OACD9rB,KAAA4yC,mBACC5yC,KAAAq5C,mBATFr5C,KAAAs5C,MAAQ,uBACRt5C,KAAAgf,IAAM,oBAENhf,KAAAu5C,4BAA8B,IAAI/qC,kBAAyB,MACnExO,KAAAw5C,uBAAyBx5C,KAAKu5C,4BAA4BxR,cAMvD,CAEH0R,QAAQC,EAAiB7E,EAAyB8E,EAAe9jB,GAC/D,OAAO71B,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAOm3B,UAAU,CACxBsC,WAAYS,EAAMt/C,KAClB8+C,eAAgBrE,EAAUz6C,KAC1B++C,UAAWQ,EAAKv/C,KAChBw/C,oBAAqB/E,EAAUgF,UAC/BC,eAAgBH,EAAKE,UACrBhkB,SAAUA,IAEL71B,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKs5C,gBAAiB,KAAM,CAAE95B,OAAQA,KAElE,CAEAu6B,gBACE,OAAO/5C,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,kBAAmB,CAAEQ,OAAQA,IAE9D,CAEA9Q,SACE,OAAO1O,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKs5C,eAC/B,CAEAU,cAAct1B,EAAqBmwB,EAAoBoF,GAAiB,GACtE,IAAIz6B,EAAS,IAAIimB,aACjB,OAAI/gB,IACFlF,EAASA,EAAO6gB,OAAO,cAAe3b,IAEpCmwB,IACFr1B,EAASA,EAAO6gB,OAAO,iBAAkBwU,IAG3Cr1B,EAASA,EAAO6gB,OAAO,aAAc4Z,GAC9Bj6C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,kBAAmB,CAAEQ,UACpD,CAEA06B,mBAAmBC,EAAkBzC,GACnC,IAAIl4B,EAAS,IAAIimB,aACjB,OAAIiS,IACFl4B,EAASA,EAAO6gB,OAAO,cAAeqX,IAEjC13C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,yBAAyBm7B,IAAY,CAAE36B,UACtE,CAEA46B,sBAAsBC,GACpB,OAAOr6C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,wBAAyBq7B,EACzD,CAEAC,sBAAsBD,GACpB,OAAOr6C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,wBAAyBq7B,EACxD,CAEAE,sBAAsBJ,EAAkBzC,GACtC,IAAIl4B,EAAS,IAAIimB,aACjB,OAAIiS,IACFl4B,EAASA,EAAO6gB,OAAO,cAAeqX,IAEjC13C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,yBAAyBm7B,IAAY,CAAE36B,UACzE,CAEAg7B,0BACEC,EACAC,EACAC,EACAC,EACAC,EACAhlB,EACAhT,EACAi4B,EACAC,EACAC,GAEA,IAAIx7B,GAAS,IAAIimB,cACdjN,IAAI,aAAciiB,GAClBjiB,IAAI,iBAAkBkiB,GACtBliB,IAAI,sBAAuBmiB,GAC3BniB,IAAI,YAAaoiB,GACjBpiB,IAAI,iBAAkBqiB,GACtBriB,IAAI,WAAY3C,GAEnB,OAAIhT,IACFrD,EAASA,EAAOgZ,IAAI,eAAgB3V,IAGlCk4B,IACFv7B,EAASA,EAAOgZ,IAAI,kBAAmByiB,KAAKC,UAAUH,KAGpDD,IACFt7B,EAASA,EAAOgZ,IAAI,wBAAyBsiB,IAG3CE,IACFx7B,EAASA,EAAOgZ,IAAI,oBAAqBwiB,IAGpCh7C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKs5C,+BAAgC,KAAM,CAAE95B,OAAQA,GAChF,CAEA27B,mBAAmBd,GACjB,OAAOr6C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,gBAAiBq7B,EAChD,CAEAe,eAAeC,EAAiBC,EAAmBnB,EAAkBzC,GACnE,IAAIl4B,EAAS,IAAIimB,aACjB,OAAIiS,IACFl4B,EAASA,EAAO6gB,OAAO,cAAeyL,mBAAmB4L,KAEpD13C,KAAK8rB,KAAKT,OACf,GAAGrrB,KAAKgf,iBAAiB8sB,mBAAmBuP,MAAYC,KAAaxP,mBACnEqO,KAEF,CAAE36B,UAEN,CAEA+7B,mBAAmBlB,EAAcxnB,EAAehuB,GAC9C,IAAI2a,EAAS,IAAIimB,aACjB,OAAI5S,IACFrT,EAASA,EAAO6gB,OAAO,OAAQxN,IAE7BhuB,IACF2a,EAASA,EAAO6gB,OAAO,OAAQx7B,IAE1B7E,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,gBAAiBq7B,EAAS,CAAE76B,UAC3D,CAEAg8B,eAAeC,EAAiBtB,EAAkBzC,GAChD,IAAIl4B,EAAS,IAAIimB,aACjB,OAAIiS,IACFl4B,EAASA,EAAO6gB,OAAO,cAAeyL,mBAAmB4L,KAEpD13C,KAAK8rB,KAAKT,OACf,GAAGrrB,KAAKgf,iBAAiB8sB,mBAAmBqO,MAAarO,mBAAmB2P,KAC5E,CAAEj8B,UAEN,CAEAk8B,yBAAyBp7C,GACvBN,KAAKu5C,4BAA4B9pC,KAAKnP,EACxC,CAEAq7C,qBACE,OAAO37C,KAAKq5C,iBAAiB31B,OAAO1U,QAClC9R,OAAK0+C,KACeA,EAAW/oC,KAAMzW,GAAWA,EAAOhC,OAAS2R,OAC1C6rB,SAG1B,iDAnKWwhB,GAAmBn4C,qBAAAC,cAAAD,qBAAA8H,KAAA9H,qBAAA+H,KAAA,+DAAnBowC,EAAmBj4C,QAAnBi4C,EAAmBh4C,UAAAC,WAFlB,QAAM,qFCDd,MAAOw6C,EAGX/7C,YAAoBgsB,EAAyB8mB,GAAzB5yC,KAAA8rB,OAAyB9rB,KAAA4yC,mBAFrC5yC,KAAAgf,IAAM,eAEoE,CAElFiG,OAAOy0B,EAAiBoC,GACtB,IAAI/R,EAAc,CAChBkP,WAAYS,EAAMt/C,KAClB+oC,QAAS2Y,GAEX,OAAO97C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,MAAO+qB,EACvC,CAEAhiC,OAAO2xC,EAAiBoC,EAAuBC,GAC7C,IAAIhS,EAAc,CAChBkP,WAAYS,EAAMt/C,KAClB+oC,QAAS2Y,EACTE,eAAgBD,GAElB,OAAO/7C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO06B,EAAMt/C,OAAQ2vC,EACpD,CAEArmB,KAAKu4B,GACH,IAAIz8B,EAAS,IAAIimB,aACjB,OAAIwW,IACFz8B,EAASA,EAAOm3B,UAAU,CACxBsF,WAAYA,EAAW32B,cAGpBtlB,KAAK8rB,KAAKpZ,IAAY,GAAG1S,KAAKgf,MAAO,CAAEQ,UAChD,CAEA9M,IAAIgnC,GACF,OAAO15C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO06B,EAAMt/C,OAC5C,CAEA8hD,mBACE,OAAOl8C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,0BAC/B,CAEAqM,OAAOovB,GACL,IAAIj7B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBsC,WAAYwB,IAEPz6C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOy7B,IAAa,CAAEj7B,OAAQA,GAChE,CAEA28B,aAAazC,EAAiB0C,GAC5B,IAAIC,EAAQ,GACRC,EAAW,GACfD,SAAMjyB,GAAQsvB,EAAMtvB,GACpBkyB,EAASpgD,KAAKw9C,EAAMtvB,IACpBiyB,EAAMjiD,KAAUs/C,EAAMt/C,KACtBiiD,EAAM/6B,KAAUo4B,EAChB2C,EAAME,WAAgB7C,EAAMtvB,KAAOgyB,EACnCC,EAAM9zB,KAAUvW,KAAMwqC,SACtBH,EAAMl2C,KAAU,QACT,CACLk2C,MAAOA,EACPC,SAAUA,EAEd,CAEAG,iBAAiBC,EAAqBvD,EAAmBjsC,EAAcyvC,GACrE,IAAI5S,EAAc,CAChB2S,YAAaA,EACbvD,UAAWA,EACXjsC,KAAMA,EACN0vC,eAAgBD,GAElB,OAAO38C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,yBAA0B+qB,EAC1D,CAEA8S,iBACE,OAAO78C,KAAK4yC,iBAAiBzC,QAAQ,IAC5BnwC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,wBAEjC,iDA9EW68B,GAAe56C,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAf8yC,EAAe16C,QAAf06C,EAAez6C,UAAAC,WAFd,QAAM,2GCMb,IAAMy7C,EAAN,MAAMA,GAGXh9C,YAAoBgsB,EAA0B8mB,GAA1B5yC,KAAA8rB,OAA0B9rB,KAAA4yC,mBAFtC5yC,KAAAgf,IAAM,cAEqE,CAEnFtM,IAAI+7B,GACF,OAAOzuC,KAAK4yC,iBAAiBzC,QAAS3wB,IAChCivB,IACFjvB,EAASA,EAAO6gB,OAAO,QAASoO,IAE3BzuC,KAAK8rB,KAAKpZ,IAAI1S,KAAKgf,IAAK,CAAEQ,OAAQA,KAE7C,CAEA0D,iBACE,OAAOljB,KAAK0S,IAAI,iBAAiB1D,QAC/ByP,YAAUq9B,GACR97C,KAAK4yC,iBAAiB+F,gBAAgB3pC,QACpC9R,OAAKw7C,GAA8BA,EAAeO,aAAe6C,KAIzE,iDAtBWgB,IAAc77C,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAd+zC,GAAc37C,QAAd27C,GAAc17C,UAAAC,WAFb,QAAM,GAEPy7C,KAAc3wB,cAAA,CAJ1BC,O,mCAO2BC,aAAsCksB,OAHrDuE,0ICCN,IAAMC,EAAN,MAAMA,GAGXj9C,YAAoBgsB,EAA0B8mB,GAA1B5yC,KAAA8rB,OAA0B9rB,KAAA4yC,mBAFtC5yC,KAAAgf,IAAM,cAEqE,CAMnF0E,OACE,OAAO1jB,KAAKg9C,YAAYhuC,QACtByP,YAAUw+B,GACJA,EAAK7hD,OAAS,KACTy2B,YACLorB,EAAK//C,IAAKgkC,GACDlhC,KAAK0S,IAAIwuB,MAChB,EAGCjV,MAAa,KAG1B,CAMA+wB,UAAUE,GAAoB,GAC5B,OAAOl9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAO6gB,OAAO,WAAY6c,GAC5Bl9C,KAAK8rB,KAAKpZ,IAAI1S,KAAKgf,IAAK,CAAEQ,YAErC,CAEA29B,iBACE,OAAOn9C,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,iBAAkB,CAAEQ,OAAQA,IAE7D,CAEA9M,IAAIwuB,GACF,OAAOlhC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAOkiB,IAAO,CAAE1hB,OAAQA,IAEzD,CAEA49B,SAASlc,GACP,OAAOlhC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAOkiB,UAAa,CAAE1hB,OAAQA,IAE/D,CAEAyF,OAAOo4B,GACL,OAAOr9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCrN,SAAOkrC,GAAMr2C,QAASub,IACK,iBAAd86B,EAAK96B,KACd86B,EAAK96B,GAAO04B,KAAKC,UAAUmC,EAAK96B,KAElC/C,EAASA,EAAO6gB,OAAO9d,EAAK86B,EAAK96B,GAAI,GAEhCviB,KAAK8rB,KAAKzwB,KAAK2E,KAAKgf,IAAK,KAAM,CAAEQ,OAAQA,KAEpD,CAEAzX,OAAOm5B,EAAamc,GAClB,OAAOr9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCrN,SAAOkrC,GAAMr2C,QAASub,IACK,iBAAd86B,EAAK96B,KACd86B,EAAK96B,GAAO04B,KAAKC,UAAUmC,EAAK96B,KAElC/C,EAASA,EAAO6gB,OAAO9d,EAAK86B,EAAK96B,GAAI,GAEhCviB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAOkiB,IAAO,KAAM,CAAE1hB,OAAQA,KAE/D,CAEA89B,YAAYpc,EAAamc,GACvB,OAAOr9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCrN,SAAOkrC,GAAMr2C,QAASub,IACpB/C,EAASA,EAAO6gB,OAAO9d,EAAK86B,EAAK96B,GAAI,GAEhCviB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAOkiB,UAAa,KAAM,CAAE1hB,OAAQA,KAErE,CAEA6L,OAAO6V,GACL,OAAOlhC,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOkiB,IAAO,CAAE1hB,OAAQA,IAE5D,CAEA+9B,cAAcrc,EAAamc,GACzB,OAAOr9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCrN,SAAOkrC,GAAMr2C,QAASub,IACpB/C,EAASA,EAAO6gB,OAAO9d,EAAK86B,EAAK96B,GAAI,GAEhCviB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,OAAOkiB,YAAe,KAAM,CAAE1hB,OAAQA,KAExE,CAEAg+B,cAActc,EAAauc,GACzB,OAAOz9C,KAAK4yC,iBAAiBzC,QAAS3wB,GAC7Bxf,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOkiB,aAAeuc,IAAW,CAAEj+B,OAAQA,IAE/E,CAEAk+B,cAAcxc,EAAa/6B,EAAcw3C,GACvC,OAAO39C,KAAK4yC,iBAAiBzC,QAAS3wB,IAEpCA,GADAA,EAASA,EAAO6gB,OAAO,OAAQl6B,IACfk6B,OAAO,OAAQsd,GACxB39C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,OAAOkiB,eAAkB,KAAM,CAAE1hB,OAAQA,KAE3E,CAEAo+B,iBAAiB1c,EAAa/6B,EAAcw3C,GAC1C,OAAO39C,KAAK4yC,iBAAiBzC,QAAS3wB,IAEpCA,GADAA,EAASA,EAAO6gB,OAAO,OAAQl6B,IACfk6B,OAAO,OAAQsd,GACxB39C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOkiB,eAAkB,CAAE1hB,OAAQA,KAEvE,CAEAq+B,SAAS3c,EAAamc,GACpB,OAAOr9C,KAAK4yC,iBAAiBzC,QAAS3wB,IACpCA,EAASA,EAAO6gB,OAAO,WAAY,MACnCluB,SAAOkrC,GAAMr2C,QAASub,IACpB/C,EAASA,EAAO6gB,OAAO9d,EAAK86B,EAAK96B,GAAI,GAEhCviB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,OAAOkiB,QAAW,KAAM,CAAE1hB,OAAQA,KAEpE,CAEAs+B,YAAY5c,EAAa6c,GACvB,OAAO/9C,KAAK4yC,iBAAiBzC,QAAS3wB,IAEpCA,GADAA,EAASA,EAAO6gB,OAAO,WAAY,OACnBA,OAAO,aAAc0d,GAC9B/9C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAOkiB,QAAW,CAAE1hB,OAAQA,KAEhE,CAOAuQ,OAAOmR,GACL,OAAOlhC,KAAK0S,IAAIwuB,GAAKlyB,QACnBuyB,UAAM,IAAI,EACV/c,cAAYjD,IACNpP,eAAaoP,EAAMwL,iBACrBxL,EAAMwL,kBAAc,EAEfd,OAAa,KAG1B,CAMA+xB,YAAY5nB,GACVA,SAAQ3W,mBAAmB2W,GACpBp2B,KAAKm9C,iBAAiBnuC,QAC3ByP,YAAUkL,IACR,MAAMziB,EAAQiL,YAAUwX,EAAMyM,GAC9B,SAAOnK,OAAa,IAAO/kB,EAAK,GAGtC,CAEA+2C,oBAAoB/c,EAAagd,GAC/B,OAAOl+C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAOkiB,cAAiBgd,EACvD,CAEAC,iBAAiBjd,GACf,OAAOlhC,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAOkiB,cACtC,CACAkd,yBACE,OAAOp+C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,gBAC/B,iDArLW+9B,IAAc97C,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAdg0C,GAAc57C,QAAd47C,GAAc37C,UAAAC,WAFb,QAAM,GAEP07C,KAAc5wB,cAAA,CAJ1BC,O,mCAO2BC,aAAsCksB,OAHrDwE,0ECNP,MAAOsB,EAGXv+C,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,cAEyB,CAEvCiG,OACE00B,EACA9E,EACAyJ,EACAC,EACA1E,GAEA,IAAIr6B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBwC,UAAWQ,EAAKv/C,KAChB8+C,eAAgBrE,EAAUz6C,KAC1B+oC,QAASmb,EACTC,OAAQA,EACRzE,eAAgBD,EAChB2E,WAAY7E,EAAK8E,WAAWD,WAC5BE,WAAY/E,EAAK8E,WAAWC,aAEvB1+C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,MAAO,KAAM,CAAEQ,OAAQA,GACvD,CAEAkE,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAY,GAAG1S,KAAKgf,MACvC,CAEAtM,IAAIinC,GACF,OAAO35C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO26B,EAAKv/C,OAC3C,CAEAukD,kBACE,OAAO3+C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,yBAC/B,CAEAqM,OACEuvB,EACAgE,EACAC,EACAnE,GAEA,IAAIl7B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBwC,UAAWyB,EACXkE,aAAcF,EACdC,MAAOl/C,MAAMo/C,KAAKF,EAAMh2C,UACxBqwC,eAAgBwB,IAEX16C,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAO47B,IAAY,CAAEp7B,OAAQA,GAC/D,CAEAzX,OACE4xC,EACA9E,EACAmK,EACAV,EACAC,EACA1E,EACA/E,EACAmK,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIvV,EAAc,CAChBoP,UAAWQ,EAAKv/C,KAChB8+C,eAAgBrE,EAAUz6C,KAC1BmlD,cAAeP,EACf7b,QAASmb,EACTC,OAAQA,EACRzE,eAAgBD,EAChB2E,WAAY7E,EAAK8E,WAAWD,WAC5BE,WAAY/E,EAAK8E,WAAWC,WAC5B5I,iBAAkBhB,EAClB0K,UAAWP,EACXQ,WAAYP,EACZQ,gBAAiBP,EACjBQ,cAAeP,EACfQ,gBAAiBP,EACjBC,YAAaA,GAEf,OAAOt/C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO26B,EAAKv/C,OAAQ2vC,EACnD,CAEA8V,YACElG,EACAmG,EACAC,EACAlL,EACA6E,GAEA,IAAI2C,EAAQ,GACR2D,EAAU,GACd3D,EAAMjyB,GAAQuvB,EAAKvvB,GACnB41B,EAAQ9jD,KAAKy9C,EAAKvvB,IAClBiyB,EAAMjiD,KAAUu/C,EAAKv/C,KACrBiiD,EAAMl2C,KAAU,OAChBk2C,EAAMjiD,KAAUu/C,EAAKv/C,KACrBiiD,EAAM/6B,KAAUq4B,EAChB0C,EAAM9zB,KAAUvW,KAAMiuC,OACtB5D,EAAM6D,eAAoBrL,EAC1BwH,EAAM8D,OAAYtL,EAAYA,EAAUz6C,KAAO,GAC/CiiD,EAAM+D,cAAmB1G,EAAQA,EAAMt/C,KAAO,GAC9CiiD,EAAME,WAAgB5C,EAAKvvB,KAAO01B,EAClCzD,EAAMxC,UAAeF,EAAKE,UAC1BwC,EAAMgE,aAAexL,GAAaA,EAAUyL,cAAgB3G,EAAKvvB,IACjEiyB,EAAMl2C,KAAU,OAChB,MAAMo6C,EAAYR,EAAM7iD,IAAKy8C,GACpBA,EAAKv/C,MAEdiiD,EAAMmE,gBAAqBD,EAAUr+C,SAASy3C,EAAKv/C,MACnD,MAAMqmD,EAAWV,EAAM17B,OAAQo8B,GAAaA,EAASrmD,OAASu/C,EAAKv/C,MACnE,GAAIqmD,GAAYA,EAASrlD,OAAS,EAAG,CACnC,MAAMojD,EAAaiC,EAAS,GAAGhC,WAAWD,WACpCE,EAAa+B,EAAS,GAAGhC,WAAWC,WAC1CrC,EAAMmC,WAAgBA,GAA0B,GAChDnC,EAAMqC,WAAgBA,GAA0B,GAChDrC,EAAMxpB,QAAU2rB,GAA6B,KAAfA,EAChC,CACA,MAA4B,KAAxBnC,EAAMmC,YAAgD,SAAxBnC,EAAMmC,YACtCnC,EAAMqE,cAAkB,EACxBrE,EAAMsE,gBAAqB,gCAE3BtE,EAAMqE,cAAkB,EAEtBrE,EAAMxC,WAA8C,IAA9BwC,EAAMxC,UAAaz+C,SAC3CihD,EAAMqE,cAAkB,EACxBrE,EAAMsE,gBAAqBtE,EAAMsE,gBAAqB,8BAEjD,CACLtE,MAAOA,EACP2D,QAASA,EAEb,CAEAY,eACE,OAAO5gD,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,qBAC/B,CAEA6hC,iBAAiBC,EAAkBnH,GACjC,IAAI5P,EAAc,CAChB+W,SAAUA,EACVlG,SAAUjB,GAEZ,OAAO35C,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,yBAA0B+qB,EACzD,CAEAgX,YAAYnG,GACV,IAAIp7B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBiE,SAAUA,IAEL56C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,oBAAqB,CAAEQ,OAAQA,GAC9D,iDA7JW6+B,GAAcp9C,qBAAAC,cAAA,+DAAdm9C,EAAcl9C,QAAdk9C,EAAcj9C,UAAAC,WAFb,QAAM,yECEd,MAAO2/C,EAGXlhD,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,mBAEyB,CAEvCiG,OAAOy0B,EAAiB7E,EAAyBoM,EAA2B1C,GAC1E,IAAI/+B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBsC,WAAYS,EAAMt/C,KAClB8+C,eAAgBrE,EAAUz6C,KAC1B+oC,QAAS8d,EACT1C,OAAQA,EACR3E,oBAAqB/E,EAAUgF,YAE1B75C,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKgf,MAAO,KAAM,CAAEQ,OAAQA,GACvD,CAEAzX,OACE2xC,EACA7E,EACAqM,EACAD,EACA1C,EACA4C,EACAC,GAEA,IAAIrX,EAAc,CAChBmP,eAAgBrE,EAAUz6C,KAC1B6+C,WAAYS,EAAMt/C,KAClBinD,mBAAoBH,EACpB/d,QAAS8d,EACT1C,OAAQA,EACR3E,oBAAqB/E,EAAUgF,UAC/ByH,kBAAmBzM,EAAUyM,kBAC7BC,aAAcJ,EACdK,UAAWJ,GAEb,OAAOphD,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,OAAO61B,EAAUz6C,OAAQ2vC,EACxD,CAEArmB,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAY,GAAG1S,KAAKgf,MACvC,CAEAtM,IAAImiC,GACF,OAAO70C,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,OAAO61B,EAAUz6C,OAChD,CAEAqnD,uBACE,OAAOzhD,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,8BAC/B,CAEAqM,OAAOqvB,EAAuBkE,EAAsBC,GAClD,IAAIr/B,EAAS,IAAIimB,aACjBjmB,SAASA,EAAOm3B,UAAU,CACxBuC,eAAgBwB,EAChBoE,aAAcF,EACdC,MAAOl/C,MAAMo/C,KAAKF,EAAMh2C,YAEnB7I,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKgf,OAAO07B,IAAiB,CAAEl7B,OAAQA,GACpE,CAEAkiC,iBAAiB7M,EAAyB8M,EAA4BjI,GACpE,IAAI2C,EAAQ,GACZA,SAAMjyB,GAAQyqB,EAAUzqB,GACxBiyB,EAAMjiD,KAAUy6C,EAAUz6C,KAC1BiiD,EAAM/6B,KAAUuzB,EAChBwH,EAAM9zB,KAAUvW,KAAM4vC,MACtBvF,EAAMgE,UAAexL,EAAUwL,UAC/BhE,EAAM8D,OAAYzG,EAAQA,EAAMt/C,KAAO,GACvCiiD,EAAME,WAAgB1H,EAAUzqB,KAAOu3B,EACvCtF,EAAMl2C,KAAU,YAChBk2C,EAAMxC,UAAehF,EAAUgF,UAC/BwC,EAAMiE,YAAiBzL,EAAUyL,YACjCjE,EAAM0D,MAAWlL,EAAUkL,MAC3B1D,EAAMiF,kBAAuBzM,EAAUyM,kBACvCjF,EAAMwF,kBAAuBhN,EAAUgN,kBACL,IAA9BxF,EAAMxC,UAAaz+C,SACrBihD,EAAMqE,cAAkB,EACxBrE,EAAMsE,gBAAqB,4BAEtBtE,CACT,iDAlFW2E,GAAmB//C,qBAAAC,cAAA,+DAAnB8/C,EAAmB7/C,QAAnB6/C,EAAmB5/C,UAAAC,WAFlB,QAAM,8FCUd,MAAOygD,EACXhiD,YAAoBgsB,GAAA9rB,KAAA8rB,OAEZ9rB,KAAA4sC,SAAsC,EAFP,CAIvCxR,UAAU2mB,GACR,OAAI5vC,YAAU4vC,KACZA,EAAQA,EAAMnlD,KAAK,MAEdoD,KAAK8rB,KAAKpZ,IAAI,sBAAsBqvC,KAAS/yC,QAClD9R,OAAKysB,IACH,MAAM9tB,EAAS,GACfsW,mBAAUwX,EAAOmnB,IACf3+B,QAAMtW,EAAQi1C,EAAO12C,KAAM02C,EAAOxwC,MAAK,GAElCzE,IAGb,CAEAsxC,oBACEnuB,EACAiuB,EACAC,EACA8U,GAAe,GAEf,MAAM3T,EAAUruC,KAAK4sC,SAAS5tB,GAC1BgjC,QAA4BpoB,IAAZyU,EAClBruC,KAAK8rB,KAAKpZ,IAAIsM,GAAKrQ,UAChBpM,IACCvC,KAAK4sC,SAAS5tB,GAAOhf,KAAKsuC,iBAAiB/rC,GAC3CvC,KAAKmtC,oBAAoBnuB,EAAKiuB,EAAIC,EAAM,EAEzCvjB,IACqB,MAAhBA,EAAKjb,SACP1O,KAAK4sC,SAAS5tB,GAAO,MAIN,KAAZqvB,EACTpB,EAAGoB,GAECnB,GACFA,GAGN,CAGAG,eAAeruB,GACbhf,KAAK4sC,SAAS5tB,GAAO,EACvB,CAEQsvB,iBAAiB/rC,GACvB,OAAOA,EAAKjC,OAASiC,EAAKgsC,UAAY,EACxC,CAEA0T,4BAA4B/gB,GAC1B,OAAOlhC,KAAK8rB,KAAKpZ,IAAI,0BAA0BwuB,IACjD,CAEApJ,sBACE,OAAO93B,KAAK8rB,KAAKpZ,IAAI,2BACvB,iDA/DWovC,GAAe7gD,qBAAAC,cAAA,+DAAf4gD,EAAe3gD,QAAf2gD,EAAe1gD,UAAAC,WAFd,QAAM,qFCJd,MAAO6gD,EACXpiD,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvCpI,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI,WACvB,CAEA2Y,OAAOwK,GACL,OAAO71B,KAAK8rB,KAAKT,OAAO,YAAYwK,IACtC,CAEAnjB,IAAImjB,GACF,OAAO71B,KAAK8rB,KAAKpZ,IAAI,YAAYmjB,IACnC,CAEA5Q,OAAO4N,GACL,OAAO7yB,KAAK8rB,KAAKzwB,KAAK,WAAYw3B,EACpC,CAEA9qB,OAAO8qB,GACL,OAAO7yB,KAAK8rB,KAAKgE,IAAI,YAAY+C,EAAKgD,WAAYhD,EACpD,CAEAsvB,eAAetsB,EAAkBusB,EAAqBC,GAIpD,OAAOriD,KAAK8rB,KAAKzwB,KAAK,YAAYw6B,oBAA4B,CAC5DysB,aAAcF,EACdG,aAAcF,GAElB,CAEAjrB,iBAAiBorB,GACf,OAAOxiD,KAAK0S,IAAI8vC,GAAWxzC,QACzBuyB,UAAM,IAAI,EACV/c,cAAYjD,IACVA,EAAMwL,kBAAc,EACbd,OAAa,KAG1B,CAEAw2B,iBAAiB1sB,EAAkBF,EAAmB,KAAMusB,EAAsB,MAChF,OAAOpiD,KAAK8rB,KAAKzwB,KAAK,6BAA8B,CAClD06B,SAAUA,EACVF,SAAUA,EACVysB,aAAcF,GAElB,iDAjDWF,GAAWjhD,qBAAAC,cAAA,+DAAXghD,EAAW/gD,QAAX+gD,EAAW9gD,UAAAC,WAFV,QAAM,6DCPd,MAAOmjC,EAQX,oBAAOke,CAAcC,EAAoBC,GACvC,IAAIC,GAAa,EAEjB5wC,cAAOC,KAAK0wC,GAAQ57C,QAAS87C,IAC3B,MAAMvgD,EAAOqgD,EAAOE,GACf3wC,YAAU5P,EAAMogD,EAAcG,MACjCH,EAAcG,GAAiBvgD,EAC/BsgD,GAAa,KAIVA,CACT,CAEA,sBAAOpe,CAAgBse,EAAmBC,GACxC,MAAO,6BAA6BD,KAAaC,QACnD,qCC1BI,MAAOC,EAMXx+C,cAAcy+C,EAAsBC,GAClC,MAAM97C,EAAS87C,GAAWC,SAASjoD,KACnC,OAAOkoD,iBAAiBh8C,GAAQi8C,iBAAiB,KAAKJ,IACxD,mDCLI,MAAOn1C,EAKXjO,YAAsBmO,GAAAjO,KAAAiO,QAAkB,CAExCzB,eAAeF,GACbtM,KAAKsM,YAAcA,CACrB,CAEAi3C,yBACEC,aAAaxjD,KAAKyjD,cAClBzjD,KAAKiO,OAAOy1C,kBAAkB,KAC5B1jD,KAAKyjD,aAAe/jB,OAAOikB,WAAW,KACpC3jD,KAAKiO,OAAO21C,IAAI,KACd5jD,KAAK6jD,YAAc,IAAIC,IACrB,YACAt6C,qFAAoF,EAEvF,EACA,IAAK,EAEZ,6DCxBI,MAAOu6C,UAA6BD,IACxChkD,YAAY4O,EAA0B+b,IAAgBu5B,QAASC,EAAoB,IAGjF,OAFA51C,QAEQK,GACN,KAAK+b,IAAgBu5B,QACnBhkD,KAAKmG,KAAO,QACZnG,KAAKkkD,IAAM,GACX,MACF,KAAKz5B,IAAgB05B,UACnBnkD,KAAKmG,KAAO,UACZnG,KAAKkkD,KACFD,EAAYz6C,gCAAgCy6C,KAAez6C,6BAC5D,IACAA,0BACF,MACF,KAAKihB,IAAgB25B,WACnBpkD,KAAKmG,KAAO,YACZnG,KAAKkkD,IAAMD,EACPz6C,kDAAkDy6C,KAClDz6C,8CACJ,MACF,KAAKihB,IAAgBC,eACnB1qB,KAAKmG,KAAO,SACZnG,KAAKkkD,KACFD,EACGz6C,oCAAoCy6C,KACpCz6C,iCACJ,IACAA,4CAGR,oCCnCI,MAAOs6C,EACXhkD,YACSqG,EAAqD,QACrD+9C,EAAM,IADNlkD,KAAAmG,OACAnG,KAAAkkD,KACN,gKCEHjjD,yBAAA,kEAIAA,2BAAA,cAIQA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA6zB,WAAU,GAJ3BpjD,mBAAA,KAOAA,wEAJQA,uBAAA,QAAAuvB,EAAA8zB,YAGKrjD,8CAAAuvB,EAAA8zB,gEANbrjD,uBAAA,EAAAsjD,EAAA,yDAKStjD,uBAAA,OAAAuvB,EAAA8zB,aCGL,MAAOE,EALb1kD,cAYEE,KAAAqF,MAAQ,GAIRrF,KAAAykD,WAAY,EAEZzkD,KAAA3F,KAA0B,SAE1B2F,KAAA0kD,aAAc,EAEd1kD,KAAA2kD,aAAe,GAEf3kD,KAAAskD,WAAa,GAEbtkD,KAAA4kD,aAAc,EAEd5kD,KAAA6kD,QAA8B,SAO9B7kD,KAAA8kD,UAAY,IAAIh7C,eAOhB9J,KAAAsc,OAAS,IAAIxS,eAEb9J,KAAA+R,MAAQC,KAIRvD,WACE,MAAMtI,EAAuC,WAAdnG,KAAKmG,KAAoB,QAAUnG,KAAKmG,KACvE,OAAQnG,KAAKmG,MACX,IAAK,UACHnG,KAAKqF,MAAQrF,KAAKqF,OAASmE,mBAC3B,MACF,IAAK,QACHxJ,KAAKqF,MAAQrF,KAAKqF,OAASmE,iBAC3B,MACF,IAAK,OACHxJ,KAAKqF,MAAQrF,KAAKqF,OAASmE,uBAC3B,MACF,IAAK,UACHxJ,KAAKqF,MAAQrF,KAAKqF,OAASmE,mBAC3B,MACF,IAAK,SACHxJ,KAAKqF,MAAQrF,KAAKqF,OAASmE,kBAI/BxJ,KAAK+kD,oBAAsB,CACzB5+C,KAAMA,EACNwE,SAAU3K,KAAKglD,aACfC,gBAAiBjlD,KAAKklD,UACtBC,UAAWnlD,KAAK0kD,YAChBr/C,MAAOrF,KAAKykD,UAAYzkD,KAAKqF,MAAQ,GACrCu/C,YAAa5kD,KAAK4kD,YAClBC,QAAS7kD,KAAK6kD,QAElB,CAEAO,UACEplD,KAAK8kD,UAAU56C,MACjB,CAEAm6C,WACErkD,KAAKsc,OAAOpS,MACd,iDAhFWs6C,EAAmB,4DAAnBA,EAAmBp7C,UAAA,qBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2hBDFjBE,2EAAA,+YAhBfvI,2BAAA,mCAG6BA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA2hD,UAAS,GAAEnkD,2BAMjDA,uBAJA,EAAAokD,EAAA,yBAAApkD,mCAIAA,CAJsB,EAAAqkD,EAAA,yBAAArkD,yCAHOA,uBADA,UAAAwC,EAAAkhD,aACA1jD,CADwB,kBAAAwC,EAAAshD,+fES/C,MAAOQ,EASXzlD,YACU6/B,EACA3xB,EACA0P,GAFA1d,KAAA2/B,WACA3/B,KAAAgO,eACAhO,KAAA0d,QAXA1d,KAAAwlD,WAAa,IAAI17C,eAElB9J,KAAAuqC,UAAW,EACXvqC,KAAAylD,WAAY,EACZzlD,KAAA0lD,YAAa,EAEtB1lD,KAAA2lD,gBAAiB,CAMd,CAEHl3C,WACEzO,KAAK5F,KAAO4F,KAAK5F,MAAQ4F,KAAKgO,aAAa43C,OAC3C5lD,KAAK2lD,eAAuC,UAAtB3lD,KAAK0d,MAAMmoC,MACnC,CAEAC,OACO9lD,KAAKuqC,WACiC,IAArCvqC,KAAKwlD,WAAWO,UAAU3qD,QAAgB4E,KAAK2lD,eACjD3lD,KAAK2/B,SAASmmB,OAEd9lD,KAAKwlD,WAAWt7C,OAGtB,iDA5BWq7C,GAAmBtkD,8BAAAC,YAAAD,8BAAA8H,MAAA9H,8BAAA+H,kBAAA,4DAAnBu8C,EAAmBn8C,UAAA,qBAAA+C,OAAA,CAAA/R,KAAA,OAAAmwC,SAAA,WAAAkb,UAAA,YAAAC,WAAA,cAAAn7C,QAAA,CAAAi7C,WAAA,cAAAh7C,MAAA,EAAAC,KAAA,EAAAC,OAAA,qIAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICVhCrI,2BAAA,cAGQA,uBAAA,0BAASwC,EAAAqiD,MAAM,GAKrB7kD,mBAAA,GACFA,kCALQA,uBAHA,UAAAA,4BAAA,EAAAyI,EAAAjG,EAAAgiD,WAAAhiD,EAAAiiD,WAAAjiD,EAAAgiD,YAAAhiD,EAAAiiD,YAGAzkD,CAH0F,WAAAwC,EAAA8mC,UAOhGtpC,uDAAA,IAAAwC,EAAArJ,KAAA,yFCRU4rD,wBAAmB,KAC7BC,OAAA,SACAD,EAAAE,QAAA,QACAF,EAAAG,WAAA,MACAH,EAAAI,QAAA,UACAJ,EAAAK,MAAA,eACAL,EAAAM,KAAA,sMCImCrlD,sBAAA+K,EAAA3G,gIACApE,sBAAA+K,EAAA3G,gIACGpE,sBAAA+K,EAAA3G,6DAPpCpE,2BAAA,UAAAA,wBAAA,KAOEA,uBAFA,EAAAslD,EAAA,qBAEAtlD,CAF+B,EAAAulD,EAAA,qBAE/BvlD,CAD+B,EAAAwlD,EAAA,sBAEjCxlD,8FANGA,uBAFA,aAAA+K,EAAA06C,KAEAzlD,CAFmB,WAAA+K,EAAA26C,OAIlB1lD,sBAAA,GAAAA,sBAAA+K,EAAA26C,4DAJJ1lD,uBAAA,EAAA2lD,EAAA,oFAC6B3lD,uBAAzB,OAAA+K,EAAA06C,MAAA16C,EAAA26C,MAAA,EAAyB1lD,CAAA,WAAA4lD,+BAS3B5lD,2BAAA,UACkCA,mBAAA,GAClCA,sEAFGA,uBAAA,aAAA+K,EAAA06C,MAC+BzlD,uDAAA,GAAA+K,EAAA3G,MAAA,+BADlCpE,uBAAA,EAAA6lD,EAAA,oFACgB7lD,uBAAZ,OAAA+K,EAAA06C,KAAYzlD,CAAA,WAAA4lD,2BAOZ5lD,+BAAA,6BADFA,oCAAA,GACEA,uBAAA,EAAA8lD,EAAA,iIAAe9lD,+CAAA,mBAAA+lD,0BAGf/lD,+BAAA,6BADFA,oCAAA,GACEA,uBAAA,EAAAgmD,EAAA,iIAAehmD,+CAAA,mBAAAimD,0BAGfjmD,+BAAA,6BADFA,oCAAA,GACEA,uBAAA,EAAAkmD,EAAA,iIAAelmD,+CAAA,mBAAAmmD,0BAGfnmD,+BAAA,6BADFA,oCAAA,GACEA,uBAAA,EAAAomD,EAAA,iIAAepmD,+CAAA,mBAAAqmD,oEAMnBrmD,2BAFF,YAEEA,CADyC,UACtCA,uBAAA,mBAAAA,0BAAAiU,GAAA,MAAAlJ,GAAA/K,4BAAA,OAAAA,wBAAS+K,GAAAu7C,iBAAgB,GAK9BtmD,yEAHKA,0GASPA,+BAAA,6BAFFA,2BAAA,SACEA,sBAAA,QACAA,uBAAA,EAAAumD,EAAA,uBACFvmD,iGADiBA,sBAAA,GAAAA,uBAAA,mBAAAwmD,2BAKfxmD,+BAAA,6BAAAA,uBAAA,EAAAymD,GAAA,6FAAezmD,uBAAA,mBAAA0mD,+BAGb1mD,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,IAAA+K,EAAAzJ,KAAA0vB,QAAA,iCAEFhxB,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAC,MAAA,iCALF5mD,2BAAA,UAIAA,uBAHA,EAAA6mD,GAAA,cAGA7mD,CAHuE,EAAA8mD,GAAA,eAMvE9mD,sBAAA,gBAGFA,sEATSA,+CAAA,OAAA+K,EAAAzJ,KAAA0vB,SAAA,IAAAjmB,EAAAzJ,KAAA0vB,SAAA,IAAAjmB,EAAAzJ,KAAAokD,OAGA1lD,+CAAA,aAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAC,mCASP5mD,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,IAAA+K,EAAAzJ,KAAA+e,KAAA,iCAHJrgB,2BAAA,aAEEA,uBAAA,EAAA+mD,GAAA,eAGA/mD,sBAAA,gBAGFA,sEANSA,+CAAA,OAAA+K,EAAAzJ,KAAA+e,kCASPrgB,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,IAAA+K,EAAAzJ,KAAA0lD,KAAA,iCAEFhnD,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAltB,QAAA,iCANJz5B,2BAAA,aAKEA,uBAHA,EAAAinD,GAAA,cAGAjnD,CAHwB,EAAAknD,GAAA,eAMxBlnD,sBAAA,gBAGFA,sEATSA,+CAAA,OAAA+K,EAAAzJ,KAAA0lD,MAGAhnD,+CAAA,aAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAltB,qCASPz5B,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,IAAA+K,EAAAzJ,KAAAgf,MAAA,gCAEFtgB,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAQ,QAAA,gCANJnnD,2BAAA,aAKEA,uBAHA,EAAAonD,GAAA,cAGApnD,CAHyB,EAAAqnD,EAAA,eAMzBrnD,sBAAA,gBAGFA,sEATSA,+CAAA,OAAA+K,EAAAzJ,KAAAgf,OAGAtgB,+CAAA,aAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAQ,qCASPnnD,2BAAA,UACEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAW,QAAA,iCAHJtnD,2BAAA,aAEEA,uBAAA,EAAAunD,GAAA,eAGAvnD,sBAAA,UAGFA,sEANSA,+CAAA,aAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAW,SAIJtnD,+CAAA,UAAAA,4BAAA,EAAAyI,EAAAsC,EAAA+F,MAAA02C,QAAAz8C,EAAA+F,MAAA22C,kCANLznD,uBA5CE,EAAA0nD,GAAA,cA4CF1nD,CA5CyG,EAAA2nD,GAAA,cA4CzG3nD,CAhCmB,EAAA4nD,GAAA,cAgCnB5nD,CAvBmB,EAAA6nD,EAAA,cAuBnB7nD,CAXmB,EAAA8nD,GAAA,yDAjCV9nD,uBAAA,OAAA+K,EAAAzJ,KAAA0vB,UAAA,MAAAjmB,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAC,QAAA,IAAA77C,EAAAzJ,KAAA0vB,SAAA,IAAAjmB,EAAAzJ,KAAAokD,OAWF1lD,+CAAA,OAAA+K,EAAAzJ,KAAA+e,MASArgB,+CAAA,OAAA+K,EAAAzJ,KAAA0lD,OAAA,MAAAj8C,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAltB,UAYAz5B,+CAAA,OAAA+K,EAAAzJ,KAAAgf,QAAA,MAAAvV,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAQ,UAYAnnD,+CAAA,aAAA+K,EAAAzJ,KAAAqlD,iBAAA,KAAA57C,EAAAzJ,KAAAqlD,iBAAAW,oCA7CLtnD,uBAFF,EAAA+nD,GAAA,mBAEE/nD,CAFmB,EAAAgoD,GAAA,8CAArBhoD,0BAAA,OAAA+K,EAAAzJ,KAAA,6BA6DAtB,+BAAA,6BAAAA,uBAAA,EAAAioD,GAAA,6FAAejoD,uBAAA,mBAAA0mD,+BAEf1mD,2BAAA,UACEA,mBAAA,GACAA,sBAAA,gBAGFA,sEAJEA,uDAAA,IAAA+K,EAAAzJ,KAAA4mD,GAAA,iCAKFloD,2BAAA,UACEA,mBAAA,GACAA,2BAAA,aACIA,mBAAA,UAENA,wEAJEA,uDAAA,IAAA+K,EAAAzJ,KAAA4mD,GAAA,iCAKFloD,2BAAA,aAEEA,mBAAA,GACAA,2BAAA,aACIA,mBAAA,UAENA,wEAJEA,uDAAA,IAAA+K,EAAAzJ,KAAA6mD,GAAA,iCAKFnoD,2BAAA,aAEEA,mBAAA,GACAA,2BAAA,aACIA,mBAAA,YAENA,wEAJEA,uDAAA,IAAA+K,EAAAzJ,KAAA8mD,KAAA,iCAKFpoD,2BAAA,aAEEA,mBAAA,GACAA,2BAAA,aACIA,mBAAA,WAENA,wEAJEA,uDAAA,IAAA+K,EAAAzJ,KAAA+mD,IAAA,iCAKFroD,2BAAA,aAEMA,mBAAA,GACJA,2BAAA,aACEA,mBAAA,eAAeA,wEAFbA,uDAAA,IAAA+K,EAAAzJ,KAAAgnD,SAAA,iCAGNtoD,2BAAA,aAEMA,mBAAA,GACJA,2BAAA,aACEA,mBAAA,YAEJA,wEAJMA,uDAAA,IAAA+K,EAAAzJ,KAAAinD,KAAA,gCAFNvoD,uBAtCA,EAAAwoD,GAAA,cAsCAxoD,CAtCkC,EAAAyoD,GAAA,cAsClCzoD,CAhCkC,EAAA0oD,GAAA,cAgClC1oD,CAzBmB,EAAA2oD,GAAA,cAyBnB3oD,CAlBmB,EAAA4oD,GAAA,cAkBnB5oD,CAXmB,EAAA6oD,GAAA,cAWnB7oD,CAJmB,EAAA8oD,GAAA,yDAlCZ9oD,uBAAA,OAAA+K,EAAAzJ,KAAA4mD,KAAAn9C,EAAAzJ,KAAA6mD,IAMAnoD,+CAAA,OAAA+K,EAAAzJ,KAAA4mD,KAAAn9C,EAAAzJ,KAAA6mD,IAMAnoD,+CAAA,OAAA+K,EAAAzJ,KAAA6mD,KAAAp9C,EAAAzJ,KAAA4mD,IAOAloD,+CAAA,OAAA+K,EAAAzJ,KAAA8mD,MAOApoD,+CAAA,OAAA+K,EAAAzJ,KAAA+mD,KAOAroD,+CAAA,OAAA+K,EAAAzJ,KAAAgnD,UAKAtoD,+CAAA,OAAA+K,EAAAzJ,KAAAinD,iCAvCLvoD,uBAFF,EAAA+oD,GAAA,mBAEE/oD,CAFmB,EAAAgpD,GAAA,8CAArBhpD,0BAAA,OAAA+K,EAAAzJ,KAAA,6BAqDAtB,+BAAA,6BAAAA,uBAAA,EAAAipD,GAAA,6FAAejpD,uBAAA,mBAAA0mD,2BAIb1mD,sBAAA,2CAKFA,2BAAA,aAEMA,mBAAA,GACJA,sBAAA,gBAGFA,sEAJMA,uDAAA,UAAA+K,EAAAzJ,KAAA,KAAAyJ,EAAAzJ,KAAA8mD,KAAA,iCATNpoD,2BAAA,UACEA,mBAAA,GACAA,uBAAA,EAAAkpD,GAAA,kBAIFlpD,2BACAA,uBAAA,EAAAmpD,GAAA,0DANEnpD,uDAAA,UAAA+K,EAAAzJ,KAAA,KAAAyJ,EAAAzJ,KAAA4mD,GAAA,KAEIloD,+CAAA,cAAA+K,EAAAzJ,KAAA,KAAAyJ,EAAAzJ,KAAA4mD,KAAA,WAAAn9C,EAAAzJ,KAAA,KAAAyJ,EAAAzJ,KAAA4mD,KAICloD,+CAAA,aAAA+K,EAAAzJ,KAAA,KAAAyJ,EAAAzJ,KAAA8mD,iCARLpoD,uBAFF,EAAAopD,GAAA,mBAEEppD,CAFqC,EAAAqpD,GAAA,8CAAvCrpD,0BAAA,OAAA+K,EAAAzJ,MAAA,OAAAyJ,EAAA26C,MAAA,iCAuBA1lD,2BAAA,UACEA,mBAAA,GACAA,sBAAA,gBAEFA,sEAHEA,uDAAA,IAAA+K,EAAAzJ,KAAA,gCADFtB,uBAAA,EAAAspD,GAAA,kHAAiCtpD,uBAA1B,QAAA+K,GAAAw+C,mBAA0BvpD,CAAA,WAAAwpD,2BAM/BxpD,+BAAA,6BAAAA,uBAAA,EAAAypD,GAAA,6FAAezpD,uBAAA,mBAAA0mD,+BAGf1mD,2BAAA,UACEA,mBAAA,GACFA,sBAAA,gBAEAA,sEAHEA,uDAAA,IAAA+K,EAAAzJ,KAAAyJ,EAAAw+C,mBAAA,iCADFvpD,uBAAA,EAAA0pD,GAAA,eAKA1pD,2BAAA,UACEA,mBAAA,GACAA,sBAAA,gBAEFA,sEATOA,uBAAA,OAAA+K,EAAAzJ,KAAAyJ,EAAAw+C,mBAAA,GAMLvpD,sBAAA,GAAAA,+BAAA,IAAA+K,EAAAw+C,mBAAA,gCAPJvpD,uBATA,EAAA2pD,GAAA,WASA3pD,CAT0B,EAAA4pD,GAAA,mBAS1B5pD,CAHS,EAAA6pD,GAAA,yBAAA7pD,6EANTA,0BAAA,IAAA+K,EAAAzJ,MAAAyJ,EAAAzJ,KAAA,6BAwBAtB,sBAAA,kDAQ+BA,mBAAA,6CAAAA,8BAAA+K,EAAA3G,kCACApE,mBAAA,6CAAAA,8BAAA+K,EAAA3G,kCACGpE,mBAAA,6CAAAA,+BAAA,GAAA+K,EAAA3G,MAAA,iCALpCpE,2BAAA,aAEEA,mBAAA,GAGAA,uBAFA,EAAA8pD,GAAA,qBAEA9pD,CAF+B,EAAA+pD,GAAA,qBAE/B/pD,CAD+B,EAAAgqD,GAAA,sBAEjChqD,sEALMA,uBAAA,WAAA+K,EAAA26C,OACJ1lD,uDAAA,IAAA+K,EAAA26C,MAAA,gCAFF1lD,uBAAA,EAAAiqD,GAAA,yDAAOjqD,uBAAA,OAAA+K,EAAA26C,OAAA,IAAA36C,EAAA26C,mCAQL1lD,2BAAA,UAAMA,mBAAA,GAAWA,sEAAXA,sDAAA+K,EAAA3G,kCADNpE,uBARF,EAAAkqD,GAAA,cAQElqD,CAR4B,EAAAmqD,GAAA,qDAA9BnqD,0BAAA,OAAA+K,EAAAzJ,MAAAyJ,EAAA26C,MAAA,8IAsB2C1lD,sBAAA+K,GAAAq/C,QAAAC,EAAA/oC,0KACAthB,sBAAA+K,GAAAq/C,QAAAC,EAAA/oC,8MACGthB,sEAAA,IAAA+K,GAAAq/C,QAAAC,EAAA/oC,8DANpCthB,2BAAA,aAAAA,wBAAA,KAMEA,uBAFA,EAAAsqD,GAAA,qBAEAtqD,CAF+B,EAAAuqD,GAAA,qBAE/BvqD,CAD+B,EAAAwqD,GAAA,sBAEjCxqD,uGANMA,uBAAA,WAAAqqD,EAAAhrD,MAAAqmD,OAEF1lD,sBAAA,GAAAA,sBAAAqqD,EAAAhrD,MAAAqmD,0DAQJ1lD,sBAAA,2CAKFA,2BAAA,aAEMA,mBAAA,GACJA,sBAAA,gBAGFA,+EAJMA,uDAAA,IAAAqqD,EAAAhrD,MAAAihB,MAAA,iCAtBZtgB,oCAAA,GAGMA,2BAFJ,UAEIA,CAFwB,WAExBA,CAD4B,YAE1BA,uBAAA,EAAAyqD,GAAA,eAQFzqD,2BACAA,2BAAA,aACEA,mBAAA,GACAA,uBAAA,EAAA0qD,GAAA,kBAIF1qD,2BACAA,uBAAA,EAAA2qD,GAAA,eAQJ3qD,4FAxBaA,sBAAA,GAAAA,uBAAA,OAAAqqD,EAAAhrD,MAAAqmD,OASH1lD,+CAAA,UAAAqqD,EAAAhrD,MAAAihB,MAAA,eACJtgB,uDAAA,IAAAqqD,EAAAhrD,MAAAurD,GAAA,KAEI5qD,+CAAA,OAAAqqD,EAAAhrD,MAAAurD,IAIC5qD,+CAAA,OAAAqqD,EAAAhrD,MAAAihB,mCApBbtgB,uBAAA,EAAA6qD,GAAA,kGAA+B7qD,uBAAA,UAAAA,wBAAA,UAAA+K,EAAA+/C,aAAA,KAAA//C,EAAA+/C,aAAApF,MAAAr3B,YC5N3B,MAAO08B,GALblsD,cAaEE,KAAAuC,KAAY,KAGZvC,KAAAisD,YAAc,UAKdjsD,KAAAqrD,QAAUrF,EACVhmD,KAAA+R,MAAQC,KACRhS,KAAA2mD,MAAgB,KAChB3mD,KAAAwqD,mBAA6B,EAC7BxqD,KAAAksD,iBAA2B,EAE3BtlD,cACM5G,KAAKuC,MAAMokD,OAA8B,IAArB3mD,KAAKuC,MAAMokD,MACjC3mD,KAAK2mD,MAAQ3mD,KAAKuC,MAAMokD,MACM,UAArB3mD,KAAKisD,YACdjsD,KAAK2mD,MAAQ3mD,KAAKuC,MAAM4mD,GAAKnpD,KAAKuC,MAAM8mD,KAExCrpD,KAAK2mD,MAAQ3mD,KAAKuC,KAGhBvC,KAAK+rD,cACW,QAAd/rD,KAAKqF,QACPrF,KAAKwqD,mBAAqBxqD,KAAK+rD,aAAaznB,KAAK6nB,OAGvD,CAEA5E,iBACEvnD,KAAKksD,iBAAmBlsD,KAAKksD,eAC/B,iDAxCWF,GAAgB,4DAAhBA,GAAgB5iD,UAAA,kBAAA+C,OAAA,CAAA9G,MAAA,QAAAqhD,KAAA,OAAAnkD,KAAA,OAAA0pD,YAAA,cAAAF,aAAA,gBAAAllC,SAAA,CAAA5lB,kCAAAuJ,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDDlB5C,4EACH,kCACF,4CAA+B,uEAAW,mFAC1C,8CAA+B,uEAAW,mFAC1C,8CAAkC,wEAAY,0HA+N/BA,4EACP,kCACF,4CAA+B,uDAAuB,mFACtD,8CAA+B,uDAAuB,mFACtD,8CAAkC,qCAAmC,u2CA/OjFvI,sBAAA,QAGIA,2BAFJ,UAEIA,CAFwB,WAExBA,CADmD,YAYjDA,uBAVF,EAAAmrD,EAAA,WAUEnrD,CAVoC,EAAAorD,EAAA,YAetCprD,2BACAA,2BAAA,aACEA,oCAAA,MAUEA,uBATA,EAAAqrD,EAAA,sBASArrD,CATsC,EAAAsrD,EAAA,sBAStCtrD,CANoC,GAAAurD,EAAA,sBAMpCvrD,CAH2C,GAAAwrD,EAAA,2DAO/CxrD,2BACAA,uBAAA,GAAAyrD,EAAA,eASJzrD,6BAuLAA,uBArLA,GAAA0rD,EAAA,aAqLA1rD,CArL6B,GAAA2rD,GAAA,yBAAA3rD,mCAqL7BA,CAhL6B,GAAA4rD,GAAA,yBAAA5rD,mCAgL7BA,CApHyB,GAAA6rD,GAAA,yBAAA7rD,mCAoHzBA,CAhE2B,GAAA8rD,GAAA,yBAAA9rD,mCAgE3BA,CA1CgC,GAAA+rD,GAAA,yBAAA/rD,mCA0ChCA,CAlByB,GAAAgsD,GAAA,yBAAAhsD,mCAkBzBA,CAd0B,GAAAisD,GAAA,yBAAAjsD,2CAlNtBA,sBAAA,GAAAA,0BAAAwC,GAAAijD,MAAA,OAAAjjD,GAAAlB,MAAAkB,GAAAkjD,MAAA,KAiBgB1lD,sBAAA,GAAAA,uBAAA,WAAAwC,GAAAwoD,aACGhrD,+CAAA,wBAGAA,+CAAA,sBAGAA,+CAAA,6BAQZA,sBAAA,GAAAA,uBAAA,OAAAwC,GAAAsoD,cAAAtoD,GAAAsoD,aAAApF,kBAAA,GAWL1lD,+CAAA,OAAAwC,GAAAyoD,g0BE3CFjrD,2BAAA,UAA8BA,mBAAA,GAAeA,sEAAfA,sDAAA+K,EAAAmhD,qCAFhClsD,2BAAA,UAEEA,uBAAA,EAAAmsD,EAAA,cACFnsD,qEADSA,+CAAA,YAAA+K,EAAAqhD,oCAETpsD,2BAAA,uCAEEA,sBAAA,yCAGAA,2BAAA,aAA+BA,mBAAA,GACjCA,uEAJOA,wBACAA,uBADA,UAAA+K,EAAA+F,MAAAkuC,OACAh/C,CADwB,OAAA+K,EAAA+F,MAAAu7C,QAGErsD,sBAAA,GAAAA,8BAAA+K,EAAAmhD,qCAEjClsD,2BAAA,WAEIA,mBAAA,GACJA,qEADIA,uDAAA,IAAA+K,EAAAmhD,UAAA,4BAMJlsD,2BAAA,YAEEA,yBAAA,KACFA,4BChBI,MAAOssD,EALbztD,cAMEE,KAAA+R,MAAQC,KAKRhS,KAAAqtD,SAAmB,GAEnBrtD,KAAAwtD,cAAe,EAEfxtD,KAAAytD,QAAS,EAETztD,KAAA0tD,YAAa,EAEb1tD,KAAA2tD,YAAa,EAEb3tD,KAAA4tD,kBAAmB,EAEnB5tD,KAAA6tD,sBAAuB,kDAlBZN,EAAa,4DAAbA,EAAankD,UAAA,cAAA+C,OAAA,CAAAghD,UAAA,YAAAE,SAAA,WAAAG,aAAA,eAAAC,OAAA,SAAAC,WAAA,aAAAC,WAAA,aAAAC,iBAAA,mBAAAC,qBAAA,wBAAAC,mBAAAxsD,EAAAkJ,MAAA,EAAAC,KAAA,GAAAC,OAAA,ocAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,mCDR1BrI,2BAAA,WAaEA,uBAXA,EAAA8sD,EAAA,WAWA9sD,CAVgC,EAAA+sD,EAAA,WAUhC/sD,CANkC,EAAAgtD,EAAA,YAUlChtD,2BAAA,WAEEA,yBAAA,GACFA,2BACAA,uBAAA,EAAAitD,EAAA,aAIFjtD,kCAxBKA,uBAAA,UAAAA,4BAAA,EAAAQ,EAAAgC,EAAA+pD,aAAA,qBAAA/pD,EAAA4pD,SAAA5pD,EAAAgqD,QAAAhqD,EAAAgqD,QAAA,cAAAhqD,EAAA4pD,SAAA5pD,EAAAkqD,aAEE1sD,+CAAA,gBAAAwC,EAAA4pD,UAGApsD,+CAAA,gBAAAwC,EAAA4pD,UAOApsD,+CAAA,qBAAAwC,EAAA4pD,UAKApsD,+CAAA,UAAAA,4BAAA,GAAAktD,EAAA1qD,EAAAmqD,iBAAAnqD,EAAAoqD,uBAIC5sD,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAiqD,4LEdJU,EAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,uLAGTC,KAAQ,OACRC,KAAQ,IChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,gHAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,uCACLoO,UAAa,2BAGjBnO,KAAQ,OACRC,KAAQ,qCCtBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,yIAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,mHAGTC,KAAQ,cACRC,KAAQ,ICrBNC,EAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,gGAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,qCAGTC,KAAQ,OACRC,KAAQ,ICrBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,kIAGTC,KAAQ,WACRC,KAAQ,IChBN+zD,EAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,qRAGTC,KAAQ,OACRC,KAAQ,0BCoNJ,MAAOg0D,EACXvuD,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAC3B6xB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEJ,iDAXWP,GAAgBptD,qBAAAC,eAAA,2DAAhBmtD,GAAgB,+DA5ChB,IAACtjD,oBAAcC,gCAA4BC,QAAA,CAzFpDE,eACAK,cACAC,sBACAojD,iBACAjxB,mBACAkxB,uBACAvjD,mBACAE,sBACA0iB,IACA4gC,IACAC,oBACAC,qBACAvjD,yBACAJ,eACA4jD,sBACAC,sBACAnyB,gBACAG,eACAiyB,qBACAhyB,aACAiyB,gBACAnyB,aACAoyB,kBACAC,gBACA9xB,cACAR,cACAO,eACAH,iBACAK,mBACAC,mBACA6xB,yBACAC,iBACAlyB,eACAO,iBACA4xB,0BAEAC,cACAC,eACAC,eACAC,cACAC,gBACAnkD,wBAAmB,+HCpIjB3K,+BAAA,4BACAA,2BAAA,OACEA,mBAAA,GACFA,qEADEA,uDAAA,IAAAM,EAAAiwB,YAAA,MCCF,MAAO4H,UAAmC42B,YAK9ClwD,YAC0C+zB,EACCiF,EACF/E,EAGDgF,EACIvH,EAGJkJ,GAAU,EACTu1B,EACA92B,EACG+2B,EACDxK,GAAa,EACbyK,GAAa,GAEtD9hD,QAhBwCrO,KAAA6zB,YACC7zB,KAAA84B,aACF94B,KAAA+zB,WAGD/zB,KAAA+4B,UACI/4B,KAAAwxB,cAGJxxB,KAAA06B,UACC16B,KAAAiwD,WACAjwD,KAAAm5B,WACGn5B,KAAAkwD,cACDlwD,KAAA0lD,aACA1lD,KAAAmwD,aAjBnCnwD,KAAAowD,UAAW,EAoBjBpwD,KAAKqwD,iBAAmB,IAAIC,mBAAiB,GAC/C,CAEA7hD,WAGE,GAFAzO,KAAKkwD,YAAclwD,KAAKkwD,aAAe,GACvClwD,KAAKkwD,YAAYK,UAAevwD,KAAKiwD,UAChCjwD,KAAK+zB,SACR,MAAM,IAAI5Q,MAAM,4BACX,IAAKnjB,KAAK84B,WACf,MAAM,IAAI3V,MAAM,0BACX,IAAKnjB,KAAK6zB,UACf,MAAM,IAAI1Q,MAAM,oBACX,IAAKnjB,KAAK+4B,UAAY/4B,KAAKwxB,YAChC,MAAM,IAAIrO,MAAM,yBAEpB,CAEA6G,cACMhqB,KAAKm5B,UAAYn5B,KAAKowD,UACxBpwD,KAAKm5B,UAET,CAEAzF,qBACE1zB,KAAKqwD,iBAAiB9qC,UAAU,CAAEE,gBAAgB,GACpD,iDAhDW2T,GAA0Bn4B,8BAMf,YAAW,GAAAA,8BACX,aAAY,GAAAA,8BACZ,WAAU,GAAAA,8BAGV,UAAS,GAAAA,8BACT,cAAa,GAAAA,8BAGb,UAAS,GAAAA,8BACT,WAAU,GAAAA,8BACV,WAAU,GAAAA,8BACV,cAAa,GAAAA,8BACb,aAAY,GAAAA,8BACZ,aAAY,+DApBvBm4B,EAA0BhwB,UAAA,4BAAAyd,SAAA,CAAA5lB,+BAN1B,CACT,CAAEyO,QAAS,UAAWE,UAAU,GAChC,CAAEF,QAAS,aAAcE,UAAU,GACnC,CAAEF,QAAS,aAAcE,UAAU,KACpC3O,wCAAAuJ,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,WDRU5C,2EAAA,wbALbvI,2BAAA,iBAEWA,uBAAA,6BAAAA,iCAAAsL,GAAAtL,wBAAmBwC,EAAA+sD,aAAY,GACxCvvD,2BAAA,wBAAkBA,uBAAA,yBAAAA,iCAAAsL,GAAAtL,wBAAewC,EAAA+sD,aAAY,GAC3CvvD,2BAAA,UAAAA,mBAAA,KAEFA,6BAEEA,2BADF,cACEA,CADuB,cAMrBA,uBADA,EAAAwvD,EAAA,qBACAxvD,CADgE,EAAAyvD,EAAA,WAKpEzvD,6BAEAA,2BAAA,4BAAsBA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,SAAAtwB,EAAA4sD,iBAAA/vD,OAAgC,GAO7EW,mCAzBWA,uBAAA,OAAAwC,EAAAktD,MAIE1vD,sBAAA,GAAAA,sBAAAwC,EAAAowB,sCAKH5yB,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA4sD,kBAEWpvD,sBAAA,GAA2BA,uBAA3B,mBAAAwC,EAAAs1B,QAA2B93B,CAAA,0BAAAwC,EAAAysD,aACtCjvD,+CAAA,OAAAwC,EAAA+tB,aAOcvwB,wBAIAA,uBAJA,OAAAwC,EAAA4sD,iBAIApvD,CAJyB,aAAAwC,EAAAq1B,WAIzB73B,CAHyB,aAAAwC,EAAA0sD,WAGzBlvD,CAFyB,aAAAwC,EAAAiiD,WAEzBzkD,CADyB,mYEd/CA,2BAAA,YAE6BA,mBAAA,GAAQA,qEAD/BA,uBAAA,QAAA+K,EAAA4kD,MACuB3vD,sDAAA+K,EAAA4kD,OCCzB,MAAOC,EAmBX/wD,YAAoBgxD,GAAA9wD,KAAA8wD,SAZpB9wD,KAAA+wD,MAAO,EAIP/wD,KAAA3F,KAAO,KAMP2F,KAAA+R,MAAQC,IAEoC,CAEpCg/C,UACN,MAAM7N,EAAUC,SAAS6N,eAAejxD,KAAKkxD,QAC7C,OAAO/N,GAAS7iD,OAAS6iD,GAASgO,WACpC,CAGAC,UACE,IACE,MAAMC,KAAUC,YACVV,EAAO5wD,KAAK+wD,KAAO/wD,KAAKgxD,UAAYhxD,KAAKkxD,OACzCK,EAAWA,KACfvxD,KAAK8wD,OAAO7+B,QAAQ,6CAA4C,EAE9D,CAAC,UAAW,KAAM,MAAO,UAAU/vB,SAASmvD,EAAQj3D,MAGtDo3D,UAAUC,UAAUC,UAAUd,GAAMppB,KAAK,IAAM+pB,KAG/CC,UAAUjyB,YACPkP,MAAM,CAAEr0C,KAAM,oBACdotC,KAAM3rC,KACgB,YAAjBA,EAAOwuB,OAAwC,WAAjBxuB,EAAOwuB,QACvCmnC,UAAUC,UAAUC,UAAUd,GAAMppB,KAAK,IAAM+pB,IAAU,EAInE,OACEvxD,KAAK8wD,OAAOvvC,MAAM,wCACpB,CACF,iDAnDWsvC,GAA6B5vD,8BAAAC,iBAAA,4DAA7B2vD,EAA6BznD,UAAA,iCAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAA7BrI,uBAAA,0BAAAwC,EAAA2tD,SAAS,2GDPD5nD,sRAJrBvI,2BAAA,cAMQA,uBAAA,0BAASwC,EAAA2tD,SAAS,GACxBnwD,uBAAA,EAAA2wD,EAAA,cAKA3wD,sBAAA,eACFA,kCAVQA,uBADA,UAAAA,4BAAA,EAAAyI,EAAAjG,EAAAmtD,MACA3vD,CAD6C,OAAAwC,EAAApJ,MAKnD4G,kDAAAwC,EAAAmtD,KAAA,sXEOA3vD,2BAAA,sBAAgBA,uBAAA,uBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAeM,EAAAswD,cAAAjnD,GAAqB,GACpC3J,6BAAA,yBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,GAAAA,sCAAAM,EAAA8E,KAAAuE,KAAArJ,EAAA8E,KAAAuE,GAAA3J,wBAAA2J,EAAA,GAIhB3J,2BAAA,6BAAuBA,6BAAA,yBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,GAAAA,sCAAAM,EAAAuwD,KAAAlnD,KAAArJ,EAAAuwD,KAAAlnD,GAAA3J,wBAAA2J,EAAA,GAEA3J,uBAAA,uBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAeM,EAAAswD,cAAAjnD,GAAqB,GACzD3J,2BAAA,cACmBA,mBAAA,QAAEA,2BACrBA,2BAAA,cAAmBA,mBAAA,QAEvBA,4EAXkBA,6BAAA,UAAAM,EAAA8E,MACApF,uBAAA,WAAAM,EAAAgpC,UAGOtpC,qDAAA,UAAAM,EAAAuwD,MACA7wD,uBAAA,WAAAM,EAAAgpC,oCAPvBtpC,2BAAA,oBAAgCA,mBAAA,oBAChCA,uBAAA,EAAA8wD,EAAA,wBAaF9wD,qEATmBA,sBAAA,GAAAA,uBAAA,OAAAM,EAAAywD,UCPb,MAAOC,EAgCXnyD,YAAoBoyD,GAAAlyD,KAAAkyD,WA3BpBlyD,KAAAmyD,YAAa,EAGbnyD,KAAAgyD,SAAU,EAGVhyD,KAAA5F,KAAO,GAGP4F,KAAAoyD,WAAa,GAEbpyD,KAAAqyD,YAAc,GAEdryD,KAAAuqC,UAAW,EASXvqC,KAAAsyD,KAAoC,GAI3BtyD,KAAAuyD,aAAuB,CACY,CAE5C9jD,WACEzO,KAAKwyD,QAAUxyD,KAAKkyD,SAASO,WACxBzyD,KAAKgyD,QAEChyD,KAAKmyD,WACdnyD,KAAKk4B,OAAS,sBAEdl4B,KAAKk4B,OAAS,mBAJdl4B,KAAKk4B,OAAS,aAOhB,IAAIK,EAAMluB,IAAOrK,KAAK4T,SAAStT,MAAON,KAAKk4B,UAEtCK,EAAIm6B,WAAan6B,EAAIo6B,SAAStoD,UACjCkuB,EAAMluB,OAEJrK,KAAKuyD,YACPvyD,KAAKsyD,KAAKp2D,KAAK,IAEf8D,KAAKsyD,KAAKp2D,KAAKq8B,EAAIL,OAAO,eAG5B,MAAM7xB,EAAOkyB,EAAIL,OAAO,YACxBl4B,KAAKqG,KAAOkyB,EAAIL,OAAO,SACvBl4B,KAAK8xD,KAAOv5B,EAAIE,QAAU,GAAK,KAAO,KAEtCz4B,KAAK4yD,SAAW,CACdN,KAAMtyD,KAAKsyD,KAAK,GAChBjsD,KAAMA,EACNyrD,KAAM9xD,KAAK8xD,MAGb9xD,KAAK6xD,eACP,CAEAA,cAAcgB,GACZ,GAAIA,EACF,GAAqB,IAAjBA,EAAMz3D,OACR4E,KAAK4yD,SAASN,KAAO,CAAEA,KAAM,KAAMjsD,KAAM,KAAMyrD,KAAM,WAAI,GAChDnyD,MAAMmzD,QAAQD,GACvB7yD,KAAK4yD,SAASN,KAAOjoD,IAAOwoD,EAAM,IAAI36B,OAAO,mBAAY,GAChD26B,GAAS,CAAC,KAAM,MAAM3wD,SAAS2wD,GAAQ,CAChD,MAAME,EAAgB1oD,IAAOrK,KAAK4yD,SAASvsD,KAAM,cAC3C2sD,EAAgBD,EAAcv6B,IAClC,OACCu6B,EAAct6B,OAAS,IAAiB,OAAVo6B,EAAiB,GAAK,IAEvD7yD,KAAK4yD,SAASvsD,KAAOgE,IAAO2oD,GAAe96B,OAAO,YAClDl4B,KAAK4yD,SAASd,KAAOe,CACvB,KAAO,CACL,MAAMxsD,EAAOwsD,EACb7yD,KAAK4yD,SAASvsD,KAAOgE,IAAO,GAAGrK,KAAK4yD,SAASN,QAAQjsD,KAAQrG,KAAK4yD,SAASd,QAAQ55B,OACjF,WAEJ,CAEF,GAAIl4B,KAAK4yD,SAAU,CACjB,MAAMA,EAAWvoD,IAAO,GAAGrK,KAAK4yD,SAASN,QAAQtyD,KAAK4yD,SAASvsD,QAAQ6xB,OAAOl4B,KAAKk4B,QAEnFyrB,WAAW,KACT3jD,KAAK4T,QAAQ+L,SAASizC,EAAQ,EAElC,MACEjP,WAAW,KACT3jD,KAAK4T,QAAQ+L,SAAS,GAAE,EAG9B,iDApGWsyC,GAAuBhxD,8BAAAC,eAAA,4DAAvB+wD,EAAuB7oD,UAAA,0BAAA+C,OAAA,CAAAyH,QAAA,UAAAu+C,WAAA,aAAAH,QAAA,UAAA53D,KAAA,OAAAg4D,WAAA,aAAAC,YAAA,cAAA9nB,SAAA,WAAAgoB,YAAA,eAAA/nD,MAAA,EAAAC,KAAA,EAAAC,OAAA,0eAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDThCrI,2BAHJ,UAGIA,CAHQ,UAGRA,CAD4B,oBACZA,mBAAA,GACdA,2BAAA,uBAKkBA,uBAAA,uBAAA2J,GAAA,OAAenH,EAAAouD,cAAAjnD,EAAqB,GAIxD3J,6BACFA,uBAAA,EAAAgyD,EAAA,wBAgBFhyD,oCA3BoBA,sBAAA,GAAAA,+BAAA,GAAAwC,EAAArJ,KAAA,KAEI6G,wBAMAA,uBANA,cAAAwC,EAAA4uD,YAMApxD,CAN2B,QAAAwC,EAAA6uD,KAM3BrxD,CAHc,aAAAwC,EAAA2uD,WAGdnxD,CADyB,WAAAwC,EAAA8mC,UAI9BtpC,+CAAA,OAAAwC,EAAAuuD,qiBEVf/wD,+BAAA,+BAQEA,2BAAA,uBAAAA,wBAAA,KAIEA,sBAAA,OACFA,+FADKA,sBAAA,GAAAA,sBAAAM,GAAA2xD,iEAELjyD,+BAAA,+BAGIA,2BAAA,OAAAA,wBAAA,uCAC0EA,sBAAA,YAAoCA,gGAAtGA,sBAAA,GAA0EA,sBAA1EA,wBAAA,IAAAM,GAAA4xD,mBAA0ElyD,CAARM,GAAA4pB,UAAA,4DAI/BlqB,2BAAvC,OAAuCA,CAAA,YAAQA,mBAAA,GAAuBA,0DAAvBA,sBAAA,GAAAA,8BAAAmyD,iCAFjDnyD,2BAAA,OAAAA,mBAAA,uCAA6FA,2BAC7FA,2BAAA,QACEA,uBAAA,EAAAoyD,EAAA,aACFpyD,wEAHQA,sBAAA,GAAAA,8CAAA,IAAAM,GAAA4xD,+CAEmBlyD,sBAAA,GAAAA,uBAAA,UAAAM,GAAA4pB,wCAN/BlqB,2BAAA,UAGEA,uBAFA,EAAAqyD,EAAA,WAEAryD,CADQ,EAAAsyD,EAAA,yBAAAtyD,oCAOVA,oGARMA,wBAA8BA,uBAA9B,WAAAM,EAAA4pB,UAAA/vB,OAA8B6F,CAAA,WAAAuyD,iCAUlCvyD,2BAAA,OAAAA,mBAAA,uCAA6GA,uEAArGA,sBAAA,GAAAA,8CAAA,IAAAM,GAAA4xD,mBAAAlyD,CAAqGM,GAAA2pB,sEAE/GjqB,+BAAA,6BAEEA,oCAAA,GACEA,2BAAA,qBAAAA,mBAAA,MAMkCA,uEAHpBA,+CAAA,0CAqBZA,2BAAA,aAEEA,oCAAA,GAAAA,mBAAA,0CACFA,sDACAA,2BAAA,aAEEA,oCAAA,GAAAA,mBAAA,0CACFA,wDAHAA,uBAJA,EAAAwyD,GAAA,cAIAxyD,CAH+B,EAAAyyD,GAAA,wFADxBzyD,uBAAA,OAAAM,GAAAoyD,aAAAtjD,UAAA,eAAAE,EAAA,aAIAtP,+CAAA,OAAAM,GAAAoyD,aAAAtjD,UAAA,eAAAE,EAAA,gDAnBTtP,2BAAA,uBAAAA,wBAAA,MAOEA,sBAAA,cAMFA,mDACAA,uBAAA,EAAA2yD,GAAA,yBAAA3yD,6GAVgBA,uBADA,WAAAM,EAAAoyD,aAAAviD,SAAAyiD,aAAAviD,OAAA/P,EAAAoyD,aAAAviD,SAAAyiD,aAAAtiD,MACAtQ,CADiG,cAAA6yD,kCAoC3H7yD,2BAAA,WAAAA,mBAAA,wCAGAA,uEADEA,sBAAA,GAAAA,8CAAA,IAAAM,GAAA4xD,mBAAAlyD,CACFM,GAAA2pB,6CCxEI,MAAOJ,WAAyCklC,YAQpDlwD,YACuCirB,GACSG,GACNC,EACQgoC,EAAoB,SACzB92C,GACFmpC,GACEuO,GACD7D,GACAgD,GAGnC9nC,GAGA4oC,IAEP3lD,QAhBqCrO,KAAA+qB,UACS/qB,KAAAkrB,mBACNlrB,KAAAmrB,YACQnrB,KAAAmzD,oBACLnzD,KAAAqc,gBACFrc,KAAAwlD,cACExlD,KAAA+zD,gBACD/zD,KAAAkwD,eACAlwD,KAAAkzD,eAGnClzD,KAAAorB,0BAGAprB,KAAAg0D,2BAnBTh0D,KAAAi0D,WAAajpC,IAsBXhrB,KAAKmzD,kBAAoBA,GAAqB,SAC9CnzD,KAAK+qB,OAAS/qB,KAAK+qB,QAAUC,IAAekpC,MAC9C,CAEAzlD,WACE,MAAM2C,GAAW,CACf2Z,OAAQ,IAAI3X,qBAAmBpT,KAAK+qB,QACpCopC,aAAc,IAAI/gD,sBAAmB,EAAO,CAC1CC,WAAY,CACVyO,KAAasyC,UACX,CACErpC,OAAQC,IAAekpC,QAEzB,CAAC5gD,aAAW+gD,kBAIlBR,aAAc,IAAIzgD,qBAAmB,GAAI,CACvC0O,KAAasyC,UAAU,CAAErpC,OAAQ/qB,KAAKi0D,WAAWhpC,MAAQ,CACvDjrB,KAAKs0D,kBAAkBtvD,KAAKhF,MAC5BsT,aAAWC,cAQjB,GAJIvT,KAAKu0D,iBACPnjD,GAASojD,MAAWx0D,KAAKu0D,gBAE3Bv0D,KAAK2zD,aAAe,IAAIxgD,IAAY/B,KAC9BpR,KAAKqc,eAAgBrc,KAAKorB,uBAC9B,MAAM,IAAIjI,MAAM,2BAEpB,CAEAmxC,kBAAkB1gD,IAChB,OAAI5T,KAAKmrB,WAAavX,GAAQtT,QAAUf,OAAOS,KAAKmrB,YAAY,IACvD,CAAEspC,eAAe,GAEnB,IACT,CAEAC,mBACM10D,KAAKorB,uBACPprB,KAAKorB,yBAAyBzc,UAAU,CACtC4S,MAAOvhB,KAAK0zB,mBAAmB1uB,KAAKhF,MACpColB,SAAUplB,KAAK20D,UAAU3vD,KAAKhF,QAGhCA,KAAKqc,cAET,CAEAu4C,iBACM50D,KAAKg0D,wBACPh0D,KAAKg0D,0BAA0BrlD,UAAU,CACvC4S,MAAOvhB,KAAK0zB,mBAAmB1uB,KAAKhF,MACpColB,SAAUplB,KAAK20D,UAAU3vD,KAAKhF,QAGhCA,KAAKwlD,YAET,CAEAmP,YACE30D,KAAKwwD,YACP,CAEA98B,qBACE1zB,KAAK2zD,aAAapuC,UAAU,CAAEE,gBAAgB,GAChD,mDA9FWqF,IAAgC7pB,8BASrB,SAAQ,GAAAA,8BACR,kBAAiB,GAAAA,8BACjB,YAAW,GAAAA,8BACX,oBAAmB,GAAAA,8BACnB,eAAc,GAAAA,8BACd,aAAY,GAAAA,8BACZ,eAAc,GAAAA,8BACd,cAAa,GAAAA,8BACb,cAAa,GAAAA,8BAEzB,yBAAwB,GAAAA,8BAGxB,0BAAyB,+DAtBxB6pB,GAAgC1hB,UAAA,wBAAAC,UAAA,SAAAC,GAAA7F,MAAA,EAAA6F,4BAChCurD,IAAqB,+NDA1BrrD,2EAAA,oCAAG,iCAAiB,wCAMVA,yGAA8B,kCAAoC,qCAAQ,mCAAkB,yCAE1FA,yGAA8B,uDAOhCA,wGAA8B,+CAAiD,uCAWlEA,6FAGIA,2FASDA,2GAHKA,yFACzB,gDAUqBA,qGAIAA,8GAmBxBA,4EACP,kCAAoC,0nCAtFxCvI,2BAAA,kBAEWA,uBAAA,6BAAAA,iCAAAsL,GAAAtL,wBAAmBwC,EAAA+sD,aAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,yBAAAA,iCAAAsL,GAAAtL,wBAAewC,EAAA+sD,aAAY,GAC3CvvD,uBAAA,EAAA6zD,EAAA,uBACF7zD,2BAGEA,2BADF,eACEA,CADuB,eAWrBA,uBANA,EAAA8zD,EAAA,wBAMA9zD,CAHqB,EAAA+zD,EAAA,uBAIrB/zD,2BAAA,YAcEA,uBAbA,EAAAg0D,EAAA,cAaAh0D,CAbsC,GAAAi0D,EAAA,yBAAAj0D,mCAatCA,CAHsB,GAAAk0D,GAAA,uBAItBl0D,2BAAA,aAUEA,uBATA,GAAAm0D,GAAA,sBASAn0D,CAT2E,GAAAo0D,GAAA,yBAAAp0D,oCAsCnFA,iCACAA,2BAAA,iEACsBA,uBADA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAixD,mBAAkB,EACvCzzD,CADwC,6BAAAA,iCAAAsL,GAAAtL,wBAAAwC,EAAA+hD,WACR/hD,EAAAmxD,iBAAmBnxD,EAAAkxD,YAAW,GAMtF1zD,6BAEAA,uBAAA,GAAAq0D,GAAA,yBAAAr0D,+IAlFWA,uBAAA,OAAAwC,EAAAktD,MAGQ1vD,sBAAA,GAAAA,uBAAA,mBAAAs0D,IAMTt0D,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAkwD,cAEa1yD,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAyvD,aAMFjyD,wBAAgCA,uBAAhC,mBAAAwC,EAAAswD,aAAgC9yD,CAAA,0BAAAwC,EAAAysD,aAEtCjvD,sBAAA,GAAiBA,uBAAjB,OAAAwC,EAAA0nB,UAAiBlqB,CAAA,WAAAu0D,GAaTv0D,sBAAA,GAA0CA,uBAA1C,mBAAAwC,EAAAgyD,uBAA0Cx0D,CAAA,0BAAAA,4BAAA,GAAAyI,EAAAjG,EAAAkwD,eAExC1yD,sBAAA,GAAmCA,uBAAnC,OAAAwC,EAAAsnB,QAAAtnB,EAAAwwD,WAAAC,OAAmCjzD,CAAA,WAAAy0D,IAyCpCz0D,sBAAA,GAGAA,uBAHA,OAAAwC,EAAAkwD,aAGA1yD,CAHqB,aAAAA,wBAAA,MAAAwC,EAAA0vD,mBAAA,IAAA1vD,EAAAynB,gBAGrBjqB,CAFsE,eAEtEA,CADkB,2BAAAwC,EAAA0vD,mBAAA,WAAA1vD,EAAA0vD,kBAAA,8sBErEpC,MAAOwC,EAOX71D,YAAoB81D,GAAA51D,KAAA41D,aALX51D,KAAA61D,QAAUrsD,wBAK0B,CAE7CiF,WACMzO,KAAK81D,YACP91D,KAAK+1D,OAAS/1D,KAAK41D,WAAWI,aAAah2D,KAAKgjC,SAEhDhjC,KAAK41D,WAAW/sB,cAAc7oC,KAAKgjC,QAAUhkB,IAC3Chf,KAAK+1D,OAAS/2C,GAGpB,iDAjBW22C,GAAY10D,8BAAAC,KAAA,4DAAZy0D,EAAYvsD,UAAA,aAAA+C,OAAA,CAAA62B,QAAA,UAAA6yB,QAAA,UAAAC,YAAA,eAAAtrD,MAAA,EAAAC,KAAA,EAAAC,OAAA,+CAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICTzBrI,2BAAA,SAEqBA,mBAAA,GAAaA,kCAF/BA,kCAAA,OAAAwC,EAAAsyD,OAAA90D,2BAEkBA,sDAAAwC,EAAAoyD,iHCUjB50D,2BAAA,UAAAA,mBAAA,KACkBA,qEAATA,8CAAAM,EAAA8D,mCCNP,MAAO4wD,EALbn2D,cAOEE,KAAAqF,MAAgB,WAChBrF,KAAAk2D,cAAwB,kDAHbD,EAA6B,4DAA7BA,EAA6B7sD,UAAA,gCAAA+C,OAAA,CAAA9G,MAAA,SAAAyoD,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDApC5C,2EAAA,yCAAY,4CAMLA,2EAAA,gRAVTvI,2BAHJ,aAGIA,CAHM,oBAGNA,CAD+B,0BAIXA,uBAAA,sBAAAA,iCAAAsL,GAAAtL,wBAAAwC,EAAAyyD,cAAAzyD,EAAAyyD,aAAA,GAHpBj1D,wBAAA,KAIEA,yBAAA,GACFA,wBACFA,6BAEAA,uBAAA,EAAAk1D,EAAA,yBAAAl1D,oCAIFA,sEAZwBA,sBAAA,GAAAA,uBAAA,QAAAm1D,2PEDpBn1D,2BAAA,sBACgBA,uBAAA,wBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAcM,EAAAikD,aAAY,GACNvkD,wEAApBA,uBAAA,OAAAM,EAAA80D,4EAChBp1D,2BAAA,wBACkBA,uBAAA,0BAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAgBM,EAAA8a,eAAc,GAKDpb,mBAAA,GAAgBA,wEAA7CA,uBAJA,WAAAM,EAAAgpC,SAIAtpC,CAJqB,OAAAM,EAAAkR,KAIrBxR,CAHa,YAAAM,EAAA+0D,WAGbr1D,CAFwB,aAAAM,EAAAg1D,eAEKt1D,sDAAAM,EAAA+0D,sCAXnDr1D,oCAAA,GACEA,2BAAA,WAIEA,uBAHA,EAAAu1D,EAAA,uBAGAv1D,CADoC,EAAAw1D,EAAA,0BAQtCx1D,yGAXKA,+CAAA,UAAAM,EAAAm1D,eACcz1D,+CAAA,OAAAM,EAAA4uD,YAGElvD,+CAAA,OAAAM,EAAAmkD,4EAYnBzkD,2BAAA,sBACgBA,uBAAA,wBAAAA,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAAcM,EAAAikD,aAAY,GAIZvkD,wEADdA,uBAFA,OAAAM,EAAA80D,WAEAp1D,CAFmB,YAAAM,EAAAkkD,UAEnBxkD,CADuB,aAAAM,EAAAmkD,4EAGvCzkD,2BAAA,yBACkBA,uBAAA,0BAAAA,0BAAA21D,GAAA,MAAAr1D,EAAAN,0BAAA,UAAAA,wBAAgBM,EAAA8a,eAAc,GAOhBpb,mBAAA,GAAgBA,wEAD9BA,uBALA,WAAAM,EAAAgpC,SAKAtpC,CALqB,OAAAM,EAAAkR,KAKrBxR,CAJa,YAAAM,EAAA+0D,WAIbr1D,CAHwB,YAAAM,EAAAkkD,UAGxBxkD,CADuB,aAAAM,EAAAg1D,eAETt1D,sDAAAM,EAAA+0D,sCAflCr1D,2BAAA,sBAOEA,uBANA,EAAA41D,EAAA,uBAMA51D,CAD8B,EAAA61D,EAAA,0BAUhC71D,qEAfmBA,+CAAA,OAAAM,EAAA4uD,YAMElvD,+CAAA,OAAAM,EAAAmkD,aCRjB,MAAOqR,EAgCXj3D,YACU6/B,EACA3xB,EACA6Z,EACAmvC,EACAt5C,GAJA1d,KAAA2/B,WACA3/B,KAAAgO,eACAhO,KAAA6nB,eACA7nB,KAAAg3D,kBACAh3D,KAAA0d,QAhCV1d,KAAAi3D,kBAAoB,IAAIntD,eAExB9J,KAAAk3D,gBAAkB,IAAIptD,eAKtB9J,KAAA0lD,YAAa,EAEb1lD,KAAAmwD,YAAa,EAEbnwD,KAAA02D,cAAgB,GAEhB12D,KAAAm3D,SAAW,GAMXn3D,KAAAuqC,UAAW,EAEXvqC,KAAAylD,WAAY,EAIZzlD,KAAA2lD,gBAAiB,CAQd,CAEHl3C,WACEzO,KAAKs2D,WAAat2D,KAAKs2D,YAAct2D,KAAKgO,aAAakS,OACvDlgB,KAAKq2D,WAAar2D,KAAKq2D,YAAcr2D,KAAKgO,aAAa43C,OACvD5lD,KAAK2lD,eAAuC,UAAtB3lD,KAAK0d,MAAMmoC,MACnC,CAEAxpC,eACErc,KAAKi3D,kBAAkB/sD,MACzB,CAEAs7C,aACgD,IAA1CxlD,KAAKk3D,gBAAgBnR,UAAU3qD,OAC7B4E,KAAKylD,WAAazlD,KAAKg3D,gBAAgBI,gBACzCp3D,KAAKg3D,gBAAgBxjC,aACZxzB,KAAKylD,WAAazlD,KAAK2lD,eAChC3lD,KAAK2/B,SAASmmB,OACL9lD,KAAK6nB,aAAauvC,gBAC3Bp3D,KAAK6nB,aAAa2L,aAElBxzB,KAAK2/B,SAASmmB,OAGhB9lD,KAAKk3D,gBAAgBhtD,MAEzB,iDAhEW6sD,GAAwB91D,8BAAAC,YAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,kBAAA,4DAAxB6tD,EAAwB3tD,UAAA,2BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BACxBurD,IAAqB,mnCDDlC5zD,uBAfA,EAAAo2D,EAAA,qBAeAp2D,CAfmD,EAAAq2D,EAAA,yBAAAr2D,4EAAlBA,uBAAlB,QAAAwC,EAAAgiD,UAAkBxkD,CAAA,WAAAs2D,8WEK7Bt2D,2BAAA,WAEEA,mBAAA,GACFA,uEADEA,uDAAA,IAAAM,GAAAsyB,UAAA,kCAQA5yB,2BAAA,UACoBA,mBAAA,GAAaA,uEAAbA,sDAAAM,GAAAq9B,sCAGhB39B,2BAAA,uBAAAA,wBAAA,KAOEA,sBAAA,cAOFA,wIAVgBA,uBAHA,eAAAu2D,GAAAp9D,KAGA6G,CAH2B,UAAAM,GAAAk2D,SAAAD,IAG3Bv2D,CAF2B,cAAAM,GAAAk2D,SAAAD,IAE3Bv2D,CAD+B,8BAAAu2D,GAAA,KAAAA,GAAAjkD,UAAAikD,GAAA71D,MAAA,IAMtCV,sBAAA,GAGAA,uBAHA,KAAAu2D,GAAAp9D,KAGA6G,CAHiB,OAAAu2D,GAAAp9D,KAGjB6G,CAFmB,kBAAAu2D,GAAAp9D,KAEnB6G,CAD8B,UAAAM,GAAAk2D,SAAAD,KALrCv2D,sBAAAu2D,GAAA71D,8DASFV,sBAAA,uGAMYA,uBALA,UAAAM,GAAAk2D,SAAAD,IAKAv2D,CAL2B,cAAAM,GAAAk2D,SAAAD,IAK3Bv2D,CAJ+B,QAAAu2D,GAAA71D,MAI/BV,CAHqB,8BAAAu2D,GAAA,KAAAA,GAAAjkD,UAAAikD,GAAA71D,MAAA,GAGrBV,CAF+D,kBAAAu2D,GAAAp9D,KAE/D6G,CAD8B,KAAAu2D,GAAAp9D,mCAG1C6G,2BAAA,uBAAAA,wBAAA,KAOEA,sBAAA,cAMFA,wIATgBA,uBAHA,eAAAu2D,GAAAp9D,KAGA6G,CAH2B,UAAAM,GAAAk2D,SAAAD,IAG3Bv2D,CAF2B,cAAAM,GAAAk2D,SAAAD,IAE3Bv2D,CAD+B,8BAAAu2D,GAAA,KAAAA,GAAAjkD,UAAAikD,GAAA71D,MAAA,IAKtCV,sBAAA,GAEAA,uBAFA,KAAAu2D,GAAAp9D,KAEA6G,CAFiB,OAAAu2D,GAAAp9D,KAEjB6G,CADmB,kBAAAu2D,GAAAp9D,MAH1B6G,sBAAAu2D,GAAA71D,8FAmBAV,sBAAA,8FACQA,+CAAA,gBACNA,sBAAA,MAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAC,oGAEF12D,sBAAA,oEACQA,+CAAA,QAAA22D,GAAAt3D,OACNW,sBAAA22D,GAAAhH,+DAjBJ3vD,2BAAA,mBAAAA,wBAAA,KAeEA,uBAJA,EAAA42D,EAAA,gBAIA52D,CAHyB,EAAA62D,EAAA,iBAO3B72D,wIAVYA,uBARA,QAAAu2D,GAAA71D,MAQAV,CARqB,MAAAu2D,GAAAp9D,KAQrB6G,CAPkB,KAAAu2D,GAAAp9D,KAOlB6G,CANiB,kBAAAu2D,GAAAp9D,KAMjB6G,CAL8B,gBAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAx0D,QAK9BjC,CAJsC,oBAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAC,YAItC12D,CAH8C,UAAAM,GAAAk2D,SAAAD,IAG9Cv2D,CAF2B,cAAAM,GAAAk2D,SAAAD,IAE3Bv2D,CAD+B,8BAAAu2D,GAAA,KAAAA,GAAAjkD,UAAAikD,GAAA71D,MAAA,IAGhCV,sBAAA,GAAAA,uBAAA,aAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAC,aAIkB12D,+CAAA,gBAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAx0D,8EAM7BjC,2BAAA,sBAYeA,uBAAA,wBAAA2J,IAAA3J,0BAAA21D,IAAA,MAAAY,GAAAv2D,4BAAAsvD,UAAA,OAAAtvD,wBAAAu2D,GAAAE,WAAAx0D,QAAA0H,GAAA,GAZf3J,wBAAA,KAgBEA,sBAAA,uBACFA,0IAHeA,uBAXA,QAAAu2D,GAAA71D,MAWAV,CAXqB,MAAAu2D,GAAAp9D,KAWrB6G,CAVkB,kBAAAu2D,GAAAp9D,KAUlB6G,CAT8B,KAAAu2D,GAAAp9D,KAS9B6G,CAPiB,UAAAM,GAAAk2D,SAAAD,IAOjBv2D,CAN2B,cAAAM,GAAAk2D,SAAAD,IAM3Bv2D,CAL+B,kBAK/BA,CAJsB,cAAAu2D,IAAA,MAAAA,GAAAE,WAAA,KAAAF,GAAAE,WAAAx0D,QAItBjC,CADoC,8BAAAu2D,GAAA,KAAAA,GAAAjkD,UAAAikD,GAAA71D,MAAA,kCAzEvDV,oCAAA,GACEA,2BAAA,YA2DEA,uBA1DA,EAAA82D,EAAA,wBA0DA92D,CArDqB,EAAA+2D,EAAA,oBAqDrB/2D,CApCiB,EAAAg3D,EAAA,wBAoCjBh3D,CA9BqB,EAAAi3D,GAAA,qBA8BrBj3D,CAXiB,EAAAk3D,GAAA,wBA6BnBl3D,4FA5EmBA,sBAAA,GAAAA,uBAAA,gBAAAu2D,GAAArxD,MAeJlF,+CAAA,kBAAAu2D,GAAArxD,MAQIlF,+CAAA,kBAAAu2D,GAAArxD,MAcJlF,+CAAA,kBAAAu2D,GAAArxD,MAqBGlF,+CAAA,yBAAAu2D,GAAArxD,OC5DpB,MAAOwtB,WAA2Bq8B,YAItClwD,YACUge,GACA/d,GACAq4D,GAGgCvkC,GACHD,GACUE,GACRC,EACD6K,EAAU,GACIy5B,IAEpDhqD,QAZQrO,KAAA8d,eACA9d,KAAAD,aACAC,KAAAo4D,qBAGgCp4D,KAAA6zB,aACH7zB,KAAA4zB,UACU5zB,KAAA8zB,oBACR9zB,KAAA+zB,WACD/zB,KAAA4+B,UACc5+B,KAAAq4D,wBAGtD,CAEA5pD,WACEzO,KAAKif,YACP,CAEAA,aACE,MAAMq5C,GAAqD,GAC3Dt4D,KAAK4zB,OAAO5sB,QAASuxD,KACnBD,GAAeC,GAAMn+D,MAAQ4F,KAAKw4D,kBAAkBD,GAAK,GAE3Dv4D,KAAKy4D,UAAYz4D,KAAK8d,YAAYqZ,MAAMmhC,GAC1C,CAEQE,kBAAkBD,IACxB,IAAIllD,GAA4B,GAC5Bie,GAAsC,GACtCnf,cAAYomD,GAAMhlD,WAAaglD,GAAMhlD,UACvCF,GAAWnX,KAAKoX,aAAWC,UAEzBglD,GAAMllD,aACRA,GAAaA,GAAWzK,OAAO2vD,GAAMllD,aAEnCklD,GAAMjnC,kBACRA,GAAkBA,GAAgB1oB,OAAO2vD,GAAMjnC,kBAGjD,MAAM1d,GAAU,IAAIR,qBAClBjB,cACiB,WAAfomD,GAAMpyD,KAAoBnG,KAAKo4D,kBAAkB7vD,UAAUgwD,GAAMj4D,OAASi4D,GAAMj4D,MAChF,MAEF,CAAE+S,cAAYie,qBAGhB,MAAmB,kBAAfinC,GAAMpyD,MAA4BoyD,GAAMj4D,OAAOsT,GAAQ+L,SAAS44C,GAAMj4D,OAEtEi4D,GAAMG,qBACR9kD,GAAQ+kD,aAAahqD,UAAWrO,KAC9B,MAAMs4D,GAAoB54D,KAAKq4D,sBAAsB/3D,IACrDN,KAAK64D,iBAAiBN,GAAMO,UAAWF,GAAiB,GAGrDhlD,EACT,CAEA6jD,SAASc,IACP,MAAMQ,GAAa/4D,KAAKy4D,UAAU/lD,IAAI6lD,GAAMn+D,MAAMgtC,OAClD,OAAK2xB,GAGU9mD,OAAOC,KAAK6mD,KAAa77D,IAAKqlB,IACpCviB,KAAKg5D,gBAAgBz2C,GAAKw2C,GAAWx2C,IAAMg2C,GAAMnxB,UAE3CxqC,KAAK,QALX,EAMX,CAEQo8D,gBACNz3C,GACA03C,GACAC,IAEA,GAAIA,GAAa,CACf,MAAMC,GAAcD,GAAY33C,IAChC,GAAI43C,GACF,OAAOA,EAEX,CACA,MAAI,CAAC,YAAa,aAAaj3D,SAASqf,IAG/B03C,KAEK,aAAV13C,GACK/X,mCAEK,YAAV+X,GACK/X,iEAEFA,6BACT,CAEA4vD,aAAavwD,IACM7I,KAAK4zB,OACnBvP,OAAQk0C,IAAyB,WAAfA,GAAMpyD,MACxBjJ,IAAKq7D,IAAUA,GAAMn+D,MACf4M,QAASub,KAChB,MAAMjiB,GAAQuI,GAAO0Z,IACjBjiB,KACFuI,GAAO0Z,IAAOviB,KAAKD,UAAUs5D,QAAQ/4D,IAAK,GAG9CN,KAAKwwD,aACDr+C,eAAanS,KAAK+zB,WACpB/zB,KAAK+zB,SAASlrB,GAElB,CAEAgwD,iBAAiBz+D,GAAek/D,IAC9B,MAAMf,GAAQv4D,KAAKy4D,UAAU/lD,IAAItY,IACjCm+D,GAAMz0C,mBAAmBw1C,IACzBf,GAAM12C,wBACR,mDAxHW8R,IAAkB1yB,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAUP,YAAW,GAAAA,8BACX,SAAQ,GAAAA,8BACR,mBAAkB,GAAAA,8BAClB,WAAU,GAAAA,8BACV,UAAS,GAAAA,8BACT,wBAAuB,+DAflC0yB,GAAkBvqB,UAAA,oBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,sBDOA5C,4EACnB,kCACA,gDAqBmBA,4EACnB,kCACA,gDAkBAA,2EAAA,wDAEE,oCACF,8FACA,0DAEE,sCACF,sIAmBAA,0EAAA,gDAAmB,wuDA7F/BvI,2BAAA,iBAEWA,uBAAA,6BAAAA,iCAAAsL,IAAAtL,wBAAmBwC,GAAA+sD,aAAY,GAExCvvD,2BAAA,wBAAkBA,uBAAA,yBAAAA,iCAAAsL,IAAAtL,wBAAewC,GAAA+sD,aAAY,GAC3CvvD,uBAAA,EAAAs4D,EAAA,YAIFt4D,2BAGIA,2BAFF,UAEEA,CAD+B,cAM/BA,uBAFA,EAAAu4D,EAAA,WAEAv4D,CADoB,EAAAw4D,GAAA,uBAkFxBx4D,6BACAA,2BAAA,6BAAsBA,uBAAA,+BAAAA,iCAAAsL,IAAAtL,wBAAqBwC,GAAA21D,aAAA31D,GAAAg1D,UAAAn4D,OAA6B,GAI1EW,oCApGWA,uBAFA,OAAAwC,GAAAktD,KAEA1vD,CAFa,0BAKfA,sBAAA,GAAAA,uBAAA,OAAAwC,GAAAowB,WAMG5yB,sBAAA,GAAAA,uBAAA,YAAAwC,GAAAg1D,WAGFx3D,sBAAA,GAAAA,uBAAA,OAAAwC,GAAAm7B,SAE4B39B,+CAAA,UAAAwC,GAAAmwB,QAmFd3yB,wBAEAA,uBAFA,OAAAwC,GAAAg1D,UAEAx3D,CAFkB,aAAAwC,GAAAqwB,iBAElB7yB,CAD+B,ulBEpGvDA,2BAAA,sBAAAA,mBAAA,KAC4CA,kDAE5CA,2BAAA,sBAAAA,wBAAA,KAE6CA,sBAAA,cACcA,0EAE3DA,2BAAA,sBAAAA,wBAAA,KAGQA,sBAAA,cAA6EA,mHAQ7EA,2BAJN,WAIMA,CAHmB,WAGnBA,CAF0B,WAE1BA,CADoB,eAIZA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAASM,EAAAgpB,QAAO,GACtBtpB,sBAAA,UAEJA,6BAEEA,2BADF,WACEA,CADoB,eAIZA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAAM,EAAAm4D,aAAAn4D,EAAAm4D,YAAA,GACNz4D,sBAAA,UAIRA,8EAZWA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,EAAAnI,EAAAwQ,MAAA4nD,OAQA14D,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,EAAAC,EAAAwQ,MAAA6nD,WAAAr4D,EAAAwQ,MAAA8nD,wEAUP54D,2BAAA,uBAIgBA,uBAAA,uBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAAM,EAAAm4D,aAA2B,EAAK,GAJhDz4D,wBAAA,KAKyFA,sBAAA,UAGqHA,gGAHlHA,sBAAA,GAAAA,uBAAA,OAAAM,EAAAu4D,WAAA74D,qDAP9FA,2BAAA,YAEEA,uBAAA,EAAA84D,EAAA,yBASF94D,sEAPmBA,+CAAA,OAAAM,EAAAm4D,uCA9BvBz4D,oCAAA,GAEEA,uBAAA,EAAA+4D,EAAA,aAuBA/4D,2BAAA,YACEA,uBAAA,EAAAg5D,EAAA,cAYFh5D,2BAIIA,2BAFJ,WAEIA,CAFa,WAEbA,CADe,YAEbA,sBAAA,iBAYNA,6GApDMA,+CAAA,OAAAM,EAAAm4D,aAwBEz4D,sBAAA,GAAAA,uBAAA,OAAAM,EAAAm4D,aAkBMz4D,sBAAA,GAKAA,uBALA,MAAAM,EAAAu4D,WAAA74D,kCAKAA,CALkB,UAAAM,EAAA24D,WAKlBj5D,CAHsB,QAAAM,EAAA8D,QClDhC,MAAO80D,EA+BXr6D,YAAoBs6D,EAAiCzjC,GAAjC32B,KAAAo6D,YAAiCp6D,KAAA22B,kBAvBrD32B,KAAAq6D,cAAe,EACfr6D,KAAA6E,KAAO,SAEP7E,KAAAqmB,SAAU,EACVrmB,KAAAs6D,OAAiC,GACjCt6D,KAAAu6D,gBAAiB,EACjBv6D,KAAA05D,aAAc,EAGd15D,KAAA+R,MAAQC,KACChS,KAAAw6D,aAAuB,qBAc9Bx6D,KAAKy6D,aAAe,CAClB,CACErgE,KAAMoP,0BACNlJ,MAAO,sBAET,CACElG,KAAMoP,2BACNlJ,MAAO,uBAET,CACElG,KAAMoP,2BACNlJ,MAAO,uBAET,CACElG,KAAMoP,iCACNlJ,MAAO,sBAET,CACElG,KAAMoP,wBACNlJ,MAAO,sBAET,CACElG,KAAMoP,wBACNlJ,MAAO,sBAET,CACElG,KAAMoP,yBACNlJ,MAAO,uBAET,CACElG,KAAMoP,yBACNlJ,MAAO,uBAET,CACElG,KAAMoP,qBACNlJ,MAAO,iCAET,CACElG,KAAMoP,wBACNlJ,MAAO,uBAET,CACElG,KAAMoP,gCACNlJ,MAAO,iCAET,CACElG,KAAMoP,uBACNlJ,MAAO,sBAET,CACElG,KAAMoP,8BACNlJ,MAAO,iCAET,CACElG,KAAMoP,yBACNlJ,MAAO,iCAET,CACElG,KAAMoP,4BACNlJ,MAAO,uBAET,CACElG,KAAMoP,uBACNlJ,MAAO,sBAET,CACElG,KAAMoP,0BACNlJ,MAAO,iCAET,CACElG,KAAMoP,6BACNlJ,MAAO,uBAET,CACElG,KAAMoP,wBACNlJ,MAAO,uBAET,CACElG,KAAMoP,wBACNlJ,MAAO,uBAET,CACElG,KAAMoP,yBACNlJ,MAAO,sBAET,CACElG,KAAMoP,uBACNlJ,MAAO,sBAET,CACElG,KAAMoP,yBACNlJ,MAAO,iCAET,CACElG,KAAMoP,4BACNlJ,MAAO,uBAET,CACElG,KAAMoP,wBACNlJ,MAAO,sBAET,CACElG,KAAMoP,wBACNlJ,MAAO,sBAGb,CAEAmO,WACEzO,KAAKqG,KAAOrG,KAAKw6D,aACjBx6D,KAAKs6D,OAAS,CACZI,IAAK,cACLC,IAAK,cACLC,MAAO,gBACPC,KAAM,gBAGR76D,KAAK86D,WAA2B,YAAd96D,KAAKmG,KAAqB,aAAe,OAE3DnG,KAAK22B,gBAAgBwW,oBAAoB,kBAAoBnuB,IAC3Dhf,KAAKq6D,cAAe,EACpBr6D,KAAKqmB,SAAU,EACfrmB,KAAK+6D,QAAU/7C,EAAM,MACrBhf,KAAKg7D,UAAQ,GAEfh7D,KAAKk6D,WAAal6D,KAAKs6D,OAAOt6D,KAAKi7D,aACrC,CAEAD,WACEh7D,KAAK22B,gBACFsrB,4BAA4BjiD,KAAKkhC,KACjCvyB,UAAWpM,GAAevC,KAAKu6D,eAA0B,MAATh4D,GAAyB,MAATA,GACjD,YAAdvC,KAAKmG,KACPnG,KAAKgf,IAAM,GAAGhf,KAAK+6D,UAAU/6D,KAAKkhC,OAAOlhC,KAAKk7D,yCAAyCl7D,KAAK86D,aAAa96D,KAAK6E,QAAQ7E,KAAKqG,OAE3HrG,KAAKgf,IAAM,GAAGhf,KAAK+6D,QAAQ7/D,MAAM,GAAG,KAAM8E,KAAKk7D,2CAC7Cl7D,KAAK86D,sFACqE96D,KAAK6E,OAEnF7E,KAAK85D,WAAa95D,KAAKo6D,UAAUe,+BAA+Bn7D,KAAKgf,IACvE,CAEAo8C,qBACMp7D,KAAKq6D,cACPr6D,KAAKg7D,UAET,CAEAzwC,QACEvqB,KAAKqG,KAAOrG,KAAKw6D,aACbx6D,KAAKq6D,cACPr6D,KAAKg7D,UAET,CAEAp0D,cACM5G,KAAKq6D,cACPr6D,KAAKg7D,UAET,iDA/LWb,GAAgBl5D,8BAAAC,gBAAAD,8BAAA8H,KAAA,4DAAhBoxD,EAAgB/wD,UAAA,iBAAA+C,OAAA,CAAAhG,KAAA,OAAA+0D,YAAA,cAAAD,aAAA,eAAA/5B,IAAA,MAAA77B,MAAA,SAAAwhB,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,uBDTN5C,kGAIFA,8FAAwB,qCAA0B,qGAKlDA,6HACb,qCAA0B,6EAUXA,4FAQAA,mGAiBIA,0IAAoE,yCAGpD,63BApC3CvI,uBAbA,EAAAo6D,EAAA,yBAaAp6D,CAZuB,EAAAq6D,EAAA,uBAYvBr6D,CARqB,EAAAs6D,EAAA,uBAQrBt6D,CAHqB,EAAAu6D,EAAA,4BAVFv6D,uBAAA,OAAAwC,EAAA4iB,SAAA5iB,EAAA42D,cAIFp5D,+CAAA,QAAAwC,EAAA42D,cAKAp5D,+CAAA,QAAAwC,EAAA82D,gBAIFt5D,+CAAA,OAAAwC,EAAA42D,cAAA52D,EAAA82D,kjBEbXt5D,oCAAA,GAAAA,mBAAA,+DAMEA,yBAAA,GCAA,MAAOw6D,EALb37D,cAOEE,KAAA07D,uBAAwB,kDAFbD,EAAiB,4DAAjBA,EAAiBryD,UAAA,mBAAA+C,OAAA,CAAAuvD,sBAAA,yBAAA5N,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDLP5C,2QAFrBvI,2BAAA,WAMEA,uBALA,EAAA06D,EAAA,qBAKA16D,CAJmB,EAAA26D,EAAA,yBAAA36D,oCAOrBA,oEARiBA,wBAA6BA,uBAA7B,OAAAwC,EAAAi4D,sBAA6Bz6D,CAAA,WAAA46D,+HEDpCC,wBAAU,KACpBC,QAAA,UACAD,EAAAl3D,QAAA,iFCGE3D,+BAAA,4BAJFA,2BAAA,WACEA,sBAAA,WAGAA,uBAAA,EAAA+6D,EAAA,sBACF/6D,kGAJOA,+CAAA+K,EAAAiwD,OACAh7D,uBAAA,YAAA+K,EAAAkwD,KAAAj7D,4BAEUA,+CAAA,mBAAAk7D,6BAIjBl7D,2BAAA,gDAEEA,sBAAA,WAEFA,kGAHaA,uBADA,cAAAm7D,EACAn7D,CAD+B,gBAErCA,wBACAA,uBADA,UAAA+K,EAAAqwD,SACAp7D,CADoB,OAAA+K,EAAAswD,gCAqBnBr7D,+BAAA,kEAfNA,2BAFF,UAEEA,CADqB,WAMnBA,uBADA,mBAAAA,0BAAA01D,GAAA,MAAA3qD,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAAuwD,gBAAe,EACxBt7D,CADyB,2BAAAA,0BAAA01D,GAAA,MAAA3qD,EAAA/K,4BAAA,OAAAA,wBACR+K,EAAAuwD,gBAAe,GAEhCt7D,2BAAA,wCACEA,sBAAA,WAGFA,yDAEEA,2BADF,wBACEA,CADmB,YAEdA,uBAAA,iBAAA2J,GAAA3J,iCAAA01D,GAAA11D,wBAAS2J,EAAA4xD,kBAAwB,GACpCv7D,uBAAA,EAAAw7D,EAAA,sBAIRx7D,0GApBKA,uBAAA,UAAA+K,EAAAiwD,OAGDh7D,wBACAA,uBADA,SAAA+K,EAAA0wD,cACAz7D,CADwB,gBAOpBA,sBAAA,GACAA,uBADA,UAAA+K,EAAAqwD,SACAp7D,CADoB,OAAA+K,EAAAswD,UAMLr7D,sBAAA,GAAAA,uBAAA,mBAAAk7D,yBAQvBl7D,yBAAA,GC/BI,MAAO07D,EALb78D,cAMEE,KAAA+R,MAAQC,KACRhS,KAAA08D,eAAgB,EAChB18D,KAAA48D,WAAad,EAIJ97D,KAAAmG,KAAgD21D,EAAWl3D,QAG3D5E,KAAAs8D,SAAWt8D,KAAK+R,MAAM8qD,OACtB78D,KAAAq8D,SAAWr8D,KAAK+R,MAAMuP,KAE/Bi7C,gBACEv8D,KAAK08D,eAAiB18D,KAAK08D,aAC7B,CAEAI,eACM98D,KAAKmG,OAAS21D,EAAWC,SAAW/7D,KAAK08D,gBAC3C18D,KAAK08D,eAAgB,EAEzB,iDArBWC,EAAe,4DAAfA,EAAevzD,UAAA,gBAAA+C,OAAA,CAAAhG,KAAA,OAAA81D,MAAA,QAAAC,KAAA,OAAAI,SAAA,WAAAD,SAAA,YAAAvO,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,OAAA,yVAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,kCD8B5BrI,uBAvCA,EAAA87D,EAAA,yBAAA97D,mCAuCAA,CAvC8B,EAAA+7D,EAAA,oBAuC9B/7D,CA/BmC,EAAAg8D,EAAA,YA+BnCh8D,CAzBS,EAAAi8D,EAAA,yBAAAj8D,2CANTA,sBAAA,GAAAA,0BAAAwC,EAAA0C,OAAA1C,EAAAm5D,WAAAh4D,QAAA,4SEAM,MAAOu4D,EALbr9D,cAOWE,KAAA3F,KAAiB+iE,KAASP,OAInCpuD,WACEzO,KAAKuoB,KAAOvW,KAAMhS,KAAKmG,KACzB,iDARWg3D,EAAa,4DAAbA,EAAa/zD,UAAA,cAAA+C,OAAA,CAAAhG,KAAA,OAAA9L,KAAA,QAAAmQ,MAAA,EAAAC,KAAA,EAAAC,OAAA,uBAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,iCCR1BrI,sBAAA,kBAEMA,uBAAAwC,EAAA0C,KAAA,SADAlF,uBADA,UAAAwC,EAAA8kB,KACAtnB,CADgB,OAAAwC,EAAApJ,qdCShB,MAAOgjE,EALbv9D,cAMEE,KAAA+R,MAAQC,qDADGqrD,EAAqB,4DAArBA,EAAqBj0D,UAAA,uBAAA0kD,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,OAAA,8EAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,kCCPhCrI,2BAFF,gBAEEA,CAD+B,YAE7BA,sBAAA,SAGFA,2BACAA,yBAAA,GACFA,kCAPWA,uBAAA,kBAEJA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,EAAAmC,EAAAsO,MAAA02C,QAAAhlD,EAAAsO,MAAA22C,4OCOD,MAAO4U,EAYXx9D,YAAoByU,GAAAvU,KAAAuU,SAFpBvU,KAAAu9D,KAAO,IAAIzzD,cAE0B,CAErCmvB,QACEj5B,KAAKw9D,QACDx9D,KAAKuU,OAAOC,SAAS,CAACxU,KAAKw9D,QAAS,CAAE/oD,QAAS,CAAEC,MAAO,SACxD1U,KAAK4qB,UAAUqO,QACnBj5B,KAAKu9D,KAAKrzD,MACZ,iDAnBWozD,GAAcr8D,8BAAAC,UAAA,4DAAdo8D,EAAcl0D,UAAA,eAAA+C,OAAA,CAAAye,SAAA,WAAA4yC,QAAA,WAAAjzD,QAAA,CAAAgzD,KAAA,QAAAzP,mBAAAxsD,EAAAkJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,kLAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,mCCNnBrI,2BAJR,UAIQA,CAJgC,UAIhCA,CAHyC,UAGzCA,CAFqC,UAErCA,CADwB,UAEtBA,yBAAA,GACFA,2BACAA,2BAAA,cAGQA,uBAAA,0BAASwC,EAAAw1B,OAAO,GAE1Bh4B,6BAEAA,yBAAA,KAGNA,sCAjBKA,uBAAA,UAAAwC,EAAA+5D,QAAA,YACEv8D,+CAAA,UAAAwC,EAAA+5D,QAAA,6hmBCIDv8D,sBAAA,oDACGA,uBAAA,UAAAA,4BAAA,EAAAK,EAAA0K,EAAA+F,MAAA8nD,MAAA7tD,EAAA+F,MAAA02C,mCAEDxnD,sBAAA,oDAAGA,uBAAA,UAAAA,4BAAA,EAAAQ,EAAAuK,EAAA+F,MAAA8nD,MAAA7tD,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,oCANPxnD,2BAAA,WAKEA,uBAFA,EAAAw8D,EAAA,WAEAx8D,CAD4C,EAAAy8D,EAAA,yBAAAz8D,oCAI9CA,kGAPIA,uBAAA,UAAAA,4BAAA,EAAAyI,EAAA,gBAAAsC,EAAA0C,QAAA1C,EAAA2xD,WAEE18D,wBAA4CA,uBAA5C,uBAAA+K,EAAA0C,QAAA1C,EAAA2xD,SAA4C18D,CAAA,WAAA28D,6BAOlD38D,2BAAA,WAGEA,mBAAA,GACFA,qEAHIA,uBAAA,0BAAA+K,EAAA0C,QAAA1C,EAAA2xD,SAAA18D,4BAAA,EAAAktD,GAAA,QAEFltD,uDAAA,IAAA+K,EAAArK,MAAA,+BAGFV,2BAAA,WAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAA+K,EAAA6xD,SAAA,+BAGF58D,2BAAA,WAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAA+K,EAAAwlB,YAAA,+BAGFvwB,2BAAA,UAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAA+K,EAAA8xD,eAAA,+BAMA78D,oCAAA,GAAAA,wBAAA,KAGEA,sBAAA,aAGFA,sGAJEA,sBAAA,GAEEA,sBAFF+K,EAAAs4C,WAEErjD,CADF+K,EAAA+xD,qEAiBJ98D,2BAAA,WAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAA+K,EAAAomD,WAAA,+BAGFnxD,2BAAA,WAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAA+K,EAAAgyD,WAAA,MCvDA,MAAOC,EALbn+D,cAMEE,KAAA+R,MAAQC,qDADGisD,EAAiB,4DAAjBA,EAAiB70D,UAAA,kBAAA+C,OAAA,CAAA7L,MAAA,QAAAqB,MAAA,QAAA+M,OAAA,SAAA8iB,YAAA,cAAAqsC,SAAA,WAAAC,eAAA,iBAAAC,eAAA,iBAAAzZ,WAAA,aAAA8N,WAAA,aAAA4L,WAAA,aAAAL,SAAA,YAAAnzD,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,WD6BL5C,qFACR,mCACT,oCACE,oCACF,4yBAzCRvI,2BAAA,WACEA,oCAAA,GA2BEA,uBA1BA,EAAAi9D,EAAA,WA0BAj9D,CAxBiD,EAAAk9D,EAAA,WAwBjDl9D,CAdkB,EAAAm9D,EAAA,WAclBn9D,CAT8D,EAAAo9D,EAAA,WAS9Dp9D,CAJwB,EAAAq9D,EAAA,+CAWxBr9D,2BADF,UACEA,CADgF,WAE9EA,uBAAA,EAAAs9D,EAAA,sBASAt9D,2BAAA,YACEA,sBAAA,yBAIFA,2BAEEA,2BADF,UACEA,CAD8B,cACNA,mBAAA,IAE5BA,+BAOAA,uBALA,GAAAu9D,EAAA,YAKAv9D,CAJuB,GAAAw9D,EAAA,aAS3Bx9D,oCA9DSA,sBAAA,GAAAA,uBAAA,QAAAwC,EAAAnD,OAAA,cAAAmD,EAAA6gD,YAUArjD,+CAAA,OAAAwC,EAAA9B,OAKAV,+CAAA,OAAAwC,EAAAo6D,UAAA,gBAAAp6D,EAAAiL,SAAAjL,EAAAk6D,UAKA18D,+CAAA,OAAAwC,EAAA+tB,aAKDvwB,+CAAA,OAAAwC,EAAAq6D,gBAOa78D,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAs6D,gBAAAt6D,EAAAs6D,eAAA3iE,OAAA,GAWI6F,sBAAA,GAEAA,uBAFA,QAAAwC,EAAAnD,MAEAW,CAFe,aAEfA,CADgB,YAAAwC,EAAAk6D,UAIT18D,sBAAA,GAAAA,+BAAA,GAAAwC,EAAAnD,OAAA,QAKvBW,+CAAA,OAAAwC,EAAA2uD,YAKAnxD,+CAAA,OAAAwC,EAAAu6D,8PE9CL/8D,2BAFJ,SAEIA,CAFgC,WAEhCA,CADkC,YACfA,mBAAA,GAAcA,2BAC/BA,2BAAA,SACIA,uBAAA,yBAAAy9D,EAAAz9D,0BAAA4P,GAAA0/C,UAAAtvD,4BAAA,MAAA09D,EAAA19D,wBAAA,UAAAA,wBAAS09D,EAAAC,WAAAF,GAA6B,gCAC1Cz9D,sBAAA,WAKNA,yFARuBA,sBAAA,GAAAA,8BAAAy9D,GAGZz9D,sBAAA,GACAA,uBADA,UAAA49D,EAAA9sD,MAAAgX,QACA9nB,CADyB,OAAA49D,EAAA9sD,MAAAu7C,SCN9B,MAAOwR,EALbh/D,cAOEE,KAAAuC,KAAsB,GAEtBvC,KAAAkD,QAA+B,GAE/BlD,KAAA62B,SAAW,IAAIC,IAAe,IAI9B92B,KAAA++D,cAAe,EAEf/+D,KAAAg/D,sBAAuC,GAGvCh/D,KAAAiM,UAAY,IAAInC,eAKhB9J,KAAA+R,MAAQC,qDApBG8sD,EAAqB,4DAArBA,EAAqB11D,UAAA,uBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,+tBDblCrI,2BAAA,mBAQWA,uBAAA,qBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAawC,EAAAwI,UAAA/B,KAAAU,GAAsB,gCAC5C3J,sBAAA,WAGFA,2BAEAA,uBAAA,EAAAg+D,EAAA,oBARWh+D,uBALA,OAAAwC,EAAAlB,KAKAtB,CALa,UAAAwC,EAAAP,QAKbjC,CAJmB,WAAAwC,EAAAozB,SAInB51B,CAHqB,iBAAAwC,EAAAy7D,eAGrBj+D,CAFiC,eAAAwC,EAAAs7D,aAEjC99D,CAD6B,wBAAAwC,EAAAu7D,uBAIjC/9D,sBAAA,GACAA,uBADA,UAAAwC,EAAAsO,MAAA8W,KACA5nB,CADsB,OAAAwC,EAAAsO,MAAAu7C,QAKFrsD,+CAAA,UAAAwC,EAAAlB,2NEZrB,MAAOu0B,EAQXh3B,YAAY+2B,GALZ72B,KAAAm/D,kBAAoB,GAMlBn/D,KAAK+2B,MAAQvtB,8BACbxJ,KAAKk/D,eAAiB,CACpBt6D,QAAS4E,yCACTonD,KAAMpnD,oCAERxJ,KAAKqkB,OAAS7a,uBACdxJ,KAAKwoB,IAAMhf,qBACXxJ,KAAKo/D,UAAY51D,yCAEjB2I,UAAQnS,KAAM62B,EAChB,qCCrBI,MAAOwoC,EAMXv/D,YAAYw/D,EAAmBllE,EAAco3B,EAAqBoG,GAAU,GAC1E53B,KAAKs/D,SAAWA,EAChBt/D,KAAK5F,KAAOA,EACZ4F,KAAKwxB,YAAcA,EACnBxxB,KAAK43B,QAAUA,CACjB,+QCEM32B,2BAAA,aAEEA,mBAAA,GACFA,iHADEA,uDAAA,IAAAM,GAAAs1B,SAAAsoC,kBAAAI,IAAA,kCAHJt+D,oCAAA,GACEA,uBAAA,EAAAu+D,EAAA,+KACOv+D,+CAAA,OAAAM,GAAAkR,KAAApC,UAAA,SAAAovD,KAAAl+D,GAAA8iB,OAAAjM,SAAAmnD,iCAWTt+D,sBAAA,sDAAGA,uBAAA,UAAAA,4BAAA,EAAAQ,EAAAF,GAAAwQ,MAAAotB,qCAOHl+B,oCAAA,GACEA,sBAAA,QACAA,2BAAA,cACEA,mBAAA,GACFA,qHADEA,sBAAA,GAAAA,+BAAA,IAAAy+D,GAAAluC,YAAA,6EAfRvwB,2BAAA,YAGKA,uBAAA,yBAAAy+D,GAAAz+D,0BAAA21D,IAAArG,UAAAhvD,EAAAN,0BAAA,UAAAA,wBAASM,EAAAo+D,iBAAAD,IAAwB,GACpCz+D,2BAAA,YACEA,uBAAA,EAAA2+D,EAAA,YAGA3+D,mBAAA,YACFA,2BACAA,2BAAA,YACEA,mBAAA,GACAA,uBAAA,EAAA4+D,EAAA,uBAOJ5+D,4FAjBKA,uBAAA,UAAAA,4BAAA,EAAAK,IAAAC,GAAAgB,KAAAnH,SAAAmG,GAAA29D,gBAAAQ,GAAA9nC,SAAA8nC,GAAAJ,YAKGr+D,sBAAA,GAAAA,uBAAA,OAAAy+D,GAAAJ,UAIJr+D,sBAAA,GAAAA,+BAAA,IAAAy+D,GAAAtlE,KAAA,KACe6G,+CAAA,OAAAy+D,GAAAluC,iFAQnBvwB,2BAAA,YAEKA,uBAAA,mBAAAA,0BAAAiU,IAAA,MAAA3T,GAAAN,0BAAA,UAAAA,wBAASM,GAAAu+D,kBAAiB,GAC7B7+D,2BAAA,YACEA,sBAAA,UAEAA,mBAAA,YACFA,2BACAA,2BAAA,YACEA,mBAAA,GAEJA,4EAPOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAQ,EAAAF,GAAAwQ,MAAAguD,MAKH9+D,sBAAA,GAAAA,+BAAA,IAAAM,GAAAs1B,SAAArO,IAAA,KAAAjnB,GAAA8iB,OAAA/jB,MAAA,mCAKFW,2BAAA,aAGEA,mBAAA,GACFA,wEAHMA,uBAAA,aAAAM,GAAAs1B,SAAAqoC,eAAAt6D,SAEJ3D,uDAAA,IAAAM,GAAAs1B,SAAAqoC,eAAAtO,KAAA,mCALJ3vD,2BAAA,YAEEA,uBAAA,EAAA++D,EAAA,eAKF/+D,wEAHSA,+CAAA,OAAAM,GAAAgB,KAAAnH,SAAAmG,GAAA29D,qFAlDLj+D,2BALJ,aAKIA,CAFa,QAEbA,CADG,aAKIA,uBAAA,iBAAA2J,IAAA3J,0BAAAsL,IAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAA4B,KAA5B2J,GAAAq1D,QAAiC1+D,EAAA2+D,eAAiB3+D,EAAA4+D,eAAc,GAJvEl/D,2BAMAA,uBAAA,EAAAm/D,EAAA,sBAOJn/D,6BAiCAA,uBAhCA,EAAAo/D,EAAA,YAgCAp/D,CA7BwC,EAAAq/D,EAAA,YA6BxCr/D,CAViC,EAAAs/D,GAAA,4DAvC3Bt/D,uBAAA,YAAAM,GAAAkR,MAMKxR,sBAAA,GAAAA,uBAAA,cAAAM,GAAAs1B,SAAAxS,QAGyBpjB,+CAAA,UAAAM,GAAA0Q,OAAAC,KAAA3Q,GAAAs1B,SAAAsoC,oBAQZl+D,+CAAA,UAAAM,GAAAi/D,iBAoBlBv/D,+CAAA,OAAAM,GAAAk/D,eAaAx/D,+CAAA,OAAAM,GAAAgB,KAAAnH,SAAAmG,GAAA29D,8CASRj+D,2BAAA,UAKEA,yBAAA,GACFA,qGAJGA,uBADA,UAAAM,GAAAm/D,UACAz/D,CADqB,aAAA0/D,kCAOxB1/D,2BAAA,aAEEA,mBAAA,GACFA,uEADEA,uDAAA,IAAAM,GAAAs1B,SAAAE,MAAA,oCAGF91B,2BAAA,aAEEA,mBAAA,GACFA,uEADEA,uDAAA,IAAAM,GAAAs1B,SAAAuoC,UAAA,OC9DI,MAAOwB,GALb9gE,cASEE,KAAAuC,KAAsB,GAEtBvC,KAAAkD,QAA+B,GAE/BlD,KAAA62B,SAAW,IAAIC,IAAe,IAI9B92B,KAAA++D,cAAe,EAEf/+D,KAAAg/D,sBAAuC,GAGvCh/D,KAAAiM,UAAY,IAAInC,eAIhB9J,KAAAiS,OAASA,OACTjS,KAAAwgE,gBAAuC,GACvCxgE,KAAA+R,MAAQC,KAERvD,WACEzO,KAAK6gE,aACD7gE,KAAKuC,KAAKnH,OAAS,GACrB4E,KAAK8gE,qBAEP9gE,KAAKkD,QAAUiP,WAASnS,KAAKkD,QAAS,CAAC,SACvClD,KAAK+gE,eACP,CAEQF,aACN7gE,KAAKqkB,OAAS,IAAIjR,qBAAmB,GAAI,CAAEC,WAAYrT,KAAKg/D,wBAC5Dh/D,KAAKyS,KAAO,IAAIU,IAAY,CAAEkR,OAAQrkB,KAAKqkB,SAC3CrkB,KAAKwgE,gBAAkB,IAAKxgE,KAAKkD,SAAW,GAC9C,CAEQ49D,qBACN,MAAM59D,GAAUlD,KAAKkD,QAAQhG,IAAK4zC,IAAWA,GAAO12C,MAC/B4F,KAAKuC,KAAK8hB,OAAQysB,KAAuC,IAA5B5tC,GAAQnH,QAAQ+0C,KACrD9pC,QAAS8pC,IAAW9wC,KAAKghE,UAAUlwB,KAChD9wC,KAAKihE,2BACP,CAEQD,UAAU5mE,IAChB4F,KAAKkD,QAAQhH,KAAK,IAAImjE,KAAa,EAAOjlE,GAAM,KAChD4F,KAAKkD,QAAUiP,WAASnS,KAAKkD,QAAS,CAAC,SACvClD,KAAK2/D,iBAAiB3/D,KAAKkD,QAAQ2P,KAAMi+B,IAAWA,GAAO12C,OAASA,IACtE,CAEAulE,iBAAiB7uB,KAEZA,IACA9wC,KAAKk/D,iBAAmBpuB,GAAOwuB,UAAYt/D,KAAKuC,KAAKnH,QAAU4E,KAAKk/D,iBAIvEpuB,GAAOwuB,UAAYxuB,GAAOwuB,SAC1Bt/D,KAAK+gE,gBACL/gE,KAAKiM,UAAU/B,KAAK,CAAE4mC,OAAQA,KAChC,CAEQiwB,gBACN/gE,KAAKuC,KAAK2+D,OAAO,EAAGlhE,KAAKuC,KAAKnH,QAC9B4E,KAAKkD,QAAQ8D,QAAS8pC,KAChBA,GAAOwuB,UACTt/D,KAAKuC,KAAKrG,KAAK40C,GAAO12C,KAAI,GAG9B4F,KAAKmgE,cACP,CAEAA,eACEngE,KAAKwgE,gBAAkBxgE,KAAKkD,QAAQmhB,OAAQysB,IAAWA,GAAO12C,KAAK8H,SAASlC,KAAKqkB,OAAO/jB,OAC1F,CAEQ2gE,4BACNjhE,KAAKkD,QAAQ8D,QAAS8pC,MACmB,IAAnC9wC,KAAKuC,KAAKxG,QAAQ+0C,GAAO12C,QAC3B02C,GAAOwuB,UAAW,IAGxB,CAEA14D,cACM5G,KAAKqkB,QACPrkB,KAAKmgE,eAEFngE,KAAKkD,SAAYlD,KAAKuC,MAA6B,IAArBvC,KAAKuC,KAAKnH,QAG7C4E,KAAKihE,2BACP,CAEAf,eACsC,IAAhClgE,KAAKwgE,gBAAgBplE,OACvB4E,KAAK8/D,mBAEL9/D,KAAK2/D,iBAAiB3/D,KAAKwgE,gBAAgB,IAC3CxgE,KAAKmhE,cAET,CAEArB,kBACO9/D,KAAKygE,gBAGVzgE,KAAKghE,UAAUhhE,KAAKqkB,OAAO/jB,OAC3BN,KAAKmhE,cACP,CAEAV,cACE,OACEzgE,KAAK++D,cACL/+D,KAAKqkB,OAAO/S,OACZtR,KAAKqkB,OAAO/jB,MAAMlF,OAAS,GAC3B4E,KAAKwgE,gBAAgB/mC,MAAOqX,IAAWA,GAAO12C,OAAS4F,KAAKqkB,OAAO/jB,MAEvE,CAEQ6gE,cACNnhE,KAAKqkB,OAAO1E,SAAS,IACrB3f,KAAKmgE,cACP,CAEAvB,WAAWwC,IACTphE,KAAK2/D,iBACH3/D,KAAKkD,QAAQ2P,KAAMi+B,IAAyBA,GAAO12C,OAASgnE,IAAQtwB,GAAOwuB,UAE/E,mDApIWsB,GAAe,4DAAfA,GAAex3D,UAAA,gBAAA+C,OAAA,CAAAu0D,UAAA,YAAAn+D,KAAA,OAAAW,QAAA,UAAA2zB,SAAA,WAAAqoC,eAAA,iBAAAH,aAAA,eAAAC,sBAAA,yBAAAz0D,QAAA,CAAA0B,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAA6sD,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,OAAA,2tCAAAC,SAAA,SAAArB,GAAA7F,IAAA,EAAA6F,mCD4D5BrI,uBA3EA,EAAAogE,GAAA,yBAAApgE,mCA2EAA,CA3E0B,EAAAqgE,GAAA,UA2E1BrgE,CAT8C,EAAAsgE,GAAA,aAS9CtgE,CAJ4E,EAAAugE,GAAA,sBALxEvgE,sBAAA,GAAAA,uBAAA,OAAAwC,GAAAs7D,cAAAt7D,GAAAP,QAAA9H,OAAA,GAKG6F,+CAAA,WAAAwC,GAAAlB,KAAAnH,WAAAqI,GAAAs7D,cAAA,IAAAt7D,GAAAP,QAAA9H,SAKA6F,+CAAA,QAAAwC,GAAAs7D,cAAA,IAAAt7D,GAAAP,QAAA9H,ywBEzDD,MAAOqmE,EAkFX3hE,YAAoBs4D,GAAAp4D,KAAAo4D,oBAxEpBp4D,KAAA0hE,MAAQ,CACNznE,OAAQ,OACRD,MAAO,SAKTgG,KAAAkD,QAA+B,CAC7BK,QAAS,CACPmB,OAAQ,CACNC,SAAS,GAEXC,QAAS,CACPgzB,SAAS,EACT/yB,KAAM,QACNI,WAAW,EACX8c,YAAQ6X,EACRx0B,UAAW,CACTzD,MAAQ2D,IACN,GAAKA,EAAYq8D,OACjB,OAAI3hE,KAAK4hE,SACA5hE,KAAKo4D,kBAAkB7vD,UAAUjD,EAAYq8D,OAAOvjE,GAEpDkH,EAAYq8D,OAAOvjE,GAG9BiH,MAAOA,IAAM,MAInBQ,UAAW,CACTy/B,SAAU,GAEZ3/B,YAAY,EACZC,qBAAqB,EACrBE,SAAU,CACR+7D,KAAM,CACJ59D,YAAa,IAGjBiC,OAAQ,CACN9H,EAAG,CACDuG,SAAS,GAEX3F,EAAG,CACD2F,SAAS,KAKR3E,KAAA8hE,SAAuB,CAC5B,CACEv/D,KAAM,GACN4C,gBAAiB,uBACjBpB,YAAa,qBACb/B,qBAAsB,qBACtB+/D,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,yBAIpBjiE,KAAAU,OAAqB,GAE5BV,KAAAgD,UAGI,CACF8+D,SAAU9hE,KAAK8hE,SACfphE,OAAQV,KAAKU,OAG4C,CAE3D+N,WACE,MAQMyzD,EAAe,IAAIC,IACvBniE,KAAKoiE,eACLpiE,KAAKqiE,gBANcC,CAAC19D,EAAc29D,IAC3BA,EAAY39D,EAAQ49D,OAAS,KALjB59D,GACZA,EAAQ69D,OAAS79D,EAAQ3K,OAAS,EAAI,EAAI,MAcnDioE,EAAaQ,aAAe,CAC1Bv9D,gBAAiBnF,KAAK8hE,SAAS,GAAG9/D,qBAClC+B,YAAa/D,KAAK8hE,SAAS,GAAGC,kBAGhC/hE,KAAKkD,QAAQK,QAAQqB,QAAQE,SAAYF,IACvCs9D,EAAaS,eAAe/9D,EAAO,CAEvC,CAEAgC,YAAYC,GACV7G,KAAKgD,UAAU8+D,SAAS,GAAGv/D,KAAOsE,EAAQtE,KAAQiF,aAClDxH,KAAKgD,UAAUtC,OAAS,IAAIf,MAAMkH,EAAQtE,KAAQiF,aAAapM,QAAQrB,KAAK,KACxEiG,KAAKsD,OACPtD,KAAKsD,MAAMA,MAAMyE,QAErB,iDApHW05D,GAAkBxgE,8BAAAC,KAAA,4DAAlBugE,EAAkBr4D,UAAA,mBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,sFAKlBC,qBAAkB,uiBCxB/BtI,2BAAA,WAEEA,sBAAA,gBAMAA,2BAAA,aAEEA,sBAAA,WAEJA,oCAXKA,uBAAA,UAAAwC,EAAAi+D,OAGKzgE,wBAEAA,uBAFA,OAAAwC,EAAAT,UAEA/B,CAFkB,UAAAwC,EAAAP,QAElBjC,CADmB,gwCCK3BA,sBAAA,4DACaA,uBADA,WAAA+K,EAAAqa,QACAplB,CADoB,eCoB7B,MAAO4zD,EA6BX/0D,YAAoB8iE,GAAA5iE,KAAA4iE,QAxBpB5iE,KAAAmG,KAAO,SAGPnG,KAAAuqC,UAAW,EAUXvqC,KAAA6iE,WAAmC,UAGnC7iE,KAAAylD,WAAY,EAGZzlD,KAAAqc,aAAe,IAAIvS,eAEnB9J,KAAAqmB,SAAU,EACVrmB,KAAA+R,MAAQC,IAEgC,CAExCvD,WACEzO,KAAKyS,MAAMqwD,cAAcn0D,UAAU,KAC7BwD,QAAMnS,KAAKyS,KAAK20B,OAAQ,oBAC1BpnC,KAAKqmB,SAAU,EACflU,UAAQnS,KAAKyS,KAAK20B,OAAQ,kBAEtBpnC,KAAKyS,gBAAgBswD,mBACL/iE,KAAKyS,KAAMoP,yBAAsB,EAI3D,CAEA+O,OAAOhmB,GACL5K,KAAKgjE,cAGDhjE,KAAKyS,gBAAgBwwD,sBACFjjE,KAAKyS,KAAMshB,SAASnpB,GAGvC5K,KAAKyS,MAAMkD,QACb3V,KAAKkjE,gBAIPljE,KAAKqmB,SAAU,EACfrmB,KAAKqc,aAAanS,OACpB,CAEA84D,cACEhjE,KAAK4iE,MAAMO,cAAcC,aAAaC,cAAc,gBAAgBrjE,KAAKmG,UAAUm9D,OACrF,CAEAJ,eACE,MAAM77D,EAASrH,KAAK4iE,MAAMO,cAAcC,aAAaC,cACnD,uCAGEh8D,GACFA,EAAOi8D,OAEX,iDAzEWzO,GAAqB5zD,4CAAA,4DAArB4zD,EAAqBzrD,UAAA,uBAAA+C,OAAA,CAAAsG,KAAA,OAAAtM,KAAA,OAAAokC,SAAA,WAAA4sB,SAAA,WAAAoM,UAAA,YAAAV,WAAA,aAAApd,UAAA,aAAAl7C,QAAA,CAAA8R,aAAA,gBAAAyxC,mBAAApkD,EAAAc,MAAA,EAAAC,KAAA,EAAAC,OAAA,kMAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,kCD9BlCrI,2BAAA,cAIQA,uBAAA,iBAAA2J,GAAA,OAASnH,EAAAmtB,OAAAhmB,EAAc,GAK7B3J,yBAAA,GACAA,uBAAA,EAAAuiE,EAAA,qBAIFviE,kCAPQA,uBAPA,OAAAwC,EAAA0C,KAOAlF,CAPa,UAAAA,4BAAA,EAAAK,EAAAmC,EAAAgiD,WAObxkD,CALgC,WAAAwC,EAAA4iB,SAAA5iB,EAAA8mC,SAKhCtpC,CAJgC,YAAAwC,EAAAo/D,8DAUxB5hE,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4iB,+LEXT,MAAMo9C,EAA2C,CACtD,CAACC,WAASC,SAAU,sBACpB,CAACD,WAASE,SAAU,sBACpB,CAACF,WAASG,QAAS,0FCHjB5iE,+BAAA,4BADFA,oCAAA,GACEA,uBAAA,EAAA6iE,EAAA,qGAAe7iE,+CAAA,mBAAA+K,EAAA+3D,uCAGf9iE,oCAAA,GAAAA,mBAAA,oFAAmBA,8CAAA+K,EAAA+3D,kEALvB9iE,oCAAA,GAIEA,uBAHA,EAAA+iE,EAAA,qBAGA/iE,CAH8D,EAAAgjE,EAAA,yBAAAhjE,+IAA/CA,wBAA6BA,uBAA7B,OAAA+K,EAAAk4D,sBAA6BjjE,CAAA,WAAAkjE,4BAO9CljE,sBAAA,gEAEiBA,uBADA,OAAA+K,EAAAzJ,KACAtB,CADa,UAAA+K,EAAA9I,mCAI5BjC,2BAAA,UAAAA,mBAAA,KAAyBA,qEAAdA,8CAAA+K,EAAAo4D,wCCCP,MAAOC,EA4EXvkE,YACUwkE,EACA7hE,EACAG,EACAw1D,GAHAp4D,KAAAskE,aACAtkE,KAAAyC,YACAzC,KAAA4C,cACA5C,KAAAo4D,oBA9EiBp4D,KAAA2mD,MAAgB,EAGhB3mD,KAAAukE,KAAe,EAGjCvkE,KAAAqF,MAAgB,GAYhBrF,KAAA4hE,UAAoB,EAGpB5hE,KAAAW,SAAmB,EAGnBX,KAAA/F,OAAiB,OAGjB+F,KAAAhG,MAAgB,QAGhBgG,KAAAwkE,UAAoB,IAGpBxkE,KAAAykE,YAAsB,EAGtBzkE,KAAA0kE,eAAyB,EAGzB1kE,KAAA2kE,gBAA0B,EAG1B3kE,KAAAokE,WAAqB,IAMrBpkE,KAAA4kE,uBAAiC,EAGjC5kE,KAAA+jE,YAAyC,GAGzC/jE,KAAA6kE,eAAgD,GAiBzD7kE,KAAAuC,KAAyB,GACzBvC,KAAAkD,QAA6B,EAO1B,CAEH,yBAAIghE,GACF,OAAOlkE,KAAK+jE,uBAAuBe,aACrC,CAEAr2D,WACE,MAAMzL,EAA8B,CAAC,CAAEm0B,MAAOn3B,KAAKqF,OAAS,GAAI/E,MAAON,KAAKukE,OAC5E,IAAIQ,EAA6D,GAC7D/kE,KAAKglE,kBAAoBhlE,KAAKilE,iBAChCF,EAAa,CACX,CACEjqE,MAAO,CAACkF,KAAK2mD,MAAQ3mD,KAAKglE,iBAAkBhlE,KAAK2mD,MAAQ3mD,KAAKilE,gBAC9Dv2D,OAAQg1D,WAASE,SAEnB,CAAE9oE,MAAO,CAACkF,KAAK2mD,MAAQ3mD,KAAKilE,eAAgBjlE,KAAK2mD,OAAQj4C,OAAQg1D,WAASG,UAG9E,MAAMqB,EAAallE,KAAKmlE,kBAAoB,CAC1C,CAACnlE,KAAKqF,OAAS,IAAKrF,KAAKolE,wBAAwBplE,KAAKukE,KAAMQ,IAGxDM,EAAkC,CACtC3gE,OAAQ,CAAEkzB,QAAS53B,KAAK0kE,eACxBY,QAAS,CAAE1tC,QAAS53B,KAAK2kE,gBACzB//D,QAAS,CACPgzB,SAAS,KACN53B,KAAK6kE,eACRU,WAAYvlE,KAAK6kE,gBAAgBU,iBAAqBvlE,KAAKwlE,mBAE7Df,WAAYzkE,KAAKykE,WACjBxqE,OAAQ+F,KAAK/F,OACbD,MAAOgG,KAAKhG,MACZyrE,MAAO,CAAEC,MAAOR,GAChBS,MAAO,CACLC,YAAa5lE,KAAK+jE,YAClB8B,aAAc,CACZlf,MAAO3mD,KAAK2mD,MACZp6B,KAAMvsB,KAAKwkE,UACXsB,eAAgBA,IAAM9lE,KAAK+lE,oBAC3BC,mBAAoBA,IAAMhmE,KAAKimE,2BAIjClB,EAAW3pE,OAAS,IACtBiqE,EAAaM,MAAQ,IAChBN,EAAaM,MAChBj3D,OAAQ,CACNw3D,OAAQnB,KAId/kE,KAAKuC,KAAOS,EACZhD,KAAKkD,QAAUmiE,CACjB,CAEQD,wBACN9kE,EACAykE,GAEA,UAAWoB,KAAapB,EAAY,CAClC,MAAOqB,EAAKnnE,GAAOknE,EAAUrrE,MAC7B,GAAIwF,GAAS8lE,GAAO9lE,EAAQrB,EAC1B,OAAOe,KAAKqmE,oBACV5C,EAAe0C,EAAUz3D,QAG/B,CACA,OAAO1O,KAAKqmE,oBA5JM,UA6JpB,CAEQA,oBAAoBC,GAC1B,OAAOtmE,KAAKyC,UAAUgC,cAAc6hE,EAActmE,KAAKskE,WAAWnB,cACpE,CAEQoD,YAAYjmE,GAClB,OAAON,KAAK4hE,SACR5hE,KAAKo4D,kBAAkB7vD,UAAUjI,EAAON,KAAKW,UAC7CX,KAAK4C,YAAY2F,UAAUjI,EAAON,KAAKW,SAC7C,CAEQ6kE,iBAIN,MAAO,kEAHMxlE,KAAKumE,YAAYvmE,KAAKukE,uDACjBvkE,KAAKumE,YAAYvmE,KAAK2mD,MAAQ3mD,KAAKukE,mDACvCvkE,KAAKumE,YAAYvmE,KAAK2mD,0BAMtC,CAEQof,oBACN,OAAI/lE,KAAKwmE,qBACAxmE,KAAKwmE,qBAAsBxmE,KAAK2mD,OAErC3mD,KAAK4kE,uBAAyB5kE,KAAK2mD,MAAQ,EACtC,GAGFn9C,YAAYxJ,KAAKumE,YAAYvmE,KAAK2mD,cAC3C,CAEQsf,wBACN,GAAIjmE,KAAKymE,yBACP,OAAOzmE,KAAKymE,yBAA0B,CAAElC,KAAMvkE,KAAKukE,KAAM5d,MAAO3mD,KAAK2mD,QAGvE,GAAI3mD,KAAK4kE,uBAAyB5kE,KAAK2mD,MAAQ,EAAG,CAChD,MAAM+f,EAAc1mE,KAAKukE,KAAOvkE,KAAK2mD,MAAS,IAC9C,OAAI+f,EAAa,IACR,KAIF,GADWA,EAAWC,QAAQ3mE,KAAKW,YAE5C,CAEA,OAAO6I,YAAYxJ,KAAKumE,YAAYvmE,KAAKukE,YAC3C,iDAxMWF,GAAiBpjE,0EAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA,4DAAjBq7D,EAAiBj7D,UAAA,mBAAA+C,OAAA,CAAAw6C,MAAA,QAAA4d,KAAA,OAAAl/D,MAAA,QAAA2/D,iBAAA,mBAAAC,eAAA,iBAAArD,SAAA,WAAAjhE,SAAA,WAAA1G,OAAA,SAAAD,MAAA,QAAAwqE,UAAA,YAAAC,WAAA,aAAAC,cAAA,gBAAAC,eAAA,iBAAAP,WAAA,aAAAQ,sBAAA,wBAAAb,YAAA,cAAAc,eAAA,iBAAAM,iBAAA,mBAAAqB,qBAAA,uBAAAC,yBAAA,4BAAAj8D,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDTP5C,2EAAA,mCAQVA,2EAAA,mOADbvI,uBAZA,EAAA2lE,EAAA,qBAYA3lE,CAZkC,EAAA4lE,EAAA,wBAYlC5lE,CAFqC,EAAA6lE,EAAA,yBAAA7lE,4EAVtBA,uBAAA,OAAAwC,EAAAsgE,aAQG9iE,wBAA6BA,uBAA7B,OAAAwC,EAAA8gE,MAAA,GAAA9gE,EAAAkjD,MAAA,EAA6B1lD,CAAA,WAAA8lE,krBEMzC,MAAOC,EAQXlnE,YAAoBmnE,GAAAjnE,KAAAinE,eAClBjnE,KAAKknE,YAAYlgE,QAAQ,CAACmgE,EAAOjgE,KAC/BigE,EAAM/V,QAAU,IAAOpxD,KAAKonE,YAAYC,UAAYngE,GAExD,CAEAuH,WACEzO,KAAKsnE,iBACP,CAEA1gE,YAAYC,GACNA,EAAQqgE,aAAergE,EAAQqgE,WAAWK,iBAC5CvnE,KAAKsnE,iBAET,CAEQA,kBACNtnE,KAAKinE,aAAaO,cAAcxnE,KAAKknE,WAAW9rE,QAChD4E,KAAKmnE,MAAQnnE,KAAKinE,aAAaQ,WAC/BznE,KAAK0nE,eAAiB1nE,KAAKinE,aAAaU,iBAAiBh5D,UAAWxE,IAClEnK,KAAKonE,YAAcj9D,GAEvB,CAEAy9D,YAAYz9D,GACVnK,KAAKinE,aAAaY,eAAe19D,EACnC,CAEA6f,cACEhqB,KAAK0nE,eAAex9C,aACtB,iDAtCW88C,GAAe/lE,8BAAAC,KAAA,4DAAf8lE,EAAe59D,UAAA,gBAAA+C,OAAA,CAAA+6D,WAAA,cAAArgD,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,iEAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICd5BrI,2BAAA,WACEA,sBAAA,8BAKFA,kCAHIA,wBACAA,uBADA,QAAAwC,EAAAyjE,WACAjmE,CADoB,gBAAAwC,EAAA2jE,YAAA,KAAA3jE,EAAA2jE,YAAAC,2qBCUZhpC,IA+BAC,wBAxCN,MAAOwpC,SACY9nE,KAAA+nE,aAAe,MAAO,QACtB/nE,KAAAgoE,YAAc,gBAAiB,QAC/BhoE,KAAAioE,YAAc,WAAY,QAC1BjoE,KAAAkoE,QAAU,2BAA4B,QACtCloE,KAAAmoE,UAAY,gBAAkBC,IAAYC,KAAO,qBAAsB,QACvEroE,KAAAsoE,SAAW,sBAAuB,GAG/CjqC,QAAQ,KAElBne,OAAA,SAGAme,EAAA9e,KAAA,OAGA8e,EAAAkqC,OAAA,SAGAlqC,EAAAmqC,OAAA,SAGAnqC,EAAAnV,OAAA,SAGAmV,EAAAoqC,IAAA,MAGApqC,EAAAqqC,KAAA,OACArqC,EAAApL,MAAA,QAGAoL,EAAAsqC,SAAA,WACAtqC,EAAAuqC,OAAA,SAGAvqC,EAAAwqC,QAAA,UAGF,SAAYvqC,GAEVA,EAAApe,OAAA,SAGAoe,EAAApV,OAAA,SAGAoV,EAAAmqC,IAAA,MAGAnqC,EAAAkqC,OAAA,SAGAlqC,EAAA/e,KAAA,OAGA+e,EAAAsnB,OAAA,SAGAtnB,EAAAoqC,KAAA,OACApqC,EAAArL,MAAA,QACAqL,EAAAiqC,OAAA,SACAjqC,EAAAwqC,MAAA,QAGAxqC,EAAAyqC,KAAA,OAGAzqC,EAAAqqC,SAAA,WACArqC,EAAAsqC,OAAA,SAGAtqC,EAAA0qC,MAAA,QACA1qC,EAAA2qC,KAAA,OACA3qC,EAAA4qC,SAAA,WACA5qC,EAAAuqC,QAAA,SACF,CArCA,CAAYvqC,MAAY,KA0ClB,MAAO6qC,EAsEXrpE,cAEEE,KAAKkgB,OAAS1W,kBAEdxJ,KAAKopE,OAAS5/D,kBAEdxJ,KAAKqpE,OAAS7/D,kBAEdxJ,KAAKspE,4BAA8B9/D,wCAEnCxJ,KAAKupE,QAAU//D,mBAGfxJ,KAAKkpB,OAAS1f,kBAGdxJ,KAAKyoE,IAAMj/D,eACXxJ,KAAKwpE,IAAMhgE,eACXxJ,KAAKypE,OAASjgE,kBAGdxJ,KAAKwoE,OAASh/D,kBACdxJ,KAAK0pE,MAAQlgE,iBAGbxJ,KAAKuf,KAAO/V,gBACZxJ,KAAKuoE,OAAS/+D,kBACdxJ,KAAK4lD,OAASp8C,kBACdxJ,KAAK2pE,QAAUngE,mBACfxJ,KAAK4pE,KAAOpgE,gBAGZxJ,KAAK6pE,KAAOrgE,gBACZxJ,KAAK8pE,KAAOtgE,gBAGZxJ,KAAKizB,MAAQzpB,iBACbxJ,KAAK0oE,KAAOl/D,gBACZxJ,KAAK+pE,WAAavgE,sBAClBxJ,KAAKgqE,QAAUxgE,mBACfxJ,KAAK8oE,MAAQt/D,iBACbxJ,KAAKiqE,QAAUzgE,mBACfxJ,KAAKkqE,UAAY1gE,qBACjBxJ,KAAKmqE,QAAU3gE,mBACfxJ,KAAKoqE,UAAY5gE,qBACjBxJ,KAAKqqE,SAAW7gE,oBAChBxJ,KAAKsqE,QAAU9gE,mBACfxJ,KAAKuqE,MAAQ/gE,iBACbxJ,KAAKwqE,OAAShhE,kBACdxJ,KAAKyqE,QAAUjhE,mBACfxJ,KAAK0qE,SAAWlhE,oBAChBxJ,KAAK2qE,SAAWnhE,oBAChBxJ,KAAK4qE,MAAQphE,iBACbxJ,KAAK+oE,KAAOv/D,gBACZxJ,KAAK6qE,QAAUrhE,mBACfxJ,KAAK8qE,MAAQthE,yBACbxJ,KAAK+qE,UAAYvhE,qBACjBxJ,KAAKgrE,OAASxhE,kBACdxJ,KAAKirE,MAAQzhE,iBACbxJ,KAAKkrE,kBAAoB1hE,6BACzBxJ,KAAKmrE,iBAAmB3hE,4BACxBxJ,KAAKorE,UAAY5hE,qBAEjBxJ,KAAKqrE,YAAc7hE,uBACnBxJ,KAAKsrE,WAAa9hE,sBAClBxJ,KAAKurE,OAAS/hE,kBAEdxJ,KAAK2oE,SAAWn/D,oBAChBxJ,KAAK4oE,OAASp/D,kBAEdxJ,KAAKgpE,MAAQx/D,iBACbxJ,KAAKipE,KAAOz/D,gBACZxJ,KAAKkpE,SAAW1/D,oBAChBxJ,KAAK6oE,QAAUr/D,mBAEfxJ,KAAKwrE,kBAAoBhiE,6BACzBxJ,KAAKyrE,QAAUjiE,mBACfxJ,KAAK0rE,OAASliE,kBAEdxJ,KAAK2rE,cAAgBniE,yBAErBxJ,KAAK4rE,SAAWpiE,oBAChBxJ,KAAK6rE,WAAariE,sBAElBxJ,KAAK8rE,OAAStiE,kBACdxJ,KAAK+rE,QAAUviE,mBACfxJ,KAAKgsE,WAAaxiE,sBAClBxJ,KAAKisE,UAAYziE,qBACjBxJ,KAAKksE,eAAiB1iE,0BAEtBxJ,KAAKmsE,WAAa3iE,4BACpB,iDAjKW2/D,EAAgB,+DAAhBA,EAAgBhoE,QAAhBgoE,EAAgB/nE,UAAAC,WAFf,QAAM,EAyKd,MAAO+qE,EA0CXtsE,cAEEE,KAAKqsE,QAAU7iE,mBAGfxJ,KAAKssE,QAAU9iE,mBAGfxJ,KAAKusE,MAAQ/iE,iBAGbxJ,KAAKwsE,QAAUhjE,mBAGfxJ,KAAKysE,OAASjjE,kBACdxJ,KAAK0sE,SAAWljE,oBAChBxJ,KAAK2sE,UAAYnjE,qBACjBxJ,KAAK4sE,MAAQpjE,iBAGbxJ,KAAK6sE,OAASrjE,kBACdxJ,KAAK8sE,OAAStjE,kBACdxJ,KAAK+sE,cAAgBvjE,yBACrBxJ,KAAKgtE,UAAYxjE,qBACjBxJ,KAAKitE,UAAYzjE,qBACjBxJ,KAAKktE,YAAc1jE,uBACnBxJ,KAAKmtE,UAAY3jE,qBACjBxJ,KAAKotE,YAAc5jE,uBACnBxJ,KAAKqtE,WAAa7jE,sBAClBxJ,KAAKstE,UAAY9jE,qBACjBxJ,KAAKutE,OAAS/jE,kBACdxJ,KAAKwtE,QAAUhkE,mBACfxJ,KAAKytE,SAAWjkE,oBAChBxJ,KAAK0tE,WAAalkE,sBAClBxJ,KAAK2tE,YAAcnkE,uBACnBxJ,KAAK4tE,SAAWpkE,oBAChBxJ,KAAK6tE,OAASrkE,kBACdxJ,KAAK8tE,QAAUtkE,0BACfxJ,KAAK+tE,YAAcvkE,uBACnBxJ,KAAKgrE,OAASxhE,kBAGdxJ,KAAKguE,UAAYxkE,qBACjBxJ,KAAKiuE,QAAUzkE,mBAEfxJ,KAAKgpE,MAAQx/D,iBACbxJ,KAAKipE,KAAOz/D,gBACZxJ,KAAKkpE,SAAW1/D,oBAChBxJ,KAAK6oE,QAAUr/D,kBACjB,iDA3FW4iE,EAAyB,+DAAzBA,EAAyBjrE,QAAzBirE,EAAyBhrE,UAAAC,WAFxB,QAAM,EAmGd,MAAO6sE,EAGXpuE,cACEE,KAAKmuE,qBAAuB,GAC9B,iDALWD,EAAoB,+DAApBA,EAAoB/sE,QAApB+sE,EAAoB9sE,UAAAC,WAFnB,QAAM,EAUb,MAAM+sE,EAAgB,CAAC,UAAW,WAE5BC,EAAc,CACzB,QACA,QACA,SACA,MACA,SACA,MACA,SACA,SACA,WACA,WACA,OAGW1mD,EAAO,OACP2mD,EAAiB,iDCvXvB,MAAMjwD,EAA0B,kRCgBnCpd,2BADF,UACEA,CADe,oBAIDA,uBAAA,yBAAA2J,GAAA,MAAArJ,EAAAN,0BAAAsL,GAAAgiE,EAAAhtE,EAAAgB,KAAAisE,OAAAxhE,EAAAzL,EAAAgB,KAAAksE,IAAA5P,EAAA59D,4BAAA,OAAAA,wBAAiB49D,EAAA6P,oBAAA1hE,EAAAqlB,MAAAk8C,EAAAp/D,KAAAvE,GAAmD,GAHlF3J,wBAAA,KAKAA,sBAAA,YAEAA,wBACFA,qGARgBA,2DAAA,cAAA+L,EAAAqlB,MAAA,IAEApxB,uBADA,UAAA49D,EAAA8P,aAAA3hE,EAAAqlB,OACApxB,CADmC,WAAA49D,EAAA+P,YAK3C3tE,sBAAA,GAAAA,mCAAA,eAAA+L,EAAAqlB,MAAA,IAA4BpxB,sBAAA4tE,8FASlC5tE,2BADF,UACEA,CADe,oBAIDA,uBAAA,yBAAA2J,GAAA,MAAAkkE,EAAA7tE,0BAAAiU,GAAA65D,EAAAD,EAAAvsE,KAAAisE,OAAAQ,EAAAF,EAAAvsE,KAAAksE,IAAA5P,EAAA59D,4BAAA,OAAAA,wBAAiB49D,EAAA6P,oBAAAM,EAAA38C,MAAA08C,EAAA5/D,KAAAvE,GAAmD,GAHlF3J,wBAAA,KAKAA,sBAAA,aAEAA,wBACFA,qHARgBA,wBAEAA,uBAFA,KAAA+tE,EAAA38C,MAAA,IAAA08C,EAAA5/D,KAEAlO,CAFoC,UAAAguE,EAEpChuE,CADiB,WAAA49D,EAAA+P,YAKzB3tE,sBAAA,GAAAA,uBAAA,MAAA+tE,EAAA38C,MAAA,IAAA08C,EAAA5/D,sEAONlO,2BADF,UACEA,CADe,qBAIDA,uBAAA,yBAAA2J,GAAA,MAAAskE,EAAAjuE,0BAAAkuE,GAAA5sE,KAAAs8D,EAAA59D,4BAAA,OAAAA,wBAAiB49D,EAAAuQ,sBAAAF,EAAA//D,KAAAvE,GAA0C,GAHzE3J,wBAAA,KAKAA,sBAAA,aAEAA,wBACFA,kFARgBA,2DAAA,eAAAiuE,EAAA//D,KAAA,IAEAlO,uBADA,WAAA49D,EAAA+P,WACA3tE,CADuB,UAAA49D,EAAAwQ,gBAAAH,EAAA//D,OAK/BlO,sBAAA,GAAAA,mCAAA,gBAAAiuE,EAAA//D,KAAA,IAA+BlO,sBAAAiuE,EAAA90E,kCCxCnC,MAAOk1E,EAiBXxvE,cAZSE,KAAAgxB,OAAwB,GACxBhxB,KAAAuvE,qBAAsB,EACtBvvE,KAAAixB,aAAe,GACfjxB,KAAA4uE,YAAa,CASP,CAEfngE,WACEzO,KAAK6M,QAAQ7F,QAASwnE,IACA,QAAhBA,EAAOp0E,MACTo0E,EAAOn/D,aAAerP,KAAKwvE,qBAC3BhB,EAAOiB,eAAiBzvE,KAAK0vE,8BAE7BlB,EAAOn/D,aAAerP,KAAK2vE,0BAC3BnB,EAAOiB,eAAiBzvE,KAAK0vE,6BAE/BlB,EAAOoB,UAAW,IAEpB5vE,KAAK6vE,kBACL7vE,KAAKyS,KAAKC,IAAI1S,KAAK8vE,YAAYnwD,SAAS3f,KAAKixB,aAC/C,CAEA4+C,kBAGE7vE,KAAKyS,KAAKC,IAAI1S,KAAK8vE,YAAYnX,aAAahqD,UAAWrO,IACrD,MAAMyvE,EAA2B,GACjC59D,SAAOnS,KAAKgxB,OAASqB,IAEnB,MAAM29C,EAAuB,CAAEz9C,MAAM,EAAO09C,OAAO,EAAOC,SAAS,GACnEF,EAAgB39C,MAAWA,EAEvBA,KAAS/xB,GACX6R,SAAO7R,EAAM+xB,GAASvlB,IACpBkjE,EAAgBljE,IAAc,IAGlCijE,EAAkB7zE,KAAK8zE,EAAe,GAExChwE,KAAKuC,KAAOwtE,GAEhB,CASApB,aAAat8C,GACX,MAAMC,EAAmBngB,SAAOnS,KAAKuC,KAAO4tE,GACnCA,EAAE99C,QAAaA,GAExB,OAAIlgB,gBAAcmgB,KAGdtyB,KAAKuvE,oBACAj9C,EAAiBC,MAAWD,EAAiB29C,OAAY39C,EAAiB49C,QAGjF59C,EAAiBC,MACjBD,EAAiBrN,QACjBqN,EAAiBvqB,QACjBuqB,EAAiBjH,OAErB,CAUAgkD,gBAAgBe,GACd,IAAI7wC,EAAc,CAAC6wC,GACnB,MAAI,UAAYA,GAAYpwE,KAAKuvE,oBAC/BhwC,EAAc,CAAC,OAAQ,QAAS,WACvB,UAAY6wC,IACrB7wC,EAAc,CAAC,OAAQ,SAAU,SAAU,WAEtCA,EAAY9F,MAAO3sB,GACjB9M,KAAKuC,KAAKk3B,MAAOnH,GACfA,EAAiBxlB,IAG9B,CAEA4hE,oBAAoBr8C,EAAe+9C,EAAkBvd,EAAa,MAGhE,MAAM9hC,EAAqB5e,cAAYnS,KAAKyS,KAAK9B,SAAS3Q,KAAK8vE,aAC/D,IAAIvwC,EAAc,CAAC6wC,GACf,UAAYA,GAAYpwE,KAAKuvE,oBAC/BhwC,EAAc,CAAC,OAAQ,QAAS,WACvB,UAAY6wC,IACrB7wC,EAAc,CAAC,OAAQ,SAAU,SAAU,WAEvClN,KAAStB,IACbA,EAAmBsB,GAAS,IAK5BwgC,IACU,IAAVA,IACC1gD,YAAUotB,EAAY13B,OAAQsK,iBAAe4e,EAAmBsB,GAAQkN,GAAa13B,QAEtFkpB,EAAmBsB,GAASlgB,UAAQ4e,EAAmBsB,GAAQkN,IAE/DxO,EAAmBsB,GAASlgB,eAAa4e,EAAmBsB,GAAQkN,GAChEptB,YAAU4e,EAAmBsB,KAC/BlgB,UAAQ4e,EAAoBsB,IAGhCryB,KAAKyS,KAAKC,IAAI1S,KAAK8vE,YAAYnwD,SAASoR,EAC1C,CAEAq+C,sBAAsBgB,EAAkBvd,GAGtC,MAAM9hC,EAAqB5e,cAAYnS,KAAKyS,KAAK9B,SAAS3Q,KAAK8vE,aAC/D,IAAIvwC,EAAc,CAAC6wC,GACf,UAAYA,GAAYpwE,KAAKuvE,oBAC/BhwC,EAAc,CAAC,OAAQ,QAAS,WACvB,UAAY6wC,IACrB7wC,EAAc,CAAC,OAAQ,SAAU,SAAU,WAE7CptB,SAAOotB,EAAczyB,IACnBqF,SAAOnS,KAAKgxB,OAASqB,KACL,IAAVwgC,EACF9hC,EAAmBsB,GAASlgB,UAAQ4e,EAAmBsB,GAAQ,CAACvlB,KAEhEikB,EAAmBsB,GAASlgB,eAAa4e,EAAmBsB,GAAQ,CAACvlB,IACjEqF,YAAU4e,EAAmBsB,KAC/BlgB,UAAQ4e,EAAoBsB,GAAK,EAGtC,GAEHryB,KAAKyS,KAAKC,IAAI1S,KAAK8vE,YAAYnwD,SAASoR,EAC1C,iDA3JWu+C,EAAyB,4DAAzBA,EAAyBlmE,UAAA,4BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,0mBDWlCE,2EAAA,mCACkC,iCAAW,sCAc7CA,2EAAA,mCAC4C,sCAY5CA,2EAAA,mCACqC,iCAAiB,+jBAlD1DvI,sBAAA,gBAyCAA,uBA9BA,EAAAovE,EAAA,yBAAApvE,mCA8BAA,CA3BoC,EAAAqvE,EAAA,yBAAArvE,mCA2BpCA,CAZoC,EAAAsvE,EAAA,yBAAAtvE,0CApB1BA,uBATA,OAAAwC,EAAAlB,KASAtB,CATa,UAAAwC,EAAAoJ,QASb5L,CARmB,gBAQnBA,CANoB,gBAMpBA,CALoB,cAKpBA,CAJkB,YAIlBA,CAHgB,UAGhBA,CADW,2IEFf,MAAOuvE,EACX1wE,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvC2kD,OAAOC,GACL,OAAO1wE,KAAK8rB,KAAKzwB,KAAK,0BAA2B,CAAEq1E,SAAUA,GAC/D,mDALWF,GAAevvE,qBAAAC,cAAA,+DAAfsvE,EAAervE,QAAfqvE,EAAepvE,UAAAC,WAFd,QAAM,8RCAhBJ,2BAFF,UAEEA,CADqC,UACrCA,mBAAA,KAMFA,wDALKA,wBAGAA,uBAHA,aAAA0vE,GAAA3xD,IAGA/d,CAHsB,0BAAAA,4BAAA,EAAA2vE,IAIjB3vE,8CAAA0vE,GAAAv2E,2DATZ6G,2BAAA,UAEEA,uBAAA,EAAA4vE,EAAA,YASF5vE,sEARsBA,+CAAA,UAAAM,GAAAuvE,iCAiCV7vE,2BADF,OACEA,CAD6C,WAC7CA,mBAAA,KAC6BA,2BACzBA,2BAAJ,OAAIA,CAAA,SAAKA,mBAAA,GACXA,0FAFmBA,sBAAA,GAAAA,sBAAA8vE,+BACR9vE,sBAAA,GAAAA,8BAAAM,GAAA+K,YAAAykE,gCAJb9vE,2BAFF,aAEEA,CADkG,WAEhGA,uBAAA,EAAA+vE,GAAA,aAMJ/vE,yEAN2BA,sBAAA,GAAAA,uBAAA,UAAAM,GAAA0vE,KAAAC,wCAJ7BjwE,oCAAA,GACEA,uBAAA,EAAAkwE,GAAA,sHAnBNlwE,oCAAA,GACEA,2BAAA,+CAOIA,uBAHA,0BAAA2J,IAAA3J,0BAAAqT,IAAA,MAAA/S,GAAAN,4BAAA,OAAAA,wBAAkBM,GAAAiL,eAAA5B,IAAsB,EAGxC3J,CAHyC,2BAAA2J,IAAA3J,0BAAAqT,IAAA,MAAA/S,GAAAN,4BAAA,OAAAA,wBAGtBM,GAAAmL,gBAAA9B,IAAuB,GAE5C3J,2BAAA,YACEA,sBAAA,yBAMFA,2BACAA,uBAAA,EAAAmwE,GAAA,sBAaFnwE,4GA7BIA,wBAOAA,uBAPA,OAAAA,wBAAA,KAAAM,GAAA8vE,OAOApwE,CAPsB,UAAAM,GAAA0vE,KAAA3mD,MAAAzd,QAOtB5L,CAN8B,aAAAM,GAAA0vE,KAAA3mD,MAAAgnD,WAM9BrwE,CALoC,aAAAM,GAAA0vE,KAAAC,eAAA91E,OAAA,EAKpC6F,CAH6C,gBAAAM,GAAA0vE,KAAA3mD,MAAAinD,cAG7CtwE,CAF0C,aAAAM,GAAA0vE,KAAA3mD,MAAAknD,YAIxBvwE,sBAAA,GAIAA,uBAJA,aAAAM,GAAAuL,WAIA7L,CAJyB,YAAAM,GAAA0K,UAIzBhL,CAHuB,eAAAM,GAAA0vE,KAAAQ,SAM5BxwE,+CAAA,OAAAM,GAAA+K,aAAA/K,GAAA0vE,KAAAC,eAAA91E,OAAA,2BAoBf6F,oCAAA,GAA8BA,mBAAA,yEAD9BA,2BADF,SACEA,CAD8D,aAChBA,mBAAA,GAAwCA,2BACtFA,uBAAA,EAAAywE,GAAA,sBACFzwE,gEAFgDA,sBAAA,GAAAA,+BAAA,GAAA0wE,GAAApvD,IAAA,KAAAovD,GAAArxE,MAAA,IAC/BW,+CAAA,QAAA2wE,+BAFjB3wE,uBAAA,EAAA4wE,GAAA,4EAA2B5wE,uBAAA,UAAAA,wBAAA,IAAA6wE,gCAQ3B7wE,2BAAA,UAAMA,mBAAA,kCAAoBA,uDAApBA,8EAAA,IAAAumB,gCAKNvmB,2BAAA,UAAMA,mBAAA,oCAAsBA,uDAAtBA,8EAAA,IAAA45B,gCAKJ55B,2BADF,WACEA,CAD6D,iBAG/BA,mBAAA,GAA+BA,2BAC7DA,sBAAA,mCAIFA,sEALgCA,sBAAA,GAAAA,8BAAAM,GAAAwwE,WAAAC,iBC5C5B,MAAOC,GAsBXnyE,YACUoO,EACAy5B,GACAuqC,GACAn0D,GACAo0D,GACAC,GACAvqD,GACAtT,IAPAvU,KAAAkO,qBACAlO,KAAA2nC,gBACA3nC,KAAAkyE,sBACAlyE,KAAA+d,eACA/d,KAAAmyE,mBACAnyE,KAAAoyE,kBACApyE,KAAA6nB,gBACA7nB,KAAAuU,UAfVvU,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAAsM,YAAsC,GAEtCtM,KAAA8wE,KAAO,GAEP9wE,KAAA+xE,WAAa,GAYX/xE,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WAKEzO,KAAKoyE,eAAe7vE,KAAKoM,UAAWpM,IAClC,MAAMga,GAAmBha,EAAKga,SAC9Bvc,KAAK8wE,KAAOvuE,EAAKuuE,KACjB9wE,KAAKkyE,mBACFxuD,KAAK,MAAMnH,MACX5N,UAAW0pB,IAA2Br4B,KAAKqyE,YAAYh6C,KAC1Dr4B,KAAKqxE,MAAQrxE,KAAK2nC,aAAaj1B,IAAI,IAAM1S,KAAKkyE,mBAAmBxuD,KAAKnH,IAAS,GAEjFvc,KAAKoyE,eAAe7vE,KAAKoM,UAAWpM,IAClCvC,KAAKuc,SAAWha,EAAKga,UAEzB,CAEA81D,YAAYpB,GACW/yE,OAUrB8B,KAAK8M,WAAa9M,KAAKu/B,aAVFrhC,GAU0B+yE,EAAK1xC,YAAY,GAT9DrhC,GACGvB,MAAM,KACNgM,OACC,CAACwZ,GAAamwD,GAAcr2E,KACpB,IAANA,GACIq2E,GAAK/tD,cACL,GAAGpC,KAAMmwD,GAAKC,OAAO,GAAGC,gBAAgBF,GAAK91E,OAAO,GAAG+nB,gBAC7D,MAGN,MAAMkuD,GAAY,CAChBC,UAAW1yE,KAAK2yE,aAChBrgB,KAAMtyD,KAAK4yE,QACXttC,SAAUtlC,KAAKm7B,aAEjB81C,EAAK3mD,MAAMzd,QAAQ7F,QAAQ,CAACm8C,GAASj8C,WACH0yB,IAA5BupB,GAAQ9zC,eACV4hE,EAAK3mD,MAAMzd,QAAQ3F,IAAOmI,aAAkBojE,GAAUtvB,GAAQ9zC,cAAyB,GAM3F4hE,EAAK3mD,MAAMzd,QAAUokE,EAAK3mD,MAAMzd,QAAQwX,OAAQwuD,KACtCA,GAAIC,UAGd9yE,KAAKixE,KAAOA,EACZ,QAASh1E,GAAI,EAAGA,GAAI+D,KAAKixE,KAAKQ,QAAQr2E,OAAQa,KAAK,CACjD,IAAIqgB,GAAStc,KAAKixE,KAAKQ,QAAQx1E,IAC3BqgB,GAAO2D,UACT3D,GAAO2D,QAAWhU,KAAeA,GAAU8mE,cAEb,KAA5Bz2D,GAAO0M,MAAM1D,aACfhJ,GAAO0M,MAAQhpB,KAAKA,KAAKixE,KAAKQ,QAAQx1E,IAAG+sB,MAAM1D,YAAYtgB,KAAKhF,MAEpE,CACF,CAEAqrB,SACE,MAAM2nD,EAAchzE,KAAKiM,UAAUmc,QAAQpoB,KAAKixE,KAAKgC,WACrDjzE,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB1hB,YAAYxJ,KAAKixE,KAAK10D,WACvC4O,UAAW,CAAC6nD,GACZ32D,aAAcA,KACZrc,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,oBAAqBiuD,GAC5ChuD,KAAMhlB,KAAKkyE,mBAAmB7mD,OAAOrrB,KAAKuc,SAAUy2D,KAErDrkE,UAAU,CACT4S,MAAOA,KACLvhB,KAAK4qB,SAAS4lC,YAAU,EAE1BprC,SAAUA,KACRplB,KAAK4qB,SAAS4lC,YAAU,GAE3B,GAGT,CAEA9jD,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAO,eAAeqmD,GACb,QAAS52D,GAAI,EAAGA,GAAI+D,KAAKixE,KAAKC,eAAe91E,OAAQa,KAAK,CACxD,IAAIuyE,GAASxuE,KAAKixE,KAAKC,eAAej1E,IAClCi3E,GAAergB,IAAQ2b,IAC3BxuE,KAAKsM,YAAYkiE,IAAUxuE,KAAKmzE,oBAAoBD,GACtD,CACF,CAEArqD,OACE,IAAItG,EAAM,GACNviB,KAAKiM,UAAU8mE,eACjBxwD,EAAMviB,KAAKiM,UAAUmc,QAAQpoB,KAAKixE,KAAKgC,YAGzC,MAAMrqD,GAAa5oB,KAAKixE,KAAKQ,QAAQ5+D,KAAMyJ,IAA2B,SAAhBA,GAAOliB,MAC7D4F,KAAKuU,OAAOC,SAAS,CAACoU,GAAWH,YAAa,CAAEqX,YAAa,CAAEvd,IAAKA,IACtE,CAEA6wD,aACE,IAAI1C,EAAqB,GACzB1wE,KAAKiM,UAAUqzD,SAASt4D,QAASynE,IAAQiC,EAASx0E,KAAKuyE,GAAI4E,SAC3DrzE,KAAKmyE,gBAAgB1B,OAAOC,GAAU/hE,UAAWpM,KAC/C,MAAM+wE,GAAiB,CACrBz/C,UAAWrqB,iCACXsvB,WAAYtvB,iBACZuvB,QAAS/4B,KAAKuzE,cACd7tB,YAAY,EACZyK,YAAY,EACZp8B,SAAUA,KACR/zB,KAAK4qB,SAAS4lC,YAAU,GAG5BxwD,KAAK+xE,WAAWC,eAAoBzvE,GAAKitB,OACzCxvB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKuO,IAA4Bk6C,GAAc,EAErF,CAQAE,eAAeC,EAAcnzE,IAC3B,IAEE,OADoB26C,KAAKy4B,MAAMpzE,GAEjC,OACE,OAAOA,EACT,CACF,CAMA6yE,oBAAoBQ,GAClB,OAAIh0E,MAAMmzD,QAAQ6gB,IAA+B,iBAAZA,EAC5B14B,KAAKC,UAAUy4B,EAAS3zE,KAAKwzE,eAAgB,GAE/CG,CACT,mDAtLW1B,IAAkBhxE,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,GAAAjI,8BAAAkI,kBAAAlI,8BAAA8kB,KAAA9kB,8BAAAkI,UAAA,4DAAlB8oE,GAAkB7oE,UAAA,oBAAAC,UAAA,SAAAC,GAAA7F,OAAA,EAAA6F,sgBDhBnBE,2EAAA,oCA4BiBA,2EAAA,8kCA4B7BvI,uBAjEA,EAAA2yE,EAAA,WAiEA3yE,CAhEiB,EAAA4yE,GAAA,sBAgEjB5yE,CApD2B,EAAA6yE,GAAA,yBAAA7yE,mCAoD3BA,CAjBoC,EAAA8yE,GAAA,yBAAA9yE,mCAiBpCA,CAToC,EAAA+yE,GAAA,yBAAA/yE,mCASpCA,CAJoC,EAAAgzE,GAAA,yBAAAhzE,2CA5D/BA,uBAAA,OAAAwC,GAAAqtE,MAYU7vE,+CAAA,OAAAwC,GAAAwtE,wQELXv3E,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,2EAGTC,KAAQ,MACRC,KAAQ,IChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,iLAGTC,KAAQ,SACRC,KAAQ,IChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,uHAGTC,KAAQ,QACRC,KAAQ,IChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,iGAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,qJAGTC,KAAQ,aACRC,KAAQ,ICrBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,iEAGTC,KAAQ,YACRC,KAAQ,eChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8GAGTC,KAAQ,WACRC,KAAQ,IChBNX,EAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,wBAGTC,KAAQ,cACRC,KAAQ,iJCfJ,MAAO65E,UAAoCC,YAI/Cr0E,YAAoBs0E,IAClB/lE,QADkBrO,KAAAo0E,+BAEpB,CAEAC,WACEr0E,KAAKo0E,6BAA6Bl8C,OAAOl4B,KAAKs0E,SAChD,mDAVWJ,GAA2BjzE,8BAAAC,KAAA,4DAA3BgzE,EAA2B9qE,UAAA,8BAAAC,UAAA,SAAAC,GAAA7F,OAAA,EAAA6F,kXCTxCrI,2BAAA,kBAOUA,uBAAA,oBAAAA,iCAAAsL,IAAAtL,wBAAUwC,GAAA4wE,WAAU,GAC9BpzE,kCAHUA,wBAAA,aAAAwC,GAAA4M,WACApP,uBALA,cAAAwC,GAAA8wE,YAKAtzE,CAL2B,OAAAwC,GAAA+wE,MAAAC,KAK3BxzE,CAJmB,OAAAwC,GAAA+wE,MAAAE,KAInBzzE,CAHmB,mBAAAwC,GAAA80D,0KCGvBt3D,2BAAA,aACyBA,mBAAA,OAACA,uDAC1BA,2BAAA,eACEA,sBAAA,aACFA,uEADQA,+CAAA,YAAA+K,GAAA2oE,OAAA1zE,wDAPVA,2BAAA,aAGEA,mBAAA,GAGAA,uBAFA,EAAA2zE,GAAA,aAEA3zE,CADyB,EAAA4zE,GAAA,mBAI3B5zE,4GANEA,uDAAA,IAAA+K,GAAAwoE,MAAA7yE,MAAA,KACOV,+CAAA,OAAA+K,GAAAwoE,MAAAjhE,WAAA,IAAAvH,GAAAwoE,MAAAM,oBAEK7zE,+CAAA,OAAA+K,GAAA2oE,oCAPhB1zE,2BAAA,WACEA,uBAAA,EAAA8zE,GAAA,eAUF9zE,sEAVUA,+CAAA,OAAA+K,GAAAwoE,MAAA7yE,QAAA,IAAAqK,GAAAwoE,MAAAQ,uCAgBV/zE,oCAAA,GACEA,+BAAA,gHAAcA,+CAAA,mBAAAg0E,gCAKhBh0E,oCAAA,GACEA,+BAAA,gHAAcA,+CAAA,mBAAAg0E,gCAGhBh0E,2BAAA,YAGEA,sBAAA,kCACFA,sEAFKA,wBAAA,mBACwBA,+CAAA,QAAA+K,GAAAusD,mCAG7Bt3D,2BAAA,cACoCA,mBAAA,GAAuBA,sEAAvBA,sDAAA+K,GAAAwoE,MAAAhjD,cC1BhC,MAAO0jD,WAAoCC,eAC/C,UAAIR,GAEF,SADmBS,KAAcp1E,KAAKu4D,QACnBxlD,MAAQ,EAC7B,yGAJWmiE,MAA2BG,IAA3BH,GAA2B,gEAA3BA,GAA2B9rE,UAAA,8BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,gZAAAC,SAAA,SAAArB,GAAA7F,IAAA,EAAA6F,KDTxCrI,uBAAA,EAAAq0E,GAAA,yBAAAr0E,oCAeAA,2BAAA,WAGEA,uBAAA,EAAAs0E,GAAA,sBAIAt0E,+BAAA,UAYAA,uBAVA,EAAAu0E,GAAA,qBAUAv0E,CAVyD,EAAAw0E,GAAA,YAUzDx0E,CAJ+B,EAAAy0E,GAAA,eAMjCz0E,mCApBKA,sBAAA,GACAA,wBADA,6BAAAwC,GAAA+wE,MAAAmB,cACA10E,CAD0D,YAAAwC,GAAA4M,WAE9CpP,+CAAA,oBAAAwC,GAAA+wE,MAAAmB,eAMA10E,sBAAA,GAAAA,uBAAA,oBAAAwC,GAAA+wE,MAAAmB,eAIT10E,+CAAA,OAAAwC,GAAA4M,WAMEpP,+CAAA,OAAAwC,GAAA+wE,MAAAhjD,+FElBJ,MAAOokD,GAdb91E,cAgBEE,KAAAq0E,SAAYliE,OACZnS,KAAA61E,UAAY,OAEZC,WAAW5lC,IAAc,CACzB6lC,iBAAiB9oC,IACfjtC,KAAKq0E,SAAWpnC,EAClB,CACA+oC,kBAAkB/oC,IAChBjtC,KAAK61E,UAAY5oC,EACnB,mDAXW2oC,GAAgC,4DAAhCA,GAAgCxsE,UAAA,0BAAAuoD,aAAA,SAAAroD,GAAA7F,IAAA,EAAA6F,IAAhCrI,uBAAA,kBAAA2J,IAAA,OAAAnH,GAAA4wE,SAAAzpE,GAAAvD,OAAA4uE,MAA6B,EAA7Bh1E,CAAgC,iBAAA2J,IAAA,OAAhCnH,GAAA4wE,SAAAzpE,GAAAvD,OAAA4uE,MAA6B,EAA7Bh1E,CAAgC,yBAAhCwC,GAAAoyE,WAAW,6CALX,CACT,CAAEnmE,QAASwmE,oBAAmBC,YAAaP,GAAkCQ,OAAO,OACrF,ECLG,MAAOC,WAAgClC,oHAAhCkC,MAAuBhB,IAAvBgB,GAAuB,gEAAvBA,GAAuBjtE,UAAA,0BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,qDAAAC,SAAA,SAAArB,GAAA7F,IAAA,EAAA6F,ICRpCrI,sBAAA,mBAEOA,uBADA,cAAAwC,GAAA8wE,YACAtzE,CAD2B,mBAAAwC,GAAA80D,sHC+H5B,MAAOrqC,EACXpuB,YAAoB08B,IAAAx8B,KAAAw8B,eAClBx8B,KAAKw8B,YAAYC,YAAY,CAC3B65C,EACAC,EACAC,EACAC,EACAC,EACA9nB,IACA+nB,EACAC,GAEJ,mDAZW1oD,GAAejtB,qBAAAC,eAAA,2DAAfgtB,GAAe,8DA7ExB/iB,eACAK,cACAwjD,oBACAzjD,mBACA4iB,IACAkgC,IACA/iD,eACAG,sBACAorE,eAAaC,QAAQ,CACnBC,MAAO,CACL,CAAE38E,KAAM,QAASgkC,UAAW44C,KAC5B,CAAE58E,KAAM,SAAUgkC,UAAW64C,KAC7B,CAAE78E,KAAM,QAASgkC,UAAW84C,IAA0BC,SAAU,CAAC,kBACjE,CAAE/8E,KAAM,WAAYgkC,UAAW81C,EAA6BiD,SAAU,CAAC,kBACvE,CAAE/8E,KAAM,OAAQgkC,UAAWi4C,GAAyBc,SAAU,CAAC,mBAEjEC,mBAAoB,CAClB,CAAEh9E,KAAM,WAAYwkC,QAAS,0BAC7B,CAAExkC,KAAM,OAAQwkC,QAAS,2CACzB,CACExkC,KAAM,cACNwkC,QACE,gIAGJ,CACExkC,KAAM,cACNwkC,QACE,+EAGJ,CAAExkC,KAAM,YAAawkC,QAAS,kCAC9B,CACExkC,KAAM,yBACNwkC,QAAS,6EAGbu4C,SAAU,CAAC,CAAE/8E,KAAM,gBAAiBgkC,UAAW82C,OAEjDmC,wBACAC,cACAn6C,eACAC,aACAC,iBACAk6C,mBACAC,eACAC,cACAl6C,eACAm6C,YACAC,gBAAW,oDC/FT,MAAOC,EACX93E,YAAmB6K,GAAA3K,KAAA2K,UAA8B,iDADtCitE,GAAoB32E,6CAAA,4DAApB22E,EAAoBxuE,UAAA,0PCJ/BnI,2BAAA,eAIQA,uBAAA,mBAAAA,0BAAAsL,IAAA,MAAAhL,GAAAN,0BAAA,UAAAA,wBAASM,GAAAs2E,eAAAt2E,GAAAu2E,eAA6B,GAM5C72E,2BAAA,UAAAA,mBAAA,KAAmCA,wDACnCA,sBAAA,YAGFA,yEAXQA,kCAAA,QAAAM,GAAAw2E,eAAAx2E,GAAAu2E,gBAKA72E,uBANA,YAAAM,GAAAu2E,cAAAE,WAMA/2E,CANsC,WAAAM,GAAA02E,uBAAA12E,GAAAu2E,eAMtC72E,CAHkD,aAAAM,GAAA22E,cAAA32E,GAAAu2E,eAGlD72E,CAF2C,mBAAAM,GAAAu2E,cAAAK,iBAAA,qEAItCl3E,sBAAA,GAAAA,sBAAAM,GAAAu2E,cAAA19E,kGAiBP6G,2BAAA,iCAG0BA,uBAAA,mBAAAA,0BAAAqT,IAAA,MAAA8jE,GAAAn3E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAASM,GAAAs2E,eAAAO,IAAsB,GAHzDn3E,mBAAA,KAWAA,kHAV0BA,uBAAAM,GAAA82E,YAAAD,KACAn3E,kCAAA,QAAAM,GAAAw2E,eAAAK,KAIAn3E,uBAFA,aAAAM,GAAA22E,cAAAE,IAEAn3E,CAFoC,mBAAAm3E,GAAAD,iBAAA,QAEpCl3E,CADwD,WAAAM,GAAA02E,uBAAAG,mDAKlFn3E,8CAAAm3E,GAAAh+E,2DAXF6G,oCAAA,GACEA,uBAAA,EAAAq3E,EAAA,kIAA2Br3E,+CAAA,OAAAM,GAAAu2E,gBAAAM,6BAD7Bn3E,uBAAA,EAAAs3E,EAAA,kEAAiCt3E,uBAAA,UAAAM,GAAAi3E,2CAXrCv3E,oCAAA,GACEA,2BAAA,4CAKEA,sBAAA,YAGFA,2BACAA,uBAAA,EAAAw3E,EAAA,yBAAAx3E,kJAPQA,wBACAA,uBADA,SAAAA,4BAAA,EAAAyI,GAAA,KACAzI,CAD6B,kBAAAy3E,0DAI9Bz3E,wBACAA,uBADA,UAAAM,GAAAwQ,MAAA4mE,UACA13E,CAD2B,OAAAM,GAAAwQ,MAAA8qD,kCAvBtC57D,oCAAA,GAgBEA,uBAfA,EAAA23E,EAAA,eAeA33E,CANqC,EAAA43E,EAAA,sGAT5B53E,+CAAA,OAAAM,GAAAu2E,eAAAv2E,GAAAwL,aAAA3R,OAAA,GAeM6F,+CAAA,OAAAM,GAAAu3E,2CA8Bf73E,2BAAA,4CAEEA,sBAAA,YAGFA,sEALQA,uBAAA,YAAAM,GAAAu2E,cAAAE,6EAeJ/2E,2BAAA,iCAG0BA,uBAAA,mBAAAA,0BAAA6T,IAAA,MAAAikE,GAAA93E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAASM,GAAAs2E,eAAAkB,IAAsB,GAHzD93E,mBAAA,KAWAA,kHAV0BA,uBAAAM,GAAA82E,YAAAU,KACA93E,kCAAA,QAAAM,GAAAw2E,eAAAgB,KAIA93E,uBAFA,aAAAM,GAAA22E,cAAAa,IAEA93E,CAFoC,mBAAA83E,GAAAZ,iBAAA,QAEpCl3E,CADwD,WAAAM,GAAA02E,uBAAAc,mDAKlF93E,8CAAA83E,GAAA3+E,2DAXF6G,oCAAA,GACEA,uBAAA,EAAA+3E,EAAA,kIAA2B/3E,+CAAA,OAAAM,GAAAu2E,gBAAAiB,8BAN/B93E,2BAAA,0BAKEA,uBAAA,EAAAg4E,EAAA,uBAcFh4E,oGAjBmBA,uBAFA,gBAAAi4E,GAEAj4E,CAF+B,UAE/BA,CADa,SAAAA,4BAAA,EAAAK,IAIGL,+CAAA,UAAAM,GAAAi3E,2CAmBjCv3E,2BADF,cACEA,CAD2B,UAC3BA,mBAAA,KAA6BA,wDAC7BA,sBAAA,YAGFA,sEAJaA,sBAAA,GAAAA,sBAAAM,GAAA43E,0CCjET,MAAOC,EALbt5E,cAaEE,KAAAq5E,SAAW,SAQXr5E,KAAA84E,iBAAkB,EAIlB94E,KAAAw4E,gBAAmC,GAEnCx4E,KAAA+R,MAAQC,KAERvD,WACEzO,KAAKs5E,iCACLt5E,KAAKu5E,mBACP,CAEA3yE,YAAYC,GACNA,EAAQoF,WACVjM,KAAKu5E,mBAET,CAEAA,oBACEv5E,KAAKw5E,wBACLx5E,KAAKy5E,qBACP,CAEApB,YAAY/7D,GACV,OAAOA,EAAOliB,KACXgO,QAAQ,KAAM,KACdA,QAAQ,YAAa,IACrBmc,aACL,CAKQ+0D,iCACN,IAAKt5E,KAAK8M,WAER,YADA9M,KAAK+M,aAAe,IAGtB,MAAMwyB,EAActtB,OAAOC,KAAKlS,KAAK8M,YAAYuX,OAAQ9B,IAAQviB,KAAK8M,WAAWyV,KACjFviB,KAAK+M,aAAe/M,KAAK+M,aAAasX,OAAQ/H,IAC5CijB,EAAYr9B,SAASoa,GAAOxP,YAEhC,CAEQ0sE,wBACNx5E,KAAKw4E,gBAAkBx4E,KAAK+M,aAAasX,OAAQ/H,GAC/CA,EAAOo9D,QAAUp9D,EAAOo9D,QAAQ15E,KAAKiM,WAAaqQ,EAEtD,CAWQm9D,sBACFz5E,KAAKm5E,aACPn5E,KAAK83E,mBAAgBl+C,GAOuB,WAA1C55B,KAAKw4E,kBAAkB,IAAI1rE,YAEY,IAAhC9M,KAAKw4E,gBAAgBp9E,UAD9B4E,KAAK83E,cAAgB93E,KAAKw4E,gBAAgB,GAI9C,CAEAN,cAAc57D,GACZ,GAAKA,EAAOmM,aAAczoB,KAAKi4E,uBAAuB37D,GAGtD,OAAOnK,aAAWmK,EAAOmM,YAAcnM,EAAOmM,WAAanM,EAAOmM,YACpE,CAYAwvD,uBAAuB37D,GACrB,MAAM2D,GAAU3D,EAAO2D,QACvB,GAAIA,GACF,QAAeA,GAAQjgB,KAAKiM,WAE9B,MAAMa,GAAawP,EAAOxP,WACpBwyD,GAAWt/D,KAAKiM,UAAU0c,oBAAsB3oB,KAAKiM,UAAUmc,QACrE,SACE,CAAC,SAAU,UAAUlmB,SAAS4K,KAAiBwyD,KAAYA,GAASqa,YAExE,CAEA9B,eAAev7D,GAQb,OAAQtc,KAAKi4E,uBAAuB37D,IAAWA,EAAO0M,OAAS1M,EAAO0M,OACxE,CAEA+uD,eAAez7D,GACb,GAAIA,EAAO2D,QAAS,CAClB,MAAMpkB,GAASygB,EAAO2D,QAAQjgB,KAAKiM,WACnC,OAAOkG,aAAWtW,IAAUA,GAASygB,EAAOjX,MAAQiX,EAAOjX,WAAQu0B,CACrE,IAAWtd,EAAOjX,MAChB,OAAOiX,EAAOjX,KAGlB,mDA5IW+zE,EAAqB,4DAArBA,EAAqBhwE,UAAA,uBAAA+C,OAAA,CAAAW,WAAA,aAAAb,UAAA,YAAAc,aAAA,eAAAssE,SAAA,WAAAF,aAAA,eAAAL,gBAAA,mBAAAjyD,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,oBDHnB5C,0EAAA,oCA0BwBA,4EAC/B,qCAgC6BA,4EAC/B,qCAQSA,0EAAA,yiCAFfvI,uBA7EA,EAAA24E,EAAA,qBA6EA34E,CA7E0D,EAAA44E,EAAA,yBAAA54E,mCA6E1DA,CAhCoB,EAAA64E,EAAA,yBAAA74E,mCAgCpBA,CAvB8B,EAAA84E,EAAA,yBAAA94E,8EAtDMA,uBAArB,QAAAwC,GAAA01E,aAAqBl4E,CAAA,WAAA+4E,iwBEmC9B,MAAOC,EA+BXn6E,YAAoBo6E,GAAAl6E,KAAAk6E,WAxBpBl6E,KAAAm6E,WAAkB,IAElBn6E,KAAAo6E,eAAgB,EAGhBp6E,KAAAq6E,iBAAkB,EAElBr6E,KAAAs6E,WAAY,EAEZt6E,KAAAu6E,SAAqB,GAMrBv6E,KAAA6M,QAAgC,GAOhC7M,KAAAw6E,UAAY,IAAI1wE,cAE2B,CAE3C2E,WACEzO,KAAK6M,QAAU,CACb,CACEsC,KAAM,MACNC,SAAU,EACV+Z,mBAAoBC,IAAaqxD,MAEnC,CACEtrE,KAAM,QACNC,SAAU,IAGVpP,KAAK06E,YACP16E,KAAK6M,QAAQ,GAAGsc,mBAAqBC,IAAauxD,aAMhD36E,KAAKw6E,UAAUz0B,UAAU3qD,OAAS,GACpC4E,KAAKsqB,MAAMkwD,UAAU7rE,UAAU,KAE7B3O,KAAKw6E,UAAUtwE,MAAI,GAGvBlK,KAAK46E,SACP,CAEAh0E,cACE5G,KAAK46E,SACP,CAEAA,UACE,IAAK56E,KAAKuC,KACR,OAEF,IAAIs4E,EAAQ76E,KAAK86E,UAAU96E,KAAKuC,MAC5BvC,KAAKu6E,WACPM,EAAQA,EAAMx2D,OAAQ02D,IAAU/6E,KAAKu6E,SAASr4E,SAAS64E,EAAKx4D,OAE9DviB,KAAKg7E,UAAYH,CACnB,CAEQC,UAAUv4E,GAChB,IAAI1G,EAAyB,GAC7B,GAAK0G,EAAL,CAEO,GAAI4P,YAAU5P,GACnB1G,EAASmE,KAAKi7E,mBAAmB14E,OAAI,KAC5B4P,aAAW5P,GAGpB,MAAM,IAAI4gB,MAAM,qBAFhBtnB,EAASmE,KAAKk7E,oBAAoB34E,EAEC,CAErC1G,SAASA,EACNqB,IAAKkkE,IACJA,EAAK9gE,MAAQN,KAAKm7E,aAAa/Z,EAAK9gE,OAC7B8gE,IAER/8C,OAAQpoB,GAAkB,OAAZA,EAAEqE,OACZ6R,WAASnS,KAAKo6E,cAAgBp6E,KAAKo7E,qBAAqBv/E,GAAUA,EAAQ,MAd/E,CAeJ,CAEQo/E,mBAAmB14E,GACzB,IAAI84E,EAAc,GAClB,MAAMjzD,EAAQ7lB,EAAK,GACnB,GAAI4P,YAAUiW,GACZ,IAAqB,IAAjBA,EAAMhtB,OAMR,MAAM,IAAI+nB,MACR,qCAAqCiF,EAAMhtB,gDAN7CigF,EAAO94E,EAAKrF,IAAK1C,KACf+nB,IAAK/nB,EAAE,GACP8F,MAAO9F,EAAE,KAK8B,MAGlC2X,aAAWiW,KAElBizD,EADElpE,QAAMiW,EAAO,QAAUjW,QAAMiW,EAAO,SAC/B,IAAI7lB,GAEJA,EAAKoG,OACV,CAAC2yE,EAAiBla,IAASka,EAAS1yE,OAAO5I,KAAKk7E,oBAAoB9Z,IACpEia,IAIN,OAAOA,CACT,CAEQH,oBAAoB34E,GAC1B,OAAO0P,OAAOC,KAAK3P,GAAMrF,IAAKsB,KAC5B+jB,IAAK/jB,EACL8B,MAAOiC,EAAK/D,KAEhB,CAEQ48E,qBAAqB74E,GAC3B,OAAO4P,gBACL5P,EAAKrF,IAAKkkE,IACR,MAAM9gE,EAAQ8gE,EAAK9gE,MACbi7E,EAAWppE,aAAW7R,GAC5B,OAAKi7E,GAAYppE,YAAU7R,IACrBi7E,IACFna,EAAK9gE,MAAQ,IAER8gE,GAEFphE,KAAKw7E,mBAAmBpa,EAAI,GAGzC,CAMQoa,mBAAmBj5E,GACzB,OAAOvC,KAAK86E,UAAUv4E,EAAKjC,OAAOpD,IAAKkkE,IACjCphE,KAAKq6E,kBACPjZ,EAAK7+C,IAAMhgB,EAAKggB,IAAM,IAAM6+C,EAAK7+C,KAE5B6+C,GAEX,CAEQ+Z,aAAa76E,GACnB,GAAI6R,YAAU7R,GAAQ,CACpB,GAAI6R,YAAU7R,IAAUN,KAAKs6E,UAC3B,OAAO,KAETh6E,EAAQA,EAAMpD,IAAKkkE,GAAUjvD,aAAWivD,GAAQnmB,KAAKC,UAAUkmB,GAAQA,GAAOxkE,KAAK,KACrF,SAAWuV,aAAW7R,IACpB,GAAKN,KAAKs6E,WAAanoE,YAAU7R,KAAYN,KAAKo6E,cAChD,OAAO,aAEAjoE,aAAW7R,GAAQ,CAC5B,GAAc,KAAVA,GAAgBN,KAAKs6E,UACvB,OAAO,KAELt6E,KAAKy7E,OAAOn7E,KACdA,EAAQN,KAAKk6E,SAAS3xE,UAAUjI,IAAUA,EAE9C,CAEA,OAAOA,CACT,CAEQm7E,OAAOC,GACb,MAAMC,EAAM,WACNj9E,EAAI,SAAWi9E,EAErB,OAAOD,EAAElgF,MAAM,IAAIb,OAAO,UAAYghF,EAAMj9E,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,WAClE,iDA3LWu7E,GAAsBh5E,8BAAAC,KAAA,4DAAtB+4E,EAAsB7wE,UAAA,yBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BACtBsyE,IAAc,giBCpC3B36E,2BAAA,WACEA,sBAAA,kBAYFA,kCAXYA,wBASAA,uBATA,OAAAwC,EAAAu3E,WAAA/5E,4BAAA,EAAAyI,GASAzI,CATwB,UAAAwC,EAAAoJ,QASxB5L,CARmB,gBAQnBA,CANoB,aAAAwC,EAAA02E,WAMpBl5E,CALyB,YAAAwC,EAAAi3E,UAKzBz5E,CAJuB,cAIvBA,CAHkB,YAGlBA,CAFgB,YAEhBA,CADgB,umCCFxBA,2BAAA,UAAAA,mBAAA,MAIAA,sEADEA,8CAAAM,EAAAs6E,yEAPF56E,2BADF,qBACEA,CADoC,WACpCA,mBAAA,MAGAA,2BACAA,uBAAA,EAAA66E,GAAA,YAKF76E,qEAPIA,sBAAA,GAAAA,sBAAAM,EAAAw6E,wCAIE96E,+CAAA,OAAAM,EAAAs6E,oFAYA56E,2BAAA,eAKQA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAqlB,EAAA/6E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAASM,GAAAwL,aAAA8qE,eAAAmE,GAAmC,GALpD/6E,mBAAA,MAYAA,+KATQA,uBAAAM,EAAAwL,aAAAsrE,YAAA2D,IACA/6E,kCAAA,QAAAM,EAAAwL,aAAAgrE,eAAAiE,IAIA/6E,uBANA,WAAAg7E,EAAA3c,SAAA,KAMAr+D,CANsC,aAAAM,EAAAwL,aAAAmrE,cAAA8D,GAMtC/6E,CAFiD,mBAAA+6E,EAAA7D,iBAAA,QAEjDl3E,CADwD,WAAAM,EAAAwL,aAAAkrE,uBAAA+D,iDAI9D/6E,8CAAA+6E,EAAA5hF,4DAZJ6G,oCAAA,GACEA,uBAAA,EAAAi7E,GAAA,+GAASj7E,+CAAA,OAAAM,EAAAwL,aAAA+qE,gBAAAkE,8BAFb/6E,2BAAA,+BACEA,uBAAA,EAAAk7E,GAAA,uBAeFl7E,sEAfmCA,+CAAA,gBAAAM,EAAAwL,aAAA,KAAAxL,EAAAwL,aAAAyrE,kFAmBjCv3E,2BAAA,iCAE0BA,6BAAA,yBAAA2J,GAAA3J,0BAAAiU,GAAA,MAAA3T,GAAAN,0BAAA,GAAAA,sCAAAM,GAAA66E,OAAAxxE,KAAArJ,GAAA66E,OAAAxxE,GAAA3J,wBAAA2J,EAAA,GAGA3J,uBADA,uBAAA2J,GAAA3J,0BAAAiU,GAAA,MAAA3T,GAAAN,0BAAA,UAAAA,wBAAeM,GAAA4+D,aAAAv1D,GAAoB,EACnC3J,CADoC,mBAAAA,0BAAAiU,GAAA,MAAA3T,EAAAN,0BAAA,UAAAA,wBAC3BM,EAAA86E,gBAAe,GAClDp7E,wEAL0BA,uBAAA,iBACAA,6BAAA,UAAAM,EAAA66E,mCAetBn7E,oCAAA,GACEA,2BAAA,eACuEA,mBAAA,GAAwBA,wHADvFA,wBACAA,uBADA,QAAAq7E,EAAA9N,OAAAp0E,KACA6G,CAD4B,WAAAq7E,EAAA9N,OAAAp0E,OAAAmH,EAAAg7E,eAAA/N,OAAAp0E,MACmC6G,sDAAAq7E,EAAA9N,OAAAp0E,8BAMzE6G,2BAAA,YAAAA,mBAAA,MACgBA,sDAChBA,oCAAA,GACEA,2BAAA,eAC+DA,mBAAA,GAAsBA,wHAD7EA,wBACAA,uBADA,QAAAu7E,EAAAC,IACAx7E,CADoB,WAAAu7E,EAAAC,OAAA,MAAAl7E,EAAAg7E,gBAAA,MAAAh7E,EAAAg7E,eAAAj8E,MAAA,KAAAiB,EAAAg7E,eAAAj8E,MAAAm8E,MACmCx7E,sDAAAu7E,EAAAE,4EApBrEz7E,oCAAA,GACEA,2BAAA,yCACAA,sBAAA,YAEAA,yDACAA,2BAAA,mBAAYA,uBAAA,uBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAAp7E,GAAAN,0BAAA,UAAAA,wBAAeM,GAAAq7E,eAAAhyE,GAAsB,GAG/C3J,uBAAA,EAAA47E,GAAA,uBAIF57E,2BACAA,2BAAA,mBAAYA,uBAAA,uBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAAp7E,GAAAN,0BAAA,UAAAA,wBAAeM,GAAAu7E,eAAAlyE,GAAsB,GAK/C3J,uBAFA,EAAA87E,GAAA,gBAEA97E,CADa,EAAA+7E,GAAA,uBAKf/7E,4GApBKA,sBAAA,GACAA,uBADA,UAAAM,EAAAwQ,MAAAsS,OACApjB,CADwB,OAAAM,EAAAwQ,MAAA8qD,QAMM57D,sBAAA,GAAAA,uBAAA,UAAAM,EAAA07E,eAQxBh8E,sBAAA,GAAAA,uBAAA,QAAAM,EAAAg7E,eAAAj8E,OAEwBW,+CAAA,UAAAM,EAAAg7E,eAAAr5E,0EAQrCjC,2BAAA,wBAGQA,uBAAA,mBAAAA,0BAAAi8E,GAAA,MAAA37E,EAAAN,0BAAA,UAAAA,wBAASM,EAAAgmC,aAAY,gCAQ3BtmC,sBAAA,YAGFA,wEATQA,uBAJA,OAAAM,EAAAmN,OAAAvI,KAIAlF,CAJoB,mBAAAM,EAAAi5E,WAAA,MAAAj5E,EAAAi5E,UAAAz0B,WAAAxkD,EAAAi5E,UAAAz0B,UAAA3qD,QAIpB6F,CAH0C,QAAAM,EAAAmN,OAAAw1C,IAG1CjjD,CADoB,cAAAM,EAAAmN,OAAAw1C,KAOrBjjD,wBAEAA,uBAFA,UAAAM,EAAAwQ,MAAAyzB,QAEAvkC,CAFyB,OAAAM,EAAAwQ,MAAA8qD,OAEzB57D,CADqB,UAAAA,4BAAA,EAAAk8E,GAAA57E,EAAA67E,oFAoBtBn8E,2BAAA,qBAIcA,uBAAA,2BAAAA,0BAAA4V,GAAA,MAAAwmE,EAAAp8E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAAiBM,GAAA+7E,aAAAD,GAAoB,GAAGp8E,mBAAA,GACxDA,gHAJgBA,mCAAA,QAAAo8E,EAAAluE,KAAA,GAAA5N,EAAAg8E,UAAA,IACAt8E,mCAAA,UAAAo8E,EAAAluE,KAAA,GAAA5N,EAAAg8E,UAAA,IACAt8E,uBAAA,kBAAAo8E,KAAAvK,WACwC7xE,uDAAA,GAAAo8E,EAAAjjF,KAAA,gCALxD6G,oCAAA,GACEA,uBAAA,EAAAu8E,GAAA,qFAAev8E,+CAAA,eAAAo8E,KAAAI,+EAJnBx8E,2BAAA,YACKA,uBAAA,iBAAA2J,GAAA3J,iCAAAkuE,GAAAluE,wBAAS2J,EAAA4xD,kBAAwB,GAEpCv7D,uBAAA,EAAAy8E,GAAA,uBAQFz8E,wEATKA,uBAAA,WAAAM,EAAAo8E,OAC8B18E,+CAAA,UAAAM,EAAAq8E,+EA5FzC38E,2BAAA,6BAEmBA,uBAAA,oBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,4BAAA,OAAAA,wBAAUM,EAAAs8E,uBAAsB,GAIjD58E,uBAAA,EAAA68E,GAAA,oCAkBA78E,2BAAA,+BAqCEA,uBAnCA,EAAA88E,GAAA,kCAmCA98E,CA9BoD,EAAA+8E,GAAA,sBA8BpD/8E,CA1BiD,EAAAg9E,GAAA,0BA2CjDh9E,2BAAA,4CAMEA,sBAAA,YAGFA,2BACAA,uBAAA,EAAAi9E,GAAA,0BAAAj9E,oCAgBAA,yBAAA,IAGJA,uGAvGmBA,uBADA,uBAAAM,EAAAgwE,cAAAhwE,EAAA48E,MAAAl9E,4BAAA,GAAAm9E,IACAn9E,CADqD,YAAAA,4BAAA,GAAAo9E,KAG1Cp9E,sBAAA,GAAAA,uBAAA,cAAAM,EAAAwL,aAAA,KAAAxL,EAAAwL,aAAAyrE,gBAAAp9E,QAAA,GAoBC6F,sBAAA,GAAAA,uBAAA,OAAAM,EAAA+8E,aASZr9E,+CAAA,WAAAM,EAAA07E,cAAA7hF,QAoCN6F,+CAAA,cAAAM,EAAAi5E,WAAA,MAAAj5E,EAAAi5E,UAAAz0B,UAAA,KAAAxkD,EAAAi5E,UAAAz0B,UAAA3qD,QAAA,GASD6F,wBAGAA,uBAHA,kBAAAs9E,EAGAt9E,CAHsC,UAGtCA,CADa,SAAAA,4BAAA,GAAAu9E,KAEdv9E,wBACAA,uBADA,UAAAM,EAAAwQ,MAAA0sE,UACAx9E,CAD2B,OAAAM,EAAAwQ,MAAA8qD,yEAgChC57D,2BAHF,eAGEA,CADiC,aACdA,mBAAA,GAAsDA,2BACzEA,2BAAA,eACQA,uBAAA,mBAAAA,0BAAAy9E,GAAA,MAAAC,EAAA19E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAASM,GAAAu7E,eAAA6B,GAAsB,gCACrC19E,sBAAA,YAGJA,kHANqBA,sBAAA,GAAAA,+BAAA,GAAA09E,EAAAnQ,OAAAp0E,KAAA,KAAAukF,EAAAr+E,MAAAo8E,UAAA,IAGZz7E,sBAAA,GACAA,uBADA,UAAAM,EAAAwQ,MAAAgX,QACA9nB,CADyB,OAAAM,EAAAwQ,MAAA8qD,mCAPpC57D,oCAAA,GACEA,uBAAA,EAAA29E,GAAA,gFAAU39E,+CAAA,OAAA09E,EAAAr+E,wEAFdW,2BAFA,WAEAA,CAD0C,YAExCA,uBAAA,EAAA49E,GAAA,uBAYA59E,2BAAA,eACQA,uBAAA,iBAAA2J,GAAA3J,0BAAA69E,GAAA,MAAAv9E,GAAAN,4BAAA,OAAAA,wBAASM,GAAAw9E,eAAAn0E,GAAsB,GACrC3J,oCAAA,GAAAA,mBAAA,0CAGJA,2EAjBmCA,sBAAA,GAAAA,uBAAA,UAAAM,EAAA07E,gFA2C7Bh8E,2BAAA,WAYIA,uBAHA,uBAAAA,0BAAA+9E,GAAA,MAAAC,EAAAh+E,4BAAAiG,MAAA3F,GAAAN,0BAAA,UAAAA,wBAAaM,GAAA29E,SAAAD,GAAW,EAGxBh+E,CAHyB,yBAAAA,0BAAA+9E,GAAA,MAAAC,EAAAh+E,4BAAAiG,MAAA3F,GAAAN,0BAAA,UAAAA,wBACVM,GAAA49E,WAAAF,GAAa,EAE5Bh+E,CAF6B,uBAAAA,0BAAA+9E,GAAA,MAAAC,EAAAh+E,4BAAAiG,MAAA3F,GAAAN,0BAAA,UAAAA,wBAChBM,GAAA48E,MAAAiB,UAAAH,GAAoB19E,GAAA48E,MAAAkB,cAAAJ,IAAuB,EACxDh+E,CADyD,sBAAAA,0BAAA+9E,GAAA,MAAAC,EAAAh+E,4BAAAiG,MAAA3F,GAAAN,0BAAA,UAAAA,wBAC7CM,GAAA29E,SAAAD,GAAW,GAE3Bh+E,+HANIA,uBAPA,QAAAM,GAAA48E,MAOAl9E,CAPe,MAAAq+E,EAOfr+E,CANW,OAAAM,GAAAlH,KAMX4G,CALa,WAAAM,GAAA48E,MAAAoB,cAAAN,GAKbh+E,CAJmC,aAAAM,GAAA48E,MAAAqB,gBAAAP,GAInCh+E,CAHuC,WAAAM,GAAA48E,MAAAkB,cAAAJ,GAGvCh+E,CAFmC,sBAAAM,GAAAk+E,oBAEnCx+E,CAD2C,WAAAM,GAAA67E,4CAQ/Cn8E,sBAAA,4GAKIA,uBAFA,MAAAq+E,EAEAr+E,CAFW,WAAAM,GAAA48E,MAAAkB,cAAAJ,GAEXh+E,CADmC,WAAAM,GAAA67E,2CAIrCn8E,sBAAA,wGAQIA,uBANA,QAAAM,EAAA48E,MAMAl9E,CANe,iCAMfA,CALqC,sBAAAM,EAAAk+E,oBAKrCx+E,CAJ2C,MAAAy+E,EAI3Cz+E,CAHuB,OAAAM,EAAAlH,KAGvB4G,CAFa,WAAAM,EAAA48E,MAAAoB,cAAAN,GAEbh+E,CADmC,WAAAM,EAAA67E,6CARzCn8E,oCAAA,GACEA,uBAAA,EAAA0+E,EAAA,oIACgC1+E,+CAAA,UAAAM,EAAAq+E,uBAAAN,8BAzBpCr+E,oCAAA,GAuBEA,uBAtBA,EAAA4+E,GAAA,YAsBA5+E,CAToC,EAAA6+E,GAAA,YASpC7+E,CAFkC,EAAA8+E,GAAA,8HAP7B9+E,+CAAA,QAAAM,EAAA48E,MAAA6B,cAAAf,IAIAh+E,+CAAA,OAAAM,EAAA48E,MAAAqB,gBAAAP,KAAA19E,EAAA0+E,oBAAAX,KAAA/9E,EAAA48E,MAAA6B,cAAAf,IAKUh+E,+CAAA,OAAAM,EAAA48E,MAAAqB,gBAAAP,IAAA19E,EAAA0+E,oBAAAX,IAAA/9E,EAAA48E,MAAAkB,cAAAJ,KAAA19E,EAAA48E,MAAA6B,cAAAf,+BA3BnBh+E,2BAAA,cAIEA,uBAAA,EAAAi/E,EAAA,uBAoCFj/E,qEArCOA,uBADA,qBAAAM,EAAA4+E,mBACAl/E,CADyC,WAAAM,EAAA67E,kBAEhBn8E,wBAA8BA,uBAA9B,UAAAM,EAAA48E,MAAA57E,KAA8BtB,CAAf,eAAAM,EAAAwS,UAAA/O,KAAAzD,IAAA6+E,wCAqD3Cn/E,2BAJF,UAIEA,CAD6C,aAC7CA,mBAAA,MAEFA,gKAPFA,2BADF,UACEA,CADK,WAEHA,uBAAA,EAAAo/E,GAAA,aAQJp/E,uEARSA,sBAAA,GAAAA,uBAAA,eAAAM,EAAAmzE,MAAAnzE,EAAAmzE,KAAAt5E,QAAAmG,EAAA67E,sGAaTn8E,2BAAA,YACKA,uBAAA,sBAAA2J,GAAA3J,0BAAAq/E,GAAA,MAAA/+E,GAAAN,0BAAA,UAAAA,wBAAcM,GAAAg/E,iBAAA31E,GAAwB,GAEzC3J,uBAAA,EAAAu/E,GAAA,sBACFv/E,wEADeA,+CAAA,mBAAAM,EAAAk/E,UAAA91E,oCAHf1J,uBAAA,EAAAy/E,GAAA,gEAAMz/E,uBAAA,OAAA0/E,EAAAp/E,EAAA6+E,eAAA,MAAA7+E,EAAAq/E,SAAA,KAAAr/E,EAAAq/E,SAAAr/E,EAAA6+E,yCAWNn/E,2BAAA,aAAoCA,mBAAA,GAAWA,sEAAzCA,uBAAA,gBAAA4/E,EAAA,KAAAA,EAAApvD,WAA8BxwB,sDAAA6/E,oEAShC7/E,2BAAA,iCAG0BA,uBAAA,mBAAAA,0BAAA8/E,GAAA,MAAAC,EAAA//E,4BAAAsvD,UAAAhvD,GAAAN,0BAAA,UAAAA,wBAASM,GAAAwL,aAAA8qE,eAAAmJ,GAAmC,GAHtE//E,mBAAA,MAWAA,gHAV0BA,uBAAAM,EAAAwL,aAAAsrE,YAAA2I,IACA//E,kCAAA,QAAAM,EAAAwL,aAAAgrE,eAAAiJ,IAIA//E,uBAFA,aAAAM,EAAAwL,aAAAmrE,cAAA8I,GAEA//E,CAFiD,mBAAA+/E,EAAA7I,iBAAA,QAEjDl3E,CADwD,WAAAM,EAAAwL,aAAAkrE,uBAAA+I,iDAKhF//E,8CAAA+/E,EAAA5mF,4DAXJ6G,oCAAA,GACEA,uBAAA,EAAAggF,GAAA,gIAA2BhgF,+CAAA,OAAAM,EAAAwL,aAAA+qE,gBAAAkJ,8BAL/B//E,2BAAA,0BAIEA,uBAAA,EAAAigF,GAAA,uBAcFjgF,sEAjBmBA,uBAAA,WAGgBA,+CAAA,gBAAAM,EAAAwL,aAAA,KAAAxL,EAAAwL,aAAAyrE,2CAJnCv3E,uBAAA,EAAAkgF,GAAA,qEAAoBlgF,uBAAA,cAAAM,EAAAwL,aAAA,KAAAxL,EAAAwL,aAAAyrE,gBAAAp9E,QAAA,kBAAAmG,EAAAgwE,0CAyBpBtwE,2BAAA,YAAQA,mBAAA,GAAWA,sDAAXA,sDAAAmgF,8BAMRngF,2BAAA,YACEA,sBAAA,qBAEFA,mEAFgBA,wBACAA,uBADA,OAAAogF,EACApgF,CADc,WAAAqgF,EAAAC,uCAQ9BtgF,2BAAA,UACgCA,mBAAA,GAAWA,mEAAxCA,uBADA,aAAAA,4BAAA,EAAAugF,GAAAC,EAAAC,QACAzgF,CAD2B,cAAAwgF,EAAAE,UACE1gF,sDAAA2gF,8BAKhC3gF,sBAAA,mGACGA,uBADA,UAAAA,4BAAA,EAAAugF,GAAAjgF,EAAAwQ,MAAAotB,OACAl+B,CADyB,UAAAA,wBAAA,IAAA4gF,+BAO5B5gF,mBAAA,8DAAAA,+BAAA,IAAAA,wBAAA,IAAA6gF,GAAA,mCAOA7gF,sBAAA,oDAAGA,uBAAA,UAAAA,4BAAA,EAAA8gF,GAAAxgF,EAAAwQ,MAAA02C,QAAAlnD,EAAAwQ,MAAA22C,kCAKHznD,2BAAA,aACmIA,mBAAA,GAAuBA,kGAApJA,uBAAA,gBAAA+gF,GAAA,MAAAA,EAAAC,sBAAAD,EAAAC,qBAAAC,eAAA,MAAAF,EAAA,KAAAA,EAAAC,qBAAAC,eAAA,qBAA6HjhF,uDAAA,IAAAkhF,EAAAxI,YAAA,gCANnI14E,uBAAA,EAAAmhF,GAAA,YAEAnhF,2BAAA,aACEA,mBAAA,GACFA,2BACAA,uBAAA,EAAAohF,GAAA,uEAJIphF,uBAAA,OAAAkhF,EAAAxI,aACE14E,+CAAA,gBAAA+gF,GAAA,MAAAA,EAAAC,qBAAA,KAAAD,EAAAC,qBAAAK,YACJrhF,uDAAA,IAAAshF,EAAA,KAEKthF,+CAAA,OAAAkhF,EAAAxI,wCAMP14E,2BAAA,+CAA6DA,mBAAA,GAAWA,oFAAlEA,+CAAA,IAAAuhF,EAAAjhF,EAAAkhF,eAAAlhF,IAAuDN,sBAAA,GAAAA,8BAAAuhF,8BAO3DvhF,2BAAA,aAGEA,mBAAA,GACFA,yHAHMA,uBAAA,gBAAAyhF,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAA/kF,KAAA,MAAAwlF,GAAA,MAAAA,EAAAT,sBAAA,MAAAS,EAAAT,qBAAA/kF,IAAAylF,IAAAD,EAAAT,qBAAA/kF,IAAAylF,GAAA1mB,MAAAymB,EAAAT,qBAAA/kF,IAAAylF,GAAA1mB,MAAA,MAAAymB,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAAhmB,MAAAymB,EAAAT,qBAAAhmB,MAAA,iBAEJh7D,uDAAA,UAAAyhF,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAA/kF,KAAA,MAAAwlF,GAAA,MAAAA,EAAAT,sBAAA,MAAAS,EAAAT,qBAAA/kF,IAAAylF,IAAAD,EAAAT,qBAAA/kF,IAAAylF,GAAAriF,MAAAoiF,EAAAT,qBAAA/kF,IAAAylF,GAAAriF,MAAA,MAAAoiF,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAA/5D,OAAAw6D,EAAAT,qBAAA/5D,OAAAy6D,IAAA,6BAEF1hF,2BAAA,UAAoBA,mBAAA,UAAMA,sDAN5BA,2BAAA,UAMEA,uBALA,EAAA2hF,GAAA,cAKA3hF,CAH4O,EAAA4hF,GAAA,eAI9O5hF,wGAJSA,+CAAA,aAAAyhF,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAA/kF,KAAA,MAAAwlF,GAAA,MAAAA,EAAAT,sBAAA,MAAAS,EAAAT,qBAAA/kF,IAAAylF,IAAAD,EAAAT,qBAAA/kF,IAAAylF,GAAAriF,MAAAoiF,EAAAT,qBAAA/kF,IAAAylF,GAAAriF,MAAA,MAAAoiF,GAAA,MAAAA,EAAAT,sBAAAS,EAAAT,qBAAA/5D,OAAAw6D,EAAAT,qBAAA/5D,OAAAy6D,KAGA1hF,+CAAA,QAAA6hF,8BANT7hF,uBAAA,EAAA8hF,GAAA,wEAAuB9hF,uBAAA,UAAAA,wBAAA,IAAA+hF,+BAavB/hF,2BAAA,UAAMA,mBAAA,+BAA8CA,sEAA9CA,8EAAA,IAAAgiF,EAAA,MAAAC,EAAA,KAAAA,EAAAjB,kDAOJhhF,2BADF,SACEA,CAD0C,gDAC1CA,mBAAA,MAOFA,qHAJIA,+CAAA,MAAAkiF,GAAA,MAAAA,EAAAlB,sBAAAkB,EAAAlB,qBAAA/kF,KAAA,MAAAimF,GAAA,MAAAA,EAAAlB,sBAAA,MAAAkB,EAAAlB,qBAAA/kF,IAAAkmF,IAAAD,EAAAlB,qBAAA/kF,IAAAkmF,GAAAnnB,MAAAknB,EAAAlB,qBAAA/kF,IAAAkmF,GAAAnnB,MAAA,IACAh7D,sBAAA,MAAAkiF,GAAA,MAAAA,EAAAlB,sBAAAkB,EAAAlB,qBAAA/kF,KAAA,MAAAimF,GAAA,MAAAA,EAAAlB,sBAAA,MAAAkB,EAAAlB,qBAAA/kF,IAAAkmF,IAAAD,EAAAlB,qBAAA/kF,IAAAkmF,GAAAx+E,QAAAu+E,EAAAlB,qBAAA/kF,IAAAkmF,GAAAx+E,QAAA,+BACA3D,sBAAA,GAAAA,sBAAAoiF,0DANJpiF,uBAAA,EAAAqiF,GAAA,wEAAuBriF,uBAAA,UAAAA,wBAAA,IAAAoiF,+BAcvBpiF,2BAAA,aACsBA,mBAAA,oCAAkGA,sEAAlHA,uBAAA,QAAAsiF,GAAgBtiF,8EAAA,IAAAsiF,EAAA,MAAAC,GAAA,MAAAA,EAAAvB,qBAAA,KAAAuB,EAAAvB,qBAAA7mF,OAAA,MAAAooF,GAAA,MAAAA,EAAAvB,qBAAA,KAAAuB,EAAAvB,qBAAAwB,4EAOtBxiF,2BAAA,UAMGA,uBAAA,iBAAA2J,GAAA,MAAA84E,GAAAziF,0BAAA0iF,GAAAC,GAAAF,GAAAnhF,KAAAksE,IAAAoV,GAAAH,GAAAnhF,KAAAq+E,SAAAr/E,GAAAN,4BAAA,OAAAA,wBAASM,GAAAuiF,gBAAAF,GAAAC,GAAAj5E,GAAwC,GACpD3J,2DALGA,wBADA,8BAAA4iF,EACA5iF,CADgD,4BAAA4iF,8BAWnD5iF,2BAAA,4CAC+BA,mBAAA,wCAA0BA,sDAAnDA,uBAAA,QAAAA,wBAAA,IAAA8iF,IAAyB9iF,sBAAA,GAAAA,sDAAA,IAAA8iF,+BAK/B9iF,sBAAA,qHAI4BA,kCAAA,OAAAA,wBAAA,IAAA+iF,IAFA/iF,uBADA,SAAA+iF,EACA/iF,CADgB,qCAD5CA,uBAAA,EAAAgjF,GAAA,+DAA6BhjF,uBAAA,OAAA+iF,6BAU7B/iF,sBAAA,sHAI4BA,uBAHA,SAAAijF,EAGAjjF,CAHgB,UAGhBA,CAFc,OAAAM,EAAA4iF,GAEdljF,CADW,OAAAijF,6BAHvCjjF,uBAAA,EAAAmjF,GAAA,gEAA6BnjF,uBAAA,OAAAijF,ICvVzB,MAAOtI,GA2MX,YAAIgF,CAAStgF,GACXN,KAAKqkF,UAAY/jF,EACjBN,KAAKwM,eAAetC,KAAK5J,EAC3B,CAEA,YAAIsgF,GACF,OAAO5gF,KAAKqkF,SACd,CAIA,YAAIzU,GACF,QAAS5vE,KAAKskF,YAAYC,KAC5B,CAEA,UAAIC,GACF,OAAQxkF,KAAK00E,MAAMt5E,SAAW4E,KAAKo9E,gBACrC,CAEA,uBAAIqC,GACF,MAA8B,eAAvBz/E,KAAKuxE,aACd,CAEA,sBAAI4O,GACF,MAA8B,WAAvBngF,KAAKuxE,aACd,CAiBA,gBAAIqM,CAAat9E,GACfN,KAAKykF,cAAgBzkF,KAAK0kF,yBAAyBpkF,EACrD,CAEA,gBAAIs9E,GACF,OAAO59E,KAAKykF,aACd,CAMA,gBAAIE,CAAarkF,GAEf,MAAMskF,EAAkB5kF,KAAK0kF,yBAAyBpkF,GACtDN,KAAK6kF,cAAgBD,EACrB5kF,KAAK8kF,cAAcr1E,KAAKm1E,EAC1B,CAEA,gBAAID,GACF,OAAO3kF,KAAK6kF,aACd,CAIA,kBAAIE,GACF,OAAO/kF,KAAK49E,cAAcv5D,SAAUrlB,IAAOA,EAAE8zE,SAC/C,CAEA4R,yBAAyBpkF,GACvB,OAAOA,EAAMpD,IAAK21E,GAChBA,GAAKz4E,KAAOy4E,EAAM,IAAKA,EAAKz4E,KAAMy4E,GAAK1jE,KAAOnP,KAAKglF,YAAYzlF,OAAOszE,GAAK1jE,OAAS,IAExF,CAEA61E,YAAYtqF,GACV,OAAOA,EACJ0N,QAAQ,WAAa5M,GAAU,IAAIA,KACnC4M,QAAQ,KAAO5M,GAAUA,EAAMg3E,cACpC,CAQA,QAAIkC,CAAKp0E,GACPN,KAAKilF,MAAQ3kF,EACbN,KAAKklF,aAAa,CAChBC,KAAMnlF,KAAKm+E,MAAMiH,YACjB/qF,KAAM2F,KAAKm+E,MAAMkH,WACjBC,aAAchlF,IAEhBN,KAAKm+E,MAAMoH,gBAAkBvlF,KAAKwlF,WAAaxlF,KAAKyrC,MAAQnrC,GAAOlF,QAAU,CAC/E,CAEA,QAAIs5E,GACF,OAAO10E,KAAKilF,KACd,CAqBA,kBAAIQ,GACF,OAAOtzE,SAAOnS,KAAKi9E,cAAgB54D,QACTuV,IAAjBvV,EAAO/jB,MAElB,CAGAR,YAEU4lF,EACA/9C,GADA3nC,KAAA0lF,QACA1lF,KAAA2nC,eArRV3nC,KAAAsxE,WAAc,OAGdtxE,KAAA2lF,kBAAoB,EAGpB3lF,KAAAwxE,YAAc,EAGdxxE,KAAAs+E,aAAe,EAGft+E,KAAA2+B,QAAU,EAGV3+B,KAAA4lF,QAAU,EAGV5lF,KAAA6lF,MAtFuB,GAwFvB7lF,KAAA8lF,SAAY,KAGZ9lF,KAAA+lF,YAAa,EAGb/lF,KAAAgmF,mBAAoB,EAUpBhmF,KAAAm6E,WAAa,IAKbn6E,KAAAogF,WAAa,KAIbpgF,KAAAimF,iBAAkB,EAIlBjmF,KAAAuxE,mBAAwB33C,EAGxB55B,KAAAkmF,yBAA4D,WAG5DlmF,KAAAmmF,wBAA2D,WAG3DnmF,KAAAomF,UAAW,EAIXpmF,KAAAqmF,mBAAoB,EAQpBrmF,KAAAsmF,uBAA0C,GAG1CtmF,KAAA0O,OAAS,IAAIo1C,IAIb9jD,KAAAwlF,YAAa,EAGbxlF,KAAA3F,KAAqB,KAOrB2F,KAAAyrC,MAAQ,EAwBRzrC,KAAAw6E,UAAY,IAAI1wE,eAWhB9J,KAAA0M,gBAAkB,IAAI5C,eAGtB9J,KAAAwM,eAAiB,IAAI1C,eAUX9J,KAAAumF,qBAAuB,IAAIz8E,eAKrC9J,KAAAiM,UAAY,IAAIqC,IAcRtO,KAAAqkF,eAAiBzqD,EAqBzB55B,KAAAwmF,mBAAoB,EAKpBxmF,KAAAymF,+BAAgC,EAiBhCzmF,KAAAm+E,MAAoB,IAAIuI,aA+BxB1mF,KAAA+R,MAAQC,KACRhS,KAAA2mF,cAEI,GACJ3mF,KAAAo8E,OAAS,GAgBDp8E,KAAAilF,MAAe,GAEfjlF,KAAA4mF,SAAW,IAAIp4E,kBAAuB,IAEtCxO,KAAA8kF,cAAgB,IAAIt2E,kBAAiC,IAErDxO,KAAA6mF,eAA+B,IAAIC,eAE3C9mF,KAAAo9E,kBAAmB,EAEnBp9E,KAAAskF,WAA2B,GAE3BtkF,KAAA+mF,aAAernD,OAAOqnD,aAGd/mF,KAAAgnF,UAAW,EAEnBhnF,KAAAi9E,cAAuC,GAO/Bj9E,KAAAinF,aAAe,IAAIC,IA4iB3BlnF,KAAAmnF,SAAWh1E,SAA4C,CACrD,CAAEnT,GAAMA,EAAEmmF,MAAQ,EAAInmF,KAASjE,MAAO,EAAGC,IAAKgE,EAAE3E,QAChD,CAAE2E,GAAMA,EAAEmmF,MAAQnmF,EAAEsmF,aAAalqF,OAAS4D,KAASjE,MAAO,EAAGC,IAAKgE,EAAEsmF,aAAalqF,UACjF,CACG4D,GAAMA,EAAEmmF,MAAQnmF,EAAEsmF,aAAalqF,QAAU4D,EAAEmmF,KAAOnmF,EAAE3E,KAAO2E,EAAEsmF,aAAalqF,OAC1E4D,KAASjE,MAAO,EAAGC,IAAKgE,EAAEsmF,aAAalqF,UAE1C,CACG4D,GAAMA,EAAEmmF,KAAOnmF,EAAE3E,KAAO2E,EAAEsmF,aAAalqF,OACvC4D,KAASjE,OAAQiE,EAAEmmF,KAAO,GAAKnmF,EAAE3E,KAAMW,IAAKgE,EAAEsmF,aAAalqF,UAE9D,CAAC+W,aAAanT,KAASjE,OAAQiE,EAAEmmF,KAAO,GAAKnmF,EAAE3E,KAAMW,IAAKgE,EAAEmmF,KAAOnmF,EAAE3E,SAjjBpE,CAEH,oBAAO+sF,CAAchL,GACnBA,SAASA,EAAO73D,cAAcnc,QAAQ,KAAM,KACjC5M,MAAM,oBACf4gF,EAASA,EAAOh0E,QAAQ,kBAAoB5M,GACnCA,EAAM4M,QAAQ,wBAAyB,MAAMA,QAAQ,KAAM,OAG/Dg0E,EAAOz/E,MAAM,KAAK0nB,OAAQiuD,GAASA,EAC5C,CAEAvrE,kBACM/G,KAAKgmF,mBAAqBhmF,KAAK+M,cAAcyrE,iBAAiBp9E,SAChE4E,KAAK2kF,aAAe,IACf3kF,KAAK2kF,aACR,CACEvqF,KAAM,GACN+U,KAAM,GACNk4E,UAAW,MACXzX,UAAU,EACVvgE,aAAcrP,KAAKsnF,kBAKzB,MAAMC,EAA2BvnF,KAAK8kF,cACnC91E,QACC9R,OAAK2L,IACHA,GAAO3L,IACJ21E,IACC,IAAI2U,kBAAgB,CAClBjlF,KAAMswE,IAAKpD,eAAiB,IAAKoD,IAAQA,GAAIz4E,KAC7CiL,MAAOwtE,GAAIz4E,KACXuQ,SAAUkoE,IAAKpD,eAGf4X,UAAWl1E,aAAW0gE,IAAKphD,WAAa,GAAGohD,IAAKphD,YAAc,GAAGohD,IAAKwU,YACtE3N,SAAU7G,GAAIC,SACdlD,WAAUz9D,UAAQ0gE,GAAIjD,WAAmBiD,GAAIjD,cAKtDjhE,UAAU,CACTc,KAAO5G,IAA+B7I,KAAKm+E,MAAMx/C,OAAS91B,KAGxD4+E,EAAsBznF,KAAK4mF,SAC9B53E,QACCqV,UAAQxb,MACDA,IAAQzN,SACX4E,KAAKm+E,MAAM57E,KAAO,IACX,KAKZoM,UAAU,CACTc,KAAO5G,KACL,MAAMi5D,GAA0Bj5D,GAAO3L,IAAK0hB,IAC1C,MAAM8oE,GAAQ9oE,GAAKwL,IAAMxL,IAAM5e,KAAKogF,YAC9BuH,GAAU3nF,KAAKinF,aAAav0E,IAAIg1E,IAEhCE,GAAsB5nF,KAAK2kF,aAAaznF,IAAI,CAACsxE,GAAQqZ,MACzD,MAAMC,GAAW31E,QAAMyM,EAAK4vD,IAAQr/D,MAKpC,IAAI44E,GAAsCJ,KAAUE,IACpD,MAAMG,GAAWD,IAAcxlF,MAAMjC,MAE/B2nF,GAAWzZ,GAAOx/D,KALtBw/D,IAAQr/D,KAAOq/D,GAAOx/D,KAAKzG,UAAUu/E,IAAYtZ,GAAOx/D,KAAKzG,UAAUqW,GAKxBkpE,GAEjD,OAAIC,KAAiB51E,YAAU61E,GAAUC,MAEvCF,GAAaxlF,KAAKjC,MAAQ2nF,GAC1BF,GAAaxlF,KAAKksE,IAAM7vD,EACxBmpE,GAAaxlF,KAAKisE,OAAS,IAAKA,MAAW5vD,GAE1B,IAAbipE,IAAkB7nF,KAAK+lF,aACzBgC,GAAaG,aAAetpE,EAC5BmpE,GAAaI,iBAAmBnoF,KAAKooF,eAKvCL,IACA,IAAIM,YAAU,CACZ/oB,SAAU1gD,EACVrc,KAAM,CACJjC,MAAO2nF,GACPxZ,IAAK7vD,EACL4vD,OAAQ,IAAKA,MAAW5vD,IAE1BjU,SAAU6jE,GAAOn/D,cAAgBrP,KAAKsoF,mBACrB,IAAbT,IAAkB7nF,KAAK+lF,WACvB,CAAEmC,aAActpE,EAAKupE,iBAAkBnoF,KAAKooF,cAC5C,IACL,GAIL,OAAApoF,KAAKinF,aAAazuD,IAAIkvD,GAAOE,IACtBA,KAGHW,GAAUvoF,KAAKm+E,MAAM57E,KAAKrF,IAAKuxE,GAAQA,IAAM,IAAIlsE,MAAMksE,KACvD+Z,EAAS3/E,KAEMsJ,YAAUo2E,GAASC,IAErBxoF,KAAKm+E,MAAM57E,KAAKnH,SAAW0mE,GAAS1mE,UACrD4E,KAAKm+E,MAAM57E,KAAOu/D,OAKpB2mB,EAA2BzoF,KAAKm+E,MAAMuK,mBAAmB/5E,UAAU,CACvEc,KAAOvI,KACDlH,KAAKm+E,MAAMwK,aAAalvD,MAAOz6B,KAAOA,IACxCgB,KAAK4gF,cAAWhnD,GAEhB55B,KAAK4gF,SAAWzuE,QAAMnS,KAAKm+E,MAAM57E,OAAO2E,IAAQ,CAAC,EAAG,aACpDlH,KAAKm+E,MAAMwK,aAAe3oF,KAAKm+E,MAAMwK,aAAazrF,IAChD,CAACiV,GAAGy2E,KAAqBA,KAAa1hF,IAAK,IAM7C2hF,EAAyB7oF,KAAKm+E,MAAM2K,mBAAmBn6E,UAAU,IACrE3O,KAAK+oF,2BAEDC,GAAyBhpF,KAAKm+E,MAAM8K,WAAWt6E,UAAU,KAC7D3O,KAAK+oF,yBAAuB,GAG9B/oF,KAAK6mF,eAAer+D,IAAI++D,GACxBvnF,KAAK6mF,eAAer+D,IAAIi/D,GACxBznF,KAAK6mF,eAAer+D,IAAIigE,GACxBzoF,KAAK6mF,eAAer+D,IAAIqgE,GACxB7oF,KAAK6mF,eAAer+D,IAAIwgE,GAC1B,CAEAv6E,WAYE,GAXAzO,KAAK49E,aAAezrE,UAAQnS,KAAK6M,SAG7B7M,KAAKwlF,aACPxlF,KAAKkpF,WAAa/2E,aAAWnS,KAAKkpF,WAAY,MAMhDlpF,KAAKmpF,iBACAnpF,KAAKukF,MAAO,CAEf,MAAMx0D,GAAuE,IAA9D5d,cAAYnS,KAAK49E,aAAc,CAAC,OAAQ59E,KAAKogF,aAG5DpgF,KAAKukF,MAAQvkF,KAAKopF,wBAChBr5D,EAAS/vB,KAAKogF,WAAapgF,KAAK49E,aAAa,GAAGzuE,KAAO,KAIpD4gB,IAAW/vB,KAAKimF,kBACnBjmF,KAAKogF,WAAapgF,KAAK49E,aAAa,GAAGzuE,KAAO,GAElD,CAwBA,GAtBAnP,KAAKqpF,iBACLrpF,KAAK49E,aAAa52E,QAAS1H,IACrBA,EAAE6pB,qBACJ7pB,EAAE+P,aAAerP,KAAK2mF,cAAcrnF,EAAE6pB,qBAEnC7pB,EAAE8P,WACL9P,EAAE8P,SAAW9P,EAAE6P,KAAO,KAAOnP,KAAKogF,WAAa,EAAI,GAEhD9gF,EAAEgqF,aACLhqF,EAAEgqF,YAAa,KAInBtpF,KAAKupF,sBACLvpF,KAAKwpF,oBACLxpF,KAAKypF,4BAELzpF,KAAK0M,gBAAgBxC,KAAK,IAAIoE,KAK1BtO,KAAKw6E,UAAUz0B,UAAU3qD,OAAS,EAAG,CACvC4E,KAAKo9E,kBAAmB,EACxB,MAAMsM,EAAsB1pF,KAAKw6E,UAAU7rE,UAAU,CACnDc,KAAMA,IAAMzP,KAAK0lF,MAAMiE,gBACvBvkE,SAAUA,IAAOplB,KAAKo9E,kBAAmB,IAE3Cp9E,KAAK6mF,eAAer+D,IAAIkhE,EAC1B,CAEIv3E,cAAYnS,KAAKm6E,aAAen6E,KAAKm6E,WAAa,EACpDn6E,KAAK4pF,iBAAmB5pF,KAAK2nC,aAC1Bj1B,IAAI,OAAM0Q,MAAG,GAAIpjB,KAAKm6E,YACtBxrE,UAAU,KACT3O,KAAKkpF,YAAU,GAETlpF,KAAKm6E,WAGfn6E,KAAK46E,UAFL56E,KAAKkpF,YAIT,CACA3I,iBAAiB1tB,GACfA,EAAMxrD,OACHwiF,QAAQ,MACRC,uBAAuBC,UAAUtqD,OAAO,8BAC3CozB,EAAMxrD,OAAOwiF,QAAQ,MAAMC,uBAAuBC,UAAUtqD,OAAO,4BACrE,CACA4pD,iBACMrpF,KAAKomF,WACPpmF,KAAKu9E,UAAYv9E,KAAKgqF,0BAA0BhqF,KAAK49E,cACrD59E,KAAKiqF,kBACLjqF,KAAKkqF,4BA5jBc,KA8jBjBlqF,KAAK6lF,QAA+B7lF,KAAKskF,WAAWuB,SACtD7lF,KAAKskF,WAAWuB,MAAQ7lF,KAAK6lF,OAEzB7lF,KAAKskF,WAAW6F,QAAU,IAC9BnqF,KAAKskF,WAAW6F,OAASnqF,KAAKm+E,MAAMiH,YAAc,GAE/CplF,KAAKskF,WAAWlI,SACnBp8E,KAAKskF,WAAWlI,OAASp8E,KAAKo8E,QAE3Bp8E,KAAKskF,WAAWC,QACnBvkF,KAAKskF,WAAWC,MAAQvkF,KAAKukF,OAE1BvkF,KAAKskF,WAAWz3E,QAGnB7M,KAAKskF,WAAWz3E,QAAQ7F,QAAS6rE,IAC/B,QAAS52E,EAAI,EAAGA,EAAI+D,KAAK49E,aAAaxiF,OAAQa,IACxC+D,KAAK49E,aAAa3hF,GAAGkT,OAAS0jE,EAAI1jE,OACpCnP,KAAK49E,aAAa3hF,GAAG62E,SAAWD,EAAIC,YAL1C9yE,KAAKoqF,mBAUT,CAEAJ,0BAA0Bn9E,GACxB,MAAMw9E,EAAkB3O,IACtB,IAAKvpE,aAAWupE,GACd,OAAO,EAET,IAAI7/E,EAAS,EACb,QAASI,GAAI,EAAGA,GAAIy/E,EAAEtgF,OAAQa,KAC5BJ,GAAU6/E,EAAEl+E,WAAWvB,IAAKA,GAE9B,OAAOJ,GAET,OAAOgR,EACJlE,OACC,CAAC9M,EAAQyE,EAAO4G,MACbmjF,EAAe/pF,EAAM6O,MAAQk7E,EAAe/pF,EAAMlG,QAAU8M,GAAQ,GAAKrL,EAC5E,GAEDypB,UACL,CAEA2kE,kBACE,MAAMK,EAAStqF,KAAK+mF,aAAawD,QAAQvqF,KAAKu9E,WAC1C+M,IACFtqF,KAAKskF,WAAarpC,KAAKy4B,MAAM4W,GAEjC,CAEAJ,0BACE,MAAMh5B,EAA0B,IAAIphB,aAAW9vC,KAAKwqF,qBAAqBxlF,KAAKhF,OAC9EA,KAAKyqF,eAAiBv5B,EAAOviD,UAAU3O,KAAK0qF,gBAAgB1lF,KAAKhF,MACnE,CAEAwqF,qBAAqBz6C,GACnB/vC,KAAKskF,WAAa,IAAIqG,MAAM3qF,KAAKskF,WAAY,CAC3C9rD,KAAIuK,EAAQ5zB,EAAc7O,KACxByiC,EAAO5zB,GAAQ7O,EACfyvC,EAAStgC,KAAKszB,IACP,IAGb,CAEA2nD,gBAAgB3nD,GACd/iC,KAAK+mF,aAAa6D,QAAQ5qF,KAAKu9E,UAAWtiC,KAAKC,UAAUnY,GAC3D,CACAqnD,oBACEpqF,KAAKskF,WAAWz3E,QAAU7M,KAAK49E,aAAa1gF,IAAKoC,KAC/C6P,KAAM7P,EAAE6P,KACR/U,KAAMkF,EAAElF,KACR04E,WAAYxzE,EAAEwzE,WAElB,CAEAyW,sBACEvpF,KAAK2kF,aAAe3kF,KAAK49E,YAC3B,CAEA4L,oBACE,IAAIqB,EAAoB14E,WAASnS,KAAK49E,aAAc,CAAEkN,YAAY,IAClED,EAAoB,IAAIA,KAAsB7qF,KAAKsmF,wBACnDtmF,KAAKi9E,cAAgB4N,EAAkB3tF,IAAK21E,KAExCrE,OAAQqE,EACR3vE,QAAS,GACT5C,MAAOuyE,EAAIkY,gBACP/qF,KAAKgrF,yBAAyBnY,EAAIkY,gBAAiBlY,EAAI7jE,WACvD4qB,KAGR55B,KAAKu8E,eAAiBpqE,UAAQnS,KAAKi9E,cACrC,CAEQ+N,yBACN1qF,EACA0O,GAEA,MAAO,CACLytE,IAAKtqE,aAAW7R,GAChBo8E,UAAW1tE,EAAOA,EAAKzG,UAAUjI,GAAS6R,aAAW7R,GAEzD,CAEAmpF,4BAEEzpF,KAAKi9E,cAAcj2E,QAASqd,IAC1B,IAAIxb,EAAgB,GAEpB,GAAIsJ,gBAAckS,EAAOmqD,OAAOyc,eAAgB,CAE9C,MAAMhwF,EAAMkX,WAASA,QAAMnS,KAAKuC,KAAM8hB,EAAOmqD,OAAOr/D,MAAQ8zB,IAClD9wB,aAAW8wB,KAAY,KAANA,IAAa9wB,cAAY8wB,KAAM9wB,aAAW8wB,KAAM9wB,WAAS8wB,KAEpFp6B,EAASsJ,eAAalX,EAAI4M,OAC5B,MACEgB,EAASwb,EAAOmqD,OAAOyc,cAGzB,MAAM/nF,EAAU2F,EAAO3L,IAAK+lC,GAAMjjC,KAAKgrF,yBAAyB/nD,EAAG5e,EAAOmqD,OAAOx/D,OAG7EqV,EAAO/jB,OAAS6R,gBAAcA,SAAOjP,EAAS,CAAEu5E,IAAKp4D,EAAO/jB,MAAMm8E,SACpEp4D,EAAO/jB,WAAQs5B,GAGjBvV,EAAOnhB,QAAUA,GAErB,CAEA05E,eAAev4D,GACb,MAAM/jB,EAAQN,KAAKi9E,cAAcpqE,KAAM7T,GAAMA,EAAEwvE,OAAOp0E,OAASiqB,GAC/DrkB,KAAKu8E,eAAiBj8E,CACxB,CAEAw8E,eAAez4D,GACb,MAAMysB,EAAS9wC,KAAKu8E,eAAer5E,QAAQ2P,KAAM7T,GAAMA,EAAEy9E,MAAQp4D,GACjErkB,KAAKu8E,eAAej8E,MAAQ6R,YAAUnS,KAAKu8E,eAAej8E,MAAOwwC,QAAUlX,EAAYkX,EACvF9wC,KAAKmgE,cACP,CAEA+qB,oBACE,MAAMC,EAAwD,GAC9D,IAAI5oF,EAAO4P,YAAUnS,KAAKuC,MAAQ,IAAIvC,KAAKuC,MAAQ,GAC/C6oF,EAAiB,GACrB,OAAAprF,KAAKi9E,cAAcj2E,QAASqd,IAC1B,QAAqBuV,IAAjBvV,EAAO/jB,MACT,OAEF6qF,EAAejvF,KAAK,CAClB9B,KAAMiqB,EAAOmqD,OAAOp0E,KACpB+U,KAAMkV,EAAOmqD,OAAOr/D,KACpB7O,MAAO+jB,EAAO/jB,QAGhB,MAAM5C,GAAQyU,cAAY5P,EAAOksE,KAC/B,MAAMnuE,GAAQ6R,QAAMs8D,GAAKpqD,EAAOmqD,OAAOr/D,MACvC,OAAIgD,gBAAckS,EAAOmqD,OAAO6c,iBAEvB,GAAG/qF,OAAY+jB,EAAO/jB,MAAMm8E,IAG5Bp4D,EAAOmqD,OAAO6c,gBAAgB5c,GAAKpqD,EAAO/jB,MAAMm8E,IAAG,GAG9Dl6E,EAAO7E,GAAM,GACb0tF,EAAU,IAAIA,KAAY1tF,GAAM,GAAE,GAGpCsC,KAAKumF,qBAAqBr8E,KAAK,CAC7BohF,QAASH,EACT5oF,KAAMA,EACN6oF,QAASA,IAIXj5E,YAAUnS,KAAKiM,UAAUqzD,SAAW34C,SACyCiT,IAAvEznB,SAAO5P,EAAM,CAAE,CAACvC,KAAKogF,YAAaz5D,EAAa3mB,KAAKogF,gBACtDpgF,KAAKiM,UAAY,IAAIqC,IACrBtO,KAAK0M,gBAAgBxC,KAAKiI,UAAQnS,KAAKiM,YAAU,GAG9C1J,CACT,CAEAynB,cACMhqB,KAAK4pF,kBACP5pF,KAAK4pF,iBAAiB1/D,cAEpBlqB,KAAKyqF,gBACPzqF,KAAKyqF,eAAevgE,cAEtBlqB,KAAK6mF,eAAe38D,aACtB,CAEAi/D,gBACEnpF,KAAK2mF,cAAclM,KAAOz6E,KAAKurF,iBAC/BvrF,KAAK2mF,cAAcv0D,UAAYpyB,KAAKwrF,aACpCxrF,KAAK2mF,cAAc8E,UAAYzrF,KAAK0rF,aACpC1rF,KAAK2mF,cAAcl+D,WAAazoB,KAAK2rF,cACrC3rF,KAAK2mF,cAAciF,UAAY5rF,KAAK6rF,aACpC7rF,KAAK2mF,cAAct9D,UAAYrpB,KAAK8rF,aACpC9rF,KAAK2mF,cAAchM,YAAc36E,KAAK+rF,eACtC/rF,KAAK2mF,cAAcqF,MAAQhsF,KAAKisF,SAChCjsF,KAAK2mF,cAAczpF,IAAM8C,KAAKksF,OAC9BlsF,KAAK2mF,cAAcwF,SAAWnsF,KAAKosF,YACnCpsF,KAAK2mF,cAAc0F,QAAUrsF,KAAKssF,WAClCtsF,KAAK2mF,cAAcpuE,KAAOvY,KAAKusF,QAC/BvsF,KAAK2mF,cAAc/hF,QAAU5E,KAAKwsF,WAClCxsF,KAAK2mF,cAAc51C,KAAO/wC,KAAKysF,OACjC,CAEAhK,eAAeniF,GACb,IAAKN,KAAK06E,UACR,MAAM,IAAIv3D,MAAM,+BAElB,MAAMupE,EAAUz6E,OAAOC,KAAKlS,KAAK06E,WAC3BiS,EAAM16E,OAAOpJ,OAAO7I,KAAK06E,WAC5Bx9E,IAAI,CAAC+lC,EAAGhnC,MAAQkW,eAAa8wB,IAAMA,EAAE3iC,IAAW2iC,IAAM3iC,IAAUosF,EAAQzwF,KACxEooB,OAAQrlB,GAAMA,GACdpC,KAAK,KACR,OAAOuV,YAAUw6E,QAAO/yD,EAAY+yD,CACtC,CAEA/lF,YAAYC,GACNA,GAAStE,MAAMiF,cACjBxH,KAAK46E,SAET,CAEAgS,SAASC,GACP,MAAMvsF,EAAQ4H,OAAO2kF,EAAExlF,OAAO/G,OAC1BA,EAAQ,IACNN,KAAK8lF,UAAYxlF,EAAQN,KAAK8lF,UAChC9lF,KAAKskF,WAAWuB,MAAQ7lF,KAAK8lF,SAE7B+G,EAAEC,WAAWxsF,MAAQN,KAAK8lF,UAE1B9lF,KAAKskF,WAAWuB,MAAQvlF,GAGxBN,KAAKwlF,YACPxlF,KAAKkpF,YAET,CAEAA,aACE,IAAKlpF,KAAKgnF,SAAU,CAClBhnF,KAAK0O,OAAS,IAAIo1C,IAClB,MAAMt+C,EAAU,IAAIunF,IAAwB,KAEpCvnF,EAAQwnF,YAAYC,eACxBjtF,KAAK0O,OAAS,IAAIo1C,IAAY,SAAUt6C,kCAGtChE,EAAQwnF,YAAYE,YACtBltF,KAAKuC,KAAO,IAIdvC,KAAK46E,SAAO,GAKd,GAHAp1E,EAAQ2nF,SAAShD,OAASnqF,KAAKskF,WAAW6F,OAC1C3kF,EAAQ2nF,SAAStH,MAAQ7lF,KAAKskF,WAAWuB,MACzCrgF,EAAQ42E,OAASp8E,KAAKskF,WAAWlI,OAC7Bp8E,KAAKskF,WAAWC,OAAOnpF,OAAQ,CACjC,MAAMyM,EAAO7H,KAAKskF,WAAWC,MAAM,GACnC/+E,EAAQqC,KAAO,GAAgB,SAAbA,EAAKulF,IAAiB,IAAM,MAAMvlF,EAAKsH,MAC3D,CACAnP,KAAKw6E,UAAUtwE,KAAK1E,GACpBxF,KAAKgnF,UAAW,CAClB,CACF,CAEAz/C,aACEvnC,KAAKo9E,kBAAmB,EACxBp9E,KAAKkpF,YACP,CAEAmE,aAAalI,GACXnlF,KAAKm+E,MAAMiH,YAAcD,EAEzBnlF,KAAKskF,WAAW6F,OAASnqF,KAAKm+E,MAAMiH,YAAc,EAClDplF,KAAKskF,WAAWuB,MAAQ7lF,KAAKm+E,MAAMkH,WAE/BrlF,KAAKwlF,WACPxlF,KAAKkpF,aAIPlpF,KAAKklF,aAAa,GACpB,CAEAA,cACEC,OAAOnlF,KAAKm+E,MAAMiH,YAClB/qF,OAAO2F,KAAKm+E,MAAMkH,WAClBC,eAAetlF,KAAK00E,OAEpB,GAAI10E,KAAKwlF,WAEP,YADAxlF,KAAK4mF,SAASn3E,KAAK61E,GAIrB,GAAmB,IAAftlF,KAAK6lF,MAIP,OAHA7lF,KAAKm+E,MAAMiH,YAAc,EACzBplF,KAAKm+E,MAAMkH,WAAaC,EAAalqF,QAAU,OAC/C4E,KAAK4mF,SAASn3E,KAAK61E,GAGrB,MAAQvqF,QAAOC,QAAQgF,KAAKmnF,SAAS,CAAEhC,OAAM9qF,OAAMirF,iBAE7CgI,GAAYhI,GAAcpqF,QAAQH,EAAOC,IAE/CgF,KAAK4mF,SAASn3E,KAAK69E,GACrB,CAmBAC,cACE,OAAQ9e,IACN,MAAMrkD,EAAKqkD,EAAIzuE,KAAKogF,YACpB,GAAIjuE,gBAAciY,GAChB,MAAM,IAAIjH,MAAM,qBAAqBnjB,KAAKogF,mBAAmBh2D,MAE/D,OAAOA,EAEX,CAEAwwD,UACO56E,KAAKuC,OAGVvC,KAAKypF,4BACLzpF,KAAKmgE,eACLngE,KAAKuqB,QACLvqB,KAAKwtF,YACLxtF,KAAKytF,iBACLztF,KAAK0tF,iBACL1tF,KAAK8jF,kBACP,CAOAv5D,QACEvqB,KAAKo9E,kBAAmB,EACxBp9E,KAAKgnF,UAAW,CAClB,CAOAyG,iBACE,IAAKztF,KAAKiM,WAAWqzD,UAAUlkE,OAAQ,OAEvC,MAAMuyF,EAAc,IAAIC,IAQxB,GAPA5tF,KAAKiM,UAAUqzD,SAASt4D,QAAS2f,IAC/B,UAAW8nD,KAAOzuE,KAAKuC,KACjBokB,EAAa3mB,KAAKogF,cAAgB3R,EAAIzuE,KAAKogF,aAC7CuN,EAAYnlE,IAAIimD,EAAG,GAIA,IAArBkf,EAAYtzF,KAAY,OAC5B,MAAMwzF,EAAmBluF,MAAMo/C,KAAK4uC,EAAY9kF,UAEhDglF,GAAkB7mF,UAAWiF,IAC3B,MAAM28E,EAAW5oF,KAAKm+E,MAAM57E,KAAKurF,UAC9Brf,IACCt8D,QAAMs8D,GAAK,CAAC,EAAG,WAAYzuE,KAAKogF,eAAiBn0E,EAAUjM,KAAKogF,aAEpEwI,GAAW,GAAM5oF,KAAKm+E,MAAM4P,UAAUnF,GAAU,EAAI,IAIlB,aAAlC5oF,KAAKkmF,2BACL/zE,YAAUnS,KAAKiM,UAAUqzD,SAAUuuB,MAKrC7tF,KAAKiM,UAAUqzD,SAAWuuB,EAEY,UAAlC7tF,KAAKkmF,0BAITlmF,KAAK0M,gBAAgBxC,KAAKiI,UAAQnS,KAAKiM,YACzC,CAEAyhF,iBACE,GAAIv7E,gBAAcnS,KAAK4gF,WAA8C,UAAjC5gF,KAAKmmF,wBACvC,OAGF,MAAM6H,EAAahuF,KAAK4gF,SAAS5gF,KAAKogF,YAChC6N,EAAc97E,SAAOnS,KAAKuC,KAAOksE,GAAQuf,IAAevf,EAAIzuE,KAAKogF,aAElC,aAAjCpgF,KAAKmmF,yBAA0Ch0E,YAAUnS,KAAK4gF,SAAUqN,KAI5EjuF,KAAK4gF,SAAWqN,EAClB,CAEAC,iBAAiBtF,EAAkBuF,GACjC,MAAMC,EAAej8E,QAAMnS,KAAKm+E,MAAM57E,OAAOqmF,GAAW,CAAC,EAAG,aAE1D5oF,KAAKiM,UAAUqzD,SADb6uB,EACwB,IAAInuF,KAAKiM,UAAUqzD,SAAU8uB,GAE7BpuF,KAAKiM,UAAUqzD,SAASj7C,OAC/Cq3D,GAAMA,EAAE17E,KAAKogF,cAAgBgO,EAAapuF,KAAKogF,YAGtD,CAEAlB,SAASmP,GACP,MAAMD,EAAej8E,QAAMnS,KAAKm+E,MAAM57E,OAAO8rF,GAAmB,CAAC,EAAG,aACzC,WAAvBruF,KAAKuxE,eACPvxE,KAAKm+E,MAAMmQ,WAAU,GACrBtuF,KAAKiM,UAAUqzD,SAAW,CAAC8uB,IAE3BpuF,KAAKiM,UAAUqzD,SAAW,IAAIt/D,KAAKiM,UAAUqzD,SAAU8uB,GAEzDpuF,KAAKm+E,MAAM4P,UAAUM,GAAkB,GACvCruF,KAAK0M,gBAAgBxC,KAAKlK,KAAKiM,UACjC,CAEAsiF,cACEvuF,KAAKm+E,MAAMmQ,WAAWtuF,KAAKwmF,oBAAsBxmF,KAAKymF,+BACtDzmF,KAAKm+E,MAAMqQ,aAAaxnF,QAAQ,CAACmnF,EAAqBvF,IACpD5oF,KAAKkuF,iBAAiBtF,EAAUuF,IAElCnuF,KAAK0M,gBAAgBxC,KAAKlK,KAAKiM,WAC/BjM,KAAK0lF,MAAMiE,eACb,CAEAxK,WAAWsP,GACTzuF,KAAKm+E,MAAM4P,UAAUU,GAAoB,GACd,WAAvBzuF,KAAKuxE,gBAGTvxE,KAAKkuF,iBAAiBO,GAAoB,GAC1CzuF,KAAK0M,gBAAgBxC,KAAKlK,KAAKiM,WACjC,CAEAyiF,gBACE1uF,KAAKm+E,MAAMmQ,WAAU,GACrBtuF,KAAKm+E,MAAMqQ,aAAaxnF,QAAQ,CAACmnF,EAAqBvF,IACpD5oF,KAAKkuF,iBAAiBtF,EAAUuF,IAElCnuF,KAAK0M,gBAAgBxC,KAAKlK,KAAKiM,UACjC,CAEA4xE,uBACE79E,KAAKm+E,MAAMmQ,WAAU,GACrBtuF,KAAKm+E,MAAMqQ,aAAaxnF,QAAQ,CAAC2nF,EAAsB/F,IACrD5oF,KAAKkuF,iBAAiBtF,GAAU,GAEpC,CAEAtL,aAAa9O,GACX,MAAMr/D,EAAwBq/D,EAAOr/D,KAC/BouD,GAAQiR,EAAOsE,SACjBvV,GAAuC,IAA/Bv9D,KAAK+kF,eAAe3pF,OAC9BozE,EAAOsE,UAAW,GAGpB3gE,SAAOnS,KAAK49E,aAAet+E,GAAqBA,EAAE6P,OAASA,GAAM2jE,SAAWvV,EAC5Ev9D,KAAK4uF,gBACP,CAEAA,gBACE5uF,KAAKoqF,oBACLpqF,KAAKupF,sBACL,MAAMsF,EAAW7uF,KAAKskF,WAAWC,MAAM,GAAGp1E,KACrCgD,SAAOnS,KAAK+kF,eAAiBzlF,GAAqBA,EAAE6P,OAAS0/E,KAChE7uF,KAAKskF,WAAWC,MAAQvkF,KAAKopF,wBAAwBppF,KAAK+kF,eAAe,GAAG51E,OAE1EnP,KAAKgmF,mBAAqBhmF,KAAK+M,cAAcyrE,iBAAiBp9E,SAChE4E,KAAK2kF,aAAe,IACf3kF,KAAK2kF,aACR,CACEvqF,KAAM,GACN+U,KAAM,GACNk4E,UAAW,MACXzX,UAAU,EACVvgE,aAAcrP,KAAKsnF,kBAIzBtnF,KAAK0lF,MAAMiE,eACb,CAEAP,wBAAwBj6E,GACtB,MAAO,CACL,CACEA,KAAMA,EACNi+E,IAAK0B,IAAgBC,KAG3B,CAEAC,cAAcC,GACZ,IAAKjvF,KAAKm+E,OAAOx/C,SAASswD,GACxB,OAGF,MAAM9/E,EAAOnP,KAAK2kF,eAAesK,IAAc9/E,KAE/C,GAAInP,KAAKm+E,MAAMx/C,OAAOswD,GAAaC,OACjClvF,KAAKm+E,MAAMx/C,OAAOswD,GAAaE,WAAanvF,KAAKm+E,MAAMx/C,OAAOswD,GAAaG,cACtE,CACL,MAAMC,GAAYrvF,KAAKskF,YAAYC,OAAO1xE,OAAQ7T,IAAMA,GAAEmQ,OAASA,IAAOi+E,IAC1EptF,KAAKm+E,MAAMx/C,OAAOswD,GAAaG,UAA0B,QAAdC,GAC3CrvF,KAAKm+E,MAAMx/C,OAAOswD,GAAaE,WAA2B,SAAdE,EAC9C,CAKA,MAAM9K,EAAQ,CAAC,CAAE6I,IAHLptF,KAAKm+E,MAAMx/C,OAAOswD,GAAaG,UACvCN,IAAgBC,IAChBD,IAAgBQ,KACEngF,SAEtBnP,KAAKskF,WAAWC,MAAQA,EACpBvkF,KAAKwlF,aACPxlF,KAAKskF,WAAW6F,OAAS,EACzBnqF,KAAKkpF,cAGPlpF,KAAKwtF,UAAUyB,EACjB,CAEAzB,UAAUyB,GACR,MAAM/nF,EACJ+nF,GACAjvF,KAAK+kF,gBAAgB+I,YAAa9uF,IAAMA,GAAEmQ,OAASnP,KAAKskF,YAAYC,QAAQ,IAAIp1E,MAElF,GAAIgD,UAAQjL,IAAUA,EAAQ,IAAMlH,KAAKm+E,OAAOx/C,SAASz3B,GACvD,OAGF,MAAMiI,EAAOnP,KAAK2kF,eAAez9E,IAAQiI,KAEnCkgF,EAAYrvF,KAAKskF,YAAYC,OAAO1xE,OAAQ7T,IAAMA,GAAEmQ,OAASA,IAAOi+E,IAC1EptF,KAAKm+E,MAAMx/C,OAAOz3B,GAAOkoF,UAA0B,QAAdC,EACrCrvF,KAAKm+E,MAAMx/C,OAAOz3B,GAAOioF,WAA2B,SAAdE,EAEtC,MAAME,GAAMvvF,KAAK00E,KAAKx5E,QAEtBq0F,GAAI1nF,KAAK,CAACrN,GAAGC,MACX,MAAM+0F,GAAOr9E,QAAM3X,GAAG2U,GAChBsgF,EAAOt9E,QAAM1X,GAAG0U,GACtB,OAAIqgF,GAAOC,EACFzvF,KAAKm+E,MAAMx/C,OAAOz3B,GAAOioF,YAAa,EAAK,EAEhDM,EAAOD,GACFxvF,KAAKm+E,MAAMx/C,OAAOz3B,GAAOioF,WAAa,GAAI,EAE5C,IAGTnvF,KAAKm+E,MAAMx/C,OAAOz3B,GAAOgoF,QAAS,EAClClvF,KAAK00E,KAAO6a,GAAIr0F,OAClB,CAEAmhF,gBACEr8E,KAAKo8E,OAAS,GACdp8E,KAAK4gF,cAAWhnD,EAChB55B,KAAKmgE,cACP,CAEA4e,iBACE/+E,KAAKi9E,cAAcj2E,QAASqd,IAC1BA,EAAO/jB,WAAQs5B,IAEjB55B,KAAKu8E,eAAiBpqE,UAAQnS,KAAKi9E,eACnCj9E,KAAKmgE,cACP,CAEAA,eACE,GAAIngE,KAAKwlF,WACHxlF,KAAKskF,WAAWlI,SAAWp8E,KAAKo8E,SAGlCp8E,KAAKskF,WAAW6F,OAAS,EACzBnqF,KAAKskF,WAAWuB,MAAQ7lF,KAAK6lF,MAC7B7lF,KAAKskF,WAAWlI,OAASp8E,KAAKo8E,OAC9Bp8E,KAAKgnF,UAAW,EAChBhnF,KAAKkpF,cAEPlpF,KAAK00E,KAAO10E,KAAKuC,SACZ,CACL,IAAImyE,EAAqC,IAA9B10E,KAAKi9E,cAAc7hF,OAAe4E,KAAKkrF,oBAAsBlrF,KAAKuC,KAE7E,GAAIvC,KAAKo8E,OAAOhhF,OAAS,GAAKs5E,GAAMt5E,OAAQ,CAC1C,MAAMyR,EAAU7M,KAAK49E,aAAav5D,OAC/B/kB,GAAMA,EAAE6pB,qBAAuBC,IAAaqiE,WAG/C/W,EAAO10E,KAAK0vF,UAAUhb,EAAMkH,GAAewL,cAAcpnF,KAAKo8E,QAASvvE,EACzE,CAEA7M,KAAK00E,KAAOA,CACd,CACF,CAEAgb,UAAUntF,EAAaotF,EAAyB9iF,GAC9C,GAA6B,IAAzB8iF,EAAcv0F,QAAgC,IAAhBmH,EAAKnH,OACrC,OAAOmH,EAET,MAAMqtF,EAAwBD,EAAcxzF,MAAMiM,QAAQ,MAAO,KAAKzL,MAAM,KACtEkzF,GAAe,IAAIhjF,GACzB,OAA2B,IAAvB+iF,EAAYx0F,SACdyR,EAAUgjF,GAAaxrE,OAAQ/kB,KAAuD,IAAjDA,GAAElF,KAAKmqB,cAAcxoB,QAAQ6zF,EAAY,MAEhFrtF,EAAOvC,KAAK8vF,gBAAgB39E,SAAOy9E,GAAcrtF,EAAMsK,GAEhD7M,KAAK0vF,UAAUntF,EAAMotF,EAAeE,GAC7C,CAEAC,gBAAgBC,EAAoBrb,EAAa7nE,GAC/C,OAA0B,IAAtBkjF,EAAW30F,OACNs5E,EAEFA,EAAKrwD,OAAQoqD,GAEhB5hE,EAAQwX,OAAQwuD,KACd,IAAImd,GAAiB79E,QAAMs8D,EAAKoE,GAAI1jE,MAKpC,GAHKgD,gBAAc0gE,GAAI7jE,QACrBghF,GAAYnd,GAAI7jE,KAAKzG,UAAUynF,KAE7B79E,gBAAc69E,KAAc79E,WAAS69E,IACvC,OAAO,EAST,GANI79E,YAAU69E,IACZA,GAAYA,GAAUpzF,KAAK,MAClBuV,aAAW69E,KAAc79E,cAAY69E,OAC9CA,GAAYA,GAAU1qE,YAGpBnT,iBAAe69E,IACjB,KAAIhwF,KAAKqmF,kBAGP,OAAO,EAFP2J,GAAY/0C,KAAKC,UAAU80C,GAEpB,CAIX,OAAuD,IAAhDA,GAAUzrE,cAAcxoB,QAAQg0F,EAAgB,GACtD30F,OAAS,EAGlB,CAEA60F,cAEE,MAAO,MAEHC,WAAY/9E,gBAAcnS,KAAKuxE,gBAGrC,CAEAuS,kBACE,GAAI3xE,UAAQnS,KAAK4gF,UACf,OAGF,MAAMuP,EAAmBnwF,KAAKm+E,MAAM57E,KAAKurF,UAAWrf,IAClD,MAAM2hB,EAAgBj+E,QAAMs8D,EAAK,CAAC,EAAG,WAAYzuE,KAAKogF,aAChD4N,EAAahuF,KAAK4gF,WAAW5gF,KAAKogF,YACxC,OAAOjuE,YAAUi+E,EAAepC,EAAU,GAGxCmC,EAAmB,IAIvBnwF,KAAKm+E,MAAMwK,aAAe3oF,KAAKm+E,MAAMwK,aAAazrF,IAChD,CAACiV,EAAGy2E,IAAqBA,IAAauH,GAE1C,CAEAvQ,uBAAuBnR,GACrB,MAAM4hB,EAAQ5hB,EAAI57D,KAAM1Y,GAAMA,EAAE+tF,cAChC,OAAImI,GACKA,EAAMnI,YAGjB,CAEAjI,oBAAoBxR,GAClB,OAAOA,EAAIpvE,KAAMlF,GAAMA,EAAEm2F,cAC3B,CAEA9Q,gBAAgBt4E,GACd,OAAOlH,KAAKm+E,MAAM57E,KAAK2E,GAAO7H,KAAMlF,GAAMA,GAAKA,EAAE+tF,aACnD,CAEAn0E,UAAUqW,EAAYmmE,EAAgB9hB,GAEpC,OADyBt8D,QAAMs8D,EAAK,CAAC,EAAG,OAAQ,MAAOrkD,KAAM9E,cAClCmpD,CAC7B,CAEAsa,0BACE,MAAMyH,EAAoBxwF,KAAKm+E,MAAMqS,oBAEjCA,GAAqB,GAEvBxwF,KAAKwmF,mBAAoB,EACzBxmF,KAAKymF,+BAAgC,GAC5B+J,EAAoBxwF,KAAKm+E,MAAM57E,KAAKnH,QAC7C4E,KAAKwmF,mBAAoB,EACzBxmF,KAAKymF,+BAAgC,IAErCzmF,KAAKwmF,mBAAoB,EACzBxmF,KAAKymF,+BAAgC,EAEzC,iDA1xCW7K,IAAc36E,iFAAAC,KAAA,4DAAd06E,GAAcxyE,UAAA,eAAA4K,eAAA,SAAA1K,EAAA7F,EAAAwQ,MAAA,EAAA3K,iCAwCXsuE,IAAoB,gCACpBwB,IAAqB,o1GDpFxB5vE,4EACP,oCAI2BA,4EAC3B,oCAqBeA,4EACX,oCAiCaA,iFA0EEA,2FAkFNA,gGAqCkBA,4EAC7B,qCAsFUA,2EAAA,mCAAkJA,4EAC9J,oCAoBMA,uuJA/WZvI,2BAAA,4BA2HEA,uBAxHA,EAAAwvF,GAAA,0BAwHAxvF,CAxHsC,EAAAyvF,GAAA,6BAwHtCzvF,CAzGqG,EAAA0vF,GAAA,cAqInG1vF,2BANF,aAMEA,CADmC,cAK5BA,uBAFA,yBAAAA,iCAAAsL,GAAAtL,wBAAewC,EAAAirF,gBAAe,EAE9BztF,CAF+B,uBAAAA,iCAAAsL,GAAAtL,wBAClBwC,EAAA8qF,cAAa,EAC1BttF,CAD2B,gBAAA2J,IAAA3J,iCAAAsL,GAAAtL,wBACnBwC,EAAAurF,cAAApkF,IAAqB,GAQpC3J,2BACAA,uBAAA,EAAA2vF,GAAA,gBAyCF3vF,2BACAA,2BAAA,uBACgBA,uBAAA,sBAAA2J,IAAA3J,iCAAAsL,GAAAtL,wBAAcwC,EAAA4pF,aAAAziF,IAAoB,GAKpD3J,6BAiLAA,uBA/KA,EAAA4vF,GAAA,yBAAA5vF,mCA+KAA,CA/K6B,GAAA6vF,GAAA,yBAAA7vF,mCA+K7BA,CAhK4B,GAAA8vF,GAAA,yBAAA9vF,mCAgK5BA,CArJsC,GAAA+vF,GAAA,yBAAA/vF,mCAqJtCA,CAjJ6B,GAAAgwF,GAAA,yBAAAhwF,mCAiJ7BA,CAxHoC,GAAAiwF,GAAA,yBAAAjwF,mCAwHpCA,CAlHoC,GAAAkwF,GAAA,yBAAAlwF,mCAkHpCA,CAzGoC,GAAAmwF,GAAA,yBAAAnwF,mCAyGpCA,CAnGoC,GAAAowF,GAAA,yBAAApwF,mCAmGpCA,CA5FoC,GAAAqwF,GAAA,yBAAArwF,mCA4FpCA,CArFoC,GAAAswF,GAAA,0BAAAtwF,mCAqFpCA,CA1EoC,GAAAuwF,GAAA,0BAAAvwF,mCA0EpCA,CApEoC,GAAAwwF,GAAA,0BAAAxwF,mCAoEpCA,CAvDoC,GAAAywF,GAAA,0BAAAzwF,mCAuDpCA,CAjDoC,GAAA0wF,GAAA,0BAAA1wF,mCAiDpCA,CAnCoC,GAAA2wF,GAAA,wBAAA3wF,mCAmCpCA,CA3ByC,GAAA4wF,GAAA,0BAAA5wF,mCA2BzCA,CAfoC,GAAA6wF,GAAA,0BAAA7wF,mCAepCA,CAToC,GAAA8wF,GAAA,0BAAA9wF,+EA3XfA,uBADA,WAAAwC,EAAAuuF,MACA/wF,CADkB,WAAAwC,EAAAk6E,OAGlB18E,+CAAA,OAAAwC,EAAAs4E,aAYC96E,+CAAA,OAAAwC,EAAA+tE,YA6GdvwE,+CAAA,OAAAwC,EAAA+tE,YAAA/tE,EAAAgiF,gBAsBCxkF,wBAIAA,uBAJA,WAAAwC,EAAAmsE,SAIA3uE,CAJqB,cAIrBA,CAHkB,OAAAwC,EAAApJ,KAGlB4G,CAFa,aAEbA,CADiB,WAAAwC,EAAA25E,kBAGfn8E,wBAUAA,uBAVA,WAAAwC,EAAAmsE,SAUA3uE,CAVqB,QAAAwC,EAAA06E,MAUrBl9E,CANe,oBAAAwC,EAAA+iF,kBAMfvlF,CALuC,gCAAAwC,EAAAgjF,8BAKvCxlF,CAJ+D,sBAAAwC,EAAAg8E,oBAI/Dx+E,CAH2C,qBAAAwC,EAAA08E,mBAG3Cl/E,CAFyC,WAAAwC,EAAA25E,iBAEzCn8E,CAD6B,mBAI5BA,wBAAeA,uBAAf,QAAAwC,EAAA+gF,OAAevjF,CAAA,WAAAgxF,GAyCThxF,wBAIAA,uBAJA,QAAAwC,EAAA06E,MAIAl9E,CAJe,eAAAwC,EAAAoiF,MAIf5kF,CAFwB,WAAAwC,EAAA25E,iBAExBn8E,CAD6B,wBAAAwC,EAAAoiF,mgDEtMzC,SAAUz5D,KAAYixB,GAC1B,OAAQA,EAAKjiD,QACX,KAAK,EACH,OAAO82F,EAAYp0F,WAAM87B,EAAWyjB,GACtC,KAAK,EACH,OAAO80C,EAAar0F,WAAM87B,EAAWyjB,GACvC,QACE,MAAM,IAAIl6B,MAEhB,CAaM,SAAUqvB,EAAYnrC,EAAgB+qF,EAAqBlrF,GAC/D,MAAMmrF,EAAc,YAAYD,IAC5BzyF,MAAMmzD,QAAQzrD,EAAOgrF,IACvBhrF,EAAOgrF,GAAan2F,KAAKgL,GAEzBG,EAAOgrF,GAAe,CAACnrF,EAE3B,CAEA,SAASgrF,EAAY7qF,GACnB,UAAW67C,KAAgBjxC,OAAOqgF,oBAAoBjrF,EAAOkrF,WAAY,CACvE,MAAMC,EAAavgF,OAAOwgF,yBAAyBprF,EAAOkrF,UAAWrvC,KAEpDsvC,EAAWlyF,iBAAiBoyF,WACN,gBAAjBxvC,IAKtBivC,EAAa9qF,EAAOkrF,UAAWrvC,EAAcsvC,GAC7CvgF,OAAO0gF,eAAetrF,EAAOkrF,UAAWrvC,EAAcsvC,GACxD,CACF,CAEA,SAASL,EAAa9qF,EAAa+qF,EAAqBI,QACnC54D,IAAf44D,IACFA,EAAavgF,OAAOwgF,yBAAyBprF,EAAQ+qF,IAEvD,MAAMQ,EAAiBJ,EAAWlyF,MAElCkyF,EAAWlyF,MAAQ,WACjB,MACMuyF,EAAoBxrF,EADN,YAAY+qF,MACiB,GAC3C/0C,EAAO,GAEb,QAASphD,EAAI,EAAGA,EAAI62F,UAAU13F,OAAQa,IAChCkW,aAAW2gF,UAAU72F,MAA8B,IAAvB42F,EAAQ92F,QAAQE,GAC9CohD,EAAKphD,GAAK6vC,mBAAmBgnD,UAAU72F,IAEvCohD,EAAKphD,GAAK62F,UAAU72F,GAKxB,OADe22F,EAAe90F,MAAMkC,KAAMq9C,EAE5C,CACF,kFCnEM,MAAO01C,EAGXjzF,YACUkzF,EACAC,EACA/kF,GAFAlO,KAAAgzF,cACAhzF,KAAAizF,gBACAjzF,KAAAkO,qBAYDlO,KAAAkzF,iBAAkB,CAXxB,CAEH,WAAaC,CAAQC,GACnBpzF,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBACvC7O,KAAKqzF,aAAaD,GACpBpzF,KAAKizF,cAAcK,mBAAmBtzF,KAAKgzF,aAE3ChzF,KAAKizF,cAAcM,OAEvB,CAIQF,aAAaD,GACnB,MAAMI,EAAcxzF,KAAKkzF,gBAAkB/gF,UAAUA,SAErD,OAAIA,aAAWihF,GACNjhF,QAAMnS,KAAKu/B,YAAa,CAAC6zD,EAAW,SAAS,GAC3CjhF,YAAUihF,GACZI,EAAYJ,EAAYtmF,GAAe9M,KAAKu/B,YAAYzyB,GAAYylB,QAClEpgB,aAAWihF,IACbI,EAAYJ,EAAW,CAAC9yF,EAAOiiB,IAC7BixE,EAAYlzF,EAAQse,GAAQ5e,KAAKu/B,YAAYhd,GAAK3D,IAK/D,iDAlCWm0E,GAAoB9xF,6HAAAC,KAAA,4DAApB6xF,EAAoB3pF,UAAA,oBAAA+C,OAAA,CAAAgnF,QAAA,UAAAD,gBAAA,4FCL3B,MAAOO,EAGX3zF,YAAoBwkE,GAAAtkE,KAAAskE,aAFZtkE,KAAAsjE,OAAQ,CAE6B,CAE7Cv8D,kBACE,MAAM9I,EAAuB+B,KAAKskE,WAAWnB,cACzCnjE,KAAKsjE,OAASnxD,eAAalU,EAAGqlE,QAChCrlE,EAAGqlE,OAEP,CAEA,aACWowB,CAAUN,GACfjhF,cAAYihF,GACdpzF,KAAKsjE,MAAQ8vB,EACJjhF,eAAaihF,KACtBpzF,KAAKsjE,MAAQ8vB,IAEjB,iDAnBWK,GAAkBxyF,4CAAA,4DAAlBwyF,EAAkBrqF,UAAA,sBAAA+C,OAAA,CAAAunF,UAAA,uHCYzB,MAAOC,EAqDX7zF,YACUwkE,EACA1wD,EACAwkD,EACAr4D,GAHAC,KAAAskE,aACAtkE,KAAA4T,UACA5T,KAAAo4D,oBACAp4D,KAAAD,YAvDVC,KAAA4zF,cAAmC,IAAI9pF,eAyDrC9J,KAAK/B,GAAK+B,KAAKskE,WAAWnB,aAC5B,CAEA10D,WACEzO,KAAK2f,SAAS3f,KAAK/B,GAAGqC,MACxB,CAEAqf,SAASrf,GACH,WAAWpC,KAAKoC,GAClBA,GAASN,KAAK6zF,aAAe,IAEzBvzF,IACFN,KAAK4T,QAAQA,QAAQ+L,SAASrf,GAC9BN,KAAK4T,QAAQA,QAAQkgF,cAAcxgF,aAAWE,QAAQ,oBACtDxT,KAAK4T,QAAQA,QAAQiO,0BAGzB,MAAMxnB,EAAO2F,KAAKD,UAAUs5D,QAAQ/4D,GAC9ByzF,EAAc/zF,KAAKg0F,MAAM35F,GAC/B2F,KAAK/B,GAAGqC,MAAQN,KAAKo4D,kBAAkB7vD,UAAUwrF,GACpC,OAAT15F,GACF2F,KAAK4zF,cAAc1pF,KAAKlK,KAAK/B,GAAGqC,OAChCN,KAAK4T,QAAQA,QAAQ+L,SAAS3f,KAAK/B,GAAGqC,SAEtCN,KAAK4zF,cAAc1pF,KAAK,MACxBlK,KAAK4T,QAAQA,QAAQ+L,SAAS,MAElC,CAEAq0E,MAAM35F,GACJ,GAAa,OAATA,GAA0B,IAATA,EAAY,CAC/B,IAAK8X,gBAAcnS,KAAKi0F,WAAa55F,EAAO2F,KAAKi0F,SAC/C,OAAOj0F,KAAKi0F,SAEd,IAAK9hF,gBAAcnS,KAAKk0F,WAAa75F,EAAO2F,KAAKk0F,SAC/C,OAAOl0F,KAAKk0F,SAEd,IAAK/hF,gBAAcnS,KAAKm0F,YAAa,CACnC,MAAM9tC,EAAQjpD,KAAK42F,MAAM52F,KAAKg3F,IAAI/5F,GAAQ+C,KAAKg3F,IAAIp0F,KAAKm0F,aACxD,OAAO/2F,KAAKi3F,IAAIr0F,KAAKm0F,WAAY9tC,EACnC,CACF,CACA,OAAOhsD,CACT,CAGAi6F,OAAOh0F,GACLN,KAAK2f,SAASrf,EAChB,iDA3GWqzF,GAAsB1yF,0EAAAC,aAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA,4DAAtB2qF,EAAsBvqF,UAAA,4BAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAtBrI,uBAAA,gBAAA2J,GAAA,OAAAnH,EAAA6wF,OAAA1pF,EAAAvD,OAAA/G,MAA2B,+MCiDlC,MAAOyuD,oDAAgB,2DAAhBA,GAAgB,8DA5CjBtjD,wBAAmB,+DClBzB,MAAO8oF,EAGXz0F,cAFQE,KAAAw0F,cAAgB,IAAIjuD,SAEb,CAEfr8B,KAAK5J,GACHN,KAAKw0F,cAAc/kF,KAAKnP,EAC1B,iDAPWi0F,EAAe,+DAAfA,EAAepzF,QAAfozF,EAAenzF,UAAAC,WAFd,QAAM,iBCoBd,MAAOozF,EAYX30F,YAAoB40F,GAAA10F,KAAA00F,iBANV10F,KAAA20F,aAA6C,IAAI7qF,eAGnD9J,KAAAw0F,cAAiC,IAAIjuD,UACrCvmC,KAAA40F,cAAgC,EAEc,CAEtDnmF,WACEzO,KAAK60F,mBAAqB70F,KAAKw0F,cAC5BxlF,QAAKuP,gBA1BkB,MA0BS,EAAGC,2BACnC7P,UAAWmmF,IAGV90F,KAAK+0F,MAAQ/0F,KAAK+0F,MAAM73F,IAAKkkE,IAC3B,MAAM9B,EAAWt/D,KAAK40F,cAAcv1F,KACjCsnB,GAA+BA,EAAazsB,UAAYknE,EAAKlnE,SAEhE,MAAO,IAAKknE,EAAM9B,WAAQ,GAGbt/D,KAAK+0F,MAAM11F,KAAM+hE,GAAuBA,EAAKlnE,UAAY46F,KAGtE90F,KAAK+0F,MAAQ/0F,KAAK+0F,MAAMnsF,OAAO,CAAE1O,QAAS46F,EAAc16F,KAAM06F,KAEhE90F,KAAK20F,aAAazqF,KAAKlK,KAAK+0F,OAC5B/0F,KAAK00F,eAAexqF,KAAK,CAAE4qF,gBAAc,EAE/C,CAGAE,QAAQniC,GACFA,EAAMz3D,OAAS,GAAG4E,KAAKw0F,cAAc/kF,KAAKojD,EAChD,CAGAoiC,WAAWpiC,GACT7yD,KAAK40F,cAAgB/hC,CACvB,CAEA7oC,cACEhqB,KAAK60F,mBAAmB3qE,cACxBlqB,KAAKw0F,cAAcpvE,UACrB,iDAlDWqvE,GAA6BxzF,8BAAAC,GAAA,4DAA7BuzF,EAA6BrrF,UAAA,mCAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAA7BrI,uBAAA,kBAAA2J,GAAA,OAAAnH,EAAAuxF,QAAApqF,EAAe,EAAf3J,CAA6B,oBAAA2J,GAAA,OAA7BnH,EAAAwxF,WAAArqF,EAAkB,4ICdzB,MAAOsqF,EAGXp1F,YACsBq1F,EACZjnF,EACAo2D,GAFYtkE,KAAAm1F,YACZn1F,KAAAkO,qBACAlO,KAAAskE,YACP,CAEHv9D,kBACE/G,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C,MAAM4xB,EAAezgC,KAAKm1F,WAAWC,YACjC30D,IAAiBzgC,KAAKu/B,cAAckB,IAAe14B,SACrD/H,KAAKskE,WAAWnB,cAAc54B,UAAW,EAE7C,iDAfW2qD,GAAyBj0F,8BAAAC,IAAA,GAAAD,8BAAA8H,KAAA9H,4CAAA,4DAAzBi0F,EAAyB9rF,UAAA,yOCDhC,MAAOisF,EACXv1F,YAAoBkzF,EAAuCC,GAAvCjzF,KAAAgzF,cAAuChzF,KAAAizF,eAAkC,CAE7F,iBAAaqC,CAAclC,GACzB,IAAIl5F,EAIJ,OAFA8F,KAAKizF,cAAcM,QAEXH,GACN,KAAKmC,IAAcC,QACjBt7F,EAAU8F,KAAKy1F,iBAAiBjsF,iCAChCxJ,KAAKizF,cAAcyC,gBAAgBr4B,IAAuB,CAAEs4B,iBAAkBz7F,IAC9E,MACF,KAAKq7F,IAAcK,MACjB51F,KAAKizF,cAAcK,mBAAmBtzF,KAAKgzF,aAC3C,MACF,KAAKuC,IAAcpyE,MACjBjpB,EAAU8F,KAAKy1F,iBAAiBjsF,2CACXxJ,KAAKizF,cAAcyC,gBAAgBlxC,IAAqB,CAC3EmxC,iBAAkBz7F,IAEeq0C,SAAUpoC,KAAO,QAG1D,CAEAsvF,iBAAiBv7F,GAEf,MAAO,CAAC,CADQkpD,SAASyyC,eAAe37F,IAE1C,iDA7BWm7F,GAAoBp0F,+FAAA,4DAApBo0F,EAAoBjsF,UAAA,0BAAA+C,OAAA,CAAAmpF,cAAA,sECJ3B,MAAOQ,oDAAkB,4DAAlBA,EAAkB1sF,UAAA,wBAAA+C,OAAA,CAAAipF,YAAA,+ECkCzB,MAAOW,EAMX,cACIC,GACF,QAAKh2F,KAAK4T,UAGH5T,KAAK4T,QAAQtC,QAAUtR,KAAK4T,QAAQyE,SAAWrY,KAAK4T,QAAQrC,OACrE,CAEA,gBACI0kF,GACF,QAAKj2F,KAAK4T,UAGH5T,KAAK4T,QAAQ+B,SAAW3V,KAAK4T,QAAQyE,SAAWrY,KAAK4T,QAAQrC,MACtE,CAEA,QAAIgH,GACF,OAhCE,SAAU29E,EAAY97F,EAAc+lD,GAExC,MAAO,IAAIA,EAAO5nC,KAAOne,EAC3B,CA6BW87F,CAAYl2F,KAAKm2F,gBAAiBn2F,KAAKmgD,OAChD,CAEA,WAAIvsC,GACF,OAAO5T,KAAKo2F,eAAiBp2F,KAAKo2F,cAAcC,WAAWr2F,KAC7D,CAEA,iBAAIo2F,GACF,OAAOp2F,KAAKmgD,OAASngD,KAAKmgD,OAAOi2C,cAAgB,IACnD,CAEAt2F,YAMUqgD,GAAAngD,KAAAmgD,QACP,iDAzCQ41C,GAAsB90F,8BAAAC,mBAAA,gEAAtB60F,EAAsB3sF,UAAA,gFAAAktF,SAAA,EAAA3kC,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAtBrI,wBAAA,WAAAwC,EAAAuyF,WAAA/0F,CAAsB,aAAAwC,EAAAwyF,oJCE7B,MAAOM,EAOX,aACIC,GACF,OACEx2F,KAAKy2F,iBAAiBp3F,KAAMC,IAAOA,EAAEgS,OAAShS,EAAEiS,OAASjS,EAAE+Y,WAC1DrY,KAAK02F,kBAEV,CAEA,cACIC,GACF,OACG32F,KAAKy2F,iBAAiBp3F,KAAMC,IAAOA,EAAEgS,QACtCtR,KAAKy2F,iBAAiBp3F,KAAMC,GAAMA,EAAEiS,OAASjS,EAAE+Y,WAC9CrY,KAAK02F,kBAEV,CAEA52F,YAAoB8iE,GAAA5iE,KAAA4iE,QAnBpB5iE,KAAA02F,oBAAqB,CAmBmB,CAExC,SAAI/0F,GACF,MAAMA,EAAQ3B,KAAK4iE,MAAMO,cAAcE,cAAc,SACrD,OAAO1hE,GAASA,EAAMwvD,YAAcxvD,EAAMwvD,YAAY3hC,OAAS,YACjE,CAEA,qBAAIonE,GACF,OAAO52F,KAAKy2F,iBAAiBp3F,KAAMC,GAAMA,EAAEiS,OAASjS,EAAE+Y,QACxD,iDAjCWk+E,GAAoBt1F,4CAAA,4DAApBs1F,EAAoBntF,UAAA,sBAAA4K,eAAA,SAAA1K,EAAA7F,EAAAwQ,MAAA,EAAA3K,gCACdutF,kBAAe,2IADrB51F,wBAAA,YAAAwC,EAAA+yF,UAAAv1F,CAAoB,cAAAwC,EAAAkzF,8HCF3B,MAAOG,EAJbh3F,cAQEE,KAAA+2F,YAAc,IAAIjtF,eAGlBiqB,WACE/zB,KAAKg3F,sBAAsBh3F,KAAKy4D,WAC5Bz4D,KAAKy4D,UAAUnnD,OACjBtR,KAAK+2F,YAAY7sF,KAAKlK,KAAKy4D,UAAUn4D,MAEzC,CAEA02F,sBAAsBpjF,GAChBA,aAAmB08C,mBACrBr+C,OAAOC,KAAK0B,EAAQxC,UAAUpK,QAASub,GACrCviB,KAAKg3F,sBAAsBpjF,EAAQxC,SAASmR,KAErC3O,aAAmBqjF,mBAC5BrjF,EAAQxC,SAASpK,QAAS1H,GAAMU,KAAKg3F,sBAAsB13F,IAClDsU,aAAmBR,sBAAsBQ,EAAQgkB,UAC1DhkB,EAAQqQ,cACRrQ,EAAQsjF,gBACRtjF,EAAQiO,yBAEZ,iDA1BWi1E,EAAyB,4DAAzBA,EAAyB1tF,UAAA,sBAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAzBrI,uBAAA,2BAAAwC,EAAAswB,UAAU,2HClCjB,MAAOojE,EAGXr3F,YAAoBwkE,EAAgC8yB,GAAhCp3F,KAAAskE,aAAgCtkE,KAAAo3F,UAAsB,CAE1ErwF,kBACE,IAAK/G,KAAK2B,OAAS3B,KAAKq3F,SAAU,OAClC,MAAMC,EAAet3F,KAAKskE,WAAWnB,cAAcE,cAAc,eAE7Di0B,GACFt3F,KAAKo3F,SAASG,YAAYD,EAAc,cAAe,GAAGt3F,KAAK2B,mBAEnE,iDAZWw1F,GAAsBl2F,uFAAA,4DAAtBk2F,EAAsB/tF,UAAA,4BAAA+C,OAAA,CAAAxK,MAAA,8BAAA01F,SAAA,iECA7B,MAAOG,EAMX13F,YAAoBwkE,EAAgC8yB,GAAhCp3F,KAAAskE,aAAgCtkE,KAAAo3F,UAAsB,CAE1E3oF,WACEzO,KAAKo3F,SAASK,aAAaz3F,KAAKskE,WAAWnB,cAAe,WAAY,MACtEnjE,KAAK03F,SAAW13F,KAAKo3F,SAASO,cAAc,KAC5C33F,KAAKo3F,SAASQ,SAAS53F,KAAK03F,SAAU,MACtC13F,KAAKo3F,SAASS,YAAY73F,KAAKskE,WAAWnB,cAAenjE,KAAK03F,UAC9D13F,KAAK+H,QACP,CAEQ+vF,kBACN,OAAO10C,SAAS6N,eAAejxD,KAAK+3F,iBACtC,CAEQhwF,SACN,MAAMiwF,EAAeh4F,KAAK83F,kBACtBE,GAAsC,SAAtBA,EAAa7xF,MAC/BnG,KAAKo3F,SAASa,YAAYj4F,KAAK03F,SAAU,UACzC13F,KAAKo3F,SAASQ,SAAS53F,KAAK03F,SAAU,kBAEtC13F,KAAKo3F,SAASa,YAAYj4F,KAAK03F,SAAU,gBACzC13F,KAAKo3F,SAASQ,SAAS53F,KAAK03F,SAAU,UAE1C,CAGAtmC,UACE,MAAM4mC,EAAeh4F,KAAK83F,kBAE1BE,EAAa7xF,KAA6B,aAAtB6xF,EAAa7xF,KAAsB,OAAS,WAEhEnG,KAAK+H,QACP,iDAtCWyvF,GAAuBv2F,uFAAA,4DAAvBu2F,EAAuBpuF,UAAA,6BAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAvBrI,uBAAA,0BAAAwC,EAAA2tD,SAAS,sGCAhB,MAAO8mC,EAGXp4F,YAAoBwkE,EAAgC8yB,GAAhCp3F,KAAAskE,aAAgCtkE,KAAAo3F,UAAsB,CAE1ErwF,kBACE,IAAK/G,KAAK2B,OAAS3B,KAAKq3F,SAAU,OAClC,MAAMC,EAAet3F,KAAKskE,WAAWnB,cAAcE,cAAc,eAE7Di0B,GACFt3F,KAAKo3F,SAASG,YAAYD,EAAc,cAAe,GAAGt3F,KAAK2B,mBAEnE,iDAZWu2F,GAAsBj3F,uFAAA,4DAAtBi3F,EAAsB9uF,UAAA,4BAAA+C,OAAA,CAAAxK,MAAA,8BAAA01F,SAAA,4ECE7B,MAAOc,EAQXr4F,YAAwCs4F,GAAAp4F,KAAAo4F,MAJxCp4F,KAAAq4F,qBAAuB,GAEfr4F,KAAA+mF,aAAernD,OAAOqnD,YAEwB,CAEtDt4E,WAEE,MAAM6pF,EACJt4F,KAAKq4F,sBAAwBr4F,KAAK+mF,aAAawD,QAAQ,UAAUvqF,KAAKu4F,iBACpED,GACFt4F,KAAKo4F,IAAII,OAAOF,EAEpB,CAGAG,YAAY5lC,GAEN7yD,KAAKu4F,eAAiB1lC,EAAM6lC,QAC9B14F,KAAK+mF,aAAa6D,QAAQ,UAAU5qF,KAAKu4F,gBAAiB1lC,EAAM6lC,OAEpE,iDAzBWP,GAAoBl3F,8BAAAC,SAAA,+DAApBi3F,EAAoB/uF,UAAA,0BAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAApBrI,uBAAA,qBAAA2J,GAAA,OAAAnH,EAAAg1F,YAAA7tF,EAAmB,2KCC1B,MAAO+tF,EACX74F,YAAoB84F,GAAA54F,KAAA44F,WAAuB,CAG3C5D,QAAQ10F,GACNN,KAAK2f,SAASrf,EAChB,CAEAqf,SAASrf,GACPA,EAAQ6R,aAAW7R,GAASA,EAAMkvB,OAASlvB,EAC3CN,KAAK44F,UAAUhlF,QAAQ+L,SAASrf,EAClC,iDAXWq4F,GAAa13F,8BAAAC,aAAA,4DAAby3F,EAAavvF,UAAA,mBAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAbrI,uBAAA,iBAAA2J,GAAA,OAAAnH,EAAAuxF,QAAApqF,EAAAvD,OAAA/G,MACD,yBCTL,IAAKwuF,8BAAe,KACzBC,IAAA,MACAD,EAAAQ,KAAA,uBCFK,IAAKlmE,8BAAY,KACtBqxD,KAAA,OACArxD,EAAAqiE,UAAA,YACAriE,EAAAwiE,UAAA,YACAxiE,EAAAgJ,UAAA,YACAhJ,EAAAX,WAAA,aAWAW,EAAAC,UAAA,YACAD,EAAAuxD,YAAA,cAeAvxD,EAAA4iE,MAAA,QASA5iE,EAAAlsB,IAAA,MAWAksB,EAAA+iE,SAAA,WAKA/iE,EAAAijE,QAAA,UAKAjjE,EAAA7Q,KAAA,OAYA6Q,EAAAxkB,QAAA,UAOAwkB,EAAA2nB,KAAA,wBCjFK,IAAK8nD,IAWAC,EAKAC,EAQAC,EAuBAC,EAMAC,kEArDAL,QAAsB,KAChCM,aAAA,gCACAN,EAAAO,UAAA,8BACAP,EAAAQ,SAAA,8BACAR,EAAAS,YAAA,+CACAT,EAAAU,aAAA,gDACAV,EAAAW,qBAAA,oCACAX,EAAAY,sBAAA,oCACAZ,EAAAa,cAAA,yCAGF,SAAYZ,GACVA,EAAAa,aAAA,0BACAb,EAAAc,SAAA,qBACF,CAHA,CAAYd,MAAmB,KAK/B,SAAYC,GACVA,EAAAc,uBAAA,8BACAd,EAAAe,gBAAA,qGACAf,EAAAgB,gBAAA,qGACAhB,EAAAiB,cAAA,2CACAjB,EAAAkB,cAAA,0CACF,CANA,CAAYlB,MAAU,KAQtB,SAAYC,GACVA,EAAAkB,aAAA,kDACAlB,EAAAmB,cAAA,yCACAnB,EAAAoB,gBAAA,4CACApB,EAAAqB,qBAAA,4CACArB,EAAAsB,mBAAA,4CACAtB,EAAAuB,wBAAA,6CACAvB,EAAAwB,oBAAA,2DACAxB,EAAAyB,cAAA,qBACAzB,EAAA0B,aAAA,oBACA1B,EAAA2B,eAAA,2BACA3B,EAAA4B,cAAA,gCACA5B,EAAA6B,MAAA,uDACA7B,EAAA8B,KAAA,sDACA9B,EAAA+B,sBAAA,sEACA/B,EAAAgC,qBAAA,qEACAhC,EAAAiC,OAAA,8BACAjC,EAAAkC,MAAA,6FACAlC,EAAAmC,YAAA,sDACAnC,EAAAoC,eAAA,gEACApC,EAAAqC,mBAAA,IACF,CArBA,CAAYrC,MAAmB,KAuB/B,SAAYC,GACVA,EAAAqC,6BAAA,yCACArC,EAAAsC,yBAAA,kGACAtC,EAAAuC,+BAAA,6GACF,CAJA,CAAYvC,MAAwC,KAMpD,SAAYC,GACVA,EAAAuC,0BAAA,yHACAvC,EAAAwC,sBAAA,mIACAxC,EAAAyC,4BAAA,gJACF,CAJA,CAAYzC,MAAqC,sBCrD1C,IAAKluE,8BAAc,KACxBkpC,OAAA,SACAlpC,EAAAC,KAAA,wBCFK,IAAK2wE,IAMAC,4BANAD,QAAU,KACpBE,WAAA,2BACAF,EAAAG,YAAA,6BACAH,EAAAI,UAAA,qBAGF,SAAYH,GACVA,EAAAI,SAAA,SACAJ,EAAAnhE,QAAA,UACAmhE,EAAAv6E,KAAA,MACF,CAJA,CAAYu6E,MAAU,sBCNf,IAAK7pF,IAuGAorD,8BAvGAprD,QAAK,KAEfwW,IAAA,MACAxW,EAAAkqF,UAAA,cACAlqF,EAAAmqF,YAAA,gBACAnqF,EAAA6W,KAAA,OACA7W,EAAA+W,QAAA,QACA/W,EAAAoqF,SAAA,qBACApqF,EAAA++B,KAAA,OACA/+B,EAAAy/C,UAAA,aACAz/C,EAAAg/B,QAAA,SACAh/B,EAAAqqF,MAAA,YACArqF,EAAAsqF,KAAA,SACAtqF,EAAAuqF,OAAA,WACAvqF,EAAA2d,MAAA,cACA3d,EAAA2nD,KAAA,aACA3nD,EAAAoqE,OAAA,SACApqE,EAAAjX,MAAA,aACAiX,EAAAs1B,KAAA,aACAt1B,EAAAwqF,QAAA,oBACAxqF,EAAAyqF,UAAA,WACAzqF,EAAA0qF,KAAA,aACA1qF,EAAAwqC,SAAA,SACAxqC,EAAAm3C,GAAA,YACAn3C,EAAArW,KAAA,cACAqW,EAAApW,MAAA,eACAoW,EAAAq3C,KAAA,cACAr3C,EAAA2qF,MAAA,eACA3qF,EAAAvV,OAAA,WACAuV,EAAA6gB,KAAA,OACA7gB,EAAA2R,MAAA,iBACA3R,EAAA4qF,MAAA,QACA5qF,EAAAuQ,IAAA,WACAvQ,EAAA0oB,QAAA,uBACA1oB,EAAAsP,KAAA,cACAtP,EAAA4nD,WAAA,sBACA5nD,EAAA6qF,eAAA,OACA7qF,EAAA8qF,OAAA,kBACA9qF,EAAAigB,QAAA,oBACAjgB,EAAAmtB,MAAA,YACAntB,EAAA6Y,KAAA,OACA7Y,EAAA+qF,UAAA,kBACA/qF,EAAAgrF,SAAA,iBACAhrF,EAAAirF,MAAA,cACAjrF,EAAAkrF,UAAA,oBACAlrF,EAAAmrF,gBAAA,kBACAnrF,EAAAsY,MAAA,cACAtY,EAAAy2C,QAAA,gBACAz2C,EAAAwzB,QAAA,QACAxzB,EAAAorF,SAAA,iBACAprF,EAAAqrF,KAAA,cACArrF,EAAAsrF,OAAA,eACAtrF,EAAAqS,OAAA,SACArS,EAAAurF,UAAA,YACAvrF,EAAAwrF,QAAA,iBACAxrF,EAAAyrF,OAAA,WACAzrF,EAAA0rF,KAAA,eACA1rF,EAAA2rF,KAAA,oBACA3rF,EAAA4rF,UAAA,cACA5rF,EAAA6rF,WAAA,eACA7rF,EAAA2mE,UAAA,cACA3mE,EAAA8rF,KAAA,aACA9rF,EAAA+rF,aAAA,gBACA/rF,EAAAgsF,SAAA,WACAhsF,EAAAisF,OAAA,eACAjsF,EAAAksF,KAAA,OACAlsF,EAAAoxC,SAAA,WACApxC,EAAAmsF,OAAA,QACAnsF,EAAAosF,MAAA,gBACApsF,EAAAqsF,KAAA,iBACArsF,EAAAssF,QAAA,gBACAtsF,EAAAiuC,OAAA,OACAjuC,EAAA4vC,MAAA,cACA5vC,EAAAusF,QAAA,gBACAvsF,EAAAwsF,SAAA,iBACAxsF,EAAAysF,KAAA,aACAzsF,EAAA0sF,QAAA,gBACA1sF,EAAA2sF,UAAA,mBACA3sF,EAAA4sF,IAAA,YACA5sF,EAAAkgD,SAAA,iBACAlgD,EAAA6sF,YAAA,sBACA7sF,EAAA8sF,UAAA,eACA9sF,EAAA+sF,OAAA,SACA/sF,EAAAgtF,YAAA,eACAhtF,EAAAysE,UAAA,aACAzsE,EAAAitF,KAAA,OACAjtF,EAAAktF,iBAAA,sBAEAltF,EAAA6qD,OAAA,KACA7qD,EAAAs7C,OAAA,KACAt7C,EAAAmtF,OAAA,KACAntF,EAAAotF,OAAA,KACAptF,EAAA6nD,MAAA,WACA7nD,EAAAqtF,QAAA,WACArtF,EAAAstF,QAAA,WACAttF,EAAAutF,MAAA,cACAvtF,EAAAwtF,QAAA,iBACAxtF,EAAAytF,QAAA,iBACAztF,EAAA0tF,MAAA,cACA1tF,EAAA02C,KAAA,aACA12C,EAAA2tF,QAAA,gBAGF,SAAYviC,GACVA,EAAAP,OAAA,KACAO,EAAA9P,OAAA,KACA8P,EAAA+hC,OAAA,KACA/hC,EAAAgiC,OAAA,IACF,CALA,CAAYhiC,MAAQ,sBCvGb,IAAKprC,8BAAgB,KAC1BA,EAAAzQ,MAAA,WACAyQ,IAAA1Q,KAAA,UACA0Q,IAAAC,QAAA,8BCHK,IAAKxH,8BAAe,KACzBA,EAAAu5B,QAAA,aACAv5B,IAAA25B,WAAA,gBACA35B,IAAA05B,UAAA,eACA15B,IAAAC,eAAA,2FCOI,MAAOk1E,UAAsBC,qBACjC1oE,MACEmhC,EACAwnC,EAAuC,MAEvC,MAAMrtF,EAAOpE,MAAM8oB,MAAMmhC,EAAgBwnC,GACzC,OAAO,IAAI3sF,IAAYV,EAAKrB,SAAUqB,EAAK6mD,UAAW7mD,EAAKstF,eAC7D,qGAPWH,KAAavqB,GAAbuqB,EAAa,mEAAbA,EAAaz+F,QAAby+F,EAAax+F,UAAAC,WAFZ,QAAM,oDCGd,MAAO8R,UAAoBm9C,mBAC/BxwD,YACSsR,EACP4uF,EACAD,GAEA1xF,MAAM+C,EAAU4uF,EAAiBD,GAJ1B//F,KAAAoR,UAKT,CAKAsB,IAAIutF,GACF,MAAMrsF,EAAU5T,KAAKkgG,KAAKD,GAC1B,IAAKrsF,EACH,MAAM,IAAIuP,MAAM,YAAY88E,0BAE9B,OAAOrsF,CACT,CAEAssF,KAAKD,GACH,OACE5xF,MAAMqE,IAAIutF,IACVhuF,OAAOpJ,OAAO7I,KAAKoR,UAChBiT,OAAQ/kB,GAAMA,EAAEoT,KAChBxV,IAAKuV,GACAA,aAAgBU,EACXV,EAAKytF,KAAKD,GAEZxtF,EAAKC,IAAIutF,IAEjBptF,KAAMvT,KAAcA,EAE3B,CAKAqR,SAASsvF,GACP,OAAOjgG,KAAK0S,IAAIutF,GAAa3/F,KAC/B,CAQA6/F,UAAUF,EAAqB3/F,GAC7BN,KAAK0S,IAAIutF,GAAatgF,SAASrf,EAAO,CAAE8/F,WAAW,GACrD,CAKA/vF,UAAU4vF,EAAqBxtF,EAAc4tF,GAC3C,MAAMzsF,EAAU5T,KAAK0S,IAAIutF,GACzB,OACGxtF,GAAM6tF,WAAa1sF,EAAQrC,SAC3B8uF,EAAYzsF,EAAQwE,SAASioF,GAAazsF,EAAQ+B,QAEvD,iDCvEU4/E,uBAAa,KACvBA,EAAAC,QAAA,aACAD,IAAAK,MAAA,WACAL,IAAApyE,MAAA,WACAoyE,IAAAgL,KAAA,UAGI,MAAOhjF,UAAeyyC,YAC1BlwD,cACEuO,QAGFrO,KAAAqmB,QAAUkvE,EAAcC,OAFxB,CAIAgL,eACExgG,KAAKqmB,QAAUkvE,EAAcC,OAC/B,CAEAh1E,eACExgB,KAAKqmB,QAAUkvE,EAAcK,KAC/B,CAEA6K,eACEzgG,KAAKqmB,QAAUkvE,EAAcpyE,KAC/B,CAEAu9E,cACE1gG,KAAKqmB,QAAUkvE,EAAcgL,IAC/B,iJCbI,SAAUI,EAAkBrgG,GAChC,OAAgB,MAATA,GAAkC,IAAjBA,EAAMlF,MAChC,CAMM,MAAO0mB,EAKX,YAAOsU,CAAMxiB,GAEX,OAAI+sF,EAAkB/sF,EAAQtT,OACrB,KAEFgT,aAAW8iB,MAAMxiB,EAC1B,CAUA,SAAOvG,CAAGuzF,EAAkB,GAE1B,MAAMC,EACJ,yFACIC,EAAU,wCAEhB,OAAgB,IAAZF,EACKttF,aAAWE,QAAQqtF,GACL,IAAZD,EACFttF,aAAWE,QAAQstF,GAEnBxtF,aAAWE,QAAQ,IAAI7Y,OAAOkmG,EAAQ3vC,OAAS,IAAM4vC,EAAQ5vC,QAExE,CAOA,aAAO6vC,CAAOC,GAA0B,GACtC,OAAIA,EACK1tF,aAAWE,QAAQ,eAEnBF,aAAWE,QAAQ,YAE9B,CAOA,oBAAOytF,CAAcD,GAA0B,GAC7C,OAAIA,EACK1tF,aAAWE,QAAQ,yBAEnBF,aAAWE,QAAQ,sBAE9B,CAOA,cAAO0tF,GACL,OAAO5tF,aAAWE,QAChB,4GAEJ,CAOA,iBAAO2tF,GACL,OAAO7tF,aAAWE,QAChB,oHAEJ,CAOA,cAAO4tF,GACL,OAAO9tF,aAAWE,QAAQ,6CAC5B,CAuCA,iBAAOyO,CAAWo/E,EAAuBjO,GACvC,IAAIkO,GAAY,EAEhB,OAAQ1tF,KACD0tF,GAAa1tF,EAAQusC,SACxBluC,OAAOC,KAAKmvF,GAAer6F,QAASub,IAClC3O,EAAQusC,OAAOztC,IAAI6P,GAAKo2C,aAAahqD,UAAU,KAC7CiF,EAAQiO,uBAAuB,CAAEu+E,WAAW,GAAO,EACpD,GAGHkB,GAAY,GAKXrvF,OAAOC,KAAKmvF,GAAe5nE,MAAOlX,IACjC,IAAK3O,EAAQusC,OACX,OAAO,EAET,MAAM7/C,EAAQsT,EAAQusC,OAAOztC,IAAI6P,GAAKjiB,MAChCihG,EAAeF,EAAc9+E,GACnC,GAAIpQ,iBAAeovF,GAAe,CAChC,IAAI1lG,GAAS,EACb,OAAQ0lG,EAAaC,IACnB,IAAK,QACH3lG,EAASsW,YAAU7R,GACnB,MACF,IAAK,SACHzE,GAAUsW,YAAU7R,GACpB,MACF,IAAK,QACHzE,EAASyE,IAAUihG,EAAaE,KAChC,MACF,IAAK,SACH5lG,EAASyE,IAAUihG,EAAaE,KAChC,MACF,IAAK,YACCtvF,aAAW7R,KACbzE,EAASyE,EAAMlF,QAAUmmG,EAAaE,MAExC,MACF,IAAK,WACCtvF,aAAW7R,KACbzE,EAASyE,GAASihG,EAAaE,MAGrC,OAAO5lG,CACT,CACA,OAAOyE,IAAUihG,MAKLpvF,eAAaihF,GACzBA,EAAUpuE,KAAKouE,EAAWx/E,EAAQtT,OAClCqgG,EAAkB/sF,EAAQtT,QACb,CAAEiT,UAAU,GALpB,KAOb,CAoBA,gBAAO6gD,CAAUitC,EAAuBhuF,GACtC,IAAIiuF,GAAY,EAChB,OAAQ1tF,KACD0tF,GAAa1tF,EAAQusC,SACxBluC,OAAOC,KAAKmvF,GAAer6F,QAASub,IAClC3O,EAAQusC,OAAOztC,IAAI6P,GAAKo2C,aAAahqD,UAAU,KAC7CiF,EAAQiO,uBAAuB,CAAEu+E,WAAW,GAAO,EACpD,GAEHkB,GAAY,GAIXrvF,OAAOC,KAAKmvF,GAAe5nE,MAAOlX,GAC1B3O,EAAQusC,QAAUvsC,EAAQusC,OAAOztC,IAAI6P,GAAKjiB,QAAU+gG,EAAc9+E,IAKtEjP,aAAWouF,QAAQruF,EAAnBC,CAA+BM,GAF7B,KAIb,CASA,aAAOmO,CAAOR,EAAe6xE,GAC3B,OAAQx/E,IACN,MAAMtT,EAAQ8yF,EAAUpuE,KAAKhlB,KAAM4T,EAAQtT,OAC3C,OAAIA,EACK,CAAE/E,CAACgmB,GAAQjhB,GAEb,KAEX,CAaA,iBAAOqhG,CACLptB,EACA6e,EACAwO,EACAC,EAAqC,GACrCC,EAAmC,IAEnCF,EAAwBA,EAAsBh5F,OAAOi5F,GAErDttB,EAAY5yD,cAAe/N,GAGXw/E,EAAUpuE,KAAKhlB,MAEpBsT,aAAWouF,QAAQE,EAAnBtuF,CAA0CM,GAE/CiuF,EAAoBzmG,OAAS,EACxBkY,aAAWouF,QAAQG,EAAnBvuF,CAAwCM,GAE1C,MAGTkuF,EAAc96F,QAAS4M,IACrBA,EAAQ+kD,aAAahqD,UAAU,KAC7B4lE,EAAY1yD,uBAAuB,CAAEu+E,WAAW,GAAO,EACxD,EAEL,CAWA,YAAO5kG,CAAMumG,EAAeC,GAC1B,OAAQpuF,IACN,MAAMquF,EAAQruF,EAAQlB,IAAIqvF,GACpBG,EAAQtuF,EAAQlB,IAAIsvF,GAC1B,IAAKC,IAAUC,EACb,OAAO,KAET,GAAID,EAAM3hG,QAAU4hG,EAAM5hG,MACxB4hG,EAAM38E,UAAU,CAAE/pB,OAAO,SAAM,GAEd0mG,EAAM9pF,SAAS,SAClB,CAIZ,MAAMgvB,EAAS86D,EAAM96D,OACrBj1B,UAAQi1B,EAAQ,SAChB86D,EAAM38E,UAAUpT,YAAUA,SAAOi1B,IAAW,KAAOA,EACrD,CAEF,OAAO,KAEX,CAqBA,aAAO7V,CACL4wE,EACAC,EAAqB,KACrBC,EACAC,GAAW,KACRC,GAEH,IAAIC,EACJ,OAAQ5uF,GAGFA,EAAQgS,UAAY+6E,EAAkB/sF,EAAQtT,QAAK,EAC9C2rB,MAAa,OAEtBu2E,EAAQ5uF,EAAQtT,MACZ6R,eAAakwF,IAAgC,OAAjBA,KAA0C,KAAjBA,MAErDG,EADEF,EACM,GAAG1uF,EAAQtT,SAAS+hG,MAEpB,GAAGA,OAAgBzuF,EAAQtT,UAAK,EAIrCmiG,SA9WY,KA8WezzF,QAChC0zF,eAAYP,EAAUn9E,KAAKo9E,EAAeI,KAAUD,KAAU,EAC9DrlG,OAAKysB,GACEA,EAGI,CAAEg5E,WAAW,GAFb,OAIV,EACD5pD,QAAK,IAGX,CAQA,WAAO6pD,CAAKrvF,GAAW,GACrB,MAAMsvF,EAAS,6EACf,OAAQjvF,GACFA,EAAQgS,UAAYhS,EAAQkvF,YAEpBvvF,IAAaK,EAAQtT,OAEtBuiG,EAAO3kG,KAAK0V,EAAQtT,OAHtB,KAMF,CAAEyiG,YAAa,2BAE1B,CAQA,gBAAOC,CAAUC,GACf,OAAQrvF,IACN,MAAMsvF,EAAmB,IAAIC,IACvBC,GAAe,IAAID,KAAmB9pC,QAAQzlD,EAAQtT,OAC5D,GAAI2iG,GAASG,EACX,OAAO,KAET,MAAM9iG,EAAQ,IAAI+iG,IAAkBH,GAAkB36F,UAAU06F,GAChE,MAAO,CACLD,UAAWA,IAAMx5F,oCAAoClJ,aAG3D,CAQA,gBAAOgjG,CAAUL,GACf,OAAQrvF,IACN,MAAMsvF,EAAmB,IAAIC,IACvBC,EAAeF,EAAiB7pC,QAAQzlD,EAAQtT,OACtD,GAAI2iG,GAASG,EACX,OAAO,KAET,MAAM9iG,EAAQ,IAAI+iG,IAAkBH,GAAkB36F,UAAU06F,GAChE,MAAO,CACLK,UAAWA,IAAM95F,mCAAmClJ,aAG1D,CAeA,qBAAO+2B,CACLksE,EACAlB,EACAv5F,GAEA,OAAQ8K,IACN,GAAIA,EAAQgS,UAA8B,KAAlBhS,EAAQtT,MAC9B,OAAI6R,eAAarJ,IACfA,GAAS,EAAM,IAAC,EAEXmjB,MAAa,MAEtB,IAAI4J,EACJ,OAAI1jB,eAAakwF,KACfxsE,EAAWwsE,MAAU,EAEhBI,SArdY,KAqdezzF,QAChC0zF,eAAYvwF,WAASoxF,EAAiB,mBAAoB3vF,EAAQtT,MAAOu1B,KAAS,EAClF34B,OAAKysB,IACCxX,eAAarJ,IACfA,EAAS6gB,EAAKrY,MAAOqY,EAAK4N,QAAS5N,EAAK6N,WAEtC7N,EAAKrY,MACA,KAEA,CAAE+lB,gBAAgB,MAE5B,EACD0hB,QAAK,GAAE,CAGb,CAeA,iBAAOr0B,GACL,OAAQ9Q,IACN,GAAIA,EAAQgS,WAAahS,EAAQtT,MAC/B,SAAO2rB,MAAa,CAAE1Y,UAAU,IAElC,MAAMiwF,EAAc,GACpB,IAAInD,EAoDJ,OAlDAmD,EAAYtnG,KAAK,KACf,MAEM9B,EAAOwZ,EAAQtT,MACrB,IAAImjG,GAAQ,EACZ,OAJgB,yFAIJvlG,KAAK9D,IAHD,wCAGkB8D,KAAK9D,MACrCimG,EAAY,YACZoD,GAAQ,GAEHA,IAGTD,EAAYtnG,KAAM9B,GACX+X,YAAU/X,EAAKgB,OAAQ,EAAG,MAK1B,gBAAgB8C,KAAK0V,EAAQtT,SAChC+/F,EAAY,qBACL,IANPA,EAAY,mBACL,IAeXmD,EAAYtnG,KAAM9B,IAChB,MAAMsG,EAASyR,UAAQ/X,EAAM,KAC7B,OAAO+X,UAAQzR,EAASiB,GAElBA,IAAUwQ,YAAUxQ,IAAUA,EAAMO,SAAS,MAC/Cm+F,EAAY,qBACL,GAGJ,eAAeniG,KAAKyD,GAKlBwQ,UAAQ,CAAC,EAAGxQ,EAAMvG,OAAS,GAAK8L,IACrCm5F,EAAY,oBACL,QAAQniG,KAAKyD,EAAMuF,KAAWiL,cAAYA,aAAWxQ,EAAMuF,QANlEm5F,EAAY,2BACL,GAOV,GAEEluF,UAAQqxF,EAAcE,GAAmBA,EAAK9vF,EAAQtT,SAAM,EAqB1D2rB,MAAa,OAAI,EApBfA,YAEH,OAAQo0E,GACN,IAAK,0BACH,MAAO,CAAEsD,yBAAyB,GACpC,IAAK,kBACH,MAAO,CAAEC,iBAAiB,GAC5B,IAAK,YACH,MAAO,CAAEC,WAAW,GACtB,IAAK,oBACH,MAAO,CAAEC,mBAAmB,GAC9B,IAAK,oBACH,MAAO,CAAEC,mBAAmB,GAC9B,QACE,MAAO,CAAEC,mBAAmB,GAElC,EAhBK/3E,GAgBD,CAMZ,CAEA,sBAAOlI,CACL4B,EACAhI,GAEA,OAAQ/J,GACFA,EAAQgS,WAAahS,EAAQtT,SACxB2rB,MAAa,CAAE1Y,UAAU,KAAM,EAEjCkvF,SA9kBY,KA8kBezzF,QAChC0zF,eAAY/kF,EAAiBoS,OAAOnc,EAAQtT,SAAM,EAClDpD,OAAK+mG,GACHA,IAAoBt+E,EAA0B,KAAO,CAAEu+E,sBAAsB,IAIrF,CAEA,WAAOC,GACL,OAAQvwF,IACN,IAAKA,EAAQtT,MAAO,OAAO,KAC3B,IACE26C,YAAKy4B,MAAM9/D,EAAQtT,OACZ,IACT,OACE,MAAO,CAAE8jG,aAAa,EACxB,EAEJ,CAEA,UAAOC,GACL,OAAQzwF,GACDA,EAAQtT,QACE,IAAIgkG,WACAC,gBAAgB3wF,EAAQtT,MAAO,mBAC5B+iE,cAAc,eAE3B,CAAEmhC,YAAY,GALI,IAS/B,CAEA,gBAAOC,GACL,OAAQ7wF,IACN,IAAKA,EAAQtT,MAAO,OAAO,KAE3B,GAAIsT,EAAQtT,MAAMkvB,OAAOnQ,WAAW,KAIlC,OAHe,IAAIilF,WACAC,gBAAgB3wF,EAAQtT,MAAO,mBAC5B+iE,cAAc,eAE3B,CAAEmhC,YAAY,GAEhB,KAEP,IACEvpD,YAAKy4B,MAAM9/D,EAAQtT,OACZ,IACT,OACE,MAAO,CAAE8jG,aAAa,EACxB,EAGN,CAEA,uBAAOM,GACL,MAAMC,EAA+B,6DACrC,OAAQ/wF,IACN,IAAKA,EAAQtT,MACX,OAAO,KAGT,IAAKsT,EAAQtT,MAAM4B,SAAS,KAC1B,MAAO,CAAE0iG,gBAAgB,GAE3B,MAAOniF,EAASvV,GAAQ0G,EAAQtT,MAAM3D,MAAM,KACtCkoG,EAAcF,EAA6BzmG,KAAKukB,GAChDqiF,EAAW58F,OAAOgF,IAAS,GAAKhF,OAAOgF,IAAS,MACtD,MAAO,CAAE03F,iBAAkBC,GAAeC,GAAS,CAEvD,CAMA,UAAO9lF,CAAIpL,GACT,MAAMtT,EAAQsT,EAAQtT,MAEtB,OAAI6R,YAAU7R,GACL,MAGIA,EAAM4B,SAAS,KAAO5B,EAAM3D,MAAM,KAAO,CAAC2D,IAE9B+jB,OACtBrF,IACEs6C,UAAgBt6C,EAAK,CACpB+lF,kBAAkB,EAClBC,mBAAmB,EACnBC,aAAa,MACR3rC,SAAet6C,IAGP5jB,OAAS,EAAI,CAAE8pG,YAAY,GAAS,IACzD,8QCjsBEjkG,2BAAA,YAEMA,uBAAA,sBAAAA,0BAAAsL,GAAA,MAAA44F,GAAAlkG,4BAAAmkG,KAAA50E,GAAAvvB,4BAAA,OAAAA,wBAAYuvB,GAAAI,OAAAJ,GAAA2tD,MAAAgnB,GAAAE,UAAoC,GAEpDpkG,2BAAA,WACEA,sBAAA,mBAIFA,2BAEEA,2BADF,UACEA,CADuB,6BACDA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAA44F,GAAAlkG,4BAAAmkG,KAAA50E,GAAAvvB,4BAAA,OAAAA,wBAAqBuvB,GAAAI,OAAAJ,GAAA2tD,MAAAgnB,GAAAE,UAAoC,GAMnFpkG,8GAhBMA,uBAAA,YAAAuvB,EAAA/d,MAIWxR,sBAAA,GAGAA,uBAHA,OAAAuvB,EAAA/d,KAGAxR,CAHa,SAAAkkG,EAAAG,cAGbrkG,CAFqC,QAAAuvB,EAAA2tD,MAErCl9E,CADe,UAAAA,4BAAA,EAAAyI,EAAAy7F,EAAAI,WAKNtkG,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAA3c,QAEA5S,CAFgB,aAAAkkG,EAAA9/F,MAEhBpE,CADiC,YAAAuvB,EAAA/d,KAAAnB,iCAf3DrQ,2BAFF,UAEEA,CADiD,WACjDA,mBAAA,KACiDA,2BACjDA,uBAAA,EAAAukG,EAAA,eAkBFvkG,gDAnB2BA,sBAAA,GAAAA,sBAAAkkG,EAAA9/F,kCAClBpE,+CAAA,OAAAkkG,EAAAI,WCaL,MAAOE,EAWX3lG,YACUoyE,EACAE,EACAr0D,EACA4hB,GACAprB,IAJAvU,KAAAkyE,qBACAlyE,KAAAoyE,iBACApyE,KAAA+d,cACA/d,KAAA2/B,YACA3/B,KAAAuU,UAfVvU,KAAAm+E,MAAa,GAEbn+E,KAAA8kB,KAAwC,CAAE8Z,QAAS,GAAIxU,GAAI,IAC3DpqB,KAAAyS,KAAO,IAAI69C,mBAAiB,IAI5BtwD,KAAAuiB,IAAc,EASX,CAEH9T,WACEzO,KAAKoyE,eAAeszB,cAAc/2F,UAAWg3F,IAC3C3lG,KAAK4lG,cAAgB5lG,KAAKoyE,eAAe7vE,KAAKyM,QAC5CyP,YAAUlc,IACRvC,KAAKuc,SAAWha,EAAKga,UAAYvc,KAAKuc,SACtC,MAAMyC,GAAM,IAAMhf,KAAKoyE,eAAevyC,SAAS7gB,IAAIpiB,KAAK,KAClD2lB,GAAMojF,EAASjzF,IAAI,QAAU,GACnC,OAAO1S,KAAKkyE,mBAAmBz/D,KAAK,MAAMzS,KAAKuc,WAAYyC,GAAKuD,GAAG,IAGvEviB,KAAK4lG,cAAcj3F,UAAWpM,IAC5BvC,KAAK6lG,WAAatjG,EAAKsjG,WACvB7lG,KAAKm+E,MAAQ57E,EAAK47E,QAEpBn+E,KAAK8lG,YAAc9lG,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAKR,MAE9C,MAAM4pG,EAAa/lG,KAAK8lG,YAAY/pG,QAAQ,KACxCgqG,EAAa,IACf/lG,KAAK8lG,YAAc9lG,KAAK8lG,YAAYpjF,UAAU,EAAGqjF,GAAU,EAGjE,CAEMC,eAAeC,GAAU,SAAAtlF,KAAA,YAC7B,IAAIulF,EAAa,IAAIC,WACjBv1C,EAAe,GACnB,aAAM,IAAI1vC,QAASC,KACjB+kF,EAAWE,OAAUj0F,KACnBy+C,EAAOs1C,EAAWrqG,OAAOypB,WACzBnE,IAAQ,EAAI,EAEd+kF,EAAWG,WAAWJ,EAAI,GAErBr1C,CAAK,EAViB,EAW/B,CAEM01C,UAAU/jG,GAA6B,IAAAme,EAAA1gB,KAAA,SAAA2gB,KAAA,YAC3C,UAAY4B,EAAKjiB,MAAU2R,OAAOqQ,QAAQ/f,GACxC,GAAIjC,cAAiBimG,SAAU,CAC7B,IAAIN,GAAO3lG,GAAM,GACbswD,SAAalwC,EAAKslF,eAAeC,IACrC1jG,EAAKggB,GAAOquC,EACd,CACD,EAP0C,EAQ7C,CAEMhgC,OAAOruB,EAA+B8iG,GAAsB,IAAAmB,EAAAxmG,KAAA,SAAA2gB,KAAA,YAChE,GAAIpe,EAAM,CACR,IAAIkkG,GAAe,GACnBt0F,YAAUkzF,EAASqB,eAAiBnuC,KAClCkuC,GAAaluC,IAASh2D,EAAKg2D,GAAK,GAElCkuC,GAAaE,UAAetB,EAASzmE,cAC/B4nE,EAAKF,UAAU/jG,GACrBikG,EAAKzoF,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,kBAAkByhF,EAAKV,cAAeW,IAC7DzhF,KAAMwhF,EAAKt0B,mBAAmBthD,OAAO41E,EAAKjqF,SAAUha,EAAMikG,EAAKX,cAEhEl3F,UAAU,CACTyW,SAAUA,KACRohF,EAAK7mE,SAASmmB,MAAI,GAG1B,CAAC,EAlB+D,EAmBlE,iDApFW2/C,GAAiBxkG,8BAAAC,KAAAD,8BAAA8H,kBAAA9H,8BAAA+H,KAAA/H,8BAAAgI,YAAAhI,8BAAA8H,UAAA,4DAAjB08F,EAAiBr8F,UAAA,mBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDdD5C,qFAAA,uYAJ7BvI,2BAAA,WACEA,uBAAA,EAAA2lG,EAAA,2CAuBF3lG,kCAtBQA,+CAAA,OAAAA,wBAAA,IAAAwC,EAAAmiG,ujBEDN3kG,2BAAA,cAAAA,mBAAA,KAE8BA,qEAAjBA,8CAAA+K,EAAAwoE,MAAA7yE,4DACbV,2BAAA,OAAAA,mBAAA,KAC+BA,qEAAvBA,8CAAA+K,EAAAwoE,MAAAhjD,wGAYJvwB,2BAAA,eAEQA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAAuyF,EAAA5lG,4BAAAiG,MAAA8E,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAAyzB,OAAAonE,GAAS,GAExB5lG,sBAAA,UACFA,wEADKA,+CAAA,UAAA+K,EAAA+F,MAAAsqF,uEAdTp7F,2BAAA,YAEEA,sBAAA,qBAGEA,2BADF,WACEA,CADsB,eAGdA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA7E,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAA86F,aAAY,GAC3B7lG,sBAAA,UACFA,2BACAA,uBAAA,EAAA8lG,EAAA,iBAOJ9lG,uFAdgBA,+CAAA,QAAA+lG,GAKP/lG,sBAAA,GAAAA,uBAAA,UAAA+K,EAAA+F,MAAAyW,KAKIvnB,+CAAA,YAAA+lG,EAAAxyB,MAAAyyB,2EAOXhmG,2BAFF,WAEEA,CADsB,eAGdA,uBAAA,mBAAAA,0BAAA6T,GAAA,MAAA9I,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAA86F,aAAY,GAF7B7lG,wBAAA,KAIEA,sBAAA,UAEFA,wBACFA,yEAHOA,sBAAA,GAAAA,uBAAA,UAAA+K,EAAA+F,MAAAyW,KACHvnB,sBAAA+K,EAAAwoE,MAAA7yE,4DAIJV,2BAAA,aAGEA,sBAAA,kCACFA,qEAD6BA,+CAAA,QAAA+K,EAAAusD,QCzBzB,MAAOye,UAAiCkwB,iBAL9CpnG,kCAMEE,KAAA+R,MAAQC,KAERvD,WACEzO,KAAKmnG,0BACP,CAEAL,aACE9mG,KAAKwoB,MACLxoB,KAAKmnG,0BACP,CAEAA,4BACEngG,aAAQhH,KAAKu4D,MAAM6uC,WAAa7uC,IACZ,UAAdA,EAAMpyD,OACRoyD,EAAMic,MAAM6yB,gBAAkBrnG,KAAKw0E,MAAM6yB,gBAAgBC,wBAG/D,qGAlBWtwB,KAAwB3B,GAAxB2B,EAAwB,gEAAxBA,EAAwB5tE,UAAA,2BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDXtB5C,2EAAA,mCAELA,2EAAA,mCA0BJA,2EAAA,sCAAyB,4CACrB,ikBAhCVvI,2BAAA,WAoCEA,uBAnCA,EAAAsmG,EAAA,eAmCAtmG,CAjCa,EAAAumG,EAAA,UAiCbvmG,CA/BQ,EAAAwmG,EAAA,YA+BRxmG,CA5BoB,EAAAymG,EAAA,YA4BpBzmG,CAVwB,EAAA0mG,EAAA,cAe1B1mG,kCAxCWA,+CAAA,OAAAwC,EAAA+wE,MAAA7yE,OAGLV,+CAAA,OAAAwC,EAAA+wE,MAAAhjD,aAGmBvwB,+CAAA,UAAAwC,EAAA80D,MAAA6uC,YAkBjBnmG,+CAAA,WAAAwC,EAAA80D,MAAA6uC,WAAAhsG,QAaC6F,+CAAA,OAAAwC,EAAA4M,WAAA5M,EAAA8wE,YAAAntC,0OE9BH,MAAO8vC,UAAiC/C,gHAAjC+C,KAAwB7B,GAAxB6B,EAAwB,gEAAxBA,EAAwB9tE,UAAA,2BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,yEAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GCRrCrI,sBAAA,kBACOA,uBADA,cAAAwC,EAAA8wE,YACAtzE,CAD2B,mBAAAwC,EAAA80D,oNCChCt3D,2BAAA,cAAAA,mBAAA,KAE8BA,qEAAjBA,8CAAA+K,EAAAwoE,MAAA7yE,4DACbV,2BAAA,OAAAA,mBAAA,KAC+BA,qEAAvBA,8CAAA+K,EAAAwoE,MAAAhjD,kEACRvwB,2BAAA,WAGEA,sBAAA,kCACFA,qEAD6BA,+CAAA,QAAA+K,EAAAusD,gCAG3Bt3D,sBAAA,8CACcA,uBAAA,QAAA2mG,ICDZ,MAAO3wB,UAAkC9C,YAC7C,cAAI0zB,GACF,MAAMC,EAAa9nG,KAAKw0E,MAAM6yB,iBAAiBS,WACzCC,EAAqB,4DAC3B,MAAkB,OAAdD,EACKC,EAAqB,YAEvBA,EAAqB,cAC9B,qGARW9wB,KAAyB5B,GAAzB4B,EAAyB,gEAAzBA,EAAyB7tE,UAAA,4BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDTvB5C,2EAAA,mCAELA,2EAAA,uWALVvI,2BAAA,WAMEA,uBALA,EAAA+mG,EAAA,eAKA/mG,CAHa,EAAAgnG,EAAA,UAGbhnG,CADQ,EAAAinG,EAAA,aAMRjnG,2BAAA,WACEA,uBAAA,EAAAknG,EAAA,sBAIJlnG,oCAfWA,+CAAA,OAAAwC,EAAA+wE,MAAA7yE,OAGLV,+CAAA,OAAAwC,EAAA+wE,MAAAhjD,aAIEvwB,+CAAA,OAAAwC,EAAA4M,WAAA5M,EAAA8wE,YAAAntC,QAGDnmC,+CAAA,UAAAwC,EAAAokG,YACyB5mG,+CAAA,UAAAwC,EAAA80D,MAAA6uC,mKEV1B,SAAUgB,EAAyBx0F,GACvC,OAAO,IAAIsN,QAAQ,CAACC,EAASknF,KACvBz0F,EAAQtT,iBAAiBimG,WAC3B3yF,EAAQtT,MACGsT,EAAQtT,MAAM,GAChBjG,KAAO,MACd8mB,EAAQ,CAAEmnF,WAAW,IAEvBnnF,EAAQ,OAEVA,EAAQ,CAAEonF,YAAY,GAAM,EAEhC,CCZM,SAAUC,EAAyB50F,GACvC,OAAO,IAAIsN,QAAQ,CAACC,EAASknF,KAC3B,IACEptD,KAAKy4B,MAAM9/D,EAAQtT,OACnB6gB,EAAQ,KACV,OACEA,EAAQ,CAAEgjF,MAAM,GAClB,GAEJ,CCTM,SAAUsE,EAAkB70F,GAChC,OAAO,IAAIsN,QAAQ,CAACC,EAASknF,KACvBz0F,EAAQtT,MAAM9E,MAAM,uBACtB2lB,EAAQ,MAEVA,EAAQ,CAAEunF,aAAa,GAAM,EAEjC,CAEM,SAAUC,EAA2B/0F,GACzC,OAAO,IAAIsN,QAAQ,CAACC,EAASknF,KACvBz0F,EAAQtT,MAAM9E,MAAM,0BACtB2lB,EAAQ,MAEVA,EAAQ,CAAEynF,aAAa,GAAM,EAEjC,CAEM,SAAUC,EAA0Bj1F,GACxC,OAAO,IAAIsN,QAAQ,CAACC,EAASknF,KACvBz0F,EAAQtT,MAAM9E,MAAM,cAClBoY,EAAQtT,OAAS,IAAMsT,EAAQtT,OAAS,GAAG6gB,EAAQ,MAEzDA,EAAQ,CAAE2nF,wBAAwB,GAAM,EAE5C,CChBM,SAAU1zB,EAAc7c,EAA0BgtC,OAAkB3rE,GACxE,MAAMmvE,EAAmBxD,GAAYhtC,EAAMr1D,SAAS6lG,UACpD,OAAIA,EACKA,EAAUl2F,KAAMswC,GAAYA,EAAQ5gC,KAAOg2C,EAAMh2C,KAEnD,EACT,CAEM,SAAUymF,EAAgBzwC,EAA0BgtC,GACxD,MAAM0D,EAAa7zB,EAAc7c,EAAOgtC,GACxC,IAAIlyF,EAA4B,IAChCrM,aAAQiiG,EAAW51F,WAAa61F,IAC9B,OAAQA,GACN,IAAK,OACH71F,EAAWnX,KAAKssG,GAChB,MAEF,IAAK,cACHn1F,EAAWnX,KAAKysG,GAChB,MAEF,IAAK,cACHt1F,EAAWnX,KAAKusG,GAChB,MAEF,IAAK,OACHp1F,EAAWnX,KAAKksG,GAChB,MAEF,IAAK,yBACH/0F,EAAWnX,KAAK2sG,GAGpB,GAEFtwC,EAAMjnC,gBAAkB,CAAE63E,WAAY91F,EACxC,sEC1CM,MAAO+1F,EASXtpG,YACSqG,EAAyB6rB,IAAiB1Q,KAC1Cjc,EACAu5B,EACA17B,EACAmmG,EAAsB,QAJtBrpG,KAAAmG,OACAnG,KAAAqF,QACArF,KAAA4+B,UACA5+B,KAAAkD,UACAlD,KAAAqpG,cAZTrpG,KAAAspG,gBAAiB,EAETtpG,KAAA0sF,QAAU,CAChB6c,KAAM,YACNC,WAAY,mBAUZxpG,KAAKypG,iBAAmBzpG,KAAK0sF,QAAQ1sF,KAAKqpG,YAC5C,EAGI,MAAOK,UAAuBN,EAalCtpG,YAAoBijC,EAA+B,IAAIqmE,GACrD/6F,MAAM00B,EAAO58B,KAAM48B,EAAO19B,MAAO09B,EAAOnE,QAASmE,EAAO7/B,QAAS6/B,EAAOsmE,aADtDrpG,KAAA+iC,SAPpB/iC,KAAA2pG,eAAgB,EAGR3pG,KAAA4pG,YAAc,CAAC,cAAe,YAAa,gBAC3C5pG,KAAA6pG,YAAc,CAAC73F,KAAM0oB,QAAS1oB,KAAMsP,KAAMtP,KAAMmtB,OAChDn/B,KAAA8pG,cAAgB,CAAC,gBAAiB,cAAe,yBAIhD9pG,KAAK+iC,OAGZ/iC,KAAK+pG,eAAgB7tE,MAAO8tE,SAC5BhqG,KAAKiqG,UAAYjqG,KAAK6pG,YAAY7pG,KAAKmG,MACvCnG,KAAKkqG,UAAYlqG,KAAK4pG,YAAY5pG,KAAKmG,MACvCnG,KAAKmqG,YAAcnqG,KAAK8pG,cAAc9pG,KAAKmG,MAC3CnG,KAAKspG,eAAiBvmE,EAAOumE,cAC/B,qCChDI,MAAOvxE,EAKXj4B,YAAY8sC,GAJZ5sC,KAAAg1B,kBAAoB,EAKlBh1B,KAAKg1B,kBAAoB4X,EAASw9D,yBAClCpqG,KAAKqqG,sBAAwBz9D,EAAS09D,8BACtCtqG,KAAKuqG,sBAAwB39D,EAAS49D,6BACxC,oDCPI,MAAOC,EAAb3qG,cAKEE,KAAAmqF,OAAS,EAGTnqF,KAAA6lF,MAVwB,GAkBxB7lF,KAAA0qG,SAlBwB,EAmB1B,ECfM,MAAO3d,EAgBXjtF,YAAYyhB,GAfZvhB,KAAAgtF,YAAc,CACZE,WAAW,EACXD,cAAc,GAShBjtF,KAAAmtF,SAAqB,IAAIsd,EACzBzqG,KAAAo8E,OAAS,GACTp8E,KAAA6H,KAAO,QAGL7H,KAAKuhB,MAAQA,CACf,CAEAopF,WACE,OAAIziG,OAAOknC,MAAMpvC,KAAKmtF,SAAShD,UAC7BnqF,KAAKmtF,SAAShD,OAAS,GAGG,OAAxBnqF,KAAKmtF,SAAStH,QAChB7lF,KAAKmtF,SAAStH,MAAQ,GAGnB7lF,KAAKo8E,SACRp8E,KAAKo8E,OAAS,MAGXp8E,KAAK6H,MAAQ7H,KAAK6H,KAAKzM,OAAS,KACnC4E,KAAK6H,KAAO,SAGP,IAAI49B,aAAW,CACpBsQ,WAAY,CACVo0C,OAAQ5qF,OAAOS,KAAKmtF,SAAShD,OAASnqF,KAAKmtF,SAAStH,OACpDA,MAAOtmF,OAAOS,KAAKmtF,SAAStH,OAC5BzJ,OAAQp8E,KAAKo8E,OACbv0E,KAAM7H,KAAK6H,OAGjB,qCCjDI,MAAOyG,EAMXxO,YAAY40E,GALJ10E,KAAA4qG,UAAmB,GAMrBl2B,IACF10E,KAAK4qG,UAAYl2B,GAEnB10E,KAAK+H,QACP,CAMQA,SACN/H,KAAK+yE,aAAe/yE,KAAK4qG,UAAUxvG,OAAS,EAC5C4E,KAAK2oB,mBAA+C,IAA1B3oB,KAAK4qG,UAAUxvG,OACzC4E,KAAK6qG,kBAAoB7qG,KAAK4qG,UAAUxvG,OAAS,CACnD,CAEA,YAAIkkE,CAASrzD,GACXjM,KAAK4qG,UAAY3+F,EACjBjM,KAAK+H,QACP,CAEA,YAAIu3D,GACF,OAAOt/D,KAAK4qG,SACd,CAEApiF,IAAIimD,GACFzuE,KAAK4qG,UAAU1uG,KAAKuyE,GACpBzuE,KAAK+H,QACP,CAMAqgB,QACE,OAAOpoB,KAAK+yE,aAAe/yE,KAAK4qG,UAAU,GAAK,IACjD,qCCzCI,MAAOzoC,EAmBXriE,YACEgrG,EACA5oC,EACAI,EACAyoC,GAlBF/qG,KAAA0iE,aAAoC,CAClCv9D,qBAAiBy0B,EACjB71B,iBAAa61B,GAEf55B,KAAAgrG,aAAc,EAgBZhrG,KAAKirG,QAAUH,EAAY3nC,cAC3BnjE,KAAKsiE,aAAeA,EACpBtiE,KAAK+qG,YAAcA,EACnB/qG,KAAKkrG,UAAYhpC,EAAaiB,aAChC,CAQAR,eAAen9D,GACb,MAAMZ,EAAUY,EAAQZ,QAExB,GAAwB,IAApBA,EAAQumG,QAEV,YADAnrG,KAAKkrG,UAAUxpC,MAAMypC,QAAU,GAajC,GARAnrG,KAAKkrG,UAAUnhB,UAAUtqD,OAAO,QAAS,QAAS,gBAC9C76B,EAAQwmG,OACVprG,KAAKkrG,UAAUnhB,UAAUvhE,IAAI5jB,EAAQwmG,QAErCprG,KAAKkrG,UAAUnhB,UAAUvhE,IAAI,gBAI3B5jB,EAAQzJ,KAAM,CAChB,MAAMkwG,EAAazmG,EAAQS,OAAS,GAC9BimG,EAAY1mG,EAAQzJ,KAAK+B,IAAKquG,GAC3BA,EAASC,OAGlB,IAAIC,EAAY,UAEhBJ,EAAWrkG,QAAS3B,IAClBomG,GAAa,WAAazrG,KAAK0rG,SAASrmG,GAAS,eAEnDomG,GAAa,kBAEbH,EAAUtkG,QAAQ,CAAC7L,EAAcc,KAC/B,MAAM0vG,EAAS/mG,EAAQgnG,YAAY3vG,GACnC,IAAIylE,EAAQ,eAAiB1hE,KAAK0iE,aAAav9D,iBAAmBwmG,EAAOxmG,iBACzEu8D,GAAS,mBAAqB1hE,KAAK0iE,aAAa3+D,aAAe4nG,EAAO5nG,aACtE29D,GAAS,sBAET+pC,GAAa,mBADA,4CAA8C/pC,EAAQ,aAC3B1hE,KAAK6rG,QAAQ1wG,GAAQ,eAE/DswG,GAAa,WAEKzrG,KAAKkrG,UAAU7nC,cAAc,SACrCyoC,UAAYL,CACxB,CAEA,MAAMM,EAAY/rG,KAAKirG,QAAQe,UACzBzpC,EAAYviE,KAAKirG,QAAQgB,WAG/B,GAAIjsG,KAAKgrG,YAAa,CACpB,MAAMkB,EAAYtnG,EAAQ5K,MAAQ,EAClCgG,KAAKkrG,UAAUnhB,UAAUtqD,OAAO,kBAChCz/B,KAAKkrG,UAAUnhB,UAAUtqD,OAAO,mBAC5B76B,EAAQ49D,OAAS0pC,EAAY,EAC/BlsG,KAAKkrG,UAAUnhB,UAAUvhE,IAAI,kBACpB5jB,EAAQ49D,OAAS0pC,EAAYlsG,KAAKirG,QAAQjxG,OACnDgG,KAAKkrG,UAAUnhB,UAAUvhE,IAAI,kBAEjC,CAEAxoB,KAAKkrG,UAAUxpC,MAAM/lE,KAAOqE,KAAKsiE,aAAa19D,EAAS29D,GACvDviE,KAAKkrG,UAAUxpC,MAAM/9D,IAAM3D,KAAK+qG,YAAYnmG,EAASmnG,GAErD/rG,KAAKkrG,UAAUxpC,MAAMypC,QAAU,EAC/BnrG,KAAKkrG,UAAUxpC,MAAMyqC,WAAavnG,EAAQwnG,YAC1CpsG,KAAKkrG,UAAUxpC,MAAM2qC,SAAWznG,EAAQynG,SACxCrsG,KAAKkrG,UAAUxpC,MAAM4qC,UAAY1nG,EAAQ2nG,WACzCvsG,KAAKkrG,UAAUxpC,MAAM8qC,QAAU,SACjC,CAEAX,QAAQ1wG,GACN,OAAOA,CACT,CAEAuwG,SAASrmG,GACP,OAAOA,CACT,mBClHK,IAAKonG,IAMAC,4BANAD,QAA2B,KACrCA,EAAAE,OAAA,YACAF,IAAA3tF,KAAA,UACA2tF,IAAA77D,MAAA,WAGF,SAAY87D,GACVA,IAAAE,IAAA,SACAF,IAAAG,KAAA,UACAH,IAAAI,aAAA,iBACF,CAJA,CAAYJ,MAAoB,qDCJ1B,MAAOK,UAAsBC,sDCC7B,MAAOjoF,UAAqBioF,wCCH5B,MAAOv6D,EACX,iBAAOw6D,CAAWv8D,GAChB,MAAMw8D,EAAiBx8D,EAAU/zC,MAAM,KAMvC,OAAO,IAAIqD,KAJMktG,EAAe,GACdA,EAAe9xG,QAAU,EAAI8xG,EAAe,GAAK,KACjDA,EAAe9xG,QAAU,EAAI8xG,EAAe,GAAKA,EAAe,GAGpF,CAEAptG,YAAmBmhC,EAAyBU,EAA0BwrE,GAAnDntG,KAAAihC,WAAyBjhC,KAAA2hC,YAA0B3hC,KAAAmtG,WAAoB,CAElFC,eACN,OAAOptG,KAAK2hC,UAAY,GAAG3hC,KAAK2hC,aAAe,EACjD,CAEArc,WACE,MAAO,GAAGtlB,KAAKihC,YAAYjhC,KAAKotG,iBAAiBptG,KAAKmtG,WACxD,CAEAx8D,kBACE,OAAO7E,mBAAmB,GAAG9rC,KAAKihC,YAAYjhC,KAAKotG,iBAAiBptG,KAAKmtG,YAC3E,oCCvBI,MAAOH,EACXltG,YAAY1F,EAAe6tB,GACzBjoB,KAAK5F,KAAOA,EACZ4F,KAAKioB,SAAWA,CAClB,wECMI,MAAOolF,EAQX9kG,UAAUjI,EAAY4kC,GAAQ,GAC5B,IAAIrpC,EAASyE,EACb,QAAK6R,YAAU7R,IAAW6R,YAAU7R,IAAU4kC,KAC5CrpC,EAAS,CAACyE,IAELzE,CACT,iDAdWwxG,EAAS,qEAATA,EAASC,MAAA,uDCLhB,MAAOC,EACXhlG,UACEjI,EACAktG,EAAqBhkG,eACrBikG,EAAoBjkG,eAEpB,OAAelJ,EAASktG,EAAaC,CACvC,iDAPWF,EAAe,2EAAfA,EAAeD,MAAA,sDCGtB,MAAOI,EACXnlG,UAAUjI,GACR,IAAIzE,GAAS,EACb,OAAQyE,GACN,KAAK,EACL,KAAK,EACL,IAAK,IACL,IAAK,MACL,IAAK,IACL,IAAK,OACL,IAAK,KACL,IAAK,IACHzE,GAAS,EAGb,OAAOA,CACT,iDAhBW6xG,EAAW,uEAAXA,EAAWJ,MAAA,+FCDlB,MAAOK,EACX7tG,cAAe,CAEfyI,UAAUjI,GACR,GAAc,OAAVA,GAA4B,KAAVA,EACpB,MAAO,GAET,IAAIgyD,EACJ,MAAM63B,EAAS9/E,MAASujG,YACxB,OAAIz7F,aAAW7R,GACbgyD,EAAOjoD,cACMA,SAAY/J,IACtButG,MACAD,UAAUzjB,GACV2jB,QACA51E,OAAO,mBAEV53B,EAAQA,GAAO8H,UAAU,IAAK,IAC9BkqD,EAAOjoD,cAAiB/J,GAAOutG,MAAMD,UAAUzjB,GAAQ2jB,QAAQ51E,OAAO,mBAEjEo6B,CACT,iDArBWq7C,EAAU,sEAAVA,EAAUL,MAAA,sDCFjB,MAAOS,EACXxlG,UAAUjI,GAGR,MAAMzE,EAAS,kDAAkDmyG,KAAK1tG,GACtE,OAAIzE,EACgB,QAAdA,EAAO,GAEF,OAGAA,EAAO,GAITyE,CAEX,iDAjBWytG,EAAmB,+EAAnBA,EAAmBT,MAAA,uDCA1B,MAAOW,EACX1lG,UAAUjI,GAER,MAAMzE,EAAS,kCAAkCmyG,KAAK1tG,GACtD,OAAIzE,EAEKA,EAAO,GAGPyE,CAEX,iDAXW2tG,EAAoB,gFAApBA,EAAoBX,MAAA,kECE3B,MAAOY,EACXpuG,YAAoBC,GAAAC,KAAAD,WAA8B,CAElDwI,UAAUjI,EAAYK,EAAmB,GACvC,OAAOX,KAAKD,UAAUyI,cACpBlI,EACA,KACA,CAAC,MAAO,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SACvEK,EAEJ,iDAVWutG,GAA0BjtG,8BAAAC,IAAA,0FAA1BgtG,EAA0BZ,MAAA,kECAjC,MAAOa,EACXruG,YAAoBC,GAAAC,KAAAD,WAA8B,CAElDwI,UAAUjI,EAAYK,EAAmB,GACvC,OAAOX,KAAKD,UAAUyI,cACpBlI,EACA,KACA,CAAC,MAAO,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SACvEK,EAEJ,iDAVWwtG,GAA0BltG,8BAAAC,IAAA,0FAA1BitG,EAA0Bb,MAAA,kECAjC,MAAOjK,EACXvjG,YAAoBC,GAAAC,KAAAD,WAA8B,CAElDwI,UAAUjI,EAAYK,EAAmB,GACvC,OAAOX,KAAKD,UAAUyI,cACpBlI,EACA,KACA,CAAC,IAAK,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvDK,EAEJ,iDAVW0iG,GAAiBpiG,8BAAAC,IAAA,iFAAjBmiG,EAAiBiK,MAAA,kECAxB,MAAOc,EACXtuG,YAAoBC,GAAAC,KAAAD,WAA8B,CAElDwI,UAAUjI,EAAYK,EAAmB,GACvC,OAAOX,KAAKD,UAAUyI,cACpBlI,EACA,IACA,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxCK,EAEJ,iDAVWytG,GAAWntG,8BAAAC,IAAA,2EAAXktG,EAAWd,MAAA,uDCDlB,MAAOe,EAQX9lG,UAAU+lG,GACR,GAAgB,OAAZA,GAAoBA,GAAW,EACjC,MAAO,GAET,MAAMC,EAAS,CACb,CAAC,GAAGnxG,KAAK2+B,MAAMuyE,EAAU,WAAa,SACtC,CAAC,GAAGlxG,KAAK2+B,MAAOuyE,EAAU,QAAY,SAAU,QAChD,CAAC,GAAGlxG,KAAK2+B,MAAOuyE,EAAU,MAAS,QAAS,SAC5C,CAAC,GAAGlxG,KAAK2+B,MAAOuyE,EAAU,KAAQ,MAAO,WACzC,CAAC,GAAGlxG,KAAK2+B,MAAMuyE,EAAU,MAAO,YAElC,IAAIE,EAAa,GAEjB,QAASvyG,EAAI,EAAGgD,EAAMsvG,EAAOnzG,OAAQa,EAAIgD,EAAKhD,IACvB,MAAjBsyG,EAAOtyG,GAAG,KAGduyG,GACE,IACAD,EAAOtyG,GAAG,GACV,KACkB,MAAjBsyG,EAAOtyG,GAAG,GAAasyG,EAAOtyG,GAAG,GAAGO,OAAO,EAAG+xG,EAAOtyG,GAAG,GAAGb,OAAS,GAAKmzG,EAAOtyG,GAAG,KAExF,OAAOuyG,EAAWh/E,QAAU,UAC9B,iDAhCW6+E,EAAY,wEAAZA,EAAYf,MAAA,2ECCnB,MAAOmB,EACXlmG,UAAUjI,GACR,OAAI6R,gBAAc7R,IAAU6R,WAAS7R,GAC5B,IACE6R,UAAQ7R,GACV,MAEFA,CACT,iDARWmuG,EAAS,qEAATA,EAASnB,MAAA,kECAhB,MAAOoB,EACXnmG,UAAUjI,GACR,OAAO2R,OAAOC,KAAK0pF,KAAY15F,SAAS5B,GAAuBs7F,IAAWt7F,GAAS,EACrF,iDAHWouG,EAAc,0EAAdA,EAAcpB,MAAA,uDCFrB,MAAOqB,EACXpmG,UAAUjI,GACR,MAAO,GAAGA,QACZ,iDAHWquG,EAAQ,oEAARA,EAAQrB,MAAA,uDCAf,MAAOsB,EACXrmG,UAAUjI,GACR,MACO,aADCA,EAEG,yBAEAA,CAEb,iDARWsuG,EAAkB,8EAAlBA,EAAkBtB,MAAA,uDCAzB,MAAOuB,EACXtmG,UAAUjI,GACR,OAAOA,EAAM1D,KAAK,KACpB,iDAHWiyG,EAAQ,oEAARA,EAAQvB,MAAA,uDCAf,MAAOwB,EACXvmG,UAAUjI,GACR,MAAc,UAAVA,EACK,QACY,UAAVA,EACF,OACY,UAAVA,EACF,OACY,UAAVA,EACF,MAEA,EAEX,iDAbWwuG,EAAe,2EAAfA,EAAexB,MAAA,2ECEtB,MAAOyB,EACXxmG,UAAUjI,EAAwBpD,GAChC,OAAKiV,kBAAgBjV,GAGdiV,QAAMjV,EAAKoD,EAAOA,GAFhBA,CAGX,iDANWyuG,EAAO,mEAAPA,EAAOzB,MAAA,uDCFd,MAAO0B,EACXzmG,UAAUjI,GACR,MAAO,GAAGA,QACZ,iDAHW0uG,EAAe,2EAAfA,EAAe1B,MAAA,2ECEtB,MAAO2B,EACX1mG,UAAUjI,GACR,IAAKA,EACH,OAAO,KAGT,IAAI4uG,EAAc,EACdC,EAAe,EACfC,EAAW,EACXC,EAAS,EACTC,EAAgB,EACpBn9F,SAAO7R,EAAM8uG,SAAU,KACrBA,GAAY,IAGV9uG,EAAM8uG,WAAa9uG,EAAM8e,aAC3B+vF,EAAeC,EACfF,EAAc,GACwB,IAA7B5uG,EAAM8e,YAAYhkB,OAC3B8zG,EAAc,GAEd/8F,SAAO7R,EAAM8e,YAAcmwF,IACzBp9F,SAAOo9F,EAAGC,OAAOluF,KAAOmuF,IACJ,sBAAdA,EAAIplF,MACNilF,GAAiB,EAEjBD,GAAU,GAEb,GAGHH,EAAcG,EACdF,EAAeC,EAAWE,GAS5B,MANmB,CACjBr9E,QAASi9E,EACT5tF,KAAM6tF,EACNxoD,MAJiBuoD,EAAcC,EAQnC,iDA1CWF,EAAc,0EAAdA,EAAc3B,MAAA,2ECArB,MAAOoC,EACXnnG,UAAUjI,GACR,IAAKA,EACH,OAAO,KAGT,IAAI4uG,GACoB/8F,gBAAc7R,EAAMqvG,aACxC,GACA,GAAGnmG,6BAA6BlJ,EAAMqvG,eAEtBv0G,OAAS,IAC3B8zG,EAAc,GAEhB,MAAMC,EAAe7uG,EAAM8uG,SAASh0G,OASpC,MANmB,CACjB62B,QAASi9E,EACT5tF,KAAM6tF,EACNxoD,MALiBuoD,EAAcC,EASnC,iDAxBWO,EAAc,0EAAdA,EAAcpC,MAAA,sDCFrB,MAAOsC,EACXrnG,UAAUjI,GACR,MAAO,GAAGA,MACZ,iDAHWsvG,EAAgB,4EAAhBA,EAAgBtC,MAAA,2ECEvB,MAAOuC,EACXtnG,UAAUjI,EAAYswD,GACpB,MAAc,KAAVtwD,EACK6R,cAAYy+C,EAAMpnD,gBAEpBlJ,CACT,iDANWuvG,EAAgB,4EAAhBA,EAAgBvC,MAAA,uDCFvB,MAAOwC,EACXvnG,UAAUjI,EAAeyvG,GAAe,GACtC,IAAKzvG,EACH,MAAO,GAET,MAAM0vG,EAAoB,GACpBzwE,EAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEhE0wE,EADQ3vG,EAAMglB,SAAS,GAAG4qF,SAAS,EAAG,KACvBvzG,MAAM,IAErBwzG,EAAWnwG,KAAKowG,kBAAkB7yG,SAAS0yG,EAAO,GAAKA,EAAO,KAC9Dt4D,EAAQpY,EAAYhiC,SAAS0yG,EAAO,KACpC94E,EAAQoI,EAAYhiC,SAAS0yG,EAAO,KACpCI,EAAS9wE,EAAYhiC,SAAS0yG,EAAO,KAE3C,OAAIF,EACK,CACLp4D,MAAO33C,KAAKuqF,QAAQ5yC,GACpBxgB,MAAOn3B,KAAKuqF,QAAQpzD,GACpBk5E,OAAQrwG,KAAKuqF,QAAQ8lB,KAIR,cAAbF,GACFH,EAAkB9zG,KAAK,CACrBhC,QAASi2G,EACTl0C,MAAO,uBAIG,QAAVtkB,GACFq4D,EAAkB9zG,KAAK,CACrBhC,QAAS,UAAUy9C,IACnBskB,MAAO,uBAIG,QAAV9kC,GACF64E,EAAkB9zG,KAAK,CACrBhC,QAAS,UAAUi9B,IACnB8kC,MAAO,uBAII,QAAXo0C,GACFL,EAAkB9zG,KAAK,CACrBhC,QAAS,WAAWm2G,IACpBp0C,MAAO,uBAIsB,IAA7B+zC,EAAkB50G,OACb,CACL,CACElB,QAAS,iBACT+hE,MAAO,qBACPq0C,QAAS,UAAU34D,aAAiBxgB,cAAkBk5E,MAKrDL,EACT,CAEQI,kBAAkBD,GACxB,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,UACT,KAAK,GACH,MAAO,gBACT,QACE,MAAO,IAEb,CAEQ5lB,QAAQnpB,GACd,MAAMmvC,EAAa,GACnB,OAAInvC,EAAKl/D,SAAS,MAAMquG,EAAWr0G,KAAK,QACpCklE,EAAKl/D,SAAS,MAAMquG,EAAWr0G,KAAK,SACpCklE,EAAKl/D,SAAS,MAAMquG,EAAWr0G,KAAK,WACjCq0G,CACT,iDAzFWT,EAAwB,oFAAxBA,EAAwBxC,MAAA,sDCA/B,MAAOkD,EACXjoG,UAAUjI,GACR,MAAMmwG,EAAMlzG,SAAS+C,EAAO,IAC5B,OAAI8uC,MAAMqhE,GACDnwG,EAGPA,GAC0B,IAAzBlD,KAAK2+B,MAAM00E,EAAM,IACd,KACAA,EAAM,IAAO,EACb,KACAA,EAAM,IAAO,EACb,KACAA,EAAM,IAAO,EACb,KACA,KAER,iDAlBWD,EAAW,uEAAXA,EAAWlD,MAAA,2ECElB,MAAOoD,EACXnoG,UAAUjI,GACR,IAAKA,EACH,OAAO,KAGT,IAAIqwG,EAAU,EACVC,EAAU,EACVC,EAAgB,EAChBC,EAAY,EAChB3+F,SAAO7R,EAAMywG,KAAOC,IACdA,EAAI5nD,IACNunD,IAEEK,EAAI7nD,IACNynD,IAEEI,EAAI3mF,MAAMnoB,SAAS,aACrB2uG,IAEEG,EAAI3mF,MAAMnoB,SAAS,SACrB4uG,MAIJ,MAAMG,EAAY3wG,EAAMywG,KAAK31G,OAASw1G,EAChCM,EAAW5wG,EAAMywG,KAAK31G,OAASu1G,EAUrC,MATmB,CACjBhqD,MAAOrmD,EAAMywG,KAAK31G,OAClBiuD,KAAM4nD,EACN3nD,IAAK4nD,EACL/nD,GAAIynD,EACJxnD,GAAIunD,EACJpnD,SAAUsnD,EACVrnD,KAAMsnD,EAGV,iDArCWJ,EAAc,0EAAdA,EAAcpD,MAAA,uDCFrB,MAAO6D,EACX5oG,UAAUjI,GACR,IAAKA,EAAO,MAAO,GACnB,MAAM8wG,EAAe9wG,EAAMglB,WAAW3oB,MAAM,KAE5C,MAAwB,KAApBy0G,EAAa,IACfA,EAAavzG,QACN,IAAIuzG,EAAa,UAAUA,EAAaA,EAAah2G,OAAS,MAEhE,GAAGg2G,EAAa,UAAUA,EAAaA,EAAah2G,OAAS,IACtE,iDAVW+1G,EAAQ,oEAARA,EAAQ7D,MAAA,uDCAf,MAAO+D,EACJ9oG,UAAUjI,EAAYgxG,EAA8B9rG,GACzD,OAAIA,EACK8rG,EAAQtsF,KAAKxf,EAASlF,GAGxBgxG,EAAQhxG,EACjB,iDAPW+wG,EAAgB,4EAAhBA,EAAgB/D,MAAA,0LCAvB,MAAOiE,EACXhpG,UAAUjI,IACR,OAAOwrC,mBAAmBxrC,GAC5B,mDAHWixG,EAAa,yEAAbA,EAAajE,MAAA,8NCmKpB,MAAOn/E,wDAAW,2DAAXA,IAAW,+DAnCX,CACTk/E,IACAK,IACAH,IACAiE,WACAvD,IACAF,IACA1K,IACA8K,IACAC,IACAqD,IACA7C,IACAC,IACAC,IACAnB,IACAc,IACA8C,EACAf,IACA7B,IACAiB,IACAC,IACA6B,KACArD,IACAU,IACA4C,KACAC,KACAlD,IACAgB,IACAT,IACAyB,IACAZ,KACAd,KACAd,MACDjjG,QAAA,CAxHSE,iBAAY,oDCzClB,MAAO0mG,EACXtpG,UAAUjI,EAAemrC,GACvB,OAAIA,GAAS,EACJnrC,EAELA,EAAMwxG,SAAS,KACVxxG,EAAMpF,MAAM,GAAG,GAAM,MAErBoF,EAAQ,GAEnB,iDAVWuxG,EAAa,yEAAbA,EAAavE,MAAA,+FCA1BjjG,iBAAoB,KAAM,CACxB0nG,aAAc,CACZC,OAAQxoG,iBACRyoG,KAAMzoG,kBACNkyE,EAAGlyE,yBACH0oG,GAAI1oG,sBACJjO,EAAGiO,oBACH2oG,GAAI3oG,sBACJ4oG,EAAG5oG,mBACH6oG,GAAI7oG,oBACJrP,EAAGqP,iBACH8oG,GAAI9oG,mBACJ+oG,EAAG/oG,kBACHgpG,GAAIhpG,oBACJipG,EAAGjpG,mBACHkpG,GAAIlpG,qBACJpL,EAAGoL,kBACHmpG,GAAInpG,uBAQF,MAAOioG,EAUXlpG,UAAUjI,EAA+BsyG,GAAa,GACpD,IAAItgD,EACJ,MAAM63B,EAAS9/E,MAASujG,YAMxB,GAJEt7C,EADEngD,aAAW7R,GACN+J,cAAiBA,SAAY/J,IAAQutG,MAAMD,UAAUzjB,GAAQ2jB,QAE7DzjG,cAAiB/J,GAAOutG,MAAMD,UAAUzjB,GAAQ2jB,SAEpDx7C,EAAKI,UACR,MAAO,GAET,IAAImgD,EAAuBvgD,EAAKwgD,UAChC,OAAIF,IACFC,EAAe1gG,eAAa0gG,IAEvBA,CACT,iDA1BWpB,EAAgB,4EAAhBA,EAAgBnE,MAAA,iECxBvB,MAAOsE,EACX9xG,YAAoBizG,GAAA/yG,KAAA+yG,cAA6B,CAEjDxqG,UAAUjI,GACR,OAAON,KAAK+yG,aAAaC,SAASC,kBAAgBC,KAAM5yG,EAC1D,iDALWsxG,GAAgB3wG,8BAAAC,eAAA,gFAAhB0wG,EAAgBtE,MAAA,2ECCvB,MAAOqE,EACXppG,UAAUjI,EAAYlF,EAAgBqoF,GACpC,OAAKtxE,aAAW7R,IAGhBmjF,EAAWtxE,cAAYsxE,EAAU,IAC1BtxE,aAAW7R,EAAO,CAAElF,SAAQqoF,cAH1BnjF,CAIX,iDAPWqxG,EAAY,wEAAZA,EAAYrE,MAAA,2ECAnB,MAAOoE,EACXnpG,UAAUjI,GACR,OAAO6R,eAAa7R,EACtB,iDAHWoxG,EAAc,0EAAdA,EAAcpE,MAAA,kECJrB,SAAU6F,IACd,MAAMC,KAAoBC,aAAUjwD,SAAU,oBAAoBp0C,QAChEskG,eAAY,CAAEC,UAAU,EAAMC,WAAY,MAGrCC,EAAcC,IAAW,EAAIC,aAClCP,EACA,IAAmC,YAA7BhwD,SAASwwD,iBAGjB,OAAO,SAAa1iD,GAClB,OAAOA,EAAOliD,QACZ6kG,aAAUH,IAAW,EACrBI,cAAW,IAAML,GAErB,CACF,yECXM,MAAOM,EACXj0G,YAAoByU,EAAwBrG,GAAxBlO,KAAAuU,SAAwBvU,KAAAkO,oBAAyC,CAErF8lG,YAAYC,EAAgC5pF,GAC1C,QAAIrqB,KAAKkO,mBAAmBgmG,eAG5Bl0G,KAAKuU,OAAOC,SAAS,CAAC,UAAW,CAAEsrB,YAAa,CAAEq0E,UAAW9pF,EAAMrL,QAC5D,EACT,CAEAo1F,iBAAiBC,EAAoChqF,GACnD,OAAOrqB,KAAKg0G,YAAYK,EAAYhqF,EACtC,iDAbW0pF,GAAgB9yG,qBAAAC,UAAAD,qBAAA8H,KAAA,+DAAhBgrG,EAAgB5yG,QAAhB4yG,EAAgB3yG,UAAAC,WAFf,QAAM,oDCNd,MAAOizG,EAMXx0G,YAAYy0G,EAAkC,IAC5C,CAAC,OAAQ,SAAU,SAAU,UAAUvtG,QACpC8F,GAAgB9M,KAAK8M,GAAcynG,EAAiBryG,SAAS4K,GAElE,EAGI,MAAO0nG,EAoBX10G,YAAY20G,GACVz0G,KAAK+lC,MAAQ,IAAIuuE,EAAWG,EAAkB1uE,OAC9C/lC,KAAK00G,UAAY,IAAIJ,EAAWG,EAAkB,eAClDz0G,KAAK8e,KAAO,IAAIw1F,EAAWG,EAAkB31F,MAC7C9e,KAAKgxG,IAAM,IAAIsD,EAAWG,EAAkBzD,KAC5ChxG,KAAK20G,QAAU,IAAIL,EAAWG,EAAkBE,SAChD30G,KAAK40G,SAAW,IAAIN,EAAWG,EAAkB,cACjDz0G,KAAK60G,MAAQ,IAAIP,EAAWG,EAAkBI,OAC9C70G,KAAK80G,OAAS,IAAIR,EAAWG,EAAkB,YAC/Cz0G,KAAK+0G,aAAe,IAAIT,EAAWG,EAAkB,kBACrDz0G,KAAKg1G,IAAM,IAAIV,EAAWG,EAAkBO,KAC5Ch1G,KAAKi1G,OAAS,IAAIX,EAAWG,EAAkBQ,QAC/Cj1G,KAAKk1G,QAAU,IAAIZ,EAAWG,EAAkBS,SAChDl1G,KAAKo0F,IAAM,IAAIkgB,EAAWG,EAAkBrgB,KAC5Cp0F,KAAK6yB,KAAO,IAAIyhF,EAAWG,EAAkB5hF,MAC7C7yB,KAAKm1G,QAAU,IAAIb,EAAWG,EAAkBU,SAChDn1G,KAAK2sC,WAAa,IAAI2nE,EAAWG,EAAkB9nE,YACnD3sC,KAAK8O,IAAM,IAAIwlG,EAAWG,EAAkB,gBAC5Cz0G,KAAKo1G,IAAM,IAAId,EAAWG,EAAkBW,IAC9C,iBC3CI,MAAOC,EAHbv1G,cAIEE,KAAAs1G,qBAAuB,IAAI9mG,mBAAgB,GAC3CxO,KAAAu1G,gBAAkBv1G,KAAKs1G,qBAAqBvtE,eAE5CvP,IACE3C,EACA0J,EAAc,GACdC,GAAM,EACN7H,EAA4B,KAC5BE,GAA6B,GAE7BkvD,aAAa6D,QAAQ,qBAAsB/0D,GAC3CkxD,aAAa6D,QAAQ,wBAAyB3vC,KAAKC,UAAU,IAAIs5D,EAAYj1E,KAC7EwnD,aAAa6D,QAAQ,2BAA4BrrF,OAAOo4B,IACxDovD,aAAa6D,QAAQ,2BAA4BrrF,OAAOs4B,IACxDkvD,aAAa6D,QAAQ,MAAOrrF,OAAOigC,GACrC,CAEAC,SACEsnD,aAAanoB,WAAW,sBACxBmoB,aAAanoB,WAAW,4BACxBmoB,aAAanoB,WAAW,2BAC1B,CAEAs1C,aACE,OAAsD,OAA/CntB,aAAawD,QAAQ,qBAC9B,CAEAlxD,cACE,OAAO0tD,aAAawD,QAAQ,qBAC9B,CAEA17E,iBACE,OAAOosC,KAAKy4B,MACVqT,aAAawD,QAAQ,0BAA4BtvC,KAAKC,UAAU,IAAIs5D,EAAY,KAEpF,CAEAgB,uBACE,OAAOttG,OAAO6+E,aAAawD,QAAQ,4BACrC,CAEAkrB,uBACE,MAA4D,SAArD1uB,aAAawD,QAAQ,2BAC9B,CAEAp0D,QACE,MAAuC,SAAhC4wD,aAAawD,QAAQ,MAC9B,iDAhDW8qB,EAAkB,+DAAlBA,EAAkBl0G,QAAlBk0G,EAAkBj0G,UAAAC,WAFjB,QAAM,oDCDd,MAAOq0G,EAEX51G,cAAe,CAEf,eAAO61G,CAAShsF,GACd,OAAOzhB,OAAOyhB,EAAKwW,SAASztB,IAAI,iBAClC,iDANWgjG,EAAwB,+DAAxBA,EAAwBv0G,QAAxBu0G,EAAwBt0G,UAAAC,WAFvB,QAAM,+FCId,MAAOu0G,EACX91G,YAAoB+1G,GAAA71G,KAAA61G,kBAAqC,CAEzDC,sBAAsBz9E,EAAe9f,GACnC,IAAI9F,EAAO,EACX,KAAOA,EAAO4lB,EAAS09E,MAAM36G,QACvBi9B,EAAS09E,MAAMtjG,GAAM8F,MAAQA,GAGjC9F,IAEFA,GAAQ4lB,EAAS09E,MAAM36G,OACvB,MAAMiK,EAAQgzB,EAAS09E,MAAMtjG,GAAMujG,eAAe3wG,MAC5CkgG,EAAWltE,EAAS09E,MAAMtjG,GAAMwjG,UAChCC,EAAU79E,EAAS09E,MAAMtjG,GAAMujG,eACrC,IAAI1Q,EAAgBtlG,KAAK61G,iBAAiBM,cAAcD,GAAS9O,WACjE,QAASnrG,EAAI,EAAGA,EAAIqpG,EAAclqG,OAAQa,IACxC,QAAS2D,EAAI,EAAGA,EAAI2lG,EAASnqG,OAAQwE,IAC/B0lG,EAAcrpG,GAAGsmB,KAAOgjF,EAAS3lG,GAAG2iB,MACtC+iF,EAAcrpG,GAAGu4E,MAAM6yB,gBAAkB9B,EAAS3lG,GAAGynG,gBACrD/B,EAAcrpG,GAAGu4E,MAAM4hC,SAAW7Q,EAAS3lG,GAAGw2G,YAC9CpN,KAAgB1D,EAAcrpG,GAAIspG,IAUxC,MAAO,CAAElgG,QAAOkgG,WAAUD,gBAAeD,SANZ,CAC3BqB,eAAgBruE,EAAS09E,MAAMtjG,GAAM4jG,UAAU3P,eAC/C9nE,QAASvG,EAAS09E,MAAMtjG,GAAM4jG,UAAUz3E,SAISinE,WAFhCxtE,EAAS09E,MAAMtjG,GAAM6jG,YAEuBn4B,MADjD9lD,EAAS09E,MAAMtjG,GAAM0rE,OAAS,GAE9C,iDAhCWy3B,GAAsB30G,qBAAAC,oBAAA,+DAAtB00G,EAAsBz0G,QAAtBy0G,EAAsBx0G,UAAAC,WAFrB,QAAM,ECKd,MAAOk1G,EAIXz2G,YAAoBgsB,EAA0B0qF,GAA1Bx2G,KAAA8rB,OAA0B9rB,KAAAw2G,mBAH9Cx2G,KAAAy2G,MAA6C,EAG4C,CAEzF/yF,KAAKgzF,GACH,MAAMC,EAAY32G,KAAK42G,aAAaF,EAAU,OAC9C,QAA8B98E,IAA1B55B,KAAKy2G,MAAME,GAA0B,CACvC,MAAQ33F,MAAK4hF,WAAY5gG,KAAK62G,iBAAiBH,GAE/C12G,KAAKy2G,MAAME,GAAa32G,KAAK8rB,KAAKpZ,IAASsM,EAAK,CAC9CmhB,QAAS,CAAEC,OAAQ,6BAA6BwgE,WAEpD,CAEA,OAAO5gG,KAAKy2G,MAAME,EACpB,CAEA/lF,OAAO8lF,EAAkBn0G,EAAWsjG,GAClC,MAAQ7mF,MAAK4hF,WAAY5gG,KAAK62G,iBAAiBH,GAE/C,OAAO12G,KAAK8rB,KAAK+5E,GAAiB7mF,EAAKzc,EAAM,CAC3C49B,QAAS,CAAEC,OAAQ,6BAA6BwgE,WAEpD,CAEAv1E,OAAOqrF,EAAkBn0F,GACvB,MAAQvD,MAAK4hF,WAAY5gG,KAAK62G,iBAAiBH,GAE/C,OAAO12G,KAAK8rB,KAAKT,OAAY,GAAGrM,KAAOuD,IAAO,CAC5C4d,QAAS,CAAEC,OAAQ,6BAA6BwgE,UAChDjgE,QAAS,YAEb,CAEAluB,KAAKikG,EAAkBI,EAAkBC,EAAmB,IAC1D,MAAMJ,EAAY32G,KAAK42G,aAAaF,EAAU,MAAOK,GAC/Cv3F,EAAS,CAAEw3F,UAAWD,GAC5B,QAA8Bn9E,IAA1B55B,KAAKy2G,MAAME,GAA0B,CACvC,MAAQ33F,MAAK4hF,WAAY5gG,KAAK62G,iBAAiBH,GAE/C12G,KAAKy2G,MAAME,GAAa32G,KAAK8rB,KAAKpZ,IAASsM,EAAK,CAC9CmhB,QAAS,CAAEC,OAAQ,6BAA6BwgE,UAChDphF,OAAQA,GAEZ,CACA,OAAOxf,KAAKy2G,MAAME,GAAW3nG,QAC3B9R,OAAKm7B,GACIr4B,KAAKw2G,iBAAiBV,sBAAsBz9E,EAAUy+E,IAGnE,CAEA34B,MAAMu4B,EAAkBl3F,GACtB,MAAMm3F,EAAY32G,KAAK42G,aAAaF,EAAU,OAC9C,QAA8B98E,IAA1B55B,KAAKy2G,MAAME,GAA0B,CACvC,MAAQ33F,MAAK4hF,WAAY5gG,KAAK62G,iBAAiBH,GAE/C12G,KAAKy2G,MAAME,GAAa32G,KAAK8rB,KAAKpZ,IAAS,GAAGsM,UAAa,CACzDmhB,QAAS,CAAEC,OAAQ,6BAA6BwgE,UAChDphF,OAAQA,GAEZ,CACA,OAAOxf,KAAKy2G,MAAME,EACpB,CAEAC,aAAaF,EAAkBO,EAAgB10F,EAAc,IAC3D,OAAOm0F,EAAWO,EAAS10F,CAC7B,CAEAs0F,iBAAiBH,GACf,MAAMl7G,EAAQk7G,EAASl7G,MAAM,qCAI7B,MAAO,CAAEwjB,IAHGxjB,EAAMsyC,OAAO9uB,IAAIriB,MAAM,KAAKC,KAAK,KAG1BgkG,QAFHplG,EAAMsyC,OAAO8yD,SAAW,MAG1C,iDA7EW2V,GAAkBt1G,qBAAAC,cAAAD,qBAAA8H,GAAA,+DAAlBwtG,EAAkBp1G,QAAlBo1G,EAAkBn1G,UAAAC,WAFjB,QAAM,wECAd,MAAO61G,EAIXC,wBAAwBvyE,GACtB,IAAKA,EAAOwyE,sBAAwBxyE,EAAOyyE,oBACzCzyE,SAAOva,MAAQ,UACRua,EAET,MAAM0yE,EAAWC,KAA6BrvG,OAAOJ,WAAWyvG,GAC1DC,EAAQA,CAACC,EAAkBC,IAC9BD,GAAaC,GAAaJ,EAAQG,IAAcH,EAAQI,GAErDrtG,aAAgBA,IAAOotG,GAAUE,KAAKttG,IAAOqtG,KAAYE,UADzD,KAGAC,EAAaxtG,aACPA,IAAOA,WAAcstG,KAAKttG,IAAOu6B,EAAOkzE,yBACjDF,UACG34G,EAAMu4G,EAAM5yE,EAAOyyE,oBAAqBzyE,EAAOkzE,uBAC/C1xC,EAAMoxC,EAAM5yE,EAAOwyE,oBAAqBxyE,EAAOkzE,uBAErD,OACElzE,EAAOva,MADLwtF,EAAa,EACA,QACE,OAAR54G,GAAgBA,GAAO,EACjB,MACE,OAARmnE,GAAgBA,GAAO,EACjB,UAEA,OAGjBxhC,EAAOmzE,sBAAwB,CAC7B94G,IAAa,OAARA,EAAe7B,KAAK42F,MAAM/0F,GAAO,KACtCmnE,IAAa,OAARA,EAAehpE,KAAK42F,MAAM5tB,GAAO,MAGjCxhC,CACT,CAEAozE,SAASpzE,GACPA,SAAOqzE,gBAAkBrzE,EAAO4T,QAAQ57C,KAAK,KACtCgoC,CACT,CAEAC,cAAcD,GACZ,OAAO5kC,KAAKg4G,SAASh4G,KAAKm3G,wBAAwBvyE,GACpD,iDA9CWsyE,EAAa,+DAAbA,EAAa/1G,QAAb+1G,EAAa91G,UAAAC,WAFZ,QAAM,+FCId,MAAO62G,EAIXp4G,YACUq4G,EACAC,GADAp4G,KAAAm4G,iBACAn4G,KAAAo4G,sBALFp4G,KAAAq4G,kBAAoB,IAAI7pG,kBAAwB,MACxDxO,KAAAs4G,aAAet4G,KAAKq4G,kBAAkBtwE,eAMpC/nC,KAAKm4G,eAAetvE,cAAe0vE,IACjC,MAAMC,EAAcx4G,KAAKo4G,oBAAoB7vG,UAAUgwG,EAAQ3X,SAC/D5gG,KAAKq4G,kBAAkB5oG,KAAK+oG,EAAW,EAE3C,CAEAxiD,aAAahzB,EAAiBy1E,EAAU,QAEtC,MAAMC,EAAS,4BADgB,SAAZD,EAAqB,SAAWA,KAE7CE,EAAa,kBAuBnB,MApBiB,CACf9D,MAAO,GAAG6D,4CACV/rE,WAAY,GAAG+rE,+CACf,cAAe,GAAGA,2DAClB,UAAW,GAAGA,eACd1D,IAAK,GAAG0D,kEACR,gBAAiB,GAAGA,sDACpBE,UAAW,GAAGF,sBACdG,UAAW,GAAGH,iBACdvD,QAAS,GAAGuD,+DACZI,KAAM,GAAGJ,oBACTK,IAAK,8BACLhmG,KAAM,GAAG4lG,cACTK,SAAU,GAAGL,iBACbM,WAAY,GAAGN,mBACf,gCAAiC,GAAGD,gDACpC,qCAAsC,GAAGA,qDACzC,kCAAmC,GAAGA,mDAGxB11E,EAClB,CAEA6F,cACE7F,EACAvzB,EACA8R,GAEA,OAAOvhB,KAAKs4G,aACTtpG,QACCqV,UAAQ/jB,KAAYA,IAAK,EACzBpD,OAAKu7G,GAAYz4G,KAAKg2D,aAAahzB,EAASy1E,KAAQ,EACpDrwF,YAEDzZ,UAAUc,EAAM8R,EACrB,iDAvDW22F,GAAUj3G,qBAAAC,KAAAD,qBAAA8H,KAAA,+DAAVmvG,EAAU/2G,QAAV+2G,EAAU92G,UAAAC,WAFT,QAAM,mFCEd,MAAO63G,EACXp5G,YAAoBq5G,GAAAn5G,KAAAm5G,gBAAwC,CAE5DnF,YAAYt2F,GACV,OAAO1d,KAAKm5G,eAAezmG,MAAM1D,QAC/B9R,OAAKk8G,IACH,IAAgD,IAA5CA,EAAgB17F,EAAM27F,YAAY9gG,MACpC,MAAM,IAAImmB,KAGZ,OAAO,IAGb,CAEA01E,iBAAiB12F,GACf,OAAO1d,KAAKg0G,YAAYt2F,EAAMyiC,OAChC,iDAjBW+4D,GAA0Bj4G,qBAAAC,KAAA,+DAA1Bg4G,EAA0B/3G,QAA1B+3G,EAA0B93G,UAAAC,WAFzB,QAAM,0ECad,MAAOi4G,EAKXx5G,YAAoBgsB,EAA0B6b,GAA1B3nC,KAAA8rB,OAA0B9rB,KAAA2nC,eAJrC3nC,KAAAu5G,QAAkB,sBAClBv5G,KAAAwmC,iBAA2B,IAIlCxmC,KAAKw5G,kBAAoBx5G,KAAK2nC,aAAaj1B,IACzC,IAAM1S,KAAK8rB,KAAKpZ,IAAuB1S,KAAKu5G,SAC5Cv5G,KAAKwmC,iBAET,CAEA9zB,MACE,OAAO1S,KAAKw5G,iBACd,iDAdWF,GAAqBr4G,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAArBuwG,EAAqBn4G,QAArBm4G,EAAqBl4G,UAAAC,WAFpB,QAAM,kFCZd,MAAO8hG,EACX36F,cAAc9J,EAAQ+6G,EAAiBl5G,EAAiBI,EAAmB,GAIzE,GAHIwR,aAAWzT,KACbA,EAAIwJ,OAAOxJ,KAERyT,aAAWzT,GACd,MAAO,IAET,GAAIyT,UAAQzT,GACV,MAAO,MAET,IAAI6tB,EAAO7tB,EAAI,EAAI,EAAItB,KAAK2+B,MAAM3+B,KAAKg3F,IAAI11F,GAAKtB,KAAKg3F,IAAIqlB,IACzDltF,EAAOA,GAAQhsB,EAAMnF,OAASmF,EAAMnF,OAAS,EAAImxB,EACjD,IAAI1wB,EAASsW,UAAQzT,EAAItB,KAAKi3F,IAAIolB,EAASltF,GAAO5rB,GAAU2kB,WAC5D,MAAe,KAAXzpB,EACK,KAEW,KAAhB0E,EAAMgsB,KACR1wB,EAAS,GAAGA,KAAU0E,EAAMgsB,MAEvB1wB,EACT,CAYA+E,mBACElC,EACA6B,EAAgB,GAChBC,EAAwB,GACxBk5G,EACAC,EACAh5G,EAAmB,GAQnB,GANIwR,aAAWzT,KACbA,EAAIwJ,OAAOxJ,KAERyT,aAAWzT,KAGXi7G,EACH,MAAO,IAET,MAAMC,EAAsBD,EAAWz8G,IAAKxC,GAAQA,EAAI6pB,eACxD,IACGq1F,EAAoB13G,SAAS3B,EAAMgkB,iBACnCq1F,EAAoB13G,SAAS1B,EAAc+jB,eAE5C,MAAO,GAAG7lB,KAAK6B,IAEjB,MAAM2G,EACJ0yG,EAAoB79G,QAAQwE,EAAMgkB,eAClCq1F,EAAoB79G,QAAQyE,EAAcq5G,qBACtCC,EACJ5yG,EAAQ,EACJxI,EAAItB,KAAKi3F,IAAIqlB,EAAkBxyG,GAC/BxI,EAAItB,KAAKi3F,IAAIqlB,EAAkBt8G,KAAK+B,IAAI+H,IAC9C,IAAIrL,EAASsW,UAAQ2nG,EAAYn5G,GAAU2kB,WAC3CzpB,SAAS,GAAGA,KAAU2E,IACf3E,CACT,CAUAw9D,QAAQ/4D,EAAey5G,EAAsB,MAE3C,MAAMx5G,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjDy5G,EAAkBr/G,OACtB,sBAAwB4F,EAAM3D,KAAK,IAAM,4BACzC,KACAoxG,KAAK1tG,GACP,GAAwB,OAApB05G,EACF,OAAOD,EAET,IAAI9W,EAAQn7F,WAAWkyG,EAAgB,IACvC,OAAI7nG,aAAW6nG,EAAgB,MAC7B/W,GAAgB7lG,KAAKi3F,IAAI4lB,KAAM15G,EAAMxE,QAAQi+G,EAAgB,GAAGz1F,cAAc,MAEzEnnB,KAAK42F,MAAMiP,EACpB,CAKAiX,eAAe55G,GAEb,MAAM65G,EADU,yBACWnM,KAAK1tG,GAEhC,OAAmB,OAAf65G,GACMA,EAAW,GAGd,CACT,CAKAC,OAAO95G,GAEL,MAAM65G,EADU,2BACWnM,KAAK1tG,GAEhC,OAAmB,OAAf65G,GACMA,EAAW,GAGd,CACT,CAEAE,kBAAkBC,GAChB,MAAMtpF,EAAS,CAAC,QAAS,QAAS,UAClC,IAAIupF,EAAY,GAChB,UAAWloF,KAASrB,EAAQ,CAC1B,IAAIwpF,EAAa,EACjB,MAAM31G,EAAOy1G,EAAMjoF,GAEfxtB,IACEA,EAAK3C,SAAS,UAASs4G,GAAc,GACrC31G,EAAK3C,SAAS,WAAUs4G,GAAc,GACtC31G,EAAK3C,SAAS,aAAYs4G,GAAc,IAG9CD,GAAaC,EAAWl1F,UAC1B,CACA,OAAOi1F,CACT,CAIAE,kBACE7mG,EACA8mG,EACAC,EACAx0G,GAEA,SAAIw6F,MAAkB/sF,EAAQtT,OACrB,KAGW,OADA3F,OAAO+/G,EAAO,KAAK1M,KAAKp6F,EAAQtT,QAIxC,SAAR6F,IACY,IAAIg9F,GAAmB9pC,QAAQzlD,EAAQtT,OACtC,KAJRq6G,EAMF,IACT,CAEAC,qBAAqBhnG,GAEnB,MAAMumG,EADU,cACWnM,KAAKp6F,EAAQtT,OACxC,SAAIqgG,MAAkB/sF,EAAQtT,OACrB,KAES,MAAd65G,GAGGvmG,EAAQtT,MAAMglB,YAAYlqB,OAAS,GAFjC,CAAEy/G,gBAAgB,GAE+C,IAC5E,iDA5KW1X,EAAgB,+DAAhBA,EAAgBhiG,QAAhBgiG,EAAgB/hG,UAAAC,WAFf,QAAM,8DCAd,MAAOy5G,EAGXh7G,YAAoB+nB,GAAA7nB,KAAA6nB,cAA6B,CAEjDgD,KAAKuT,EAAgBjyB,EAAS,IAC5B,MAAM4uG,EAAc/6G,KAAK6nB,aAAa5C,OAAO,CAC3CmZ,UAAWA,EACXjyB,OAAQA,IAEV,OAAAnM,KAAK4qB,SAAWmwF,EAAYC,SAAStoG,IAAS0rB,GACvCp+B,KAAK4qB,QACd,CAEAwsC,gBACE,OAAOp3D,KAAK6nB,aAAaozF,mBAAmBC,eAC9C,CAEA1nF,aACExzB,KAAK6nB,aAAakB,SACpB,CAEA2K,mBAAmBjhB,GACjBzS,KAAK4qB,SAASnY,GAAM8S,UAAU,CAAEE,gBAAgB,GAClD,iDAxBWq1F,GAAe75G,qBAAAC,gBAAA,+DAAf45G,EAAe35G,QAAf25G,EAAe15G,UAAAC,WAFd,QAAM,+DCGd,MAAO85G,EACXr7G,YAAoB4U,GAAA1U,KAAA0U,OAAkB,CAEtCmW,KAAKuT,EAAgBvF,EAAoB31B,GACvC,MAAM0nB,EAAW5qB,KAAK0U,MAAMi8C,KAAKvyB,EAAWl7B,GAE5C,OAAI21B,GACF5mB,OAAOg6B,OAAOrhB,EAAS6I,kBAAmBoF,GAGrCjO,CACT,CAEA4I,aACExzB,KAAK0U,MAAM8e,YACb,CAEA4jC,gBACE,OAAOp3D,KAAK0U,MAAM0iD,eACpB,iDAnBW+jD,GAAYl6G,qBAAAC,YAAA,+DAAZi6G,EAAYh6G,QAAZg6G,EAAY/5G,UAAAC,WAFX,QAAM,qHCiCd,MAAO+5G,SAEKp7G,KAAAq7G,UAAsB,CAAC,MAAO,CAE9Cv7G,YACUgsB,EACAvX,EACA8kC,GAFAr5C,KAAA8rB,OACA9rB,KAAAuU,SACAvU,KAAAq5C,kBACP,CAEH26D,YAAYt2F,GACV,OAAO1d,KAAKs7G,QAAQ59F,EACtB,CAEA02F,iBAAiBC,GACf,OAAOr0G,KAAKs7G,QAAQjH,EACtB,CAEQiH,QAAQ59F,GACd,GAAIA,EAAMsB,IAAI5jB,OAAS,GAAKggH,EAAyBC,UAAUn5G,SAASwb,EAAMsB,IAAI,GAAGzG,MACnF,SAAO0T,OAAa,GAEtB,MAAM8W,EAASrlB,EAAMnb,KAAKg5G,wBAC1B,IAAIC,GAAe,EACnB,OAAIz4E,EAAO04E,SACTz7G,KAAKq5C,iBAAiB5S,UAAU,gBAAgB93B,UAC7Cgb,IACC6xF,EAAez4E,EAAO04E,UAAY9xF,EAAK+xF,YAAA,EAEzC,KACE17G,KAAKuU,OAAOC,SAAS,CAACuuB,EAAO/E,cAAW,EACjC/R,OAAa,KAInBjsB,KAAK8rB,KAAKpZ,IAAI,UAAUqwB,EAAOuH,oBAAoBt7B,QACxD9R,OAAKysB,KACEA,EAAK1Z,YAAcurG,GACtBx7G,KAAKuU,OAAOC,SAAS,CAACuuB,EAAO/E,YAAc,IAAK,CAC9C3T,MAAO,CACLsU,OAAQoE,EAAOpE,OACfC,QAASjV,EAAKiV,QACdoE,QAASD,EAAOC,QAChB24E,aAAc54E,EAAO44E,aACrBC,YAAa74E,EAAO64E,YACpBC,aAAc94E,EAAO84E,aACrBC,aAAc/4E,EAAO+4E,aACrBC,sBAAuBh5E,EAAOg5E,sBAC9BC,uBAAwBj5E,EAAOi5E,uBAC/BC,uBAAwBl5E,EAAOk5E,uBAC/BC,YAAan5E,EAAOm5E,YACpBC,YAAap5E,EAAOo5E,YACpBC,SAAUr5E,EAAOq5E,SACjB9xE,UAAWvH,EAAOuH,UAClB/hB,KAAMvW,KAAMmsF,OACZ//D,UAAW2E,EAAO3E,aAIjBzU,EAAK1Z,aACb,EACDuU,cAAW,KACTxkB,KAAKuU,OAAOC,SAAS,CAACuuB,EAAO/E,cAAW,EACjC/R,OAAa,KAG1B,iDAlEWmvF,GAAwBn6G,qBAAAC,cAAAD,qBAAA8H,UAAA9H,qBAAA+H,KAAA,+DAAxBoyG,EAAwBj6G,QAAxBi6G,EAAwBh6G,UAAAC,WAFvB,QAAM,0ICrBd,MAAOg7G,EAcXv8G,YACSgxD,EACCwrD,EACAC,GAFDv8G,KAAA8wD,SACC9wD,KAAAs8G,qBACAt8G,KAAAu8G,aAhBFv8G,KAAAw8G,cAAe,EAGfx8G,KAAAy8G,WAAa,IAAIjuG,kBAAkC,IAC3DxO,KAAAqxE,MAAQrxE,KAAKy8G,WAAW10E,eAGxB/nC,KAAA08G,eAAiB,IAAIn2E,UAEbvmC,KAAA28G,OAAiC,GAEzC38G,KAAA48G,IAAM,kBAOJ,MAAMC,EAAsB91B,aAAawD,QAAQvqF,KAAK48G,KACtD,IAAIE,EAAkC,GAElC3qG,aAAW0qG,KACbC,EAAgB7hE,KAAKy4B,MAAMmpC,EAAqB,CAACppC,EAAMnzE,IACjD6R,kBAAgB7R,GACX6R,WAAS,IAAIu3F,IAAkBppG,GAEjCA,IAIXN,KAAKy8G,WAAWhtG,KAAKqtG,EACvB,CAKAC,YACEh2B,aAAanoB,WAAW5+D,KAAK48G,KAC7B58G,KAAKy8G,WAAWhtG,KAAK,GACvB,CAKAgwB,OAAOv4B,GACL,MAAM81G,EAASh9G,KAAKy8G,WAAW9rG,WAC/BqsG,EAAO97C,OAAOh6D,EAAO,GACrBlH,KAAKy8G,WAAWhtG,KAAKutG,GACrBj2B,aAAa6D,QAAQ5qF,KAAK48G,IAAK3hE,KAAKC,UAAU8hE,GAChD,CAKAp5G,KAAKwqC,GACH,MAAM4uE,EAASh9G,KAAKy8G,WAAW9rG,WAG/B,IAFAqsG,EAAO9gH,KAAKkyC,GACZ4uE,EAAOn1G,KAAK,CAACrN,EAAGC,IAAOD,EAAEuvG,UAAYtvG,EAAEsvG,WAAY,EAAK,GACjDiT,EAAO5hH,OAAS,IACrB4hH,EAAO7gH,MAET6D,KAAKy8G,WAAWhtG,KAAKutG,GACrBj2B,aAAa6D,QAAQ5qF,KAAK48G,IAAK3hE,KAAKC,UAAU8hE,GAChD,CAoBAnyF,KACEoyF,EACA53G,EACAu5B,EACA17B,EACAmmG,GAEA,OAAO3pE,OAAOikB,WAAW,KACvB,IAAI5gB,EAEFA,EADE5wB,eAAa8qG,GACNA,IACA9qG,aAAW8qG,GACXA,EAEA,IAAI7T,IACX6T,EACA53G,EACAu5B,EACA17B,EACAmmG,GAGJrpG,KAAKk9G,YAAYn6E,EAAM,EACtB,GACL,CAEQm6E,YAAYn6E,GAClB/iC,KAAKm9G,OAAOn9G,KAAKo9G,iBACZp9G,KAAK28G,OAAO9pG,KAAMvT,GAAM6S,YAAU7S,EAAGyjC,KACxC/iC,KAAK28G,OAAOzgH,KAAK6mC,GAEnB/iC,KAAKo9G,gBAAkB19E,OAAOikB,WAAW,KACvC3jD,KAAKq9G,YAAU,EACd,IACL,CAEQA,aACNr9G,KAAKs9G,uBAAuBt2G,QAAS+7B,IACnC,MAAMqL,EAAe,IAAIs7D,IAAe3mE,GAEnCqL,EAAak7D,gBAChBtpG,KAAK4D,KAAKwqC,GAEZpuC,KAAKu9G,WAAWnvE,EAAY,EAEhC,CAEQkvE,uBACN,OAAOrrG,OAAOpJ,OAAO7I,KAAKw9G,qBAAqBtgH,IAAKugH,IAClD,MAAM16E,EAAS06E,EAAQ,GACvB,OAAIA,EAAQriH,OAAS,IACnB2nC,EAAOnE,QAAU,OAAS6+E,EAAQvgH,IAAKoC,GAAM,OAAOA,EAAEs/B,gBAAgBhiC,KAAK,IAAM,SAE5EmmC,GAEX,CAEQy6E,oBACN,MAAME,EAAqD,GAC3D,IAAI36E,EACJ,KAAQA,EAAS/iC,KAAK28G,OAAO9+G,SACtB6/G,EAAQ36E,EAAO19B,SAClBq4G,EAAQ36E,EAAO19B,OAAS,IAE1Bq4G,EAAQ36E,EAAO19B,OAAOnJ,KAAK6mC,GAE7B,OAAO26E,CACT,CAEQH,WAAWnvE,GAEbpuC,KAAKw8G,cAGTx8G,KAAK8wD,OAAO,CAAC,QAAS,OAAQ,WAAW1iB,EAAajoC,QACnDioC,EAAaxP,QAAUwP,EAAaxP,QAAU,OAAS,IACtD5+B,KAAK29G,6BAA6BvvE,GACpCA,EAAa/oC,MACb+oC,EAAalrC,QAEjB,CAEAy6G,6BAA6BvvE,GAC3B,MAAO,uBAAuBpuC,KAAKu8G,WAAWh0G,UAC5C6lC,EAAa27D,qDAC6B37D,EAAaq7D,4BACvDr7D,EAAai7D,mBAEjB,CAEAuU,WAAWC,EAA4B5rF,GAAmB,GACxD,MAAMmc,EAAepuC,KAAK89G,2BAA2BD,EAAc5rF,GACnEmc,SAAak7D,gBAAiB,EACvBtpG,KAAK6qB,KAAKujB,EACnB,CAEA0vE,2BACED,EACA5rF,GAAmB,GAEnB,IAAImc,EACJ,OACEA,EADEyvE,EAAa5rF,SAAWA,EACX,IAAIm3E,IACjBp3E,IAAiBC,QACjBjyB,KAAKs8G,mBAAmByB,gBAAgBF,IAG3B,IAAIzU,IACjBp3E,IAAiBzQ,MACjBvhB,KAAKs8G,mBAAmB0B,cAAcH,GACtC79G,KAAKs8G,mBAAmBtjD,gBAAgB6kD,IAG5CzvE,EAAak7D,gBAAiB,EAEvBl7D,CACT,CAMA+uE,OAAOc,GACLv+E,OAAO8jB,aAAay6D,EACtB,CAMAh3E,gBAAgBi3E,GACdl+G,KAAKw8G,aAAe0B,CACtB,CAEAC,cAAcC,GAAa,GACzBp+G,KAAK08G,eAAejtG,KAAK2uG,EAC3B,iDA5NW/B,GAAmBp7G,qBAAAC,iBAAAD,qBAAA8H,KAAA9H,qBAAA+H,KAAA,+DAAnBqzG,EAAmBl7G,QAAnBk7G,EAAmBj7G,UAAAC,WAFlB,QAAM,mFCbd,MAAOg9G,EAWXv+G,YAAY8sC,GACV5sC,KAAKs+G,iBAAmB1xE,EAAS2xE,mBACjCv+G,KAAKw+G,mBAAqB5xE,EAAS6xE,sBACnCz+G,KAAK0+G,4BAA8B9xE,EAAS+xE,gCAC5C3+G,KAAK4+G,4BAA8BhyE,EAASiyE,gCAC5C7+G,KAAK8+G,8BAAgClyE,EAASmyE,kCAC9C/+G,KAAKg/G,mCAAqCpyE,EAASqyE,wCACnDj/G,KAAKk/G,qCAAuCtyE,EAASuyE,0CACrDn/G,KAAKo/G,qCAAuCxyE,EAASyyE,0CACrDr/G,KAAKs/G,gCAAkC1yE,EAAS2yE,mCAClD,iBCTI,MAAOC,EACX1/G,YAAoB62B,GAAA32B,KAAA22B,iBAAmC,CAEvDM,cACE,OAAOj3B,KAAK22B,gBAAgBmB,sBAAsB9oB,QAChD9R,OAAKysB,IACH,MAAMijB,EAAW,IAAIyxE,EAAoB10F,GACzC,IAAIuN,EAAqB,GACzB,GAAI0V,EAAS0xE,iBAAkB,CAC7BpnF,EAASh7B,KAAKsN,0CACd,MAAMi2G,EAAsC,CAC1Cf,4BAA6Bl1G,kCAAkCojC,EAAS4xE,gCACxEI,4BAA6Bp1G,oDAC7Bs1G,8BAA+Bt1G,uCAC/Bw1G,mCAAoCx1G,iDACpC01G,qCAAsC11G,+DACtC41G,qCAAsC51G,+DACtC81G,gCAAiC91G;;;;mCAMnC0tB,EAAWA,EAAStuB,OAClBuJ,SAAOstG,GACJp7F,OAAQ9B,GAAQpQ,QAAMy6B,EAAUrqB,IAChCrlB,IAAKqlB,GAAQ,KAAOpQ,QAAMstG,EAAUl9F,IAE3C,CACA,OAAO2U,EAASt6B,KAAK,KAAI,GAG/B,CAOA86B,qBAAqBH,GACnB,IAAI17B,EAAS,cACb,OAAI07B,EAAU,GACZ17B,EAAS,WACA07B,EAAU,GACnB17B,EAAS,OACA07B,EAAU,GACnB17B,EAAS,KACA07B,EAAU,KACnB17B,EAAS,UAEJA,CACT,iDAnDW2jH,GAAqBv+G,qBAAAC,KAAA,+DAArBs+G,EAAqBr+G,QAArBq+G,EAAqBp+G,UAAAC,WAFpB,QAAM,8DCMd,MAAOgrC,EAGXvsC,cACEE,KAAK0/G,SAAW,CACd,CACEC,QAASn2G,8BACTyyD,MAAO,qBACP/4D,QAAS,CACP,CACE9I,KAAM,oBACNwlH,YAAap2G,qBACbgoB,YAAahoB,qDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,qBACNwlH,YAAap2G,sBACbgoB,YAAahoB,0DACbrD,KAAMumG,IAAqBG,MAE7B,CACEzyG,KAAM,yBACNwlH,YAAap2G,0BACbgoB,YAAahoB,uDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,0BACNwlH,YAAap2G,2BACbgoB,YAAahoB,4DACbrD,KAAMumG,IAAqBG,MAE7B,CACEzyG,KAAM,0BACNwlH,YAAap2G,2BACbgoB,YAAahoB,wDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,2BACNwlH,YAAap2G,4BACbgoB,YAAahoB,6DACbrD,KAAMumG,IAAqBG,MAE7B,CACEzyG,KAAM,oBACNwlH,YAAap2G,qBACbgoB,YAAahoB,gDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,qBACNwlH,YAAap2G,sBACbgoB,YAAahoB,qDACbrD,KAAMumG,IAAqBG,MAE7B,CACEzyG,KAAM,yBACNwlH,YAAap2G,0BACbgoB,YAAahoB,kDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,0BACNwlH,YAAap2G,2BACbgoB,YAAahoB,uDACbrD,KAAMumG,IAAqBG,MAE7B,CACEzyG,KAAM,0BACNwlH,YAAap2G,2BACbgoB,YAAahoB,mDACbrD,KAAMumG,IAAqBE,KAE7B,CACExyG,KAAM,2BACNwlH,YAAap2G,4BACbgoB,YAAahoB,wDACbrD,KAAMumG,IAAqBG,QAKrC,CAEQ,6BAAOgT,CAAuBH,GACpC,OAAOA,EAASxiH,IAAK8lC,GAAYA,EAAQ9/B,SAASyF,OAAO,CAACnO,EAAGC,IAAMD,EAAEoO,OAAOnO,GAC9E,CAEQqlH,0BAA0BC,GAChC,OAAO1zE,EAAwBwzE,uBAAuB7/G,KAAK0/G,UAAUr7F,OAClEysB,GAAWA,EAAO12C,OAAS2lH,EAEhC,CAEQC,qBAAqBD,EAAoBE,EAAmBC,EAAe,IACjF,MAAM18E,EAAgBxjC,KAAK8/G,0BAA0BC,GACrD,OAAgC,IAAzBv8E,EAAcpoC,OAAeooC,EAAcrnC,MAAM8jH,GAAaC,CACvE,CAEAC,sBACE,OAAOngH,KAAK0/G,SAASxiH,IAAK8lC,IACxBA,EAAQ9/B,QAAU8/B,EAAQ9/B,QAAQmhB,OAAQ8rD,IAAOA,EAAEiwC,UAC5Cp9E,GAEX,CAEAq9E,kBACE,OAAOh0E,EAAwBwzE,uBAAuB7/G,KAAK0/G,SAC7D,CAEAY,0BACE,OAAOj0E,EAAwBwzE,uBAAuB7/G,KAAKmgH,sBAC7D,CAEAj0E,gBAAgBq0E,GACd,OAAOvgH,KAAK8/G,0BAA0BS,GAAYpkH,KACpD,CAEAqkH,eAAeT,GACb,OAAO//G,KAAKggH,qBAAqBD,EAAY,cAC/C,CAEAU,eAAeV,GACb,OAAO//G,KAAKggH,qBAAqBD,EAAY,cAC/C,iDA9HW1zE,EAAuB,+DAAvBA,EAAuBlrC,QAAvBkrC,EAAuBjrC,UAAAC,WAFtB,QAAM,+DCPd,MAAOq/G,EAQX5gH,YAAoBmO,GAAAjO,KAAAiO,SALZjO,KAAA2gH,mBAAqB,IAAInyG,kBAAgB,MAGjDxO,KAAA4gH,cAAgB5gH,KAAK2gH,mBAAmB54E,eAGtC,MAAM84E,EAAkBtjH,SAASujH,eAAev2B,QAAQ,sBAAuB,KAAO,IACtFvqF,KAAK+gH,mBAAmBF,EAC1B,CAEAE,mBAAmBC,GACjBhhH,KAAKihH,aAAeD,EACpBF,eAAel2B,QAAQ,qBAAsBo2B,EAAY17F,YAErDtlB,KAAKkhH,sBACPlhH,KAAKkhH,qBAAqBh3F,cAE5BlqB,KAAKiO,OAAOy1C,kBAAkB,KAC5B1jD,KAAKkhH,wBAAuBC,YAASnhH,KAAKihH,cAActyG,UAAU,IAChE3O,KAAKiO,OAAO21C,IAAI,KACd5jD,KAAK2gH,mBAAmBlxG,KAAKzP,KAAKihH,aAAY,GAC9C,EAGR,CAEAG,qBACE,OAAOphH,KAAKihH,YACd,CAEAj3F,cACMhqB,KAAKkhH,sBACPlhH,KAAKkhH,qBAAqBh3F,aAE9B,iDArCWw2F,GAAsBz/G,+BAAA,+DAAtBy/G,EAAsBv/G,QAAtBu/G,EAAsBt/G,UAAAC,WAFrB,QAAM,oHCSd,MAAOggH,EAOXvhH,YAAoBgsB,EAA0B6b,GAA1B3nC,KAAA8rB,OAA0B9rB,KAAA2nC,eANrC3nC,KAAAwmC,iBAAmB,IAEpBxmC,KAAAshH,kBAAoB,IAAI9yG,kBAAyB,MAEzDxO,KAAAuhH,aAAevhH,KAAKshH,kBAAkBv5E,cAEqC,CAE3EN,eACE,OAAOznC,KAAK2nC,aACTj1B,IAAI,IAAM1S,KAAKwhH,4BAA6BxhH,KAAKwmC,kBACjD73B,UAAU3O,KAAKyhH,0BACpB,CAEAj8E,UACE,OAAOxlC,KAAKwhH,4BAA4B7yG,UAAU3O,KAAKyhH,0BACzD,CAEQD,4BACN,OAAOxhH,KAAK8rB,KAAKpZ,IAAa,cAChC,CAEQ+uG,0BACN,OAAQl/G,IACNvC,KAAKshH,kBAAkB7xG,KAAKlN,EAAI,CAEpC,CAKAsmC,cAAcp5B,EAAkC8R,GAC9C,OAAOvhB,KAAKuhH,aACTvyG,QACCqV,UAAQ/jB,KAAYA,IAAK,EACzB8nB,YAEDzZ,UAAUc,EAAM8R,EACrB,CAOA5S,UAAUc,EAAkC8R,GAC1C,OAAOvhB,KAAKuhH,aAAavyG,QAAKqV,UAAQ/jB,KAAYA,IAAQqO,UAAUc,EAAM8R,EAC5E,CAOAmgG,eAAe58F,GACb,MAAM68F,EAAU3hH,KAAKshH,kBAAkB3wG,WAClCgxG,IAIDxvG,YAAUwvG,EAAQC,iBACLD,EAAQC,gBAAgB/uG,KAAMswC,GACpCA,EAAQ/oD,OAAS0qB,EAAK1qB,MAAQ+X,YAAUgxC,EAAQl7B,SAAUnD,EAAKmD,YAGtE05F,EAAQC,gBAAgB1lH,KAAK4oB,GAG/B68F,EAAQC,gBAAkB,CAAC98F,GAG7B9kB,KAAKshH,kBAAkB7xG,KAAKkyG,GAC9B,iDAzEWN,GAAcpgH,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAds4G,EAAclgH,QAAdkgH,EAAcjgH,UAAAC,WAFb,QAAM,0ECFd,MAAOiqB,EAYXxrB,YACUw8G,EACAj2E,GADArmC,KAAAs8G,qBACAt8G,KAAAqmC,gBACP,CAkBH5c,KACEo4F,EACAC,EACAC,EACAl4F,EACAC,EACAC,EACA/B,GAEAhoB,KAAK6hH,UAAYA,EACjB7hH,KAAK8hH,cAAgBA,EACrB9hH,KAAK+hH,QAAUA,EACf/hH,KAAK6pB,aAAeA,EACpB7pB,KAAK8pB,WAAaA,EAClB9pB,KAAK+pB,WAAaA,EAClB/pB,KAAKgoB,SAAWA,GAAY,GAE5BhoB,KAAKiqB,wBAA0BjqB,KAAKqmC,eAAe13B,UAAW4pG,IAC5Dv4G,KAAKu4G,QAAUA,EACfv4G,KAAKgiH,OAAK,EACThiH,KAAK6pB,aACV,CAEAm4F,MAAMx8G,EAAe,MACnBxF,KAAK6hH,UAAUr8G,GAASmJ,UAAWgb,IACjC3pB,KAAKiiH,WAAWt4F,EAAM3pB,KAAKu4G,SAAUqJ,gBAAmBv9F,OAAOrkB,KAAK8pB,YAAW,EAC9E9pB,KAAK6pB,aACV,CAEQo4F,WAAWt4F,EAAWu4F,GAC5B,MAAM3/G,EAAcvC,KAAK8hH,cAAgB9hH,KAAK8hH,cAAcn4F,GAAQA,EACpE3pB,KAAKmiH,WAAW5/G,EAAM2/G,GACtB3/G,EAAKyE,QAASo6D,IACZ,MAAMghD,EAAiBF,EAAM79F,OAAQS,GAAS9kB,KAAK+pB,WAAWq3C,EAAMt8C,IACpEs8C,EAAKuY,YAAc35E,KAAKqiH,cAAcD,EAAc,GAEtDpiH,KAAK+hH,QAAQx/G,EACf,CAEQ4/G,WAAW5/G,EAAa2/G,GAC9B,MAAMI,EAAiBtiH,KAAKgoB,SAASmb,QACrC++E,GAAOl7G,QAAS8d,IACd,MAAMy9F,EAAWhgH,EAAKsQ,KAAMuuD,GAASphE,KAAK+pB,WAAWq3C,EAAMt8C,IACrD09F,EAAUxiH,KAAKgoB,SAASlD,EAAK1qB,OAC9BmoH,IAAaC,GAAWF,IAC3B//G,EAAKrG,KAAKsmH,EAAUA,EAAQ19F,EAAKmD,UAAYq6F,EAAex9F,EAAKmD,UAAS,EAGhF,CAEQo6F,cAAcH,GACpB,GAAqB,IAAjBA,EAAM9mH,OAGV,OAAO8mH,EACJhlH,IAAK4nB,IACJ,MAAM29F,EAAW39F,EAAK29F,SAAW,IAAI39F,EAAK29F,YAAc,GACxD,OAAOziH,KAAKs8G,mBAAmBoG,eAAe59F,GAAQ,MAAQ29F,IAE/D7lH,KAAK,KACV,CAEAotB,cACMhqB,KAAKiqB,yBACPjqB,KAAKiqB,wBAAwBC,aAEjC,iDAnGWoB,GAAerqB,qBAAAC,KAAAD,qBAAA8H,KAAA,+DAAfuiB,EAAenqB,QAAfmqB,EAAelqB,WAAA,wECD5B,MAAMuhH,EAKJ7iH,YAAY1F,EAAc6tB,EAAkB26F,GAC1C5iH,KAAK5F,KAAOA,EACZ4F,KAAKioB,SAAWA,EAChBjoB,KAAK4iH,eAAiBA,CACxB,EAMI,MAAOC,EAHb/iH,cAIEE,KAAA8iH,cAAyC,GAEzCr5F,KAAK4c,GACH,OAAOA,EAAe13B,UAAW4pG,IAC/B,MAAM6J,EAAiB7J,EAAQqJ,gBACzBmB,EAAgBxK,EAAQyK,eACxBC,EAA4C,GAClD,UAAWC,KAAgBljH,KAAK8iH,cAAe,CAC7C,MAAMjF,EAA6B79G,KAAKmjH,SAASD,EAAcH,GACzDK,EAA+BpjH,KAAKmjH,SAASD,EAAcd,GAC5C,OAAjBvE,GAA2C,OAAlBuF,GAC3BF,EAAaN,eAAe/E,GAER,OAAlBuF,GACFH,EAAiB/mH,KAAKgnH,GAExBljH,KAAK8iH,cAAgBG,CACvB,GAEJ,CAEAt0G,UAAUvU,EAAc6tB,EAAkB26F,GACxC5iH,KAAK8iH,cAAc5mH,KAAK,IAAIymH,EAAiBvoH,EAAM6tB,EAAU26F,GAC/D,CAEQO,SAASD,EAAgChB,GAC/C,UAAWp9F,KAAQo9F,EACjB,GAAIp9F,EAAK1qB,OAAS8oH,EAAa9oH,MAAQ+X,YAAU2S,EAAKmD,SAAUi7F,EAAaj7F,UAC3E,OAAOnD,EAGX,OAAO,IACT,iDAjCW+9F,EAAkB,+DAAlBA,EAAkB1hH,QAAlB0hH,EAAkBzhH,UAAAC,WAFjB,QAAM,yCCtBRgiH,iCAAU,KACpBC,KAAA,QACAD,EAAApO,OAAA,SACAoO,EAAA5yE,IAAA,MACA4yE,EAAAvkG,KAAA,OACAukG,EAAArS,IAAA,MACAqS,EAAA3zF,KAAA,OACA2zF,EAAAxwF,KAAA,4CCEI,MAAO0wF,EAKXzjH,YAAY0jH,EAAiBC,EAAiBxxF,GAC5CjyB,KAAKwjH,QAAUA,EACfxjH,KAAKyjH,QAAUA,EACfzjH,KAAKiyB,QAAUA,CACjB,EAGF,MAAMyxF,EAKJD,QAAQx7F,GACN,OAAOze,sBAAsBxJ,KAAK2jH,UAAUF,WAAWzjH,KAAK4jH,SAAS37F,IACvE,CAEAu7F,QAAQv7F,GACN,MAAO,GAAGjoB,KAAK2jH,UAAUH,WAAWxjH,KAAK4jH,SAAS37F,IACpD,CAEAgK,QAAQhK,GACN,MAAO,GAAGjoB,KAAK2jH,UAAU1xF,WAAWjyB,KAAK4jH,SAAS37F,IACpD,CAEAnoB,YACE6jH,EACAC,EACAx8E,GAEApnC,KAAK2jH,UAAYA,EACjB3jH,KAAK4jH,SAAWA,EAChB5jH,KAAKonC,OAASA,SAAW,CAAO,GAClC,EAMI,MAAOy8E,EAHb/jH,cAIEE,KAAA8jH,eAAiB9jH,KAAK+jH,eACpB,IAAIR,EAAqB/5G,qBAAsBA,mBAAoBA,qBAClEye,GAEIA,IAAao7F,EAAWp7F,EAASmW,YAAcnW,EAASmW,YACzD50B,wBAGJ,MACS,IAIXxJ,KAAAgkH,WAAY,IAAInS,KAAgBtpG,UAEhCvI,KAAAikH,iBAAmB,CACjBh/F,OAAQ,IAAIs+F,EAAqB/5G,oBAAqBA,kBAAmBA,oBACzEzB,OAAQ,IAAIw7G,EAAqB/5G,oBAAqBA,kBAAmBA,oBACzE6hB,OAAQ,IAAIk4F,EAAqB/5G,oBAAqBA,kBAAmBA,oBACzEgf,IAAK,IAAI+6F,EAAqB/5G,kBAAmBA,eAAgBA,kBACjEi2B,OAAQ,IAAI8jF,EAAqB/5G,oBAAqBA,kBAAmBA,oBACzE06G,OAAQ,IAAIX,EAAqB/5G,qBAAsBA,kBAAmBA,qBAC1E26G,SAAU,IAAIZ,EACZ/5G,qBACAA,oBACAA,sBAEF46G,WAAY,IAAIb,EACd/5G,qBACAA,sBACAA,yBAIJxJ,KAAAywC,IAAM,CACJtN,QAAUlb,GAAkBze,iBAAiBye,EAASo8F,cACtDp/F,OAASgD,IACP,MAAMmC,EAAK,IAAIqoB,IACbxqB,EAASuoB,UACTvoB,EAAS0Z,UACT1Z,EAASq8F,YACTh/F,WACF,OAAO9b,iBAAiB4gB,IAAE,EAE5BoqC,MAAQvsC,IACN,MAAMmC,EAAK,IAAIqoB,IACbxqB,EAASs8F,gBACTt8F,EAASu8F,gBACTv8F,EAASw8F,kBACTn/F,WACF,OAAO9b,iBAAiB4gB,IAAE,EAE5Bs6F,YAAcz8F,IACZ,MAAMmC,EAAK,IAAIqoB,IACbxqB,EAAS08F,eACT18F,EAAS28F,eACT38F,EAAS48F,iBACTv/F,WACF,OAAO9b,iBAAiB4gB,IAAE,EAE5ByV,SAAW5X,GACTze,0BAA0Bye,EAASo8F,cAAcp8F,EAASmpB,kBAG9DpxC,KAAA8kH,cAAgB,CACdC,UAAWA,IAAMv7G,+BACjBw7G,UAAWA,IAAMx7G,2BACjBsV,KAAOmJ,GAAkBze,kCAAkCye,EAASuoB,aACpEy0E,UAAYh9F,GAAkBze,kCAAkCye,EAASuoB,cAG3ExwC,KAAAm1G,QAAU,CACR+P,kBAAmBA,IAAM17G,2BAG3BxJ,KAAA62B,SAAW,CAET,WAAY72B,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBz7F,IAAMP,GAAajoB,KAAKskC,KAAKrc,IACnF,cAAejoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAChEjoB,KAAKskC,KAAKrc,IAEZ,uBAAwBjoB,KAAK+jH,eAC3B,IAAIR,EAAqB/5G,uBAAwBA,oBAAqBA,uBACrEye,GAAaze,oBAAoBye,EAAS2c,oBAAoB3c,EAASva,aAG1E,aAAc1N,KAAK+jH,eACjB/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAaze,+BAA+Bye,EAASk9F,gBAExD,aAAcnlH,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC/DjoB,KAAKgxG,IAAI/oF,IAGX,cAAejoB,KAAK+jH,eAClB/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAajoB,KAAK8e,KAAKmJ,GACvBA,KACC,GAAMze,oCAAoCxJ,KAAK8e,KAAKmJ,SAGxD,YAAajoB,KAAK+jH,eAChB/jH,KAAKikH,iBAAiBl8G,OACrBkgB,GAAajoB,KAAK8e,KAAKmJ,GACvBA,KACC,GAAMze,oCAAoCxJ,KAAK8e,KAAKmJ,SAGxD,cAAejoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAChEjoB,KAAK8e,KAAKmJ,IAGZ,aAAcjoB,KAAK+jH,eACjB/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAajoB,KAAKolH,IAAIn9F,GACtBA,KACC,GAAMze,oCAAoCxJ,KAAKolH,IAAIn9F,SAGvD,aAAcjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC/DjoB,KAAKolH,IAAIn9F,IAGX,mBAAoBjoB,KAAK+jH,eACvB/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAajoB,KAAKqlH,UAAUp9F,GAC5BA,KACC,GAAMze,oCAAoCxJ,KAAKqlH,UAAUp9F,SAG7D,mBAAoBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GACrEjoB,KAAKqlH,UAAUp9F,IAGjB,aAAcjoB,KAAK+jH,eACjB/jH,KAAKikH,iBAAiBh/F,OACtBjlB,KAAKywC,IAAIxrB,OACRgD,KACC,GAAMze,oCAAoCxJ,KAAKywC,IAAIxrB,OAAOgD,SAG9D,WAAYjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAAQ/H,KAAKywC,IAAItN,QAAUlb,KAC/E,GAAMze,oCAAoCxJ,KAAKywC,IAAItN,QAAQlb,SAE7D,aAAcjoB,KAAK+jH,eACjB/jH,KAAKikH,iBAAiB54F,OACtBrrB,KAAKywC,IAAItN,QACRlb,KACC,GAAMze,YAAYxJ,KAAKywC,IAAItN,QAAQlb,cACnC,GAAMze,YAAYxJ,KAAKywC,IAAItN,QAAQlb,4BAGvC,YAAajoB,KAAK+jH,eAChB,IAAIR,EAAqB/5G,mBAAoBA,iBAAkBA,mBAC/DxJ,KAAKywC,IAAI+jB,MACRvsC,KACC,GAAMze,oCAAoCxJ,KAAKywC,IAAI+jB,MAAMvsC,MACzD,GAAMze,wBAAwBxJ,KAAKywC,IAAI+jB,MAAMvsC,2BAGjD,WAAYjoB,KAAK+jH,eACf,IAAIR,EAAqB/5G,mBAAoBA,gBAAiBA,mBAC9DxJ,KAAKywC,IAAIi0E,YACRz8F,KACC,GAAMze,oCAAoCxJ,KAAKywC,IAAIi0E,YAAYz8F,SAGnE,cAAejoB,KAAK+jH,eAClB,IAAIR,EAAqB/5G,sBAAuBA,mBAAoBA,sBACpExJ,KAAKywC,IAAItN,SAGX,kBAAmBnjC,KAAK+jH,eACtB/jH,KAAKikH,iBAAiBh/F,OACtBjlB,KAAKywC,IAAI5Q,SACR5X,KACC,GAAMze,oCAAoCxJ,KAAKywC,IAAI5Q,SAAS5X,SAGhE,gBAAiBjoB,KAAK+jH,eACpB/jH,KAAKikH,iBAAiBl8G,OACtB/H,KAAKywC,IAAI5Q,SACR5X,KACC,GAAMze,6BAA6BxJ,KAAKywC,IAAI5Q,SAC1C5X,0CAIN,kBAAmBjoB,KAAK+jH,eACtB/jH,KAAKikH,iBAAiB54F,OACtBrrB,KAAKywC,IAAI5Q,SACR5X,KACC,GAAMze,0BAA0BxJ,KAAKywC,IAAI5Q,SAAS5X,gCAGtD,oBAAqBjoB,KAAK+jH,eACxB,IAAIR,EACF/5G,wBACAA,oBACAA,wBAEFxJ,KAAKywC,IAAI5Q,UAGX,iBAAkB7/B,KAAK+jH,eACrB,IAAIR,EAAqB/5G,kBAAmBA,gBAAiBA,kBAC5Dye,GAAaze,mBAAmBye,EAASo8F,uBAC1C,MACE,EAAG76G,oCAGP,oBAAqBxJ,KAAK+jH,eACxB,IAAIR,EAAqB/5G,qBAAsBA,mBAAoBA,qBAClEye,GAAaze,mBAAmBye,EAASq9F,wBAAwBr9F,EAASoqB,kBAC1EpqB,KACC,GAAIze,wBAAwBye,EAASoqB,wCAGzC,mBAAoBryC,KAAK+jH,eACvB,IAAIR,EAAqB/5G,oBAAqBA,kBAAmBA,oBAChEye,GAAaze,mBAAmBye,EAASq9F,kBAE5C,kBAAmBtlH,KAAK+jH,eACtB,IAAIR,EAAqB/5G,mBAAoBA,iBAAkBA,mBAC9Dye,IACC,IAAI2W,EAAUp1B,qBACd,OAAIye,EAASuoB,YACX5R,EAAU,IAAI3W,EAASuoB,cAElBhnC,wBAAwBo1B,GAAO,GAI1C,+BAAgC5+B,KAAK+jH,eACnC/jH,KAAKikH,iBAAiBl8G,OACtB/H,KAAK8kH,cAAcC,UACnB,MAAO,IAET,iCAAkC/kH,KAAK+jH,eACrC/jH,KAAKikH,iBAAiBh/F,OACtBjlB,KAAK8kH,cAAcE,UACnB,MAAO,IAET,iCAAkChlH,KAAK+jH,eACrC/jH,KAAKikH,iBAAiBC,OACtBlkH,KAAK8kH,cAAcE,UACnB,MAAO,IAET,0BAA2BhlH,KAAK+jH,eAC9B/jH,KAAKikH,iBAAiBl8G,OACtB/H,KAAK8kH,cAAchmG,KACnB,MACE,GAAItV,mEAGR,yBAA0BxJ,KAAK+jH,eAC7B/jH,KAAKikH,iBAAiBh/F,OACtBjlB,KAAK8kH,cAAcG,UACnB,MAAO,IAET,0BAA2BjlH,KAAK+jH,eAC9B/jH,KAAKikH,iBAAiBl8G,OACtB/H,KAAK8kH,cAAcG,UACnB,MAAO,IAET,4BAA6BjlH,KAAK+jH,eAChC/jH,KAAKikH,iBAAiB54F,OACtBrrB,KAAK8kH,cAAcG,UACnB,MAAO,IAGT,oBAAqBjlH,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC/Dze,YAAYye,EAASs9F,aAAa,MAE3C,iCAAkCvlH,KAAK+jH,eACrC/jH,KAAKikH,iBAAiB54F,OACrBpD,GACQze,YAAYye,EAASqwB,gBAAgB,MAGhD,eAAgBt4C,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC1Dze,YAAY,YAAYye,EAASu9F,cAAc,SAExD,mCAAoCxlH,KAAK+jH,eACvC/jH,KAAKikH,iBAAiB54F,OACrBpD,GACQze,YACLye,EAASw9F,YAAYrqH,OAAS,EAC1B,yBACA,iBAAiB6sB,EAASw9F,YAAY,SAIhD,iCAAkCzlH,KAAK+jH,eACrC/jH,KAAKikH,iBAAiB54F,OACrBpD,GACQze,YACLye,EAASy9F,SAAStqH,OAAS,EAAI,gBAAkB,SAAS6sB,EAASy9F,SAAS,SAIlF,iCAAkC1lH,KAAK+jH,eACrC/jH,KAAKikH,iBAAiB54F,OACrBpD,GACQze,YACLye,EAAS09F,SAASvqH,OAAS,EAAI,gBAAkB,SAAS6sB,EAAS09F,SAAS,SAKlF,8BAA+B3lH,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAChFjoB,KAAK4lH,gBAAgB39F,IAGvB,sBAAuBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GACxEjoB,KAAK6lH,YAAY59F,IAEnB,oBAAqBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GACtEjoB,KAAK6lH,YAAY59F,IAEnB,sBAAuBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GACxEjoB,KAAK6lH,YAAY59F,IAGnB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC5EjoB,KAAK8lH,gBAAgB79F,IAEvB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC5EjoB,KAAK8lH,gBAAgB79F,IAEvB,yBAA0BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC3EjoB,KAAK+lH,eAAe99F,IAEtB,yBAA0BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC3EjoB,KAAK+lH,eAAe99F,IAEtB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC5EjoB,KAAKgmH,gBAAgB/9F,IAEvB,wBAAyBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAC1EjoB,KAAKgmH,gBAAgB/9F,IAEvB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC5EjoB,KAAKgmH,gBAAgB/9F,IAEvB,uBAAwBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBz7F,IAAMP,GACtEjoB,KAAKimH,gBAAgBh+F,IAEvB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAC5EjoB,KAAKimH,gBAAgBh+F,IAGvB,aAAcjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC/DjoB,KAAK8O,IAAImZ,IAEX,WAAYjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAAajoB,KAAK8O,IAAImZ,IACrF,aAAcjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GAC/DjoB,KAAK8O,IAAImZ,IAEX,mBAAoBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GACrEjoB,KAAKkmH,MAAMj+F,IAGb,4BAA6BjoB,KAAK+jH,eAChC/jH,KAAKikH,iBAAiBl8G,OACtB/H,KAAKm1G,QAAQ+P,kBACb,MAAO,IAGT,iBAAkBllH,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GACnEjoB,KAAKmmH,QAAQl+F,IAEf,eAAgBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GACjEjoB,KAAKmmH,QAAQl+F,IAEf,iBAAkBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASpD,GACnEjoB,KAAKmmH,QAAQl+F,IAEf,wBAAyBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC1EjoB,KAAKomH,YAAYn+F,IAEnB,sBAAuBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GACxEjoB,KAAKomH,YAAYn+F,IAEnB,wBAAyBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBC,OAASj8F,GAC1EjoB,KAAKomH,YAAYn+F,IAEnB,oBAAqBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiB54F,OAASjB,GACtEpqB,KAAKqmH,cAAcj8F,IAErB,gBAAiBpqB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAClEjoB,KAAKsmH,OAAOr+F,IAEd,cAAejoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAChEjoB,KAAKsmH,OAAOr+F,IAEd,cAAejoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAChEjoB,KAAKsjH,KAAKr7F,IAEZ,gBAAiBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAClEjoB,KAAKsmH,OAAOr+F,IAEd,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAC5EjoB,KAAK8X,UAAUmQ,IAEjB,wBAAyBjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAC1EjoB,KAAK8X,UAAUmQ,IAEjB,0BAA2BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAC5EjoB,KAAK8X,UAAUmQ,IAEjB,gCAAiCjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBh/F,OAASgD,GAClFjoB,KAAKumH,eAAet+F,IAEtB,8BAA+BjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAChFjoB,KAAKumH,eAAet+F,IAEtB,gCAAiCjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBxkF,OAASxX,GAClFjoB,KAAKumH,eAAet+F,IAEtB,mCAAoCjoB,KAAK+jH,eACvC/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAajoB,KAAK6/B,SAAS5X,IAE9B,mCAAoCjoB,KAAK+jH,eACvC/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAajoB,KAAK6/B,SAAS5X,IAE9B,kCAAmCjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBz7F,IAAMP,GACjFjoB,KAAKwmH,iBAAiBv+F,IAExB,gCAAiCjoB,KAAK+jH,eAAe/jH,KAAKikH,iBAAiBl8G,OAASkgB,GAClFjoB,KAAKwmH,iBAAiBv+F,IAExB,kCAAmCjoB,KAAK+jH,eACtC/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAajoB,KAAKwmH,iBAAiBv+F,IAEtC,oCAAqCjoB,KAAK+jH,eACxC/jH,KAAKikH,iBAAiBE,SACrBl8F,GAAajoB,KAAKwmH,iBAAiBv+F,IAEtC,sCAAuCjoB,KAAK+jH,eAC1C/jH,KAAKikH,iBAAiBG,WACrBn8F,GAAajoB,KAAKwmH,iBAAiBv+F,IAGtC,4BAA6BjoB,KAAK+jH,eAChC/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAqCjoB,KAAKymH,WAAWx+F,IAExD,0BAA2BjoB,KAAK+jH,eAC9B/jH,KAAKikH,iBAAiBl8G,OACrBkgB,GAAqCjoB,KAAKymH,WAAWx+F,IAExD,4BAA6BjoB,KAAK+jH,eAChC/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAqCjoB,KAAKymH,WAAWx+F,IAExD,0BAA2BjoB,KAAK+jH,eAC9B/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAyCjoB,KAAK0mH,SAASz+F,IAE1D,wBAAyBjoB,KAAK+jH,eAC5B/jH,KAAKikH,iBAAiBl8G,OACrBkgB,GAAyCjoB,KAAK0mH,SAASz+F,IAE1D,0BAA2BjoB,KAAK+jH,eAC9B/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAyCjoB,KAAK0mH,SAASz+F,IAE1D,qCAAsCjoB,KAAK+jH,eACzC/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAiCjoB,KAAK2mH,YAAY1+F,IAErD,mCAAoCjoB,KAAK+jH,eACvC/jH,KAAKikH,iBAAiBl8G,OACrBkgB,GAAiCjoB,KAAK2mH,YAAY1+F,IAErD,qCAAsCjoB,KAAK+jH,eACzC/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAiCjoB,KAAK2mH,YAAY1+F,IAErD,+BAAgCjoB,KAAK+jH,eACnC/jH,KAAKikH,iBAAiBh/F,OACrBgD,GAAwCjoB,KAAK4mH,eAAe3+F,IAE/D,6BAA8BjoB,KAAK+jH,eACjC/jH,KAAKikH,iBAAiBl8G,OACrBkgB,GAAwCjoB,KAAK4mH,eAAe3+F,IAE/D,+BAAgCjoB,KAAK+jH,eACnC/jH,KAAKikH,iBAAiB54F,OACrBpD,GAAwCjoB,KAAK4mH,eAAe3+F,KAIjE87F,eACEJ,EACAC,EACAx8E,GAEA,OAAO,IAAIs8E,EAAYC,EAAWC,EAAUx8E,EAC9C,CAEA9C,KAAKrc,GACH,OAAOze,kBAAkBye,EAASva,WACpC,CAEAsjG,IAAI/oF,GACF,OAAOze,iBAAiBye,EAAS4+F,SACnC,CAEA/nG,KAAKmJ,GACH,OAAOze,kBAAkBye,EAASuoB,YACpC,CAEA40E,IAAIn9F,GACF,OAAOze,kCAAkCye,EAAS7tB,OACpD,CAEAirH,UAAUp9F,GACR,OAAOze,wBAAwBye,EAAS7tB,OAC1C,CAEAyrH,YAAY59F,GACV,OAAOze,oBAAoBye,EAAS6+F,aACtC,CAEAhB,gBAAgB79F,GACd,OAAOze,uBAAuBye,EAAS8+F,MACzC,CAEAhB,eAAe99F,GACb,OAAOze,sBAAsBye,EAAS++F,2BAA2B/+F,EAAS8+F,KAC5E,CAEAf,gBAAgB/9F,GACd,OAAIA,GAAUg/F,KACLz9G,sBAAsBye,EAASg/F,uBAAuBh/F,EAAS8+F,OAEjEv9G,YAAYye,EAASi/F,WAAWlnH,KAAKgkH,UAC1C,YACA/7F,EAASi/F,2BACSj/F,EAAS8+F,MAC/B,CAEAd,gBAAgBh+F,GACd,OAAOze,YAAYxJ,KAAKgkH,UAAU,YAAa/7F,EAASk/F,yBAAyBl/F,EAAS8+F,KAC5F,CAEAj4G,IAAImZ,GACF,OAAOze,iBAAiBye,EAAS5T,eAC/B4T,EAASjK,UAAYiK,EAASjK,UAAYiK,EAAS1P,OAEvD,CAEAkuG,WAAWx+F,GACT,OAAOze,0BAA0Bye,EAAS5T,aAC5C,CAEAqyG,SAASz+F,GACP,OAAOze,uBAAuBye,GAAUm/F,WAC1C,CAEAT,YAAY1+F,GACV,OAAOze,kDAAkDye,EAASo/F,SACpE,CAEAT,eAAe3+F,GACb,OAAOze,kDAAkDye,EAASq/F,gBACpE,CAEApB,MAAMj+F,GACJ,OAAOze,oBAAoBye,EAAS7tB,OACtC,CACAg0C,aAAanmB,GACX,OAAOze,2BAA2Bye,EAAS7tB,OAC7C,CACA+rH,QAAQl+F,GACN,OAAOze,qBAAqBye,EAASwY,eACvC,CAEAmlF,gBAAgB39F,GACd,OAAOze,oCAAoCye,EAAS03B,gBACtD,CAEAymE,YAAYn+F,GACV,IAAI2W,EAAU3W,EAAS0+E,UACvBx0F,mBAAU8V,EAAU,CAAC3nB,EAAOiiB,KAC1B,GAAW,aAAPA,EAAoB,CACtB,IAAIm4F,EAAQ,IAAMn4F,EAAM,IACxBqc,EAAUA,EAAQx2B,QAAQsyG,EAAOp6G,EACnC,IAEKkJ,YAAYo1B,GACrB,CAEA0nF,OAAOr+F,GACL,OAAOze,aAAaye,EAASs/F,aAC/B,CAEAjE,KAAKr7F,GACH,OAAOze,mBAAmBye,EAASu/F,qCACrC,CAEA1vG,UAAUmQ,GACR,OAAOze,uBAAuBye,EAASyZ,gBACzC,CAEA6kF,eAAet+F,GACb,OAAOze,6BAA6Bye,EAASw/F,qBAC/C,CAEA5nF,SAAS5X,GACP,OAAOze,sBAAsBye,EAASka,eACxC,CAEAqkF,iBAAiBv+F,GACf,OAAOze,wCAAwCye,GAAU1P,OAC3D,CAEA8tG,cAAcj8F,GACZ,OAAO5gB,YAAY4gB,GACrB,CAEAs9F,cAAc5iG,GACZ,OAAIA,EAAK1qB,MAAQ0qB,EAAK1qB,KAAKilB,WAAW,aAG7Brf,KAAK+jH,eACV,IAAIR,EACFz+F,EAAK1qB,KAAKgO,QAAQ,YAAa,IAC/B,GACA0c,EAAK1qB,KAAKgO,QAAQ,YAAa,KAEhCu/G,GAAc,IAGZ3nH,KAAK62B,SAAS/R,EAAK1qB,OAAS4F,KAAK8jH,cAC1C,CAEA/F,gBAAgBj5F,GACd,OAAO9kB,KAAK0nH,cAAc5iG,GAAMmN,QAAQnN,EAAKmD,SAC/C,CAEA+wC,gBAAgBl0C,GACd,OACE9kB,KAAK0nH,cAAc5iG,GAAMsiB,OAAOtiB,EAAKmD,UAAUnD,EAAK8iG,UAAU1pB,OAASp5E,EAAK8iG,UAAUviG,MAE1F,CAEA24F,cAAcl5F,GACZ,OAAO9kB,KAAK0nH,cAAc5iG,GAAM2+F,QAAQ3+F,EAAKmD,SAC/C,CAEA4/F,gBAAgB/iG,GACd,OAAO9kB,KAAK0nH,cAAc5iG,GAAM0+F,QAAQ1+F,EAAKmD,SAC/C,CAEAy6F,eAAe59F,GACb,OAAO9kB,KAAK0nH,cAAc5iG,GAAM6+F,UAAUH,OAC5C,iDAvpBWK,EAAkB,+DAAlBA,EAAkB1iH,QAAlB0iH,EAAkBziH,UAAAC,WAFjB,QAAM,4IClCd,MAAOymH,EACXhoH,YACUuxB,EACAgV,EACAi2E,EACAyL,GAHA/nH,KAAAqxB,sBACArxB,KAAAqmC,iBACArmC,KAAAs8G,qBACAt8G,KAAA+nH,oBACP,CAEHljG,oBAAqBC,OAAME,SACzB,OAAO,IAAI8qB,aAAYC,IACrB/qB,EAAKrW,UACFgb,IACqB,MAAhBA,EAAKjb,OACP1O,KAAKgoH,sBAAsBljG,IAE3B9kB,KAAKqmC,eAAeb,UACpB1gB,EAAKmN,SAAU,EACfjyB,KAAKqxB,oBAAoBusF,WAAW94F,GAAI,EAG3C6E,IACC7E,EAAKmN,SAAU,EACfnN,EAAK8iG,UAAYj+F,EAAKpI,MACtBwuB,EAASxuB,MAAMoI,EAAI,EAErB,KACEomB,EAAS3qB,UAAQ,EAClB,EAGP,CAEA4iG,sBAAsBljG,GACpB,MAAMspB,EAAe,IAAIg7D,IACvBp3E,IAAiB1Q,KACjBthB,KAAKs8G,mBAAmBuL,gBAAgB/iG,IAE1CspB,EAAak7D,gBAAiB,EAC9BtpG,KAAKqxB,oBAAoBxG,KAAKujB,GAE9B,MAAMg1E,EAAgB,IAAIrW,IAAcjoF,EAAK1qB,KAAM0qB,EAAKmD,UACxDjoB,KAAKqmC,eAAeq7E,eAAe0B,GAEnCpjH,KAAK+nH,mBAAmBp5G,UACtBy0G,EAAchpH,KACdgpH,EAAcn7F,SACbggG,IACCjoH,KAAKqxB,oBAAoBusF,WAAWqK,EAAS,EAGnD,iDAlDWH,GAAkB7mH,qBAAAC,KAAAD,qBAAA8H,KAAA9H,qBAAA+H,KAAA/H,qBAAAgI,KAAA,+DAAlB6+G,EAAkB3mH,QAAlB2mH,EAAkB1mH,UAAAC,WAFjB,QAAM,oDCTd,MAAO6mH,EACXpoH,cAAe,CAEfo4B,OAAOo8C,GACL,MAAMh0E,EAAQg0E,GAAUnR,eAAe7iE,MACvC,IACE,MAAMo8E,EAAYzhC,KAAKC,UAAUD,KAAKy4B,MAAMpzE,GAAQ,KAAM,GAC1Dg0E,EAASnR,cAAc7iE,MAAQo8E,EAC/BpI,EAASnR,cAAczB,MAAMznE,OAAS,OAGtC,MAAMkuH,EADe,GADFzrC,EAAU//E,MAAM,MAAMvB,OAGzCk5E,EAASnR,cAAczB,MAAMznE,OAASkuH,EAAS,IACjD,OAAa,CACf,iDAdWD,EAA4B,+DAA5BA,EAA4B/mH,QAA5B+mH,EAA4B9mH,UAAAC,WAF3B,QAAM,qFCCpB,MAAe+mH,EAGbtoH,YAAsB65C,GAAA35C,KAAA25C,OAFZ35C,KAAAqoH,UAAYC,gBAEe,CAIrCnsF,MACE,OAAOn8B,KAAKqoH,UAAUlsF,KACxB,EAMI,MAAOosF,UAA6BH,EACxCtoH,YAAY65C,GACVtrC,MAAMsrC,EACR,CAEA6uE,YAAYnrE,GACV,OAAOr9C,KAAK25C,KAAK+J,kBAAkB,IAAM1jD,KAAKqoH,UAAUG,SAAS1qH,MAAMkC,KAAKqoH,UAAWhrE,GACzF,iDAPWkrE,GAAoBtnH,+BAAA,+DAApBsnH,EAAoBpnH,QAApBonH,EAAoBnnH,UAAAC,WAFnB,QAAM,EAed,MAAOonH,UAA6BL,EACxCtoH,YAAY65C,GACVtrC,MAAMsrC,EACR,CAEA6uE,YAAYnrE,GACV,OAAOr9C,KAAK25C,KAAKiK,IAAI,IAAM5jD,KAAKqoH,UAAUG,SAAS1qH,MAAMkC,KAAKqoH,UAAWhrE,GAC3E,iDAPWorE,GAAoBxnH,+BAAA,+DAApBwnH,EAAoBtnH,QAApBsnH,EAAoBrnH,UAAAC,WAFnB,QAAM,EAed,MAAOqnH,EACX5oH,YAAmB6oH,EAAoCvqB,GAApCp+F,KAAA2oH,QAAoC3oH,KAAAo+F,OAA8B,iDAD1EsqB,GAAsBznH,qBAAAsnH,GAAAtnH,qBAAAwnH,GAAA,+DAAtBC,EAAsBvnH,QAAtBunH,EAAsBtnH,UAAAC,WAFrB,QAAM,EChCd,MAAOunH,EAGX9oH,YAAoBmO,GAAAjO,KAAAiO,SAFXjO,KAAA6oH,yBAA2B,IAC3B7oH,KAAA8oH,iBAAmB,CACyB,CAErDp2G,IACEjD,EACAs5G,EAA0B/oH,KAAK6oH,yBAC/BG,EAAkBhpH,KAAK8oH,kBAEvB,SAAO5hF,SAAM8hF,EAASD,EAAiB/oH,KAAKiO,OAAO06G,OAAO35G,QACxDi6G,aAAUjpH,KAAKiO,OAAOmwF,QAAK,EAC3BnvF,aAAUQ,IAAI,EACd6jG,eAAY,CAAEC,UAAU,EAAMC,WAAY,KAAG,EAC7CL,OAEJ,iDAhBWyV,GAAY3nH,qBAAAC,GAAA,+DAAZ0nH,EAAYznH,QAAZynH,EAAYxnH,UAAAC,WAFX,QAAM,wECFd,MAAO6nH,EACXppH,cAAe,CASfqpH,SAAY7oH,EAAU+7C,EAAe+zB,EAAW,MAC9C,IAAIv0E,EAAsB,KAC1BwgD,SAAMh9C,KACH+pH,GACEvtH,EACCsW,QAAMi3G,EAAMh5C,KAAc9vE,EACtB8oH,EACAppH,KAAKmpH,SAAS7oH,EAAO8oH,EAAKjrF,UAAY,GAAIiyC,IAE7Cv0E,CACT,CAQAwtH,WAAWhtE,EAAeitE,GACxB,MAAMC,EAAYp3G,cAAYkqC,GACxB5/C,EAASA,CAAC+sH,EAAcF,IAC5BE,EAAKtsH,IAAKksH,GACJA,EAAKh/F,KAAOk/F,EAAal/F,GACpB,IAAKg/F,EAAMxoC,UAAU,IACnBwoC,EAAKjrF,WACdirF,EAAKjrF,SAAW1hC,EAAO2sH,EAAKjrF,SAAUmrF,IAEjCF,IAGX,IAAIK,EAAgBhtH,EAAO8sH,EAAWD,GAClCnpE,EAASngD,KAAKmpH,SAASG,GAAchpH,OAAO6/C,OAAQopE,GAExD,KAAOppE,GACLspE,EAAgBhtH,EAAOgtH,EAAetpE,GACtCA,EAASngD,KAAKmpH,SAAShpE,GAAQ7/C,OAAO6/C,OAAQopE,GAGhD,OAAOE,CACT,iDAjDWP,EAAe,+DAAfA,EAAe/nH,QAAf+nH,EAAe9nH,UAAAC,WAFd,QAAM,8DCDd,MAAOsO,EACX7P,YAAqBm6G,GAAAj6G,KAAAi6G,MAAe,CAE5B,wBAAOyP,CAAkBC,GAC/B,OAAOA,EAAShhH,OAAOihH,WAASC,cAClC,CAEA,eAAOC,CAASC,KAAsBJ,GACpC,OAAOh6G,EAAkB+5G,kBAAkB,IAAKK,EAAW,CAAC,KAAO,MAAQJ,GAC7E,CAEQK,OAAOC,EAAgBF,GAAW,KAASJ,GACjD,OAAOh6G,EAAkBm6G,SAASC,EAAU/pH,KAAKi6G,KAAMgQ,KAASN,EAClE,CAEA52F,UAAUg3F,GAAW,GACnB,OAAO/pH,KAAKgqH,OAAO3rF,KAASne,OAAQ6pG,EACtC,CAEAG,cAAc9oD,EAAc2oD,GAAW,GACrC,OAAO/pH,KAAKgqH,OAAO3rF,KAASne,OAAQ6pG,EAAU3oD,EAChD,CAEA+oD,UAAUJ,GAAW,GACnB,OAAO/pH,KAAKgqH,OAAO3rF,KAASnV,OAAQ6gG,EACtC,CAEA32F,QAAQguC,EAAc2oD,GAAW,GAC/B,OAAO/pH,KAAKgqH,OAAO3rF,KAAS9e,KAAMwqG,EAAU3oD,EAC9C,CACAygD,UAAUzgD,EAAc2oD,GAAW,GACjC,OAAO/pH,KAAKgqH,OAAO3rF,KAASkqC,OAAQwhD,EAAU3oD,EAChD,CAEAgpD,OAAOL,GAAW,GAChB,OAAO/pH,KAAKgqH,OAAO3rF,KAASoqC,IAAKshD,EACnC,CACAM,UAAUN,GAAW,GACnB,OAAO/pH,KAAKgqH,OAAO3rF,KAASmqC,OAAQuhD,EACtC,CAGAO,YAAYlpD,EAAc2oD,GAAW,GACnC,OAAO/pH,KAAKgqH,OAAO3rF,KAASsqC,SAAUohD,EAAU3oD,EAClD,+DC1CF,MAAMmpD,EAAc,CAAC,CAAEljD,UAAW,EAAGmjD,YAAY,IAK3C,MAAOC,EAIX3qH,cAFAE,KAAA0qH,aAAiD,IAAIl8G,kBAAiC,MAGpFxO,KAAK2qH,OAAS,IAAIn8G,kBAAmC+7G,GACrDvqH,KAAK0qH,aAAaj7G,KAAKzP,KAAK2qH,OAAOrqH,MAAM,GAC3C,CAEAknE,cAAcr9D,GACZ,MAAMg9D,EAA2B,GACjC,QAASlrE,EAAI,EAAGA,EAAIkO,EAAMlO,IACxBkrE,EAAMjrE,KAAK,CAAEmrE,UAAWprE,EAAGuuH,YAAY,IAEzCxqH,KAAK2qH,OAAS,IAAIn8G,kBAAmC24D,EACvD,CAEAU,eAAe19D,GACbnK,KAAK0qH,aAAaj7G,KAAKtF,EACzB,CAEAw9D,iBACE,OAAO3nE,KAAK0qH,aAAa3iF,cAC3B,CAEA0/B,WACE,OAAOznE,KAAK2qH,OAAO5iF,cACrB,CAEA6iF,iBACE,MAAM1jH,EAAQlH,KAAK0qH,aAAapqH,MAAM+mE,UACtCrnE,KAAK0qH,aAAaj7G,KAAKzP,KAAK2qH,OAAOrqH,MAAM4G,EAAQ,GACnD,CAEA2jH,qBACE,MAAM3jH,EAAQlH,KAAK0qH,aAAapqH,MAAM+mE,UACtCrnE,KAAK0qH,aAAaj7G,KAAKzP,KAAK2qH,OAAOrqH,MAAM4G,EAAQ,GACnD,CAEA4jH,aACE,OAAO9qH,KAAK0qH,aAAapqH,OAAO+mE,YAAcrnE,KAAK2qH,OAAOrqH,MAAMlF,OAAS,CAC3E,CAEA2vH,cACE,OAA8C,IAAvC/qH,KAAK0qH,aAAapqH,OAAO+mE,SAClC,iDA7CWojD,EAAkB,+DAAlBA,EAAkBtpH,QAAlBspH,EAAkBrpH,UAAAC,WAFjB,QAAM,mOCmCd,MAAOgK,oDAAY,2DAAZA,GAAY,+DAFZ,CAACgqG,IAAoBtB,IAAkB5Q,IAAkBlgD,IAAW+nE,kBAAe//G,QAAA,CApB5FE,eACAgjB,IACAkgC,IACAngC,IACA6gC,IAEAtjD,sBACAorE,eAAaC,QAAQ,CACnBC,MAAO,CACL,CAAE38E,KAAM,QAASgkC,UAAW44C,KAC5B,CAAE58E,KAAM,SAAUgkC,UAAW64C,KAC7B,CAAE78E,KAAM,QAASgkC,UAAW84C,MAE9BE,mBAAoB,CAAC,CAAEh9E,KAAM,WAAYwkC,QAAS,6BAEpDy4C,wBACA4zC,gBAAcn0C,UAGNzoB,IAAkBlgC,IAAaD,IAAiB6gC,MAAgB,yJC3BrE,IAAMm8D,EAAN,MAAMA,GAIXprH,YAAoBgsB,GAAA9rB,KAAA8rB,OAHpB9rB,KAAA8gC,QAAU,aACV9gC,KAAAmrH,UAAY,eAE2B,CAEvCznG,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,UAC/B,CAEA3c,MAAMiG,EAAY7R,EAAe6yG,EAAgB,GAC/C,IAAI1nF,EAAU,GAAG1jC,KAAKmrH,aAAa/gG,kBAAmBghG,IACtD,OAAI7yG,IACFmrB,GAAW,SAASoI,mBAAmBvzB,MAElCvY,KAAK8rB,KAAKpZ,IAAiBgxB,GAAS10B,QAAKskG,iBAClD,CAEA+X,UAAUjhG,GACR,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAW1W,IAC1C,CAEAkhG,QAAQlhG,GACN,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,iBAAiB0X,SACxC,CAEAmhG,WAAWnhG,GACT,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAW1W,YAC1C,CAEAohG,YAAYC,EAAcjE,GACxB,OAAOxnH,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,WAAW2qF,YAAejE,IAC5D,CAEAkE,eAAethG,GACb,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAW1W,iBAC1C,CAEAuhG,mBAAmBvhG,GACjB,OAAOpqB,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,WAAW1W,uBAC1C,CAEAwhG,WAAWxhG,EAAY7R,EAAcne,GACnC,IAAIolB,EAAS,IAAIimB,aACjBjmB,SAASA,EAAO6gB,OAAO,OAAQ9nB,GAC1BpG,gBAAc/X,KACjBolB,EAASA,EAAO6gB,OAAO,OAAQjmC,IAE1B4F,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,WAAW1W,aAAe,KAAM,CAAE5K,UAClE,CAEAqsG,WAAWzhG,EAAY7R,EAAcne,GACnC,IAAIolB,EAAS,IAAIimB,aACjBjmB,SAASA,EAAO6gB,OAAO,OAAQ9nB,GAC/BiH,EAASA,EAAO6gB,OAAO,OAAQjmC,GACxB4F,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,WAAW1W,aAAe,CAAE5K,UAC9D,CAEAssG,MAAM1hG,EAAY7R,EAAcwzG,GAC9B,IAAIvsG,EAAS,IAAIimB,aACjBjmB,SAASA,EAAO6gB,OAAO,OAAQ9nB,GACxBvY,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,WAAW1W,UAAY2hG,EAAQ,CAC1DprF,QAAS,WACTnhB,UAEJ,CAEAyF,OAAO7qB,EAAcomC,EAAqBye,EAAW,GAAI+sE,EAAe,IACtE,OAAOhsH,KAAK8rB,KAAKzwB,KACf2E,KAAK8gC,QACL,CACE1mC,KAAMA,EACNsmC,aAAcF,EACdgf,UAAWP,EACXgtE,cAAeD,GAEjB,CACErrF,QAAS,YAGf,CAEAurF,aAAaptG,GACX,OAA0D,IAAnD3M,YAAU2M,EAAKyxB,qBAAsB,YAAqBzxB,EAAK0xB,UAAUtuC,SAAS,IAC3F,CAEAu9B,OAAOrlC,GACL,OAAO4F,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,kBAAkB1mC,IAAQ,CACxDumC,QAAS,YAEb,CAEAwrF,OAAO/qF,EAAkBgrF,GACvB,IAAIriF,EAAc,CAChB3vC,KAAMgnC,EACNvR,SAAUu8F,GAEZ,OAAOpsH,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,iBAAkBiJ,EAAa,CAC1DpJ,QAAS,YAEb,CAEA0rF,QAAQrrG,EAAgBwmG,EAAkB8E,EAAgBC,GACxD,OAAOvsH,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,eAAgB,CAC3CprB,QAASsL,EACTwrG,UAAW,UAAUhF,IACrB8E,KAAMA,EACN5hF,YAAa6hF,GAEjB,CAEAE,eACE,OAAOzsH,KAAK8rB,KAAKpZ,IAAc,GAAG1S,KAAKmrH,uBACzC,iDAjHWD,IAAajqH,qBAAAC,cAAA,+DAAbgqH,GAAa/pH,QAAb+pH,GAAa9pH,UAAAC,WAFZ,QAAM,GAEP6pH,KAAa/+F,cAAA,CAJzBC,O,mCAQ2BC,gBAJf6+F,8OCZTjqH,2BAAA,YAEEA,mBAAA,cAAAA,2BAAA,YAA0CA,mBAAA,GAAQA,2BAClDA,mBAAA,cAAAA,sBAAA,kCAGFA,mBAAA,YAAAA,oFAJQA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAnI,EAAAmrH,WAAoCzrH,sDAAA0rH,GAEtC1rH,sBAAA,GACAA,uBADA,SAAA0rH,EACA1rH,CADe,sCANzBA,oCAAA,GACEA,2BAAA,WACEA,mBAAA,UAAAA,uBAAA,EAAA2rH,GAAA,cAOF3rH,mBAAA,UAAAA,yGAPyBA,sBAAA,GAAAA,uBAAA,UAAAM,EAAAsrH,kCAWzB5rH,2BAAA,WAEEA,mBAAA,UAAAA,2BAAA,YAA0CA,mBAAA,GAASA,2BACnDA,mBAAA,YAAAA,sBAAA,kCAGFA,mBAAA,UAAAA,qEAJQA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAnI,EAAAmrH,WAAoCzrH,sDAAAM,EAAAsrH,OAExC5rH,sBAAA,GACAA,uBADA,SAAAM,EAAAsrH,MACA5rH,CADgB,YCVhB,MAAO6rH,GALbhtH,cAUEE,KAAA0sH,UAAoB,EAGpB1sH,KAAA+sH,QAAkB,kDARPD,GAAkB,4DAAlBA,GAAkB1jH,UAAA,oBAAA+C,OAAA,CAAA0gH,MAAA,QAAAH,SAAA,WAAAK,OAAA,UAAAviH,MAAA,EAAAC,KAAA,EAAAC,OAAA,gZAAAC,SAAA,SAAArB,EAAA7F,MAAA,EAAA6F,GDK/BrI,uBAZA,EAAA+rH,GAAA,qBAYA/rH,CAZ6D,EAAAgsH,GAAA,yBAAAhsH,4EAAtBA,uBAAxB,OAAAwC,EAAAopH,MAAAzxH,OAAA,EAAwB6F,CAAA,WAAAisH,sLESjC,MAAOC,WAAoCn9D,YAM/ClwD,YAAmBstH,GACjB/+G,QADiBrO,KAAAotH,cAFXptH,KAAAqtH,gBAAkB,mBAI1B,CAKA5+G,WACEzO,KAAKstH,MAAQ,oCAAoCttH,KAAKutH,WAAW9B,QAAQzrH,KAAKutH,WAAWvsG,UAAUhhB,KAAKutH,WAAWC,YAAYxtH,KAAKqtH,kBACpIrtH,KAAKytH,KAAO,mBAAmBztH,KAAKqtH,sBAAsBrtH,KAAKutH,WAAWC,mCAAmCxtH,KAAKutH,WAAWvsG,SAC7HhhB,KAAK8O,IAAM,4EAA4E9O,KAAKqtH,iBAC9F,CAEAlQ,SACEn9G,KAAKwwD,YACP,iDArBW28D,IAA2BlsH,8BAAAC,kBAAA,4DAA3BisH,GAA2B/jH,UAAA,8BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,uOCJ3BE,8FAOAA,kGAOAA,iGAOAA,6UA1BbvI,2BAAA,iBAEWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,wBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,UAAAA,mBAAA,KAIFA,6BAGEA,2BADF,UACEA,CAD8B,UAC9BA,mBAAA,KAGAA,2BACAA,sBAAA,qBAGAA,2BAAA,UAAAA,mBAAA,KAGAA,2BACAA,sBAAA,sBAGAA,2BAAA,WAAAA,mBAAA,MAGAA,2BACAA,sBAAA,sBAEFA,2BACAA,2BAAA,8BAEsBA,uBAAA,+BAAcwC,EAAA05G,QAAQ,GAE9Cl8G,oCAnCWA,uBAAA,OAAAwC,EAAAktD,MAeQ1vD,sBAAA,GAAAA,uBAAA,QAAAA,4BAAA,EAAAK,GAAAmC,EAAA6pH,QAOArsH,sBAAA,GAAAA,uBAAA,QAAAA,4BAAA,EAAAK,GAAAmC,EAAAgqH,OAOAxsH,sBAAA,GAAAA,uBAAA,QAAAA,4BAAA,GAAAK,GAAAmC,EAAAqL,MAEK7N,wBACAA,uBADA,eACAA,CADkB,wFC1BpC,MAAOysH,GACX5tH,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvC6hG,gBACE,OAAO3tH,KAAK8rB,KAAKpZ,IAAI,kBACvB,CAEAk7G,mBACE,OAAO5tH,KAAK8rB,KAAKpZ,IAAI,qBACvB,CAEAm7G,qBACE,OAAO7tH,KAAK8rB,KAAKpZ,IAAI,kCACvB,CAEAo7G,iBACE,OAAO9tH,KAAK8rB,KAAKpZ,IAAI,8BACvB,CAEAq7G,sBACE,OAAO/tH,KAAK8rB,KAAKpZ,IAAI,mCACvB,CAEAs7G,qBACE,OAAOhuH,KAAK8rB,KAAKpZ,IAAI,kCACvB,iDAzBWg7G,IAAazsH,qBAAAC,cAAA,+DAAbwsH,GAAavsH,QAAbusH,GAAatsH,UAAAC,WAFZ,QAAM,4BCSd,MAAO4sH,GASXnuH,YAAoBouH,GAAAluH,KAAAkuH,gBARZluH,KAAAmuH,uBAAyB,IAAI3/G,kBAAgC,IAE5DxO,KAAAouH,gBAA8CpuH,KAAKmuH,uBAAuBpmF,eAEnF/nC,KAAAquH,qBAAuB,IAAI9nF,UAE3BvmC,KAAAsuH,WAAY,CAEuC,CAEnDC,gBAAgBnkG,EAAY7R,EAAO,IAAK6yG,EAAQ,GAC9CprH,KAAKouH,gBACFp/G,QACCqV,UAAQmqG,IAAmCA,EAAMpkG,KAAI,EACrDnb,aAAU,OACRi4B,SAAM,EArBS,KAqBYl4B,QACzBC,aAAU,IACRjP,KAAKkuH,cAAc/pG,MAAMiG,EAAI7R,EAAM6yG,GAAOp8G,QACxCswB,OAAKjH,IACHr4B,KAAKsuH,WAAY,EACjBtuH,KAAKmuH,uBAAuB1+G,KAAK,CAAE/Q,CAAC0rB,GAAKiO,GAAU,MAEtD,EAEHo2F,YAAK,EACL7xB,YAAK,EACLiX,aAAU7zG,KAAKquH,yBAIpB1/G,WACL,CAEAytE,OAAOsyC,EAActkG,EAAYy7D,EAAQ,GACvC,OAAO7lF,KAAKouH,gBAAgBp/G,QAC1B9R,OAAKsxH,IACH,MAAMG,EAAQ,IAAIh0H,OAAO+zH,EAAM,MAK/B,OAJgBF,EAAMpkG,GACnB/F,OAAQrlB,GAAM2vH,EAAMzwH,KAAKc,EAAEuZ,OAC3Brb,IAAK8B,GAAMA,EAAEuZ,MACbrd,MAAM,EAAG2qF,EAAK,GAIvB,CAEA+oC,uBACE5uH,KAAKquH,qBAAqB5+G,MAC5B,iDAjDWw+G,IAAqBhtH,qBAAAC,GAAA,+DAArB+sH,GAAqB9sH,QAArB8sH,GAAqB7sH,UAAAC,WAFpB,QAAM,qJCqBVJ,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA4tH,GAAA,iHACO5tH,uBAAA,OAAAuvB,EAAA/d,KAAApC,UAAA,SAAAqgB,EAAA,8EA2BPzvB,mBAAA,iCACAA,2BAAA,UACGA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAggC,aAAY,GAAEvvD,mBAAA,gBAAUA,2BACpCA,mBAAA,oCAGAA,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA6tH,GAAA,iHACO7tH,uBAAA,OAAAuvB,EAAA/d,KAAApC,UAAA,SAAAqgB,EAAA,qCA4BPzvB,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAA8tH,GAAA,iHACO9tH,uBAAA,OAAAuvB,EAAA/d,KAAApC,UAAA,YAAAqgB,EAAA,wCAgBHzvB,2BAAA,kBACEA,mBAAA,GACFA,+EADEA,uDAAA,IAAA+tH,EAAAx9F,YAAA,gCAPJvwB,oCAAA,GACEA,2BAAA,qBAIAA,mBAAA,qCACAA,uBAAA,EAAAguH,GAAA,uBAGFhuH,yFAPgBA,wBAEAA,uBAFA,KAAA+tH,EAAA50H,KAEA6G,CAFsB,OAAA+tH,EAAA50H,KAEtB6G,CADwB,kBAAA+tH,EAAA50H,MAEtC6G,uDAAA,IAAAA,wBAAA,IAAA+tH,EAAA50H,MAAA,KACe6G,sBAAA,GAAAA,uBAAA,OAAA+tH,EAAAx9F,8EAzG3BvwB,oCAAA,GAQMA,2BAPJ,eAOIA,CAPgC,cAOhCA,CAJuB,WAIvBA,CADqB,uBACrBA,wBAAA,KAMEA,sBAAA,cASFA,mDACAA,uBAAA,EAAAiuH,GAAA,yBAAAjuH,oCAKFA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAWEA,sBAJA,cAIAA,CAFgB,eASlBA,mDAOAA,uBANA,GAAAkuH,GAAA,yBAAAluH,mCAMAA,CAN+B,GAAAmuH,GAAA,yBAAAnuH,oCAWjCA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MASEA,sBAAA,eAUFA,mDACAA,uBAAA,GAAAouH,GAAA,yBAAApuH,oCAKFA,2BAKIA,2BAFJ,YAEIA,CAFmB,cAEnBA,CADQ,eACRA,mBAAA,MACuBA,2BACrBA,uBAAA,GAAAquH,GAAA,uBAcRruH,iCACAA,2BAAA,iEAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAuD,WAAU,GAGZ9yB,kOAjHjCA,sBAAA,GAAAA,uBAAA,YAAAuvB,EAAA/d,MAOYxR,sBAAA,GACAA,uBADA,WAAAuvB,EAAA/d,KAAArB,SAAA4P,OAAA1P,OAAAkf,EAAA/d,KAAArB,SAAA4P,OAAAzP,MACAtQ,CAD6E,cAAAsuH,GAUpFtuH,sBAAA,GAAAA,uBAAA,WAAAuvB,EAAA/d,KAAArB,SAAA4P,OAAA1P,OAAAkf,EAAA/d,KAAArB,SAAA4P,OAAAzP,OAeOtQ,sBAAA,GAEAA,uBAFA,aAAAuuH,EAEAvuH,CAF+B,WAAAuvB,EAAA/d,KAAArB,SAAAq+G,OAAAn+G,OAAAkf,EAAA/d,KAAArB,SAAAq+G,OAAAl+G,MAE/BtQ,CAD6E,cAAAyuH,GAapFzuH,sBAAA,GAAAA,uBAAA,WAAAuvB,EAAA/d,KAAArB,SAAAq+G,OAAAn+G,OAAAkf,EAAA/d,KAAArB,SAAAq+G,OAAAl+G,OAoBOtQ,sBAAA,GAGAA,uBAHA,WAAAuvB,EAAA/d,KAAArB,SAAAyU,UAAAvU,OAAAkf,EAAA/d,KAAArB,SAAAyU,UAAAtU,MAGAtQ,CAHmF,cAAA0uH,EAGnF1uH,CAF8B,WAAAuvB,EAAAo/F,eAAAtB,WAOrCrtH,sBAAA,GAOAA,uBAPA,cAAAuvB,EAAAo/F,eAAAtB,UAAA,oBAOArtH,CAPgE,WAAAuvB,EAAAo/F,eAAAtB,UAOhErtH,CAFqC,WAAAuvB,EAAA/d,KAAArB,SAAAyU,UAAAvU,OAAAkf,EAAA/d,KAAArB,SAAAyU,UAAAtU,MAErCtQ,CADmF,eAAAuvB,EAAA4rD,QAenDn7E,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAq/F,mBAgBvB5uH,wBAEAA,uBAFA,OAAAuvB,EAAA/d,KAEAxR,CAFa,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAEbrb,CADmC,iBC/FvD,MAAO6uH,WAAiCvyG,KAiC5Czd,YACUkO,EACD4hH,EACCG,EACAhyG,EACA8J,EACAmoG,EAE6BhvG,EACJoJ,GAEjC/b,QAVQrO,KAAAgO,eACDhO,KAAA4vH,iBACC5vH,KAAA+vH,gBACA/vH,KAAA+d,cACA/d,KAAA6nB,eACA7nB,KAAAgwH,oBAE6BhwH,KAAAghB,SACJhhB,KAAAoqB,KAvCnCpqB,KAAAygB,yBAA0B,EAC1BzgB,KAAAiwH,aAAc,EAIdjwH,KAAA+R,MAAQC,KAERhS,KAAA6vH,kBAAoB,CAClB,CACEz1H,KAAM,OACNo3B,YAAahoB,0DAEf,CACEpP,KAAM,QACNo3B,YAAahoB,qEAEf,CACEpP,KAAM,QACNo3B,YAAahoB,qEAEf,CACEpP,KAAM,WACNo3B,YAAahoB,0EAEf,CACEpP,KAAM,aACNo3B,YAAahoB,sFA+DjBxJ,KAAAo8E,OAAuD8zC,GACrDA,EAAMlhH,QACJuP,gBArGiB,MAqGU,EAC3BC,2BAAoB,EACpBvP,aAAWy/G,GACT1uH,KAAK4vH,eAAexzC,OAAOsyC,EAAM1uH,KAAKoqB,IAAIpb,QACxCwV,cAAW,OACFpB,MAAG,QAtDlBpjB,KAAKsc,OAAStc,KAAKgO,aAAau6D,OAChCvoE,KAAKuc,SAAW/S,iBAClB,CAEAzC,kBACE/G,KAAKgwH,kBAAkBrmC,eACzB,CAEAl7E,WACEzO,KAAK4vH,eAAerB,gBAAgBvuH,KAAKoqB,GAAI,IAAK,GAClDpqB,KAAKif,aACLjf,KAAKwgB,eACDxgB,KAAK4vH,eACP5vH,KAAKyS,KAAKC,IAAI,aAAauN,SAI/B,CAEAhB,aACEjf,KAAKyS,KAAO,IAAIU,KAAY,CAC1B6N,OAAQ,IAAImvG,cACV,CAAE7vH,MAAON,KAAKghB,OAAQupB,UAAU,GAChC,CACEl3B,WAAY,CAACC,aAAWC,YAG5BsS,UAAW,IAAIsqG,mBAAYv2F,EAAW,CACpCw2F,SAAU,OACV/8G,WAAY,CAACC,aAAWC,YAE1Bk8G,OAAQ,IAAIU,mBAAYv2F,EAAW,CACjCvmB,WAAY,CAACC,aAAWC,YAE1Bgf,KAAM,IAAI49F,cACR,CAAE7vH,OAAO,EAAMiqC,UAAU,GACzB,CACEl3B,WAAY,CAACC,aAAWC,YAG5B08D,MAAO,IAAIkgD,mBAAYv2F,GACvBiG,SAAU,IAAIswF,cAAY,CAAE7vH,OAAO,EAAOiqC,UAAU,IACpDuhF,MAAO,IAAIqE,cAAY,CAAE7vH,OAAO,EAAOiqC,UAAU,IACjDgiF,WAAY,IAAI4D,mBAAYv2F,IAEhC,CAeA7F,WACE,MAAMyzF,EAAmBxnH,KAAKyS,KAAK9B,SAAS,UACtC27G,EAAiB,CAACtsH,KAAKyS,KAAK9B,SAAS,aAAc3Q,KAAKqwH,wBACxD9D,EAAsBvsH,KAAKyS,KAAK9B,SAAS,cAC/C3Q,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,cAAe,CACpCyiG,SAAUA,IAEZxiG,KAAMhlB,KAAK+vH,cAAc1D,QAAQrsH,KAAKghB,OAAQwmG,EAAU8E,EAAMC,KAE/D59G,UAAU,CACT4S,MAAOA,IAAMvhB,KAAKyS,KAAK8S,UAAU,CAAEE,gBAAgB,IACnDL,SAAUA,KACRplB,KAAK6nB,aAAa2L,YAAU,GAGpC,CAEA68F,uBACE,MAAMpgD,EAAQjwE,KAAKyS,KAAK9B,SAAS,SAC3BkvB,EAAW7/B,KAAKyS,KAAK9B,SAAS,YAEpC,MAAO,IAAIs/D,EAAQ,IAAM,KADXjwE,KAAKyS,KAAK9B,SAAS,SACK,IAAM,KAAKkvB,EAAW,IAAM,IACpE,CAEAywF,oBACE,MAAMzwF,EAAW7/B,KAAKyS,KAAKC,IAAI,YACzBo5G,EAAQ9rH,KAAKyS,KAAKC,IAAI,SAC5BmtB,EAAS0K,SAAW1K,EAASpc,SAAWoc,EAAS5f,UACjD6rG,EAAMvhF,SAAWuhF,EAAMroG,SAAWqoG,EAAM7rG,SAC1C,iDAxIW6vG,IAAwB7uH,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,GAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAAjI,iFAyCb,SAAQ,GAAAA,8BACR,KAAI,+DA1Cf6uH,GAAwB1mH,UAAA,2BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,+BDvBxB5C,2EAAA,kCAAyB,qCAiBRA,oFA8BAA,oFA2BMA,sGA3DKA,mFAC/B,+CAyB+BA,mFAC/B,+CAIA,mDA+B8BA,qFAC9B,iDAsBYA,wFAvEDA,oGAkCAA,oGA6BAA,o0CAjGrBvI,2BAAA,kBAEWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAEFA,6BACAA,uBAAA,EAAAsvH,GAAA,yBAuHFtvH,kCA7HWA,uBAAA,OAAAwC,EAAAktD,MAIE1vD,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAEhDtb,+CAAA,gBAAAwC,EAAA4iB,0mBEOX,MAAOmqG,EA2FX1wH,cAlFAE,KAAAywH,WAAa,cACbzwH,KAAA0wH,WAAa,mCAEb1wH,KAAAsD,MAII,CACFw+D,SAAU,CACR,CACEngE,MAAO3B,KAAKywH,WACZE,QAAS,MACTpuH,KAAM,GACN6E,QAAS,GACTrN,KAAM,CACJsN,OAAQ,WAGZ,CACE1F,MAAO3B,KAAK0wH,WACZC,QAAS,MACTpuH,KAAM,GACN6E,QAAS,GACTrN,KAAM,CACJsN,OAAQ,YAIdnE,QAAS,CACPK,QAAS,CACP8B,MAAO,CACLurD,KAAM,GACNjsD,SAAS,GAEXC,QAAS,CACPgzB,SAAS,EACT/yB,KAAM,QACNI,WAAW,EACX2rH,SAAU,UACVxrH,UAAW,CAETC,MAAQG,IACN,IAAIqrH,EAAK,GACT,OAAIrrH,EAAQpK,OAAS,IACnBy1H,EAAKrrH,EAAQ,GAAG7D,OAEX0I,KAAOwmH,GAAI34F,OAAO,MAAK,IAIpCxzB,OAAQ,CACNksH,SAAU,QAGdjrH,YAAY,EACZC,qBAAqB,EACrBM,OAAQ,CACNlH,EAAG,CACD4xH,SAAU,MACVzqH,KAAM,OACNE,KAAM,CACJyqH,eAAgB,CACdC,QAAS,aAGbrqH,MAAO,CACLsqH,YAAa,IAGjBC,IAAK,CACH9qH,KAAM,SACNyqH,SAAU,QAEZM,IAAK,CACH/qH,KAAM,SACNyqH,SAAU,WAIhBO,UAAW,QAIXC,SAAMC,YAAYC,iBACpB,CAEA7iH,WACM0D,gBAAcnS,KAAKuxH,cAGvBvxH,KAAKwxH,kBACLxxH,KAAKyxH,cACP,CAEA7qH,cACMuL,gBAAcnS,KAAKuxH,aAGvBvxH,KAAKyxH,aACP,CAEQD,kBACN,MAAMtvD,EAAe,IAAIC,KACvBniE,KAAK8qG,YACL9qG,KAAKkiE,aACJt9D,GAAiBA,EAAQ49D,OAAS,KAClC59D,GAAiBA,EAAQ69D,OAAS79D,EAAQ3K,OAAS,GAAK,MAE3DioE,EAAa8oC,aAAc,EAC3B,MAAM3lC,EAAoB,CACxBhgE,MAAO,CACLurD,KAAM5wD,KAAKuxH,WAAWn3H,MAExBwK,QAAS,CACPE,SAAWU,GAAiB08D,EAAaS,eAAen9D,KAG5D2M,UAAQnS,KAAKsD,MAAO,CAAEJ,QAAS,CAAEK,QAAS8hE,IAC5C,CAEQosD,cACN,MAAMC,EAAsB,CAC1B,CACEnvH,KAAMvC,KAAK2xH,kBAAkB3xH,KAAKuxH,WAAWvxH,KAAKywH,cAEpD,CACEluH,KAAMvC,KAAK4xH,gBAAgB5xH,KAAKuxH,WAAWvxH,KAAK0wH,eAGpDv+G,UAAQnS,KAAKsD,MAAO,CAClBw+D,SAAU4vD,IAEZ1xH,KAAKsD,MAAMw+D,SAAW,IAAI9hE,KAAKsD,MAAMw+D,SACvC,CAQQ6vD,kBAAkBE,GACxB,MAAMtvH,EAAc,GACpB4P,gBAAO0/G,EAAeC,IACpBvvH,EAAKrG,KAAK,CACR8C,EAAW,IAAR8yH,EAAG,GACN1zH,EAAG0zH,EAAG,IACP,GAQHvvH,EAAK1E,QAEE0E,CACT,CAEQqvH,gBAAgBC,GACtB,IAAI51H,EACA81H,EAAOF,EAAa,GACxB,MAAMh2H,EAAS,GACf,IAAKI,EAAI,EAAGA,EAAI41H,EAAaz2H,OAAQa,IAAK,CACxC,MAAM+1H,EAAMH,EAAa51H,GAEzBJ,EAAOK,KAAK,CACV8C,EAAY,IAATgzH,EAAI,GACP5zH,EAAG4zH,EAAI,GAAKD,EAAK,KAGnBA,EAAOC,CACT,CACA,OAAOn2H,CACT,iDAxLW20H,EAAoB,4DAApBA,EAAoBpnH,UAAA,sBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,qfCdjCrI,2BAAA,WACEA,sBAAA,gBAMAA,2BAAA,aAEEA,sBAAA,WAEJA,oCARUA,wBAEAA,uBAFA,WAAAwC,EAAAH,MAAAw+D,SAEA7gE,CAF2B,UAAAwC,EAAAH,MAAAJ,QAE3BjC,CADyB,OAAAwC,EAAAH,MAAA6tH,wqCCqBjClwH,2BAFF,UAEEA,CADiF,YAE/EA,sBAAA,wBAEJA,uDAFqBA,sBAAA,GAAAA,uBAAA,aAAAgxH,6BAOnBhxH,sBAAA,6CAEcA,uBAFA,QAAAixH,EAAA73H,KAEA4G,CAFkB,OAAAixH,EAAA3tD,KAElBtjE,CADiB,QAAAixH,EAAA1hF,sCAO/BvvC,mBAAA,2EAAAA,+BAAA,uBAAAqrB,EAAAjC,MAAA,mBAAAppB,wBAAA,IAAAk5B,GAAA,UC9BI,MAAOg4F,GAuBXryH,YAAoB4C,EAA0C0vH,GAA1CpyH,KAAA0C,gBAA0C1C,KAAAoyH,UAJ9DpyH,KAAAovG,SAAkB,GAElBpvG,KAAAqyH,aAAepgH,OAAOpJ,MAE+D,CAErFjC,cACE5G,KAAKsyH,aACP,CAEQA,cACNtyH,KAAKovG,SAAW,CACd,CACE7sF,IAAK/Y,2BACLlJ,MAAON,KAAKuC,KAAK6sG,UAGvB,CAEA3gG,WACEzO,KAAK6M,QAAU,CACb0lH,MAAO,CACL,CAAEpjH,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,QAAS/U,KAAMoP,kBACvB,CAAE2F,KAAM,MAAO/U,KAAMoP,mBACrB,CAAE2F,KAAM,WAAY/U,KAAMoP,oBAAqB6F,aAAcrP,KAAKwyH,cAClE,CAAErjH,KAAM,MAAO/U,KAAMoP,oBAAqBwF,KAAMhP,KAAKoyH,SACrD,CAAEjjH,KAAM,OAAQ/U,KAAMoP,kBAAmBwF,KAAMhP,KAAKoyH,SACpD,CAAEjjH,KAAM,OAAQ/U,KAAMoP,gBAAiBwF,KAAMhP,KAAKoyH,SAClD,CAAEjjH,KAAM,OAAQ/U,KAAMoP,gBAAiBwF,KAAMhP,KAAKoyH,UAEpDvzE,MAAO,CACL,CAAE1vC,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,OAAQ/U,KAAMoP,gBAAiBwF,KAAMhP,KAAK0C,eAClD,CACEtI,KAAMoP,iBACN6F,aAAcrP,KAAKyyH,aACnBC,WAAYA,CAACC,EAAcC,EAAcpjC,EAAWC,KAClD,MAAMojC,EAAOrjC,EAAKjrB,KAAOirB,EAAKsjC,MACxBC,EAAOtjC,EAAKlrB,KAAOkrB,EAAKqjC,MAE9B,OAAID,IAASE,EACJ,EAGLF,EAAOE,EACF,GAEA,KAMnB,CAEAh/G,UAAUw8E,EAAanvB,GACrB,OAAOA,EAAKhnE,IACd,iDA9EW+3H,IAAqBlxH,8BAAAC,MAAAD,8BAAA8H,MAAA,4DAArBopH,GAAqB/oH,UAAA,uBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,mWDTjBE,kFAMAA,kFAQAA,qFAMJA,uXApBTvI,2BAFJ,UAEIA,CAFa,UAEbA,CADoB,YACpBA,mBAAA,KAAkBA,2BAClBA,sBAAA,gBAKAA,2BAAA,YAAAA,mBAAA,KAAkBA,2BAClBA,sBAAA,gBAIFA,2BAGEA,2BADF,UACEA,CADoB,YACpBA,mBAAA,MAAqBA,2BACrBA,sBAAA,4BAGJA,6BAEAA,2BAAA,aAAAA,mBAAA,MAAqCA,2BAgBrCA,uBAfA,GAAA+xH,GAAA,aAeA/xH,CAdmF,GAAAgyH,GAAA,yBAAAhyH,mCAcnFA,CANgC,GAAAiyH,GAAA,yBAAAjyH,2CA7BlBA,sBAAA,GAEAA,uBAFA,OAAAwC,EAAAlB,KAAAgwH,MAEAtxH,CAFmB,UAAAwC,EAAAoJ,QAAA0lH,MAEnBtxH,CADyB,iBAKzBA,sBAAA,GAEAA,uBAFA,OAAAwC,EAAAlB,KAAAs8C,MAEA59C,CAFmB,UAAAwC,EAAAoJ,QAAAgyC,MAEnB59C,CADyB,iBAOfA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA2rG,UAOInuG,sBAAA,GAAmCA,uBAAnC,UAAAwC,EAAA4uH,aAAA5uH,EAAAlB,KAAA4wH,aAAmClyH,CAAA,eAAAwC,EAAAsQ,wIEAzD,MAAOq/G,WAA+BpjE,YAqB1ClwD,YACUiwH,EACAloG,EACAwJ,EACAnjB,EACAF,GAERK,QANQrO,KAAA+vH,gBACA/vH,KAAA6nB,eACA7nB,KAAAqxB,sBACArxB,KAAAkO,qBACAlO,KAAAgO,eAfVhO,KAAAqzH,iBAAmB,IAAIvpH,eAQvB9J,KAAAiM,UAAY,IAAIqC,IAUdtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBomG,OAC3D,MAAMqe,EAA6B,CACjCxmH,WAAY,SACZyb,KAAMvW,KAAMwrF,QACZx0E,MAAOA,IAAMhpB,KAAKuzH,mBAClBn5H,KAAM4F,KAAKgO,aAAa86D,OAE1B9oE,KAAK+M,aAAe,CAACumH,EACvB,CAEA7kH,WACEzO,KAAK6M,QAAU,CACb,CAAEsC,KAAM,KAAM/U,KAAMoP,eACpB,CAAE2F,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,QAAS/U,KAAMoP,kBACvB,CAAE2F,KAAM,UAAW/U,KAAMoP,oBACzB,CAAE2F,KAAM,WAAY/U,KAAMoP,iBAC1B,CAAE2F,KAAM,OAAQ/U,KAAMoP,iBAE1B,CAEAkD,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAu/G,YAAYhE,GACVxnH,KAAK+vH,cAAcvE,YAAYxrH,KAAKoqB,GAAIo9F,GAAU74G,UAChD,KACE3O,KAAKqzH,iBAAiBnpH,OACtBlK,KAAKwwD,aACLxwD,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,4BAA4Bg+G,KAAW,EAG3C,KACExnH,KAAK4qB,SAAS6I,kBAAkBC,oBAAkB,EAGxD,CAEA6/F,mBACE,MAAM/L,EAAWxnH,KAAKiM,UAAUmc,QAAQgC,GACxCpqB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB,SACjBC,UAAW,CAACq8F,GACZr0D,kBAAmB,QACnB92C,aAAcA,IAAMrc,KAAKwrH,YAAYhE,IAEzC,iDA9EW4L,IAAsBnyH,8BAAAC,GAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAAtBkqH,GAAsBhqH,UAAA,wBAAA+C,OAAA,CAAAie,GAAA,KAAAhY,QAAA,WAAA7H,QAAA,CAAA8oH,iBAAA,oBAAAxsG,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,kKAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICxBnCrI,2BAAA,gBAMUA,uBAFA,8BAAawC,EAAA4vH,iBAAAnpH,MAAuB,EAEpCjJ,CAFqC,2BAAA2J,GAAA,OAElBnH,EAAAiJ,gBAAA9B,EAAuB,GAClD3J,sBAAA,wBAKFA,kCATUA,uBAHA,OAAAwC,EAAA2O,QAAA7P,KAGAtB,CAHqB,UAAAwC,EAAAoJ,QAGrB5L,CAFmB,SAAAwC,EAAA2O,QAAA1D,OAEnBzN,CADyB,iBAMfA,wBAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,qLCOnC9L,2BAAA,SACEA,sBAAA,SACFA,qEADKA,+CAAA,UAAAA,4BAAA,EAAAK,GAAAC,EAAAwQ,MAAA02C,QAAAlnD,EAAAwQ,MAAA22C,wEAaLznD,oCAAA,GACEA,2BAAA,YAAAA,mBAAA,KAAmBA,2BACnBA,2BAAA,iBAKUA,uBAAA,2BAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAAmBM,EAAAuqH,MAAAp/G,gBAAA9B,GAA6B,GAKxD3J,sBAAA,yBAKFA,4GAfUA,sBAAA,GASAA,uBATA,OAAAM,EAAAqrC,SASA3rC,CATiB,UAAAM,EAAAuqH,MAAAj/G,QASjB5L,CARyB,UAQzBA,CAPW,YAOXA,CANgB,sBAMhBA,CAHyB,qBAGzBA,CADwB,iBAGdA,wBAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAAuqH,MAAA7/G,UAEzBhL,CAD6B,eAAAM,EAAAuqH,MAAA/+G,+EAlBrD9L,2BAHJ,WAGIA,CAFqB,UAErBA,CADgB,WAEdA,mBAAA,GACFA,2BACAA,2BAAA,YACEA,uBAAA,EAAAuyH,GAAA,wBAoBAvyH,2BAAA,YAAAA,mBAAA,KAAsBA,2BACtBA,2BAAA,iBAKUA,uBAAA,2BAAA2J,GAAA3J,0BAAAqT,GAAA,MAAA/S,EAAAN,4BAAA,OAAAA,wBAAmBM,EAAAs+B,SAAAnzB,gBAAA9B,GAAgC,GAC3D3J,sBAAA,yBAQRA,6EAtCMA,sBAAA,GAAAA,+BAAA,IAAAM,EAAAkyH,YAAAl7G,KAAA,KAGetX,sBAAA,GAAAA,uBAAA,aAAAM,EAAAkyH,YAAAl7G,MAqBLtX,sBAAA,GACAA,uBADA,OAAAM,EAAAkyH,YAAAC,UACAzyH,CAD8B,UAAAM,EAAAs+B,SAAAhzB,SAOpB5L,wBAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAAs+B,SAAA5zB,UAEzBhL,CADgC,eAAAM,EAAAs+B,SAAA9yB,+EAY1D9L,2BAAA,aACMA,uBAAA,yBAAA4tE,EAAA5tE,0BAAA21D,GAAAr0D,KAAAjC,MAAAiB,EAAAN,4BAAA,OAAAA,wBAASM,EAAAoyH,aAAA9kD,GAAmB,GAAE5tE,mBAAA,GAASA,wDAATA,sDAAA4tE,ICfhC,MAAO+kD,GAmCX9zH,YACUoO,EACA2Z,EACAkoG,EACAxT,EACAvuG,EACAqjB,EACA+mC,EACAy7D,GAPA7zH,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAA+vH,gBACA/vH,KAAAu8G,aACAv8G,KAAAgO,eACAhO,KAAAqxB,sBACArxB,KAAAo4D,oBACAp4D,KAAA6zH,kBA7BV7zH,KAAA+R,MAAQC,KACRhS,KAAAo9E,kBAAmB,EACnBp9E,KAAAqmB,QAAmC,GAgBnCrmB,KAAAq8C,MAAgB,EAYb,CAEGy3E,WAAW1K,GAAU,IAAA1oG,EAAA1gB,KAAA,SAAA2gB,MAAA,YACzBD,EAAK+yG,YAAc/yG,EAAKqzG,aAAa3K,GACrB,MAAZA,EAAKh/F,KAGT1J,EAAKszG,YAAY5K,SACX1oG,EAAKuzG,gBAAgB7K,EAAKh/F,IAChC1J,EAAK27B,MAAQ37B,EAAKmzG,gBAAgBxK,WAAW3oG,EAAK27B,MAAO+sE,GAAM,EAPtC,EAQ3B,CAEA36G,WACEzO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBomG,OAC3Dj1G,KAAKk0H,kBACLl0H,KAAKm0H,oBACP,CAEQD,kBACNl0H,KAAK8rH,MAAQ,CACXj/G,QAAS,CACP,CACEsC,KAAM,WACN/U,KAAMoP,gBACN4F,SAAU,GAEZ,CACED,KAAM,YACN/U,KAAMoP,iBACNomE,UAAU,EACVxgE,SAAU,GAEZ,CACED,KAAM,iBACN/U,KAAMoP,kBACNomE,UAAU,EACVvgE,aAAcrP,KAAKo0H,WACnBhlH,SAAU,IAGdnD,UAAW,IAAIqC,IACf5B,gBAAkBT,IAChBjM,KAAK8rH,MAAM7/G,UAAYA,GAEzBc,aAAc,CACZ,CACE3S,KAAM4F,KAAKgO,aAAaw7D,IACxBjhD,KAAMvW,KAAM6W,KACZ/b,WAAY,SACZ4sE,QAAUztE,IACPA,EAAU8mE,cAAiB9mE,EAAUmc,SAA0C,IAA/Bnc,EAAUmc,QAAQisG,SACrErrG,MAAOA,IAAMhpB,KAAKs0H,oBAEpB,CACEl6H,KAAM4F,KAAKgO,aAAau6D,OACxBhgD,KAAMvW,KAAM6W,KACZ/b,WAAY,SACZ4sE,QAAUztE,GAAcA,EAAUmc,SAAWnc,EAAUmc,QAAQisG,SAAW,EAC1ErrG,MAAOA,IAAMhpB,KAAKs0H,oBAEpB,CACEl6H,KAAM4F,KAAKgO,aAAa07D,MACxBnhD,KAAMvW,KAAM+W,QACZjc,WAAY,SACZmT,QAAUhU,IACPA,EAAU8mE,cAAiB9mE,EAAUmc,SAA0C,IAA/Bnc,EAAUmc,QAAQisG,SACrErrG,MAAOA,IAAMhpB,KAAKu0H,oBAI1B,CAEQJ,qBACNn0H,KAAK6/B,SAAW,CACdhzB,QAAS,CACP,CACEsC,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,GAEZ,CACED,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,IACV+Z,mBAAoBC,IAAa7Q,MAEnC,CACEpJ,KAAM,UACN/U,KAAMoP,mBACN4F,SAAU,EACVJ,KAAMhP,KAAKu8G,aAGftwG,UAAW,IAAIqC,IACf5B,gBAAkBT,IAChBjM,KAAK6/B,SAAS5zB,UAAYA,GAE5Bc,aAAc,CACZ,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBqI,KAAMvW,KAAMwW,IACZ1b,WAAY,SACZ4b,aAAezc,IAAeA,EAAU8mE,aACxC/pD,MAAOA,IAAMhpB,KAAKsiC,iBAClBriB,QAASA,IAAMjgB,KAAKw0H,yBAEtB,CACEp6H,KAAM4F,KAAKgO,aAAakb,OACxBX,KAAMvW,KAAM+W,QACZjc,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKy0H,wBAI1B,CAEQD,wBACN,MAAME,EAAU10H,KAAKyzH,YAAYl7G,KAAK5b,MAAM,KAAKzB,MAAM,GAGvD,OAAIw5H,EAAQt5H,QAAU,GAAoB,YAAfs5H,EAAQ,IAC1BlrH,uEAAuEkrH,EAAQ,IAG1F,CAEA9tH,cACE5G,KAAKyzH,iBAAc75F,EACnB55B,KAAK20H,KAAO,GACZ30H,KAAK40H,eAAiB,GACtB50H,KAAK60H,QAAU,GACX70H,KAAKoqB,KACPpqB,KAAK80H,cACL90H,KAAK+0H,YAET,CAEQD,cACN90H,KAAKq8C,MAAQ,CACX,CACEjiD,KAAM,IACNuH,MAAO,IACPyoB,GAAI,IACJw2D,UAAU,GAGhB,CAEQm0C,YAAS,IAAAvuB,EAAAxmG,KAEf2jD,YAAUhjC,QAAC,kBACH6lF,EAAKytB,gBAFA,IAGb,GAAG,GACL,CAEAA,gBAAgB17G,GAEd,GADAvY,KAAKg1H,wBACAh1H,KAAK40H,eAAe1yH,SAASqW,IACH,IACG,IAAvBvY,KAAKqmB,QAAQ9N,GACtB,YAFAvY,KAAK40H,eAAe14H,KAAKqc,GAI3B,OAAO,IAAI2I,QAASC,IAClBnhB,KAAKi1H,oBAAoB18G,GAAM,GAC/BvY,KAAK+vH,cAAc5rG,MAAMnkB,KAAKoqB,GAAI7R,GAAM5J,UAAWgmH,IACjD30H,KAAKk1H,oBAAoBP,GACzB30H,KAAKm1H,mBACLn1H,KAAKo1H,aACLj0G,EAAQnhB,KAAKq1H,YAAY98G,IACzBvY,KAAKi1H,oBAAoB18G,GAAM,GAE/B,MAAM+8G,IAAmBt1H,KAAK6zH,gBAAgB1K,UAAS,EAAMnpH,KAAKq8C,MAAO,UAC5D,MAAT9jC,IAAiB+8G,GACnBt1H,KAAKu1H,cAAc/8B,OAAOtuF,KAAKlK,KAAKw1H,QAAQ,KAAI,EAEnD,EAEL,CAEQP,oBAAoB18G,EAAc8N,GACxCrmB,KAAKqmB,QAAQ9N,GAAQ8N,EACrBrmB,KAAKg1H,uBACP,CAEQS,kBAAkBl9G,EAAcixG,EAAoBxpH,KAAK20H,MAC/D,OAAOnL,EAAKnlG,OAAQlqB,GAAMA,EAAEgmD,SAAW5nC,EACzC,CAEQ88G,YAAY98G,GAClB,MAAMm9G,EAAU11H,KAAK21H,WAAWp9G,GAChC,OAAOpG,WAASnS,KAAKy1H,kBAAkBl9G,GAAO,QAAQrb,IAAKkwF,GACzDptF,KAAK41H,WAAWxoC,EAAKsoC,GAEzB,CAEQE,WAAWxoC,EAAgBsoC,GAMjC,GALA11H,KAAK60H,QAAQznC,EAAI70E,MAAQ60E,EACpBsoC,GACH11H,KAAK21H,WAAWvoC,EAAIjtC,QAGL,aAAbitC,EAAI70E,KAAqB,CAC3B,MAAMs9G,EAAY71H,KAAK6zH,gBAAgB1K,SAAS,WAAYnpH,KAAKq8C,OAC7Dw5E,GACF71H,KAAKu1H,cAAc/8B,OAAOtuF,KAAK2rH,EAEnC,CACA,MAAO,CACLl0H,MAAOyrF,EAAIhzF,KACXA,KAAMgzF,EAAIhzF,KACVgwB,GAAIgjE,EAAI70E,KACRqoE,SAAuB,aAAbwM,EAAI70E,KACd4lB,SAAUn+B,KAAKy1H,kBAAkBroC,EAAI70E,KAAMm9G,GAASx4H,IAAI8C,KAAK81H,QAC7Dx1H,MAAO,CACL6/C,OAAQitC,GAAKjtC,QAGnB,CAEQw1E,WAAWp9G,GACjB,OAAOvY,KAAK20H,KAAKtwG,OAAQlqB,GAAMA,EAAEgmD,QAAUhmD,EAAEgmD,OAAO9gC,WAAW9G,GACjE,CAEQy7G,YAAY5K,GAClB,MAAMpR,EAAWA,CAAC13G,EAAe2sC,IAC/B3sC,EAAS2sC,EAAKA,EAAG3sC,GAASA,EAAS,GAErCN,KAAK4sC,SAAW,CACd5sC,KAAKo9C,SAASgsE,EAAM,YAAapR,GACjCh4G,KAAKo9C,SAASgsE,EAAM,YAAc9oH,GAChC03G,EAAS13G,EAAQ2iC,GAAMjjC,KAAKo4D,kBAAkB7vD,UAAU06B,KAG9D,CAEQma,SACNosE,EACAuM,EACAC,GAGA,MAAMC,EAAczM,EAAKp/F,GACzBo/F,EAAOxpH,KAAKk2H,UAAU1M,EAAMuM,GAC5B,MAAM3oC,EAAMptF,KAAK+zH,aAAavK,GACxBlpH,EAAQ8sF,EAAI2+B,OAAOgK,GAGzB,IAAII,EAAe71H,EACf81H,EAAchpC,EAAI70E,KACtB,GAAIixG,EAAKp/F,KAAO6rG,EACd,GAA2B,MAAvBzM,EAAKlpH,OAAO6/C,OAEdg2E,EAAe,MACV,CACL,MAAMh2E,EAASngD,KAAKq2H,UAAUr2H,KAAK20H,KAAMnL,EAAKlpH,OAAO6/C,QACrD,GAAIA,EAAQ,CACV,MAAMm2E,EAAat2H,KAAK+zH,aAAa/zH,KAAKk2H,UAAU/1E,EAAQ41E,IAC5DI,EAAeG,EAAWvK,OAAOgK,GACjCK,EAAcE,EAAW/9G,IAC3B,CACF,CAEF,MAAO,CACLk2D,IAAK,CACHr0E,KAAmB,cAAb27H,EAA2BvsH,oBAAsBA,qBACvDlJ,MAAO01H,EAAe11H,GACtBi2H,WAAYj2H,EAAQ8sF,EAAI70E,KAAO,IAEjCw9G,WACA1B,SAAUr0H,KAAK60H,QAAQoB,GAAalK,OAAOgK,GAC3CS,gBAAiB,CACfl2H,MAAO61H,EACP59G,KAAM49G,EAAeC,EAAc,IAGzC,CAeQF,UAAU1M,EAAYiN,GAC5B,MAAMt2E,EAASngD,KAAKq2H,UAAUr2H,KAAK20H,KAAMnL,EAAKlpH,OAAO6/C,QACrD,GAAIA,GAAyB,MAAfA,GAAQ/1B,GAAY,CAChC,MAAMu3F,EAAU3hH,KAAK02H,iBAAiBlN,EAAMiN,GAGtCE,EAAa32H,KAAKk2H,UAAU/1E,EAAQs2E,GACpCG,EAAY52H,KAAK02H,iBAAiBC,EAAYF,GAIpD,OAD8B,IAAZ9U,GAAgC,IAAdiV,GAAmBA,EAAYjV,EAChDgV,EAAanN,CAClC,CACA,OAAOA,CACT,CAEQkN,iBAAiBlN,EAAYiN,GACnC,OAAOz2H,KAAK+zH,aAAavK,GAAMuC,OAAO0K,EACxC,CAEQ1C,aAAa3K,GACnB,MAAM7wG,EAAO6wG,EAAKh/F,GAClB,OAAOpqB,KAAK60H,QAAQt8G,EACtB,CAEAo7G,aAAap7G,GACXvY,KAAKu1H,cAAc/8B,OAAOtuF,KAAKlK,KAAKw1H,QAAQj9G,GAC9C,CAEQi9G,QAAQj9G,GACd,OAAOvY,KAAK6zH,gBAAgB1K,SAAS5wG,EAAMvY,KAAKq8C,MAClD,CAEAi4E,mBACE,MAAM/7G,EAAOvY,KAAKyzH,YAAYl7G,KACxBtM,EAA0BjM,KAAK8rH,MAAM7/G,UAAUmc,QAC/CyuG,EAAU5qH,EAAUuqH,gBACpBj0G,EAAMtW,EAAU8pH,SAChBz1H,EAAQ2L,EAAUooH,SACxBr0H,KAAK6nB,aAAagD,KAAK8I,KAAoB,CACzCE,UAAW7zB,KAAK82H,mBACJ,IAAVx2H,EAAcN,KAAKgO,aAAaw7D,IAAMxpE,KAAKgO,aAAau6D,OACxDhwD,GAEFqmB,QAASi4F,EAAQv2H,MACbkJ,0BAA0BxJ,KAAK+2H,yBAC7BF,EAAQv2H,MACRu2H,EAAQt+G,8CAEVqhB,EACJhG,OAAQ,CAAC5zB,KAAKg3H,kBAAkB/qH,EAAUwiE,IAAIr0E,KAAMmoB,EAAKjiB,EAAOu2H,EAAQv2H,QACxEwzB,iBAAkBtqB,gBAClBuqB,SAAWlrB,GAAyB7I,KAAKs9C,YAAYz0C,IAEzD,CAEQiuH,mBAAmBx6G,EAAgB/D,GACzC,OAAO/O,YAAY8S,YAAiBtc,KAAKi3H,6BAA6B1+G,IACxE,CAEQ0+G,eACN,OAAOj3H,KAAKk3H,uBAAyB1tH,gBAAkBA,gBACzD,CAEQ0tH,uBACN,MAAiD,cAA1Cl3H,KAAK8rH,MAAM7/G,UAAUmc,QAAQ2tG,QACtC,CAEQgB,yBAAyBz2H,EAAeiY,GAC9CjY,SAAQN,KAAKk3H,uBAAyBl3H,KAAKo4D,kBAAkB7vD,UAAUjI,GAASA,EAEzEkJ,YAAYxJ,KAAKi3H,wBAAwB32H,WAAeiY,IACjE,CAEQy+G,kBACNr1H,EACAvH,EACAkG,EACA6B,GAEA,MAAMy/D,EAAoB,cAATxnE,EACX+8H,EAAiB,CAACv1D,EAAW9/C,MAAakhF,UAAU,GAAK1vF,aAAW8yD,IAAI,IAC1EjkE,GACFg1H,EAAej7H,KAAK0lE,EAAW9/C,MAAawhF,UAAUnhG,GAAYmR,aAAWrU,IAAIkD,IAEnF,MAAMo2D,EAAgC,CACpCpyD,KAAMy7D,EAAW,SAAW,SAC5BjgE,QACAvH,OACAkG,QACA+S,WAAY8jH,EACZ5jH,UAAU,GAEZ,OAAKquD,IACHrJ,EAAMnxB,OAAS,CACbg/B,IAAK58D,8CACLvK,IAAKuK,oCAAoCrH,cAGtCo2D,CACT,CAEQjb,YAAYz0C,EAAsBuuH,GACxC,MAAM7+G,EAAOvY,KAAKyzH,YAAYl7G,KACxBgK,EAAsBviB,KAAK8rH,MAAM7/G,UAAUmc,QAAQ2tG,SACnDz5G,EAC6B,IAAjCtc,KAAKyzH,YAAY1H,OAAOxpG,GACpBviB,KAAKgO,aAAaw7D,IACF,IAAhB3gE,EAAO0Z,GACPviB,KAAKgO,aAAa07D,MAClBlgE,mBACNxJ,KAAK+vH,cAAcjE,MAAM9rH,KAAKoqB,GAAI7R,EAAM1P,GAAQ8F,UAAU,KACpDyoH,GACFA,IAEFp3H,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBjyB,KAAK82H,mBAAmBx6G,EAAQ/D,IAElCvY,KAAKq3H,iBAAe,EAExB,CAEA9C,kBACE,MAAMh8G,EAAOvY,KAAKyzH,YAAYl7G,KACxBtM,EAA0BjM,KAAK8rH,MAAM7/G,UAAUmc,QAC/C7F,EAAMtW,EAAU8pH,SAChBc,EAAU5qH,EAAUuqH,gBACpBnC,EAAWpoH,EAAUooH,SAErBiD,EAAat3H,KAAK+2H,yBAAyBF,EAAQv2H,MAAOu2H,EAAQt+G,MAClEg/G,EACJV,EAAQv2H,MAAQ,EACZu2H,EAAQv2H,MAAQ+zH,EACd7qH,gCAAgC8tH,IAChC9tH,2DAA2D8tH,IAC7D9tH,sDAENxJ,KAAK6nB,aAAagD,KAAKuO,KAA4B,CACjDvF,UAAW7zB,KAAK82H,mBAAmB92H,KAAKgO,aAAa07D,MAAOnxD,GAC5DugB,WAAY94B,KAAKgO,aAAa07D,MAC9Bl4C,YAAahoB,YAAYxJ,KAAKgO,aAAa07D,SAAS1pE,KAAK+2H,yBACvD1C,EACA97G,MACGg/G,KACLxjG,SAAUA,IAAM/zB,KAAKs9C,YAAY,CAAE6yB,CAAC5tD,GAAM,GAAK,IAAMviB,KAAK6nB,aAAa2L,eAE3E,CAEA8O,iBAEE,MAAM/pB,EAAOvY,KAAKyzH,YAAYl7G,KAC9BvY,KAAK6nB,aAAagD,KAAK8I,KAAoB,CACzCE,UAAWrqB,2BACXo1B,QAASp1B,kDACToqB,OAAQ,CACN,CACEztB,KAAM,OACN/L,KAAM,OACNkG,MAAO,GAAG+J,OAASmtH,aAAY,KAC/BjkH,UAAU,EACVF,WAAY,CAACrT,KAAKy3H,cAAczyH,KAAKhF,SAGzC8zB,iBAAkBtqB,2BAClBuqB,SAAWlrB,IACJ7I,KAAK03H,cASR13H,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,2BAA2BX,EAAOzO,qDAVpC4F,KAAK+vH,cAAcnE,WAAW5rH,KAAKoqB,GAAI7R,EAAM1P,EAAOzO,MAAMuU,UAAWvU,IACnE4F,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,8BAA8BpP,WAAcme,MAE9CvY,KAAKq3H,iBAAe,EACrB,GAST,CAEAI,cAAc7jH,GACZ5T,KAAK03H,cAAgB13H,KAAKyzH,YAAYC,UAAUr0H,KAAMq8E,GAAMA,EAAEthF,OAASwZ,EAAQtT,MACjF,CAQQ+2H,gBAAgB9+G,GACtB,IAAKA,EAAM,CACT,MAAM60E,EAAMptF,KAAKyzH,YACjB,IAAKrmC,EACH,MAAM,IAAIjqE,MAAM,0EAIlB5K,EAAO60E,EAAIjtC,OAASitC,EAAIjtC,OAASitC,EAAI70E,KACrC,MAAM6wG,EAAOppH,KAAKw1H,QAAQj9G,GAC1BvY,KAAKu1H,cAAc/8B,OAAOtuF,KAAKk/G,GAC/B,MAAMuO,EAAe33H,KAAKw1H,QAAQpoC,EAAI70E,MAEtC,YADAvY,KAAKu1H,cAAc/8B,OAAOtuF,KAAKytH,EAEjC,CACA,MAAMvO,EAAOppH,KAAKw1H,QAAQj9G,GAC1BvY,KAAKu1H,cAAc/8B,OAAOtuF,KAAKk/G,EACjC,CAEQ8L,oBAAoBP,GAC1B,MAAMiD,EAAsBA,CAC1BC,EACA13E,KAEA,MAAMhiB,EAAW05F,EAAYxzG,OAAQlqB,GAAMA,EAAEgmD,SAAWA,GAClD/7B,EAAQ+Z,EAASjhC,IAAK/C,GAAMA,EAAEoe,MACpC,MAAO,CAAE4lB,WAAU/Z,QAAK,EAGVjS,SAAOwiH,EAAKz3H,IAAK/C,GAAMA,EAAEgmD,QAAQt4C,QACzCb,QAASrJ,IACf,MAAMm6H,EAAWF,EAAoBjD,EAAMh3H,GACrCo6H,EAASH,EAAoB53H,KAAK20H,KAAMh3H,GAE9Co6H,EAAO55F,SAASn3B,QAAS7M,IAClB29H,EAAS1zG,MAAMliB,SAAS/H,EAAEoe,OAC7BvY,KAAKg4H,mBAAmB79H,EAAC,GAG7B29H,EAAS35F,SAASn3B,QAAS7M,IACrB49H,EAAO3zG,MAAMliB,SAAS/H,EAAEoe,MAC1BvY,KAAKi4H,wBAAwBF,EAAO55F,SAAUhkC,GAE9C6F,KAAKk4H,gBAAgB/9H,EAAC,EAEzB,EAEL,CAEQ69H,mBAAmBG,GACzB,MAAM5/G,EAAO4/G,EAAM5/G,KAEnBpG,WAASnS,KAAK20H,KAAOx6H,GAAMA,EAAEoe,OAASA,UAC/BvY,KAAK60H,QAAQt8G,GACpBvY,KAAKo4H,4BAA4BD,EACnC,CAEQC,4BAA4BhrC,GAClC,MAAMjtC,EAASitC,EAAIjtC,OACnB,IAAKA,EACH,OAEF,MAAMipE,EAAOppH,KAAKw1H,QAAQr1E,GAC1B,IAAKipE,EAEH,OAEF,MAAMjrF,EAAWn+B,KAAKq1H,YAAYl1E,GAClCipE,EAAKjrF,SAAWA,CAClB,CAEQ+5F,gBAAgBG,GACtBr4H,KAAK20H,KAAKz4H,KAAKm8H,GACfr4H,KAAK60H,QAAQwD,EAAO9/G,MAAQ8/G,EAC5Br4H,KAAKo4H,4BAA4BC,EACnC,CAEQJ,wBAAwB/mE,EAAqBonE,GACnD,MAAMC,EAAmBrnE,EAAOr+C,KAAM2lH,GAAQA,EAAIjgH,OAAS+/G,EAAW//G,MACtEtG,OAAOg6B,OAAOssF,EAAkBD,EAClC,CAEQnD,mBACN,MAAM/L,EAAOppH,KAAKyzH,YAAczzH,KAAKw1H,QAAQx1H,KAAKyzH,YAAYl7G,WAAQqhB,EAClEwvF,GAAoB,MAAZA,EAAKh/F,IACfpqB,KAAKg0H,YAAY5K,EAErB,CAEQgM,WAAWlwF,GAAiB,GAC9BllC,KAAKo9E,mBAAqBl4C,IAK9BllC,KAAKq8C,MAAQ,IAAIr8C,KAAKq8C,OACxB,CAEAo4E,sBACEz0H,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDC,OAAQC,KAAeC,KACvBC,gBAAiB1hB,2BACjB2hB,UAAWnrB,KAAK6/B,SAAS5zB,UAAUqzD,SAASpiE,IAAK2iC,GAA6BA,EAASzlC,MACvFiiB,aAAcA,IAAMrc,KAAKuiC,kBAE7B,CAEAA,iBACE,MAAMhqB,EAAOvY,KAAKyzH,YAAYl7G,KAC9BvY,KAAK6/B,SAAS5zB,UAAUqzD,SAASt4D,QAAS64B,IACxC,MAAMzlC,EAAOylC,EAASzlC,KACtB4F,KAAK+vH,cAAclE,WAAW7rH,KAAKoqB,GAAI7R,EAAMne,GAAMuU,UAAU,KAC3D3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,8BAA8BpP,WAAcme,KAAO,EAEtD,GAEHvY,KAAK6nB,aAAa2L,aAClBxzB,KAAKq3H,iBACP,CAEAoB,wBAGEz4H,KAAKo9E,kBAAmB,EACxBp9E,KAAK40H,eAAe13H,IAAKqb,GAASvY,KAAKq3H,gBAAgB9+G,IACvD,MAAM4oG,EAAWuX,YAAY,KAC3B14H,KAAKo1H,YAAW,GACXp1H,KAAKo9E,kBACRu7C,cAAcxX,EAAQ,EAEvB,IACL,CAEA6T,wBACOh1H,KAAKo9E,mBAGV55B,aAAaxjD,KAAK44H,gBAClB54H,KAAK44H,eAAiBj1E,WAAW,KAE/B,GADgB1xC,OAAOpJ,OAAO7I,KAAKqmB,SAAShnB,KAAMw5H,GAAMA,GAEtD,OAAO74H,KAAKg1H,wBAEdh1H,KAAKo9E,kBAAmB,EACxBp9E,KAAKo1H,YAAU,EAGd,KACL,CAOAU,OAAOjwG,GACL,MAAO,CACLuE,GAAIvE,EAAUtN,KACd5W,MAAOkkB,EAAUzrB,KACjB+jC,SAAU,GACVyiD,UAAU,EACVtgF,MAAO,CAAE6/C,OAAQt6B,GAAWs6B,QAEhC,CAQAk2E,UAAU1B,EAAmBp8G,GAC3B,MAAMugH,EAAanE,GAAM9hH,OAAQu6E,GAAmBA,EAAI70E,OAASA,GACjE,OAAOugH,EAAa94H,KAAK81H,OAAOgD,GAAc,IAChD,iDAhsBWlF,IAA0B3yH,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,GAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA,4DAA1B4tG,GAA0BxqH,UAAA,4BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4BAC1ByvH,oBAAiB,6TDRTvvH,qFAnBEA,s2BA3BfvI,2BAJR,UAIQA,CAJS,UAITA,CAHqB,UAGrBA,CAFc,UAEdA,CADuB,cAIfA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAAg1H,wBAAuB,GACtCx3H,sBAAA,SAGJA,6BAEEA,2BADF,UACEA,CAD+B,sBAEhBA,uBAAA,kBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAUwC,EAAAqwH,WAAAlpH,GAAkB,GAC3C3J,2BACAA,uBAAA,EAAA+3H,GAAA,cAKN/3H,+BAEAA,uBAAA,EAAAg4H,GAAA,eA2CFh4H,2BAEAA,uBAAA,GAAAi4H,GAAA,yBAAAj4H,0CA/DgBA,sBAAA,GAAAA,wBAAA,WAAAwC,EAAA25E,kBAIHn8E,gDAAA,UAAAwC,EAAA25E,kBADAn8E,uBAAA,UAAAA,4BAAA,EAAAK,GAAAmC,EAAAsO,MAAA8nD,MAAAp2D,EAAAsO,MAAAyzB,UAKUvkC,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA44C,OAGTp7C,+CAAA,OAAAwC,EAAA25E,kBAQNn8E,+CAAA,OAAAwC,EAAAgwH,ibESIxyH,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,aAAAA,mBAAA,MAE4EA,qDAF5EA,uBANA,EAAAk4H,GAAA,cAMAl4H,CAJW,EAAAm4H,GAAA,cAIXn4H,CADW,EAAAo4H,GAAA,iHAJJp4H,uBAAA,OAAAuvB,EAAA8oG,cAAAjpH,UAAA,gBAAAqgB,EAAA,aAGAzvB,+CAAA,OAAAuvB,EAAA8oG,cAAAjpH,UAAA,gBAAAqgB,EAAA,cAEAzvB,+CAAA,OAAAuvB,EAAA8oG,cAAAjpH,UAAA,gBAAAqgB,EAAA,uCA6BLzvB,2BAAA,eACsCA,mBAAA,GAAyBA,qDAAvDA,uBAAA,QAAAs4H,EAAAn/H,MAA8B6G,sDAAAs4H,EAAAn/H,iCAHtC6G,2BANF,kBAMEA,CAD8D,eAC9DA,mBAAA,MACoBA,2BACpBA,uBAAA,EAAAu4H,GAAA,iBAEFv4H,gDAFqCA,sBAAA,GAAAA,uBAAA,UAAAw4H,2BA2BrCx4H,2BAAA,aAAAA,mBAAA,MAEgEA,qDAFhEA,uBAAA,EAAAy4H,GAAA,iHAAOz4H,uBAAA,OAAAuvB,EAAA8oG,cAAAjpH,UAAA,OAAAqgB,EAAA,uCAePzvB,2BAAA,eAC4BA,mBAAA,GAAeA,qDAAnCA,uBAAA,QAAA04H,EAAA76G,MAAoB7d,sDAAA04H,EAAA76G,uEAtGtC7d,oCAAA,GAOQA,2BANN,WAMMA,CANe,cAMfA,CAFa,WAEbA,CADqB,uBACrBA,wBAAA,KAMEA,sBAAA,cASFA,mDACAA,uBAAA,EAAA24H,GAAA,yBAAA34H,oCAWFA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAKAA,wBACFA,6BAGAA,2BAAA,aACEA,uBAAA,GAAA44H,GAAA,oDAWF54H,2BAIAA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAQEA,sBAAA,eAUFA,mDACAA,uBAAA,GAAA64H,GAAA,yBAAA74H,oCAKFA,2BAIEA,2BADF,YACEA,CADqB,oBAQnBA,uBAAA,GAAA84H,GAAA,iBAGJ94H,6BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAMFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAMFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,eACrBA,mBAAA,MAGAA,2BACAA,2BAAA,mBAAcA,mBAAA,4EAAqEA,2BACnFA,sBAAA,+BASFA,2BAIEA,2BADF,YACEA,CADqB,sBACrBA,wBAAA,OAIEA,sBAAA,mBACFA,wBAGNA,iCAEAA,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAGV3vB,sKAnKjCA,sBAAA,GAAAA,uBAAA,YAAAuvB,EAAA8oG,eAKcr4H,sBAAA,GACAA,uBADA,UAAAuvB,EAAA8oG,cAAAloH,SAAA4oH,cAAArkH,SAAA6a,EAAA8oG,cAAAloH,SAAA4oH,cAAAzoH,MACAtQ,CADwG,cAAAg5H,GAU/Gh5H,sBAAA,GACAA,uBADA,UAAAuvB,EAAA8oG,cAAAloH,SAAA4oH,cAAArkH,SAAA6a,EAAA8oG,cAAAloH,SAAA4oH,cAAAzoH,MACAtQ,CADwG,gBAqClGA,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAAuvB,EAAA0pG,mBAeCj5H,sBAAA,GACAA,uBADA,UAAAuvB,EAAA8oG,cAAAloH,SAAA/W,KAAAsb,SAAA6a,EAAA8oG,cAAAloH,SAAA/W,KAAAkX,MACAtQ,CADsF,cAAAk5H,GAW7Fl5H,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA8oG,cAAAloH,SAAA/W,KAAAsb,SAAA6a,EAAA8oG,cAAAloH,SAAA/W,KAAAkX,OAmBkBtQ,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA4pG,WAwCJn5H,sBAAA,IAOAA,uBAPA,OAAAuvB,EAAA6pG,iBAOAp5H,CAPyB,UAAAuvB,EAAA3jB,QAOzB5L,CANmB,OAAAuvB,EAAA8oG,cAMnBr4H,CALsB,yBAKtBA,CAH4B,eAAAuvB,EAAA8pG,YAG5Br5H,CAF4B,SAAAuvB,EAAAQ,OAE5B/vB,CADiB,aAAAuvB,EAAA9T,QAkBxBzb,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAA8oG,cAEAr4H,CAFsB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,UAEtBtb,CADmE,iBCvJvF,MAAOs5H,UAAqCh9G,KAmBhDzd,YACUkO,EACA+P,EACAy8G,EACAC,EACA16H,EACA2C,EACAg4H,EAE6B15G,EACO0gB,EACKD,EACbod,EACCniC,IAAS,GAE9CrO,QAdQrO,KAAAgO,eACAhO,KAAA+d,cACA/d,KAAAw6H,yBACAx6H,KAAAy6H,8BACAz6H,KAAAD,YACAC,KAAA0C,gBACA1C,KAAA06H,uBAE6B16H,KAAAghB,SACOhhB,KAAA0hC,gBACK1hC,KAAAyhC,qBACbzhC,KAAA6+C,QACC7+C,KAAA0c,UArBvC1c,KAAAq6H,iBAA+B,GAC/Br6H,KAAAs6H,YAAc,CACZ3iF,MAAO,CAAC,OAAQ,QAAS,WACzBxgB,MAAO,CAAC,OAAQ,WAChBk5E,OAAQ,CAAC,OAAQ,YAEnBrwG,KAAAgxB,OAAmB,CAAC,QAAS,QAAS,UAkBpChxB,KAAKuc,SAAW/S,oBAClB,CAEAiF,WACEzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK6M,QAAU,CACb,CACEsC,KAAM,QACN/U,KAAMoP,eACN4F,SAAU,IAEZ,CACED,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,GACVqiB,UAAW,eAEb,CACEtiB,KAAM,QACN/U,KAAMoP,iBACN4F,SAAU,GACVqiB,UAAW,eAEb,CACEtiB,KAAM,UACN/U,KAAMoP,mBACN4F,SAAU,GACVqiB,UAAW,gBAIfzxB,KAAKk6H,iBAAmBl6H,KAAKy6H,4BAA4B/nH,IAAI1S,KAAKghB,QAClEhhB,KAAKo6H,UAAYp6H,KAAK6+C,MAAMx6B,OAAQvF,GAAuB,SAAdA,EAAK3Y,MAClDnG,KAAKif,aAELjf,KAAK0c,OAAS1c,KAAK26H,eAAiB36H,KAAKwgB,cAC3C,CAEAvB,aACEjf,KAAKs5H,cAAgB,IAAInmH,KAAY,CACnCo0G,WAAY,IAAI4I,cAAY,CAAE7vH,MAAON,KAAKghB,OAAQupB,UAAU,IAC5DyvF,cAAe,IAAI7J,cAAY,GAAI,CACjC98G,WAAY,CAACC,aAAWC,SAAUD,aAAWE,QAAQ,sBACrD8d,gBAAiB,CACfxP,MAAayP,OACXvxB,KAAKw6H,uBAAuBzqG,OAC5B/vB,KAAKw6H,uBACL,KACA,KACAx6H,KAAKghB,OACLhhB,KAAKyhC,uBAIXm5F,mBAAoB,IAAIzK,cAAYnwH,KAAKyhC,oBACzC3iB,KAAM,IAAIqxG,cAAYnwH,KAAKo6H,UAAU,IAAIt7G,KAAM,CAC7CzL,WAAY,CAACC,aAAWC,YAE1BlZ,KAAM,IAAI81H,cAAY,KAAM,CAC1BC,SAAU,SAEZlvF,IAAK,IAAIivF,cAAY,MACrBhvF,IAAK,IAAIgvF,cAAY,MACrBtrH,KAAM,IAAIsrH,cAAY,IACtB0K,kBAAmB,IAAI1K,eAAY,IAEvC,CAEAwK,eACE36H,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAKw6H,uBACFl5G,KAAKthB,KAAKghB,OAAQhhB,KAAK0hC,cAAe1hC,KAAKyhC,oBAC3C9yB,UAAWgb,IAEV3pB,KAAKs5H,cAAc5mH,IAAI,iBAAiBuN,UACxCjgB,KAAKs5H,cAAc5mH,IAAI,sBAAsBuN,UAC7CjgB,KAAKs5H,cAAc5mH,IAAI,QAAQuN,UAC/BjgB,KAAKs5H,cAAc5mH,IAAI,OAAOuN,UAC9BjgB,KAAKs5H,cAAc5mH,IAAI,OAAOuN,UAE9BjgB,KAAKs5H,cAAc5mH,IAAI,qBAAqBuN,UAC5CjgB,KAAKs5H,cAAc5mH,IAAI,iBAAiBiN,SAAS3f,KAAK0hC,eACtD1hC,KAAKs5H,cAAc5mH,IAAI,sBAAsBiN,SAAS3f,KAAKyhC,oBAClC,aAArB9X,EAAKmxG,aACP96H,KAAKs5H,cAAc5mH,IAAI,QAAQiN,SAAS3f,KAAK0C,cAAc6F,UAAUohB,EAAKmxG,cAE5E96H,KAAKs5H,cAAc5mH,IAAI,OAAOiN,SAASgK,EAAKuX,KAC5ClhC,KAAKs5H,cAAc5mH,IAAI,OAAOiN,SAASgK,EAAKwX,KAC5CnhC,KAAKs5H,cAAc5mH,IAAI,qBAAqBiN,SAASgK,EAAKoxG,gBAC1D/6H,KAAKs6H,YAAct6H,KAAK06H,qBAAqBnyH,UAAUohB,EAAK9kB,MAAM,GAElE7E,KAAKwgB,cAAY,EAEvB,CAEAoQ,SACE,MAAM8Q,EAAgB1hC,KAAKs5H,cAAc3oH,SAAS,iBAC5C8wB,EAAqBzhC,KAAKs5H,cAAc3oH,SAAS,sBACjDmO,EAAO9e,KAAKs5H,cAAc3oH,SAAS,QACnCtW,EAAO2F,KAAKD,UAAUs5D,QAAQr5D,KAAKs5H,cAAc3oH,SAAS,UAAY,EACtEuwB,EAAMlhC,KAAKs5H,cAAc3oH,SAAS,OAClCwwB,EAAMnhC,KAAKs5H,cAAc3oH,SAAS,OAClC9L,EAAO7E,KAAKD,UAAUs6G,kBAAkBr6G,KAAKs5H,cAAc3oH,SAAS,SACpEkqH,EAAoB76H,KAAKs5H,cAAc3oH,SAAS,qBAEtD,GAAI3Q,KAAK0c,OAAQ,CACf,MAAMs+G,EAAoB,IAAT3gI,EAAa,WAAaA,EAC3C2F,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,oBAAsBsZ,KAAS9e,KAAM,CAC1DmiB,cAAeA,IAEjB1c,KAAMhlB,KAAKw6H,uBAAuBzyH,OAChC/H,KAAKghB,OACL0gB,EACAniC,OAAOy7H,GACPv5F,KAGH9yB,UAAU,CACT4S,MAAOA,KACLvhB,KAAKs5H,cAAc/zG,UAAU,CAAEE,gBAAgB,GAAM,EAEvDL,SAAUA,KACRplB,KAAKwwD,YAAU,GAGvB,MACExwD,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,oBAAsBsZ,KAASne,OAAQ,CAC5DwhB,cAAeA,IAEjB1c,KAAMhlB,KAAKw6H,uBAAuBv1G,OAChCjlB,KAAKghB,OACL0gB,EACAD,EACA3iB,EACAvf,OAAOlF,GACP6mC,EACAC,EACAt8B,EACAg2H,KAGHlsH,UAAU,CACT4S,MAAOA,KACLvhB,KAAKs5H,cAAc/zG,UAAU,CAAEE,gBAAgB,GAAM,EAEvDL,SAAUA,KACRplB,KAAKwwD,YAAU,GAIzB,iDA7LW+pE,GAA4Bt5H,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,MAAA9kB,8BA4BjB,SAAQ,GAAAA,8BACR,gBAAe,GAAAA,8BACf,qBAAoB,GAAAA,8BACpB,QAAO,GAAAA,8BACP,SAAQ,+DAhCnBs5H,EAA4BnxH,UAAA,+BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,8CDlB5B5C,2EAAA,kCAAyB,qCAuEAA;iFAYNA,wFAmBEA,kJAvFHA,+EACnB,+CA2BmBA,uFACnB,iDAgCmBA,gFACnB,iDAoCmBA,+EACnB,iDAamBA,+EACnB,iDAaUA,kFAmBOA,6FACjB,8FAAgE,gDApIrDA,qGAGAA,2GAGAA,+IA0BIA,qFA8BJA,oqEAjGvBvI,2BAAA,kBAGWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAEFA,6BAEAA,uBAAA,EAAAg6H,GAAA,yBA0KFh6H,kCAjLWA,uBADA,OAAAwC,EAAAktD,KACA1vD,CADa,0BAKXA,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAGhDtb,+CAAA,gBAAAwC,EAAA4iB,qdEJX,MAAO60G,EAHbp7H,cAIWE,KAAAm7H,WAAuB,CAC9B,uBACA,sBACA,wBACA,4BACA,sBACA,8BAGF5yH,UAAUqoD,GACR,IAAIwqE,EAAO,EACPC,EAAW,EACf,GAAIzqE,EACF,QAAS30D,EAAI,EAAGA,EAAI20D,EAAKx1D,OAAQa,IAC/Bo/H,EAAWzqE,EAAKpzD,WAAWvB,GAE3Bm/H,EAAOh+H,KAAK+B,KAAKi8H,GAAQ,GAAKA,EAAOC,GAGzC,OAAOr7H,KAAKm7H,WAAWC,EAAOp7H,KAAKm7H,WAAW//H,OAChD,iDArBW8/H,EAAsB,kFAAtBA,EAAsB5tB,MAAA,8BCLnCrsG,2BAAA,uDAIEA,mBAAA,GACFA,qEAJMA,mCAAA,eAAA+K,EAAA1L,MAAA,IACAW,kCAAA,UAAAA,wBAAA,IAAA+K,EAAA1L,QACAW,uBAAA,aAAA+K,EAAAsvH,aACJr6H,sBAAA,GAAAA,+BAAA,IAAA+K,EAAA1L,MAAA,iCAIAW,2BAAA,UACMA,mBAAA,GACNA,qEAFMA,mCAAA,wCAAA+K,EAAAuW,IAAA,IAAAvW,EAAA1L,MAAA,IACAW,uDAAA,IAAA+K,EAAAuW,IAAA,KAAAvW,EAAA1L,MAAA,MCFF,MAAOi7H,sDAAgB,4DAAhBA,GAAgBnyH,UAAA,eAAA+C,OAAA,CAAAoW,IAAA,MAAAjiB,MAAA,QAAAg7H,YAAA,eAAA9wH,MAAA,EAAAC,KAAA,EAAAC,OAAA,qGAAAC,SAAA,SAAArB,EAAA7F,MAAA,EAAA6F,GDA7BrI,uBAPA,EAAAu6H,EAAA,aAOAv6H,CAJiC,EAAAw6H,GAAA,yBAAAx6H,4EAHdA,uBAAZ,QAAAwC,EAAA8e,IAAYthB,CAAA,WAAAy6H,iGECjBz6H,2BAAA,QAAAA,mBAAA,KAC2BA,sEAATA,8CAAAM,EAAA8D,kGAUZpE,2BAAA,SAEGA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAASM,EAAAo6H,aAAY,GACD16H,mBAAA,cAAQA,wEAF5BA,wBAAA,UAAAM,EAAAq6H,4EAGH36H,2BAAA,UAEGA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAklE,EAAA56H,4BAAAsvD,UAAAhvD,EAAAN,0BAAA,UAAAA,wBAASM,EAAAo6H,WAAAE,GAAgB,GACL56H,mBAAA,GAAQA,gHAF5BA,wBAAA,SAAA46H,IAAAt6H,EAAAq6H,YAEoB36H,sDAAA46H,6BATzB56H,2BAAA,UAMEA,uBAJA,EAAA66H,EAAA,UAIA76H,CADuB,EAAA86H,EAAA,WAKzB96H,qDALMA,+CAAA,YAAA46H,GAIA56H,+CAAA,YAAA46H,oEAnBZ56H,oCAAA,GACEA,uBAAA,EAAA+6H,GAAA,YAEA/6H,2BAAA,aAEOA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAA4+D,eAAc,GAF9Bl/D,2BAMEA,2BADF,UACEA,CADyB,UAEvBA,uBAAA,EAAAg7H,EAAA,YAYJh7H,6GApBKA,+CAAA,OAAAM,EAAA8D,OAIEpE,+CAAA,KAAAM,EAAA26H,iBAKkBj7H,sBAAA,GAAkBA,uBAAlB,UAAAM,EAAA46H,cAAkBl7H,CAAA,eAAAM,EAAAwS,YCJvC,MAAOqoH,GALbt8H,cAUYE,KAAAq8H,kBAA4C,IAAIvyH,eAChD9J,KAAAs8H,eAAuC,IAAIxyH,eAErD9J,KAAA47H,WAAa,GAGbntH,WACEzO,KAAKm8H,cAAgBn8H,KAAK+0F,OACrB/0F,KAAK47H,YAAc57H,KAAK+0F,MAAM35F,QAAQ4E,KAAK27H,WAAW37H,KAAK+0F,MAAM,GACxE,CAEA50B,eACE,MAAMo8D,EAAcn5E,SAAS6N,eAAejxD,KAAKk8H,iBACjDl8H,KAAKm8H,cAAgBn8H,KAAK+0F,MAAM1wE,OAAQ+8C,GAASA,EAAKl/D,SAASq6H,EAAYj8H,OAC7E,CAEAq7H,WAAWv6D,EAAO,IAChBphE,KAAK47H,WAAax6D,EAClBphE,KAAKs8H,eAAepyH,KAAKk3D,EAC3B,CAEArtD,UAAUqtD,GACR,OAAOA,CACT,iDA5BWg7D,GAA2B,4DAA3BA,GAA2BhzH,UAAA,6BAAA+C,OAAA,CAAA4oF,MAAA,QAAA1vF,MAAA,QAAA62H,gBAAA,mBAAA3xH,QAAA,CAAA8xH,kBAAA,oBAAAC,eAAA,kBAAA9xH,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDLpB5C,2EAAA,2gBAFpBvI,uBAAA,EAAAu7H,GAAA,2BAAev7H,uBAAA,OAAAwC,EAAAsxF,MAAA35F,iVEGX6F,2BAFF,WAEEA,CADuD,+BAI/BA,uBAAA,0BAAA2J,GAAA3J,0BAAA4P,GAAA,MAAA2f,EAAAvvB,4BAAA,OAAAA,wBAAkBuvB,EAAAisG,qBAAA7xH,GAA4B,GACxE3J,yEAH0BA,+CAAA,QAAAuvB,EAAAksG,8CA2B1Bz7H,sBAAA,uEAGcA,uBAFA,QAAA+L,EAAAsU,KAAAw5G,YAEA75H,CAF8B,OAAA+L,EAAAsU,KAAAq7G,WAE9B17H,CAD4B,QAAA+L,EAAA5S,iCAKxC6G,2BAAA,aAGEA,mBAAA,yCAAuCA,+EAAvCA,uDAAA,IAAAA,wBAAA,IAAA+L,EAAAsU,KAAAq7G,YAAA,8BAHF17H,uBAAA,EAAA27H,GAAA,iEACO37H,uBAAA,qBAAA+L,EAAAsU,KAAAu7G,uCAFT57H,uBANA,EAAA67H,GAAA,sBAMA77H,CAF2B,EAAA87H,GAAA,yBAAA97H,yFAJwDA,uBAApE,OAAA+L,EAAAsU,KAAAu7G,aAAA,cAAA7vH,EAAAsU,KAAAu7G,YAAoE57H,CAAA,WAAA+7H,6BAgBnF/7H,sBAAA,2CAAUA,uBAAA,QAAA4tE,8BAKV5tE,2BAAA,aAGEA,mBAAA,GACFA,qDAFMA,uBADA,UAAAg8H,EAAAhhE,MACAh7D,CADwB,aAAAg8H,EAAA3sB,SAE5BrvG,uDAAA,IAAAg8H,EAAA/iI,QAAA,gCAHF+G,uBAAA,EAAAi8H,GAAA,uFAAyBj8H,uBAAA,UAAAA,wBAAA,IAAAumB,+BAWzBvmB,2BAAA,UACEA,sBAAA,UAGFA,4GAFKA,2DAAA,gBAAAk8H,EAAA/iI,KAAA,oBADA6G,uBAAA,UAAAA,4BAAA,EAAAm8H,GAAA5sG,EAAAze,MAAAkgB,QAAAzB,EAAAze,MAAA8nD,kCAMH54D,sBAAA,0FAEGA,mCAAA,gBAAAk8H,EAAA/iI,KAAA,6CAFA6G,uBAAA,UAAAA,4BAAA,EAAAm8H,GAAA5sG,EAAAze,MAAA2oB,QAAAlK,EAAAze,MAAA8nD,kCAKL54D,sBAAA,mEAAUA,uBAAA,cAAAk8H,GAAA,MAAAA,EAAA77G,KAAA,KAAA67G,EAAA77G,KAAAnb,gCAGVlF,sBAAA,mEAEUA,uBAAA,oBAAAk8H,GAAA,MAAAA,EAAA77G,KAAA,KAAA67G,EAAA77G,KAAAy5G,2CAnBV95H,2BAAA,aAAsBA,mBAAA,GAAYA,2BAiBlCA,uBAfA,EAAAo8H,GAAA,cAeAp8H,CAfwE,EAAAq8H,GAAA,yBAAAr8H,mCAexEA,CATkC,EAAAs8H,GAAA,kBASlCt8H,CAFkD,EAAAu8H,GAAA,yEAf5Bv8H,sDAAAk8H,EAAA/iI,MAEf6G,wBAAuCA,uBAAvC,2BAAAk8H,GAAA,MAAAA,EAAA77G,KAAA,KAAA67G,EAAA77G,KAAA+I,OAAuCppB,CAAA,WAAAw8H,GAanCx8H,sBAAA,GAAAA,uBAAA,4BAAAk8H,GAAA,MAAAA,EAAA77G,KAAA,KAAA67G,EAAA77G,KAAAnb,OAGAlF,+CAAA,aAAAk8H,GAAA,MAAAA,EAAA77G,KAAA,KAAA67G,EAAA77G,KAAAy5G,2CAQP95H,2BAAA,uBAEQA,mBAAA,GACRA,sEADQA,uDAAA,IAAAuvB,EAAAktG,aAAA,gCAHVz8H,oCADF,KACEA,CAD+B,MAE7BA,uBAAA,EAAA08H,GAAA,yBAKE18H,2BADF,WACEA,CADsB,YAEpBA,sBAAA,cAKAA,2BAAA,cAAAA,wBAAA,KAE6BA,sBAAA,eAGyCA,wBAE1EA,wHApBUA,uBAAA,YAAA28H,GAEO38H,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAktG,aAAAtiI,OAAA,IC3CjB,MAAOyiI,WAAqCtgH,KA2ChDzd,YACUg+H,EACA9vH,EACA6Z,EACA3Z,EACA6P,EACAggH,EACAC,GAER3vH,QARQrO,KAAA89H,yBACA99H,KAAAgO,eACAhO,KAAA6nB,eACA7nB,KAAAkO,qBACAlO,KAAA+d,cACA/d,KAAA+9H,8BACA/9H,KAAAg+H,gBA5BVh+H,KAAA6M,QAA2B,GAG3B7M,KAAAiM,UAAY,IAAIqC,IAEhBtO,KAAA+R,MAAQC,KAGRhS,KAAA09H,aAAuB,GACvB19H,KAAAi+H,aAAuB,GAIvBj+H,KAAAuO,QAAU,IAAIC,kBAAmC,IACjDxO,KAAAk+H,cAAgB,IAAI1vH,kBAAmC,IAEvDxO,KAAA08H,mBAA+B,GAC/B18H,KAAAm+H,eAAoC,GAEpCn+H,KAAAo+H,gBAA0B,GAYxBp+H,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,EACVC,aAAcrP,KAAKq+H,SAErB,CACEjkI,KAAMoP,qBACN2F,KAAM,iBACNC,SAAU,GACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpBhmB,MAAO,6BAGX,CACE7hE,KAAMoP,iBACN2F,KAAM,mBACNC,SAAU,GACVC,aAAcrP,KAAKs+H,cACnB7sG,UAAW,cAEb,CACEr3B,KAAMoP,gBACN2F,KAAM,YACNC,SAAU,EACV+Z,mBAAoBC,IAAa7Q,MAEnC,CACEne,KAAMoP,gBACN2F,KAAM,YACNC,SAAU,GACVC,aAAcrP,KAAKu+H,wBAErB,CACEnkI,KAAMoP,mBACN2F,KAAM,kBACNC,SAAU,GACV+Z,mBAAoBC,IAAaijE,UAIrCrsF,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKw+H,aAEpB,CACEpkI,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAKw+H,WAAU,IAE9B,CACEpkI,KAAM4F,KAAKgO,aAAa89D,OACxBh/D,WAAY,OACZyb,KAAMvW,KAAMysF,KACZx+E,QAASA,KAAOjgB,KAAKiM,WAAW8mE,aAChC/pD,MAAOA,IAAMhpB,KAAKy+H,kBAEpB,CACErkI,KAAM4F,KAAKgO,aAAam+D,WACxBr/D,WAAY,SACZyb,KAAMvW,KAAM8sF,UACZr2E,WAAYA,IAAM,CAChB,qBACAzoB,KAAKghB,OACL7O,YAAUnS,KAAKo+H,iBAAmB//G,IAA0Bre,KAAKo+H,gBACjE,CAAEtmH,UAAW9X,KAAKiM,WAAWmc,SAAShuB,OAExC6lB,QAASA,KAAOjgB,KAAKiM,WAAW0c,oBAElC,CACEvuB,KAAM4F,KAAKgO,aAAaw6D,OACxB17D,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAK0+H,yBAItB1+H,KAAKk6H,iBAAmBl6H,KAAKk+H,cAAclvH,QACzCC,aAAU,IACRjP,KAAK+9H,4BAA4BrrH,IAAI1S,KAAKghB,QAAQ,GAAOhS,QACvDswB,OAAKwO,IACH9tC,KAAK08H,mBAAqB5uF,EAAO5wC,IAAKi6B,GAAUA,EAAM/8B,MACtD4F,KAAK08H,mBAAmBiC,QAAQ,GAAE,IACnC,EACDn6G,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,UAKpB,CAEAo3D,YACEx6E,KAAKuO,QAAQkB,KAAK,GACpB,CAEA7I,YAAYC,GACNA,EAAQma,SACVhhB,KAAKuO,QAAQkB,KAAK,IAClBzP,KAAKk+H,cAAczuH,KAAK,IAE5B,CAEA/C,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAwyH,iBACE,MAAMG,EAAoB5+H,KAAKiM,WAAWqzD,WAAW,GAErDt/D,KAAKg+H,cAAclQ,iBAAiBn/G,UAAU,CAC5Cc,KAAOia,IACL1pB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKsiG,GAA6B,CAClEp5F,SAAUA,IAAM/zB,KAAK4qB,SAASqO,QAC9Bs0F,UAAW,CACT9B,KAAM/hG,EACN1I,OAAQhhB,KAAKghB,OACbwsG,SAAUoR,EAAkBt9G,KAAK/I,OAEpC,GAGP,CAEAimH,UAAU31G,GAAO,GACf7oB,KAAK6nB,aAAagD,KAAK0vG,EAA8B,CACnDv5G,OAAQhhB,KAAKghB,OACb0gB,cAAe1hC,KAAKiM,WAAWmc,SAAShuB,KACxCqnC,mBAAoBzhC,KAAKo+H,gBACzBv/E,MAAO7+C,KAAK6+C,MACZniC,OAAQmM,GAEZ,CAEA61G,uBACE1+H,KAAK6+H,WAAa,IAAI1rH,KAAY,CAChC2uB,gBAAiB,IAAIquF,eAAY,KAEnCnwH,KAAK09H,aAAe,GACpB19H,KAAKi+H,aAAej+H,KAAKiM,UAAUmc,QAAQhuB,KAC3C4F,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDC,OAAQC,KAAeC,KACvBkoC,kBAAmB,SACnBhoC,UAAW,CAACnrB,KAAKi+H,cACjB/yG,gBAAiB,YACjBqpC,eAAgBv0D,KAAK6+H,WACrBppE,uBAAwBz1D,KAAK8+H,WAC7BziH,aAAcA,IACZrc,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,0BAA2B,CAAE2c,cAAe1hC,KAAKi+H,eACxEj5G,KAAMhlB,KAAK89H,uBAAuBr+F,OAChCz/B,KAAKghB,OACLhhB,KAAKi+H,aACLj+H,KAAKo+H,gBACLp+H,KAAK6+H,WAAWluH,SAAS,sBAG5BhC,UAAU,CACTyW,SAAUA,IAAMplB,KAAK6nB,aAAa2L,aAClCjS,MAAQA,IACNvhB,KAAK4qB,SAAS6I,kBAAkBC,qBAChC1zB,KAAK09H,aAAen8G,EAAMA,MAAM8D,WAI5C,CAEAo3G,qBAAqBh7F,GACnBzhC,KAAKo+H,gBAAkB38F,EACvBzhC,KAAK++H,eACP,CAEAA,gBACE/+H,KAAKg/H,YAAch/H,KAAKuO,QAAQS,QAC9BC,aAAU,IACRjP,KAAK89H,uBAAuBprH,IAAI1S,KAAKghB,OAAQhhB,KAAKo+H,iBAAiBpvH,QACjEwV,cAAW,KACTxkB,KAAKwF,SAAS+b,SAAK,EACZ6B,MAAG,UAKpB,iDAxPWy6G,IAA4B58H,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA,4DAA5B83G,GAA4Bz0H,UAAA,+BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,y1BDNnBE,mGA8DAA,4FAAiB,0OAG6B,o5CAvGpEvI,2BAAA,WACEA,uBAAA,EAAAg+H,GAAA,2CAQEh+H,2BADF,WACEA,CADgC,+CAOtBA,uBADA,uBAAAA,iCAAAsL,GAAAtL,wBAAawC,EAAA+2E,YAAW,EACxBv5E,CADyB,2BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBACNwC,EAAAiJ,gBAAA9B,GAAuB,GAElD3J,2BAAA,YACEA,sBAAA,yBASRA,iCAwDAA,uBAtDA,EAAAi+H,GAAA,yBAAAj+H,mCAsDAA,CArDgC,GAAAk+H,GAAA,yBAAAl+H,mCAqDhCA,CArCoC,GAAAm+H,GAAA,yBAAAn+H,mCAqCpCA,CAhCoC,GAAAo+H,GAAA,yBAAAp+H,mCAgCpCA,CAvBgC,GAAAq+H,GAAA,yBAAAr+H,0CA1DxBA,+CAAA,OAAAA,wBAAA,IAAAwC,EAAAy2H,mBAOMj5H,sBAAA,GAIAA,uBAJA,OAAAA,wBAAA,IAAAwC,EAAAu7H,aAIA/9H,CAJ4B,UAAAwC,EAAAoJ,QAI5B5L,CAFmB,iBAOPA,sBAAA,GAIAA,uBAJA,aAAAwC,EAAA87B,YAAA01E,OAIAh0G,CAJiC,YAAAwC,EAAAwI,UAIjChL,CAHuB,eAAAwC,EAAAsJ,wSEcrC9L,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAE8CA,mDAC9CA,2BAAA,aAAAA,mBAAA,MAE4EA,qDAF5EA,uBANA,EAAAs+H,GAAA,cAMAt+H,CAJW,EAAAu+H,GAAA,cAIXv+H,CADW,EAAAw+H,GAAA,iHAJJx+H,uBAAA,OAAAuvB,EAAAkvG,mBAAArvH,UAAA,qBAAAqgB,EAAA,aAGAzvB,+CAAA,OAAAuvB,EAAAkvG,mBAAArvH,UAAA,qBAAAqgB,EAAA,cAEAzvB,+CAAA,OAAAuvB,EAAAkvG,mBAAArvH,UAAA,qBAAAqgB,EAAA,oCAyCPzvB,2BAAA,aAAAA,mBAAA,MAEgEA,qDAFhEA,uBAAA,EAAA0+H,GAAA,iHAAO1+H,uBAAA,OAAAuvB,EAAAkvG,mBAAArvH,UAAA,OAAAqgB,EAAA,uCAePzvB,2BAAA,eAC4BA,mBAAA,GAAeA,qDAAnCA,uBAAA,QAAA2+H,EAAA9gH,MAAoB7d,sDAAA2+H,EAAA9gH,uEAvFtC7d,oCAAA,GAOQA,2BANN,WAMMA,CANe,cAMfA,CAFa,WAEbA,CADqB,uBACrBA,wBAAA,KAMEA,sBAAA,cASFA,mDACAA,uBAAA,EAAA4+H,GAAA,yBAAA5+H,oCAWFA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAKFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAQEA,sBAAA,eAUFA,mDACAA,uBAAA,GAAA6+H,GAAA,yBAAA7+H,oCAKFA,2BAIEA,2BADF,YACEA,CADqB,oBAQnBA,uBAAA,GAAA8+H,GAAA,iBAGJ9+H,6BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAMFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAMFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,eACrBA,mBAAA,MAGAA,2BACAA,2BAAA,mBAAcA,mBAAA,4EAAqEA,2BAEnFA,sBAAA,+BAUNA,+BAEAA,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAGV3vB,sKA1IjCA,sBAAA,GAAAA,uBAAA,YAAAuvB,EAAAkvG,oBAKcz+H,sBAAA,GACAA,uBADA,UAAAuvB,EAAAkvG,mBAAAtuH,SAAAq2G,mBAAA9xG,SAAA6a,EAAAkvG,mBAAAtuH,SAAAq2G,mBAAAl2G,MACAtQ,CAD4H,cAAA++H,GAUnI/+H,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAkvG,mBAAAtuH,SAAAq2G,mBAAA9xG,SAAA6a,EAAAkvG,mBAAAtuH,SAAAq2G,mBAAAl2G,OAqCOtQ,sBAAA,GACAA,uBADA,UAAAuvB,EAAAkvG,mBAAAtuH,SAAA/W,KAAAsb,SAAA6a,EAAAkvG,mBAAAtuH,SAAA/W,KAAAkX,MACAtQ,CADgG,cAAAg/H,GAWvGh/H,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAkvG,mBAAAtuH,SAAA/W,KAAAsb,SAAA6a,EAAAkvG,mBAAAtuH,SAAA/W,KAAAkX,OAmBkBtQ,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA4pG,WAyCJn5H,sBAAA,IAOAA,uBAPA,OAAAuvB,EAAA6pG,iBAOAp5H,CAPyB,UAAAuvB,EAAA3jB,QAOzB5L,CANmB,OAAAuvB,EAAAkvG,mBAMnBz+H,CAL2B,yBAK3BA,CAH4B,eAAAuvB,EAAA8pG,YAG5Br5H,CAF4B,SAAAuvB,EAAAQ,OAE5B/vB,CADiB,aAAAuvB,EAAA9T,QAOxBzb,wBAEAA,uBAFA,OAAAuvB,EAAAkvG,mBAEAz+H,CAF2B,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,UAE3Btb,CADmE,iBCjIvF,MAAOi/H,WAA0C3iH,KAiBrDzd,YACUkO,EACA+P,EACAggH,EACAh+H,EACA2C,EACAg4H,EAE6B15G,EACYymG,EACb5oE,EACCniC,GAAS,GAE9CrO,QAZQrO,KAAAgO,eACAhO,KAAA+d,cACA/d,KAAA+9H,8BACA/9H,KAAAD,YACAC,KAAA0C,gBACA1C,KAAA06H,uBAE6B16H,KAAAghB,SACYhhB,KAAAynH,qBACbznH,KAAA6+C,QACC7+C,KAAA0c,SAnBvC1c,KAAAq6H,iBAA+B,GAC/Br6H,KAAAs6H,YAAc,CACZ3iF,MAAO,CAAC,OAAQ,QAAS,WACzBxgB,MAAO,CAAC,OAAQ,WAChBk5E,OAAQ,CAAC,OAAQ,YAEnBrwG,KAAAgxB,OAAmB,CAAC,QAAS,QAAS,UAgBpChxB,KAAKuc,SAAW/S,0BAClB,CAEAiF,WACEzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK6M,QAAU,CACb,CACEsC,KAAM,QACN/U,KAAMoP,eACN4F,SAAU,IAEZ,CACED,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,GACVqiB,UAAW,eAEb,CACEtiB,KAAM,QACN/U,KAAMoP,iBACN4F,SAAU,GACVqiB,UAAW,eAEb,CACEtiB,KAAM,UACN/U,KAAMoP,mBACN4F,SAAU,GACVqiB,UAAW,gBAIfzxB,KAAKo6H,UAAYp6H,KAAK6+C,MAAMx6B,OAAQvF,GAAuB,SAAdA,EAAK3Y,MAClDnG,KAAKif,aAELjf,KAAK0c,OAAS1c,KAAK26H,eAAiB36H,KAAKwgB,cAC3C,CAEAvB,aACEjf,KAAK0/H,mBAAqB,IAAIvsH,KAAY,CACxCo0G,WAAY,IAAI4I,cAAY,CAAE7vH,MAAON,KAAKghB,OAAQupB,UAAU,IAC5Dk9E,mBAAoB,IAAI0I,cAAY,GAAI,CACtC98G,WAAY,CAACC,aAAWC,SAAUD,aAAWE,QAAQ,sBACrD8d,gBAAiB,CACfxP,MAAayP,OACXvxB,KAAK+9H,4BAA4BhuG,OACjC/vB,KAAK+9H,4BACL,KACA,KACA/9H,KAAKghB,WAIXlC,KAAM,IAAIqxG,cAAYnwH,KAAKo6H,UAAU,IAAIt7G,KAAM,CAC7CzL,WAAY,CAACC,aAAWC,YAE1BlZ,KAAM,IAAI81H,cAAY,KAAM,CAC1BC,SAAU,SAEZlvF,IAAK,IAAIivF,cAAY,MACrBhvF,IAAK,IAAIgvF,cAAY,MACrBtrH,KAAM,IAAIsrH,cAAY,KAE1B,CAEAwK,eACE36H,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAK+9H,4BACFz8G,KAAKthB,KAAKghB,OAAQhhB,KAAKynH,oBACvB94G,UAAWgb,IAEV3pB,KAAK0/H,mBAAmBhtH,IAAI,sBAAsBuN,UAElDjgB,KAAK0/H,mBAAmBhtH,IAAI,sBAAsBiN,SAAS3f,KAAKynH,oBACvC,aAArB99F,EAAKmxG,aACP96H,KAAK0/H,mBACFhtH,IAAI,QACJiN,SAAS3f,KAAK0C,cAAc6F,UAAUohB,EAAKmxG,cAEhD96H,KAAK0/H,mBAAmBhtH,IAAI,OAAOiN,SAASgK,EAAKuX,KACjDlhC,KAAK0/H,mBAAmBhtH,IAAI,OAAOiN,SAASgK,EAAKwX,KACjDnhC,KAAKs6H,YAAct6H,KAAK06H,qBAAqBnyH,UAAUohB,EAAK9kB,MAAM,GAElE7E,KAAKwgB,cAAY,EAEvB,CAEAoQ,SACE,MAAM62F,EAAqBznH,KAAK0/H,mBAAmB/uH,SAAS,sBACtDmO,EAAO9e,KAAK0/H,mBAAmB/uH,SAAS,QACxCtW,EAAO2F,KAAKD,UAAUs5D,QAAQr5D,KAAK0/H,mBAAmB/uH,SAAS,UAAY,EAC3EuwB,EAAMlhC,KAAK0/H,mBAAmB/uH,SAAS,OACvCwwB,EAAMnhC,KAAK0/H,mBAAmB/uH,SAAS,OACvC9L,EAAO7E,KAAKD,UAAUs6G,kBAAkBr6G,KAAK0/H,mBAAmB/uH,SAAS,SAC3E3Q,KAAK0c,OACP1c,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,0BAA4BsZ,KAAS9e,KAAM,CAChEkoG,mBAAoBA,IAEtBziG,KAAMhlB,KAAK+9H,4BAA4B94G,OACrCjlB,KAAKghB,OACLymG,EACA3oG,EACAvf,OAAOlF,GACP6mC,EACAC,EACAt8B,KAGH8J,UAAU,CACT4S,MAAOA,KACLvhB,KAAK0/H,mBAAmBn6G,UAAU,CAAEE,gBAAgB,GAAM,EAE5DL,SAAUA,KACRplB,KAAKwwD,YAAU,IAIrBxwD,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,0BAA4BsZ,KAASne,OAAQ,CAClEunG,mBAAoBA,IAEtBziG,KAAMhlB,KAAK+9H,4BAA4B94G,OACrCjlB,KAAKghB,OACLymG,EACA3oG,EACAvf,OAAOlF,GACP6mC,EACAC,EACAt8B,KAGH8J,UAAU,CACT4S,MAAOA,KACLvhB,KAAK0/H,mBAAmBn6G,UAAU,CAAEE,gBAAgB,GAAM,EAE5DL,SAAUA,KACRplB,KAAKwwD,YAAU,GAIzB,iDA7KW0vE,IAAiCj/H,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAyBtB,SAAQ,GAAAA,8BACR,qBAAoB,GAAAA,8BACpB,QAAO,GAAAA,8BACP,SAAQ,+DA5BnBi/H,GAAiC92H,UAAA,oCAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,2CDfjC5C,2EAAA,kCAAyB,qCAkBNA,oGAsCMA;iFAYNA,wFAmBEA,kJAxEHA,+EACnB,+CA2BmBA,uFACnB,iDAiBmBA,gFACnB,iDAoCmBA,+EACnB,iDAamBA,+EACnB,iDAaUA,mFAjGCA,qGAGAA,iHAGAA,+IAyCAA,2wDAlFvBvI,2BAAA,kBAGWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAEFA,6BAEAA,uBAAA,EAAAk/H,GAAA,yBAiJFl/H,kCAxJWA,uBADA,OAAAwC,EAAAktD,KACA1vD,CADa,0BAKXA,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAGhDtb,+CAAA,gBAAAwC,EAAA4iB,0kBEPfplB,2BAAA,gBAOUA,uBADA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAaM,EAAAi5E,YAAW,EACxBv5E,CADyB,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBACNM,EAAAmL,gBAAA9B,GAAuB,GAElD3J,2BAAA,WACEA,sBAAA,wBAOJA,4GAZUA,uBAJA,OAAAm/H,EAIAn/H,CAJuB,UAAAM,EAAAsL,QAIvB5L,CAFmB,iBAOPA,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAA01E,OAIAh0G,CAJiC,YAAAM,EAAA0K,UAIjChL,CAHuB,eAAAM,EAAAwL,yCAZ/C9L,oCAAA,GACEA,uBAAA,EAAAo/H,GAAA,2EAAWp/H,+CAAA,OAAAm/H,6BAsBXn/H,sBAAA,uEAGcA,uBAFA,QAAA+L,EAAAsU,KAAAw5G,YAEA75H,CAF8B,OAAA+L,EAAAsU,KAAAq7G,WAE9B17H,CAD4B,QAAA+L,EAAA5S,iCAIxC6G,2BAAA,aAGEA,mBAAA,yCAAuCA,+EAAvCA,uDAAA,IAAAA,wBAAA,IAAA+L,EAAAsU,KAAAq7G,YAAA,8BAHF17H,uBAAA,EAAAq/H,GAAA,iEACOr/H,uBAAA,qBAAA+L,EAAAsU,KAAAu7G,uCAFT57H,uBALA,EAAAs/H,GAAA,qBAKAt/H,CAD2B,EAAAu/H,GAAA,yBAAAv/H,yFAJwDA,uBAApE,OAAA+L,EAAAsU,KAAAu7G,aAAA,cAAA7vH,EAAAsU,KAAAu7G,YAAoE57H,CAAA,WAAA+7H,6BAenF/7H,sBAAA,2CAAUA,uBAAA,QAAA4tE,8BAKV5tE,2BAAA,aAGEA,mBAAA,GACFA,qDAFMA,uBADA,UAAAg8H,EAAAhhE,MACAh7D,CADwB,aAAAg8H,EAAA3sB,SAE5BrvG,uDAAA,IAAAg8H,EAAA/iI,QAAA,gCAHF+G,uBAAA,EAAAw/H,GAAA,uFAAyBx/H,uBAAA,UAAAA,wBAAA,IAAAumB,KCfrB,MAAOk5G,GAgCX5gI,YACU6gI,EACA3yH,EACA6Z,EACA3Z,EACA6P,EACAi5C,GALAh3D,KAAA2gI,uBACA3gI,KAAAgO,eACAhO,KAAA6nB,eACA7nB,KAAAkO,qBACAlO,KAAA+d,cACA/d,KAAAg3D,kBAfVh3D,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAA+R,MAAQC,KAIRhS,KAAAuO,QAAU,IAAIC,kBAAwC,IAYpDxO,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GACV+Z,mBAAoBC,IAAaqxD,MAEnC,CACErgF,KAAMoP,qBACN2F,KAAM,iBACNC,SAAU,GACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpBhmB,MAAO,6BAGX,CACE7hE,KAAMoP,iBACN2F,KAAM,mBACNC,SAAU,GACVC,aAAcrP,KAAKs+H,cACnB7sG,UAAW,cAEb,CACEr3B,KAAMoP,gBACN2F,KAAM,YACNC,SAAU,GACVC,aAAcrP,KAAKu+H,wBAErB,CACEnkI,KAAMoP,mBACN2F,KAAM,kBACNC,SAAU,GACV+Z,mBAAoBC,IAAaijE,UAIrCrsF,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKw+H,YAClB91G,aAAezc,IAAiCA,EAAU8mE,cAE5D,CACE34E,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAKw+H,WAAU,IAE9B,CACEpkI,KAAM4F,KAAKgO,aAAam+D,WACxBr/D,WAAY,SACZyb,KAAMvW,KAAM8sF,UACZr2E,WAAYA,IAAM,CAAC,qBAAsBzoB,KAAKghB,OAAQhhB,KAAKiM,WAAWmc,SAAShuB,MAC/E6lB,QAASA,KAAOjgB,KAAKiM,UAAU0c,oBAEjC,CACEvuB,KAAM4F,KAAKgO,aAAaw6D,OACxB17D,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAK0+H,yBAItB1+H,KAAK4gI,gBAAkB5gI,KAAKuO,QAAQS,QAClCC,aAAU,IACRjP,KAAK2gI,qBAAqBjuH,IAAI1S,KAAKghB,QAAQhS,QACzCwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,WAEb,EAEHkwF,eAAY,GAEhB,CAEA94B,YACEx6E,KAAKuO,QAAQkB,KAAK,GACpB,CAEA7I,YAAYC,GACNA,EAAQma,QACVhhB,KAAKuO,QAAQkB,KAAK,GAEtB,CAEA/C,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAuyH,UAAU31G,GAAO,GACf7oB,KAAK6nB,aAAagD,KAAKq1G,GAAmC,CACxDl/G,OAAQhhB,KAAKghB,OACbymG,mBAAoBznH,KAAKiM,WAAWmc,SAAShuB,KAC7CykD,MAAO7+C,KAAK6+C,MACZniC,OAAQmM,GAEZ,CAEA61G,uBACE,MAAMtkI,EAAO4F,KAAKiM,UAAUmc,QAAQhuB,KACpC4F,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1DC,OAAQC,KAAeC,KACvBC,gBAAiB,kBACjBC,UAAW,CAAC/wB,GACZ+4D,kBAAmB,SACnB/nC,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,gCAAiC,CAAE0iG,mBAAoBrtH,IAC9E4qB,KAAMhlB,KAAK2gI,qBAAqBlhG,OAAOz/B,KAAKghB,OAAQ5mB,MAG5D,iDA/JWsmI,IAA6Bz/H,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAA+H,MAAA,4DAA7B03H,GAA6Bt3H,UAAA,gCAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,gsBDCpBE,gyBA7BtBvI,uBAAA,EAAA4/H,GAAA,oDAyCA5/H,uBApBA,EAAA6/H,GAAA,yBAAA7/H,mCAoBAA,CAnBgC,EAAA8/H,GAAA,yBAAA9/H,mCAmBhCA,CAJoC,EAAA+/H,GAAA,yBAAA//H,0CArCrBA,uBAAA,OAAAA,wBAAA,IAAAwC,EAAAm9H,4IE+BH3/H,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEuCA,qDAFvCA,uBAHA,EAAAggI,GAAA,cAGAhgI,CADW,EAAAigI,GAAA,iHADJjgI,uBAAA,OAAAuvB,EAAA2wG,aAAA9wH,UAAA,eAAAqgB,EAAA,aAGAzvB,+CAAA,OAAAuvB,EAAA2wG,aAAA9wH,UAAA,eAAAqgB,EAAA,sCA2BLzvB,2BAAA,eACiBA,mBAAA,aAAOA,sDACxBA,2BAAA,eACsCA,mBAAA,GAAoBA,+EADlDA,uBAAA,QAAAs4H,GAC8Bt4H,sDAAAs4H,8BAJxCt4H,oCAAA,GAGEA,uBAFA,EAAAmgI,GAAA,gBAEAngI,CADiB,EAAAogI,GAAA,+EADRpgI,+CAAA,WAAAs4H,GAGAt4H,+CAAA,YAAAs4H,8BAVbt4H,2BAAA,mBAMEA,uBAAA,EAAAqgI,GAAA,uBAMFrgI,sEAN2CA,+CAAA,UAAAuvB,EAAA+wG,4CAiBzCtgI,2BAAA,eACiCA,mBAAA,GAAoBA,qDAA7CA,uBAAA,QAAAugI,EAAApnI,MAAyB6G,sDAAAugI,EAAApnI,uEANnC6G,2BAFF,WAEEA,CAD6C,mBAKjCA,uBAAA,8BAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,0BAAA,UAAAA,wBAAoBuvB,EAAAixG,gBAAAjxG,EAAAvkB,UAAA3L,OAAgC,GAC9DW,uBAAA,EAAAygI,GAAA,iBAGJzgI,oDAHkCA,sBAAA,GAAAA,uBAAA,UAAA0gI,oEAvExC1gI,oCAAA,GAOQA,2BANN,cAMMA,CAHW,WAGXA,CAFiB,WAEjBA,CADqB,uBACrBA,wBAAA,KAMEA,sBAAA,cASFA,mDACAA,uBAAA,EAAA2gI,GAAA,yBAAA3gI,oCAQFA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAGEA,sBAAA,eAKFA,wBACFA,6BAGAA,2BAAA,aACEA,uBAAA,GAAA4gI,GAAA,qBAaF5gI,2BAGAA,uBAAA,GAAA6gI,GAAA,6CAWF7gI,2BAEAA,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAKrD3vB,0IA/EMA,+CAAA,YAAAuvB,EAAA2wG,cAOgBlgI,sBAAA,GACAA,uBADA,UAAAuvB,EAAA2wG,aAAA/vH,SAAA+wB,aAAAxsB,SAAA6a,EAAA2wG,aAAA/vH,SAAA+wB,aAAA5wB,MACAtQ,CADoG,cAAA8gI,GAS3G9gI,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA2wG,aAAA/vH,SAAA+wB,aAAAxsB,SAAA6a,EAAA2wG,aAAA/vH,SAAA+wB,aAAA5wB,OAkCItQ,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA+wG,iBAYTtgI,+CAAA,OAAAA,wBAAA,KAAAuvB,EAAAwuG,cAac/9H,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAA2wG,aAEAlgI,CAFqB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,UAErBtb,CADmE,iBCrEzF,MAAO+gI,WAA8CzkH,KAUzDzd,YACUkO,EACA+P,EACAy8G,EAE6Bx5G,EACO0gB,EACKD,EACZ/kB,GAAS,GAE9CrO,QATQrO,KAAAgO,eACAhO,KAAA+d,cACA/d,KAAAw6H,yBAE6Bx6H,KAAAghB,SACOhhB,KAAA0hC,gBACK1hC,KAAAyhC,qBACZzhC,KAAA0c,SAGrC1c,KAAKuc,SAAW/S,oBAChBxJ,KAAKsc,OAAStc,KAAKgO,aAAakS,MAClC,CAEAzR,WACEzO,KAAKif,aAELjf,KAAKg/H,YAAch/H,KAAKw6H,uBAAuB9nH,IAAI1S,KAAKghB,OAAQhhB,KAAKyhC,oBAAoB,GACzFzhC,KAAKwgB,cACP,CAEAvB,aACEjf,KAAKmhI,aAAe,IAAIhuH,KAAY,CAClCgvB,aAAc,IAAIguF,cAAY9lH,OAASmtH,aAAY,GAAO,CACxDnkH,WAAY,CAACC,aAAWC,UACxB+d,gBAAiB,CACfxP,MAAayP,OACXvxB,KAAKw6H,uBAAuBn4F,eAC5BriC,KAAKw6H,uBACL,KACA,KACAx6H,KAAKghB,OACLhhB,KAAK0hC,cACL1hC,KAAKyhC,uBAIX8lF,WAAY,IAAI4I,cAAY,CAAE7vH,MAAON,KAAKghB,OAAQupB,UAAU,IAC5D7I,cAAe,IAAIyuF,cAAYnwH,KAAK0hC,eACpCk5F,mBAAoB,IAAIzK,cAAYnwH,KAAKyhC,qBAE7C,CAEA83C,kBAAkBv4C,GAChBhhC,KAAKyhC,mBAAqBT,EAC1BhhC,KAAKg/H,YAAch/H,KAAKw6H,uBAAuB9nH,IAAI1S,KAAKghB,OAAQhhB,KAAKyhC,oBAAoB,GACzFzhC,KAAKg/H,YAAYrwH,UAAWszH,IAC1BjiI,KAAK0hC,cAAgBugG,EAAW,GAAG7nI,KACnC4F,KAAKmhI,aAAazuH,IAAI,iBAAiBiN,SAAS3f,KAAK0hC,eAErD1hC,KAAKyhI,iBAAe,EAExB,CAEAA,gBAAgB//F,GACd1hC,KAAK0hC,cAAgBA,EACrB1hC,KAAKmhI,aACFzuH,IAAI,gBACJoR,mBACChC,MAAayP,OACXvxB,KAAKw6H,uBAAuBn4F,eAC5BriC,KAAKw6H,uBACL,KACA,KACAx6H,KAAKghB,OACLhhB,KAAK0hC,cACL1hC,KAAKyhC,qBAGXzhC,KAAKmhI,aAAazuH,IAAI,gBAAgBmP,wBACxC,CAEA+O,SACE,MAAMuR,EAAeniC,KAAKmhI,aAAaxwH,SAAS,gBAC1C+wB,EAAgB1hC,KAAKmhI,aAAaxwH,SAAS,iBAC3C8wB,EAAqBzhC,KAAKmhI,aAAaxwH,SAAS,sBAChD42G,EAAavnH,KAAKmhI,aAAaxwH,SAAS,cAE9C3Q,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,6BAA+BsZ,KAASne,OAAQ,CACrEiiB,aAAcA,IAEhBnd,KAAMhlB,KAAKw6H,uBAAuBl4F,eAChCilF,EACAplF,EACAT,EACAD,KAGH9yB,UAAU,CACT4S,MAAOA,IAAMvhB,KAAKmhI,aAAa57G,UAAU,CAAEE,gBAAgB,IAC3DL,SAAUA,IAAMplB,KAAKwwD,cAE3B,iDAzGWwxE,IAAqC/gI,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAe1B,SAAQ,GAAAA,8BACR,gBAAe,GAAAA,8BACf,qBAAoB,GAAAA,8BACpB,SAAQ,+DAlBnB+gI,GAAqC54H,UAAA,yCAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,mBDbrC5C,2EAAA,kCAAyB,qCAgB1BA,0EAAA,+CAwBmBA,uFACnB,iDAZWA,oGAGAA,m+CArCvBvI,2BAAA,iBAEWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,wBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,UAAAA,mBAAA,0EAEFA,6BAEAA,uBAAA,EAAAihI,GAAA,yBAoFFjhI,kCA3FWA,uBAAA,OAAAwC,EAAAktD,MAIE1vD,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAGhDtb,+CAAA,gBAAAwC,EAAA4iB,+YERL87G,KAQAC,GAQAC,GChBAC,GASAC,sCCTZthI,oCAAA,GAEIA,2BADF,qBACEA,CADgB,UAChBA,mBAAA,KACFA,kIAaEA,2BAFF,WAEEA,CAD+B,+BAGPA,uBAAA,0BAAA2J,GAAA3J,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAkBM,EAAAihI,gBAAA53H,GAAuB,GAEnE3J,0EAH0BA,+CAAA,QAAAM,EAAA48H,iFAMxBl9H,2BAFF,WAEEA,CADiC,+CAOvBA,uBADA,uBAAAA,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAAaM,EAAAi5E,YAAW,EACxBv5E,CADyB,2BAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBACNM,EAAAmL,gBAAA9B,GAAuB,GAElD3J,2BAAA,YACEA,sBAAA,yBAQNA,4EAjBYA,wBAIAA,uBAJA,OAAAA,wBAAA,IAAAM,EAAAkhI,YAIAxhI,CAJ2B,UAAAM,EAAAsL,QAI3B5L,CAFmB,iBAOPA,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAA01E,OAIAh0G,CAJiC,YAAAM,EAAA0K,UAIjChL,CAHuB,eAAAM,EAAAwL,+EAxB7C9L,2BAHJ,UAGIA,CAFiD,UAEjDA,CADoB,8BAIIA,uBAAA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAk7H,qBAAA7xH,GAA4B,GACxE3J,6BACAA,uBAAA,EAAAyhI,GAAA,2CAOAzhI,uBAAA,EAAA0hI,GAAA,aAoBF1hI,uEA/B4BA,sBAAA,GAAAA,uBAAA,QAAAM,EAAAm7H,oBAKpBz7H,+CAAA,OAAAA,wBAAA,IAAAM,EAAAy9H,cAOA/9H,sBAAA,GAAAA,uBAAA,OAAAM,EAAAqhI,+CAqBN3hI,2BAAA,uBAAAA,mBAAA,KAE2GA,qDAF3GA,uBAAA,EAAA4hI,GAAA,kEAEiB5hI,uBAAA,QAAAM,EAAA+sH,YCTb,MAAOwU,GA2BXhjI,YACUi+H,EACAgF,EACA/0H,EACA6Z,EACA3Z,EACAquG,EACAx+F,EACAsT,GAPArxB,KAAA+9H,8BACA/9H,KAAA+iI,yBACA/iI,KAAAgO,eACAhO,KAAA6nB,eACA7nB,KAAAkO,qBACAlO,KAAAu8G,aACAv8G,KAAA+d,cACA/d,KAAAqxB,sBA/BVrxB,KAAA6M,QAA2B,GAE3B7M,KAAAiM,UAAY,IAAIqC,IAMhBtO,KAAAgjI,gBAAkB,IAAIx0H,kBAAqC,IAC3DxO,KAAAijI,iBAAmB,IAAIz0H,kBAAmC,IAE1DxO,KAAA08H,mBAA+B,GAG/B18H,KAAAo+H,gBAAkB,GAClBp+H,KAAAkjI,oBAAsB,GAEtBljI,KAAA4iI,uBAAwB,EACxB5iI,KAAAsuH,WAAY,EAEZtuH,KAAA4xB,YAAmB,GACnB5xB,KAAAmjI,UAAiB,GAYfnjI,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,kBACNC,SAAU,EACVJ,KAAMhP,KAAKu8G,YAEb,CACEniH,KAAMoP,0BACN2F,KAAM,0BACNC,SAAU,GACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHkmI,GAAI,CAAEnnE,MAAO,iBACbonE,IAAK,CAAEpnE,MAAO,kBAMtBj8D,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKw+H,aAEpB,CACEpkI,KAAM4F,KAAKgO,aAAailB,MACxBnmB,WAAY,SACZyb,KAAMvW,KAAM2d,MACZ1P,QAASA,KAAOjgB,KAAKiM,UAAU0c,mBAC/BK,MAAOA,IAAMhpB,KAAKsjI,cAEpB,CACElpI,KAAM4F,KAAKgO,aAAaw6D,OACxB17D,WAAY,SACZyb,KAAMvW,KAAM+W,QACZ9I,QAASA,KAAOjgB,KAAKiM,UAAU0c,mBAC/BK,MAAOA,IAAMhpB,KAAKuiC,mBAItBviC,KAAK+9H,4BACFrrH,IAAI1S,KAAKghB,QACThS,QACCC,aAAW6+B,IAGTA,EAAO6wF,QAAQ,CAAEvkI,KAAM,KACvB4F,KAAKmjI,UAAYxjI,MAAMo/C,KAAKjR,GAAQ5wC,IAAKi6B,KAErC72B,MAAO62B,EAAM/8B,KACbw2D,KAAqB,KAAfz5B,EAAM/8B,KAAcikB,IAA0B8Y,EAAM/8B,QAG9D,MAAMw3B,EAAckc,EAAO5wC,IAAKi6B,GAC9Bn3B,KAAK+iI,uBAAuB/gG,WAAWhiC,KAAKghB,OAAQmW,EAAM/8B,MAAM4U,QAC9DC,aAAW0a,IACLA,GACF3pB,KAAK08H,mBAAmBxgI,KAAKi7B,EAAM/8B,OAAI,EAElCgpB,MAAGuG,OAKhB,SAAOvJ,YAASwR,EAAW,IAG9BjjB,UAAU,KACL3O,KAAK08H,mBAAmBthI,SAC1B4E,KAAK4iI,uBAAwB,GAE/B5iI,KAAKsuH,WAAY,GAEvB,CAEA1nH,YAAYC,GACNA,EAAQma,QACVhhB,KAAKijI,iBAAiBxzH,KAAK,GAE/B,CAEAgtH,qBAAqBh7F,GACnBzhC,KAAKo+H,gBAAkB38F,EACvBzhC,KAAK++H,eACP,CAEAyD,gBAAgB9gG,GACd1hC,KAAKkjI,oBAAsBxhG,EAC3B1hC,KAAKujI,uBACP,CAEAxE,gBACE/+H,KAAKg/H,YAAch/H,KAAKijI,iBAAiBj0H,QACvCC,aAAU,IACRjP,KAAK+iI,uBAAuBrwH,IAAI1S,KAAKghB,OAAQhhB,KAAKo+H,iBAAiB,GAAOpvH,QACxEswB,OAAK3V,IACH3pB,KAAKm+H,eAAiBx0G,EAAKzsB,IAAKsmI,GAAcA,EAAUppI,MACxD4F,KAAKkjI,oBAAsBv5G,EAAK,GAAGvvB,KACnC4F,KAAKujI,uBAAqB,KAKpC,CAEAA,wBACEvjI,KAAKyiI,WAAaziI,KAAKgjI,gBAAgBh0H,QACrCC,aAAU,IACRjP,KAAK+iI,uBACF9gG,aAAajiC,KAAKghB,OAAQhhB,KAAKkjI,oBAAqBljI,KAAKo+H,iBACzDpvH,QACCwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,WAEb,EAELkwF,eAAY,GAEhB,CAEA94B,YACEx6E,KAAKgjI,gBAAgBvzH,KAAK,GAC5B,CAEA+uH,UAAU31G,GAAO,GACf7oB,KAAK6nB,aAAagD,KAAKm3G,GAAuC,CAC5DhhH,OAAQhhB,KAAKghB,OACb0gB,cAAe1hC,KAAKkjI,oBACpBzhG,mBAAoBzhC,KAAKo+H,gBACzBmD,gBAAiBvhI,KAAK08H,mBACtBhgH,OAAQmM,GAEZ,CAEAnc,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAs2B,iBACE,MAAMJ,EAAeniC,KAAKiM,UAAUmc,QAAQhuB,KACtCsnC,EAAgB1hC,KAAKkjI,oBACrBzhG,EAAqBzhC,KAAKo+H,gBAC1Bp9G,EAAShhB,KAAKghB,OACpBhhB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEC,OAAQC,KAAeC,KACvBkoC,kBAAmB,SACnBhoC,UAAW,CAACgX,GACZjX,gBAAiB,WACjB7O,aAAcA,IACZrc,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,mCAAoC,CACzD/D,OAAQA,EACR0gB,cAAeA,EACfD,mBAAoBA,EACpBU,aAAcA,IAEhBnd,KAAMhlB,KAAK+iI,uBAAuBxgG,eAChCvhB,EACA0gB,EACAS,EACAV,KAGH9yB,UAAU,CACTyW,SAAUA,IAAMplB,KAAK6nB,aAAa2L,aAClCjS,MAAOA,IAAMvhB,KAAK4qB,SAAS6I,kBAAkBC,wBAGvD,CAEA4vG,aACE,MAAM7gG,EAAY,SAASp4B,OAASmtH,aAAY,KAChDx3H,KAAK6nB,aAAagD,KAAK8I,KAAoB,CACzCE,UAAWrqB,wBACXoqB,OAAQ,CACN,CACEztB,KAAM,OACN/L,KAAM,YACNkG,MAAOmiC,EACP9gC,MAAO6H,gBACP6J,WAAY,CAACC,aAAWC,SAAUD,aAAWE,QAAQ,wBACrD8d,gBAAiB,CACfxP,MAAayP,OACXvxB,KAAK+iI,uBAAuBhzG,OAC5B/vB,KAAK+iI,uBACL,KACA,KACA/iI,KAAKghB,OACLhhB,KAAKo+H,kBAGT7qH,UAAU,EACV6zB,OAAQ,CACN5zB,QAAShK,8EACTm5F,UAAWn5F,iEAGf,CACErD,KAAM,SACN/L,KAAM,YACNkG,MAAON,KAAKo+H,gBACZz8H,MAAO6H,sBACPkvD,qBAAqB,EACrBI,UAAW,YACXpB,WAAY,CACVx0D,QAASlD,KAAKmjI,aAIpBrvG,iBAAkBtqB,wBAClB6uD,sBAAwB/3D,GACtBwhB,MAAayP,OACXvxB,KAAK+iI,uBAAuBhzG,OAC5B/vB,KAAK+iI,uBACL,KACA,KACA/iI,KAAKghB,OACL1gB,GAEJyzB,SAAWzzB,IACTN,KAAK+iI,uBACFvgG,oBACCxiC,KAAKghB,OACLhhB,KAAKkjI,oBACLljI,KAAKiM,UAAUmc,QAAQhuB,KACvBkG,EAAMmiC,UACNziC,KAAKo+H,gBACL99H,EAAM0gC,WAEPryB,UAAU,IACT3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,2BAA2BlJ,EAAMmiC,4BAClC,GAIX,iDAjSWqgG,IAAqC7hI,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,KAAA,4DAArC88G,GAAqC15H,UAAA,yCAAA+C,OAAA,CAAA6U,OAAA,UAAA6F,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDlCnC5C,iGA2CsBA,00BAHrCvI,uBA1CA,EAAAwiI,GAAA,qBA0CAxiI,CA1CgC,EAAAyiI,GAAA,YA0ChCziI,CAnCqD,EAAA0iI,GAAA,yBAAA1iI,4EAPtCA,uBAAA,OAAAwC,EAAA6qH,WAOTrtH,wBAA6BA,uBAA7B,OAAAwC,EAAAm/H,sBAA6B3hI,CAAA,WAAA2iI,kEFPvBzB,UAAe,KACzB0B,OAAA,IACA1B,EAAA2B,MAAA,IACA3B,EAAA4B,OAAA,IACA5B,EAAA6B,QAAA,IACA7B,EAAA8B,OAAA,IAGF,SAAY7B,GACVA,EAAAhwB,EAAA,OACAgwB,EAAAjoI,EAAA,MACAioI,EAAA7vB,EAAA,OACA6vB,EAAA3vB,EAAA,QACA2vB,EAAA8B,EAAA,MACF,CANA,CAAY9B,QAAsB,KAQlC,SAAYC,GACVA,EAAAjwB,EAAA,QACAiwB,EAAAloI,EAAA,OACAkoI,EAAA9vB,EAAA,QACA8vB,EAAA5vB,EAAA,SACA4vB,EAAA6B,EAAA,OACF,CANA,CAAY7B,QAAoB,KChBhC,SAAYC,GACVA,EAAAuB,OAAA,IACAvB,EAAAwB,MAAA,IACAxB,EAAAyB,OAAA,IACAzB,EAAA0B,QAAA,IACA1B,EAAA2B,OAAA,IACA3B,EAAA,wBACF,CAPA,CAAYA,QAAkB,KAS9B,SAAYC,GACVA,EAAAnwB,EAAA,SACAmwB,EAAApoI,EAAA,QACAooI,EAAAhwB,EAAA,SACAgwB,EAAA9vB,EAAA,UACA8vB,EAAAhnI,EAAA,WACAgnI,EAAAnkI,EAAA,SACAmkI,EAAA7jI,EAAA,mBACF,CARA,CAAY6jI,QAAsB,KGQ5B,MAAO4B,GAGXrkI,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAA8gC,QAAU,YAE6B,CAEvC7b,OAAO1iB,GACL,OAAOvC,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,4BAA6Bv+B,EAAM,CAAEo+B,QAAS,YAC9E,CAEA54B,QAASwnG,KAAIh3F,UAAS6rH,IACpB,OAAOpkI,KAAK8rB,KAAKgE,IACf,GAAG9vB,KAAK8gC,6BAA6ByuE,KAAMzjE,mBAAmBvzB,KAC9D6rH,EACA,CAAEzjG,QAAS,YAEf,CAEAwjF,UAAW5U,KAAIh3F,UAAS6rH,IACtB,OAAOpkI,KAAK8rB,KAAKzwB,KACf,GAAG2E,KAAK8gC,6BAA6ByuE,KAAMzjE,mBAAmBvzB,cAC9D6rH,EACA,CAAEzjG,QAAS,YAEf,CAEAyjF,YAAa7U,KAAIh3F,UAAS6rH,IACxB,OAAOpkI,KAAK8rB,KAAKzwB,KACf,GAAG2E,KAAK8gC,6BAA6ByuE,KAAMzjE,mBAAmBvzB,gBAC9D6rH,EACA,CAAEzjG,QAAS,YAEf,CAEAtV,QACEkkF,KACAh3F,OACAiwG,WACAztH,QACAspI,kBACA7iH,SACA2V,UAEA,IAAImtG,EAAY,GAAGtkI,KAAK8gC,6BAA6ByuE,KAAMzjE,mBACzDvzB,+BAC4BiwG,WAAkB18E,mBAAmB/wC,KACnE,OAAIspI,IACFC,GAAa,qBAAqBD,KAEhC7iH,GAAU2V,IACZmtG,GAAa,WAAWx4F,mBAAmBtqB,YAAiBsqB,mBAAmB3U,MAE1En3B,KAAK8rB,KAAKT,OAAOi5G,EAC1B,CAEAC,oBACEhsH,EACAg3F,EACA4R,EACAqjB,EACAvU,GAAc,GAEd,OAAOjwH,KAAKykI,wBAAwBlsH,EAAMg3F,GAAI,GAAOvgG,QACnD9R,OAAKm7B,GACWA,EACXhU,OAAQrlB,GAAOixH,EAAcjxH,EAAEuZ,KAAK8G,WAAW9G,GAAQvZ,EAAEuZ,OAASA,GAClEu1E,UAAW9uF,GAAMA,EAAEwpH,WAAa,GAAGrH,IAAWqjB,MAClC,IAChB,EACDhgH,cAAW,OACFpB,OAAG,IAGhB,CAEAshH,2BACEnsH,EACAg3F,EACAo1B,EACAC,EAAwC,GACxC3U,GAAc,GAEd,OAAOjwH,KAAK6kI,oBAAoBtsH,EAAMg3F,GAAI,GAAOvgG,QAC/C9R,OAAKm7B,IACH,IAAIysG,GAAa,EACb/0G,GAAS,EACb,MAAM7oB,EAAQmxB,EAASy1D,UAAW9uF,GAChCixH,EAAcjxH,EAAEuZ,KAAK8G,WAAW9G,GAAQvZ,EAAEuZ,OAASA,GAE/C1c,EAAS8oI,GAAsBvpI,UACjC2pI,gBACE9yH,OAAOC,KAAKmmB,IAAWnxB,IAAQ89H,WAAW3gH,OACvC4e,IAAO2hG,EAA4B1iI,SAAS+gC,IAE/C0hG,GAEF,GACJ50G,WAAWl0B,GAAQT,OACnBS,GAAQmL,QAASnM,GAAOiqI,EAAaH,EAAqB5oI,QAAQlB,IAE3D,CAAEk1B,SAAQ+0G,aAAU,IAC5B,EACDtgH,cAAW,OACFpB,MAAG,CAAE2M,QAAQ,EAAO+0G,YAAY,KAG7C,CAEAD,oBAAoBtsH,EAAcg3F,EAAY01B,GAAY,GACxD,OAAOjlI,KAAK8rB,KACTpZ,IACC,GAAG1S,KAAK8gC,6BAA6ByuE,UAAWh3F,eAAkB0sH,KAEnEj2H,QACCwV,cAAW,OACFpB,MAAG,KAGlB,CAEAqhH,wBACElsH,EACAg3F,EACA01B,GAAY,GAEZ,OAAOjlI,KAAK6kI,oBAAoBtsH,EAAMg3F,EAAI01B,GAAWj2H,QACnD9R,OAAKgoI,MACHC,YACED,EAAShoI,IAAKkoI,QACTA,EACHC,aAAcrlI,KAAKslI,kBAAkBF,EAAS5c,UAC9C95G,OAAQ02H,EAAS/1B,OAAS,SAAW,WACrC7tF,OAAQ4jH,GAAU5jH,OAClB+jH,cAAevlI,KAAKwlI,mBAAmBJ,GAAUJ,WACjDA,UAAW/yH,OAAOpJ,OAAOu8H,GAAUJ,WAAa,KAAK5pI,OACjD6W,OAAOqQ,QAAQ8iH,EAASJ,YACpB9nI,MAAM,EAAEsnI,EAAWrjB,KAAc,GAAGA,IAAWqjB,KAChD5nI,KAAK,KACR,OAEN6oI,YAIR,CAEAH,kBAAkB9c,GAChB,MAAMkd,EAAcld,EAAS7rH,MAAM,IAC7BwkH,EAAWj5G,OAAOw9H,EAAYrhH,OAAQrlB,IAAOowC,MAAMlnC,OAAOlJ,KAAKpC,KAAK,KACpE+oI,EAAgBD,EAAYA,EAAYtqI,OAAS,GACjDopI,EACJrjB,EAAW,EAAIkhB,GAAqBsD,GAAiBvD,GAAuBuD,GAC9E,OAAOn8H,kBAAkB23G,EAAW,EAAIA,EAAW,IAAM,KAAKqjB,GAChE,CAEAgB,mBAAmBR,GACjB,OAAKA,EACE/yH,OAAOqQ,QAAQ0iH,GAAW9nI,IAAI,EAAEsnI,EAAWrjB,KAChD33G,YAAY23G,KAAYohB,GAAuBiC,KAAa3qB,qBAFvC,CAAC,IAI1B,iDA/JWsqB,IAA6BljI,qBAAAC,cAAA,+DAA7BijI,GAA6BhjI,QAA7BgjI,GAA6B/iI,UAAAC,WAF5B,QAAM,0ICWRJ,+BAAA,mDAWAA,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAE4DA,qDAF5DA,uBAHA,EAAA2kI,GAAA,cAGA3kI,CADW,EAAA4kI,GAAA,iHADJ5kI,uBAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,YAAAqgB,EAAA,aAGAzvB,+CAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,YAAAqgB,EAAA,sCAWTzvB,2BAAA,aAAAA,mBAAA,MAEkCA,sDAuB9BA,2BAAA,eAC0BA,mBAAA,GAC1BA,qDADQA,uBAAA,QAAA8kI,EAAA,IAAkB9kI,uDAAA,GAAA8kI,EAAA,mCAR5B9kI,2BAAA,mBAOEA,uBAAA,EAAA+kI,GAAA,iBAGF/kI,+HALYA,uBADA,WAAAuvB,EAAAs1G,iBAAA10H,SAAA60H,gBAAA30H,OAAAkf,EAAAs1G,iBAAA10H,SAAA60H,gBAAA10H,MACAtQ,CADiH,cAAAilI,GAGlGjlI,+CAAA,UAAAuvB,EAAA21G,2CAKzBllI,2BAAA,aAAAA,mBAAA,MAEmEA,qDAFnEA,uBAAA,EAAAmlI,GAAA,iHACOnlI,uBAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,kBAAAqgB,EAAA,sCAIPzvB,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAEyCA,qDAFzCA,uBAHA,EAAAolI,GAAA,cAGAplI,CADW,EAAAqlI,GAAA,iHADJrlI,uBAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,iBAAAqgB,EAAA,aAGAzvB,+CAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,iBAAAqgB,EAAA,mCA6BHzvB,2BAAA,eAC0BA,mBAAA,GAAaA,qDAA/BA,uBAAA,QAAAslI,EAAA,IAAkBtlI,sDAAAslI,EAAA,+BAN5BtlI,2BAAA,mBAKEA,uBAAA,EAAAulI,GAAA,iBAGFvlI,sEAH2BA,+CAAA,UAAAuvB,EAAAm0G,8CAkB7B1jI,2BAAA,aAAAA,mBAAA,MAE2EA,qDAF3EA,uBAAA,EAAAwlI,GAAA,6FACOxlI,uBAAA,OAAAuvB,EAAAs1G,iBAAA10H,SAAAs1H,kBAAAt1H,SAAAu1H,GAAAhxH,0EAvCX1U,oCAFF,KAEEA,CADmF,MAI/EA,2BAFF,WAEEA,CADsC,YAGpCA,sBAAA,mBAOFA,2BACAA,2BAAA,YAEEA,uBAAA,EAAA2lI,GAAA,qBASF3lI,2BAIEA,2BAHF,WAGEA,CAD2B,wBAGVA,uBAAA,yBAAA0lI,EAAA1lI,0BAAA6T,GAAA5N,MAAAspB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAq2G,sBAAAF,GAAwB,gCAChD1lI,sBAAA,YAKNA,+BACAA,uBAAA,GAAA6lI,GAAA,yBAAA7lI,+JArCYA,+CAAA,gBAAA0lI,GAIL1lI,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,GAAAyI,KACSzI,wBAMAA,uBANA,yBAAA0lI,EAMA1lI,CAN8B,2BAAA0lI,EAM9B1lI,CALgC,sCAKhCA,CAJuC,2BAIvCA,CAH4B,QAG5BA,CAFS,UAAAuvB,EAAAs1G,iBAAA10H,SAAAs1H,kBAAAt1H,SAAAu1H,GAAAhxH,SAAA6a,EAAAs1G,iBAAA10H,SAAAs1H,kBAAAn1H,MAETtQ,CADsI,cAAA8lI,GAI/I9lI,+CAAA,gBAAAA,4BAAA,GAAAK,KAKUL,+CAAA,OAAAuvB,EAAAm0G,sBAOV1jI,+CAAA,gBAAAA,4BAAA,GAAAQ,sEAnHjBR,oCAAA,GAQQA,2BAPN,WAOMA,CAPe,cAOfA,CAHa,WAGbA,CADqB,uBACrBA,wBAAA,KAOEA,uBAAA,EAAA+lI,GAAA,uBACA/lI,sBAAA,cAQFA,mDACAA,uBAAA,EAAAgmI,GAAA,yBAAAhmI,oCAQFA,2BAGAA,sBAAA,6BAKEA,uBAAA,GAAAimI,GAAA,eAOAjmI,2BAFF,YAEEA,CADU,aAERA,sBAAA,oBAQFA,2BACAA,2BAAA,aAiBEA,uBAhBA,GAAAkmI,GAAA,oBAgBAlmI,CAVsC,GAAAmmI,GAAA,yBAAAnmI,mCAUtCA,CALmC,GAAAomI,GAAA,yBAAApmI,oCAcvCA,6BAGAA,uBAAA,GAAAqmI,GAAA,yBAgDErmI,2BADF,YACEA,CADqB,gBAGbA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAA+2G,qBAAoB,GAFrCtmI,wBAAA,mCAKEA,sBAAA,aAIFA,wBAGNA,+DACAA,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAGV3vB,oMAnJjCA,sBAAA,GAAAA,uBAAA,YAAAuvB,EAAAs1G,kBAOc7kI,sBAAA,GAEAA,uBAFA,UAAAuvB,EAAAs1G,iBAAA10H,SAAAyU,UAAAlQ,SAAA6a,EAAAs1G,iBAAA10H,SAAAyU,UAAAtU,MAEAtQ,CAFsG,cAAAumI,EAEtGvmI,CAD8B,WAAAuvB,EAAAo/F,eAAAtB,WAG7BrtH,sBAAA,GAAAA,uBAAA,QAAAuvB,EAAAo/F,eAAAtB,WAKRrtH,wBAGAA,uBAHA,eAAAuvB,EAAA4rD,OAGAn7E,CAHuB,UAAAuvB,EAAAs1G,iBAAA10H,SAAAyU,UAAAlQ,SAAA6a,EAAAs1G,iBAAA10H,SAAAyU,UAAAtU,MAGvBtQ,CAFsG,cAAAuvB,EAAAo/F,eAAAtB,UAAA,oBAEtGrtH,CADgE,WAAAuvB,EAAAo/F,eAAAtB,WAiBzErtH,sBAAA,GACAA,uBADA,UAAAuvB,EAAAs1G,iBAAApzH,IAAA,aACAzR,CAD6C,WAAAuvB,EAAA9T,QAGtCzb,+CAAA,OAAAuvB,EAAAs1G,iBAAAz1H,UAAA,YAAAqgB,EAAA,aAOOzvB,sBAAA,GAMAA,uBANA,sBAMAA,CANuB,wBAMvBA,CALyB,mCAKzBA,CAJoC,mBAIpCA,CAHoB,QAGpBA,CAFS,WAAAuvB,EAAAs1G,iBAAA10H,SAAAq2H,eAAAn2H,OAAAkf,EAAAs1G,iBAAA10H,SAAAq2H,eAAAl2H,MAETtQ,CAD+G,cAAAymI,GAW9GzmI,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA21G,mBAuByBllI,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAk2G,kBAAAt1H,UA6DxBnQ,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAAs1G,iBAEA7kI,CAFyB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,UAEzBtb,CADmE,iBCrHvF,MAAO0mI,WAA4CpqH,KAqBvDzd,YACUkO,EACA45H,EACA7pH,EACA8pH,EACDjY,EACCkY,EAE6B9mH,EACJoJ,EACE7R,EACIiwG,EACCwc,EACJjqI,GACC2T,GACAgO,IAAS,GAE9CrO,QAhBQrO,KAAAgO,eACAhO,KAAA4nI,sBACA5nI,KAAA+d,cACA/d,KAAA6nI,KACD7nI,KAAA4vH,iBACC5vH,KAAA8nI,mBAE6B9nI,KAAAghB,SACJhhB,KAAAoqB,KACEpqB,KAAAuY,OACIvY,KAAAwoH,WACCxoH,KAAAglI,YACJhlI,KAAAjF,SACCiF,KAAA0O,UACA1O,KAAA0c,UAjCvC1c,KAAA+R,MAAQC,KACRhS,KAAAmmI,kBAAoBl0H,OAAOqQ,QAAQ6/G,IACnCniI,KAAA2kI,qBAAuB1yH,OAAOqQ,QAAQggH,IACtCtiI,KAAA+nI,0BAA+C,GAC/C/nI,KAAAygB,yBAA0B,EAG1BzgB,KAAAiwH,aAAc,EAiGdjwH,KAAAo8E,OAAuD8zC,IACrDA,GAAMlhH,QACJuP,gBApHiB,MAoHU,EAC3BC,2BAAoB,EACpBvP,aAAWy/G,IACT1uH,KAAK4vH,eAAexzC,OAAOsyC,GAAM1uH,KAAKoqB,IAAIpb,QACxCwV,cAAW,OACFpB,MAAG,QA3ElBpjB,KAAKuc,SAAW/S,6BAEhB,MAAMw+H,GAAkB,IAAI9rG,KAC5Bl8B,KAAKwyD,QAAU,GAAGw1E,GAAgBC,oBAChCD,GAAgBE,cAAgB,KAC9BF,GAAgBG,cACtB,CAEA15H,WACEzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK4vH,eAAerB,gBAAgBvuH,KAAKoqB,GAAI,IAAK,GAClDpqB,KAAKif,aACLjf,KAAK0c,OAAS1c,KAAK26H,eAAiB36H,KAAKwgB,eAEzCxgB,KAAK8lI,iBACFpzH,IAAI,aACJimD,aAAa3pD,QACZqV,UAAO,KAAOrkB,KAAK0c,SAAM,EACzB6B,gBAhEe,MAgEY,EAC3B+gB,OAAI,KACFt/B,KAAKiwH,aAAc,KACpB,EACD3wF,OAAKh/B,IACHN,KAAKyhB,eAAiBnhB,GAAO3D,QAAQ,OAAO,GAC5CqD,KAAK8X,UAAYxX,GAAO3D,QAAQ,OAAO,EAAC,IACzC,EACD0nB,UAAO,MAAQrkB,KAAK8X,aAAe9X,KAAKyhB,iBAAc,EACtD6d,OAAI,KACFt/B,KAAKiwH,cAAgBjwH,KAAK8X,aAAe9X,KAAKyhB,eAC9CzhB,KAAK8lI,iBAAiBpzH,IAAI,mBAAmB6S,UAAU,KAAI,IAC5D,EACD9G,YAAS,IACPze,KAAK8nI,iBACF/3G,OACC/vB,KAAK8X,UACL9X,KAAKghB,OACLhhB,KAAKyhB,iBAAmBpD,IAA0B,GAAKre,KAAKyhB,gBAE7DzS,QACCswB,OAAKvP,GAAqB/vB,KAAKiwH,YAAclgG,IAAO,EACpDuP,OACGvP,GACE/vB,KAAKygB,wBACJsP,GAAU/vB,KAAKyhB,iBAAmBpD,QAEzC,EAELgG,UAAQ0L,GAAoBA,IAAM,EAClCtR,YAAS,IACPze,KAAK8nI,iBACFxmH,KACCthB,KAAKghB,OACLhhB,KAAK8X,UACL9X,KAAKyhB,iBAAmBpD,IAA0B,GAAKre,KAAKyhB,gBAE7DzS,QAAKo5H,SAAM,WAAQ,EAExB/jH,UAAQ9L,GAAiBA,IAASvY,KAAK8lI,iBAAiBpzH,IAAI,aAAapS,QAE1EqO,UAAU,CACTc,KAAO8I,GAAiBvY,KAAK8lI,iBAAiBpzH,IAAI,aAAaiN,SAASpH,IAE9E,CAEA,qBAAImuH,GACF,OAAO1mI,KAAK8lI,iBAAiBpzH,IAAI,oBACnC,CAeAioH,eACE36H,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAK4nI,oBAAoB/C,oBAAoB7kI,KAAKuY,KAAMvY,KAAKghB,QAAQ,GAAOrS,UAAU,CACpFc,KAAO4oB,IACL,MAAMmwF,EAAWnwF,EAASxlB,KAAM7T,GAAMA,EAAEuZ,OAASvY,KAAKuY,MAChD4xE,EAAS9/E,OAASujG,YAClBy6B,EAAYh+H,eACLm+G,EAASztH,OACnB8yG,MACAD,UAAUzjB,GACV2jB,QACA51E,OAAO,uBACVl4B,KAAK8lI,iBAAiBpzH,IAAI,aAAauN,UACvCjgB,KAAK8lI,iBAAiBpzH,IAAI,aAAaiN,SAAS6oG,EAASjwG,MACzDvY,KAAK8lI,iBAAiBpzH,IAAI,aAAauN,UACvCjgB,KAAK8lI,iBAAiBpzH,IAAI,aAAaiN,SAAS0oH,GAChDroI,KAAK8lI,iBAAiBpzH,IAAI,kBAAkBuN,UAC5CjgB,KAAK8lI,iBAAiBpzH,IAAI,kBAAkBiN,SAAS6oG,EAASA,SAAS7rH,MAAM,MAAM,IACnFqD,KAAK8lI,iBAAiBpzH,IAAI,mBAAmBuN,UAC7CjgB,KAAK8lI,iBAAiBpzH,IAAI,mBAAmBiN,SAAS6oG,EAASA,SAAS7rH,MAAM,MAAM,IAGpF6rH,EAASwc,WACP/yH,OAAOqQ,QAAQkmG,EAASwc,WAAWh+H,QAAQ,EAAEw9H,EAAWrjB,GAAWmnB,KACjE,MAAMC,EAAUt2H,OAAOC,KAAKowH,IAC1BrwH,OAAOpJ,OAAOy5H,IAAoBvmI,QAAQyoI,IAE5CxkI,KAAK0mI,kBAAkBxqI,KACrB,IAAIssI,YAAU,CACZC,kBAAmB,IAAItY,cAAYhP,GACnCunB,mBAAoB,IAAIvY,cAAYmS,GAAmBiG,OAG3DvoI,KAAK0mI,kBAAkBt1H,SAASk3H,GAAK51H,IAAI,qBAAqBuN,UAC9DjgB,KAAK0mI,kBAAkBt1H,SAASk3H,GAAK51H,IAAI,sBAAsBuN,SAAO,GAE1EjgB,KAAKwgB,cAAY,GAGvB,CAEAvB,aACEjf,KAAK8lI,iBAAmB,IAAI3yH,KAC1B,CACE0S,UAAW,IAAIsqG,mBAAYv2F,EAAW,CACpCw2F,SAAU,OACV/8G,WAAY,CAACC,aAAWC,YAE1B80H,UAAW,IAAIlY,cAAYnwH,KAAKwyD,QAAS,CACvCn/C,WAAY,CAACC,aAAWC,YAE1Bk0H,eAAgB,IAAItX,cAAY,EAAG,CACjC98G,WAAY,CAACC,aAAWC,SAAUD,aAAW8yD,IAAI,MAEnD6/D,gBAAiB,IAAI9V,cAAYgS,GAAgB2B,MAAO,CACtDzwH,WAAY,CAACC,aAAWC,YAE1BmzH,kBAAmB,IAAIiC,YAAU,KAEnC,CACEr3G,gBAAiB,CAACtxB,KAAK4oI,mBAAoB5oI,KAAK6oI,sBAGtD,CAEAtB,qBACEvnI,KAAK0mI,kBAAkBxqI,KACrB,IAAIssI,YAAU,CACZC,kBAAmB,IAAItY,cAAY,GACnCuY,mBAAoB,IAAIvY,cAAYmS,GAAmBwB,UAG3D9jI,KAAK6nI,GAAGl+C,eACV,CAEAk9C,sBAAsByB,GACpB,GAAItoI,KAAK0c,QAAU1c,KAAK0mI,kBAAkB5yH,GAAGw0H,GAAK/9F,SAAU,CAC1D,MAAM1hC,EAAS7I,KAAK0mI,kBAAkB5yH,GAAGw0H,GAAKhoI,MAC9CN,KAAK+nI,0BAA0B7rI,KAAK2M,EACtC,CACA7I,KAAK0mI,kBAAkB/yH,SAAS20H,GAChCtoI,KAAK0mI,kBAAkBt1H,SAASpK,QAAShI,GACvCA,EAAE0T,IAAI,sBAAsBmP,0BAE9B7hB,KAAK6nI,GAAGl+C,eACV,CAEAm/C,sBAAsB5Y,EAAe90H,EAAS,EAAG88B,EAAS,KACxD,SAAOg4E,YAASggB,EAAM5qG,WAAYlqB,EAAQ88B,EAC5C,CAEA6wG,cAAcz2E,EAAqBjsD,GACjC,OAAKisD,GAASjsD,EACP,GAAGisD,EAAK+V,QAAQroE,KAAK8oI,sBAAsBx2E,EAAK02E,UAAUhpI,KAAK8oI,sBACpEx2E,EAAK22E,QACFjpI,KAAK8oI,sBAAsBziI,EAAKoyB,SAASz4B,KAAK8oI,sBACjDziI,EAAKqyB,WACF14B,KAAK8oI,sBAAsBziI,EAAKsyB,UALV,IAM7B,CACAuwG,cAAc/nB,EAAkBqjB,GAC9B,MAAO,GAAGrjB,IAAWqjB,GACvB,CAEA2E,uBAAuBzC,GACrB,OAAOA,GACHriH,OAAQxpB,GAA+B,OAAzBA,GAAG4tI,mBAAwD,OAA1B5tI,GAAG6tI,qBAClDxrI,MAAOrC,GAAM,GAAGA,EAAE4tI,qBAAqB5tI,EAAE6tI,sBAC1C9rI,KAAK,IACV,CAEAg0B,SACE5wB,KAAK4oI,kBAAL5oI,CAAwBA,KAAK8lI,kBAAkBn3H,UAAU,CACvDc,KAAMA,KACJ,GAAIzP,KAAK8lI,iBAAiBnwH,QAExB,YADA3V,KAAK8lI,iBAAiBvgH,UAAU,CAAEE,gBAAgB,IAIpD,MAAM5c,EAAS7I,KAAK8lI,iBAAiBxlI,MAErC,GAAIN,KAAK0c,OAAQ,CACf,MAAM0sH,EAA0BppI,KAAK8lI,iBAAiBpzH,IACpD,qBACctB,UACZiT,OACCglH,IACEA,EAAK32H,IAAI,qBAAqB63B,WAAa8+F,EAAK32H,IAAI,sBAAsB63B,UAE9ErtC,IAAKmsI,KACJZ,kBAAmBY,EAAK32H,IAAI,qBAAqBpS,MACjDooI,mBAAoBW,EAAK32H,IAAI,sBAAsBpS,SAGjDgpI,EAAY,CAChB/5B,GAAIvvG,KAAKghB,OACTzI,KAAMvY,KAAKuY,KACXiJ,OAAQxhB,KAAKwhB,OACb2V,MAAOn3B,KAAKm3B,MACZoyG,iBAAkBvpI,KAAKmpI,uBAAuBC,IAA2B,KACzEI,oBAAqBxpI,KAAKmpI,uBAAuBnpI,KAAK+nI,4BAA8B,MAGtF/nI,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,4BAA8BsZ,KAAS9e,KAAM,CAClEhH,KAAMvY,KAAKuY,OAEbyM,KAAMhlB,KAAK4nI,oBAAoB7/H,OAAOuhI,KAEvC36H,UAAU,CACT4S,MAAOA,KACLvhB,KAAK8lI,iBAAiBvgH,UAAU,CAAEE,gBAAgB,GAAM,EAE1DL,SAAUA,KACRplB,KAAKwwD,YAAU,GAGvB,KAAO,CACL,MAAMi5E,EAAkB,CACtBl6B,GAAIvvG,KAAKghB,OACTzI,KAAM1P,EAAOgd,UACb6jH,cAAe1pI,KAAKkpI,cAAcrgI,GAAQ4+H,eAAgB5+H,GAAQo9H,iBAClElrI,MAAO,IAAImhC,KAAKrzB,GAAQw/H,UAAUjgI,QAAQ,MAAO,KAAKA,QAAQ,IAAK,MAChEovH,cACAt8H,MAAM,EAAG,KAGRyuI,EAA0B3pI,KAAKmpI,uBAAuBtgI,GAAQ69H,mBAEhEiD,IACFF,EAAgBG,iBAAsBD,GAGpC3pI,KAAKiwH,cACPwZ,EAAgBjoH,OAAYxhB,KAAK8X,WAG/B9X,KAAKiwH,cAAgBjwH,KAAKygB,0BAC5BgpH,EAAgBtyG,MAAWn3B,KAAKyhB,gBAElCzhB,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,4BAA8BsZ,KAASne,OAAQ,CACpE3H,KAAMkxH,EAAgBlxH,OAExByM,KAAMhlB,KAAK4nI,oBAAoB3iH,OAAOwkH,KAEvC96H,UAAU,CACT4S,MAAOA,KACLvhB,KAAK8lI,iBAAiBvgH,UAAU,CAAEE,gBAAgB,GAAM,EAE1DL,SAAUA,KACRplB,KAAKwwD,YAAU,GAGvB,IAGN,CAEAo4E,mBACE,OAAQiB,IACN,MAAMhkH,EAAYgkH,EAAIn3H,IAAI,aACpBuzH,EAAkB4D,EAAIn3H,IAAI,mBAC1B+0H,EAAiBoC,EAAIn3H,IAAI,kBAE/B,OAAI1S,KAAK0c,UACA0G,MAAG,OAAI,EAGT8jB,SAlVW,KAkVYl4B,QAC5BC,aAAU,IACRjP,KAAK4nI,oBACFrD,oBACC1+G,GAAWvlB,MACXN,KAAKghB,OACLymH,GAAgBnnI,MAChB2lI,GAAiB3lI,MACjBN,KAAKiwH,aAENjhH,QACC9R,OAAK6yB,IACCA,GACFk2G,GAAiBhiH,cACjBgiH,GAAiB1gH,UAAU,CAAEo9E,WAAW,GAAQ,CAAEvC,WAAW,KAE7D6lC,GAAiB1gH,UAAU,MAEtB,SAGd,CAGP,CAEAukH,iBAAiBD,EAAgBE,EAAsBV,EAAcf,GACnE,OAAQuB,EAAIn3H,IAAIq3H,IAA6B34H,WAAWk3H,IAAM51H,MAAM22H,EACtE,CAEAR,oBACE,OAAQgB,MACC3iG,SAlXW,KAkXYl4B,QAC5BC,aAAU,KACR,MAAM+6H,EAAiBH,EAAIn3H,IAAI,qBAAmCtB,UAAUlU,IACzEmsI,GACQA,EAAK32H,IAAI,sBAAsBpS,OAG1C,SAAIolB,QAAKskH,IAAgB5uI,SAAW4uI,GAAe5uI,QACjD4E,KAAK8pI,iBACHD,EACA,oBACA,qBACAG,EAAc5uI,OAAS,IACtBmqB,YAAY,CACbo9E,WAAW,IAEN,MAEF3iG,KAAK4nI,oBACTlD,2BACCmF,EAAIn3H,IAAI,aAAapS,MACrBN,KAAKghB,OACLgpH,EACAhqI,KAAK+nI,2BAA2B7qI,MAAO+sI,GAAOA,EAAGvB,qBAAuB,KACtE1oI,KAAK8X,WAER9I,QACC9R,OAAI,EAAG6yB,SAAQ+0G,iBACT/0G,EACF/vB,KAAK8pI,iBACHD,EACA,oBACA,qBACA/E,IACCv/G,YAAY,CAAEo9E,WAAW,IAE3BknC,EAAIn3H,IAAI,qBAAmCtB,UAAUpK,UAAU,CAACmL,EAAGlW,KAClE+D,KAAK8pI,iBACHD,EACA,oBACA,qBACA5tI,IACCspB,YAAY,KAAI,GAGhB,OACP,GAKd,iDA7ZWoiH,IAAmC1mI,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,KAAA/H,iFAAAgI,IAAAhI,8BAAAiI,MAAAjI,8BA6BxB,SAAQ,GAAAA,8BACR,KAAI,GAAAA,8BACJ,OAAM,GAAAA,8BACN,WAAU,GAAAA,8BACV,YAAW,GAAAA,8BACX,QAAO,GAAAA,8BACP,SAAQ,GAAAA,8BACR,SAAQ,+DApCnB0mI,GAAmCv+H,UAAA,sCAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,6BDtCnC5C,4EACT,kCAAyB,sCAmBjBA,2EAAA,iFAAoE,+DACpE,+CA0HWA,gGAEX,wCAGU,2CAnHCA,oGAGAA,8HAYFA,oGA8BIA,qIAKAA,oGAGAA,2GAgDAA,4pEA5IzBvI,2BAAA,kBAGWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAIFA,6BAEAA,uBAAA,EAAAipI,GAAA,yBAyJFjpI,kCAlKWA,uBADA,OAAAwC,EAAAktD,KACA1vD,CADa,0BAMpBA,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CACAA,wBAAA,IAAAwC,EAAA8Y,sCAGatb,+CAAA,gBAAAwC,EAAA4iB,iqBEXjBplB,2BAAA,sBAOEA,uBAAA,oBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAUM,EAAA4oI,yBAAwB,GAPpClpI,mBAAA,KAUAA,sDAYEA,2BAAA,UAEEA,sBAAA,UAKFA,kHAHIA,2DAAA,sBAAAqrB,EAAA89G,kBAAA,MAAA99G,EAAA89G,iBAAAztI,OAAA,OAAA0tI,EAAA/9G,EAAA89G,iBAAAztI,MAAA,WAAA0tI,EAAA,iBADAppI,uBAAA,UAAAA,4BAAA,EAAAktD,GAAA5sD,EAAAwQ,MAAAkgB,QAAA1wB,EAAAwQ,MAAA8nD,kCAOF54D,sBAAA,gGAGEA,mCAAA,sBAAAqrB,EAAA89G,kBAAA,MAAA99G,EAAA89G,iBAAAztI,OAAA,OAAA0tI,EAAA/9G,EAAA89G,iBAAAztI,MAAA,WAAA0tI,EAAA,4BAFAppI,uBAAA,UAAAA,4BAAA,EAAAktD,GAAA5sD,EAAAwQ,MAAA2oB,QAAAn5B,EAAAwQ,MAAA8nD,kCAOF54D,sBAAA,4HAKEA,uBAHA,eAAAqrB,EAAA89G,kBAAA,MAAA99G,EAAA89G,iBAAAztI,OAAA,OAAA2tI,EAAAh+G,EAAA89G,iBAAAztI,MAAA,WAAA2tI,EAAA,GAGArpI,CAHkD,UAGlDA,CAFc,OAAAM,EAAA4iF,GAEdljF,CADW,aAAAqrB,EAAA89G,kBAAA,MAAA99G,EAAA89G,iBAAAztI,OAAA,OAAA4tI,EAAAj+G,EAAA89G,iBAAAztI,MAAA,WAAA4tI,EAAA,8BAJbtpI,uBAAA,EAAAupI,GAAA,uFACGvpI,uBAAA,OAAAqrB,EAAA89G,6CA1BLnpI,2BAAA,aAIEA,mBAAA,gCACFA,2BAmBAA,uBAjBA,EAAAwpI,GAAA,cAiBAxpI,CAhB2C,EAAAypI,GAAA,yBAAAzpI,mCAgB3CA,CARgC,EAAA0pI,GAAA,yBAAA1pI,8HAd9BA,uBAAA,aAAAM,EAAAqpI,aAEA3pI,uDAAA,IAAAA,wBAAA,UAAAqrB,EAAA89G,kBAAA,MAAA99G,EAAA89G,iBAAAztI,OAAA,OAAA0tI,EAAA/9G,EAAA89G,iBAAAztI,MAAA,WAAA0tI,EAAA,SAIDppI,sBAAA,GAAkBA,uBAAlB,OAAAqrB,EAAA+iF,OAAkBpuG,CAAA,WAAA4pI,8BAgCjB5pI,2BAAA,QAA0CA,mBAAA,GAASA,qDAATA,sDAAA6pI,8BAD5C7pI,2BAAA,QACEA,uBAAA,EAAA8pI,GAAA,aACF9pI,8EADsBA,+CAAA,UAAAm5B,EAAAmrG,yCADtBtkI,uBAAA,EAAA+pI,GAAA,oGAAqC/pI,uBAAhC,OAAAm5B,EAAAmrG,cAAAnqI,OAAgC6F,CAAA,WAAAgqI,8BAQrChqI,2BAAA,UACEA,mBAAA,GACFA,8EADEA,uDAAA,IAAA05B,EAAAnZ,OAAA,+BADFvgB,uBAAA,EAAAiqI,GAAA,sGAAyBjqI,uBAAlB,OAAA05B,EAAAnZ,OAAkBvgB,CAAA,WAAAgqI,0BAOHhqI,mBAAA,uEAExBA,2BAAA,+CAQEA,uBADA,uBAAAA,0BAAAkqI,GAAA,MAAA5pI,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAi5E,YAAW,EACxBv5E,CADyB,2BAAA2J,GAAA3J,0BAAAkqI,GAAA,MAAA5pI,EAAAN,4BAAA,OAAAA,wBACNM,EAAAmL,gBAAA9B,GAAuB,GAE1C3J,2BAAA,YACEA,sBAAA,uDAQJA,yEAbEA,uBALA,OAAAA,wBAAA,IAAAM,EAAA6pI,oBAKAnqI,CALmC,UAAAM,EAAAsL,QAKnC5L,CAFmB,iBAQfA,sBAAA,GAGAA,uBAHA,aAAAM,EAAAg+B,YAAA01E,OAGAh0G,CAHiC,YAAAM,EAAA0K,UAGjChL,CAFuB,eAAAA,wBAAA,IAAAM,EAAA8pI,iBChDvB,MAAOC,WACH/tH,KAgCRzd,YACUyrI,EACAr9H,EACA2Z,EACAwxB,EACArrC,EACA+P,GAER1P,QAPQrO,KAAAurI,0BACAvrI,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAAq5C,mBACAr5C,KAAAgO,eACAhO,KAAA+d,cAvBV/d,KAAAwrI,SAAW,IAAIh9H,kBAAoC,IACnDxO,KAAAyrI,0BAA4B,IAAIj9H,mBAAyB,GAEzDxO,KAAA6M,QAA2B,GAC3B7M,KAAAqrI,cAAgB,IAAI78H,kBAAiC,IAErDxO,KAAAiM,UAAY,IAAIqC,IAGhBtO,KAAA09H,aAAuB,GACvB19H,KAAAi+H,aAAuB,GACvBj+H,KAAA+R,MAAQC,KAGRhS,KAAA0rI,YAAc,gBACd1rI,KAAA2rI,oBAAsB,IAWpB3rI,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAjI,YAAYC,GACNA,EAAQma,QACVhhB,KAAKwrI,SAAS/7H,KAAK,GAEvB,CAEAhB,WACEzO,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKw+H,WAAU,IAE9B,CACEpkI,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAKw+H,WAAU,IAE9B,CACEpkI,KAAM4F,KAAKgO,aAAakb,OACxBpc,WAAY,SACZyb,KAAMvW,KAAMqqF,MACZrzE,MAAOA,IAAMhpB,KAAK4rI,2BAItB5rI,KAAK6rI,qBAAuB7rI,KAAKq5C,iBAC9B31B,OACA1U,QACC9R,OAAK4uI,GAAmBA,EAAQj5H,KAAMzW,GAAWA,GAAShC,OAAY4F,KAAK0rI,eAE5E/8H,UAAU,CACTc,KAAOrT,GAAgB4D,KAAKyrI,0BAA0Bh8H,KAAKrT,GAAQw7B,WAGvE53B,KAAKorI,mBAAqBprI,KAAKwrI,SAASx8H,QACtCC,aAAU,IACRjP,KAAKyrI,0BAA0Bz8H,QAC7BC,aAAWP,GACJA,EAGE1O,KAAKurI,wBACT9G,wBAAwB,IAAKzkI,KAAKghB,QAClChS,QACC9R,OAAKwmB,GACHA,EAAKxmB,IAAK27H,QAAYA,EAAGuR,iBAAkB,GAAGvR,EAAEtgH,QAAQsgH,EAAErQ,iBAC3D,EAPIplG,MAAG,MASb,EACDkwF,eAAY,MAKlBtzG,KAAK6M,QAAU,CACb,CAAEsC,KAAM,mBAAoB/U,KAAMoP,gBAAiB4F,SAAU,EAAGC,aAAcrP,KAAKusF,SACnF,CAAEp9E,KAAM,OAAQ2jE,UAAU,EAAM2K,aAAa,GAC7C,CAAEtuE,KAAM,SAAU/U,KAAMoP,qBAAsB6F,aAAcrP,KAAK+rI,WACjE,CAAE58H,KAAM,eAAgB/U,KAAMoP,4BAC9B,CAAE2F,KAAM,WAAY2jE,UAAU,EAAM2K,aAAa,GACjD,CAAEtuE,KAAM,gBAAiB/U,KAAMoP,4BAA6B6F,aAAcrP,KAAKgsI,cAC/E,CAAE78H,KAAM,YAAa2jE,UAAU,EAAM2K,aAAa,GAClD,CAAEtuE,KAAM,gBAAiB/U,KAAMoP,0BAC/B,CAAE2F,KAAM,eAAgB/U,KAAMoP,0BAC9B,CAAE2F,KAAM,QAAS/U,KAAMoP,sBAAuB2f,mBAAoBC,IAAaijE,SAC/E,CAAEl9E,KAAM,UAAW/U,KAAMoP,mBAAoB2f,mBAAoBC,IAAaijE,UAGhFrsF,KAAKqrI,cAAc57H,KAAKzP,KAAK+M,aAC/B,CAEAid,cACEhqB,KAAK6rI,qBAAqB3hH,aAC5B,CAEAswD,YACEx6E,KAAKwrI,SAAS/7H,KAAK,GACrB,CAEA/C,gBAAgBT,GAEd,GADAjM,KAAKiM,UAAYA,GACZjM,KAAKiM,UAAU8mE,aAAc,OAClC,MAAMk5D,EAAWjsI,KAAKiM,UAAUmc,SAASinF,OAEzCrvG,KAAKqrI,cAAc57H,KAAK,IACnBzP,KAAK+M,aACR,CACE3S,KAAM6xI,EAAWjsI,KAAKgO,aAAa69D,WAAa7rE,KAAKgO,aAAa49D,SAClE9+D,WAAY,SACZyb,KAAM0jH,EAAWj6H,KAAM0oB,QAAU1oB,KAAMigB,QACvCjJ,MAAOA,IACLijH,EAAWjsI,KAAKksI,6BAA+BlsI,KAAKmsI,6BAG5D,CAEA3N,UAAU31G,GAAO,GACf7oB,KAAK6nB,aAAagD,KAAK88G,GAAqC,CAC1D3mH,OAAQhhB,KAAKghB,OACboJ,GAAIpqB,KAAKoqB,GACT7R,KAAMvY,KAAKiM,WAAWmc,SAAS7P,KAC/BiwG,SAAUxoH,KAAKiM,WAAWmc,SAASogG,SACnCwc,UAAWhlI,KAAKiM,WAAWmc,SAAS48G,UACpCjqI,MAAOiF,KAAKiM,WAAWmc,SAASrtB,MAChC2T,OAAQ1O,KAAKiM,WAAWmc,SAAS1Z,OACjCgO,OAAQmM,GAEZ,CAEAshH,yBACEnqI,KAAKq5C,iBAAiBzS,kBACpB5mC,KAAK0rI,aACL,EACA,KACA,GACA,mCAEJ,CAEAQ,6BACE,MAAQ3zH,OAAMxd,QAAOw0G,KAAIiZ,WAAUhnG,SAAQ2V,SAAUn3B,KAAKiM,UAAUmc,QAEpEpoB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB1hB,6BACjB2pD,kBAAmBnzD,KAAKgO,aAAa69D,WACrCzgD,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,sCAAuC,CAC5DxM,SAEFyM,KAAMhlB,KAAKurI,wBAAwBnnB,WAAW,CAC5C7rG,OACAiwG,WACAztH,QACAw0G,KACA/tF,SACA2V,aAIV,CAEAg1G,2BACE,MAAQ5zH,OAAMxd,QAAOw0G,KAAIiZ,WAAUhnG,SAAQ2V,SAAUn3B,KAAKiM,UAAUmc,QAEpEpoB,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB1hB,6BACjB2pD,kBAAmBnzD,KAAKgO,aAAa49D,SACrCxgD,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,oCAAqC,CAC1DxM,SAEFyM,KAAMhlB,KAAKurI,wBAAwBpnB,SAAS,CAC1C5rG,OACAiwG,WACAztH,QACAw0G,KACA/tF,SACA2V,aAIV,CAEAy0G,yBACE,MAAQrzH,OAAMxd,QAAOw0G,KAAIiZ,WAAUhnG,SAAQ2V,QAAO6tG,aAAchlI,KAAKiM,UAAUmc,QACzEi8G,EAAkBW,GACpBroI,MAAM,SACN0nB,OAAQxpB,KAAgBA,IACxBqC,IAAKrC,IACL,MAAM2pI,EAAY3pI,EAAE6nB,UAAU7nB,EAAEO,OAAS,GAEzC,MAAO,GADUP,EAAE6nB,UAAU,EAAG7nB,EAAEO,OAAS,MACrBopI,GAAS,IAE/B5nI,KAAK,KAEToD,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB1hB,6BACjB4hB,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,4BAA8BsZ,KAASnV,OAAQ,CACpE3Q,SAEFyM,KAAMhlB,KAAKurI,wBAAwBlgH,OAAO,CACxC9S,OACAiwG,WACAztH,QACAw0G,KACA80B,kBACA7iH,SACA2V,aAIV,iDAnPWm0G,IAAmCrqI,8BAAAC,IAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,KAAA,4DAAnCmiI,GAAmCliI,UAAA,sCAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,yfD5B/CE;m6BARDvI,uBAAA,EAAAmrI,GAAA,sDAuEAnrI,uBA3DA,EAAAorI,GAAA,yBAAAprI,mCA2DAA,CAzDqB,EAAAqrI,GAAA,yBAAArrI,mCAyDrBA,CAlBqB,EAAAsrI,GAAA,yBAAAtrI,mCAkBrBA,CAVqB,EAAAurI,GAAA,yBAAAvrI,mCAUrBA,CAFwB,GAAAwrI,GAAA,yDApErBxrI,uBAAA,YAAAA,wBAAA,IAAAwC,EAAAgoI,4BAwEAxqI,sBAAA,IAAAA,uBAAA,OAAAA,wBAAA,KAAAwC,EAAAgoI,kNE5DKxqI,sBAAA,mEAAkBA,uBAAA,OAAAM,EAAAoyE,mCAOlB1yE,sBAAA,wEAAuBA,uBAAA,KAAAM,EAAA6oB,8BAQvBnpB,sBAAA,2EAGEA,uBAFA,SAAAM,EAAA0K,UAAAujG,OAAA95F,QAEAzU,CAFmC,QAAAM,EAAAoyE,QAAA90B,MAEnC59C,CADuB,KAAAM,EAAA6oB,8BAUzBnpB,sBAAA,4EAEAA,uBADA,SAAAM,EAAA0K,UAAAujG,OAAA95F,QACAzU,CADmC,QAAAM,EAAAoyE,QAAA90B,iCAUnC59C,sBAAA,qFAAoCA,uBAAA,SAAAM,EAAA0K,UAAAujG,OAAA95F,mCASpCzU,sBAAA,kFAEEA,uBADA,SAAAM,EAAA0K,UAAAujG,OAAA95F,QACAzU,CADmC,KAAAM,EAAA6oB,qEAWrCnpB,2BAAA,0BAGAA,uBAAA,8BAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAoBM,EAAAikC,UAAS,GAC7BvkC,wEAFAA,uBADA,KAAAM,EAAA6oB,GACAnpB,CADS,UAAAM,EAAA6Q,mCAWTnR,sBAAA,6DAIEA,uBADA,mDAAAM,EAAAoyE,QAAAv5E,KACA6G,CADmE,mFAvF7EA,oCAAA,GACEA,2BAAA,cAGEA,uBAAA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAmrI,cAAa,GAI1BzrI,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KAEcA,2BACdA,uBAAA,EAAA0rI,GAAA,0DAIF1rI,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACmBA,2BACnBA,uBAAA,GAAA2rI,GAAA,0DAIF3rI,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAEeA,2BACfA,uBAAA,GAAA4rI,GAAA,0DAQF5rI,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAEqBA,2BACrBA,uBAAA,GAAA6rI,GAAA,0DAOF7rI,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAEcA,2BACdA,uBAAA,GAAA8rI,GAAA,0DAKF9rI,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAEuBA,2BACvBA,uBAAA,GAAA+rI,GAAA,0DAOF/rI,oCAAA,OACEA,2BAAA,WACEA,oCAAA,IAAAA,mBAAA,0CACAA,2BAAA,cAA8CA,mBAAA,IAChDA,6BACAA,uBAAA,GAAAgsI,GAAA,0DAQFhsI,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAEaA,2BACbA,uBAAA,GAAAisI,GAAA,0DAYJjsI,2BAEAA,sBAAA,0HA5BoDA,sBAAA,IAAAA,8BAAAM,EAAA6Q,QAAA7P,KAAAnH,QA4B/C6F,sBAAA,GAAAA,uBAAA,eAAAksI,ICjFD,MAAOC,GA2BXttI,YACUmO,EACAC,EACA6hH,GAFA/vH,KAAAiO,SACAjO,KAAAkO,qBACAlO,KAAA+vH,gBApBV/vH,KAAAoS,QAA+B,CAC7B7P,KAAM,GACNmM,OAAQ,IAAIq1C,KAAqBt5B,KAAgB05B,YAInDnkD,KAAA2zE,QAA+B,CAC7By7B,SAAU,GACVvwD,MAAO,GACP0zE,MAAO,GACPY,YAAa,GACb/4H,KAAM,IAWN4F,KAAKqtI,kBAAoBrtI,KAAKkO,mBAAmBW,iBAAiBsmG,OACpE,CAEAvuG,cACO5G,KAAKiM,UAINjM,KAAKiM,UAAUme,KAAOpqB,KAAKoqB,IAC7BpqB,KAAKstI,cAActtI,KAAKiM,UAAUme,GAAIpqB,KAAKiM,UAAUujG,OAAOluF,MAJ5DthB,KAAKutI,qBAMT,CAEQD,cAAcljH,EAAYojH,GAChCxtI,KAAKoqB,GAAKA,EACV,MAAMqjH,EAAgBt7H,UAAQF,OAAOpJ,OAAO2kI,IAC5CxtI,KAAK0tI,UAAYD,GAAYA,EAASrzI,KACtC4F,KAAK2zE,QAAU,CACby7B,SAAU,GACVvwD,MAAO,GACP0zE,MAAO,GACPY,YAAa,GACb/4H,KAAM,IAER4F,KAAKoS,QAAU,CACb7P,KAAM,GACNmM,OAAQ,IAAIq1C,KAAqBt5B,KAAgB05B,YAEnDnkD,KAAK2tI,gBACP,CAEQA,iBACN3tI,KAAKutI,sBACLvtI,KAAK4tI,mBACP,CAEQL,sBACFvtI,KAAK4pF,kBACP5pF,KAAK4pF,iBAAiB1/D,aAE1B,CAEQ0jH,oBACN5tI,KAAKiO,OAAOy1C,kBACV,IACG1jD,KAAK4pF,oBAAmB1iD,SAAM,EAAG,KAAMv4B,UAAU,IAChD3O,KAAKiO,OAAO21C,IAAI,IAAM5jD,KAAKwlC,YAGnC,CAEAA,UACExlC,KAAK+vH,cAAczE,QAAQtrH,KAAKoqB,IAAIzb,UACjCpM,IACCvC,KAAKuC,KAAOA,EACZvC,KAAK0sI,aAAW,EAElB,KACE1sI,KAAKoS,QAAQ1D,OAAS,IAAIq1C,KAAqBt5B,KAAgBC,eAAc,EAGnF,CAEAgiH,cACE,MAAMnqI,EAAO4P,cAAYnS,KAAKuC,MAE9BvC,KAAKoS,QAAU7P,GAAM6P,QACrBpS,KAAKoS,QAAQ1D,OAAS,IAAIq1C,KAAqB/jD,KAAKoS,SAAS1D,QAE7D1O,KAAK2zE,QAAU,CACby7B,SAAU7sG,EAAK6sG,SACfvwD,MAAOt8C,EAAKs8C,MACZ0zE,MAAOhwH,EAAKgwH,MACZY,YAAa5wH,EAAKsrI,aAClBzzI,KAAMmI,EAAKnI,KAEf,CAEA4vB,cACEhqB,KAAKutI,qBACP,iDAhHWH,IAAmBnsI,sEAAAC,KAAAD,8BAAA8H,GAAA,4DAAnBqkI,GAAmBhkI,UAAA,qBAAA+C,OAAA,CAAAF,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,2BDLnB5C,oFAOCA,sFAQHA,uFAYAA,6FAWAA,qFASAA,+FAUgBA,oFAchBA,qFAIMA,wxBAtFjBvI,uBAAA,EAAA6sI,GAAA,4BAAe7sI,uBAAA,OAAAwC,EAAAwI,uME+BXhL,sBAAA,iEAEEA,uBAAA,YAAAM,EAAA+K,8EAdJrL,2BAAA,gBAUEA,uBANA,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAwsI,gBAAAnjI,GAAuB,EAMpC3J,CANqC,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAKnBM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAE1C3J,uBAAA,EAAA+sI,GAAA,wBAIA/sI,2BAAA,WACEA,sBAAA,yBASJA,yEAlBEA,uBAPA,OAAAM,EAAA6d,YAOAne,CAPoB,UAAAM,EAAAsL,QAOpB5L,CALmB,iBAefA,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAA01E,OAIAh0G,CAJiC,YAAAM,EAAA0K,UAIjChL,CAHuB,eAAAM,EAAAwL,sCAW7B9L,2BAAA,uBAAAA,mBAAA,KAGAA,kDAIAA,sBAAA,wBAIEA,uBADA,0CACAA,CAD2C,2CAH7CA,uBAAA,EAAAgtI,GAAA,8DAMGhtI,uBAAA,OAAAM,EAAAg+B,YAAA41E,QAAA5iF,OCxBC,MAAO27G,WAA4BngI,IAavCjO,YACUoO,EACA6hH,EACD/hH,EACCuG,EACAqe,EACAu7G,EACAtmH,EACA9J,EACDsT,EACC2sG,EACAhnE,GAER3oD,QAZQrO,KAAAkO,qBACAlO,KAAA+vH,gBACD/vH,KAAAgO,eACChO,KAAAuU,SACAvU,KAAA4yB,aACA5yB,KAAAmuI,uBACAnuI,KAAA6nB,eACA7nB,KAAA+d,cACD/d,KAAAqxB,sBACCrxB,KAAAg+H,gBACAh+H,KAAAg3D,kBAnBVh3D,KAAAof,YAAmB,GACnBpf,KAAAiM,UAAY,IAAIqC,IAGhBtO,KAAA+R,MAAQC,KACRhS,KAAAouI,oBAAqB,EAiBnBpuI,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,iBACNC,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,iBACNC,SAAU,EACV+Z,mBAAoBC,IAAagJ,WAEnC,CACEh4B,KAAMoP,mBACN2F,KAAM,iBACNC,SAAU,EACV+Z,mBAAoBC,IAAaijE,UAGrCrsF,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWG,cACnDrK,aAAezc,IAAiCA,EAAU8mE,cAE5D,CACE34E,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IACLhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWQ,QAAQ7zB,OAAOS,KAAKiM,UAAUmc,QAAQgC,QAEhF,CACEhwB,KAAM4F,KAAKgO,aAAao9D,UACxBt+D,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAKquI,kBAEpB,CACEj0I,KAAM4F,KAAKgO,aAAa89D,OACxBh/D,WAAY,OACZyb,KAAMvW,KAAMysF,KACZx+E,QAASA,KAAOjgB,KAAKiM,WAAW8mE,aAChC/pD,MAAOA,IAAMhpB,KAAKy+H,kBAEpB,CACE3xH,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAKsuI,oBAClBl0I,KAAM4F,KAAKgO,aAAaw6D,OACxBvoD,QAASjgB,KAAKuuI,eAAevpI,KAAKhF,QAIlCA,KAAKu/B,YAAYm1E,UAAUniF,MAC7BvyB,KAAKmuI,qBAAqBz7H,IAAI,yBAAyB/D,UAAWpM,IAChE,GAAI4P,QAAM5P,EAAM,SAAU,CACxB,MAAMisI,EAAar8H,SAAO5P,EAAKjC,MAAQ2iC,GAChB,QAAdA,EAAED,UACL,CAAE1iC,OAAO,GACfN,KAAKouI,mBAA0C,SAArBI,EAAWluI,KACvC,GAGN,CAEAytI,gBAAgBvoI,GACdxF,KAAK+vH,cAAcrsG,OAAO/U,UACvBgb,IACC3pB,KAAKof,YAAcuK,GAErB,KACEnkB,EAAQ+b,OAAK,EAGnB,CAEA7U,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAwyH,iBACE,MAAMgQ,EAAqBzuI,KAAKiM,WAAWqzD,WAAW,GAEtDt/D,KAAK+vH,cACFpE,mBAAmB8iB,EAAmBrkH,IACtCpb,QACCC,aAAWy/H,GACT1uI,KAAKg+H,cAAclQ,iBAAiB9+G,QAAK9R,OAAKqF,KAAYmnB,UAAWnnB,EAAMgtG,GAAIm/B,QAGlF//H,UAAU,CACTc,KAAOmP,IACL5e,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKsiG,GAA6B,CAClEp5F,SAAUA,IAAM/zB,KAAK4qB,SAASqO,QAC9Bs0F,UAAW,CACT9B,KAAM7sG,EAAI8K,UACV1I,OAAQytH,GAAoBj/B,QAAQ95F,QACpC83G,SAAU5uG,EAAI2wF,GAAGh3F,OAEpB,GAGT,CAEA+1H,oBACE,MAAMvtG,EAAU/gC,KAAKiM,UAAUmc,QAAQonF,OAAO95F,QAC9C1V,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1DC,OAAQC,KAAeC,KACvBC,gBAAiB,cACjBC,UAAW,CAAC4V,GACZoyB,kBAAmB,SACnBY,aAAc/zD,KAAK2uI,UACnBvjH,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,gBAAiB,CAAEwiG,WAAYxmF,IACtD/b,KAAMhlB,KAAK+vH,cAActwF,OAAOsB,MAGxC,CAEAwtG,iBACE,OAAIvuI,KAAKiM,WAAW8mE,eACb/yE,KAAKouI,oBACD5kI,+FAOb,CAEA6kI,iBACE,MAAMI,EAAqBzuI,KAAKiM,WAAWqzD,WAAW,GACtDt/D,KAAK6nB,aAAagD,KAAKilG,GAA0B,CAC/C9uG,OAAQytH,EAAmBj/B,OAAO95F,QAClC0U,GAAIqkH,EAAmBrkH,IAE3B,iDA5KW8jH,IAAmBjtI,8BAAAC,KAAAD,8BAAA8H,GAAA9H,8BAAA+H,MAAA/H,8BAAAgI,UAAAhI,8BAAAiI,KAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,KAAA/kB,8BAAAglB,KAAAhlB,8BAAAilB,IAAAjlB,8BAAA8kB,MAAA,4DAAnBmoH,GAAmB9kI,UAAA,qBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,sKAFnB,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IANzC,gBAMuE1O,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,iBD7B3E5C,yFAKAA,qFAsCUA,yLAQZA,iyBA1DXvI,2BAAA,gBAWEA,sBALA,cAKAA,CADU,eAMZA,2BAuCAA,uBArCA,EAAA2tI,GAAA,yBAAA3tI,mCAqCAA,CArCoC,EAAA4tI,GAAA,yBAAA5tI,mCAqCpCA,CAPwB,EAAA6tI,GAAA,yBAAA7tI,0GA5CtBA,uBAHA,mBAGAA,CAHoB,iBAGpBA,CAFoB,kBAEpBA,CADsB,kBAMpBA,+CAAA,aAAA8tI,GAKA9tI,+CAAA,aAAA+tI,uEEPE,MAAOC,UAEIjvI,KAAAkvI,WAAyB,CACtC,CACE90I,KAAM,OACN+0I,UAAW,SACXC,cAAe,yBACfC,WAAY,EACZC,gBAAiB,oDACjBC,cAAc,EACdvuC,gBAAgB,GAElB,CACE5mG,KAAM,MACN+0I,UAAW,SACXC,cAAe,gBACfE,gBAAiB,0CACjBC,cAAc,EACdvuC,gBAAgB,GAElB,CACE5mG,KAAM,OACN+0I,UAAW,SACXC,cAAe,mCACfC,WAAY,EACZC,gBAAiB,mDACjBC,cAAc,EACdvuC,gBAAgB,GAElB,CACE5mG,KAAM,OACN+0I,UAAW,SACXC,cAAe,oBACfC,WAAY,EACZC,gBAAiB,+CACjBC,cAAc,EACdvuC,gBAAgB,GAElB,CACE5mG,KAAM,QACN+0I,UAAW,SACXC,cAAe,eACfE,gBAAiB,qDACjBC,cAAc,EACdvuC,gBAAgB,GAElB,CAAE5mG,KAAM,MAAO+0I,UAAW,OAAQC,cAAe,OAAQG,cAAc,GACvE,CACEn1I,KAAM,OACN+0I,UAAW,OACXC,cAAe,uBACfE,gBAAiB,oDACjBC,cAAc,GAEhB,CACEn1I,KAAM,OACN+0I,UAAW,OACXC,cAAe,OACfE,gBACE,oFACFC,cAAc,GAEhB,CAAEn1I,KAAM,OAAQ+0I,UAAW,WAAYC,cAAe,gBAAiBG,cAAc,GACrF,CAEK,cAAOC,CAAQrpI,GACpB,MAAMspI,EAAct9H,SAAOnS,KAAKkvI,WAAaQ,GACpCA,EAAEt1I,OAAS+L,GAGpB,QAAoByzB,IAAhB61G,EACF,OAAOA,EAGT,MAAM,IAAItsH,MAAM,uBAAyBhd,EAAO,uBAClD,CAEO,wBAAOwpI,CAAkBtsG,GAC9B,MAAMusG,EAAaX,GAAkBO,QAAQnsG,EAAal9B,MAE1D,GAAwB,SAApBypI,EAAWx1I,MAAuC,QAApBw1I,EAAWx1I,KAC3C,OAGF,MAAMy1I,EAAsC,CAC1Cx8H,WAAY,GACZi8H,gBAAiBM,EAAWN,iBAG9B,OAAIM,EAAWL,cACTlsG,EAAapkC,KAA4B,KAArBokC,EAAapkC,MACnC4wI,EAAe5wI,IAASokC,EAAapkC,IACrC4wI,EAAex8H,WAAWnX,KAAKoX,aAAWrU,IAAIokC,EAAapkC,OAGzDokC,EAAa+iC,KAA4B,KAArB/iC,EAAa+iC,KACnCypE,EAAezpE,IAAS/iC,EAAa+iC,IACrCypE,EAAex8H,WAAWnX,KAAKoX,aAAW8yD,IAAI/iC,EAAa+iC,OAClD,eAAgBwpE,IACzBC,EAAezpE,IAASwpE,EAAWP,WACnCQ,EAAex8H,WAAWnX,KAAKoX,aAAW8yD,IAAIwpE,EAAWP,cAGjC,UAAtBhsG,EAAal9B,KACf0pI,EAAex8H,WAAWnX,KAAK4lB,MAAam/E,iBAE5C4uC,EAAex8H,WAAWnX,KAAK4lB,MAAai/E,OAAO6uC,EAAW5uC,kBAEjC,SAAtB39D,EAAal9B,KACtB0pI,EAAex8H,WAAa,CAACyO,MAAazU,MACX,SAAtBg2B,EAAal9B,OACtB0pI,EAAex8H,WAAa,CAACyO,MAAa8gF,SAGrCitC,CACT,CAEO,kBAAOC,CAAY3pI,EAAc7F,GAGtC,GAFoB,CAAC,OAAQ,MAAO,OAAQ,QAE5B4B,SAASiE,GACvB,OAAO,EAGT,GAAa,UAATA,EAAkB,CACpB,GAAc,OAAV7F,IAE6B,IADbA,EAAMglB,WACVvpB,QAAQ,KAAa,CAEjC,MAAMg0I,EAAUzvI,EAAMglB,WAAW3oB,MAAM,KACvC,OAAOS,KAAKi3F,IAAI,IAAK07C,EAAQ,GAAG30I,OAClC,CAGF,MAAO,EACT,CAGF,ECjJI,MAAO40I,GAAblwI,cAEEE,KAAAM,MAAoB,GACpBN,KAAAiwI,cAAwB,CAC1B,yBCwBUhvI,2BAFF,WAEEA,CADuC,cACvCA,mBAAA,KAC4CA,2BAE1CA,2BADF,WACEA,CAD6B,iBAK7BA,mBAAA,kBAEJA,uDAKEA,2BAFF,WAEEA,CAD4C,cAC5CA,mBAAA,KACiDA,2BAE/CA,2BADF,WACEA,CAD6B,iBAK7BA,mBAAA,kBAEJA,uDAKEA,2BAFF,WAEEA,CADiD,cACjDA,mBAAA,KACwCA,2BACxCA,2BAAA,YACEA,sBAAA,cAMJA,qDAKEA,2BAFF,WAEEA,CADwD,cACxDA,mBAAA,KAC+CA,2BAC/CA,2BAAA,YACEA,sBAAA,cAMJA,wDAUMA,2BAFF,YAEEA,CADiC,aACFA,mBAAA,GACjCA,uDADiCA,sBAAA,GAAAA,8BAAAivI,8BALnCjvI,2BAFF,WAEEA,CADsD,cACtDA,mBAAA,KACyCA,2BACzCA,2BAAA,YACEA,uBAAA,EAAAkvI,GAAA,eAKJlvI,wEAL8BA,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA4/G,WAAAz/H,SAAA,wCAcxB1P,2BAFF,WAEEA,CAD2B,cAEJA,mBAAA,GACvBA,2BAMIA,2BALJ,WAKIA,CAL2B,cAK3BA,CADkC,eAClCA,mBAAA,KAC0BA,2BAC1BA,2BAAA,eAAAA,mBAAA,KACiBA,2BACjBA,2BAAA,eAAAA,mBAAA,OAINA,qFAfSA,+CAAA,MAAAovI,GAAgBpvI,uDAAA,GAAAovI,EAAA,KAMbpvI,sBAAA,GAAAA,uBAAA,kBAAAovI,GACEpvI,+CAAA,gBAEAA,sBAAA,GAAAA,uBAAA,cAEAA,sBAAA,GAAAA,uBAAA,yCAkBVA,2BAAA,aAEEA,mBAAA,GACFA,sEADEA,uDAAA,IAAAuvB,EAAA8+G,gBAAA,gCAEFruI,2BAAA,aAEEA,mBAAA,GACFA,sEADEA,uDAAA,IAAAuvB,EAAA8+G,gBAAA,gCAEFruI,2BAAA,aAAAA,mBAAA,MAEqFA,sEAA1EA,8CAAAuvB,EAAAruB,gEACXlB,2BAAA,aAAAA,mBAAA,MAEkFA,sEAAvEA,8CAAAuvB,EAAA8/G,gEAvBbrvI,2BAFF,WAEEA,CAD2B,cAEJA,mBAAA,GACvBA,2BACAA,2BAAA,YACEA,sBAAA,cAiBAA,uBAXA,EAAAsvI,GAAA,cAWAtvI,CAVgE,EAAAuvI,GAAA,cAUhEvvI,CANoE,EAAAwvI,GAAA,cAMpExvI,CADW,EAAAyvI,GAAA,eAKfzvI,8KAxBSA,+CAAA,MAAAovI,GAAgBpvI,uDAAA,GAAAovI,EAAA,KAIdpvI,sBAAA,GAIAA,uBAJA,OAAAuvB,EAAA2+G,UAIAluI,CAJkB,KAAAovI,EAIlBpvI,CAHc,cAAAuvB,EAAAmgH,kBAGd1vI,CAFiC,kBAAAovI,EAEjCpvI,CAD2B,OAAAuvB,EAAAogH,QAAApgH,EAAArqB,KAAAqqB,EAAA4/G,WAAAz/H,SAAA0/H,KAG3BpvI,+CAAA,OAAAuvB,EAAA4/G,WAAA//H,UAAAggI,EAAA9/H,EAAA,YAIAtP,+CAAA,OAAAuvB,EAAA4/G,WAAA//H,UAAAggI,EAAA9/H,EAAA,gBAIAtP,+CAAA,OAAAuvB,EAAA4/G,WAAA//H,UAAAggI,EAAA9/H,EAAA,QAGAtP,+CAAA,OAAAuvB,EAAA4/G,WAAA//H,UAAAggI,EAAA9/H,EAAA,mCA7CbtP,oCAAA,GAqBEA,uBApBA,EAAA4vI,GAAA,cAoBA5vI,CAnB6B,EAAA6vI,GAAA,8FAAvB7vI,+CAAA,gBAAAuvB,EAAArqB,MAoBAlF,+CAAA,gBAAAuvB,EAAArqB,uEAjHZlF,2BAPN,WAOMA,CANwB,cAMxBA,CAFa,WAEbA,CADgB,YAEdA,oCAAA,MAAkBA,mBAAA,8CAAoBA,mBAAA,GACxCA,2BAKIA,2BAHJ,WAGIA,CAHmB,WAGnBA,CAD0B,eAC1BA,mBAAA,MACqCA,2BACrCA,2BAAA,aACEA,sBAAA,eAMJA,6BA2DAA,uBAxDA,GAAA8vI,GAAA,aAwDA9vI,CAvDyC,GAAA+vI,GAAA,aAuDzC/vI,CAzC8C,GAAAgwI,GAAA,aAyC9ChwI,CA3BmD,GAAAiwI,GAAA,aA2BnDjwI,CAb0D,GAAAkwI,GAAA,cA2BxDlwI,2BADF,YACEA,CAD0B,YAC1BA,mBAAA,MAC4BA,2BAC5BA,uBAAA,GAAAmwI,GAAA,uBAmDJnwI,6BAGEA,2BADF,YACEA,CADuB,8BACDA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAAuvB,EAAA6gH,YAAmC7gH,EAAA8gH,2BAA6B9gH,EAAAI,SAAQ,GAOtG3vB,+EA3JQA,+CAAA,YAAAuvB,EAAA4/G,YAIsCnvI,sBAAA,GAAAA,+BAAA,IAAAuvB,EAAA4/G,WAAAz/H,SAAA,aAmBhC1P,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA4/G,WAAAz/H,SAAA,SAcA1P,+CAAA,OAAAuvB,EAAA4/G,WAAAz/H,SAAA,cAcA1P,+CAAA,YAAAuvB,EAAA4/G,WAAAz/H,SAAA,YAcA1P,+CAAA,YAAAuvB,EAAA4/G,WAAAz/H,SAAA,mBAcA1P,+CAAA,OAAAuvB,EAAA4/G,WAAAz/H,SAAA,YAAAvV,OAAA,GAe8B6F,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA+gH,eAuDdtwI,sBAAA,GACAA,uBADA,OAAAuvB,EAAA4/G,WACAnvI,CADmB,aAAAuvB,EAAAxiB,aAAAu6D,SChI3C,MAAOipE,WAAmCj0H,KAY9Czd,YACSkO,EACC0P,EACAnJ,EACAk9H,EACApgH,EACAxJ,GAERxZ,QAPOrO,KAAAgO,eACChO,KAAA0d,QACA1d,KAAAuU,SACAvU,KAAAyxI,gBACAzxI,KAAAqxB,sBACArxB,KAAA6nB,eATV7nB,KAAAuxI,cAAgB,CAAC,SAAU,MAAO,MAAO,MAAO,MAAO,UAYrDvxI,KAAKif,YACP,CAEAA,aACE,MAAMyyH,EAAe,CACnBt3I,KAAM,IAAIgZ,qBAAmB,CAAE9S,MAAO,OACtCgvF,KAAM,IAAIl8E,qBAAmB,CAAE9S,MAAO,OACtCqxI,UAAW,IAAIv+H,qBAAmB,CAAE9S,MAAO,OAC3CuI,OAAQ,IAAIynD,mBAAiB,IAC7BntB,QAAS,IAAI/vB,qBAAmB,CAAE9S,MAAO,OACzCsxI,eAAgB,IAAIx+H,qBAAmB,CAAE9S,MAAO,OAChDuxI,SAAU,IAAIz+H,qBAAmB,KAGnCpT,KAAKuxI,cAAcvqI,QAASg8B,IAC1B0uG,EAAa7oI,OAAOipI,WAAW9uG,EAAS,IAAI5vB,qBAAmB,MAAK,GAGtEpT,KAAKowI,WAAa,IAAIj9H,KAAYu+H,EACpC,CAEAjjI,WACEzO,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3B,MAAMugG,EAAavgG,EAAOplB,KAC1B4F,KAAKyxI,cAAc/+H,IAAIqtG,GAAYpxG,UAAWgb,IAC5C3pB,KAAKs4B,YAAY3O,GACjB3pB,KAAKwgB,cAAY,EAClB,EAEL,CAEAuxH,cAAc1uG,GACZ,MAAMwsG,EAAiBZ,GAAkBU,kBAAkBtsG,GAC3D,GAAIwsG,EACF,OAAA7vI,KAAKsvI,gBAAkBO,EAAeP,gBAElC,QAASO,GAAyC,KAAvBA,EAAe5wI,MAC5Ce,KAAKmC,SAAW0tI,EAAe5wI,KAG7B,QAAS4wI,GAAyC,KAAvBA,EAAezpE,MAC5CpmE,KAAKswI,SAAWT,EAAezpE,KAG1BypE,EAAex8H,UAI1B,CAEAu9H,QAAQzqI,EAAc7F,GACpB,OAAO2uI,GAAkBa,YAAY3pI,EAAM7F,EAC7C,CAEAg4B,YAAYD,GACVr4B,KAAKq4B,SAAWA,EAChB,MAAMhlB,EAAarT,KAAK+xI,cAAc15G,GACtCr4B,KAAKowI,WAAW19H,IAAI,QAAQiN,SAAS0Y,EAASj+B,MAC9C4F,KAAKowI,WAAW19H,IAAI,QAAQiN,SAAS0Y,EAASi3D,MAC9CtvF,KAAKowI,WAAW19H,IAAI,aAAaiN,SAAS0Y,EAASs5G,WACnD3xI,KAAKowI,WAAW19H,IAAI,WAAWiN,SAAS0Y,EAAS8K,SACjDnjC,KAAKowI,WAAW19H,IAAI,kBAAkBiN,SAAS0Y,EAASu5G,gBACxD5xI,KAAKowI,WAAW19H,IAAI,YAAYiN,SAAS0Y,EAASw5G,UAE9C7xI,KAAKq4B,SAAS/3B,OAChBN,KAAKq4B,SAAS/3B,MAAM0G,QAAS1G,IAG3B,IAAI0xI,EAAe,KAEjBA,EADkB,SAAhB1xI,EAAMA,OAEiB,UAAhBA,EAAMA,OAGAA,EAAMA,MAEvBN,KAAKowI,WAAW19H,IAAI,UAAUA,IAAIpS,EAAM0iC,SAASrjB,SAASqyH,EAAY,GAG1EhyI,KAAKqxI,aAAerxI,KAAKq4B,SAAS45G,uBAAyB55G,EAASj+B,KAAK8H,SA3GjE,OA4GRlC,KAAKuxI,cAAcvqI,QAASg8B,IAC1BhjC,KAAKowI,WAAW19H,IAAI,UAAUA,IAAIswB,GAASrhB,cAActO,EAAU,GAGrE,MAAMo8H,EAAcR,GAAkBO,QAAQn3G,EAASlyB,MACvDnG,KAAKmG,KAAOspI,EAAYr1I,KACxB4F,KAAKmvI,UAAYM,EAAYN,UAC7BnvI,KAAK2wI,kBAAoBlB,EAAYL,aACvC,CAEA8C,gBACE,MAAMrpI,EAAgB,GAStB,GAPA7I,KAAKuxI,cAAcvqI,QAASg8B,IAC1B,MAAMgvG,EAAehyI,KAAKowI,WAAWz/H,SAASqyB,GACzB,OAAjBgvG,GACFnpI,EAAO3M,KAAK,CAAE8mC,QAASA,EAAS1iC,MAAO0xI,GAAc,IAIpD7/H,YAAUnS,KAAKq4B,SAAS/3B,MAAOuI,GAAS,CAC3C,MAAMsnC,EAAU,IAAI6/F,GACpB7/F,SAAQ/1C,KAAO4F,KAAKowI,WAAWz/H,SAAS,QACxCw/B,EAAQ7vC,MAAQuI,EACZ7I,KAAKqxI,cACPlhG,EAAQ8/F,aAAejwI,KAAKqxI,aAEvBlhG,CACT,CAEA,OAAO,IACT,CAEAmhG,2BACEtxI,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDgO,WAAYtvB,sBACZ2pD,kBAAmB3pD,sBACnB0hB,gBAAiB1hB,yBACjB0pD,YAAa,kEACb72C,aAAcA,KACZrc,KAAK6nB,aAAa2L,aAClBxzB,KAAK4wB,QAAM,GAGjB,CAEAA,SACE,MAAMuf,EAAUnwC,KAAKkyI,gBAEjB/hG,GACFnwC,KAAKyxI,cAAcxsH,OAAOkrB,GAASxhC,UACjC,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,kCAAkC2mC,EAAQ/1C,QAE5C4F,KAAKuU,OAAOC,SAAS,CAAC,kBAAiB,EAEzC,KACExU,KAAKowI,WAAW7qH,UAAU,CAAEE,gBAAgB,GAAM,GAKxDzlB,KAAKuU,OAAOC,SAAS,CAAC,kBACxB,iDAtKWg9H,IAA0BvwI,8BAAAC,MAAAD,8BAAA8H,kBAAA9H,8BAAA8H,UAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAA1BsoI,GAA0BpoI,UAAA,4BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,kCDVI5C,iFAkFXA,mFApEWA,wFAcAA,6FAcAA,oFAcAA,2FAcAA,qFAyBZA,0FAEAA,iFAEAA,kFA2BJA,sIAA2D,qCAG3DA,mIAAwD,00CAhJnFvI,uBAAA,EAAAkxI,GAAA,qBACMlxI,uBAAA,gBAAAwC,EAAA4iB,miBEsBIplB,2BAAA,UACEA,mBAAA,GAA4DA,sBAAA,QAC9DA,8DADEA,uDAAA,IAAAmxI,EAAApvG,QAAA,KAAAovG,EAAA9xI,MAAA,GAAA+xI,EAAA,sCAmCEpxI,2BAFJ,SAEIA,CAFuC,YAEvCA,CAD8B,aACMA,mBAAA,qCAExCA,wFAHQA,0DAAA,QAAAmP,EAAAkiI,MAAAC,IACgCtxI,sBAAA,GAAAA,sDAAA,IAAAsxI,+BAUtCtxI,2BADF,SACEA,CAD+C,aACXA,mBAAA,GACtCA,uDADsCA,sBAAA,GAAAA,8BAAAuxI,8BArEhDvxI,oCAAA,GAKQA,2BAJN,aAIMA,CAHoC,UAGpCA,CAFG,OAEHA,CADE,WACFA,mBAAA,KAC0BA,2BAC1BA,2BAAA,WAAiBA,mBAAA,GACnBA,6BAEEA,2BADF,OACEA,CADE,WACFA,mBAAA,MAC4BA,2BAC5BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACiCA,2BACjCA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC+BA,2BAC/BA,2BAAA,SACEA,uBAAA,GAAAwxI,GAAA,eAIJxxI,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACwBA,2BACxBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC+BA,2BAC/BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACqBA,2BACrBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACoBA,2BACpBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACoBA,2BACpBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACsBA,2BACtBA,2BAAA,SACEA,uBAAA,GAAAyxI,GAAA,eAMJzxI,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACyBA,2BACzBA,2BAAA,SACEA,uBAAA,GAAA0xI,GAAA,eAIJ1xI,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACuBA,2BACvBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACsBA,2BACtBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACqDA,2BACrDA,2BAAA,SAAIA,mBAAA,yCACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACqBA,2BACrBA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OAC4BA,2BAC5BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,OACyBA,2BACzBA,2BAAA,SAAIA,mBAAA,IAGVA,+GAjGuBA,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA7R,MAKb6G,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAqjF,MAKAruF,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA0lI,WAMqB1wI,sBAAA,GAAAA,uBAAA,UAAAmP,EAAAnE,UAAA3L,OAQrBW,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAk3B,SAKAliC,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA2lI,gBAKA3wI,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA9F,MAKAlF,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAm6D,KAKAnlE,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAhN,KAMqBgC,sBAAA,GAAAA,uBAAA,UAAAmP,EAAAnE,UAAAqmI,OAWGrxI,sBAAA,GAAAA,uBAAA,UAAAmP,EAAAnE,UAAA4lI,UAQxB5wI,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAilD,QAKAjwD,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA2mI,OAKA3xI,sBAAA,GAAAA,sDAAA,MAAAmP,EAAAnE,UAAAgmI,wBAKAhxI,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAAopC,MAKAp0C,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA4mI,aAKA5xI,sBAAA,GAAAA,8BAAAmP,EAAAnE,UAAA6mI,WC5FN,MAAOC,GALbjzI,cAQEE,KAAAsyI,MAAQ,CACNU,QAASxpI,gDACTypI,cAAezpI;;;qBAIf0pI,QAAS1pI,2DACT2pI,eAAgB3pI,iDAChByb,OAAQzb,iDAGV5C,cACM5G,KAAKiM,YACPjM,KAAKiM,UAAU4lI,SAAW1/H,UAAQnS,KAAKiM,UAAU4lI,SAAU,KAE/D,iDAlBWkB,GAA6B,4DAA7BA,GAA6B3pI,UAAA,+BAAA+C,OAAA,CAAAF,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,iDDHZ5C,iFAKLA,wFAKAA,6FAKAA,2FASAA,oFAKAA,2FAKAA,iFAKAA,gFAKAA,gFAKAA,kFAWAA,sFASAA,oFAKAA,mFAKAA,iHAKAA,kFAKAA,yFAKAA,qZApGzBvI,uBAAA,EAAAmyI,GAAA,8BAAenyI,uBAAA,OAAAwC,EAAAwI,wIEabhL,sBAAA,yEAC0BA,uBAAA,YAAAM,EAAA+K,wCAOxBrL,2BAAA,UACEA,mBAAA,GAA4DA,sBAAA,QAC9DA,8DADEA,uDAAA,IAAAoyI,EAAArwG,QAAA,KAAAqwG,EAAA/yI,MAAA,GAAAgzI,EAAA,sCAFJryI,2BAAA,UACEA,uBAAA,EAAAsyI,GAAA,cAGFtyI,gFAHyBA,+CAAA,UAAAw5B,6BADzBx5B,uBAAA,EAAAuyI,GAAA,wCAAOvyI,uBAAA,OAAAw5B,ICCH,MAAOg5G,WAA+B1lI,IAmE1CjO,YACUoO,EACAigI,EACDngI,GAEPK,QAJQrO,KAAAkO,qBACAlO,KAAAmuI,uBACDnuI,KAAAgO,eAnEThO,KAAAuC,KAAc,GACdvC,KAAA+R,MAAQC,KAERhS,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAAsrF,QAA2B,CACzB,CACElxF,KAAMoP,oBACN2F,KAAM,WACN87E,cAAe,CAACzhF,eAAgBA,eAChCuhF,gBAAiBvhF,eACjB6hF,gBAAiBA,CAAC5c,EAAKnuE,OACP,QAAVA,GAAmBmuE,EAAI7iC,eAAe,UAI5B,OAAVtrC,IAAmBmuE,EAAI7iC,eAAe,WAO9C,CACExxC,KAAMoP,iBACN2F,KAAM,QACN87E,cAAe,CAAC,QAAS,WAAY,OACrCI,gBAAiBA,CAAC5c,EAAKnuE,KACrB,IAAKozI,EAAL,IAAKA,WAAK,KACRA,EAAAC,MAAA,WACAD,IAAAE,SAAA,cACAF,IAAAG,IAAA,SAGF,MAAMC,EAAWJ,EAAMpzI,GAEvB,OAAOozI,EAAMjlE,EAAImkE,QAAUkB,IAG/B,CACE15I,KAAMoP,mBACN2F,KAAM,WACN87E,cAAe,CAAC,MAAO,MAAO,MAAO,MAAO,SAAU,aAAc,OACpEI,gBAAiBA,CAAC5c,EAAKnuE,IACdmuE,EAAIojE,SAAS3vI,SAAS5B,IAGjC,CACElG,KAAMoP,kBACN2F,KAAM,SACN87E,cAAe,CAAC,OAChBI,gBAAiBA,CAAC5c,EAAKnuE,MAChBmuE,EAAI7iC,eAAe,WAGjB6iC,EAAIvd,OAAOhvD,SAAS5B,KAgB/BN,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB6lG,UAC3D,MAAMq/B,EAAkBA,IACtB/zI,KAAKiM,UAAUmc,SAAW,GAAG0jB,mBAAmB9rC,KAAKiM,UAAUmc,QAAQhuB,QACnEwuB,EAA4B,CAChC9b,WAAY,SACZyb,KAAMvW,KAAM6W,KACZJ,WAAYA,IAAM,uBAAuBsrH,MACzC35I,KAAM4F,KAAKgO,aAAauR,KACxBU,QAASA,KAAOjgB,KAAKg0I,WAAWh0I,KAAKiM,YAEvCjM,KAAK+M,aAAe,CAAC6b,EACvB,CAEAna,WACEzO,KAAK6M,QAAU,CACb,CAAEonI,eAAe,EAAM9kI,KAAM,OAAQ/U,KAAMoP,iBAC3C,CAAE2F,KAAM,OAAQ/U,KAAMoP,uBAAwBioB,UAAW,QACzD,CACEtiB,KAAM,QACN/U,KAAMoP,yBACNioB,UAAW,OACXpiB,aAAcrP,KAAKk0I,YAErB,CAAE/kI,KAAM,UAAW/U,KAAMoP,mBAAoBioB,UAAW,QACxD,CACEtiB,KAAM,wBACN/U,KAAMoP,oBACN2f,mBAAoBC,IAAagJ,UACjChjB,SAAU,GACVqiB,UAAW,eAGjB,CAEA/kB,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAkoI,qBAAqB3uI,GACnBxF,KAAKmuI,qBAAqB/qG,gBAAgBz0B,UACvCpM,IACCvC,KAAKuC,KAAOA,GAEd,KACEiD,EAAQ+b,OAAK,EAGnB,CAEAyyH,WAAW/nI,GACT,OAAkC,IAA9BA,EAAUqzD,SAASlkE,WAGlB4E,KAAKiM,UAAUqzD,SAAS,GAAGllE,KAAgB8H,SArIxC,QAwIDlC,KAAKiM,UAAUqzD,SAAS,GAAG2yE,sBACpC,iDAlIWwB,IAAsBxyI,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA,4DAAtByqI,GAAsBrqI,UAAA,uBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,qqBDrBnCrI,2BAAA,gBAOUA,uBANA,qBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAawC,EAAA0wI,qBAAAvpI,GAA4B,EAMzC3J,CAN0C,0BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAKxBwC,EAAA+I,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBACtBwC,EAAAiJ,gBAAA9B,GAAuB,GAClD3J,sBAAA,wBAKAA,uBAAA,EAAAmzI,GAAA,kCAGFnzI,2BAEAA,uBAAA,EAAAozI,GAAA,yBAAApzI,0CAbUA,uBALA,OAAAwC,EAAAlB,KAKAtB,CALa,UAAAwC,EAAAoJ,QAKb5L,CAHmB,yBAAAwC,EAAA6nF,QAGnBrqF,CAFkC,iBAMxBA,wBAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,wUEFrC,MAAOunI,GAGXx0I,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAA8gC,QAAU,aAE6B,CAEvCyzG,YACE,OAAOv0I,KAAK8rB,KAAKpZ,IAAY,GAAG1S,KAAK8gC,UAAW,CAC9CX,QAAS,CAAEC,OAAQ,uCAEvB,CAEAo0G,aAAa9lI,GACX,OAAO1O,KAAK8rB,KAAKgE,IACf,GAAG9vB,KAAK8gC,UACR,CAAEpyB,OAAQA,GACV,CAAEyxB,QAAS,CAAEC,OAAQ,uCAEzB,iDAjBWk0G,IAAcrzI,qBAAAC,cAAA,+DAAdozI,GAAcnzI,QAAdmzI,GAAclzI,UAAAC,WAFb,QAAM,yCCJd,MAAOozI,GACX30I,YAAY0f,EAAoBk1H,EAAe,EAAGC,EAAe,GAC/D,MAAMzxI,EAAU,CACdsc,OAAQA,EACR2gB,QAAS,CACPC,OAAQ,6BAA6Bs0G,KAAgBC,UAIzDzxI,QAAqB,YAArBA,OACOA,CACT,ECQI,MAAO0xI,GAqDX90I,YAAoBgsB,EAA0BoY,GAA1BlkC,KAAA8rB,OAA0B9rB,KAAAkkC,gBApDtClkC,KAAAuY,KAAO,UACPvY,KAAA60I,OAAS,aAEjB70I,KAAA80I,WAAoC,GAEpC90I,KAAA+0I,yBAAmC,EAEnC/0I,KAAAg1I,4BAA8B,CAC5BC,iBAAkB,CAChB,CACE76I,KAAM,KACNw2D,KAAMpnD,qCACNX,OAAQ,CACNqsI,kBAAmB,KACnBC,wBAAyB,KACzBC,8BAA+B,KAC/BC,mBAAoB,OAGxB,CACEj7I,KAAM,MACNw2D,KAAMpnD,eACNX,OAAQ,CACNqsI,kBAAmB,EACnBC,wBAAyB,EACzBC,8BAA+B,EAC/BC,mBAAoB,KAGxB,CACEj7I,KAAM,UACNw2D,KAAMpnD,mBACNX,OAAQ,CACNqsI,kBAAmB,EACnBC,wBAAyB,EACzBC,8BAA+B,EAC/BC,mBAAoB,IAGxB,CACEj7I,KAAM,OACNw2D,KAAMpnD,gBACNX,OAAQ,CACNqsI,kBAAmB,EACnBC,wBAAyB,EACzBC,8BAA+B,EAC/BC,mBAAoB,KAMiD,CAE7EpwH,OAAOqwH,EAAuBC,EAAoBt+B,EAAS,gBACzD,MAAM9mE,EAAU,CACd8mE,OAAQA,EACR10G,KAAM+yI,EACNnwB,YAAaowB,GAEf,OAAOv1I,KAAK8rB,KAAKzwB,KAAK2E,KAAKuY,KAAM43B,EAAS,CAAExP,QAAS,YACvD,CAEAoL,QAAQvsB,GACN,OAAO,IAAI8gB,KACTtgC,KAAK8rB,KAAKpZ,IAAW1S,KAAKuY,KAAM,IAAIk8H,GAAej1H,EAAQ,EAAG,IAElE,CAEAg2H,iBACE,OAAOx1I,KAAK8rB,KAAKpZ,IAAiB,GAAG1S,KAAKuY,gBAAiB,CACzD4nB,QAAS,CAAEC,OAAQ,uCAEvB,CAEAq1G,WAAWrrH,GAMT,OAAOpqB,KAAK8rB,KAAKpZ,IAAa,GAAG1S,KAAKuY,QAAQ6R,IAChD,CAKA0a,aAAa1a,GACX,OAAOpqB,KAAK8rB,KAAKpZ,IAAyB,GAAG1S,KAAKuY,QAAQ6R,UAC5D,CAEAsrH,MAAMtrH,EAAYurH,GAChB,OAAO31I,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKuY,QAAQ6R,gBAAiBurH,IAAQ,KACjE,CAEAC,uBACE,OAAO51I,KAAK8rB,KAAKpZ,IAAuB,GAAG1S,KAAK60I,4BAClD,CAEAgB,WACE,OAAO71I,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKuY,aAC/B,CAEAu9H,YAAYxD,GACV,OAAOtyI,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,aAAc,CAAE+5H,MAAOA,GACtD,CAEAyD,sBAAsBzD,EAAoC0D,GACxD,OAAOh2I,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,wBAAyB,CAAE+5H,MAAOA,EAAO0D,IAAKA,GAC7E,CAEAC,QAAQ7rH,GACN,OAAOpqB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,QAAQ6R,SAAW,CAAE9N,OAAQ,OAC5D,CAEA45H,OAAO9rH,GACL,OAAOpqB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,QAAQ6R,SAAW,CAAE9N,OAAQ,MAC5D,CAEA65H,SAAS/rH,GACP,OAAOpqB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,QAAQ6R,SAAW,CAAE9N,OAAQ,QAC5D,CAEAkgC,SAASpyB,EAAYgsH,GACnB,OAAOp2I,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKuY,QAAQ6R,aAAe,CAAEgsH,OAAQA,GACjE,CAEAruI,OAAOqiB,EAAYisH,GACjB,OAAOr2I,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,QAAQ6R,IAAM,CAAE0Z,aAAcuyG,GAC7D,CAEAC,SAASlsH,GACP,OAAOpqB,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKuY,QAAQ6R,SAAW,CAAE9N,OAAQ,QAC5D,CAEAi6H,MAAMnsH,GACJ,OAAOpqB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKuY,QAAQ6R,UAAY,KACpD,CAEArB,QAAQqB,GACN,OAAOpqB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAKuY,QAAQ6R,YAAc,KACtD,CAEAiB,OAAOjB,EAAYosH,EAAsBtxG,GACvC,MAAM1lB,EAAS,CACbi3H,YAAaD,EAAa,OAAS,QACnCtxG,MAAOA,EAAQ,OAAS,SAE1B,OAAOllC,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAKuY,QAAQ6R,IAAM,CAAEuW,QAAS,WAAYnhB,OAAQA,GAC/E,CAEAk3H,cAAcV,GAQZ,OAAOh2I,KAAK8rB,KAAKpZ,IAA2B,GAAG1S,KAAKuY,4BAA4By9H,IAClF,CAEAW,aAAaX,GAKX,OAAOh2I,KAAK8rB,KAAKpZ,IAA0B,GAAG1S,KAAKuY,+BAA+By9H,IACpF,CAEAtxG,WAAWkyG,GACT,OAAO52I,KAAK8rB,KACTpZ,IAAgB,GAAG1S,KAAKuY,QAAQq+H,aAChC5nI,QAAK9R,OAAKynC,GAAYA,EAAQznC,IAAK0nC,GAAW5kC,KAAKkkC,cAAcW,cAAcD,KACpF,iDA/KWgwG,IAAU3zI,qBAAAC,cAAAD,qBAAA8H,MAAA,+DAAV6rI,GAAUzzI,QAAVyzI,GAAUxzI,UAAAC,WAFT,QAAM,8BCdd,MAAOw1I,GAaX/2I,cACEE,KAAKuqB,QACLvqB,KAAKkjG,iBAAmB,IAAIC,KAC5BnjG,KAAK82I,qBAAuB,CAC1B,iBAAkB,CAChB18I,KAAM,UAER,gBAAiB,CACfA,KAAM,SAER4rC,UAAW,CACT5rC,KAAM,aAER28I,oBAAqB,CACnB38I,KAAM,aACN2F,UAAYO,GACqB,QAAxBA,EAAMikB,eAGjB,eAAgB,CACdnqB,KAAM,OACN2F,UAAYO,GACHN,KAAKkjG,iBACT16F,cAAclI,EAAO,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,OACzD8H,QAAQ,IAAK,KAIxB,CAEAmiB,QACEvqB,KAAKg3I,KAAO,CACVjrH,aAAc,MACdC,WAAY,aAAa7Z,YAE7B,CAEA8kI,QAAQ78I,GACN4F,KAAKg3I,KAAKhrH,WAAgB5xB,CAC5B,CAEA88I,eAAe1jI,GACbxT,KAAKg3I,KAAKG,aAAkB3jI,CAC9B,CAEA4jI,mBAAmBjxI,EAAcglF,GAC/B,MAAM5oE,EAAM,GAAGpc,YACfnG,KAAKg3I,KAAKz0H,GAAO,GACjB4oE,EAAenkF,QAASqd,IACtB,MAAMgzH,EAAOr3I,KAAK82I,qBAAqBzyH,EAAOlV,MAC9C,GAAIkoI,EAAM,CACR,MAAMj9I,EAAOi9I,EAAKj9I,KAClB4F,KAAKg3I,KAAKz0H,GAAKnoB,GAAQi9I,EAAKt3I,UAAYs3I,EAAKt3I,UAAUskB,EAAO/jB,MAAMm8E,KAAOp4D,EAAO/jB,MAAMm8E,GAC1F,GAEJ,CAEA66D,qBAAqBnxI,GACnB,MAAMoc,EAAM,GAAGpc,mBACRnG,KAAKg3I,KAAKz0H,EACnB,CAEAg1H,SAASpxI,EAAcqxI,GACrB,MAAMj1H,EAAM,GAAGpc,UACD,IAAVqxI,SACKx3I,KAAKg3I,KAAKz0H,GAEjBviB,KAAKg3I,KAAKz0H,GAAOi1H,CAErB,CAEAC,WAAWpsG,EAAiBzT,GACtBA,EACF53B,KAAKg3I,KAAK3rG,IAAW,SAEdrrC,KAAKg3I,KAAK3rG,EAErB,MC/FUqsG,oDAAZ,SAAYA,GACVA,EAAAC,UAAA,YACAD,EAAAE,SAAA,WACAF,EAAAG,YAAA,cACAH,EAAAI,eAAA,iBACAJ,EAAAK,kBAAA,oBACAL,EAAAM,uBAAA,yBACAN,EAAAO,sBAAA,wBACAP,EAAAQ,WAAA,YACAR,EAAAS,WAAA,aAEAT,EAAAU,aAAA,mBACAV,EAAAW,eAAA,QACAX,EAAAY,aAAA,QACAZ,EAAAa,eAAA,iBACAb,EAAAc,eAAA,iBACAd,EAAAe,YAAA,eAEAf,EAAAgB,sBAAA,qBACAhB,EAAAiB,WAAA,oBACAjB,EAAAkB,WAAA,cAEAlB,EAAAmB,YAAA,gBACAnB,EAAAoB,mBAAA,oBACF,CAxBA,CAAYpB,QAAmB,iCCOzB,MAAOqB,GAOXxwI,UAAUi4B,GACR,GAAIruB,gBAAcquB,GAChB,OAAOh3B,mBAET,GAAI2I,QAAMquB,EAAa,aAAa,GAClC,OAAOh3B,qBAET,MAAMwvI,EAAiB,GACjBjzG,EAAuB5zB,QAAMquB,EAAa,mBAC1CiL,EAAgBt5B,QAAMquB,EAAa,mBACnC7+B,EAAgBwQ,QAAMquB,EAAa,mBACnCy4G,EAAsB9mI,QAAMquB,EAAa,0BAC/C,OAAIruB,YAAU4zB,IACZizG,EAAG98I,QAAQ6pC,GAET5zB,aAAWs5B,IACbutG,EAAG98I,KAAKsN,kBAAkBiiC,KAExBt5B,aAAWxQ,IACbq3I,EAAG98I,KAAKsN,kBAAkB7H,KAExBwQ,aAAW8mI,IACbD,EAAG98I,KAAK+8I,GAEHD,EAAGp8I,KAAK,IACjB,iDAhCWm8I,GAAa,yEAAbA,GAAazrC,MAAA,uGCkBhBrsG,2BAAA,aAAAA,mBAAA,KAEkCA,mDAclCA,2BAAA,aAAAA,mBAAA,KAEkCA,mDAclCA,2BAAA,aAAAA,mBAAA,KAEkCA,4BCvCtC,MAAOi4I,GAUXp5I,YACSstH,EACAp/G,EACAmrI,EACAC,EACA/nH,EACAgoH,EACAC,EACAzxH,GAPA7nB,KAAAotH,cACAptH,KAAAgO,eACAhO,KAAAm5I,sBACAn5I,KAAAo5I,iBACAp5I,KAAAqxB,sBACArxB,KAAAq5I,sBACAr5I,KAAAs5I,kBACAt5I,KAAA6nB,eAjBF7nB,KAAAw4H,IAAM,IAAI1xC,eAOjB9mF,KAAAqc,aAAe,IAAIvS,eAYjB9J,KAAKif,YACP,CAEAA,aACEjf,KAAKu5I,4BAA8B,IAAIpmI,KAAY,CACjDsnC,UAAW,IAAI01E,cAAY,KAAM,CAC/B98G,WAAY,CAACC,aAAWC,YAE1BmnC,cAAe,IAAIy1E,cAAY,KAAM,CACnC98G,WAAY,CAACC,aAAWC,YAE1BqnC,SAAU,IAAIu1E,cAAY,KAAM,CAC9B98G,WAAY,CAACC,aAAWC,aAG9B,CAEAqd,SACE,MAAM/nB,EAAS7I,KAAKu5I,4BAA4Bj5I,MAChDN,KAAK05C,MAAQ,IAAIvsB,MACjBntB,KAAK05C,MAAMt/C,KAAOyO,EAAO4xC,UACzBz6C,KAAK60C,UAAY,IAAIznB,MACrBptB,KAAK60C,UAAUz6C,KAAOyO,EAAO6xC,cAC7B16C,KAAK60C,UAAUgF,UAAY,GAC3B75C,KAAK25C,KAAO,IAAItsB,MAChBrtB,KAAK25C,KAAKv/C,KAAOyO,EAAO+xC,SACxB56C,KAAK25C,KAAKE,UAAY,GACtB75C,KAAK25C,KAAK8E,WAAa,IAAInxB,MAC3BttB,KAAK25C,KAAK8E,WAAWD,WAAa,GAClCx+C,KAAK25C,KAAK8E,WAAWC,WAAa,GAClC1+C,KAAKs5I,gBACFr0H,OAAOjlB,KAAK05C,OAAO,GACnBtN,YACA5E,KAAK,KACJxnC,KAAKq5I,oBACFp0H,OAAOjlB,KAAK05C,MAAO15C,KAAK60C,WAAW,GAAM,GACzCzI,YACA5E,KAAK,KACJxnC,KAAKo5I,eACFn0H,OAAOjlB,KAAK25C,KAAM35C,KAAK60C,WAAW,GAAM,EAAM70C,KAAK25C,KAAKE,WACxDzN,YACA5E,KAAK,KACJxnC,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,sDAEFxJ,KAAKqc,aAAanS,OAClBlK,KAAKotH,YAAYn0F,OAAK,GAEvBugH,MAAM,KACLx5I,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,gDAA+C,EAElD,EACJ,EAET,iDA7EW0vI,IAAiCj4I,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA,4DAAjCkzH,GAAiC9vI,UAAA,qCAAAmB,QAAA,CAAA8R,aAAA,gBAAA7R,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,uBDlBV5C,oHAehBA,uFAgBAA,4FAgBAA,sFAtBCA,oGAgBAA,oGAgBAA,+kCA3DrBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAIAA,oCAAA,MAMIA,2BALF,cAKEA,CAFe,WAEfA,CADsB,uBAEcA,mBAAA,2EACpCA,2BAEEA,2BADF,WACEA,CAD0B,eAC1BA,mBAAA,MAEsBA,2BACtBA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,GAAAw4I,GAAA,eAIJx4I,6BAEEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAE2BA,2BAC3BA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,GAAAy4I,GAAA,eAIJz4I,6BAEEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEqBA,2BACrBA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,GAAA04I,GAAA,eAKN14I,+BAEEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAmtB,SAAQ,GAGrD3vB,mEAEJA,sEArEUA,uBAAA,WAAAwC,EAAA2pH,aAQAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA81I,6BAkBOt4I,sBAAA,IAAAA,uBAAA,OAAAwC,EAAA81I,4BAAAlpI,UAAA,YAAAqgB,EAAA,aAgBAzvB,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA81I,4BAAAlpI,UAAA,gBAAAqgB,EAAA,aAgBAzvB,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA81I,4BAAAlpI,UAAA,WAAAqgB,EAAA,aAOWzvB,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA81I,oqBExDpBt4I,2BAAA,wBAAAA,wBAAA,KAIEA,2BAAA,WACGA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAAopH,uBAAsB,GACrB34I,2BACfA,2EAEAA,2BAAA,wBAAAA,mBAAA,KAKAA,sDACAA,2BAAA,wBAAAA,mBAAA,KAKAA,qEADEA,8CAAAuvB,EAAAqpH,WAAA54I,CACFuvB,EAAAtjB,KADEjM,CACFuvB,EAAAqpH,WADE54I,CACFuvB,EAAAtjB,yDAEAjM,2BAAA,wBAAAA,wBAAA,KAMsDA,sBAAA,WACtDA,8EAeMA,2BAAA,gBAEEA,mBAAA,GACFA,qDAFQA,uBAAA,QAAA64I,GACN74I,uDAAA,IAAA64I,EAAA,6BAGJ74I,2BAAA,cAAAA,mBAAA,MAEkCA,mDAiBhCA,2BAAA,gBAAAA,mBAAA,MAEuBA,iCADfA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAEuCA,iCAD/BA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAE6CA,iCADrCA,uBAAA,0CAERA,2BAAA,gBACuCA,mBAAA,GAA0BA,qDAAzDA,uBAAA,QAAA84I,EAAAt5G,cAA+Bx/B,sDAAA84I,EAAAt5G,sCAEzCx/B,2BAAA,cAAAA,mBAAA,MAEkCA,4FAxBpCA,2BAFF,YAEEA,CAD0B,eAC1BA,mBAAA,MAG4CA,2BAE1CA,2BADF,YACEA,CAD6B,gBAKrBA,uBAAA,oBAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAwpH,gBAAe,GAU/B/4I,uBATA,EAAAg5I,GAAA,iBASAh5I,CAPa,EAAAi5I,GAAA,iBAObj5I,CAJa,EAAAk5I,GAAA,iBAIbl5I,CADa,EAAAm5I,GAAA,kBAGfn5I,2BACAA,uBAAA,EAAAo5I,GAAA,gBAIJp5I,sGAxBSA,+CAAA,UAAAA,4BAAA,EAAAktD,GAAAltD,4BAAA,EAAAQ,IAAAS,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAQMW,sBAAA,GAAAA,uBAAA,cAAAuvB,EAAAqhH,UAGA5wI,+CAAA,cAAAuvB,EAAAqhH,UAAA,IAAArhH,EAAAqhH,SAAAz2I,QAGA6F,+CAAA,cAAAuvB,EAAAqhH,UAAArhH,EAAAqhH,SAAAz2I,OAAA,GAGmB6F,+CAAA,UAAAuvB,EAAAqhH,UAIvB5wI,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,kBAAAkqI,EAAA,qCAkBLt5I,2BAAA,gBAAAA,mBAAA,MAEuBA,iCADfA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAE2CA,iCADnCA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAEgCA,iCADxBA,uBAAA,0CAERA,2BAAA,gBACiCA,mBAAA,GAAoBA,qDAA7CA,uBAAA,QAAAu5I,EAAAhqG,WAAyBvvC,sDAAAu5I,EAAAhqG,mCAKnCvvC,2BAAA,cAAAA,mBAAA,MAEkCA,4FA1BpCA,2BAFF,YAEEA,CADgE,eAChEA,mBAAA,MAE4BA,2BAE1BA,2BADF,YACEA,CAD6B,gBAKrBA,uBAAA,oBAAAA,0BAAA07E,GAAA,MAAAnsD,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAiqH,mBAAkB,GAUlCx5I,uBATA,EAAAy5I,GAAA,iBASAz5I,CAPa,EAAA05I,GAAA,iBAOb15I,CAJa,EAAA25I,GAAA,iBAIb35I,CADa,EAAA45I,GAAA,kBAGf55I,2BACAA,2BAAA,kBAAAA,mBAAA,OAEAA,2BACAA,uBAAA,GAAA65I,GAAA,gBAIJ75I,sGAnBeA,sBAAA,GAAAA,uBAAA,cAAAuvB,EAAAuqH,UAGA95I,+CAAA,OAAAuvB,EAAAuqH,UAAA,IAAAvqH,EAAAuqH,SAAA3/I,QAGA6F,+CAAA,OAAAuvB,EAAAuqH,UAAAvqH,EAAAuqH,SAAA3/I,OAAA,GAGgB6F,+CAAA,UAAAuvB,EAAAuqH,UAOpB95I,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,OAAAkqI,EAAA,qCAuBPt5I,2BAAA,cAAAA,mBAAA,MAEkCA,4FAflCA,2BAJJ,YAIIA,CAH8D,cAG9DA,CADiB,UACjBA,mBAAA,MACFA,6BAGIA,2BAFJ,YAEIA,CAF2B,YAE3BA,CADuB,eAKhBA,uBAAA,oBAAAA,0BAAA+5I,GAAA,MAAAxqH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAiqH,mBAAkB,GACrCx5I,6BACAA,2BAAA,kBAAAA,mBAAA,MAEAA,2BACAA,uBAAA,EAAAg6I,GAAA,gBAIJh6I,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,wCAeLt5I,2BAAA,cAAAA,mBAAA,MAIAA,sEADWA,8CAAAuvB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,0DAObW,2BAAA,cAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,cAAAA,mBAAA,MAE6CA,mDAC7CA,2BAAA,cAAAA,mBAAA,MAE2GA,sDAtB3GA,2BALJ,YAKIA,CAJoE,cAIpEA,CADsB,UACtBA,mBAAA,MACFA,6BAEEA,2BADF,YACEA,CAD6B,aAE3BA,uBAAA,EAAAi6I,GAAA,gBAKAj6I,sBAAA,eAIFA,2BAOAA,uBANA,EAAAk6I,GAAA,eAMAl6I,CAJW,EAAAm6I,GAAA,eAIXn6I,CADW,GAAAo6I,GAAA,gBAKfp6I,oGA1BSA,+CAAA,UAAAA,4BAAA,EAAAktD,GAAAltD,4BAAA,EAAA2vE,IAAA1uE,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAOIW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,OAAAW,4BAAA,EAAA2vE,IAAA1uE,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,QAUFW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,eAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,uCAgBPt5I,2BAAA,gBAAAA,mBAAA,MAEyCA,sDACzCA,2BAAA,gBAEMA,mBAAA,GACNA,qDAFQA,uBAAA,QAAAq6I,EAAAlhJ,MACF6G,uDAAA,IAAAq6I,EAAAlhJ,KAAA,gCAdR6G,2BAFF,YAEEA,CAD6D,eAC7DA,mBAAA,MAEiBA,2BAEfA,2BADF,YACEA,CAD6B,gBAS7BA,uBAHA,EAAAs6I,GAAA,iBAGAt6I,CADiB,EAAAu6I,GAAA,kBAOrBv6I,yEAVYA,sBAAA,mFACCA,+CAAA,WAAAuvB,EAAAirH,UAAArgJ,QAGiB6F,+CAAA,UAAAuvB,EAAAirH,sCAmBxBx6I,2BAAA,gBAEAA,mBAAA,GACAA,qDAFQA,uBAAA,QAAAy6I,EAAAthJ,MACR6G,uDAAA,IAAAy6I,EAAAthJ,KAAA,gCAXJ6G,2BAFF,YAEEA,CAD6D,eAC7DA,mBAAA,MAEsBA,2BAEpBA,2BADF,YACEA,CAD6B,gBAM3BA,uBAAA,EAAA06I,GAAA,kBAMN16I,yEAPYA,sBAAA,uFACwBA,+CAAA,UAAAuvB,EAAAorH,0CAmB9B36I,2BAAA,gBAEAA,mBAAA,GACAA,qDAFQA,uBAAA,QAAA46I,EAAAzhJ,MACR6G,uDAAA,IAAA46I,EAAAzhJ,KAAA,gCAXJ6G,2BAFF,YAEEA,CAD6D,eAC7DA,mBAAA,MAEgBA,2BAEdA,2BADF,YACEA,CAD6B,gBAM3BA,uBAAA,EAAA66I,GAAA,kBAMN76I,yEAPYA,sBAAA,kFACmBA,+CAAA,UAAAuvB,EAAAurH,2EA2B7B96I,2BAFF,YAEEA,CAD0B,eAC1BA,mBAAA,MAEqBA,2BAEnBA,2BADF,YACEA,CAD6B,gBAIrBA,uBAAA,kBAAA2J,GAAA3J,0BAAA+6I,GAAA,MAAAxrH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAyrH,kBAAArxI,EAAAvD,OAAA/G,OAAsC,GACtDW,2BAAA,gBAAAA,mBAAA,MAC2BA,2BAC3BA,2BAAA,gBAAAA,mBAAA,MAINA,yDAgBIA,2BAAA,cAAAA,mBAAA,MAEkCA,4FAbpCA,2BAFF,YAEEA,CAD0B,eAC1BA,mBAAA,MAEwBA,2BAEtBA,2BADF,YACEA,CAD6B,eAOtBA,uBADA,iBAAA2J,GAAA3J,0BAAAqW,GAAA,MAAAkZ,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAA0rH,WAAAzsI,KAAA7E,EAAAvD,OAAA/G,OAA0C,EACnDW,CADoD,iBAAA2J,GAAA3J,0BAAAqW,GAAA,MAAAkZ,EAAAvvB,4BAAA,OAAAA,wBAC3CuvB,EAAA2rH,WAAA1sI,KAAA7E,EAAAvD,OAAA/G,OAA0C,GAN1DW,2BAOAA,uBAAA,EAAAm7I,GAAA,gBAIJn7I,sGAPWA,sBAAA,GAAAA,uBAAA,eAAAuvB,EAAA6rH,cAIAp7I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,QAAAkqI,EAAA,wCAQTt5I,2BAFF,YAEEA,CAD0B,eAC1BA,mBAAA,MAEiBA,2BACjBA,2BAAA,aACEA,sBAAA,0BAMJA,uEALsBA,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAA8pH,YAAAlpI,SAAA20B,MAAAzlC,MAEAW,CAFyC,UAAAuvB,EAAAuV,MAAA7iC,QAEzCjC,CADyB,WAAAuvB,EAAAuV,MAAAlP,kCAoB3C51B,2BAAA,cAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,MAEkDA,sDAdlDA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADiB,UACjBA,mBAAA,MACFA,6BACAA,2BAAA,aACEA,sBAAA,eAKAA,2BAAA,kBAAAA,mBAAA,MAA0DA,2BAI1DA,uBAHA,EAAAq7I,GAAA,eAGAr7I,CADW,EAAAs7I,GAAA,gBAKft7I,oGANWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,QAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,QAAAkqI,EAAA,oCAmBLt5I,2BAAA,cAAAA,mBAAA,MAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,MAEyCA,sDArB/CA,oCAAA,GAGIA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEmCA,2BACnCA,2BAAA,aACEA,sBAAA,eAYAA,uBANA,EAAAu7I,GAAA,eAMAv7I,CAJW,EAAAw7I,GAAA,eAIXx7I,CADW,EAAAy7I,GAAA,gBAKfz7I,wIATWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,oBAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,oBAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,oBAAAkqI,EAAA,gCAkBPt5I,2BAAA,gBAAAA,mBAAA,MAEuBA,iCADfA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAEqCA,iCAD7BA,uBAAA,uCAERA,2BAAA,gBAAAA,mBAAA,MAEgCA,iCADxBA,uBAAA,0CAERA,2BAAA,gBACiCA,mBAAA,GAAoBA,qDAA7CA,uBAAA,QAAA07I,EAAAnsG,WAAyBvvC,sDAAA07I,EAAAnsG,mCAEnCvvC,2BAAA,cAAAA,mBAAA,MAEkCA,sDAtBpCA,2BAFF,YAEEA,CAD+D,eAC/DA,mBAAA,MAEsBA,2BAEpBA,2BADF,YACEA,CAD6B,gBAc3BA,uBATA,EAAA27I,GAAA,iBASA37I,CAPa,EAAA47I,GAAA,iBAOb57I,CAJa,EAAA67I,GAAA,iBAIb77I,CADa,EAAA87I,GAAA,kBAGf97I,2BACAA,uBAAA,EAAA+7I,GAAA,gBAIJ/7I,oGAhBeA,sBAAA,GAAAA,uBAAA,cAAAuvB,EAAAquB,OAGA59C,+CAAA,OAAAuvB,EAAAquB,OAAA,IAAAruB,EAAAquB,MAAAzjD,QAGA6F,+CAAA,OAAAuvB,EAAAquB,OAAAruB,EAAAquB,MAAAzjD,OAAA,GAGgB6F,+CAAA,UAAAuvB,EAAAquB,OAIpB59C,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,OAAAkqI,EAAA,qCAsCLt5I,2BAAA,cAAAA,mBAAA,MAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,MAEyCA,mDAezCA,2BAAA,cAAAA,mBAAA,MAEkCA,mDAuBhCA,2BAAA,cAAAA,mBAAA,MAEkCA,sDAlF1CA,oCAAA,GAKMA,2BAHJ,YAGIA,CAHwB,cAGxBA,CAD2B,UAC3BA,mBAAA,MAAsBA,2BAEpBA,2BADF,cACEA,CADS,UACTA,mBAAA,MAAgDA,2BAChDA,sBAAA,QACAA,2BAAA,UAAAA,wBAAA,OAA0BA,sBAAA,QAAqFA,wBAEnHA,+BACAA,2BAAA,cACEA,sBAAA,gBAKJA,6BAIEA,2BADF,aACEA,CAD0B,gBAC1BA,mBAAA,OAE0BA,2BAC1BA,2BAAA,cACEA,sBAAA,gBAYAA,uBANA,GAAAg8I,GAAA,eAMAh8I,CAJW,GAAAi8I,GAAA,eAIXj8I,CADW,GAAAk8I,GAAA,gBAKfl8I,6BAIEA,2BADF,aACEA,CAD0B,gBAC1BA,mBAAA,OAG0BA,2BAC1BA,2BAAA,cACEA,sBAAA,gBAIAA,uBAAA,GAAAm8I,GAAA,gBAIJn8I,6BAIEA,2BADF,aACEA,CAD0B,gBAC1BA,mBAAA,OAGkCA,2BAEhCA,2BADF,aACEA,CAD6B,cAW3BA,sBATA,eASAA,CALsC,gBAKtCA,CADS,qCAGTA,uBAAA,GAAAo8I,GAAA,gBAKNp8I,0IApDWA,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,QASFt5I,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAktD,GAAAltD,4BAAA,EAAAq8I,IAAAp7I,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAQEW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,aASFt5I,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAktD,GAAAltD,4BAAA,GAAAq8I,IAAAp7I,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAgBIW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,qCA0BTt5I,2BAAA,cAAAA,mBAAA,MAEkCA,mDAmBlCA,2BAAA,cAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,cAAAA,mBAAA,MAEkGA,sDAclGA,2BAAA,aAEEA,sBAAA,eAKAA,2BAAA,eAAAA,mBAAA,MAIFA,uDAPSA,0DAAA,OAAAs8I,GACAt8I,kCAAA,KAAAs8I,GACAt8I,kCAAA,kBAAAs8I,GAEAt8I,0DAAA,MAAAs8I,GACKt8I,8CAAAs8I,yDAnEpBt8I,oCAAA,GAEIA,2BADF,YACEA,CAD0B,eAC1BA,wBAAA,MAIEA,2BAAA,eACEA,sBAAA,UAEFA,2BACFA,mDACAA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,EAAAu8I,GAAA,gBAIJv8I,6BAKIA,2BAHJ,YAGIA,CAHwB,eAGxBA,CADsB,WACtBA,mBAAA,OAAqBA,2BACrBA,2BAAA,gBAAAA,mBAAA,OAGFA,6BACAA,2BAAA,cACEA,sBAAA,gBASAA,uBAHA,GAAAw8I,GAAA,eAGAx8I,CADW,GAAAy8I,GAAA,gBAKfz8I,6BAIEA,2BAFF,aAEEA,CAD4B,gBAC5BA,wBAAA,OAGEA,2BAAA,gBACEA,sBAAA,WACFA,2BACFA,mDACAA,2BAAA,cACEA,uBAAA,GAAA08I,GAAA,eAaJ18I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADsB,WACtBA,mBAAA,OAAqBA,2BACrBA,2BAAA,gBAAAA,wBAAA,OAGEA,sBAFA,UAEAA,CAF0C,QAE1CA,CADI,WAENA,wBACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAOJA,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADwB,WACxBA,mBAAA,OAAuBA,2BACvBA,2BAAA,gBAAAA,wBAAA,OAGEA,sBAFA,UAEAA,CAF0C,QAE1CA,CADI,WAENA,wBACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAOJA,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADwB,WACxBA,mBAAA,OAAuBA,2BACvBA,2BAAA,gBAAAA,wBAAA,OAGEA,sBAFA,UAEAA,CAF0C,QAE1CA,CADI,WAINA,wBACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAOJA,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CAD8B,WAC9BA,mBAAA,OAAqBA,2BACrBA,2BAAA,gBAAAA,wBAAA,OAGEA,sBAFA,UAEAA,CAFgD,QAEhDA,CADI,WAENA,wBACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAOJA,wIAtIWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,aAqBAt5I,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,qBAgBkBt5I,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAotH,yCAmHzB38I,2BAAA,cAAAA,mBAAA,MAEkCA,mDAqBlCA,2BAAA,cAAAA,mBAAA,MAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,MAEyCA,mDACzCA,2BAAA,cAAAA,mBAAA,MAEkCA,mDAqBlCA,2BAAA,cAAAA,mBAAA,MAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,MAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,MAEyCA,mDACzCA,2BAAA,cAAAA,mBAAA,MAEkCA,mDAQlCA,2BAJJ,YAIIA,CAH+C,cAG/CA,CADsC,UACtCA,mBAAA,MAAwBA,2BAEtBA,2BADF,cACEA,CADS,UACTA,mBAAA,MAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAKJA,wDArGFA,oCAAA,GAMMA,2BAJJ,YAIIA,CAJwB,cAIxBA,CADsB,UACtBA,mBAAA,MAAqBA,2BAEnBA,2BADF,cACEA,CADS,UACTA,mBAAA,MAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAIAA,uBAAA,GAAA48I,GAAA,gBAIJ58I,6BAOIA,2BAJJ,aAIIA,CAJwB,eAIxBA,CADyB,WACzBA,mBAAA,OAAwBA,2BAEtBA,2BADF,eACEA,CADS,WACTA,mBAAA,OAEJA,+BACAA,2BAAA,cACEA,sBAAA,gBAeAA,uBATA,GAAA68I,GAAA,eASA78I,CAPW,GAAA88I,GAAA,eAOX98I,CAJW,GAAA+8I,GAAA,eAIX/8I,CADW,GAAAg9I,GAAA,gBAKfh9I,6BAOIA,2BAJJ,aAIIA,CAJwB,eAIxBA,CADwB,WACxBA,mBAAA,OAAuBA,2BAErBA,2BADF,eACEA,CADS,WACTA,mBAAA,OAEJA,+BACAA,2BAAA,cACEA,sBAAA,gBAeAA,uBATA,GAAAi9I,GAAA,eASAj9I,CAPW,GAAAk9I,GAAA,eAOXl9I,CAJW,GAAAm9I,GAAA,eAIXn9I,CADW,GAAAo9I,GAAA,gBAKfp9I,6BAEAA,uBAAA,GAAAq9I,GAAA,0HAlFSr9I,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAktD,GAAAltD,4BAAA,GAAAQ,IAAAS,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAaEW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,aAQFt5I,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAktD,GAAAltD,4BAAA,GAAAQ,IAAAS,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAeEW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,aAQFt5I,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAktD,GAAAltD,4BAAA,GAAAQ,IAAAS,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,SAeEW,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,aAMLt5I,+CAAA,QAAAuvB,EAAA8pH,YAAAlpI,SAAAmtI,UAAAj+I,kCAgCAW,2BAAA,gBAC8BA,mBAAA,GAAiBA,qDAAvCA,uBAAA,QAAAu9I,GAAsBv9I,sDAAAu9I,2BAEhCv9I,2BAAA,cAAAA,mBAAA,OAEkCA,mDAiBlCA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAClCA,2BAAA,cAAAA,wBAAA,OAEiDA,sBAAA,YAA8BA,2EAkB/EA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAClCA,2BAAA,cAAAA,wBAAA,OAEiDA,sBAAA,YAAgHA,8EAfjKA,2BAJJ,YAIIA,CAH0D,cAG1DA,CADqB,UACrBA,mBAAA,OAAoBA,2BAElBA,2BADF,cACEA,CADS,UACTA,mBAAA,OAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAOAA,uBAHA,EAAAw9I,GAAA,eAGAx9I,CADW,GAAAy9I,GAAA,gBAKfz9I,qGANWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,YAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,YAAAkqI,EAAA,mDAiBLt5I,2BAAA,gBAEEA,mBAAA,GACFA,qDAFQA,uBAAA,QAAA09I,GACN19I,uDAAA,IAAA09I,EAAA,6BAGJ19I,2BAAA,cAAAA,mBAAA,OAEkCA,sDAjBpCA,2BAFF,YAEEA,CAD4D,eAC5DA,mBAAA,OAEyBA,2BAMrBA,2BALJ,YAKIA,CAL2B,eAK3BA,CADsC,gBACtCA,mBAAA,OACmDA,2BACnDA,uBAAA,EAAA29I,GAAA,kBAIF39I,2BACAA,uBAAA,EAAA49I,GAAA,gBAIJ59I,qGAVcA,sBAAA,GAAAA,uBAAA,gBACyBA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAA69I,KAM5B79I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,wCAiBLt5I,2BAAA,gBAEEA,mBAAA,GACFA,qDAFQA,uBAAA,QAAA89I,GACN99I,uDAAA,IAAA89I,EAAA,6BAZN99I,2BAFF,YAEEA,CAD4D,eAC5DA,mBAAA,OAE4BA,2BAMxBA,2BALJ,YAKIA,CAL2B,eAK3BA,CADyC,gBACzCA,mBAAA,OACsDA,2BACtDA,uBAAA,EAAA+9I,GAAA,kBAMN/9I,sCAPcA,sBAAA,GAAAA,uBAAA,gBAC4BA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAg+I,6BAsBpCh+I,2BAAA,cAAAA,mBAAA,OAEkCA,sDATlCA,2BAJJ,YAIIA,CAH2D,cAG3DA,CAD0B,UAC1BA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,eAIAA,uBAAA,EAAAi+I,GAAA,gBAIJj+I,qGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,iBAAAkqI,EAAA,qCAgBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,sDATlCA,2BAJJ,YAIIA,CAH0D,cAG1DA,CADiC,UACjCA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,eAIAA,uBAAA,EAAAk+I,GAAA,gBAIJl+I,qGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,wBAAAkqI,EAAA,qCAgBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,sDATlCA,2BAJJ,YAIIA,CAH0D,cAG1DA,CADiC,UACjCA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,eAIAA,uBAAA,EAAAm+I,GAAA,gBAIJn+I,qGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,wBAAAkqI,EAAA,qCAgBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,sDATlCA,2BAJJ,YAIIA,CAH+K,cAG/KA,CADiC,UACjCA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,eAIAA,uBAAA,EAAAo+I,GAAA,gBAIJp+I,qGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,wBAAAkqI,EAAA,8EAjLft5I,oCAAA,GAGIA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEmBA,2BAEjBA,2BADF,YACEA,CAD6B,gBAKrBA,uBAAA,oBAAAA,0BAAAq+I,GAAA,MAAA9uH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAA+uH,mBAAkB,GAClCt+I,2BAAA,gBAAAA,mBAAA,MACkDA,2BAClDA,uBAAA,EAAAu+I,GAAA,kBAEFv+I,2BACAA,uBAAA,EAAAw+I,GAAA,gBAIJx+I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CAD4B,WAC5BA,mBAAA,OAAsBA,2BAEpBA,2BADF,eACEA,CADS,WACTA,mBAAA,QAEJA,+BACAA,2BAAA,cACEA,sBAAA,gBAOAA,uBAHA,GAAAy+I,GAAA,eAGAz+I,CADW,GAAA0+I,GAAA,gBAKf1+I,6BAgDAA,uBA9CA,GAAA2+I,GAAA,eA8CA3+I,CA7C8D,GAAA4+I,GAAA,cA6C9D5+I,CAtB8D,GAAA6+I,GAAA,eA2C5D7+I,2BADF,cACEA,CADQ,aACRA,mBAAA,QAAwBA,2BAqDxBA,uBAnDA,GAAA8+I,GAAA,cAmDA9+I,CAlD+D,GAAA++I,GAAA,cAkD/D/+I,CAjC8D,GAAAg/I,GAAA,cAiC9Dh/I,CAhB8D,GAAAi/I,GAAA,eAgChEj/I,wIAxKcA,sBAAA,GAAAA,uBAAA,gBACwBA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAm8H,KAI3Bn8H,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,aAmBAt5I,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,mBAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,mBAAAkqI,EAAA,2BAMLt5I,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAuBAW,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAuBAW,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAuBEW,sBAAA,GAAAA,uBAAA,eAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAiBAW,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAiBAW,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAiBAW,+CAAA,cAAAuvB,EAAA8pH,YAAAlpI,SAAA+uI,aAAA7/I,OAAA,OAAAkwB,EAAA8pH,YAAAlpI,SAAAgvI,iBAAA9/I,YAAAs5B,IAAApJ,EAAA8pH,YAAAlpI,SAAAgvI,iBAAA9/I,+BAkCJW,2BAAA,cAAAA,mBAAA,OAEkCA,mDAgBlCA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAyBlCA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAgBlCA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAClCA,2BAAA,cAAAA,mBAAA,OAEuBA,mDAgBvBA,2BAAA,cAAAA,mBAAA,OAE6EA,sDArGnFA,oCAAA,GAKMA,2BAHJ,YAGIA,CAHwB,cAGxBA,CADiC,UACjCA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,eAMAA,2BAAA,kBAAAA,mBAAA,OAA8EA,2BAC9EA,uBAAA,EAAAo/I,GAAA,gBAIJp/I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADqB,WACrBA,mBAAA,QACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,2BAAA,mBAAAA,mBAAA,QAAiEA,2BACjEA,uBAAA,GAAAq/I,GAAA,gBAIJr/I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADyB,WACzBA,mBAAA,QACFA,6BAEEA,2BADF,aACEA,CAD6B,cAE3BA,sBAAA,gBAIAA,2BAAA,eAKEA,sBAJA,gBAIAA,CADS,qCAIbA,6BACAA,2BAAA,mBAAAA,mBAAA,QAAqEA,2BACrEA,uBAAA,GAAAs/I,GAAA,gBAIJt/I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CAD2B,WAC3BA,mBAAA,QACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,2BAAA,mBAAAA,mBAAA,QAA+DA,2BAI/DA,uBAHA,GAAAu/I,GAAA,eAGAv/I,CADW,GAAAw/I,GAAA,gBAKfx/I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADyB,WACzBA,mBAAA,QACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,2BAAA,mBAAAA,mBAAA,QAA2EA,2BAC3EA,uBAAA,GAAAy/I,GAAA,gBAIJz/I,6BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CADwB,WACxBA,mBAAA,QACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,2BAAA,mBAAAA,mBAAA,QAEJA,+BAKIA,2BAHJ,aAGIA,CAHwB,eAGxBA,CAD6B,WAC7BA,mBAAA,QACFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,2BAAA,mBAAAA,mBAAA,QAEJA,0IArHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,wBAAAkqI,EAAA,aAkBAt5I,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,YAAAkqI,EAAA,aA2BAt5I,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,aAkBAt5I,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,kBAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,kBAAAkqI,EAAA,aAkBAt5I,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,gBAAAkqI,EAAA,2CAiDPt5I,2BAAA,cAAAA,mBAAA,OAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,OAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,OAEyCA,mDAqD3CA,2BAAA,cAAAA,mBAAA,OAEoHA,sDA5ExHA,oCAAA,GAGIA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,OAEsBA,2BACtBA,2BAAA,aACEA,sBAAA,eAYAA,uBANA,EAAA0/I,GAAA,eAMA1/I,CAJW,EAAA2/I,GAAA,eAIX3/I,CADW,EAAA4/I,GAAA,gBAKf5/I,6BAIIA,2BAFJ,YAEIA,CAFmB,cAEnBA,CADQ,gBACRA,mBAAA,QAE0BA,2BACxBA,2BAAA,uBAIAA,mBAAA,eACAA,2BAAA,mBAAAA,mBAAA,QAKNA,iCAGEA,2BADF,aACEA,CADqB,wBACrBA,wBAAA,QAYEA,sBAAA,wBACFA,wBACFA,6BAKEA,2BAHF,aAGEA,CAH0B,eAG1BA,CADuB,WACvBA,mBAAA,QACFA,6BAEEA,2BADF,aACEA,CAD6B,cAE3BA,sBAAA,gBAKFA,2BACAA,2BAAA,mBAAAA,wBAAA,QAA6CA,sBAAA,YACmEA,mDAChHA,uBAAA,GAAA6/I,GAAA,gBAIJ7/I,wIAhEaA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,OAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,OAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,OAAAkqI,EAAA,QA+BMt5I,sBAAA,IACAA,uBADA,kBACAA,CADqB,QAAAuvB,EAAAuwH,mBAwB7B9/I,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,cAAAkqI,EAAA,2CAQTt5I,oCAAA,GAGMA,2BAFJ,YAEIA,CAFwB,YAExBA,CAD8B,aAE5BA,sBAAA,eAIAA,2BAAA,eAAAA,mBAAA,OAKNA,6FAkBEA,2BAAA,cAAAA,mBAAA,OAEkCA,mDAClCA,2BAAA,cAAAA,mBAAA,OAEmCA,4FAhBnCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADoB,UACpBA,mBAAA,OAAsBA,2BACtBA,2BAAA,eAAAA,mBAAA,OACFA,6BAEEA,2BADF,YACEA,CAD6B,kBAK7BA,mBAAA,oBAAAA,2BACAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAA+/I,GAAA,MAAAxwH,EAAAvvB,0BAAA,UAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,YAAW,GAD5Dh1E,2BAKAA,uBAHA,GAAAigJ,GAAA,eAGAjgJ,CADW,GAAAkgJ,GAAA,gBAKflgJ,uGANWA,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,WAAAkqI,EAAA,oCAqBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,mDAClCA,2BAAA,cAAAA,mBAAA,OAEmCA,4FAhBnCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADmB,UACnBA,mBAAA,OAAsBA,2BACtBA,2BAAA,eAAAA,mBAAA,OACFA,6BAEEA,2BADF,YACEA,CAD6B,kBAK7BA,mBAAA,oBAAAA,2BACAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAAmgJ,GAAA,MAAA5wH,EAAAvvB,0BAAA,UAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAA+B,WAAU,GAD1Dh1E,2BAKAA,uBAHA,GAAAogJ,GAAA,eAGApgJ,CADW,GAAAqgJ,GAAA,gBAKfrgJ,uGANWA,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,UAAAkqI,EAAA,aAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,UAAAkqI,EAAA,uCA9Dbt5I,oCAAA,GA2CEA,uBAzCA,EAAAsgJ,GAAA,uBAyCAtgJ,CAzC0F,EAAAugJ,GAAA,eAyC1FvgJ,CAxB4B,EAAAwgJ,GAAA,8FAjBbxgJ,+CAAA,QAAAA,4BAAA,EAAAyI,IAAAxH,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,QAgBTW,+CAAA,OAAAuvB,EAAA8pH,YAAAlpI,SAAAq4B,IAAAnpC,OAAAW,4BAAA,EAAAyI,IAAAxH,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,QAyBAW,+CAAA,OAAAuvB,EAAA8pH,YAAAlpI,SAAAq4B,IAAAnpC,QAAAW,4BAAA,EAAAygJ,IAAAx/I,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,QAAAW,4BAAA,EAAAyI,IAAAxH,SAAAsuB,EAAA8pH,YAAAlpI,SAAA2a,aAAAzrB,gCAyCFW,2BAAA,cAAAA,mBAAA,OAEkDA,mDAClDA,2BAAA,cAAAA,mBAAA,OAEwCA,mDACxCA,2BAAA,cAAAA,mBAAA,OAEyCA,mDACzCA,2BAAA,cAAAA,mBAAA,OAEkCA,sDA3BxCA,oCAAA,GAIMA,2BAHJ,YAGIA,CAHwB,cAGxBA,CADwB,UACxBA,mBAAA,OAAuBA,2BAErBA,2BADF,cACEA,CADS,UACTA,mBAAA,OAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAeAA,uBATA,GAAA0gJ,GAAA,eASA1gJ,CAPW,GAAA2gJ,GAAA,eAOX3gJ,CAJW,GAAA4gJ,GAAA,eAIX5gJ,CADW,GAAA6gJ,GAAA,gBAKf7gJ,6BAGEA,2BADF,aACEA,CAD0B,gBAC1BA,wBAAA,QAIEA,sBADA,UACAA,CAD6B,gBAE/BA,mDAEEA,2BADF,aACEA,CAD6B,cAE3BA,sBAAA,gBAMAA,2BAAA,eAKEA,sBAJA,gBAIAA,CADS,qCAMjBA,4IAvCWA,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,YAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,QAGAt5I,+CAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,aAkBEt5I,sBAAA,iFAejBA,2BAAA,wBAAAA,mBAAA,OAKAA,mDAOMA,2BAHJ,YAGIA,CAF8D,YAE9DA,CAD8B,aAE5BA,sBAAA,eAIAA,2BAAA,eAAAA,mBAAA,OAEsBA,2BACtBA,2BAAA,kBAAAA,mBAAA,OAGNA,yDAgBIA,2BAAA,cAAAA,mBAAA,OAEkCA,4FAXlCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADwB,UACxBA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,kBAIAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAAq/E,GAAA,MAAA9vD,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,gBAAe,GADhEh1E,2BAEAA,uBAAA,EAAA8gJ,GAAA,gBAIJ9gJ,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,eAAAkqI,EAAA,qCAmBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,4FAXlCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADuB,UACvBA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,kBAIAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAA+gJ,GAAA,MAAAxxH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,eAAc,GAD/Dh1E,2BAEAA,uBAAA,EAAAghJ,GAAA,gBAIJhhJ,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,cAAAkqI,EAAA,qCAmBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,4FAXlCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADsB,UACtBA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,kBAIAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAAihJ,GAAA,MAAA1xH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,cAAa,GAD9Dh1E,2BAEAA,uBAAA,EAAAkhJ,GAAA,gBAIJlhJ,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,qCAmBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,4FAXlCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADuB,UACvBA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,kBAIAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAAmhJ,GAAA,MAAA5xH,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,eAAc,GAD/Dh1E,2BAEAA,uBAAA,EAAAohJ,GAAA,gBAIJphJ,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,cAAAkqI,EAAA,qCAmBPt5I,2BAAA,cAAAA,mBAAA,OAEkCA,4FAXlCA,2BAJJ,YAIIA,CAHwB,cAGxBA,CADsB,UACtBA,mBAAA,OACFA,6BACAA,2BAAA,aACEA,sBAAA,kBAIAA,2BAAA,eACOA,uBAAA,kBAAA2J,GAAA3J,0BAAA8/E,GAAA,MAAAvwD,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAAywH,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,cAAa,GAD9Dh1E,2BAEAA,uBAAA,EAAAqhJ,GAAA,gBAIJrhJ,sGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA8pH,YAAAjqI,UAAA,aAAAkqI,EAAA,cCt0Cb,MAAOgI,WAA6BhlI,KA+DxCzd,YACSkO,EACCw0I,EACA1kI,EACA2kI,EACAC,EACAC,EACApuI,EACAquI,EACDj7G,EACAk7G,EACAvJ,EACAD,GACAD,GACAD,GACCz7H,GACD0vG,GACAvlG,IAEPxZ,QAlBOrO,KAAAgO,eACChO,KAAAwiJ,qBACAxiJ,KAAA8d,cACA9d,KAAAyiJ,cACAziJ,KAAA0iJ,cACA1iJ,KAAA2iJ,aACA3iJ,KAAAuU,SACAvU,KAAA4iJ,qBACD5iJ,KAAA2nC,eACA3nC,KAAA6iJ,uBACA7iJ,KAAAs5I,kBACAt5I,KAAAq5I,uBACAr5I,KAAAo5I,kBACAp5I,KAAAm5I,uBACCn5I,KAAA0d,SACD1d,KAAAotH,eACAptH,KAAA6nB,gBA/EF7nB,KAAAw4H,IAAM,IAAI1xC,eAER9mF,KAAA8iJ,mBAAqB,+BACrB9iJ,KAAA+iJ,yBAA2B,gBAC3B/iJ,KAAAgjJ,uBAAyB,uBACzBhjJ,KAAAijJ,gCAAkC,CAAC,MAAO,OAC1CjjJ,KAAAkjJ,uBAAyB,+CACzBljJ,KAAAmjJ,0BAA4B,yEAC5BnjJ,KAAAojJ,oBAAsB,oBACtBpjJ,KAAAqjJ,0BAA4B,CAAC,CAAEnpJ,QAAS,UAAWolE,UAAU,IAI7Dt/D,KAAAsjJ,eAA2B,GAE3BtjJ,KAAAowB,SAAU,EASnBpwB,KAAAujJ,aAAyB,GACzBvjJ,KAAAwjJ,WAAuB,GAGvBxjJ,KAAAm8I,WAAa,IAAI51G,UACjBvmC,KAAAk8I,WAAa,IAAI31G,UAGjBvmC,KAAA6xI,SAAmC,GAGnC7xI,KAAAyjJ,cAA0B,GAC1BzjJ,KAAAo8C,eAAiB,GACjBp8C,KAAA2hD,mBAAqB,GACrB3hD,KAAA8/C,cAAgB,GAChB9/C,KAAAy7I,UAAwB,GACxBz7I,KAAA47I,cAAgC,GAChC57I,KAAA+7I,SAAsB,GAGtB/7I,KAAA0jJ,uBAAwB,EAKxB1jJ,KAAA49I,gBAAkB,CAAC,UAEnB59I,KAAAkN,KAAe,IACflN,KAAA+gJ,kBAAqC9uI,OAAOpJ,OAAOulE,MAAelxE,IAAK0pB,MACrE1sB,QAAS0sB,GACT04C,UAAU,KAEZt/D,KAAA2jJ,gBAAmC1xI,OAAOpJ,OAAOwlE,MAAanxE,IAAK0mJ,MACjE1pJ,QAAS0pJ,GACTtkF,UAAU,KAEZt/D,KAAA6jJ,wBAAkC,EA4+BlC7jJ,KAAAq8I,aAAgB/9H,OACPwlI,SACLxlI,GAAMtP,QAAKuP,gBAAa,MAAG,EAAGC,2BAC9Bxe,KAAKk8I,WACLl8I,KAAKm8I,WAAWntI,QAAKqV,UAAO,KAAOrkB,KAAK+jJ,UAAUC,iBAClDh1I,QACA9R,OAAKoD,IACHN,KAAKU,OACF2jB,OAAQ1iB,IAAkBA,GAAM4iB,cAAcxoB,QAAQuE,GAAMikB,gBAAiB,GAC7ErpB,MAAM,EAAG,MA/9BhB8E,KAAKuc,SAAW/S,mBAChBxJ,KAAK+lC,MAAQ,CACX7iC,QAAS,GACT2zB,SAAU,IAAIC,KAAe,CAC3BC,MAAOvtB,+BACP6a,OAAQ7a,2BAGZxJ,KAAKif,YACP,CAEAA,aACEjf,KAAKs6I,YAAct6I,KAAK8d,YAAYqZ,MAAM,CAExCpL,aAAc,CAAC,KAAM,CAACzY,aAAWC,WACjCyY,WAAY,CACV,KACA,CACElK,MAAasyC,UACX,CACEroC,aAAc,OAEhB,CACEzY,aAAWC,SACXuO,MAAaC,OAAO,aAAezhB,IAC7B6R,YAAU7R,KAGNN,KAAK8iJ,mBAAmB5kJ,KAAKoC,MAI3CwhB,MAAaG,WAAW,CACtB8J,aAAc,QAEhBjK,MAAaG,WAAW,CACtB8J,aAAc,UAEhBjK,MAAaG,WAAW,CACtB8J,aAAc,WAEhBjK,MAAaG,WAAW,CACtB8J,aAAc,YAEhBjK,MAAaG,WAAW,CACtB8J,aAAc,QAEhBjK,MAAasyC,UACX,CACEroC,aAAc,OAEhB,CAACzY,aAAWC,WAEduO,MAAaC,OAAO,aAAeiK,GAC1BhsB,KAAKwjJ,YAAcxjJ,KAAKwjJ,WAAWthJ,SAAS8pB,MAIzDi4H,UAAW,CAAC,SACZtiJ,MAAO,CACL,KACA,CACEmgB,MAAaG,WAAW,CACtBgiI,UAAW,QACX1F,WAAW,MAIjBx4G,MAAO,CAAC,IACR0F,MAAO,CAAC,KAAM,CAAC3pB,MAAai/E,QAAO,KACnCw9C,UAAW,EAAC,GAGZz/H,KAAM,CACJ,KACA,CACEgD,MAAaG,WAAW,CACtB8J,aAAc,UAEhBjK,MAAaG,WAAW,CACtB8J,aAAc,aAIpBoL,MAAO,CACL,UACArV,MAAaG,WAAW,CACtB8J,aAAc,YAGlBm4H,YAAa,EAAC,GACdC,aAAc,CACZ,KACA,CACEriI,MAAasyC,UACX,CACEroC,aAAc,SACdm4H,aAAa,GAEf,CAAC5wI,aAAWC,aAIlB6wI,YAAa,CACX,KACA,CACEtiI,MAAasyC,UACX,CACEroC,aAAc,SACdm4H,aAAa,GAEf,CAAC5wI,aAAWC,aAIlB8wI,WAAY,CACV,KACA,CACEviI,MAAasyC,UACX,CACEroC,aAAc,SACdm4H,aAAa,GAEf,CAAC5wI,aAAWC,aAIlB+wI,YAAa,CACX,KACA,CACExiI,MAAasyC,UACX,CACEroC,aAAc,SACdm4H,aAAa,GAEf,CAAC5wI,aAAWC,aAIlBgxI,WAAY,CACV,KACA,CACEziI,MAAasyC,UACX,CACEroC,aAAc,SACdm4H,aAAa,GAEf,CAAC5wI,aAAWC,aAKlBixI,kBAAmB,CAAC,KAAM,CAAC1iI,MAAai/E,QAAO,KAC/C9nD,WAAY,CAAC,MACbC,eAAgB,CAAC,MACjBC,UAAW,CAAC,MAEZsrG,gBAAiB,CAAC,MAClBC,SAAU,CAAC,KAAM,CAAC5iI,MAAai/E,QAAO,KACtC4jD,SAAU,CACR,KACA,CACE7iI,MAAaG,WAAW,CACtB8J,aAAc,QACdwyH,WAAW,MAIjBqG,aAAc,CACZ,KACA,CACE9iI,MAAaG,WAAW,CACtB8J,aAAc,QACdwyH,WAAW,MAKjBlqI,WAAY,CACV,KACA,CACEyN,MAAaG,WAAW,CACtB8J,aAAc,UAIpBlF,SAAU,IAAI1T,KACZnT,KAAK49I,gBAAgBj1I,OAAO,CAACk8I,EAAah4D,KACxCg4D,EAAIh4D,GAAK,IAAIz5E,sBAAmB,GACzByxI,GACN,KAELC,WAAY,CACV,KACA,CACEhjI,MAAasyC,UACX,CACEroC,aAAc,OAEhB,CACEzY,aAAWC,SACXuO,MAAaC,OAAO,mBAAqBzhB,IACnC6R,YAAU7R,KAGNN,KAAKkjJ,uBAAuBhlJ,KAAKoC,QAMnDykJ,WAAY,CAAC,MACbC,aAAc,CAAC,MACfC,aAAc,CAAC,MACfC,mBAAoB,CAAC,MAErBC,gBAAiB,CACf,KACA,CACErjI,MAAaG,WAAW,CACtB8J,aAAc,cAIpB9e,WAAY,CACV,KACA,CACE6U,MAAaG,WAAW,CACtB8J,aAAc,cAIpBq5H,cAAe,CACb,KACA,CACEtjI,MAAai/E,QAAO,GACpBj/E,MAAaG,WAAW,CACtB8J,aAAc,cAIpBs5H,aAAc,CACZ,KACA,CACEvjI,MAAai/E,QAAO,GACpBj/E,MAAaG,WAAW,CACtB8J,aAAc,cAIpBu5H,2BAA4B,CAAC,MAC7BC,cAAe,CAACvlJ,KAAKqjJ,2BACrBmC,YAAa,CACX,KACA,CACE1jI,MAAaC,OAAO,iBAAmB0jI,IACjCtzI,YAAUszI,KAGNzlJ,KAAKojJ,oBAAoBllJ,KAAKunJ,MAK5Ch8G,IAAK,EAAC,GACNi8G,SAAU,CACR,GACA,CACE5jI,MAAasyC,UACX,CACEroC,aAAc,MACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAas/E,YAErCt/E,MAAasyC,UACX,CACEroC,aAAc,QACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAao/E,YAErCp/E,MAAasyC,UACX,CACEroC,aAAc,UACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAas/E,YAErCt/E,MAAasyC,UACX,CACEroC,aAAc,eACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAao/E,YAErCp/E,MAAasyC,UACX,CACEroC,aAAc,eACdwyH,WAAW,EACX90G,KAAK,GAEP,CAAC3nB,MAAao/E,cAIpBykD,QAAS,CACP,GACA,CACE7jI,MAAasyC,UACX,CACEroC,aAAc,QACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAaq/E,eAErCr/E,MAAasyC,UACX,CACEroC,aAAc,eACdwyH,WAAW,EACX90G,KAAK,GAEP,CAACn2B,aAAWC,SAAUuO,MAAaq/E,eAErCr/E,MAAasyC,UACX,CACEroC,aAAc,eACdwyH,WAAW,EACX90G,KAAK,GAEP,CAAC3nB,MAAaq/E,iBAKpBykD,YAAa,CAAC,MACd14I,KAAM,CAAC,IAAK,CAAC4U,MAAai/E,QAAO,KAEjCo/C,aAAc,CACZ,KACA,CACEr+H,MAAaG,WAAW,CACtB8J,aAAc,mBAIpB85H,iBAAkB,CAChB,KACA,CACExyI,WAAY,CACVyO,MAAaG,WAAW,CACtB8J,aAAc,iBAEhBjK,MAAaC,OAAO,yBAA2BzhB,IACzC6R,YAAU7R,KAGNN,KAAK+iJ,yBAAyB7kJ,KAAKoC,OAKnDwlJ,UAAW,CACT,KACA,CACEhkI,MAAaG,WAAW,CACtB8J,aAAc,iBAEhBjK,MAAaC,OAAO,sBAAwBzhB,IACtC6R,YAAU7R,KAGNN,KAAKgjJ,uBAAuB9kJ,KAAKoC,MAI/CylJ,cAAe,CACb,MACA,CACEjkI,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBq0H,iBAAkB,CAAC,MACnB4F,eAAgB,CACd,KACA,CACElkI,MAAaG,WAAW,CACtBk+H,aAAc,UAIpB8F,sBAAuB,CACrB,KACA,CACEnkI,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBm6H,sBAAuB,CACrB,KACA,CACEpkI,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBo6H,sBAAuB,CACrB,KACA,CACErkI,MAAaG,WAAW,CACtBm+H,iBAAkB,CAAE5+C,GAAI,cAI9B4kD,aAAc,CAAC,KAAM,CAACtkI,MAAai/E,QAAO,KAC1CslD,uBAAwB,CAAC,MAEzBC,sBAAuB,CACrB,mBACA,CACExkI,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBygG,UAAW,CACT,KACA,CACE1qG,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBw6H,cAAe,CACb,KACA,CACEzkI,MAAaG,WAAW,CACtB8J,aAAc,mBAIpBy6H,gBAAiB,CACf,KACA,CACE1kI,MAAaG,WAAW,CACtB8J,aAAc,iBAEhBjK,MAAaC,OAAO,WAAa/C,IAC3B7M,YAAU6M,KAGNhf,KAAKmjJ,0BAA0BjlJ,KAAK8gB,MAIlDynI,cAAe,CAAC,KAAM,CAAC3kI,MAAa4iF,qBACpC9kE,aAAc,CAAC,MACf8mH,kBAAmB,CAAC,OAExB,CAEAC,eACM3mJ,KAAKuU,OAAOyK,IAAI9c,SAAS,2BAC3BlC,KAAKw9D,QAAU,WACfx9D,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IACvBA,GAAQrZ,OACVnG,KAAK6sB,YAAcrN,EAAOrZ,KAC1BnG,KAAKs6I,YAAY5nI,IAAI,gBAAgBiN,SAAS3f,KAAK6sB,aAAW,IAGzD7sB,KAAKuU,OAAOyK,IAAI9c,SAAS,0BAClClC,KAAKowB,SAAU,EACfpwB,KAAKw9D,QAAU,WACfx9D,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAKkgC,YAAc1gB,EAAOplB,KAC1B4F,KAAK6sB,YAAcrN,EAAOrZ,OAGhC,CAEAsI,WACEzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK2mJ,eAEL3mJ,KAAKwiJ,mBACF9+H,KAAK,IAAI+hB,aAAW,CAAEsQ,WAAY,CAAE8vC,OAAO,EAAIsE,OAAQ,MACvDtkD,WAAWl3B,UAAWkjI,IACrB7xI,KAAK4mJ,YAAc/U,EACnB7xI,KAAK6xI,SAAWA,EAASxtH,OAAQ8hG,GAC/BnmH,KAAKijJ,gCAAgC/gJ,SAASikH,EAAQp6F,cAAa,GAIzE/rB,KAAKwiJ,mBAAmB5hH,gBAAgBjyB,UAAWgb,IAIjD3pB,KAAKsjJ,eAAepnJ,KAAK,MAAO,aAEhC8D,KAAKujJ,aAAepxI,eAAawX,EAAM3pB,KAAKsjJ,gBAAgBz7I,MAAI,GAElE7H,KAAKyiJ,YAAYx8G,cAAct3B,UAAWgb,IACxC,MAAMzmB,EAA0B,GAChCiP,YAAUwX,EAAO2a,IACf,GAAInyB,QAAMmyB,EAAM,wBAAwB,GAAQ,CAC9C,MAAMwM,EAAS,IAAIuuB,MAAa,EAAOltD,QAAMmyB,EAAM,YAAa,IAChEphC,EAAQhH,KAAK40C,EACf,IAEF9wC,KAAK+lC,MAAM7iC,QAAU,IAAIA,EAAO,GAElClD,KAAKyiJ,YAAY19G,YAAYp2B,UAAWgb,IACtC3pB,KAAKU,OAASipB,IAEhB3pB,KAAK0iJ,YAAY32G,UAAUp9B,UAAWgb,IACpC3pB,KAAK6+C,MAAQl1B,EACb3pB,KAAK+6I,SAAW/6I,KAAK6+C,MAAMx6B,OAAOrkB,KAAK2iJ,WAAWryG,YAC7CtwC,KAAKowB,SAAWpwB,KAAK6sB,aACxB7sB,KAAK6mJ,oBAAoB7mJ,KAAK6sB,YAAW,GAIzC7sB,KAAKowB,UACPpwB,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAK8mJ,kBAAkB9mJ,KAAK6sB,aAC5B7sB,KAAKwiJ,mBACF9+H,KAAK,IAAI+hB,aAAW,CAAEsQ,WAAY,CAAE8vC,OAAO,EAAIsE,OAAQ,KAAQnqF,KAAKkgC,aACpE2F,WAAWl3B,UAAW0pB,IAKrB,GAJiB,CAAC,eAAgB,aAAc,aACvCrxB,QAASkL,IAChBlS,KAAKs6I,YAAY5nI,IAAIR,GAAMyN,SAAS0Y,EAAS,GAAGnmB,GAAK,IAElDmmB,EAAS,GAAGkmH,UAAc,CAC7B,MAAMwI,EAAe90I,OAAOC,KAAKmmB,EAAS,GAAG4rH,WAAc,GAC3D,IAAI+C,EAECA,EADL,CAAC,QAAS,SAASjrJ,QAAQgrJ,IAAiB,EACtBA,EACA,QACtB/mJ,KAAKs6I,YAAY5nI,IAAI,aAAaiN,SAASqnI,GAC3ChnJ,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS0Y,EAAS,GAAG4rH,UAAax4G,OAC5DpT,EAAS,IAAI4rH,UAAU+C,IACzBhnJ,KAAKs6I,YAAY5nI,IAAIs0I,GAAgBrnI,SAAS0Y,EAAS,IAAI4rH,UAAU+C,GAEzE,CACA,OAAQhnJ,KAAK6sB,aACX,IAAK,QACc,CAAC,OAAQ,eAAgB,WAAY,kBAAmB,YAChE7lB,QAASub,IAChBviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,GAAI,GAE1DviB,KAAKs6I,YAAY5nI,IAAI,OAAOiN,SAAS0Y,EAAS,GAAG2+G,MAAMiQ,YACnD5uH,EAAS,GAAG2+G,MAAMiQ,aACpBjnJ,KAAKs6I,YAAY5nI,IAAI,YAAYiN,SAAS0Y,EAAS,GAAG2+G,MAAM0O,UAC5D1lJ,KAAKs6I,YAAY5nI,IAAI,WAAWiN,SAAS0Y,EAAS,GAAG2+G,MAAM2O,UAE7D,MACF,IAAK,SACH3lJ,KAAKs6I,YAAY5nI,IAAI,QAAQiN,SAAS0Y,EAAS,GAAG2+G,KAAKl4H,MACvD9e,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS0Y,EAAS,GAAG2+G,KAAK7/G,OACxDn3B,KAAKs6I,YAAY5nI,IAAI,eAAeiN,SAAS0Y,EAAS,GAAG2+G,MAAM4O,aAC/D5lJ,KAAKs6I,YAAY5nI,IAAI,gBAAgBiN,SAAS0Y,EAAS,GAAG2+G,MAAMmN,cAChEnkJ,KAAKs6I,YAAY5nI,IAAI,eAAeiN,SAAS0Y,EAAS,GAAG2+G,MAAMoN,aAC/DpkJ,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS0Y,EAAS,GAAG2+G,MAAMqN,YAC9DrkJ,KAAKs6I,YAAY5nI,IAAI,eAAeiN,SAAS0Y,EAAS,GAAG2+G,MAAMsN,aAC/DtkJ,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS0Y,EAAS,GAAG2+G,MAAMuN,YAC9D,MACF,IAAK,MACHvkJ,KAAKs6I,YACF5nI,IAAI,qBACJiN,SAAS0Y,EAAS,GAAG2+G,MAAMwN,mBAC9BxkJ,KAAKknJ,aACH7uH,EAAS,GAAG2+G,MAAMmQ,UAClB9uH,EAAS,GAAG2+G,MAAMoQ,cAClB/uH,EAAS,GAAG2+G,MAAMqQ,UAEpBrnJ,KAAKs6I,YAAY5nI,IAAI,OAAOiN,SAAS0Y,EAAS,GAAG2+G,MAAMvtG,KACnDpR,EAAS,GAAG2+G,MAAMvtG,KACpBzpC,KAAKs6I,YACF5nI,IAAI,YACJiN,SAAS0Y,EAAS,GAAG2+G,MAAMsQ,8BAEhC,MACF,IAAK,UACqB,CACtB,kBACA,aACA,gBACA,eACA,6BACA,OAEctgJ,QAASub,IACvBviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,GAAI,GAEtD8V,EAAS,GAAG2+G,MAAMvtG,MACpBzpC,KAAKs6I,YAAY5nI,IAAI,YAAYiN,SAAS0Y,EAAS,GAAG2+G,MAAM0O,UAC5D1lJ,KAAKs6I,YAAY5nI,IAAI,WAAWiN,SAAS0Y,EAAS,GAAG2+G,MAAM2O,UAE7D,MACF,IAAK,eACH,IAAI4B,EAAe7nH,OAAOC,SAAS6nH,KAAK7qJ,MAAM,KAI9C,GAHAqD,KAAK65I,WAAa0N,EAAa,GAAKA,EAAa,GACjDvnJ,KAAKkN,KAAOmrB,EAAS,GAAG2+G,MAAM9pI,KAE1BmrB,EAAS,GAAG2+G,MAAMuO,cAAe,CACnC,IAAIkC,EAAkC,GACtC,UAAWnnJ,KAAS+3B,EAAS,GAAG2+G,KAAKuO,cACnCkC,EAAevrJ,KAAK,CAAEhC,QAASoG,EAAOg/D,UAAU,IAElDt/D,KAAKs6I,YAAY5nI,IAAI,iBAAiBiN,SAAS8nI,EACjD,CACIpvH,EAAS,GAAG2+G,MAAMwO,aACpBxlJ,KAAKs6I,YACF5nI,IAAI,eACJiN,SAAS0Y,EAAS,GAAG2+G,MAAMwO,YAAY5oJ,KAAK,MAE7Cy7B,EAAS,GAAG2+G,MAAM0O,UACpB1lJ,KAAKs6I,YAAY5nI,IAAI,YAAYiN,SAAS0Y,EAAS,GAAG2+G,KAAK0O,UAEzDrtH,EAAS,GAAG2+G,MAAM2O,SACpB3lJ,KAAKs6I,YAAY5nI,IAAI,WAAWiN,SAAS0Y,EAAS,GAAG2+G,KAAK2O,SAExDttH,EAAS,GAAG2+G,MAAM4O,aACpB5lJ,KAAKs6I,YAAY5nI,IAAI,eAAeiN,SAAS0Y,EAAS,GAAG2+G,KAAK4O,aAE5DvtH,EAAS,GAAG2+G,MAAM9pI,MACpBlN,KAAKs6I,YAAY5nI,IAAI,QAAQiN,SAAS0Y,EAAS,GAAG2+G,KAAK9pI,MAEzD,MACF,IAAK,MACiB,CAClB,aACA,aACA,WACA,eACA,eACA,aACA,sBAEUlG,QAASub,IACP,aAARA,EACE8V,EAAS,GAAG2+G,MAAMnwH,UACpBwR,EAAS,GAAG2+G,KAAKnwH,SAAS7f,QAASqkC,IACjCrrC,KAAKs6I,YAAY5nI,IAAI,YAAY24B,KAAW1rB,UAAS,EAAI,GAI7D3f,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,GAAI,GAG5D,MACF,IAAK,eACwB,CAAC,eAAgB,oBACzBvb,QAASub,IAC1BviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,GAAI,GAER,OAA9CviB,KAAKs6I,YAAY3pI,SAAS,gBACL,CACrB,YACA,gBACA,mBACA,wBACA,wBACA,yBAEa3J,QAASub,IACV,OAARA,IAEQ,0BAARA,GACQ,0BAARA,GACQ,0BAARA,EAEAviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAK33G,YAAe9c,IAEnEviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,IAAI,GAK9DviB,KAAKs6I,YACF5nI,IAAI,kBACJiN,SAAS0Y,EAAS,GAAG2+G,KAAK33G,YAAe2mH,gBAE9C,MACF,IAAK,UACHhmJ,KAAKs6I,YAAY5nI,IAAI,gBAAgBiN,SAAS0Y,EAAS,GAAG2+G,KAAK9pI,MAC/DlN,KAAKs6I,YACF5nI,IAAI,0BACJiN,SAAS0Y,EAAS,GAAG2+G,KAAK0Q,wBAC7B,MACF,IAAK,eACoB,CACrB,gBACA,wBACA,YACA,gBACA,kBACA,eACA,qBAEa1gJ,QAASub,IACtBviB,KAAKs6I,YAAY5nI,IAAI6P,GAAK5C,SAAS0Y,EAAS,GAAG2+G,KAAKz0H,GAAI,GAEtD8V,EAAS,GAAG2+G,MAAMvtG,MACpBzpC,KAAKs6I,YAAY5nI,IAAI,YAAYiN,SAAS0Y,EAAS,GAAG2+G,MAAM0O,UAC5D1lJ,KAAKs6I,YAAY5nI,IAAI,WAAWiN,SAAS0Y,EAAS,GAAG2+G,MAAM2O,UAEjE,IAGN3lJ,KAAK2pF,eACP,CAEAA,gBACE,MAAM59D,EAAe/rB,KAAKs6I,YAAY5nI,IAAI,gBACtCqZ,GACFA,EAAa4sC,aAAahqD,UAAWrO,IACnC,GAAc,iBAAVA,EAA0B,CAC5B,MAAM4M,EAAOlN,KAAKs6I,YAAY5nI,IAAI,QAC9BxF,GACFA,EAAKyrD,aAAahqD,UAAWwD,IAC3BnS,KAAK6jJ,wBAAyB,IAGlC,MAAM0B,EAAgBvlJ,KAAKs6I,YAAY5nI,IAAI,iBACvC6yI,GACFA,EAAc5sF,aAAahqD,UAAWwD,IACpCnS,KAAK6jJ,wBAAyB,IAGlC,MAAM2B,EAAcxlJ,KAAKs6I,YAAY5nI,IAAI,eACrC8yI,GACFA,EAAY7sF,aAAahqD,UAAWwD,IAClCnS,KAAK6jJ,wBAAyB,GAGpC,GAGN,CAEA8D,0BACEvrG,EACAuF,EACA7B,GAEA,MAAMhE,EAAe97C,KAAKy7I,UAAU5oI,KAAM7T,GAAsBA,EAAEorB,KAAOgyB,GACnE6E,EAAmBjhD,KAAK47I,cAAc/oI,KACzC7T,GAAsBA,EAAEorB,KAAOu3B,GAE5BrD,EAAct+C,KAAK+7I,SAASlpI,KAAM7T,GAAsBA,EAAEorB,KAAO01B,GACjE8nG,OAAoChuH,IAAjBkiB,EAA6BA,EAAa1hD,KAAO,KACpEytJ,OAA4CjuH,IAArBqnB,EAAiCA,EAAiB7mD,KAAO,UAChF0tJ,OAAkCluH,IAAhB0kB,EAA4BA,EAAYlkD,KAAO,UACvE,GAA6B,YAAzBytJ,IAAuC7nJ,KAAK+nJ,eAAe7lJ,SAAS2lJ,GAAuB,CAC7F,MAAM5mG,EAAmB,IAAI7zB,MAC7B6zB,EAAiB7mD,KAAO,UACxB4F,KAAK47I,cAAc1/I,KAAK+kD,EAC1B,CACA,GAAwB,YAApB6mG,IAAkC9nJ,KAAKugD,UAAUr+C,SAAS4lJ,GAAkB,CAC9E,MAAMxpG,EAAc,IAAIjxB,MACxBixB,EAAYlkD,KAAO,UACnB4F,KAAK+7I,SAAS7/I,KAAKoiD,EACrB,CACA,MAAO,CACLspG,iBAAkBA,EAClBC,qBAAsBA,EACtBC,gBAAiBA,EAErB,CAEAE,yBAAyBn7H,GAIvB,OAAQA,GACN,IAAK,MACH7sB,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS,GACvC,MACF,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,UACL,IAAK,aACH3f,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS,GACvC,MACF,IAAK,QACL,IAAK,gBACL,IAAK,MACL,IAAK,UACL,IAAK,eACL,IAAK,aACL,IAAK,OACL,IAAK,YACL,IAAK,eACL,IAAK,iBACL,IAAK,mBACL,IAAK,eACL,IAAK,MACL,IAAK,eACL,IAAK,eACH3f,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS,GACvC,MACF,QACE3f,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS,MAE7C,CAEAunI,aAAajuG,EAAqBC,EAAyBC,GACzD,MAAMvnB,EAAc,CAClB5xB,KAAKs5I,gBAAgBp9F,mBACrBl8C,KAAKq5I,oBAAoB53F,uBACzBzhD,KAAKo5I,eAAez6F,mBAEtB3+C,KAAKw4H,OAAMp4G,YAASwR,GAAajjB,UAC9B80I,IA+BC,GA9BAzjJ,KAAKyjJ,cAAgBA,EACrBzjJ,KAAKy7I,eACuB7hH,IAA1B55B,KAAKyjJ,cAAc,IAAoBzjJ,KAAKyjJ,cAAc,GAAG73G,eAAe,UACxE5rC,KAAKyjJ,cAAc,GAAGxgI,OACtB,GACNjjB,KAAK47I,mBACuBhiH,IAA1B55B,KAAKyjJ,cAAc,IAAoBzjJ,KAAKyjJ,cAAc,GAAG73G,eAAe,cACxE5rC,KAAKyjJ,cAAc,GAAGwE,WACtB,GACNjoJ,KAAK+7I,cACuBniH,IAA1B55B,KAAKyjJ,cAAc,IAAoBzjJ,KAAKyjJ,cAAc,GAAG73G,eAAe,SACxE5rC,KAAKyjJ,cAAc,GAAG1jG,MACtB,GACN//C,KAAKkoJ,WAAaloJ,KAAKy7I,UAAUv+I,IAAKw8C,GAC7BA,EAAMt/C,MAEf4F,KAAK+nJ,eAAiB/nJ,KAAK47I,cAAc1+I,IAAK23C,GACrCA,EAAUz6C,MAEnB4F,KAAKugD,UAAYvgD,KAAK+7I,SAAS7+I,IAAKy8C,GAC3BA,EAAKv/C,MAEd4F,KAAKo8C,eAAiBqnG,EAAc,GAAG0E,cACvCnoJ,KAAK2hD,mBAAqB8hG,EAAc,GAAG2E,kBAC3CpoJ,KAAK8/C,cAAgB2jG,EAAc,GAAG4E,aACtCroJ,KAAKsoJ,aAAetoJ,KAAK2nJ,0BACvB3nJ,KAAKo8C,eACLp8C,KAAK2hD,mBACL3hD,KAAK8/C,eAEF9/C,KAAKowB,QAMH,CACL,GAAI6oB,IAAej5C,KAAKkoJ,WAAWhmJ,SAAS+2C,GAAa,CACvD,MAAMS,EAAQ,IAAIvsB,MAClBusB,EAAMt/C,KAAO6+C,EACbj5C,KAAKy7I,UAAUv/I,KAAKw9C,EACtB,CACA,GAAIR,IAAmBl5C,KAAK+nJ,eAAe7lJ,SAASg3C,GAAiB,CACnE,MAAMrE,EAAY,IAAIznB,MACtBynB,EAAUz6C,KAAO8+C,EACjBl5C,KAAK47I,cAAc1/I,KAAK24C,EAC1B,CACA,GAAIsE,IAAcn5C,KAAKugD,UAAUr+C,SAASi3C,GAAY,CACpD,MAAMQ,EAAO,IAAItsB,MACjBssB,EAAKv/C,KAAO++C,EACZn5C,KAAK+7I,SAAS7/I,KAAKy9C,EACrB,MACuB/f,IAAnBsf,QAA8Ctf,IAAduf,IAClCD,EAAiB,UACjBC,EAAY,WAEdn5C,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAASs5B,GAC5Cj5C,KAAKs6I,YAAY5nI,IAAI,kBAAkBiN,SAASu5B,GAChDl5C,KAAKs6I,YAAY5nI,IAAI,aAAaiN,SAASw5B,EAC7C,MA5BEn5C,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS3f,KAAKsoJ,aAAaV,kBAC9D5nJ,KAAKs6I,YACF5nI,IAAI,kBACJiN,SAAS3f,KAAKsoJ,aAAaT,sBAC9B7nJ,KAAKs6I,YAAY5nI,IAAI,aAAaiN,SAAS3f,KAAKsoJ,aAAaR,iBAyBjC,IAA1B9nJ,KAAKy7I,UAAUrgJ,OACjB4E,KAAK0jJ,uBAAwB,EAE7B1jJ,KAAK0jJ,uBAAwB,GAGhC6E,IACC,MAAMjqG,EAAc,IAAIjxB,MACxBixB,EAAYlkD,KAAO,UACnB,MAAM6mD,EAAmB,IAAI7zB,MAC7B6zB,EAAiB7mD,KAAO,UACxB4F,KAAK+7I,SAAS7/I,KAAKoiD,GACnBt+C,KAAK47I,cAAc1/I,KAAK+kD,EAAgB,EAG9C,CAEAw5F,mBACE,MAAM37H,EAAO9e,KAAKs6I,YAAY5nI,IAAI,QAAQpS,MACpC62B,EAAQn3B,KAAKs6I,YAAY5nI,IAAI,SAASpS,MACxCwe,GAAQqY,EACVn3B,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS,GAAGb,KAAQqY,KAC9CrY,EACT9e,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAASb,GACnCqY,EACTn3B,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAASwX,GAE5Cn3B,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS,KAEhD,CAEA6oI,qBACE,MAAMC,EACJzoJ,KAAK+6I,UAAUloI,KAAMlV,GAA4B,QAAhBA,EAAE6yC,YAAsBA,WACzDxwC,KAAK+6I,WAAW,GAAGvqG,UACrBxwC,KAAKs6I,YAAY5nI,IAAI,QAAQiN,SAAS8oI,EACxC,CAEAC,kBAAkB77H,GAChB,MAAO,CAAC,MAAO,MAAO,MAAO,QAAS,SAAU,MAAO,WAAW3qB,SAAS2qB,EAC7E,CAEA87H,aAAa77H,GACX,MAAM47H,EAA6B1oJ,KAAK0oJ,kBAAkB57H,GACtD47H,GAAmC,WAAd57H,GACvB9sB,KAAKwoJ,qBACLxoJ,KAAKy6I,oBACIiO,EACT1oJ,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAAS,MAE5C3f,KAAKs6I,YAAY5nI,IAAI,cAAciN,SAASmN,EAEhD,CAEA+5H,oBAAoB+B,GAYlB,GAXA5oJ,KAAK2oJ,aAAaC,GAElB5oJ,KAAKwjJ,WAAaxjJ,KAAK4mJ,aACnBviI,OAAQ8hG,GAAYA,EAAQp6F,eAAoB68H,GACjD1rJ,IAAKipH,GAAYA,EAAQn6F,YAE5BhsB,KAAKgoJ,yBAAyBY,GAEF,QAAxBA,GACF5oJ,KAAKknJ,eAEqB,iBAAxB0B,EAAwC,CAC1C,IAAIrB,EAAe7nH,OAAOC,SAAS6nH,KAAK7qJ,MAAM,KAC9CqD,KAAK65I,WAAa0N,EAAa,GAAKA,EAAa,GAEjDvnJ,KAAKs6I,YAAY5nI,IAAI,SAASuN,SAChC,MACEjgB,KAAKs6I,YAAY5nI,IAAI,SAAS+Q,QAElC,CAEAw4H,kBAAkB38E,GACC,UAAbA,GACFt/D,KAAKs6I,YAAY5nI,IAAI,SAASiN,SAAS,KAE3C,CAEAmnI,kBAAkBj6H,GAKhB,OAJ2B,CAAC,eAAgB,cACzB7lB,QAASub,IAC1BviB,KAAKs6I,YAAY5nI,IAAI6P,GAAKtC,SAAO,GAE3B4M,GACN,IAAK,UACH7sB,KAAKs6I,YAAY5nI,IAAI,mBAAmBuN,UACxC,MACF,IAAK,SACHjgB,KAAKs6I,YAAY5nI,IAAI,QAAQuN,UAC7BjgB,KAAKs6I,YAAY5nI,IAAI,SAASuN,UAGpC,CAgBAghI,WAAWhrE,EAAiBgqB,GAC1B,MAAMgG,EAAahwB,EAAM,GACnB4yE,EAAS,IAAI1iD,WACnB0iD,EAAOC,iBAAiB,OAASj2F,IAC/B,MAAMj/C,EAA2B5T,KAAKs6I,YAAY5nI,IAAIutF,GACtDrsF,EAAQ+L,SAASkzC,EAAMxrD,OAAOxL,QAC9B+X,EAAQqQ,cACRrQ,EAAQsjF,gBACRtjF,EAAQiO,wBAAsB,GAEhCgnI,EAAOxiD,WAAWJ,EAAM,OAC1B,CAEA+zC,gBACE,MAAMpmI,EAA2B5T,KAAKs6I,YAAY5nI,IAAI,cAChDq2I,EAAiB/oJ,KAAKs6I,YAAY3pI,SAAS,mBAEjDiD,EAAQ2W,MAAM,CAAEjqB,MAAOyoJ,EAAgBx+G,UAAU,GACnD,CAEAxW,WACE,MAAMi1H,EAAOhpJ,KACP6I,EAAiB7I,KAAKs6I,YAAY2O,cAClCp8H,EAAsBhkB,EAAOkjB,aACnC,IAAIm9H,EAAU,WAAW7qH,KAASne,SAC9BlgB,KAAKowB,UACP84H,EAAU,WAAW7qH,KAAS9e,QAEhC,MAAMihB,EAAsB,CAC1BzU,aAAcc,EACdo3H,UAAW,GACX1F,UAAW11I,EAAO01I,WAEA,QAAhB1xH,IACF2T,EAAY2mH,UAAet+I,EAAOowC,WAAgBpwC,EAAOowC,WAAgB,KACzEzY,EAAY4mH,cACmB,YAA7Bv+I,EAAOqwC,eAAkCrwC,EAAOqwC,eAAoB,KACtE1Y,EAAY6mH,SAAsC,YAAxBx+I,EAAOswC,UAA6BtwC,EAAOswC,UAAe,MAGtF,MAAMrsB,EAAoBjkB,EAAOmjB,WACjC,IAAIkU,EAAsBrT,EAQ1B,OAPI1a,aAAW2a,KAAe3a,YAAU2a,IAAcA,IAAcD,IAClEqT,EAAc,GAAGrT,KAAeC,IAChC0T,EAAYxU,WAAgBc,GAKtBD,GACN,IAAK,UACH2T,EAAY2kH,gBAAqBt8I,EAAOs8I,gBACxC3kH,EAAYxU,WAAgBnjB,EAAOs8I,gBAC/BhzI,aAAWtJ,EAAOu8I,gBAAqBv8I,EAAOu8I,cAAmB,IACnE5kH,EAAY4kH,cAAmBv8I,EAAOu8I,eAEpCjzI,aAAWtJ,EAAOoE,cAAmBkF,YAAUtJ,EAAOoE,cACxDuzB,EAAYvzB,WAAgBpE,EAAOoE,WAAcuiB,QAE/Crd,aAAWtJ,EAAOw8I,eAAoBx8I,EAAOw8I,aAAkB,IACjE7kH,EAAY6kH,aAAkBx8I,EAAOw8I,cAEvC,MAEF,IAAK,SACH7kH,EAAY1hB,KAAUjW,EAAOiW,KAC7B0hB,EAAYrJ,MAAWtuB,EAAOsuB,MAC9BqJ,EAAYolH,YAAiB/8I,EAAOq7I,YAChCr7I,EAAOq7I,cACT1jH,EAAY2jH,aAAkBt7I,EAAOs7I,aACrC3jH,EAAY4jH,YAAiBv7I,EAAOu7I,YACpC5jH,EAAY6jH,WAAgBx7I,EAAOw7I,WACnC7jH,EAAY8jH,YAAiBz7I,EAAOy7I,YACpC9jH,EAAY+jH,WAAgB17I,EAAO07I,YAErC,MACF,IAAK,QACH/jH,EAAY1hB,KAAUjW,EAAOiW,KAC7B,MAEF,IAAK,MACH0hB,EAAYnsB,WAAgBxL,EAAOwL,YAAemb,OAClDgR,EAAYskH,WAAgBj8I,EAAOi8I,YAAet1H,OAClD,UAAW6b,KAAWxiC,EAAOge,SACvBhe,EAAOge,SAAYwkB,KACpB7K,EAAY3Z,SAAc2Z,EAAY3Z,UAAe,IAAI3qB,KAAKmvC,GAGnE7K,EAAYukH,WAAgBl8I,EAAOk8I,YAAev1H,OAClDgR,EAAYwkH,aAAkBn8I,EAAOm8I,cAAiBx1H,OACtDgR,EAAYykH,aAAkBp8I,EAAOo8I,cAAiBz1H,OACtDgR,EAAY0kH,mBAAwBr8I,EAAOq8I,oBAAuB11H,OAClE,MAEF,IAAK,eACHgR,EAAYnB,YAAiB,GAC7BmB,EAAY2/G,aAAkBt3I,EAAOs3I,aACrC3/G,EAAYqlH,iBAAsBh9I,EAAOg9I,iBACV,OAA3Bh9I,EAAOs3I,cACT3/G,EAAYslH,UAAej9I,EAAOi9I,UAClCtlH,EAAYulH,cAAmBl9I,EAAOk9I,cACtCvlH,EAAYnB,YAAe4mH,sBAA2Bp9I,EAAOo9I,sBAC7DzlH,EAAYnB,YAAe6mH,sBAA2Br9I,EAAOq9I,sBAC1B,OAA/Br9I,EAAOu3I,mBACT5/G,EAAY4/G,iBAAsBv3I,EAAOu3I,iBACzC5/G,EAAYnB,YAAe8mH,sBAA2Bt9I,EAAOs9I,wBAG/D3lH,EAAYnB,YAAe2mH,eAAoBn9I,EAAOm9I,eAK5D,IAAKn9I,EAAO01I,UAAc,CACxB,OAAQ11I,EAAOo7I,WACb,IAAK,QACCp7I,EAAOk9B,MAAS3qC,OAAS,IAC3BolC,EAAYyjH,UAAal+G,MAAWl9B,EAAOk9B,OAE7C,MACF,IAAK,QACHvF,EAAYyjH,UAAatiJ,MAAWkH,EAAOlH,MAM/C,OAHIwQ,aAAWtJ,EAAO4iC,QAAa5iC,EAAO4iC,MAAW,IACnDjL,EAAYyjH,UAAax4G,MAAW5iC,EAAO4iC,OAErC5e,GACN,IAAK,MACC1a,aAAWtJ,EAAO27I,oBAAyB37I,EAAO27I,kBAAuB,IAC3EhkH,EAAYgkH,kBAAuB37I,EAAO27I,mBAE5ChkH,EAAYiJ,IAAS5gC,EAAO4gC,IACxB5gC,EAAO4gC,MACTjJ,EAAY8mH,6BAAkCz+I,EAAO68I,UAAal2H,QAEpE,MACF,IAAK,QACCrd,aAAWtJ,EAAO47I,mBAAwBtyI,YAAUtJ,EAAO47I,mBAC7DjkH,EAAYikH,gBAAqB57I,EAAO47I,gBAAmBj1H,QAEzDrd,aAAWtJ,EAAO67I,WAAgB77I,EAAO67I,SAAc,IACzDlkH,EAAYkkH,SAAc77I,EAAO67I,UAEnClkH,EAAYmkH,SAAc97I,EAAO87I,SACjCnkH,EAAYokH,aAAkB/7I,EAAO+7I,aACrCpkH,EAAYymH,WAAgBp+I,EAAO4gC,IAC/B5gC,EAAO4gC,MACTjJ,EAAYklH,SAAc78I,EAAO68I,UAAal2H,OAC9CgR,EAAYmlH,QAAa98I,EAAO88I,SAAYn2H,QAE9C,MACF,IAAK,UACHgR,EAAYiJ,IAAS5gC,EAAO4gC,IACxB5gC,EAAO4gC,MACTjJ,EAAYklH,SAAc78I,EAAO68I,UAAal2H,OAC9CgR,EAAYmlH,QAAa98I,EAAO88I,SAAYn2H,QAE9CgR,EAAY8kH,2BAAgCz8I,EAAOy8I,2BACnD,MACF,IAAK,eAUH,GATA9kH,EAAYklH,SAAc78I,EAAO68I,UAAal2H,OAC9CgR,EAAYmlH,QAAa98I,EAAO88I,SAAYn2H,OAC5CgR,EAAYolH,YAAiB/8I,EAAO+8I,YACpCplH,EAAYtzB,KAAUrE,EAAOqE,KACA,MAAzBszB,EAAYtzB,aAEPszB,EAAYtzB,KAErBszB,EAAY+kH,cAAmB,GAC3B18I,EAAO08I,eAAoBvlJ,KAAKqjJ,0BAClC,UAAW9gI,KAAOtQ,OAAOC,KAAKrJ,EAAO08I,eACnC/kH,EAAY+kH,cAAiBrpJ,KAAK2M,EAAO08I,cAAiBhjI,GAAKroB,SAGnEsmC,EAAYglH,YAAiB38I,EAAO28I,aAAgBh2H,OAAO7yB,MAAM,KACjE,MACF,IAAK,UACH6jC,EAAYtzB,KAAUrE,EAAOu9I,aAC7B5lH,EAAYknH,uBAA4B7+I,EAAOw9I,uBAC/C,MACF,IAAK,eACH7lH,EAAY8lH,sBAA2Bz9I,EAAOy9I,uBAA0B92H,OACxEgR,EAAYgsF,UAAe3jH,EAAO2jH,WAAch9F,OAChDgR,EAAY+lH,cAAmB19I,EAAO09I,eAAkB/2H,OACxDgR,EAAYgmH,gBAAqB39I,EAAO29I,iBAAoBh3H,OAC5DgR,EAAYimH,cAAmB59I,EAAO49I,eAAkBj3H,OACxDgR,EAAYZ,aAAkB/2B,EAAO+2B,cAAiBpQ,OACtDgR,EAAYkmH,kBAAuB79I,EAAO69I,kBACvC/pJ,MAAM,KACNO,IAAKw7G,GACGA,EAAOlpF,QAEd3mB,EAAO4gC,MACTjJ,EAAYklH,SAAc78I,EAAO68I,UAAal2H,OAC9CgR,EAAYmlH,QAAa98I,EAAO88I,SAAYn2H,QAIpD,CACAxvB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAamkI,EAAS,CAC9BzoH,aAAcP,IAEhBlb,KAAMhlB,KAAKowB,QACPpwB,KAAKwiJ,mBAAmBz6I,OAAOy4B,GAC/BxgC,KAAKwiJ,mBAAmBv9H,OAAOub,KAEpC7xB,UAAU,CACT4S,QACEynI,EAAK1O,YAAY/0H,UAAU,CAAEE,gBAAgB,GAC/C,EACAL,SAAUA,KACS,aAAjBplB,KAAKw9D,QACDx9D,KAAKuU,OAAOC,SAAS,CAACxU,KAAKw9D,QAAS,CAAE/oD,QAAS,CAAEC,MAAO,SACxD1U,KAAKotH,YAAYn0F,OAAK,GAGlC,CAEAsmH,mBACE,MAAM4J,EAAcnpJ,KAAKs6I,YAAY3pI,SAAS,gBACxCy4I,EAAkBppJ,KAAKs6I,YAAY3pI,SAAS,oBAC9B,OAAhBw4I,EACFnpJ,KAAKs6I,YAAY5nI,IAAI,kBAAkBkP,mBAEvC5hB,KAAKs6I,YAAY5nI,IAAI,aAAakP,kBAClC5hB,KAAKs6I,YAAY5nI,IAAI,iBAAiBkP,kBACtC5hB,KAAKs6I,YAAY5nI,IAAI,oBAAoBkP,kBACzC5hB,KAAKs6I,YAAY5nI,IAAI,yBAAyBkP,kBAC9C5hB,KAAKs6I,YAAY5nI,IAAI,yBAAyBkP,mBAExB,OAApBwnI,GACFppJ,KAAKs6I,YAAY5nI,IAAI,yBAAyBkP,iBAElD,CAEAg4H,uBACE55I,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKquH,GAAmC,CAC1E7+I,KAAM,OAER2F,KAAKqpJ,WAAW51H,kBAAkBpX,aAAa1N,UAAU,KACvD3O,KAAKknJ,cAAY,EAErB,iDA5yCW3E,IAAoBthJ,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,UAAA9kB,8BAAA+kB,KAAA/kB,8BAAAglB,MAAAhlB,8BAAAC,MAAAD,8BAAAilB,MAAAjlB,8BAAAklB,MAAAllB,8BAAAqoJ,MAAAroJ,8BAAAsoJ,MAAAtoJ,8BAAA8kB,kBAAA9kB,8BAAAuoJ,kBAAAvoJ,8BAAAwoJ,MAAA,4DAApBlH,GAAoBn5I,UAAA,sBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BAWpBogJ,eAAY,m1BDvDZlgJ,2EAAA,kCAAyB,qCAyChBA,iFAQiBA,wGA2MbA,sFACOA,4OAnPvBA,2EAAA,0CAEa,yEAMMA,sMAMAA,6JAC8D,kDAAe,mGAAwD,kDAAe,sGAMpJA,iQAGiC,uCAAoC,oCAuB3EA,oGAUgBA,6FASZA,wFAGAA,wGAGAA,8GAMJA,qGAUKA,wFAmBGA,kKAVJA,wFAGAA,4GAGAA,iGASJA,qGASAA,wFAUQA,8GAKRA,qGAUAA,0FAOEA,2EAAA,sCASFA,qGAGAA,gHAGAA,8KAQDA,mFASOA,sGAaPA,wFAmBAA,kFAoCAA,uFAOcA,mFAEAA,mFAUPA,mFAWNA,qGASDA,mFAeCA,mFAQQA,oHAGRA,2GAGAA,qHAUoBA,kFAUlBA,qHAGAA,2GAGAA,2GAWGA,kFAQDA,wFAGAA,sGAGAA,iGAMJA,qGAUEA,yFAEEA,mHAEAA,0FAAe,iDAAe,2GAevBA,kFAyBAA,kFAiBIA,sFAhCbA,qHAGAA,2GAGAA,2GAiBAA,qGAyBEA,qGAuBOA,iFAqBAA,uGAmDAA,4FAoBAA,4HAsBAA,4HAoBAA,uGAlJVA,uFAEV,wCACE,iQACoE,oCACtE,4CAkBWA,wFACKA,oLAwBNA,oFACV,yCACE,mGAAqE,qCACvE,6CAqBWA,wFAETA,2EAAA,mFAAmC,wDACnC,gDACA,wIAAwF,gGAgB/EA,0FAETA,2EAAA,mFAAmC,wDACnC,gDACA,qLAAqI,gGAgB5HA,0FAETA,2EAAA,mFAAmC,wDACnC,gDACA,kPAEgC,gGAgBvBA,uFAETA,2EAAA,yFAAyC,wDACzC,gDACA,mHAAmE,gGA1H1DA,qGAqBAA,qGAGAA,qKAuBGA,2EAAA,qCAiGHA,uFAEEA,+KAmBFA,2FAEEA,yHA8BFA,0FAEEA,gIA3CFA,qGAuBAA,qHAGAA,2GAGAA,2GAGAA,qGAuBAA,qHAGAA,2GAGAA,2GAGAA,qGAQAA,2FAEEA,sKAkBHA,qFAQiBA,uGAahBA,yFAEEA,kHAoFFA,yFA7FAA,qGAmBAA,qGAGAA,iHAAsC,kDAAqB,yCAQ3DA,sFAEEA,wHAUFA,qGAGAA,gHAAsC,oIAAuG,yCAQ9IA,2FAOiBA,wGAQhBA,qGAQDA,8FAOiBA,2GAgBdA,4FASAA,qGAQAA,sFASAA,qGAQAA,sFASAA,qGAQAA,wFASAA,qGAmBOA,8FAPTA,mGASQA,yIAURA,uFAQQA,4HAURA,2FAiBQA,gIAURA,6FAQQA,0HAaRA,2FAQQA,sIAURA,0FAQQA,yJAORA,+FAQQA,qKAlHRA,qGAkBAA,qGA2BAA,qGAkBAA,qGAGAA,0FAkBAA,gJAqFeA,iGA7CVA,kFAwBJA,4FAMSA,sLAoBrBA,2EAAA,iDAAmB,qDAOVA,wFAUQA,qGAA0B,4EAC+D,oCA1D/FA,qHAGAA,2GAGAA,2GAuDFA,uLAiBOA,iFAULA,yFACKA,gHAYLA,qGAGAA,sGASAA,yFACKA,gHAYLA,qGAGAA,sGASAA,0FAEEA,+GA6BbA,2EAAA,oDAAsB,qCACtB,0GAA4E,6CAlBjEA,qHAGAA,2GAGAA,2GAGAA,qGAmCEA,2JAgBDA,wFACOA,kJAUVA,iGAWAA,qGASAA,mGAWAA,qGASAA,wFAWAA,qGASAA,wGAWAA,qGASAA,gGAWAA,45WAp3CrBvI,2BAFF,iBAEEA,CADiC,cACjCA,mBAAA,0EAC+DA,2BAC/DA,oCAAA,OAIIA,2BAHF,eAGEA,CADe,aAwBbA,uBAtBA,EAAA0oJ,GAAA,yBAsBA1oJ,CAnBqB,GAAA2oJ,GAAA,yBAmBrB3oJ,CAVqB,GAAA4oJ,GAAA,yBAUrB5oJ,CAJqB,GAAA6oJ,GAAA,0BAenB7oJ,2BADF,aACEA,CAD0B,gBAC1BA,mBAAA,MAEgBA,2BAEdA,2BADF,aACEA,CAD6B,iBAKrBA,uBAAA,kBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAUwC,EAAAojJ,oBAAAj8I,EAAAvD,OAAA/G,OAAwC,GACxDW,2BAAA,iBAAAA,mBAAA,MACoDA,2BACpDA,uBAAA,GAAA8oJ,GAAA,kBAIF9oJ,2BACAA,uBAAA,GAAA+oJ,GAAA,gBAIJ/oJ,6BAoKAA,uBAjKA,GAAAgpJ,GAAA,eAiKAhpJ,CAhK4B,GAAAipJ,GAAA,eAgK5BjpJ,CAhIkE,GAAAkpJ,GAAA,eAgIlElpJ,CA/FkE,GAAAmpJ,GAAA,eA+FlEnpJ,CAvEwE,GAAAopJ,GAAA,cAuExEppJ,CAxC+D,GAAAqpJ,GAAA,cAwC/DrpJ,CAlB+D,GAAAspJ,GAAA,eAwC3DtpJ,2BAFJ,aAEIA,CAFwB,aAExBA,CAD8B,cAE5BA,sBAAA,gBAIAA,2BAAA,gBAAAA,mBAAA,MAEqBA,2BACrBA,2BAAA,mBAAAA,mBAAA,MAGNA,iCAomCAA,uBAjmCA,GAAAupJ,GAAA,cAimCAvpJ,CAhmC4B,GAAAwpJ,GAAA,cAgmC5BxpJ,CA7kC4B,GAAAypJ,GAAA,cA6kC5BzpJ,CAzjC4B,GAAA0pJ,GAAA,eAyjC5B1pJ,CA1iC4B,GAAA2pJ,GAAA,uBA0iC5B3pJ,CAphCiH,GAAA4pJ,GAAA,eAohCjH5pJ,CAv/BiE,GAAA6pJ,GAAA,yBAu/BjE7pJ,CA39BmH,GAAA8pJ,GAAA,wBA29BnH9pJ,CAl4BwE,GAAA+pJ,GAAA,yBAk4BxE/pJ,CApuB4E,GAAAgqJ,GAAA,yBAouB5EhqJ,CA3nBiF,GAAAiqJ,GAAA,wBA2nBjFjqJ,CAlciF,GAAAkqJ,GAAA,wBAkcjFlqJ,CA1TkI,GAAAmqJ,GAAA,uBA0TlInqJ,CAzO6K,GAAAoqJ,GAAA,wBAyO7KpqJ,CArK4E,GAAAqqJ,GAAA,yBAqK5ErqJ,CAvGmB,GAAAsqJ,GAAA,cAuGnBtqJ,CAhGkE,GAAAuqJ,GAAA,cAgGlEvqJ,CA/E4B,GAAAwqJ,GAAA,cA+E5BxqJ,CA3D4B,GAAAyqJ,GAAA,cA2D5BzqJ,CAvC4B,GAAA0qJ,GAAA,cAuC5B1qJ,CAnB4B,GAAA2qJ,GAAA,eAsC9B3qJ,2BAIIA,2BAFJ,aAEIA,CAFsB,aAEtBA,CADsB,sGACAA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAK3D9yB,qEAEJA,sEAp4CUA,uBADA,UAAAwC,EAAA+5D,QACAv8D,CADmB,WAAAwC,EAAA2pH,aAGhBnsH,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,KAAAwC,EAAA8Y,sCAGvDtb,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA62I,aAGer5I,sBAAA,GAAAA,uBAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAAAmD,EAAAigJ,uBASAziJ,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAMAW,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAOAW,+CAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAqBHW,sBAAA,GAAAA,uBAAA,gBACwBA,sBAAA,GAAAA,uBAAA,UAAAwC,EAAA8/I,cAM3BtiJ,+CAAA,OAAAwC,EAAA62I,YAAAjqI,UAAA,eAAAkqI,EAAA,aAMLt5I,+CAAA,mBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAiCAW,+CAAA,kBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAiCAW,+CAAA,kBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAwBAW,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OA+BAW,+CAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAsBAW,+CAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAmBAW,+CAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAmCAW,sBAAA,GAAAA,uBAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAmBAW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAA,UAAAmD,EAAA62I,YAAAlpI,SAAA6yI,UAAA3jJ,OAoBAW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAA,UAAAmD,EAAA62I,YAAAlpI,SAAA6yI,UAAA3jJ,OAeAW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAA,WAAAmD,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAuBSW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAA,QAAAmD,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OA6BTW,+CAAA,iBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OA4BSW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAA,UAAAmD,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAyFAW,+CAAA,eAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OA8JAW,+CAAA,mBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAyGAW,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAyLAW,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAwIAW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAAW,4BAAA,GAAAyI,IAAAxH,SAAAuB,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,QAiFAW,+CAAA,QAAAwC,EAAA62I,YAAAlpI,SAAAmtI,UAAAj+I,OAAAW,4BAAA,GAAAK,IAAAY,SAAAuB,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,QAoEAW,+CAAA,mBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OA2DAW,+CAAA,wBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAAAmD,EAAAogJ,wBAUT5iJ,+CAAA,kBAAAwC,EAAA62I,YAAAlpI,SAAA2a,aAAAzrB,OAgBAW,+CAAA,OAAAwC,EAAA62I,YAAAlpI,SAAA8yI,YAAA5jJ,OAoBAW,+CAAA,OAAAwC,EAAA62I,YAAAlpI,SAAA8yI,YAAA5jJ,OAoBAW,+CAAA,OAAAwC,EAAA62I,YAAAlpI,SAAA8yI,YAAA5jJ,OAoBAW,+CAAA,OAAAwC,EAAA62I,YAAAlpI,SAAA8yI,YAAA5jJ,OAoBAW,+CAAA,OAAAwC,EAAA62I,YAAAlpI,SAAA8yI,YAAA5jJ,OAwBkBW,sBAAA,GACAA,uBADA,OAAAwC,EAAA62I,YACAr5I,CADoB,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,0iBE/3CpDtb,2BAAA,sBAAAA,mBAAA,KAE8EA,mDAG5EA,2BAAA,sBAAAA,wBAAA,KAE0BA,sBAAA,cACCA,oDCCvB,MAAO4qJ,sDAA6B,4DAA7BA,GAA6BziJ,UAAA,gCAAA+C,OAAA,CAAA2/I,gBAAA,mBAAAthJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDPrB5C,sIAIEA,4HACK,qCAAuB,sNAHnDvI,uBAJA,EAAA8qJ,GAAA,uBAIA9qJ,CAFqB,EAAA+qJ,GAAA,yBAAA/qJ,4EAFmBA,uBAAvB,OAAAwC,EAAAqoJ,gBAAuB7qJ,CAAA,WAAAgrJ,wCEWjC,IAAMC,GAAN,MAAMA,GAGXpsJ,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,YAEyB,CAEvC1C,OAAO6vI,EAAoBC,GACzB,OAAOpsJ,KAAK8rB,KAAKgE,IACf,GAAG9vB,KAAKgf,OAAOmtI,IACf,CACE7vI,OAAQ8vI,EACRC,gBAAiB,MAEnB,CACElsH,QAAS,CAAEC,OAAQ,sCACnBO,QAAS,YAGf,CAEAjd,KAAK4oI,GACH,OAAOtsJ,KAAK8rB,KAAKpZ,IAAc1S,KAAKgf,IAAK,CACvCQ,OAAQ,CAAE+sI,aAAcD,IAE5B,iDAvBWJ,IAAajrJ,qBAAAC,cAAA,+DAAbgrJ,GAAa/qJ,QAAb+qJ,GAAa9qJ,UAAAC,WAFZ,QAAM,GAEP6qJ,MAAa//H,cAAA,CAJzBC,O,mCAO2BC,gBAHf6/H,kHCXbjrJ,sBAAA,qDAGEA,+BAAA,6BADFA,2BAAA,SACEA,uBAAA,EAAAurJ,GAAA,uBACFvrJ,gGADiBA,+CAAA,mBAAAwrJ,0BAaPxrJ,+BAAA,4BAAAA,uBAAA,EAAAyrJ,GAAA,4FAAezrJ,uBAAA,mBAAAwrJ,oEAOfxrJ,2BAAA,mBAKUA,uBAAA,qBAAA2J,GAAA3J,0BAAA4P,GAAA,MAAA2f,EAAAvvB,0BAAA,UAAAA,wBAAauvB,EAAAm8H,YAAA/hJ,GAAmB,GAC1C3J,wEAHUA,uBADA,OAAAuvB,EAAAqhH,SACA5wI,CADiB,UAAAuvB,EAAAo8H,0CAF3B3rJ,uBAAA,EAAA4rJ,GAAA,6DAAW5rJ,uBAAA,OAAAuvB,EAAAs8H,4CAhBnB7rJ,oCAAA,GACEA,2BAAA,cAIEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACeA,2BACfA,uBAAA,EAAA8rJ,GAAA,0DAIF9rJ,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,MACsBA,2BACtBA,uBAAA,GAAA+rJ,GAAA,0DAUJ/rJ,2BACAA,sBAAA,0FAAKA,sBAAA,IAAAA,uBAAA,eAAAksI,8BAMPlsI,2BAAA,kDAEEA,mBAAA,GACFA,kFAFMA,uBAAA,UAAAA,wBAAA,IAAAgsJ,EAAAz8H,EAAA08H,iBACJjsJ,sBAAA,GAAAA,+BAAA,IAAAgsJ,EAAAE,YAAA,gCAYElsJ,2BAAA,uCACEA,sBAAA,YAGFA,sEAHOA,wBACAA,uBADA,UAAAuvB,EAAAze,MAAA6nD,WACA34D,CAD4B,OAAAuvB,EAAAze,MAAA8qD,mCAInC57D,2BAAA,uCACEA,sBAAA,YAGFA,sEAHOA,wBACAA,uBADA,UAAAuvB,EAAAze,MAAA2oB,QACAz5B,CADyB,OAAAuvB,EAAAze,MAAA8qD,mCARhC57D,2BAFF,UAEEA,CADkD,OAC/CA,mBAAA,wCAAqCA,2BACxCA,2BAAA,aAA+BA,mBAAA,GAAmBA,2BAAOA,sBAAA,QAMzDA,uBALA,EAAAmsJ,GAAA,cAKAnsJ,CALqC,EAAAosJ,GAAA,eAUrCpsJ,mBAAA,GACFA,qDAbKA,sBAAA,GAAAA,+BAAA,GAAAA,wBAAA,IAAAqsJ,EAAAC,SAAA,OAC4BtsJ,sBAAA,GAAAA,8BAAAqsJ,EAAA/+I,SACxBtN,sBAAA,GAAAA,uBAAA,gBAAAqsJ,EAAA1a,OAKA3xI,+CAAA,iBAAAqsJ,EAAA1a,OAKP3xI,uDAAA,IAAAqsJ,EAAA1uH,QAAA,gCAhBJ39B,2BAAA,WAEEA,uBAAA,EAAAusJ,GAAA,cAgBFvsJ,8GAfwBA,wBAAWA,uBAAX,UAAAwsJ,EAAWxsJ,CAAA,eAAAuvB,EAAAzc,mCAkB/B9S,2BADF,WACEA,CAD2B,UACrBA,mBAAA,uBACRA,uDAHFA,uBAnBA,EAAAysJ,GAAA,YAmBAzsJ,CAlBkD,EAAA0sJ,GAAA,yBAAA1sJ,2FAAxBA,uBAArB,aAAAwsJ,EAAA,KAAAA,EAAAryJ,OAAqB6F,CAAA,WAAA2sJ,oEA0B1B3sJ,2BAAA,mBAQUA,uBADA,qBAAA2J,GAAA3J,0BAAAkqI,GAAA,MAAA36G,EAAAvvB,0BAAA,UAAAA,wBAAauvB,EAAA+P,WAAA31B,GAAkB,EAC/B3J,CADgC,2BAAA2J,GAAA3J,0BAAAkqI,GAAA,MAAA36G,EAAAvvB,0BAAA,UAAAA,wBACbuvB,EAAA9jB,gBAAA9B,GAAuB,GAClD3J,sBAAA,yBAMFA,wEAXUA,uBAFA,OAAAuvB,EAAAgoB,QAEAv3C,CAFgB,UAAAuvB,EAAA3jB,SASN5L,sBAAA,GAEAA,uBAFA,YAAAuvB,EAAAvkB,UAEAhL,CAFuB,aAAAuvB,EAAA+O,YAAAwG,MAEvB9kC,CADgC,eAAAuvB,EAAAzjB,wCAZpD9L,uBAAA,EAAA4sJ,GAAA,4DAAW5sJ,uBAAA,OAAAuvB,EAAAs8H,2CAoBX7rJ,sBAAA,2EAGcA,uBAHA,QAAAuvB,EAAAm2B,MAGA1lD,CAHe,mBAGfA,CAFuB,OAAA+tE,EAAA8+E,eAEvB7sJ,CAD2B,gBCpDrC,MAAO8sJ,GAgDXjuJ,YACU2iJ,EACAD,EACAp0I,EACA4/I,EACAtrJ,EACDsL,EACCE,EACA+/I,EACA58H,EACAq0D,GATA1lF,KAAAyiJ,cACAziJ,KAAAwiJ,qBACAxiJ,KAAAoO,cACApO,KAAAguJ,mBACAhuJ,KAAA0C,gBACD1C,KAAAgO,eACChO,KAAAkO,qBACAlO,KAAAiuJ,gBACAjuJ,KAAAqxB,sBACArxB,KAAA0lF,QAtCV1lF,KAAAkuJ,cAA0B,GAK1BluJ,KAAA2mD,MAAQ,IAER3mD,KAAAglE,iBAAmB,GAEnBhlE,KAAAilE,eAAiB,GAEjBjlE,KAAA+R,MAAQC,KAERhS,KAAAw4C,QAAoB,GACpBx4C,KAAA6xI,SAAmC,GACnC7xI,KAAA6M,QAA2B,GAC3B7M,KAAA4sJ,eAAkC,GAElC5sJ,KAAAiM,UAAY,IAAIqC,IAGhBtO,KAAA8sJ,iBAAkB,EAClB9sJ,KAAAmuJ,cAAe,CAiBZ,CAEH1/I,WACEzO,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZyb,KAAMvW,KAAMjX,MACZiuB,MAAOA,IAAMhpB,KAAKouJ,aAAa,SAC/Bh0J,KAAM4F,KAAKgO,aAAag7D,MACxB/oD,QAASA,IAAMjgB,KAAKquJ,eAAe,UAErC,CACEvhJ,WAAY,SACZyb,KAAMvW,KAAMs1B,KACZte,MAAOA,IAAMhpB,KAAKouJ,aAAa,QAC/Bh0J,KAAM4F,KAAKgO,aAAai7D,KACxBhpD,QAASA,IAAMjgB,KAAKquJ,eAAe,SAErC,CACEvhJ,WAAY,SACZyb,KAAMvW,KAAMssF,QACZt1E,MAAOA,IAAMhpB,KAAKouJ,aAAa,WAC/Bh0J,KAAM4F,KAAKgO,aAAa66D,QACxB5oD,QAASA,IAAMjgB,KAAKquJ,eAAe,YAErC,CACEvhJ,WAAY,SACZyb,KAAMvW,KAAMiuC,OACZj3B,MAAOA,IAAMhpB,KAAKouJ,aAAa,YAC/Bh0J,KAAM4F,KAAKgO,aAAak7D,SACxBjpD,QAASA,IAAMjgB,KAAKquJ,eAAe,cAGvCruJ,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,oBACN2F,KAAM,WACNC,SAAU,EACV07E,YAAY,GAEd,CACE1wF,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,EACV07E,YAAY,GAEd,CACE1wF,KAAMoP,mBACN2F,KAAM,UACNC,SAAU,EACV07E,YAAY,GAEd,CACE1wF,KAAMoP,kBACN2F,KAAM,cACNC,SAAU,EACV07E,YAAY,EACZz7E,aAAcrP,KAAKsuJ,WAErB,CACEl0J,KAAMoP,0BACN2F,KAAM,eACNH,KAAMhP,KAAKguJ,iBACX5+I,SAAU,GAEZ,CACEhV,KAAMoP,qBACN2F,KAAM,iBACNC,SAAU,EACVC,aAAcrP,KAAKuuJ,QAErB,CACEn0J,KAAMoP,wBACN2F,KAAM,eACNC,SAAU,EACVJ,KAAMhP,KAAK0C,cACX+uB,UAAW,cAEb,CACEr3B,KAAMoP,yBACN2F,KAAM,SACNC,SAAU,EACVC,aAAcrP,KAAKwuJ,UAIvBxuJ,KAAK4sJ,eAAiB,CACpB,CACExyJ,KAAMoP,0BACN2F,KAAM,SACNC,SAAU,EACVC,aAAcrP,KAAKwuJ,UAIvBxuJ,KAAKoO,YAAYM,SAASC,UAAWpM,IACnCvC,KAAK8sJ,gBAAkBvqJ,EAAK0N,UAC5BjQ,KAAKmuJ,cAAgB5rJ,EAAK0N,YAG5BjQ,KAAK6M,QAAU7M,KAAK6M,QAAQwX,OAAQwuD,IAC1B7yE,KAAKkuJ,cAAchsJ,SAAS2wE,EAAI1jE,OAG1Cw0C,WAAW,KACT3jD,KAAK0lF,MAAMiE,eAAa,EACvB,IACL,CAEA/iF,cACOuL,gBAAcnS,KAAKyuJ,eACtBzuJ,KAAKyuJ,aAAavlE,YAEtB,CAEAniF,kBACE/G,KAAK0uJ,oBAAsB1uJ,KAAK2uJ,iBAAiB9nJ,QAAQ8H,UACtDigJ,IACC5uJ,KAAKyuJ,aAAeG,EAAUxmI,OAGpC,CAEA4B,cACMhqB,KAAK0uJ,qBACP1uJ,KAAK0uJ,oBAAoBxkI,cAEvBlqB,KAAK6uJ,YACP7uJ,KAAK6uJ,WAAW3kI,aAEpB,CAEAgjI,eAAez+E,GACb,OAAOt8D,QACL,CACE,KAAM,eACN,EAAK,gBACL,EAAK,iBAEPs8D,EAAI//D,OACJ,aAEJ,CAEA6xB,WAAW/6B,GACT,IAAIqgC,EACJ,GAAI7lC,KAAK0N,SACPm4B,EAAa7lC,KAAKyiJ,YAAYliH,WAAWvgC,KAAK0N,cAAQ,KAC7C1N,KAAKkgC,YAId,YADAlgC,KAAKw4C,QAAU,IAFf3S,EAAa7lC,KAAKwiJ,mBAAmBjiH,WAAWvgC,KAAKkgC,YAIvD,CACA2F,EAAWl3B,UACR6pC,IACCx4C,KAAKw4C,QAAUA,EACfx4C,KAAK8uJ,kBAAgB,EAEvB,KACE9uJ,KAAKw4C,QAAU,GACfhzC,EAAQ+b,OAAK,EAGnB,CAEAutI,mBACE9uJ,KAAKw4C,QAAQxxC,QAAS8xC,IACpBA,EAAOi2G,QAAQlnJ,KAAK,CAACmnJ,EAAaC,IACzB,IAAI/yH,KAAK+yH,EAAO1B,SAAS2B,UAAY,IAAIhzH,KAAK8yH,EAAOzB,SAAS2B,UACtE,EAEL,CACAvC,YAAYnnJ,GACVxF,KAAK6uJ,WAAa7uJ,KAAKwiJ,mBACpB9+H,KAAK,IAAI+hB,aAAW,CAAEsQ,WAAY,CAAE8vC,OAAO,EAAIsE,OAAQ,KAAQnqF,KAAKkgC,aACpE2F,WAAWl3B,UACTkjI,IACC7xI,KAAK6xI,SAAWA,GAElB,KACE7xI,KAAK6xI,SAAW,GAChBrsI,EAAQ+b,OAAK,EAGrB,CAEAxN,UAAUw8E,EAAanvB,GACrB,OAAOA,EAAKmsF,OACd,CAEA7gJ,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAmiJ,aAAahC,GACXpsJ,KAAKiuJ,cACF3xI,OAAOtc,KAAKiM,UAAUmc,SAASytB,YAAau2G,GAC5Cp9I,QAAK+pC,QAAK,IACVpqC,UAAU,CACTc,KAAOka,IACL3pB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjB,UAAUm6H,cACVziI,EAAKxuB,KAAKmqB,WAAU,EAGxB/D,MAAQoI,IACN3pB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB,uBACAoI,EAAKxuB,KAAKmqB,WAAU,GAI9B,CAEA+oI,eAAejC,GACb,GAAIpsJ,KAAKiM,WAAW8mE,aAAc,CAChC,MAAMj6B,EAAS94C,KAAKiM,UAAUqzD,SAAS,GACvC,GAA2B,QAAvBxmB,EAAOq2G,aAAgD,QAAvBr2G,EAAOq2G,YACzC,OAAO,EAET,OAAQ/C,GACN,IAAK,QACH,GAA2B,YAAvBtzG,EAAOq0G,YACT,OAAO,EAET,MACF,IAAK,OACH,GAA2B,YAAvBr0G,EAAOq0G,YACT,OAAO,EAIb,OAAO,CACT,CACA,OAAO,CACT,iDA1SWY,IAA0B9sJ,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,IAAA/kB,8BAAAglB,KAAAhlB,mDAAA,4DAA1B8sJ,GAA0B3kJ,UAAA,6BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4nBD9BvBE,oFAOAA,y1CAuEhBvI,uBA5FA,EAAAmuJ,GAAA,mCA4FAnuJ,CA5FgD,EAAAouJ,GAAA,aA4FhDpuJ,CA1F4D,EAAAquJ,GAAA,0BAAAruJ,mCA0F5DA,CAtFgC,EAAAsuJ,GAAA,yBAAAtuJ,mCAsFhCA,CAtDgC,EAAAuuJ,GAAA,yBAAAvuJ,mCAsDhCA,CA9CqC,EAAAwuJ,GAAA,yBAAAxuJ,mCA8CrCA,CAnBsC,GAAAyuJ,GAAA,yBAAAzuJ,4EAzEVA,uBAAA,OAAAwC,EAAA0qJ,cAEtBltJ,wBAA8BA,uBAA9B,uBAAAwC,EAAAq6F,KAA8B78F,CAAA,WAAA0uJ,0aEFpC1uJ,oCAAA,GACEA,sBAAA,4GAAwBA,+CAAA,cAAA+K,EAAAC,UAAAw0B,eCSpB,MAAOmvH,sDAAuB,4DAAvBA,GAAuBxmJ,UAAA,yBAAA+C,OAAA,CAAAozB,YAAA,cAAAtzB,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,OAAA,+BAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GDVpCrI,uBAAA,EAAA4uJ,GAAA,2BAAe5uJ,uBAAA,OAAAwC,EAAAwI,oGEAfhL,sBAAA,wDAoBIA,sBAAA,oEAEoBA,uBADA,cAAAM,EAAAg+B,YACAt+B,CAD2B,YAAAM,EAAA+K,8EApBnDrL,oCAAA,GACEA,2BAAA,gBAYUA,uBALA,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAorJ,YAAA/hJ,GAAmB,EAKhC3J,CALiC,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAIfM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAClD3J,sBAAA,wBAKAA,uBAAA,EAAA6uJ,GAAA,4BAIF7uJ,2GAtBUA,wBAUAA,uBAVA,OAAAM,EAAAswI,SAUA5wI,CAViB,UAAAM,EAAAsL,QAUjB5L,CATmB,iBASnBA,CAJmB,aAAAM,EAAAwkF,WAInB9kF,CAFyB,gBAEzBA,CADmB,QAAAM,EAAAkqC,OAKTxqC,wBAEAA,uBAFA,aAAAM,EAAAg+B,YAAAwG,MAEA9kC,CAFgC,YAAAM,EAAA0K,UAEhChL,CADuB,eAAAM,EAAAwL,sEAiB3C9L,sBAAA,uDAEMA,uBADA,UAAAM,EAAAwQ,MAAA2oB,QACAz5B,CADyB,OAAAM,EAAAwQ,MAAA8qD,mCAJ/B57D,2BAAA,aACEA,mBAAA,GACFA,2BACAA,uBAAA,EAAA8uJ,GAAA,yCAFE9uJ,uDAAA,IAAAgmB,EAAAu8F,QAAA,MAAAv8F,EAAA5sB,KAAA,KAEK4G,+CAAA,UAAAgmB,EAAAu8F,SAAA,GAAAv8F,EAAA5sB,iCASL4G,2BAAA,UAGEA,mBAAA,gCACAA,sBAAA,YAGFA,6GALGA,uBAAA,OAAAM,EAAAyuJ,YAAAhjJ,EAAA+e,cAAA9qB,2BACDA,uDAAA,IAAA+L,EAAAyzB,aAAA,KACKx/B,wBACAA,uBADA,UAAAM,EAAAwQ,MAAAgtF,OACA99F,CADwB,OAAAM,EAAAwQ,MAAA8qD,mCAM7B57D,2BAAA,UAEEA,mBAAA,gCACAA,sBAAA,YAGFA,6GALGA,uBAAA,OAAA+L,EAAA+e,aAAA9qB,2BACDA,uDAAA,IAAA+L,EAAAyzB,aAAA,KACKx/B,wBACAA,uBADA,UAAAM,EAAAwQ,MAAAgtF,OACA99F,CADwB,OAAAM,EAAAwQ,MAAA8qD,mCAdnC57D,oCAAA,GAUEA,uBATA,EAAAgvJ,GAAA,WASAhvJ,CAP0C,EAAAivJ,GAAA,yBAAAjvJ,gJAFtCA,wBAAqBA,uBAArB,QAAAM,EAAA4uJ,cAAqBlvJ,CAAA,WAAAmvJ,6BAmBPnvJ,mBAAA,qDAAAA,8BAAA+L,EAAAyzB,wCAApBx/B,uBApBA,EAAAovJ,GAAA,sBAoBApvJ,CApB+D,EAAAqvJ,GAAA,yBAAArvJ,uHAAZA,uBAApC,OAAAM,EAAAyuJ,YAAAhjJ,EAAA+e,cAAoC9qB,CAAA,WAAAsvJ,ICTrD,MAAMC,GAAW,WAQX,MAAOC,WAA0B1iJ,IAwCrCjO,YACUkO,EACAE,EACA2Z,EACAzZ,EACAo0I,EACAwL,EACApL,EACAruI,EACAoiB,EACAqgC,GAER3oD,QAXQrO,KAAAgO,eACAhO,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAAoO,cACApO,KAAAwiJ,qBACAxiJ,KAAAguJ,mBACAhuJ,KAAA4iJ,qBACA5iJ,KAAAuU,SACAvU,KAAA22B,kBACA32B,KAAAg3D,kBAvCDh3D,KAAAkuJ,cAA0B,GAE1BluJ,KAAAsjJ,eAA2B,GAE3BtjJ,KAAA+lF,YAAa,EAEb/lF,KAAA0wJ,aAAc,EAIvB1wJ,KAAAmuJ,cAAe,EACfnuJ,KAAAyrC,MAAQ,EAIRzrC,KAAA2wJ,mBAAqB,CACnB1rI,OAAQ,CAACyyH,GAAoBW,gBAC7BtwI,OAAQ,CAAC2vI,GAAoBY,cAC7BjtH,OAAQ,CAACqsH,GAAoBa,iBAG/Bv4I,KAAA6M,QAAgC,GAChC7M,KAAA6xI,SAAmC,GACnC7xI,KAAA4wJ,mBAAoB,EACpB5wJ,KAAAiM,UAA8B,IAAIqC,IAClCtO,KAAA+R,MAAQC,KACRhS,KAAAgwJ,YAAc,CAAE76C,QAAS,GAAIxoE,WAAY,GAAID,aAAc,IAC3D1sC,KAAAmwJ,eAAyB,EAevBnwJ,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKw+H,YAClBpkI,KAAM4F,KAAKgO,aAAakS,OACxBwI,aAAezc,IAAiCA,EAAU8mE,cAG5D,CACEjmE,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAKw+H,WAAU,GAC5BpkI,KAAM4F,KAAKgO,aAAauR,KACxBU,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,SAAU5kJ,IAEtE,CACEa,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAK8oB,eAClB1uB,KAAM4F,KAAKgO,aAAakb,OACxBjJ,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,SAAU5kJ,IAG1E,CAEAuyH,UAAU31G,GAAO,GACf,GAAI7oB,KAAK0wJ,YACP7nI,EACI7oB,KAAKuU,OAAOC,SAAS,CACnBg8I,GACA,CACE/7I,QAAS,CACPC,MAAO,CACL2pB,KAAS9e,KACTvf,KAAKiM,UAAUmc,QAAQ2D,aACvB/rB,KAAKiM,UAAUmc,QAAQqY,kBAK/BzgC,KAAKuU,OAAOC,SAAS,CAACg8I,GAAU,CAAE/7I,QAAS,CAAEC,MAAO,CAAC2pB,KAASne,gBAC7D,CACL,IAAI2Y,EAAe,GAEdA,EADLhQ,EACoB,CACdqX,YAAalgC,KAAKiM,UAAUmc,SAASqY,aACrC5T,YAAa7sB,KAAKiM,WAAWmc,SAAS2D,aACtCu3H,eAAgBtjJ,KAAKsjJ,eACrBlzH,QAASvH,GAEK,CACdy6H,eAAgBtjJ,KAAKsjJ,eACrBlzH,QAASvH,GAEf7oB,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAK03H,GAAsB1pH,EAAc,CAAEx+B,KAAM,MACvF,CACF,CAEAoU,WACE,MAAM5B,EAAU,CACd,CACEzS,KAAMoP,mBACN2F,KAAM,eACNC,SAAU,EACVC,aAAcrP,KAAK8wJ,QAErB,CACE12J,KAAMoP,qBACN2F,KAAM,GACNH,KAAM,IAAI+pI,GACV3pI,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,SACNC,SAAU,EACVC,aAAcrP,KAAK+wJ,YAErB,CACE32J,KAAMoP,0BACN2F,KAAM,sBACNH,KAAMhP,KAAKguJ,iBACX5+I,SAAU,GAEZ,CACEhV,KAAMoP,iBACN2F,KAAM,eACNC,SAAU,EACV+Z,mBAAoBC,IAAalsB,IACjC+kF,qBAAsB,CACpBroD,UAAW,IACX,GAAI,OAKV55B,KAAK6M,QAAUA,EAAQwX,OAAQwuD,IACrB7yE,KAAKkuJ,cAAchsJ,SAAS2wE,EAAI1jE,OAG1CnP,KAAKoO,YAAYM,SAASC,UAAWD,IACnC1O,KAAK4O,WAAaF,EAClB1O,KAAKmuJ,cAAgBz/I,EAAOuB,YAGzBjQ,KAAKmwJ,gBACRnwJ,KAAKgxJ,oBAAoB,kBAAmB,WAC5ChxJ,KAAKgxJ,oBAAoB,wCAAyC,cAClEhxJ,KAAKgxJ,oBAAoB,0CAA2C,gBAExE,CAEApqJ,cACM5G,KAAK4O,YAAYqB,YACnBjQ,KAAK6xI,SAAW,GAChB7xI,KAAKsqB,MAAM4+D,aAEf,CAEA2nE,WACEv0I,EACArQ,GAOA,MALe,WAAXqQ,IACGrQ,GAAW0c,oBAIH,WAAXrM,GAC0B,CAAC,MAAO,aACZvgB,QAAQiE,KAAKiM,UAAUmc,SAAS2D,eAAiB,GAIpE/rB,KAAKoO,YAAYk9B,0BACtBtrC,KAAK4O,WACL5O,KAAK2wJ,mBAAmBr0I,GAE5B,CAEAqwI,YAAYnnJ,GACV,GAAIxF,KAAK4wJ,kBACP,OAEF5wJ,KAAK4wJ,mBAAoB,EACzB,MAAMK,EAAiBjxJ,KAAKwiJ,mBAAmB9+H,KAAKle,EAAQmlG,YAC5DsmD,EAAeprH,WAAWl3B,UACvBkjI,IACC7xI,KAAK6xI,SAAWA,EAChB7xI,KAAKyrC,MAAQwlH,EAAexlH,MAC5BzrC,KAAK6xI,SAAW7xI,KAAK6xI,SAASxtH,OAAQwuD,IACX,iBAArBA,EAAI9mD,cAAmC8mD,EAAInkE,OAAO80G,UACpDxjH,KAAKmwJ,eAAgB,IAEfnwJ,KAAKsjJ,eAAephJ,SAAS2wE,EAAIpyC,gBAE3CzgC,KAAK4wJ,mBAAoB,GAE3B,KACE5wJ,KAAK4wJ,mBAAoB,EACzB5wJ,KAAK6xI,SAAW,GAChBrsI,EAAQ+b,OAAK,GAIfvhB,KAAKmwJ,gBACJnwJ,KAAK6xI,SAASh/H,KACZszG,GAC0B,iBAAzBA,EAAQp6F,cAAmCo6F,EAAQz3G,OAAO80G,QAAU,KAGxExjH,KAAKmwJ,eAAgB,EAEzB,CAEAzjJ,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEA6c,eACE,MAAMq9F,EAAUnmH,KAAKiM,UAAUmc,QAC/BpoB,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1DI,gBAAiB1hB,mBACjB2hB,UAAW,CAACg7F,EAAQ1lF,cACpB0yB,kBAAmB,SACnB/nC,uBAAwBA,IACtBprB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,WAAWsZ,KAASnV,SAAU,CACnDuX,aAAc0lF,EAAQ1lF,eAExBzb,KAAMhlB,KAAKwiJ,mBAAmBn3H,OAAO86F,EAAQ1lF,gBAE9CzxB,QAKCq4B,SAAM,OAGhB,CAEQ2pH,oBAAoBhyI,EAAa6N,GACvC7sB,KAAK22B,gBAAgBwW,oBAAoBnuB,EAAMA,IAC7Chf,KAAKgwJ,YAAYnjI,GAAe7N,GAEpC,iDAtQWyxI,IAAiBxvJ,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,UAAA/kB,8BAAAglB,MAAAhlB,8BAAAilB,MAAA,4DAAjBuqI,GAAiBrnJ,UAAA,kBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4BACjBsyE,KAAc,0eAHd,CAAC,CAAElsE,QAASC,IAAmBC,SAAU,IAAID,IAAkB6gJ,OAAYvvJ,yEAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,0wBAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDtCxFrI,uBADA,EAAAiwJ,GAAA,kCACAjwJ,CADgD,EAAAkwJ,GAAA,sBA0BhDlwJ,sBAAA,qBAcAA,uBAXA,EAAAmwJ,GAAA,yBAAAnwJ,mCAWAA,CAVoC,EAAAowJ,GAAA,yBAAApwJ,2CA9BRA,uBAAA,OAAAwC,EAAA0qJ,cACbltJ,+CAAA,aAAAwC,EAAAmL,WAAA,KAAAnL,EAAAmL,WAAAqB,uGEDR,IAAKqhJ,IAAZ,SAAYA,GACVA,EAAAC,cAAA,gBACAD,EAAAE,WAAA,uBACAF,EAAAG,KAAA,gBACF,CAJA,CAAYH,QAAoB,KCiB1B,MAAOI,GAUX5xJ,YACSstH,EACAp/G,EACC8P,EACA6zI,EACA5zI,GAJD/d,KAAAotH,cACAptH,KAAAgO,eACChO,KAAA8d,cACA9d,KAAA2xJ,aACA3xJ,KAAA+d,cAbV/d,KAAAs1I,YAAwB,GAGxBt1I,KAAAqc,aAAe,IAAIvS,eAYjB9J,KAAKsc,OAAStO,EAAakS,OAC3BlgB,KAAKif,YACP,CAEAA,aACEjf,KAAKy4D,UAAYz4D,KAAK8d,YAAYqZ,MAAM,GAC1C,CAEApD,WACE,MAAMwhH,EAAapjI,SAAOA,QAAMnS,KAAKs1I,YAAa,cAAe,MACjEt1I,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,OAASsZ,KAASne,OAAQ,CAC/CilG,YAAaowB,IAEfvwH,KAAMhlB,KAAK2xJ,WAAW1sI,OAAOjlB,KAAKs1I,YAAaC,KAEhD5mI,UAAU,CACT4S,MAAOA,KACLvhB,KAAKy4D,UAAUlzC,UAAU,CAAEE,gBAAgB,GAAM,EAEnDL,SAAUA,KACRplB,KAAKqc,aAAanS,OAClBlK,KAAKotH,YAAYn0F,OAAK,GAG9B,iDA3CWy4H,IAAgCzwJ,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,IAAAhI,8BAAAiI,KAAA,4DAAhCwoJ,GAAgCtoJ,UAAA,oCAAA+C,OAAA,CAAAmpI,YAAA,eAAA/qI,QAAA,CAAA8R,aAAA,gBAAA7R,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,aCfxB5C,iGAOJA,yVATjBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAGAA,oCAAA,KAKMA,2BAJJ,aAIIA,CAFa,UAEbA,CADsB,QACtBA,mBAAA,KAAoBA,2BACpBA,2BAAA,SAAKA,mBAAA,kCACPA,6BAEEA,2BADF,WACEA,CADwB,gEACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAIzD9yB,mEAEJA,iCAnBUA,uBAAA,WAAAwC,EAAA2pH,aAMAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAg1D,WAIGx3D,sBAAA,GAAAA,sDAAA,KAAAwC,EAAA6xI,cAIiBr0I,sBAAA,GACAA,uBADA,OAAAwC,EAAAg1D,UACAx3D,CADkB,aAAAA,wBAAA,KAAAwC,EAAA6Y,wICwB1C,MAAOs1I,GA6CX9xJ,YACUoO,EACAxL,EACAmlB,EACAwJ,EACAjjB,EACAq0I,GALAziJ,KAAAkO,qBACAlO,KAAA0C,gBACA1C,KAAA6nB,eACA7nB,KAAAqxB,sBACArxB,KAAAoO,cACApO,KAAAyiJ,cA9CDziJ,KAAA2kC,QAA6B,GAE7B3kC,KAAA6xJ,qBAAsB,EAEtB7xJ,KAAAkuJ,cAA0B,GAE1BluJ,KAAA0N,SAAW,GAEX1N,KAAA8xJ,SAAW,GAGX9xJ,KAAA+xJ,cAAgB,CACvB,WACA,sBACA,YACA,iBACA,gBACA,gBAIO/xJ,KAAAuxE,mBAAwB33C,EAEvB55B,KAAAgyJ,aAAe,IAAIloJ,eAEnB9J,KAAAiyJ,eAAiB,IAAInoJ,eAE/B9J,KAAA+R,MAAQC,KACRhS,KAAA6M,QAAgC,GAChC7M,KAAAiM,UAA8B,IAAIqC,IAKzBtO,KAAA4O,gBAAiCgrB,EAE1C55B,KAAA2wJ,mBAAqB,CACnBuB,SAAU,CAACxa,GAAoBoB,oBAU9B,CAEHrqI,WACEzO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBmiG,IAC3DhxG,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZyb,KAAMvW,KAAM6Y,KACZ7B,MAAOA,IAAMhpB,KAAKqlC,iBAClBjrC,KAAMoP,oBACNyW,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,WAAY5kJ,GACtEyc,aAAezc,IAAiCA,EAAU0c,mBAC1D+wD,QAASA,IAAMvnE,aAAWnS,KAAKuxE,iBAGnC,MAAM1kE,EAAU,CACd,CACEzS,KAAMoP,oBACN2F,KAAM,WACNC,SAAU,GAEZ,CACEhV,KAAMoP,uBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,sBACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHi1J,IAAK,CAAE7xJ,MAAO,MAAO27D,MAAO,aAC5Bm2F,IAAK,CAAE9xJ,MAAO,MAAO27D,MAAO,gBAIlC,CACE7hE,KAAMoP,qBACN2F,KAAM,YACNC,SAAU,EACVqiB,UAAW,cACXtI,mBAAoBC,IAAagJ,WAEnC,CACEh4B,KAAMoP,kBACN2F,KAAM,iBACNC,SAAU,GAEZ,CACEhV,KAAMoP,iBACN2F,KAAM,gBACNC,SAAU,GAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,eACNC,SAAU,EACVJ,KAAMhP,KAAK0C,eAEb,CACEtI,KAAMoP,gBACN2F,KAAM,UACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpBhmB,MAAO,aACP/zC,OAAQ,UAKdloB,KAAK6M,QAAUA,EAAQwX,OAAQwuD,IACrB7yE,KAAKkuJ,cAAchsJ,SAAS2wE,EAAI1jE,OAI1CgD,YAAUnS,KAAK+xJ,cAAgB5iJ,IAC7B,MAAM0jE,EAAM1gE,SAAOnS,KAAK6M,QAAS,CAAEsC,KAAMA,IACrC0jE,IACFA,EAAIiY,YAAa,GAGD,wBAAdjY,GAAK1jE,MAAoD,QAAlBnP,KAAK8xJ,WAC9Cj/E,EAAIkY,gBAAkB/qF,KAAK8xJ,UAGX,aAAdj/E,GAAK1jE,MAAuBnP,KAAK0N,WACnCmlE,EAAIkY,gBAAkB/qF,KAAK0N,YAI3B1N,KAAKiyJ,eAAelsG,UAAU3qD,OAAS,IACzC4E,KAAKqyJ,kBAAoBryJ,KAAKsqB,MAAMkwD,UAAU7rE,UAAU,KACtD3O,KAAKiyJ,eAAe/nJ,MAAI,GAG9B,CAEAw6B,aACM1kC,KAAK6xJ,oBACP7xJ,KAAKyiJ,YAAY78G,sBAAsBj3B,UACpCg2B,IACC3kC,KAAK2kC,QAAUxyB,WAASwyB,EAAS,aACjC3kC,KAAK2kC,QAAU,IAAI3kC,KAAK2kC,QAAO,EAEjC,KACE3kC,KAAK2kC,QAAU,KAInB3kC,KAAK2kC,QAAU,IAAI3kC,KAAK2kC,QAE5B,CAEA3a,cACMhqB,KAAKqyJ,mBACPryJ,KAAKqyJ,kBAAkBnoI,aAE3B,CAEAooI,uBAAuBz/F,GACrB7yD,KAAKgyJ,aAAa9nJ,KAAK2oD,EACzB,CAEAg+F,WAAWv0I,EAAoBrQ,GAC7B,OAAKA,EAAU0c,oBAGR3oB,KAAKoO,YAAYk9B,0BACtBtrC,KAAK4O,WACL5O,KAAK2wJ,mBAAmBr0I,GAE5B,CAEA5P,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAo5B,iBACE,MAAMi6B,EAAWt/D,KAAKiM,UAAUmc,QAC1B1a,EAAW4xD,EAAS5xD,SACpBk3B,EAAS06B,EAAS/mD,MAAQ+mD,EAASt5B,UACzChmC,KAAK6nB,aAAagD,KAAK8I,KAAoB,CACzCE,UAAWrqB,4BAA4Bo7B,IACvChG,QAASp1B,gEACToqB,OAAQ,CACN,CACEztB,KAAM,SACN/L,KAAM,WACNkG,MAAO,IACPiT,UAAU,EACVmkD,WAAY,CACVx0D,QAAS,CACP,CAAE0tD,KAAMpnD,oBAAqBlJ,MAAO,IACpC,CAAEswD,KAAMpnD,qBAAsBlJ,MAAO,KACrC,CAAEswD,KAAMpnD,qBAAsBlJ,MAAO,KACrC,CAAEswD,KAAMpnD,sBAAuBlJ,MAAO,KACtC,CAAEswD,KAAMpnD,sBAAuBlJ,MAAO,SAK9CwzB,iBAAkBtqB,mBAClBuqB,SAAWlrB,IACT7I,KAAKyiJ,YAAYp9G,eAAe33B,EAAUk3B,EAAQ/7B,EAAOy8B,UAAU32B,UAAU,KAC3E3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,yBAAyBo7B,uBAA4Bl3B,KAAW,EAEnE,GAGP,iDAlOWkkJ,IAAyB3wJ,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAA,4DAAzByoJ,GAAyBxoJ,UAAA,2BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BACzBsyE,KAAc,opBCvC3B36E,2BAAA,gBASUA,uBAHA,8BAAawC,EAAAihC,YAAY,EAGzBzjC,CAH0B,2BAAA2J,GAAA,OAEPnH,EAAAiJ,gBAAA9B,EAAuB,EAC1C3J,CAD2C,gCAAA2J,GAAA,OACnBnH,EAAA6uJ,uBAAA1nJ,EAA8B,GAC9D3J,sBAAA,wBAKFA,kCARUA,uBAPA,OAAAwC,EAAAkhC,QAOA1jC,CAPgB,UAAAwC,EAAAoJ,QAOhB5L,CANmB,qBAMnBA,CAJwB,gBAAAwC,EAAA8tE,cAIxBtwE,CAH+B,kBAOrBA,wBAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,wUCEjC9L,2BAAA,aAEEA,mBAAA,GACFA,qDADEA,uDAAA,IAAAsxJ,EAAA,gCAPJtxJ,2BAAA,uBAIEA,oCAAA,GAAAA,mBAAA,yCACAA,uBAAA,EAAAuxJ,GAAA,eAIFvxJ,qEANgBA,uBAAA,gBAEWA,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAiiI,4CAevBxxJ,2BAFJ,QAEIA,CAFmB,SAEnBA,CADqB,UACrBA,mBAAA,2CAGJA,yEAHeA,sBAAA,GAAAA,sBAAAuvB,EAAAkiI,gBAAAt3J,OAAA6F,CACsBA,wBAAA,IAAAuvB,EAAAmiI,uCCJvC,MAAOC,GAuBX9yJ,YACUge,EACA4nE,EACD0nC,EACAp/G,EACA6kJ,GAJC7yJ,KAAA8d,cACA9d,KAAA0lF,QACD1lF,KAAAotH,cACAptH,KAAAgO,eACAhO,KAAA6yJ,oBAvBT7yJ,KAAAqc,aAAe,IAAIvS,eAEnB9J,KAAA+R,MAAQC,KACRhS,KAAA+xJ,cAAqC,GAQrC/xJ,KAAA2kC,QAA6B,GAC7B3kC,KAAA0yJ,gBAAqC,GACrC1yJ,KAAA2yJ,SAAW,EAEX3yJ,KAAA8yJ,WAAY,EACZ9yJ,KAAAyyJ,gBAA4B,GAS1BzyJ,KAAKsc,OAAStO,EAAay6D,IAC3BzoE,KAAKif,YACP,CAEAlY,kBAGE,MAAM0tE,EAAOtiE,WAASnS,KAAK+yJ,iBAAiBlmJ,QAAUgmE,GAC7C7yE,KAAK+xJ,cAAc7vJ,SAAS2wE,EAAI1jE,OAAsB,aAAb0jE,EAAI1jE,MAGtDw0C,WAAW,KACT3jD,KAAKyyJ,gBAAkBtgJ,QAAMsiE,EAAM,OAAM,EACxC,EACL,CAEAx1D,aACEjf,KAAKy4D,UAAYz4D,KAAK8d,YAAYqZ,MAAM,GAC1C,CAEA67H,eAAengG,GAGb,GAFA7yD,KAAK2yJ,SAAW,EAChB3yJ,KAAK8yJ,WAAY,EACb3gJ,YAAU0gD,EAAMy4B,SAElBtrF,KAAK0yJ,gBAAkB,GACvB1yJ,KAAK6yD,WAAQj5B,MACR,CAEL,MAAM0xD,EAAUz4B,EAAMy4B,QAAQjnE,OAAQA,GACb,aAAhBA,EAAOlV,MAEhBnP,KAAK8yJ,WAAa3gJ,YAAUm5E,GAC5BtrF,KAAK0yJ,gBAAkB7/F,EAAMtwD,KAC7BvC,KAAK2yJ,SAAWxgJ,UAAQnS,KAAK0yJ,gBAAiB,gBAC9C1yJ,KAAK6yD,MAAQA,CACf,CACA7yD,KAAK0lF,MAAMiE,eACb,CAEA51D,WACE/zB,KAAKqc,aAAanS,KAAKlK,KAAK6yD,OAC5B7yD,KAAKotH,YAAYn0F,OACnB,iDAzEW25H,IAAiC3xJ,8BAAAC,MAAAD,iFAAA8H,kBAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAA,4DAAjC2pJ,GAAiCxpJ,UAAA,qCAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,0NDxBzBE,2EAAA,2CAWQA,+IAgBNA,8FAAmB,iDAC5B,ynBA9BdvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAGAA,oCAAA,KAIIA,2BAHF,aAGEA,CADe,WAEbA,uBAAA,EAAAgyJ,GAAA,yBAUAhyJ,2BAAA,+BAMsBA,uBAAA,wBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAgBwC,EAAAuvJ,eAAApoJ,GAAsB,GAC5D3J,2BACAA,uBAAA,GAAAiyJ,GAAA,cAMFjyJ,2BAEEA,2BADF,YACEA,CADwB,iEACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAKzD9yB,mEAEJA,iCA1CUA,uBAAA,WAAAwC,EAAA2pH,aAEWnsH,sBAAA,GAAAA,sBAAAwC,EAAA0vJ,uCAIXlyJ,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAg1D,WAGex3D,sBAAA,GAAAA,uBAAA,QAAAwC,EAAAqvJ,WAWK7xJ,wBAIAA,uBAJA,UAAAwC,EAAAkhC,QAIA1jC,CAJmB,gBAAAwC,EAAAsuJ,cAInB9wJ,CAH+B,WAAAwC,EAAAiK,SAG/BzM,CAFqB,WAAAwC,EAAAquJ,SAErB7wJ,CADqB,gBAAAA,4BAAA,GAAAK,KAIrCL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAqvJ,WASgB7xJ,sBAAA,GAEAA,uBAFA,OAAAwC,EAAAg1D,UAEAx3D,CAFkB,YAAAwC,EAAAqvJ,WAAA,IAAArvJ,EAAAivJ,gBAAAt3J,OAElB6F,CADuD,aAAAA,wBAAA,MAAAwC,EAAA6Y,iOE/B/Erb,2BAAA,UAAAA,mBAAA,KAC8FA,mDAC9FA,2BAAA,UAAAA,mBAAA,KACgWA,mDAChWA,2BAAA,UAAAA,mBAAA,KAC8MA,4FAIhNA,oCAAA,GACEA,2BAAA,eAEQA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAA6xJ,qBAAoB,gCAInCnyJ,sBAAA,0CAGAA,oCAAA,GAAAA,mBAAA,yCACFA,2GANQA,wBACAA,uBADA,QAAAM,EAAA8xJ,iBACApyJ,CAD0B,eAAAM,EAAA+xJ,aAAAl4J,SAAAmG,EAAAgyJ,WAAAhyJ,EAAAiyJ,oBAE3BvyJ,wBACAA,uBADA,UAAAM,EAAAwQ,MAAAyW,IACAvnB,CADqB,OAAAM,EAAAwQ,MAAA8qD,mCASxB57D,2BADF,SACEA,CAD0C,aACNA,mBAAA,GACtCA,uDADsCA,sBAAA,GAAAA,+BAAA,GAAAwyJ,EAAAr5J,KAAA,KAAAq5J,EAAAnzJ,MAAAo8E,UAAA,+BAmBtCz7E,2BAFF,WAEEA,CADqB,UACrBA,mBAAA,2CACFA,wEADaA,sBAAA,GAAAA,8CAAA,IAAAM,EAAAoxJ,uGArBb1xJ,2BAAA,YACEA,uBAAA,EAAAyyJ,GAAA,eAGAzyJ,2BAAA,UAEGA,uBAAA,mBAAAA,iCAAAqT,GAAArT,4BAAS0yJ,eAAc1yJ,yBAAE,EAAK,gCAC/BA,sBAAA,0CAGAA,oCAAA,GAAAA,mBAAA,yCAEJA,6BACAA,2BAAA,SACEA,sBAAA,6BAIFA,2BACAA,uBAAA,EAAA2yJ,GAAA,0DAlB2B3yJ,+CAAA,UAAAM,EAAA4pF,gBAMlBlqF,sBAAA,GACAA,uBADA,UAAAM,EAAAwQ,MAAAgsF,aACA98F,CAD8B,OAAAM,EAAAwQ,MAAA8qD,QAOf57D,sBAAA,GAEAA,uBAFA,UAAAM,EAAAojC,QAEA1jC,CAFmB,gBAAAA,4BAAA,EAAAyI,IAEnBzI,CAD0C,gBAAAA,4BAAA,EAAAK,KAI5DL,+CAAA,gBAAAM,EAAA4E,OC7BN,MAAO0tJ,GAiCX/zJ,YACU+nB,EACD8pI,EACCp9I,GAFAvU,KAAA6nB,eACD7nB,KAAA2xJ,aACC3xJ,KAAAuU,SAtBVvU,KAAAs/D,SAAW,IAAIx1D,eAGf9J,KAAA8zJ,QAAU,IAAIhqJ,eAEd9J,KAAA+R,MAAQC,KACRhS,KAAA2kC,QAA6B,GAC7B3kC,KAAA2yJ,SAAW,EACX3yJ,KAAAmrF,eAAiB,IAAIxrF,MACrBK,KAAAwzJ,oBAAqB,EAIrBxzJ,KAAA+zJ,SAAW,CACTC,eAAgBxqJ,gCAChByqJ,gBAAiBzqJ,4CACjB0qJ,aAAc1qJ,yCAQdxJ,KAAKm0J,UAAYn0J,KAAKuU,OAAOyK,IAAI9c,SAAS,OAC5C,CAEAuM,WACOzO,KAAKm0J,YACRn0J,KAAK2xJ,YAAY7c,WAAW90I,KAAKmG,MAC5BnG,KAAK2kC,QAAU3kC,KAAK2xJ,WAAW7c,WAAW90I,KAAKmG,MAC/CnG,KAAK2kC,QAAU,GACpB3kC,KAAK2yJ,SAAWxgJ,UAAQnS,KAAK2kC,QAAS,gBACtC3kC,KAAK2xJ,YAAY7c,WACZ90I,KAAKwzJ,mBAAqBxzJ,KAAK2xJ,YAAY7c,WAAWsf,cACtDp0J,KAAKwzJ,oBAAqB,GAEjCxzJ,KAAKq0J,wBACP,CAEAztJ,cACE5G,KAAKq0J,wBACP,CAEAjB,qBACE,MAOMtB,EAAyB,YAAd9xJ,KAAK5F,KAAqB,MAAQ,MAC7Cy+B,EAAe,CACnBnrB,SAAU1N,KAAK0N,SACfylJ,WAAYnzJ,KAAK5F,KACjB03J,SAAUA,EACVntH,QAAS3kC,KAAKszJ,aACdvB,cAboB,CACpB,WACA,sBACA,iBACA,gBACA,iBAUe/xJ,KAAK6nB,aAAagD,KAAK+nI,GAAmC/5H,EAAc,CACvFx+B,KAAM,OAECo5B,kBAAkBpX,aAAa1N,UAAW9S,IACjDmE,KAAK2kC,QAAU9oC,EAAO0G,KACtBvC,KAAK2yJ,SAAWxgJ,UAAQnS,KAAK2kC,QAAS,gBACtC3kC,KAAKmrF,eAAiBtvF,EAAOyvF,QAC7B,MAAMz4B,EAAQ1gD,WAAS,CAAEhM,KAAMnG,KAAKmG,MAAQtK,GACvCmE,KAAKm0J,YACRn0J,KAAK2xJ,WAAW7c,WAAW90I,KAAKmG,MAAQnG,KAAK2kC,QAC7C3kC,KAAK2xJ,WAAW7c,WAAWsf,cACzBp0J,KAAKuzJ,WAAavzJ,KAAK2kC,QAAQvpC,SAAW4E,KAAKszJ,aAAal4J,OAC9D4E,KAAK2xJ,WAAW7c,WAAW90I,KAAKmG,MAAMwsJ,SAAc3yJ,KAAK2yJ,UAE3D3yJ,KAAKs/D,SAASp1D,KAAK2oD,EAAK,EAE5B,CAEQwhG,yBACY,SAAdr0J,KAAKmG,MAAgD,IAA7BnG,KAAKszJ,aAAal4J,OAC5C4E,KAAKqzJ,iBAAmBrzJ,KAAK+zJ,SAASC,eAEjCh0J,KAAKuzJ,UAG8B,IAA7BvzJ,KAAKszJ,aAAal4J,OAC3B4E,KAAKqzJ,iBAAmBrzJ,KAAK+zJ,SAASC,eAEtCh0J,KAAKqzJ,iBAAmBrzJ,KAAK+zJ,SAASG,aAJtCl0J,KAAKqzJ,iBAAmBrzJ,KAAK+zJ,SAASE,eAO5C,CAEAN,eACO3zJ,KAAKm0J,YACRn0J,KAAKwzJ,oBAAqB,EAC1BxzJ,KAAK2xJ,WAAW7c,WAAWsf,eAAmB,EAC9Cp0J,KAAK2xJ,WAAW7c,WAAa,IAE/B,MAAMjiF,EAAQ,CACZ1sD,KAAMnG,KAAKmG,KACXmuJ,eAAgB,IAAIt0J,KAAK2kC,UAE3B3kC,KAAK2kC,QAAU,GACf3kC,KAAK8zJ,QAAQ5pJ,KAAK2oD,EACpB,iDAvHWghG,IAAkC5yJ,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,UAAA,4DAAlC6qJ,GAAkCzqJ,UAAA,sCAAA+C,OAAA,CAAAhG,KAAA,OAAA/L,KAAA,OAAAsT,SAAA,WAAA4lJ,aAAA,eAAAC,UAAA,aAAAhpJ,QAAA,CAAA+0D,SAAA,WAAAw0F,QAAA,WAAAjtI,SAAA,CAAA5lB,kCAAAuJ,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,uBDfxB5C,2EAAA,2CAGaA,6IAEDA,+YAEDA,8PAcPA,gFAcEA,kFAWVA,yFAAc,gkBAhD/BvI,2BADF,UACEA,CAD0B,aAGxBA,oCAAA,GAAAA,mBAAA,yCACAA,2BAAA,eAKEA,uBAJA,EAAAszJ,GAAA,cAIAtzJ,CAH8B,EAAAuzJ,GAAA,cAG9BvzJ,CAD6B,EAAAwzJ,GAAA,eAIjCxzJ,6BACAA,2BAAA,YAcEA,uBAbA,EAAAyzJ,GAAA,sBAaAzzJ,CAbmE,GAAA0zJ,GAAA,yBAAA1zJ,oCAuCvEA,uEAlDuBA,sBAAA,GAAAA,sBAAAwC,EAAArJ,iCAGV6G,sBAAA,GAAAA,uBAAA,gBAAAwC,EAAA0C,MAEAlF,+CAAA,eAAAwC,EAAA0C,MAEAlF,+CAAA,cAAAwC,EAAA0C,MAIMlF,sBAAA,GAA4BA,uBAA5B,WAAAwC,EAAAkhC,QAAAvpC,OAA4B6F,CAAA,WAAA2zJ,mVEf/C3zJ,sBAAA,yDAIEA,2BAAA,YAAAA,mBAAA,0EAE4EA,sEAApDA,sBAAA,GAAAA,8CAAA,IAAAM,EAAA+a,QAAArb,CAAoDA,wBAAA,IAAAM,EAAAgb,8DAMxEtb,2BAAA,uBAAAA,mBAAA,MAMAA,4FAmBUA,2BAHJ,WAGIA,CAFwC,WAExCA,CAD2D,cAOpDA,uBAAA,oBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAUM,EAAAszJ,0BAAyB,GAN1C5zJ,2BAQAA,2BAAA,cAAAA,wBAAA,MAKEA,2BAAA,eACEA,sBAAA,UACFA,2BACFA,wBAEJA,0FAfWA,sBAAA,GACAA,uBADA,KAAA6zJ,EACA7zJ,CADiB,QAAA6zJ,kHAMjB7zJ,wBACAA,uBADA,cAAA6zJ,EACA7zJ,CAD4B,MAAA6zJ,GAEvB7zJ,sBAAA,GAGFA,sBAHE,MAAAM,EAAAwzJ,kBAAA,KAAAxzJ,EAAAwzJ,kBAAA7xJ,QAAA4xJ,GAAAzvJ,MAGFpE,EADR,MAAAM,EAAAwzJ,kBAAA,KAAAxzJ,EAAAwzJ,kBAAAC,sBAAAF,EAAA,mBACQ7zJ,CADR,MAAAM,EAAAwzJ,kBAAA,KAAAxzJ,EAAAwzJ,kBAAA7xJ,QAAA4xJ,GAAAxlE,yDA+EEruF,2BAAA,aAAAA,mBAAA,MAEqDA,sDAlBvDA,2BAFF,WAEEA,CADyD,cAGvDA,oCAAA,GAAAA,mBAAA,0CAEEA,2BADF,cACEA,CADS,UACTA,mBAAA,MAAwCA,2BACxCA,sBAAA,QACAA,2BAAA,UAAAA,mBAAA,MAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,GAAAg0J,GAAA,eAIJh0J,gIAHWA,sBAAA,IAAAA,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,WAAAE,EAAA,gCAmCPtP,2BAAA,aAAAA,mBAAA,MAEqDA,sDAlBvDA,2BAFF,WAEEA,CADwD,cAGtDA,oCAAA,GAAAA,mBAAA,0CAEEA,2BADF,cACEA,CADS,UACTA,mBAAA,MAAuCA,2BACvCA,sBAAA,QACAA,2BAAA,UAAAA,mBAAA,MAEJA,+BACAA,2BAAA,aACEA,sBAAA,eAMAA,uBAAA,GAAAi0J,GAAA,eAIJj0J,gIAHWA,sBAAA,IAAAA,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,UAAAE,EAAA,yEA0BXtP,2BAFF,WAEEA,CADuC,cAMhCA,uBAAA,oBAAAA,0BAAA6T,GAAA,MAAAvT,EAAAN,0BAAA,UAAAA,wBAAUM,EAAAszJ,0BAAyB,GAL1C5zJ,2BAMAA,2BAAA,cAC+BA,mBAAA,GACjCA,yDANSA,0DAAA,KAAAk0J,EAAA5yI,KACAthB,kCAAA,OAAAk0J,EAAA5yI,KACAthB,kCAAA,kBAAAk0J,EAAA5yI,KAGAthB,0DAAA,MAAAk0J,EAAA5yI,KAAwBthB,sDAAAk0J,EAAA7lE,uEAW3CruF,2BAFF,WAEEA,CAD0B,+BAEJA,uBAAA,+BAAAA,0BAAA07E,GAAA,MAAAp7E,EAAAN,0BAAA,UAAAA,wBAAqBM,EAAAqvB,SAAQ,GAKrD3vB,mIAJwBA,wBAEAA,uBAFA,OAAAM,EAAAkR,KAEAxR,CAFa,eAAAm0J,EAAAzwH,QAAAvpC,SAAAmG,EAAA8zJ,iBAEbp0J,CADgF,aAAAM,EAAA8zJ,iBAAA,cAAA9zJ,EAAAyM,aAAA27D,0EAnN1G1oE,2BAAA,YAEEA,uBAAA,EAAAq0J,GAAA,cAIEr0J,2BADF,WACEA,CAD0B,eAKxBA,uBAAA,EAAAs0J,GAAA,yBAUMt0J,2BAHN,WAGMA,CAHiB,WAGjBA,CAFwB,UAExBA,CAD2B,eAMnBA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAi0J,qBAAoB,GALrCv0J,mBAAA,MAQJA,+BAGEA,2BAFF,YAEEA,CADwC,aAEtCA,uBAAA,GAAAw0J,GAAA,cAmCJx0J,6BAGIA,2BAFJ,YAEIA,CAFwB,WAExBA,CAD2B,gBAKnBA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAi0J,qBAAoB,GAJrCv0J,mBAAA,MAOJA,+BAMQA,2BALR,YAKQA,CAJmC,YAInCA,CAHsB,YAGtBA,CAFmB,cAEnBA,CADQ,2CAOyBA,uBADA,oBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAYM,EAAAm0J,kBAAA9qJ,GAAyB,EACrC3J,CADsC,mBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC3BM,EAAAo0J,iBAAA/qJ,GAAwB,GAEtE3J,6BAIEA,2BADF,cACEA,CADQ,aACRA,mBAAA,MAA2BA,2BAG3BA,2BAAA,2CAMiCA,uBADA,oBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAYM,EAAAm0J,kBAAA9qJ,GAAyB,EACrC3J,CADsC,mBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC3BM,EAAAo0J,iBAAA/qJ,GAAwB,GAEpE3J,2BAGAA,uBAAA,GAAA20J,GAAA,eAyBA30J,2BAAA,2CAMiCA,uBADA,oBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAYM,EAAAm0J,kBAAA9qJ,GAAyB,EACrC3J,CADsC,mBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC3BM,EAAAo0J,iBAAA/qJ,GAAwB,GAEpE3J,2BAGAA,uBAAA,GAAA40J,GAAA,eA0BR50J,iCAKIA,2BAFJ,YAEIA,CAFwB,WAExBA,CAD2B,gBAC3BA,mBAAA,MAOJA,+BAGIA,2BAFJ,YAEIA,CAF0C,YAE1CA,CAD0B,aAGxBA,uBAAA,GAAA60J,GAAA,cAgBZ70J,qCAEAA,uBAAA,GAAA80J,GAAA,cASF90J,iKAnNQA,+CAAA,QAAAM,EAAAy0J,WAIE/0J,sBAAA,GAAAA,uBAAA,YAAAM,EAAAkR,MAEaxR,sBAAA,GAAAA,uBAAA,eAAAM,EAAAwzJ,mBAAAxzJ,EAAAwzJ,kBAAAC,qBAcH/zJ,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAA2vE,IAAArvE,EAAA8zJ,mBAMPp0J,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAq8I,GAAA/7I,EAAA8zJ,mBAG2Bp0J,sBAAA,GAAAA,uBAAA,UAAAM,EAAA00J,aAwCpBh1J,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAA2vE,GAAArvE,EAAA8zJ,mBAMPp0J,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAq8I,IAAA/7I,EAAA8zJ,mBAOoCp0J,sBAAA,GACAA,uBADA,eAAAM,EAAA+xJ,aACAryJ,CAD6B,gBAAAM,EAAA+xJ,aAAAl4J,QAe7B6F,sBAAA,GAIAA,uBAJA,eAAAM,EAAA+xJ,aAIAryJ,CAJ6B,gBAAAm0J,EAAAzwH,QAAAvpC,OAI7B6F,CAH4D,WAAAM,EAAAmM,UAQvFzM,sBAAA,GAAAA,uBAAA,WAAAi1J,EAAAvxH,QAAAvpC,QA2B2B6F,wBAIAA,uBAJA,eAAAM,EAAA+xJ,aAIAryJ,CAJ6B,gBAAAm0J,EAAAzwH,QAAAvpC,OAI7B6F,CAH4D,WAAAM,EAAAmM,UAQvFzM,sBAAA,GAAAA,uBAAA,WAAAk1J,EAAAxxH,QAAAvpC,QA2CiB6F,sBAAA,GAAAA,uBAAA,UAAAM,EAAA60J,aAkB/Bn1J,+CAAA,QAAAM,EAAA80J,gBCrKF,MAAOC,WAAyB/4I,KAoDpCzd,YACSkO,EACCE,EACAE,EACAq0I,EACAluI,EACAsT,EACA8pI,EACA5zI,GAER1P,QATOrO,KAAAgO,eACChO,KAAAkO,qBACAlO,KAAAoO,cACApO,KAAAyiJ,cACAziJ,KAAAuU,SACAvU,KAAA6nB,eACA7nB,KAAA2xJ,aACA3xJ,KAAA+d,cA9CV/d,KAAAg2J,WAAY,EAGZh2J,KAAAq2J,eAAgB,EAENr2J,KAAAu2J,eAA2C,IAAIzsJ,eAE/C9J,KAAAw2J,qBAA6C,IAAI1sJ,eAEjD9J,KAAAy2J,SAAkC,IAAI3sJ,eAEhD9J,KAAA+R,MAAQC,KAGRhS,KAAA6M,QAAgC,GAEhC7M,KAAA02J,WAAgC,GAEhC12J,KAAAszJ,aAAkC,GAClCtzJ,KAAA22J,kBAA2B,GAC3B32J,KAAA42J,gBAAyB,GACzB52J,KAAA62J,iBAA0B,GAC1B72J,KAAA0N,SAAW,GACX1N,KAAA82J,WAAa,IAAIjgB,GAMjB72I,KAAAo2J,YAA4B,GAE5Bp2J,KAAA8sJ,iBAAkB,EAElB9sJ,KAAAq1J,kBAAmB,EAGnBr1J,KAAAi2J,YAAchkJ,OAAOpJ,OAAOyoJ,IAa1BtxJ,KAAKuc,SAAW/S,gBAChBxJ,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAK6mB,SAAW,CACdkwI,UAAW,CACTx0I,IAAK,YACL+sE,KAAM9lF,wBAGVxJ,KAAKo2J,YAAcjkJ,QAAMnS,KAAK6mB,SAAU,CAACspD,EAAG5tD,IAAQtQ,OAAOg6B,OAAOkkC,EAAG,CAAE5tD,IAAKA,KAC5EviB,KAAKif,YACP,CAEAxQ,WACEzO,KAAKoO,YAAYM,SAASC,UAAWD,IACnC1O,KAAK8sJ,gBAAkBp+I,EAAOuB,UAC1BvB,EAAOuB,UACTjQ,KAAKg3J,iBAELh3J,KAAK0gG,aAAW,GAIpB1gG,KAAK2xJ,WAAW/b,uBAAuBjnI,UAAWzL,IAChDlD,KAAK+0J,kBAAoB7xJ,EACpBlD,KAAK2xJ,WAAWsF,oBACnBj3J,KAAKyS,KAAKC,IAAI,oBAAoBiN,SAAS3f,KAAK+0J,mBAAmBC,oBAGjEh1J,KAAK+0J,mBAAmBC,oBAC1Bh1J,KAAKk3J,gBAAc,GAKnBl3J,KAAK2xJ,WAAWsF,qBAClBj3J,KAAKyS,KAAON,cAAYnS,KAAK2xJ,WAAWsF,oBACxCj3J,KAAKyS,KACFC,IAAI,oBACJiN,SAAS3f,KAAK2xJ,WAAWsF,mBAAmB32J,OAAO62J,mBAExDn3J,KAAKq1J,iBAAmBr1J,KAAK2xJ,WAAW5c,wBACxC/0I,KAAKyS,KAAKC,IAAI,YAAYimD,aAAahqD,UAAWrO,GAAUN,KAAKu3I,SAAS,MAAOj3I,IACjFN,KAAKyS,KAAKC,IAAI,WAAWimD,aAAahqD,UAAWrO,GAAUN,KAAKu3I,SAAS,KAAMj3I,IAC/E6R,SAAOnS,KAAK6mB,SAAWwkB,IACrBrrC,KAAKyS,KACFC,IAAI,YACJA,IAAI24B,EAAQ9oB,KACZo2C,aAAahqD,UAAWrO,GAAUN,KAAKo3J,kBAAkB/rH,EAAQ9oB,IAAKjiB,GAAM,EAEnF,CAEA2e,aACEjf,KAAKyS,KAAO,IAAIU,KAAY,CAC1BkkJ,SAAU,IAAIjkJ,qBAAmB,GACjCkkJ,QAAS,IAAIlkJ,qBAAmB,GAChCyT,SAAU,IAAI1T,KACZnT,KAAKo2J,YAAYztJ,OAAO,CAACk8I,EAAah4D,KAEpCg4D,EAAIh4D,EAAEtqE,KAAO,IAAInP,qBAAmB,CAAE9S,OAAO,EAAOiqC,UAAU,IACvDs6G,GACN,KAELsS,iBAAkB,IAAI/jJ,qBAAmB,IAE7C,CAEA4jJ,iBACEh3J,KAAKyiJ,YAAY78G,sBAAsBj3B,UACpCg2B,IACC3kC,KAAK02J,WAAavkJ,WAASwyB,EAAS,aACpC3kC,KAAKszJ,aAAe,IAAItzJ,KAAK02J,YAC7B12J,KAAKwgB,cAAY,EAEnB,KACExgB,KAAK02J,WAAa,GAClB12J,KAAKszJ,aAAe,GACpBtzJ,KAAKygG,cAAY,EAGvB,CAEA82C,SAASpxI,EAAcqxI,GACA,iBAAVA,GAGPA,GAAS,GACXx3I,KAAK82J,WAAWvf,SAASpxI,EAAMqxI,EAEnC,CAEA4f,kBAAkB70I,EAAag1I,GAC7Bv3J,KAAK82J,WAAWrf,WAAWl1H,EAAKg1I,EAClC,CAEAL,iBACEl3J,KAAKo2J,YAAYpvJ,QAASqkC,IACxBrrC,KAAKyS,KAAKC,IAAI24B,EAAQ9oB,KAAKkB,OAAO,CAAE28E,WAAW,GAAO,EAE1D,CAEAo3D,kBACEx3J,KAAKo2J,YAAYpvJ,QAASqkC,IACxB,MAAMz3B,EAAU5T,KAAKyS,KAAKC,IAAI24B,EAAQ9oB,KACtC3O,EAAQqM,QAAQ,CAAEmgF,WAAW,IAC7BxsF,EAAQ+L,UAAS,EAAO,CAAEygF,WAAW,GAAO,EAEhD,CAEAs1D,kBAAkB7iG,GAGhB,GAFA7yD,KAAKszJ,aAAezgG,EAAMu4B,QAEP,SAAfv4B,EAAM1sD,KAAiB,CAGzB,MAAMsxJ,EAAiBtlJ,SAAO0gD,EAAMy4B,QAAS,CAAEn8E,KAAM,aACjDsoJ,GACFz3J,KAAK0N,SAAW+pJ,EAAen3J,MAAMm8E,IACrCz8E,KAAKszJ,aAAezgG,EAAMu4B,QAAQ/mE,OAAQugB,GACjCA,EAAOl3B,WAAa1N,KAAK0N,UAElC1N,KAAK82J,WAAW5f,eAAel3I,KAAK0N,WAEpC1N,KAAK82J,WAAW5f,eAAe,KAEjCl3I,KAAKk3J,gBACP,CACAl3J,KAAK82J,WAAW1f,mBAAmBvkF,EAAM1sD,KAAM0sD,EAAMy4B,SAErDtrF,KAAKu2J,eAAersJ,KAAKlK,KAAK82J,WAChC,CAEAnB,iBAAiB9iG,GACf,GAAmB,SAAfA,EAAM1sD,KACRnG,KAAK0N,SAAW,GAChB1N,KAAKszJ,aAAe,IAAItzJ,KAAK02J,YAC7B12J,KAAK03J,yBAAyB/yH,QAAU,GACxC3kC,KAAK23J,wBAAwBhzH,QAAU,GACvC3kC,KAAKw3J,kBACLx3J,KAAK82J,WAAWvsI,QAChBvqB,KAAKyS,KAAKC,IAAI,YAAYiN,SAAS,EAAG,CAAEygF,WAAW,IACnDpgG,KAAKyS,KAAKC,IAAI,WAAWiN,SAAS,EAAG,CAAEygF,WAAW,QAC7C,CACLpgG,KAAKszJ,aAAe,IAAItzJ,KAAKszJ,gBAAiBzgG,EAAMyhG,gBACpDt0J,KAAK82J,WAAWxf,qBAAqBzkF,EAAM1sD,MAC3C,MAAMyxJ,EAAkB,GAAG/kG,EAAM1sD,YACjCnG,KAAKyS,KAAKC,IAAIklJ,GAAiBj4I,SAAS,EAAG,CAAEygF,WAAW,GAC1D,CACF,CAEAy0D,0BACE,MAAM/jH,EAAS9wC,KAAKyS,KAAKC,IAAI,oBAAoBpS,MAC3Cy2J,EAAY/2J,KAAKyS,KAAKC,IAAI,aAAapS,MAC7CN,KAAKw2J,qBAAqBtsJ,KAAK,CAAE4mC,OAAQA,EAAQimH,UAAWA,GAC9D,CAEAvB,qBACEx1J,KAAKq1J,kBAAoBr1J,KAAKq1J,iBACzBr1J,KAAKq1J,kBAAsE,IAAlDr1J,KAAK63J,0BAA0BlzH,QAAQvpC,OAGnE4E,KAAKk3J,iBAFLl3J,KAAKw3J,kBAIPx3J,KAAKy2J,SAASvsJ,KAAKlK,KAAKq1J,iBAC1B,CAEAzkI,SACE,GAAI5wB,KAAKq1J,iBAAkB,CACzB,MAEMyC,EAAiB,CAAEhnH,OAFV9wC,KAAKyS,KAAKC,IAAI,oBAAoBpS,MAERy2J,UADvB/2J,KAAKyS,KAAKC,IAAI,aAAapS,OAGvCi1I,EAAa,GADLv1I,KAAK+0J,kBAAkB7xJ,QAAQ40J,EAAehnH,QAAQzrC,mBAEpErF,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,OAASsZ,KAASne,OAAQ,CAC/CilG,YAAaowB,IAEfvwH,KAAMhlB,KAAK2xJ,WAAW1sI,OAAO,CAAC6yI,GAAiBviB,EAAY,gBAE5D5mI,UAAU,CACTyW,SAAUA,KACRplB,KAAKuU,OAAOC,SAAS,CAAC,QAAO,GAGrC,KAAO,CAEL,MAAMqe,EAAO7yB,KAAKkO,mBAAmBmrB,cACrCr5B,KAAK82J,WAAW7f,QAAQ,aAAapkH,KAAQ1gB,aAC5BnS,KAAK6nB,aAAagD,KAAK6mI,GAAkC,CACxEpc,YAAa,CAACt1I,KAAK82J,WAAW9f,QAEvBvjH,kBAAkBpX,aAAa1N,UAAU,KAChD3O,KAAKuU,OAAOC,SAAS,CAAC,QAAO,GAE/BxU,KAAK+3J,mBAAmBC,aAAa3xI,SAAU,CACjD,CACF,CAEA2D,cACEhqB,KAAK2xJ,WAAWsF,mBAAqB9kJ,cAAYnS,KAAKyS,MACtDzS,KAAK2xJ,WAAW5c,wBAA8E,IAApD/0I,KAAK63J,2BAA2BlzH,SAASvpC,MACrF,iDAxQWk7J,IAAgBr1J,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,UAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,KAAA,4DAAhBswI,GAAgBltJ,UAAA,kBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,+xBDhBJE,+FAiDAA,0FAoBIA,2FAsFJA,qFAjLCA,sHAAA,kCAAyB,qCASxBA,qLAiCCA,2EAAA,kCACL,oCACL,wCACE,mCAAM,mCAAiD,oCACzD,2CA+DqBA,sFAENA,0GAEAA,6HAYFA,wHAoBQA,sFAENA,0GAEAA,8HAYFA,u6EArK/BvI,uBAFA,EAAAg3J,GAAA,mCAEAh3J,CAFoD,EAAAi3J,GAAA,sBAAxBj3J,uBAAA,QAAAwC,EAAAqpJ,iBAGtB7rJ,+CAAA,gBAAAwC,EAAA4iB,2bE2BIplB,2BAAA,aAEEA,oCAAA,GAAAA,mBAAA,yCACFA,mDACAA,2BAAA,aAEEA,oCAAA,GAAAA,mBAAA,0CACFA,qDAHAA,uBAJA,EAAAk3J,GAAA,cAIAl3J,CAH+B,EAAAm3J,GAAA,iHADxBn3J,uBAAA,OAAAM,EAAA82J,SAAAhoJ,UAAA,WAAAioJ,EAAA,aAIAr3J,+CAAA,OAAAM,EAAA82J,SAAAhoJ,UAAA,WAAAioJ,EAAA,uCA+BPr3J,2BAAA,UACEA,oCAAA,GAAAA,mBAAA,0CACFA,qDAFAA,uBAAA,EAAAs3J,GAAA,kHAAOt3J,uBAAA,OAAAM,EAAA82J,SAAAhoJ,UAAA,OAAAioJ,EAAA,oCAXTr3J,2BAFF,WAEEA,CADwB,uBACxBA,wBAAA,MAGEA,sBAAA,cAMFA,mDACAA,uBAAA,EAAAu3J,GAAA,yBAAAv3J,oCAKFA,mDAuBEA,2BADF,QACEA,CAD4B,qBAC5BA,mBAAA,MAKFA,8FA1FJA,oCAAA,GAQMA,2BAPN,cAOMA,CAJW,WAIXA,CAHiB,WAGjBA,CADqB,uBAInBA,oCAAA,GAAAA,mBAAA,yCACAA,2BAAA,cAQOA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAk3J,qBAAoB,GACtCx3J,6BACAA,uBAAA,EAAAy3J,GAAA,yBAAAz3J,oCAUAA,2BAAA,mBACEA,mBAAA,sDAEEA,2BADF,WACEA,CADU,YACVA,wBAAA,MAC6CA,sBAAA,QAAgDA,mDAC7FA,2BAAA,YAAAA,wBAAA,MAC4BA,sBAAA,QAAoCA,mDAChEA,2BAAA,YAAAA,wBAAA,MAC4CA,sBAAA,QAAwFA,wBAG1IA,iCAEAA,uBAAA,GAAA03J,GAAA,cAoBE13J,2BADF,YACEA,CADqB,uBAcNA,uBAAA,wBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAAM,EAAAq3J,aAAAhuJ,EAAA,GAbf3J,wBAAA,MAeEA,sBAAA,wBACFA,wBACFA,6BAEAA,uBAAA,GAAA43J,GAAA,cAOF53J,2BACAA,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAqBM,EAAAqvB,SAAQ,GAKrD3vB,2IA9FMA,+CAAA,YAAAM,EAAA82J,UAMgBp3J,sBAAA,GACAA,uBADA,WAAAM,EAAA82J,SAAAjnJ,SAAA1D,SAAA4D,OAAA/P,EAAA82J,SAAAjnJ,SAAA1D,SAAA6D,MACAtQ,CADiF,cAAA63J,GAUxF73J,sBAAA,GAAAA,uBAAA,WAAAM,EAAA82J,SAAAjnJ,SAAA1D,SAAA4D,OAAA/P,EAAA82J,SAAAjnJ,SAAA1D,SAAA6D,OA2BLtQ,sBAAA,IAAAA,uBAAA,QAAAM,EAAA03I,aA2BWh4I,sBAAA,GACAA,uBADA,kBACAA,CADqB,QAAAM,EAAAq3J,cAWhC33J,sBAAA,GAAAA,uBAAA,QAAAM,EAAAw3J,iBASc93J,wBAEAA,uBAFA,OAAAM,EAAA82J,SAEAp3J,CAFiB,aAAAA,wBAAA,MAAAM,EAAA+a,QAAA,IAAArb,wBAAA,MAAAM,EAAAgb,UAEjBtb,CADmE,iBCrF7F,MAAMi6F,GAAQ,QAMR,MAAO89D,WAA0Bz7I,KAoBrCzd,YACUyU,EACAvG,EACAy0I,EACA1kI,EACAL,EAEsCq7I,GAE9C1qJ,QARQrO,KAAAuU,SACAvU,KAAAgO,eACAhO,KAAAyiJ,cACAziJ,KAAA+d,cACA/d,KAAA0d,QAEsC1d,KAAA+4J,kBA1BhD/4J,KAAA2wD,MAAgB,EAKhB3wD,KAAAi5J,cAA0B,GAK1Bj5J,KAAAi5I,aAAc,EACdj5I,KAAA44J,aAA+B,GAE/B54J,KAAA62B,SAAW,IAAIC,KAAe,CAC5BC,MAAOvtB,gCACP6a,OAAQ7a,gCACRgf,IAAKhf,uBAaLxJ,KAAKuc,SAAW/S,gBAChBxJ,KAAKsc,OAAStc,KAAKgO,aAAay6D,GAClC,CAEAh6D,WACMzO,KAAKuU,OAAOyK,IAAI9c,SAASg5F,MAC3Bl7F,KAAKw9D,QAAU09B,IAEjBl7F,KAAK2wD,KAA6B,UAAtB3wD,KAAK0d,MAAMmoC,OACvB7lD,KAAKif,aACL,MAAMi6I,EAAc,IAAInsE,KAAwB,QAChD/sF,KAAKyiJ,YAAY/+H,KAAKw1I,EAAYvuD,WAAY,SAASh8F,UAAWgb,IAChE3pB,KAAKm5J,UAAYxvI,EAAKzsB,IAAKonC,GAClBA,EAAK52B,UAEd1N,KAAKwgB,cAAY,GAGnBxgB,KAAKyiJ,YAAY19G,YAAYp2B,UAAWgb,IACtC,MAAMyvI,EAAe,IAAIxrE,IAAIjkE,EAAK/gB,OAAO5I,KAAKyiJ,YAAYr+G,mBAC1DpkC,KAAK44J,aAAej5J,MAAMo/C,KAAKq6G,GAAcl8J,IAAKyE,KACvCvH,KAAMuH,EAAOzH,QAASyH,IAChC,EAEL,CAGA82J,qBACoBz4J,KAAKq4J,SAAS3lJ,IAAI,YAAYpS,MACtC9E,MAAM,gBAAmBwE,KAAKi5I,aAAc,EAASj5I,KAAKi5I,aAAc,CACpF,CAEQh6H,aACNjf,KAAKq4J,SAAW,IAAIllJ,KAAY,CAC9BzF,SAAU,IAAI0F,qBAAmB,GAAI,CACnCC,WAAY,CACVC,aAAWC,SACXuO,MAAaC,OAAO,aAAerU,GAC1B1N,KAAKm5J,YAAkD,IAArCn5J,KAAKm5J,UAAUp9J,QAAQ2R,OAItD62B,KAAM,IAAInxB,qBAAmB,GAAI,CAC/BC,WAAY,CAACyO,MAAazU,QAE5B3M,OAAQ,IAAI0S,qBAAmB,IAC/B6xB,YAAa,IAAI7xB,sBAErB,CAEQimJ,wBAAwB3rJ,GAE9B,OAAOA,EAASxL,SAAS,IAC3B,CAEQo3J,mBAAmB5rJ,GAGzB,OAAOA,EAASxL,SAAS,MAAQwL,EAASxL,SAAS,OAASwL,EAASlS,MAAM,gBAC7E,CAEQ+9J,cAAc7rJ,GAGpB,OAAOA,EACJtF,QAAQ,mBAAoB,UAC5BA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,KAAM,IACnB,CAGQoxJ,qBAAqB9rJ,GAC3B,GAAI1N,KAAKs5J,mBAAmB5rJ,GAAW,CACrC,MAAM+rJ,EAAgBz5J,KAAKu5J,cAAc7rJ,GACzC1N,KAAKi5J,cAAgBx8J,KAAOg9J,EAC9B,SAAWz5J,KAAKq5J,wBAAwB3rJ,GAAW,CACjD,IAAIgsJ,EAAY,GAChBA,EAAYhsJ,EAAS/Q,MAAM,KAC3B+8J,EAAU1yJ,QAASs9B,IACjB,GAAItkC,KAAKs5J,mBAAmBh1H,GAAO,CACjC,MAAMm1H,EAAgBz5J,KAAKu5J,cAAcj1H,GACzCtkC,KAAKi5J,cAAgBj5J,KAAKi5J,cAAcrwJ,OAAOnM,KAAOg9J,GACxD,MACEz5J,KAAKi5J,cAAc/8J,KAAKooC,EAAI,EAGlC,MAEEtkC,KAAKi5J,cAAc/8J,KAAKwR,EAE5B,CAEAkjB,SACE,MAAMljB,EAAW1N,KAAKq4J,SAAS3lJ,IAAI,YAAYpS,MAC/CN,KAAKw5J,qBAAqB9rJ,GAC1B1N,KAAKukC,KAAOvkC,KAAKq4J,SAAS3lJ,IAAI,QAAQpS,MACtCN,KAAK0O,OAAS1O,KAAKq4J,SAAS3lJ,IAAI,eAAepS,MAAQ,cAAgB,GACvEN,KAAK25J,UAAY35J,KAAKq4J,SAAS3lJ,IAAI,UAAUpS,MACzCN,KAAKw9D,UAAY09B,KAAUl7F,KAAK25J,UAAUz3J,SAAS,iBACrDlC,KAAK25J,UAAUz9J,KAAK,gBAEtB8D,KAAKi5J,cAAcjyJ,QAAS4yJ,IAC1B55J,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,QAAUsZ,KAASoqC,IAAK,CAC7C/6D,SAAUksJ,IAEZ50I,KAAMhlB,KAAKyiJ,YAAYx9H,OAAO20I,EAAU55J,KAAKukC,KAAMvkC,KAAK25J,UAAW35J,KAAK0O,UAEzEC,UAAU,CACT4S,MAAOA,KACLvhB,KAAKq4J,SAAS9yI,UAAU,CAAEE,gBAAgB,GAAM,EAElDL,SAAUA,KACRplB,KAAKwwD,YAAU,GAElB,EAEP,CAEAA,aACExwD,KAAKw9D,UAAY09B,GACbl7F,KAAKuU,OAAOC,SAAS,CAACxU,KAAKw9D,QAAS,CAAE/oD,QAAS,CAAEC,MAAO,SACvD1U,KAAK2wD,MAAO,CACnB,iDA5JWqoG,IAAiB/3J,8BAAAC,UAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAC,kBAAAD,8BA2BlB,kBAAiB,+DA3BhB+3J,GAAiB5vJ,UAAA,mBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,kCDjBjB5C,2EAAA,kCAAyB,qCAyEFA,6FA5DPA,gGAyBRA,+GAAoC,6EAA2C,yCAE/EA,8FAAmB,iEAA+B,yCAElDA,8GAAmC,sHAAoF,wCAwClIA,2EAAA,iDAAmB,oDAvDEA,sGAIAA,qHAoBFA,2FACnB,+CASqBA,oHA6BJA,0vCA5FzBvI,2BAHF,iBAGEA,CADsC,yBACpBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAEFA,6BACAA,uBAAA,EAAA44J,GAAA,yBAmGF54J,kCAxGWA,uBADA,OAAAwC,EAAAktD,KACA1vD,CADa,0BAIXA,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAEhDtb,+CAAA,gBAAAwC,EAAA4iB,whBEPjBplB,sBAAA,0DAEUA,uBADA,OAAA+K,EAAA24B,QACA1jC,CADgB,UAAA+K,EAAAa,iCAG1B5L,2BAAA,uBAAAA,mBAAA,KAEsDA,qDAKlDA,sBAAA,oEACUA,uBAAA,QAAA64J,EAAAjmB,gCAFZ5yI,oCAAA,GACEA,uBAAA,EAAA84J,GAAA,gHAAW94J,+CAAA,OAAA64J,EAAAx1H,OAAAt4B,EAAA0B,oCADbzM,uBAAA,EAAA+4J,GAAA,iDAAmC/4J,uBAAA,UAAAgmB,6BAQnChmB,+BAAA,wHACcA,uBADA,0BAAA+K,EAAA4qI,MAAAqjB,EAAAC,EACAj5J,CADmE,0BAAAA,4BAAA,EAAA2vE,GAAAz2C,8BAQ/El5B,sBAAA,oEACUA,uBAAA,QAAAk5J,8BAFZl5J,oCAAA,GACEA,uBAAA,EAAAm5J,GAAA,gHAAWn5J,+CAAA,OAAAk5J,EAAAj4J,SAAA8J,EAAA4qI,kCADb31I,uBAAA,EAAAo5J,GAAA,8CAAiCp5J,uBAAA,UAAAq5J,8BAQjCr5J,oCAAA,GACEA,sBAAA,+EACUA,+CAAA,QAAAs5J,6BAFZt5J,uBAAA,EAAAu5J,GAAA,8CAAiCv5J,uBAAA,UAAAw5J,2BASjCx5J,2BAAA,UAAAA,mBAAA,0CACkCA,kCAAvBA,sBAAA,GAAAA,8CAAA,+DACXA,2BAAA,UAAwCA,mBAAA,sCAAmDA,8GAAnDA,uDAAA,KAAAA,wBAAA,IAAAguE,EAAA7I,IAAAp6D,EAAA0uJ,oBAAA,+BACxCz5J,2BAAA,UAAwCA,mBAAA,sCAAmDA,8GAAnDA,uDAAA,KAAAA,wBAAA,IAAAguE,EAAAhwE,IAAA+M,EAAA0uJ,oBAAA,+BACxCz5J,2BAAA,UAAuCA,mBAAA,sCAA+DA,8GAA/DA,uDAAA,GAAAguE,EAAA7I,IAAA,OAAAnlE,wBAAA,IAAAguE,EAAAhwE,IAAA+M,EAAA0uJ,oBAAA,8BAAvCz5J,uBAJA,EAAA05J,GAAA,cAIA15J,CAHW,EAAA25J,GAAA,cAGX35J,CAFwC,EAAA45J,GAAA,cAExC55J,CADwC,EAAA65J,GAAA,yCAHjC75J,uBAAA,eAAAguE,KAAA8rF,0BAEA95J,+CAAA,cAAAguE,EAAA,KAAAA,EAAA7I,QAAA,MAAA6I,KAAAhwE,MACAgC,+CAAA,cAAAguE,EAAA,KAAAA,EAAAhwE,QAAA,MAAAgwE,KAAA7I,MACAnlE,+CAAA,cAAAguE,EAAA,KAAAA,EAAAhwE,OAAA,MAAAgwE,EAAA,KAAAA,EAAA7I,gCAKPnlE,mBAAA,6BAAAA,+BAAA,IAAA+5J,EAAA,OCrCI,MAAOC,GAyBXn7J,YACU2iJ,EACAvoE,EACAy3E,GAFA3xJ,KAAAyiJ,cACAziJ,KAAAk6E,WACAl6E,KAAA2xJ,aA1BV3xJ,KAAA0N,SAAW,GAEX1N,KAAA42I,MAAgB,KAGhB52I,KAAAk7J,SAAU,EAWVl7J,KAAA2kC,QAAsB,KACtB3kC,KAAA6M,QAA2B,GAC3B7M,KAAA06J,mBAAqB,CACnB,KAAM,SACNS,MAAO,UAON,CAEH1sJ,WACEzO,KAAK6M,QAAU,CACb,CAAEsC,KAAM,QAAS/U,KAAMoP,qBAAsB4xJ,SAAU,KACvD,CACEjsJ,KAAM,QACN/U,KAAMoP,2BACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHm+J,KAAM,CAAE/6J,MAAOkJ,gBAAiByyD,MAAO,iBACvCvhC,QAAS,CAAEp6B,MAAOkJ,mBAAoByyD,MAAO,iBAC7Cq/F,IAAK,CAAEh7J,MAAOkJ,eAAgByyD,MAAO,gBACrCs/F,MAAO,CAAEj7J,MAAOkJ,iBAAkByyD,MAAO,cACzC7T,QAAS,CAAE9nD,MAAOkJ,mBAAoByyD,MAAO,iBAInD,CACE9sD,KAAM,wBACN/U,KAAMoP,2BACN6F,aAAcrP,KAAKw7J,wBAErB,CACErsJ,KAAM,wBACN/U,KAAMoP,oCACN6F,aAAcrP,KAAKy7J,gCACnBzsJ,KAAMhP,KAAKk6E,SACXpH,UAAU,GAEZ,CAAE3jE,KAAM,WAAY/U,KAAMoP,uBAAwB6F,aAAcrP,KAAK07J,kBACrE,CAAEvsJ,KAAM,UAAW/U,KAAMoP,mBAAoB6F,aAAcrP,KAAK27J,oBAEpE,CAEA/0J,cACE,MAAMg1J,EAAmBj3H,GAAyB3kC,KAAK2kC,QAAUA,EAC7D3kC,KAAKk7J,SAA0B,OAAfl7J,KAAK42I,MACvB52I,KAAK2xJ,WAAWjtH,WAAW1kC,KAAK42I,OAAOjoI,UAAUitJ,GACxC57J,KAAK0N,UACd1N,KAAKyiJ,YAAY/9G,WAAW1kC,KAAK0N,UAAUiB,UAAUitJ,EAEzD,iDAzEWX,IAAmBh6J,8BAAAC,MAAAD,8BAAA8H,YAAA9H,8BAAA+H,IAAA,4DAAnBiyJ,GAAmB7xJ,UAAA,qBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,+oBDRXE,8GAqCRA,2EAAA,qbAMbvI,uBAjDA,EAAA46J,GAAA,iBAiDA56J,CA/C8B,EAAA66J,GAAA,uBA+C9B76J,CA3CqB,EAAA86J,GAAA,yBAAA96J,mCA2CrBA,CAxCoC,EAAA+6J,GAAA,yBAAA/6J,mCAwCpCA,CAhCoC,EAAAg7J,GAAA,yBAAAh7J,mCAgCpCA,CAzBmC,EAAAi7J,GAAA,yBAAAj7J,mCAyBnCA,CAjBmC,GAAAk7J,GAAA,yBAAAl7J,mCAiBnCA,CARoC,GAAAm7J,GAAA,yBAAAn7J,0CAzCzBA,uBAAA,OAAAwC,EAAAiK,UAAA,OAAAjK,EAAAmzI,OAKM31I,+CAAA,YAAAwC,EAAAiK,UAAA,OAAAjK,EAAAmzI,+IEJf31I,2BAAA,uBAAAA,mBAAA,KAEmDA,mDACnDA,2BAAA,uBAAAA,mBAAA,KAGYA,mDAGVA,2BAAA,uBAAAA,mBAAA,KAE6CA,sDAUrCA,oCAAA,GACEA,2BAAA,uBAC+BA,mBAAA,GAA8BA,oHAA9BA,sBAAA,GAAAA,8BAAAo7J,EAAA/7J,MAAAg8J,qCAI/Br7J,2BAAA,uBAAAA,mBAAA,KAM4BA,mDAG1BA,oCAAA,GACEA,2BAAA,uBAAAA,mBAAA,MAK2BA,uFAG3BA,2BAAA,uBAAAA,mBAAA,MAK2BA,qDAN7BA,uBARA,EAAAs7J,GAAA,sBAQAt7J,CARiF,EAAAu7J,GAAA,yBAAAv7J,qHAArBA,uBAA7C,OAAAo7J,EAAA/7J,MAAAghB,KAAAm7I,aAAAC,OAA6Cz7J,CAAA,WAAA07J,8BAT9D17J,uBAAA,EAAA27J,GAAA,8DAOA37J,uBAAA,EAAA47J,GAAA,yBAAA57J,qJAP+EA,uBAA9D,OAAAA,wBAAA,UAAAo7J,EAAA/7J,MAAAghB,KAAA,KAAA+6I,EAAA/7J,MAAAghB,KAAAm7I,aAAArsJ,EAAA0sJ,SAA8D77J,CAAA,WAAA87J,6BAoCzE97J,sBAAA,+EAEoBA,uBADA,mBACAA,CADsB,OAAAo7J,EAAA/7J,MAAAghB,8BAE1CrgB,2BAAA,uBAAAA,mBAAA,MAGqEA,sDANrEA,uBAAA,EAAA+7J,GAAA,kEAGA/7J,uBAAA,EAAAg8J,GAAA,kJAHqBh8J,uBAAA,QAAAA,wBAAA,IAAAo7J,EAAA/7J,MAAAghB,KAAAlR,EAAA0sJ,UAGJ77J,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,IAAAo7J,EAAA/7J,MAAAghB,KAAAlR,EAAA0sJ,oCAUjB77J,sBAAA,oGAGUA,uBAFA,OAAAo7J,EAAA/7J,MAAA48J,MAAAC,WAAA7yI,MAEArpB,CAF4C,UAAAmP,EAAAgtJ,4CAGtDn8J,sBAAA,+EAEoBA,uBADA,mBACAA,CADsB,OAAAo7J,EAAA/7J,MAAA48J,iCAG1Cj8J,sBAAA,+EAEoBA,uBADA,mBACAA,CADsB,OAAAo7J,EAAA/7J,MAAA48J,MAAAG,kCAG1Cp8J,2BAAA,uBAAAA,mBAAA,MAG6DA,qDAH7DA,uBAZA,EAAAq8J,GAAA,kBAYAr8J,CATuC,EAAAs8J,GAAA,4BASvCt8J,CALqD,EAAAu8J,GAAA,4BAKrDv8J,CADqD,EAAAw8J,GAAA,6EAX1Cx8J,uBAAA,aAAAo7J,EAAA/7J,MAAA48J,MAAA,KAAAb,EAAA/7J,MAAA48J,MAAAC,YAIUl8J,+CAAA,aAAAo7J,EAAA/7J,MAAA48J,MAAA,KAAAb,EAAA/7J,MAAA48J,MAAAQ,wBAIAz8J,+CAAA,aAAAo7J,EAAA/7J,MAAA48J,MAAA,KAAAb,EAAA/7J,MAAA48J,MAAAG,UAIJp8J,+CAAA,eAAAo7J,EAAA/7J,MAAA48J,OAAAb,EAAA/7J,MAAA48J,MAAAC,YAAA,MAAAd,EAAA/7J,MAAA48J,OAAAb,EAAA/7J,MAAA48J,MAAAG,UAAA,MAAAhB,EAAA/7J,MAAA48J,OAAAb,EAAA/7J,MAAA48J,MAAAQ,oDAjCzBz8J,oCAAA,GAKMA,2BAJJ,aAIIA,CAFkB,UAElBA,CADmB,UACnBA,mBAAA,MAC0BA,2BAC1BA,uBAAA,EAAA08J,GAAA,sBASF18J,2BAEEA,2BADF,UACEA,CADmB,UACnBA,mBAAA,MACaA,2BACbA,uBAAA,GAAA28J,GAAA,sBAmBJ38J,6BAEAA,sBAAA,0FArCMA,sBAAA,GAAAA,uBAAA,gBAaAA,sBAAA,GAAAA,uBAAA,gBAwBDA,sBAAA,GAAAA,uBAAA,eAAA48J,8BAzCP58J,uBAlCA,EAAA68J,GAAA,sBAkCA78J,CAlCuD,EAAA88J,GAAA,yBAAA98J,mCAkCvDA,CA7BsB,EAAA+8J,GAAA,kNALmB/8J,uBAA1B,OAAAo7J,EAAA/7J,MAAAihB,MAA0BtgB,CAAA,WAAAg9J,GAkC1Bh9J,sBAAA,GAAAA,uBAAA,QAAAA,wBAAA,IAAAo7J,EAAA/7J,MAAAghB,KAAAlR,EAAA0sJ,WAAA77J,wBAAA,IAAAo7J,EAAA/7J,MAAA48J,MAAA9sJ,EAAA0sJ,qCAtCnB77J,oCAAA,MAEEA,2BAAA,UAAcA,mBAAA,GAAyDA,2BACvEA,uBAAA,EAAAi9J,GAAA,oFADcj9J,sBAAA,GAAAA,+BAAA,GAAAo7J,EAAA/7J,MAAAskC,OAAA,KAAAy3H,EAAA/7J,MAAA8/E,WAAA,gCANpBn/E,oCAAA,GACEA,2BAAA,cAGEA,uBAAA,EAAAk9J,GAAA,wDAmFFl9J,2BAEAA,sBAAA,wHApFmCA,sBAAA,GAAAA,uBAAA,UAAAA,wBAAA,IAAAmP,EAAA7N,OAoF9BtB,sBAAA,GAAAA,uBAAA,eAAAm9J,8BA9FTn9J,oCAAA,GACEA,uBAAA,EAAAo9J,GAAA,8DAIAp9J,uBAAA,EAAAq9J,GAAA,2IAJiBr9J,+CAAA,OAAAA,wBAAA,IAAAmP,EAAA7N,KAAA6N,EAAA0sJ,UAIF77J,sBAAA,GAAAA,uBAAA,QAAAA,wBAAA,IAAAmP,EAAA7N,KAAA6N,EAAA0sJ,qCAdnB77J,oCAAA,GASEA,uBARA,EAAAs9J,GAAA,wBAQAt9J,CANqB,EAAAu9J,GAAA,wBAMrBv9J,CAHqB,EAAAw9J,GAAA,qGALJx9J,+CAAA,OAAAmP,EAAAmR,OAGAtgB,+CAAA,OAAAmP,EAAAsuJ,cAKFz9J,+CAAA,QAAAmP,EAAAmR,QAAAnR,EAAAsuJ,sCAmGfz9J,2BAAA,sBAAAA,mBAAA,MAA6CA,4BCtFzC,MAAO09J,GAoBX7+J,YAAoB6xJ,EAAgClP,GAAhCziJ,KAAA2xJ,aAAgC3xJ,KAAAyiJ,cAfpDziJ,KAAA42I,MAAgB,KAEhB52I,KAAA0N,SAAmB,KAEnB1N,KAAAqmB,SAAU,EACVrmB,KAAA0+J,cAAe,EACf1+J,KAAAuhB,OAAQ,EAERvhB,KAAAuC,KAAmE,GAKnEvC,KAAA88J,QAAU3qJ,WAEqE,CAE/EysJ,aAAar8J,GACX,YAAgCq3B,IAAzBznB,QAAM5P,EAAM,QACrB,CAEAs8J,gBAAgBt8J,GACd,MAA4D,SAArD4P,QAAM5P,EAAM,kBAAmB,IAAIgiB,aAC5C,CAEAu6I,eAAev8J,GACb,MAA4D,QAArD4P,QAAM5P,EAAM,kBAAmB,IAAIgiB,aAC5C,CAEAw6I,iBAAiBx8J,GACf,MAA4D,SAArD4P,QAAM5P,EAAM,kBAAmB,IAAIgiB,aAC5C,CAEQi2D,UAAUj4E,GAChB,MAAM1G,EAAqE,GAC3EsW,SAAO5P,EAAM,CAACy8J,EAAWC,KACvB,GAAIj/J,KAAK4+J,aAAaI,GAAtB,CACE,IAAI1C,EAAc,GAEhBA,GADoC,KAAlC0C,EAAUE,oBACE11J;cACVw1J,EAAUE;;0DAIA11J,qCAAqCw1J,EAAUE,gCAE/D,MAAMC,EAA4B,CAChC59I,MAAOy9I,EAAUz9I,MACjB29I,oBAAqBF,EAAUE,oBAC/BE,gBAAiBJ,EAAUI,gBAC3B9C,YAAaA,EACb13H,OAAQo6H,EAAUnrB,IAClBzzD,WAAY4+E,EAAUK,aAExBxjK,EAAOojK,GAAYE,CAErB,MAEyC,IAArCH,EAAUM,oBAAoB,GAWhCt/J,KAAK0+J,cAAe,EAThB1+J,KAAK8+J,eAAeE,GACtBnjK,EAAOojK,GAAYj/J,KAAKu/J,eAAeP,GAC9Bh/J,KAAK++J,iBAAiBC,GAC/BnjK,EAAOojK,GAAYj/J,KAAKw/J,iBAAiBR,GAChCh/J,KAAK6+J,gBAAgBG,KAC9BnjK,EAAOojK,GAAYj/J,KAAKy/J,gBAAgBT,GAItB,GAGxBh/J,KAAKuC,KAAO1G,EACZmE,KAAKqmB,SAAU,CACjB,CAEQo5I,gBAAgBT,GAItB,MAAO,CACL19I,KAJWnP,WAAS6sJ,EAAW,CAAC9uH,EAAgB3tB,IAChD,CAAC,qCAAqCrgB,SAASqgB,IAI/C26I,MAAO,CACLG,SAAU2B,EAAUU,mCAEtB96H,OAAQo6H,EAAUp6H,OAAOxqC,KACzBgmF,WAAY4+E,EAAUW,cAE1B,CAEQH,iBAAiBR,GACvB,MAAM19I,EAAOnP,WAAS6sJ,EAAW,CAAC9uH,EAAgB3tB,IAChD,CAAC,yBAA0B,0BAA0BrgB,SAASqgB,IAEhE,MAAO,CACLjB,KAAMA,EACN47I,MAAO,CACLQ,uBAAwBsB,EAAUtB,uBAClCkC,uBAAwBZ,EAAUY,wBAEpCh7H,OAAQtjB,EAAKsjB,OAAOxqC,KACpBgmF,WAAY9+D,EAAKq+I,cAErB,CAEQJ,eAAeP,GACrB,MAAM19I,EAAOnP,WAAS6sJ,EAAW,CAAC9uH,EAAgB3tB,IAChD,CAAC,uBAAwB,oCAAqC,kBAAkBrgB,SAASqgB,IAE3F,MAAO,CACLjB,KAAMA,EACN47I,MAAO,CACLC,WAAY6B,EAAUa,qBACtBt9J,KAAMy8J,EAAUc,gBAElBl7H,OAAQtjB,EAAKsjB,OAAOxqC,KACpBgmF,WAAY9+D,EAAKq+I,cAErB,CAEQ19C,aACNjiH,KAAKqmB,SAAU,EAEI,OAAfrmB,KAAK42I,MACP52I,KAAK2xJ,WAAW7sH,aAAa9kC,KAAK42I,OAAOjoI,UAAU,CACjDc,KAAMzP,KAAKw6E,UAAUx1E,KAAKhF,MAC1BuhB,MAAQA,IACNA,EAAMwL,iBACN/sB,KAAKuhB,MAAQA,EACbvhB,KAAKqmB,SAAU,KAGQ,OAAlBrmB,KAAK0N,UACd1N,KAAKyiJ,YAAY39G,aAAa9kC,KAAK0N,UAAUiB,UAAU,CACrDc,KAAMzP,KAAKw6E,UAAUx1E,KAAKhF,MAC1BuhB,MAAQA,IACNA,EAAMwL,iBACN/sB,KAAKuhB,MAAQA,EACbvhB,KAAKqmB,SAAU,IAIvB,CAEA5X,WACEzO,KAAKo9J,iBAAmB,CACtB,CAAEjuJ,KAAM,KAAM/U,KAAMoP,eACpB,CAAE2F,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,YAAa/U,KAAMoP,gBAC3B,CAAE2F,KAAM,SAAU/U,KAAMoP,sBACxB,CAAE2F,KAAM,QAAS/U,KAAMoP,kBACvB,CAAE2F,KAAM,cAAe/U,KAAMoP,wBAC7B,CAAE2F,KAAM,QAAS/U,KAAMoP,mBAGzBxJ,KAAK+/J,qBAAuB,CAC1B,CACE5wJ,KAAM,mCACN/U,KAAMoP,6CAER,CACE2F,KAAM,iCACN/U,KAAMoP,8CAER,CAAE2F,KAAM,8BAA+B/U,KAAMoP,2CAC7C,CACE2F,KAAM,uCACN/U,KAAMoP,iDAER,CAAE2F,KAAM,sBAAuB/U,KAAMoP,gCACrC,CAAE2F,KAAM,yBAA0B/U,KAAMoP,mCACxC,CAAE2F,KAAM,2BAA4B/U,KAAMoP,qCAE9C,CAEA5C,YAAYC,GACV7G,KAAKuC,KAAO,GACRsE,EAAQ+vI,MACV52I,KAAK42I,MAAQ/vI,EAAQ+vI,MAAMpvI,aAClBX,EAAQ6G,WACjB1N,KAAK0N,SAAW7G,EAAQ6G,SAASlG,cAEnCxH,KAAKiiH,YACP,iDA5LW08C,IAAkB19J,8BAAAC,IAAAD,8BAAA8H,MAAA,4DAAlB41J,GAAkBv1J,UAAA,oBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,qRDnBRE,2GAGAA,gLAMEA,qGAqBYA,6HACFA,oFAQMA,6HACFA,mFAOEA,6HACFA,mFAWbA,+FAaAA,mFALeA,8HAsBAA,qHAgBhBA,69CADzBvI,uBA3GA,EAAA++J,GAAA,sBA2GA/+J,CA3G+C,EAAAg/J,GAAA,yBAAAh/J,4EAAhBA,uBAAhB,QAAAwC,EAAA4iB,QAAgBplB,CAAA,WAAAi/J,8OEA/Bj/J,sBAAA,+FACAA,oCAAA,GACEA,2BAAA,YAAAA,mBAAA,KAA2BA,2BAGvBA,2BAFJ,UAEIA,CAFa,UAEbA,CADqB,4BAICA,uBAAA,4BAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAikC,UAAS,GAIrDvkC,+GAP0BA,sBAAA,GAIAA,uBAJA,UAAAM,EAAAojC,QAIA1jC,CAJmB,qBAAA24B,IAAAr4B,EAAAmM,SAAAzM,4BAAA,EAAAyI,IAAAzI,4BAAA,EAAAK,IAInBL,CAH4D,aAAAM,EAAAqN,aCSlF,MAAOuxJ,GAeXrgK,YACUsO,EACAq0I,EACAx0I,GAFAjO,KAAAoO,cACApO,KAAAyiJ,cACAziJ,KAAAiO,SAbFjO,KAAAogK,eAAiB,IACjBpgK,KAAAqgK,cAAe,EAEvBrgK,KAAA+R,MAAQC,KAGRhS,KAAAmuJ,cAAe,EAEfnuJ,KAAA2kC,QAAkC,EAM/B,CAEHl2B,WACEzO,KAAKoO,YAAYM,SAASC,UAAWD,IACnC1O,KAAK4O,WAAaF,EAClB1O,KAAKmuJ,cAAgBz/I,EAAOuB,UACxBvB,EAAOuB,WAGTjQ,KAAKiO,OAAOy1C,kBAAkB,KAE5B1jD,KAAK4pF,oBAAmB6Y,SACtBziG,KAAKogK,eACLpgK,KAAKogK,gBACLzxJ,UAAU,KACV3O,KAAKiO,OAAO21C,IAAI,KACd5jD,KAAK0lC,cAAa,EAAK,EACxB,EACF,EACF,EAGP,CAEA1b,cACEhqB,KAAK4pF,kBAAkB1/D,aACzB,CAEAtjB,cACM5G,KAAK4O,YAAYqB,YACnBjQ,KAAK2kC,QAAU,GACf3kC,KAAK0lC,cAAa,GAEtB,CAEAA,aAAaF,GACW,KAAlBxlC,KAAK0N,UAGT1N,KAAKyiJ,YAAY78G,oBAAoB5lC,KAAK0N,SAAU83B,GAAS72B,UAC1Dg2B,IACC3kC,KAAK2kC,QAAUA,GAEjB,KACE3kC,KAAK2kC,QAAU,IAGrB,CAEAa,UAGExlC,KAAK0lC,cAAc1lC,KAAKqgK,cACxBrgK,KAAKqgK,cAAe,CACtB,iDAzEWF,IAAkBl/J,8BAAAC,MAAAD,8BAAA8H,MAAA9H,wCAAA,4DAAlBk/J,GAAkB/2J,UAAA,mBAAA+C,OAAA,CAAAuB,SAAA,YAAAmZ,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDbhB5C,oPADfvI,uBADA,EAAAq/J,GAAA,kCACAr/J,CADgD,EAAAs/J,GAAA,4BAApBt/J,uBAAA,OAAAwC,EAAA0qJ,cACbltJ,+CAAA,aAAAwC,EAAAmL,WAAA,KAAAnL,EAAAmL,WAAAqB,+FEQPhP,sBAAA,iEAAgBA,uBAAA,WAAA+K,EAAAC,UAAAyB,oCAQhBzM,sBAAA,+DAAcA,uBAAA,WAAA+K,EAAAw0J,0CALlBv/J,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,KACsBA,2BACtBA,uBAAA,EAAAw/J,GAAA,oFASEx/J,sBAAA,yEAEwBA,uBAFA,WAAA+K,EAAAw0J,iBAEAv/J,CAF6B,gBAAAA,4BAAA,EAAAyI,6BALzDzI,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,KACeA,2BACfA,uBAAA,EAAAy/J,GAAA,oFAYEz/J,sBAAA,6DAGYA,uBADA,6CAAA+K,EAAAw0J,iBACAv/J,CADiE,0CAPjFA,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,KAC2BA,2BAC3BA,uBAAA,EAAA0/J,GAAA,oFAcE1/J,sBAAA,gEACeA,uBAAA,WAAA+K,EAAAw0J,4CADfv/J,uBAAA,EAAA2/J,GAAA,+FAAwC3/J,uBAAxB,OAAA+K,EAAAw0J,iBAAwBv/J,CAAA,WAAA4/J,8BAjDhD5/J,oCAAA,GACEA,2BAAA,aAIEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACeA,2BACfA,uBAAA,EAAA6/J,GAAA,0DAuBF7/J,uBAnBA,EAAA8/J,GAAA,sBAmBA9/J,CAlB6C,EAAA+/J,GAAA,sBAkB7C//J,CAV6C,EAAAggK,GAAA,uBAwB7ChgK,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MACqBA,2BACrBA,uBAAA,GAAAigK,GAAA,0DAKJjgK,2BAEAA,sBAAA,wHA1CiBA,sBAAA,GAAAA,uBAAA,OAAA+K,EAAAuzB,YAAAwG,MAAAxT,MAQAtxB,+CAAA,OAAA+K,EAAAuzB,YAAAwG,MAAAxT,MAWAtxB,+CAAA,OAAA+K,EAAAuzB,YAAA41E,QAAA5iF,MAuBZtxB,sBAAA,GAAAA,uBAAA,eAAAkgK,2BAILlgK,2BAAA,uBAAAA,mBAAA,KACuCA,4BCnDnC,MAAOmgK,GAOX,oBAAIZ,GACF,YAA0B5mI,IAAnB55B,KAAKiM,UAA0BjM,KAAKiM,UAAUyB,SAAc,IACrE,iDATW0zJ,GAAoB,4DAApBA,GAAoBh4J,UAAA,sBAAA+C,OAAA,CAAAozB,YAAA,cAAAtzB,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,uBDFnB5C,oFAwCAA,0FAhCAA,2FAQAA,oFAWAA,gGAGaA,yFAuBJA,ivBAFvBvI,uBA1DA,EAAAogK,GAAA,sBA0DApgK,CA1DgC,EAAAqgK,GAAA,yBAAArgK,yCAAjBA,uBAAA,OAAAwC,EAAAwI,mUEmCPhL,sBAAA,kEAEiBA,uBADA,cAAAM,EAAAg+B,YACAt+B,CAD2B,YAAAM,EAAA+K,8EA7B9CrL,2BAAA,mBAYUA,uBARA,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAggK,SAAA32J,GAAgB,EAQ7B3J,CAR8B,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAOZM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAElD3J,2BAAA,YAOEA,sBANA,wBAMAA,CADmB,yBAOrBA,2BACAA,uBAAA,EAAAugK,GAAA,0BAIFvgK,uEAnBUA,uBAZA,OAAAM,EAAAwkC,MAYA9kC,CAZc,UAAAM,EAAAsL,QAYd5L,CAXmB,uBAWnBA,CAP0B,aAAAM,EAAAkgK,gBAO1BxgK,CAN8B,gBAM9BA,CALmB,QAAAM,EAAAkqC,MAKnBxqC,CAJe,cAIfA,CAHe,cAAAM,EAAAmgK,gBAKHzgK,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAAwG,MAIA9kC,CAJgC,YAAAM,EAAA0K,UAIhChL,CAHuB,eAAAM,EAAAwL,cAKvB9L,wBAIAA,uBAJA,aAAAM,EAAAg+B,YAAAwG,MAIA9kC,CAJgC,YAAAM,EAAA0K,UAIhChL,CAHuB,eAAAM,EAAAogK,6CAajD1gK,+BAAA,4BAQIA,sBAAA,wBAGYA,uBADA,+BACAA,CADgC,yCAPhDA,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,MAC2BA,2BAC3BA,uBAAA,EAAA2gK,GAAA,qFAgBF3gK,2BAAA,UACEA,sBAAA,iBAGFA,qDAHYA,wBACAA,uBADA,MAAA4gK,EAAA17J,KACAlF,CADuB,QAAA4gK,EAAAp2H,iCADnCxqC,uBAAA,EAAA6gK,GAAA,yCAA0B7gK,uBAAA,UAAA8gK,8BAY1B9gK,2BAAA,aAEEA,mBAAA,GACFA,8EADEA,uDAAA,KAAAgsJ,EAAA1oH,KAAA,iCALFtjC,2BAAA,aACEA,mBAAA,GACFA,2BAAOA,sBAAA,QACPA,uBAAA,EAAA+gK,GAAA,wCAHM/gK,uBAAA,UAAAgsJ,GACJhsJ,uDAAA,IAAAgsJ,EAAAv/I,SAAA,KAGKzM,sBAAA,GAAAA,uBAAA,OAAAgsJ,EAAA1oH,iCAQHtjC,2BADF,OACEA,CAD+C,QAC/CA,mBAAA,MACFA,iFADWA,sBAAA,GAAAA,sBAAAghK,yDAFbhhK,2BAAA,SACEA,uBAAA,EAAAihK,GAAA,aAGFjhK,+EAHOA,+CAAA,QAAAkhK,GAAA,MAAA5gK,EAAAm8H,aAAAtiI,gCAIP6F,oCAAA,GAAAA,mBAAA,oEAAAA,uBALA,EAAAmhK,GAAA,aAKAnhK,CALqD,EAAAohK,GAAA,gEAAhCphK,uBAAA,UAAAM,EAAAm8H,cAMNz8H,+CAAA,OAAAM,EAAAmkD,uCAObzkD,2BADF,QACEA,CAD6B,UACvBA,mBAAA,GACRA,kFADQA,sBAAA,GAAAA,8BAAAumB,2BAGNvmB,2BADF,QACEA,CAD8B,aACwCA,mBAAA,OACxEA,uDAFAA,uBAHA,EAAAqhK,GAAA,aAGArhK,CAH+B,EAAAshK,GAAA,sEAAzBthK,uBAAA,OAAAM,EAAAihK,WAAAh7I,IAGAvmB,+CAAA,QAAAM,EAAAihK,WAAAh7I,4BAQJvmB,2BADF,QACEA,CAD8B,aACwCA,mBAAA,OACxEA,wDAEEA,2BADF,QACEA,CAD6B,UACvBA,mBAAA,yCACRA,kFADQA,sBAAA,GAAAA,sDAAA,IAAA45B,8BADR55B,uBAHA,EAAAwhK,GAAA,aAGAxhK,CAHgC,EAAAyhK,GAAA,sEAA1BzhK,uBAAA,QAAAM,EAAAihK,WAAA3nI,IAGA55B,+CAAA,OAAAM,EAAAihK,WAAA3nI,4BAMN55B,2BAAA,aAAAA,mBAAA,MAE8EA,mDAI9EA,2BAAA,aAAAA,mBAAA,MAEmCA,4BC7E/B,MAAO0hK,WAAuB50J,IA4ElCjO,YACUoO,EACAykB,EACA8vH,EACAz0I,EACA+P,EACAxJ,EACA8c,EACAjjB,EACA4oD,GAER3oD,QAVQrO,KAAAkO,qBACAlO,KAAA2yB,YACA3yB,KAAAyiJ,cACAziJ,KAAAgO,eACAhO,KAAA+d,cACA/d,KAAAuU,SACAvU,KAAAqxB,sBACArxB,KAAAoO,cACApO,KAAAg3D,kBApFFh3D,KAAAw4H,IAAM,IAAI1xC,eAoBlB9mF,KAAAkuJ,cAA0B,GAG1BluJ,KAAA+4J,iBAAkB,EAGlB/4J,KAAAyhK,iBAAkB,EAGlBzhK,KAAA0hK,gBAAiB,EAGjB1hK,KAAA4iK,wBAAyB,EAGzB5iK,KAAA6iK,sBAAuB,EAGvB7iK,KAAAgmF,mBAAoB,EAGpBhmF,KAAA6M,QAAgC,GAChC7M,KAAA+lC,MAAuB,GACvB/lC,KAAA8iK,gBAAiB,EACjB9iK,KAAA2hF,SAAW,CAAEohF,SAAU,UAGvB/iK,KAAAiM,UAAY,IAAIqC,IAEhBtO,KAAAgjK,aAAc,EAMdhjK,KAAA+R,MAAQC,KACAhS,KAAAijK,aAAwC,KAChDjjK,KAAAyrC,MAAQ,EAERzrC,KAAA62B,SAAW,CACTqsI,YAAa15J,8FAIfxJ,KAAA2wJ,mBAAqB,CACnBnoI,IAAK,CAACkvH,GAAoBE,UAC1B/uH,KAAM,CAAC6uH,GAAoBI,eAAgBJ,GAAoBK,mBAC/Dt4G,OAAQ,CAACi4G,GAAoBG,aAC7B5yG,YAAa,CACXyyG,GAAoBM,uBACpBN,GAAoBO,uBAEtB9yG,MAAO,CAACuyG,GAAoBS,aAe5Bn4I,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK2hK,qBAAuB,CAC1B,CACEvnK,KAAM4F,KAAKgO,aAAak+D,eACxBp/D,WAAY,SACZkrE,WAAY,YACZzvD,KAAMvW,KAAMvV,OACZgsB,WAAY,kBACZxI,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,MAAO5kJ,GACjEytE,QAASA,IAAM15E,KAAK6iK,uBAGxB7iK,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAay6D,IACxB37D,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IACLhpB,KAAKuU,OAAOyK,IAAI9c,SAAS,UACrBlC,KAAKuU,OAAOC,SAAS,CAnHlB,QAmH6B,CAAEC,QAAS,CAAEC,MAAO,CAAC2pB,KAASoqC,SAC7DzoE,KAAKqpJ,WAAarpJ,KAAKg3D,gBAAgBnsC,KAAKmuI,GAAmB,CAC9DD,gBAAiB/4J,KAAK+4J,kBAE9B94I,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,MAAO5kJ,IAEnE,CACE7R,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAK4oB,aAClB3I,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,OAAQ5kJ,IAEpE,CACE7R,KAAM4F,KAAKgO,aAAaq9D,YACxBv+D,WAAY,SACZyb,KAAMvW,KAAMqsF,KACZr1E,MAAOA,IAAMhpB,KAAKmjK,YAClBljJ,QAAUhU,GACRjM,KAAK6wJ,WAAW,QAAS5kJ,KAAejM,KAAKojK,eAC/C1pF,QAASA,KAAO15E,KAAK4iK,wBAA0B5iK,KAAKojK,gBAEtD,CACEhpK,KAAM4F,KAAKgO,aAAas9D,WACxBx+D,WAAY,SACZyb,KAAMvW,KAAMqsF,KACZr1E,MAAOA,IAAMhpB,KAAKmjK,WAAU,GAC5BljJ,QAAUhU,GACRjM,KAAK6wJ,WAAW,QAAS5kJ,IAAcjM,KAAKojK,eAC9C1pF,QAASA,KAAO15E,KAAK4iK,yBAA2B5iK,KAAKojK,gBAEvD,CACEhpK,KAAM4F,KAAKgO,aAAaw6D,OACxB17D,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAK8oB,eAClB7I,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,SAAU5kJ,IAEtE,CACE7R,KAAM4F,KAAKgO,aAAak9D,kBACxBp+D,WAAY,SACZyb,KAAMvW,KAAMosF,MACZp1E,MAAOA,IAAMhpB,KAAKqjK,kBAClBpjJ,QAAUhU,GACRjM,KAAK6wJ,WAAW,cAAe5kJ,IAC/BjM,KAAKgjK,aACLhjK,KAAKsjK,qBACP5pF,QAASA,KAAO15E,KAAK4iK,yBAA2B5iK,KAAKsjK,sBAEvD,CACElpK,KAAM4F,KAAKgO,aAAam9D,iBACxBr+D,WAAY,SACZyb,KAAMvW,KAAMqsF,KACZr1E,MAAOA,IAAMhpB,KAAKqjK,kBAClBpjJ,QAAUhU,GACRjM,KAAK6wJ,WAAW,cAAe5kJ,IAC/BjM,KAAKgjK,cACJhjK,KAAKsjK,qBACR5pF,QAASA,KAAO15E,KAAK4iK,wBAA0B5iK,KAAKsjK,sBAG1D,CAEA70J,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,oBACN2F,KAAM,WACNC,SAAU,EACVC,aAAcrP,KAAKujK,aAErB,CACEnpK,KAAMoP,6BACN2F,KAAM,oBACNC,SAAU,IACVC,aAAcrP,KAAKwjK,aAErB,CACEppK,KAAMoP,kBACN2F,KAAM,SACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpBhmB,MAAO,eAGX,CACE7hE,KAAMoP,kBACN2F,KAAM,SACNC,SAAU,GACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH+nC,YAAa,CAAEg3B,MAAO,iBACtBhsD,UAAW,CAAEgsD,MAAO,oBAI1B,CACE7hE,KAAMoP,iBACN2F,KAAM,QACNC,SAAU,GAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,YACNE,aAAcrP,KAAKyjK,eACnBr0J,SAAU,IAEZ,CACEhV,KAAMoP,iBACN2F,KAAM,YACNE,aAAcrP,KAAKyjK,eACnBr0J,SAAU,IAEZ,CACEhV,KAAMoP,wBACN2F,KAAM,qBACNE,aAAcrP,KAAK0jK,gBACnBt0J,SAAU,IAEZ,CACEhV,KAAMoP,wBACN2F,KAAM,eACNE,aAAcrP,KAAK0jK,gBACnBt0J,SAAU,IAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,YACNE,aAAcrP,KAAKyjK,eACnBr0J,SAAU,IAEZ,CACEhV,KAAMoP,iBACN2F,KAAM,cACNsgE,eAAgBzvE,KAAK2jK,UACrBt0J,aAAcrP,KAAKyjK,eACnBr0J,SAAU,IAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,YACNE,aAAcrP,KAAKyjK,eACnBr0J,SAAU,KAIdpP,KAAK6M,QAAU7M,KAAK6M,QAAQwX,OAAQwuD,IAC1B7yE,KAAKkuJ,cAAchsJ,SAAS2wE,EAAI1jE,MAE5C,CAEA6a,cACEhqB,KAAKw4H,IAAItuG,aACX,CAEAxd,gBAAgBT,GACdjM,KAAKiM,UAAYA,EACjBjM,KAAKsjK,sBAAuB,EAC5BtjK,KAAKojK,gBAAiB,EAClBpjK,KAAKiM,UAAU8mE,eACqB,gBAAlC/yE,KAAKiM,UAAUmc,QAAQ1Z,SACzB1O,KAAKsjK,sBAAuB,GAGzBtjK,KAAKiM,UAAUmc,QAAQ1nB,OAAOwB,SAAS,kBAC1ClC,KAAKojK,gBAAiB,GAG5B,CAEAx6I,aACE5oB,KAAKyiJ,YAAY19G,YAAYp2B,UAAWgb,IACtC,MAAM2a,EAAOtkC,KAAKiM,UAAUmc,QACtB1nB,EAAS,IAAIktF,IAAIjkE,EAAK/gB,OAAO5I,KAAKyiJ,YAAYr+G,mBAC9Cu1H,EAAYh6J,MAAMo/C,KAAKr+C,GAAQxD,IAAKyE,KAC/BzH,QAASyH,EAAO29D,SAAUh7B,EAAK5jC,OAAUwB,SAASP,MAE7D3B,KAAKg3D,gBAAgBnsC,KAAK8I,KAAoB,CAC5CE,UAAWrqB,uBAAuB86B,EAAK52B,WACvCkmB,OAAQ,CACN,CACEztB,KAAM,gBACN/L,KAAM,SACNkG,MAAOgkC,EAAK5jC,OACZiB,MAAO6H,kBACPkuD,WAAY,CACVqH,cAAc,EACd77D,QAASy2J,EACT9iI,SAAU,IAAIC,KAAe,CAC3BC,MAAOvtB,gCACP6a,OAAQ7a,gCACRgf,IAAKhf,0BAKbsqB,iBAAkBtqB,qBAClBuqB,SAAWlrB,IACT7I,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAM7E,EAAOnI,QAAQiO,UAAU,KACvE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,0BAA0B86B,EAAK52B,aAGjC1N,KAAKsqB,MAAMid,YAAU,EACtB,GAEJ,EAEL,CAEA87H,kBACErjK,KAAKgjK,aAAc,EACnB,MAAM1+H,EAAOtkC,KAAKiM,UAAUmc,QACL,gBAAnBkc,EAAK51B,OACP1O,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAO,IAAI,GAAMiB,UACzD,KACE3O,KAAKgjK,aAAc,EACnBhjK,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,aAAa86B,EAAK52B,kCAEpB1N,KAAKsqB,MAAMid,YAAU,EAEtBhmB,IAIC,GAHAvhB,KAAKgjK,aAAc,EACnBhjK,KAAK09H,aAAen8G,EAAMA,MAAM8D,OAAU1oB,MAAM,MAChD4kB,EAAMwL,kBAEJxL,EAAMA,MAAM8D,OAAUnjB,SAAS,YAC9Bqf,EAAMA,MAAM8D,OAAUnjB,SAAS,2BAC/Bqf,EAAMA,MAAM8D,OAAUnjB,SAAS,UAC/Bqf,EAAMA,MAAM8D,OAAUnjB,SAAS,kBAiBhClC,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,aAAa86B,EAAK52B,2CAClBlE,YAAY+X,EAAMA,MAAM8D,cAnB1B,CACA,MAAMiuD,EAAiB,CACrBz/C,UAAWrqB,mBACXsvB,WAAYtvB,oBACZkxB,SAAS,EACT3B,QAAS/4B,KAAK4jK,sBACdl+G,YAAY,EACZ3xB,SAAUA,KACR/zB,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAO,IAAI,GAAM,GAAMiB,UAC/D,IAAM3O,KAAKg3D,gBAAgBxjC,aAC3B,IAAMxzB,KAAKg3D,gBAAgBxjC,aAAY,GAI7CxzB,KAAK4qB,SAAW5qB,KAAKg3D,gBAAgBnsC,KAAKuO,KAA4Bk6C,EACxE,CAIuC,GAM3CtzE,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAO,IAAI,GAAMiB,UAAU,KACnE3O,KAAKgjK,aAAc,EACnBhjK,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,aAAa86B,EAAK52B,oCAEpB1N,KAAKsqB,MAAMid,YAAU,EAG3B,CAEA47H,UAAU77H,GAAO,GACf,MAAMhD,EAAOtkC,KAAKiM,UAAUmc,QAC5B,GAAIkf,EAAM,CACR,MAAMpgC,EAAQo9B,EAAK5jC,OAAU3E,QAAQ,eAAgB,GACrDuoC,EAAK5jC,OAAUwgE,OAAOh6D,EAAO,GAC7BlH,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAM42B,EAAK5jC,QAAWiO,UAAU,KACxE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiB1Q,KACjB9X,aAAa86B,EAAK52B,8BAEpB1N,KAAKsqB,MAAMid,YAAU,EAEzB,MACEvnC,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAO,IAAI,GAAO,GAAO,GAAMiB,UAAU,KACjF3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiB1Q,KACjB9X,aAAa86B,EAAK52B,8BAEpB1N,KAAKsqB,MAAMid,YAAU,EAG3B,CAEAspH,WACEv0I,EACArQ,GAEA,GACa,WAAXqQ,GACW,SAAXA,GACW,gBAAXA,GACW,UAAXA,EACA,CACA,IAAKrQ,GAAW0c,mBACd,OAAO,EAET,IAAKxW,UAAQlG,EAAUqzD,SAAU,wBAC/B,OAAOt/D,KAAK62B,SAASqsI,WAEzB,CACA,OAAOljK,KAAKoO,YAAYk9B,0BACtBtrC,KAAK4O,WACL5O,KAAK2wJ,mBAAmBr0I,GAE5B,CAEAwM,eACE,MAAMpb,EAAW1N,KAAKiM,UAAUmc,QAAQ1a,SACxC1N,KAAK4qB,SAAW5qB,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1EC,OAAQC,KAAeC,KACvBC,gBAAiB,OACjBC,UAAW,CAACzd,GACZylD,kBAAmB,SACnB/nC,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,cAAe,CAAErX,SAAUA,IAClDsX,KAAMhlB,KAAKyiJ,YAAYp3H,OAAO3d,MAGtC,CAEAm2J,2BACE,MAAMC,EAAe9jK,KAAK4O,WAAWiY,SACrC,OAAK1U,YAAU2xJ,MACTA,EAAaC,UAAU9zJ,SAM/B,CAEA+zJ,qBACE,GAAIhkK,KAAK6jK,2BACP1xJ,YAAUnS,KAAK+lC,MAAQk+H,IACrBA,EAAQC,mBAAwBlkK,KAAK2yB,UAAUpqB,UAAuC,KAA7B07J,EAAQE,iBACjEF,EAAQG,aAAkBpkK,KAAK2yB,UAAUpqB,UACvC07J,EAAQI,mBAAwBJ,EAAQK,qBAAuB,QAKnE,QAAS91F,EAAS,EAAGA,EAASxuE,KAAK6M,QAAQzR,OAAQozE,IACjDxuE,KAAK6M,QAAQ2hE,GAAQn/D,aAAkBrP,KAAKukK,QAGlD,CAEAhD,SAAS/7J,GACS,OAAZA,IACFxF,KAAKijK,aAAez9J,GAEG,MAArBxF,KAAKijK,eACPjjK,KAAKijK,aAAe,IAAIl2E,KAAwB,UAE9C/sF,KAAK8iK,iBAGT9iK,KAAK8iK,gBAAiB,EACtB9iK,KAAKw4H,IAAMx4H,KAAKoO,YACbM,SACAM,QACCyP,YAAU7P,IACR5O,KAAK4O,WAAaA,EAClB,MAAM41J,EAAiBxkK,KAAK6jK,2BAC5B,OAAO7jK,KAAKyiJ,YAAY/+H,KAAK1jB,KAAKijK,cAAct4D,WAAY65D,EAAel/I,WAAU,IAGxF3W,UACE81J,IACCzkK,KAAK+lC,MAAQ0+H,EACbzkK,KAAK+lC,MAAM/+B,QAASs9B,IACK,KAAnBA,EAAK51B,SACP41B,EAAK51B,OAAY,eAGrB1O,KAAKgkK,qBACLhkK,KAAK8iK,gBAAiB,EAClB9iK,KAAK+lC,MAAM3qC,OAAS,EACtB4E,KAAKyrC,MAAQiqE,KAAyBC,SAAS8uD,EAAS,IAExDzkK,KAAKyrC,MAAQ,GAGjB,KACEzrC,KAAK8iK,gBAAiB,EACtBt9J,EAAQ+b,OAAK,GAGrB,CAEAihJ,WAAWliK,GAET,OACE4H,OAAO5H,IAAUA,GACjBA,EAAQ,GAAK,GADb4H,MAEA5H,GAEU,KAAVA,CAEJ,iDAtgBWqiK,IAAc1hK,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,MAAA,4DAAd08I,GAAcv5J,UAAA,eAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4BAGdsyE,KAAc,uqCALd,CAAC,CAAElsE,QAASC,IAAmBC,SAAU,IAAID,IANzC,YAMuE1O,wCAAAuJ,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,2BDvC5E5C,uFA2CAA,gGAGaA,0FAmCVA,2EAAA,mCAIoBA,+GA2BfA,sIAA2DA,8EAM3DA,sFAAYA,gsCA3HhCvI,2BAAA,cAGEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACkBA,2BAClBA,uBAAA,EAAAyjK,GAAA,2DAuCFzjK,uBAHA,EAAA0jK,GAAA,sBAGA1jK,CAF+C,EAAA2jK,GAAA,uBAgBjD3jK,2BAEAA,sBAAA,YA2DAA,uBAzDA,EAAA4jK,GAAA,yBAAA5jK,mCAyDAA,CAxDuC,GAAA6jK,GAAA,yBAAA7jK,mCAwDvCA,CA/CgC,GAAA8jK,GAAA,yBAAA9jK,mCA+ChCA,CArCoC,GAAA+jK,GAAA,yBAAA/jK,mCAqCpCA,CAzBoC,GAAAgkK,GAAA,yBAAAhkK,mCAyBpCA,CAfoC,GAAAikK,GAAA,yBAAAjkK,mCAepCA,CANuB,GAAAkkK,GAAA,yBAAAlkK,oCAWvBA,sBAAA,gEAlFiBA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA87B,YAAA41E,QAAA5iF,MAGAtxB,+CAAA,OAAAwC,EAAA87B,YAAA41E,QAAA5iF,MAeZtxB,+CAAA,eAAAmkK,sQE7CankK,2BAJR,OAIQA,CAJsD,OAItDA,CAHF,OAGEA,CAFA,OAEAA,CADE,OACFA,mBAAA,KACFA,6BAEEA,2BADF,OACEA,CADE,OACFA,mBAAA,KACFA,6BAEEA,2BADF,OACEA,CADE,QACFA,mBAAA,MAGNA,iCACiBA,2BAAjB,WAAiBA,CAAA,QAAGA,mBAAA,IAAkBA,2BAAIA,2BAAA,QACxCA,mBAAA,2CACJA,yEAFsBA,sBAAA,IAAAA,8BAAA+K,EAAAq5J,cAClBpkK,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,KAAA+K,EAAAs5J,eAAA,+BAmCJrkK,2BAJR,OAIQA,CAJJ,OAIIA,CAHF,OAGEA,CAFA,OAEAA,CADE,OACFA,mBAAA,KACFA,6BAEEA,2BADF,OACEA,CADE,OACFA,mBAAA,MAIRA,6EAJgBA,sBAAA,GAAAA,sBAAA+K,EAAAu5J,gDChDZ,MAAOC,GAWX1lK,YACS2lK,EACAjjB,EACC9/I,EACD+/I,EACCkP,GAJD3xJ,KAAAylK,qBACAzlK,KAAAwiJ,qBACCxiJ,KAAA0C,gBACD1C,KAAAyiJ,cACCziJ,KAAA2xJ,aAfV3xJ,KAAA+lC,MAAkB,GAGlB/lC,KAAAslK,cAAgB,EAChBtlK,KAAA6xI,SAAmC,GACnC7xI,KAAA0lK,UAAY,EACZ1lK,KAAA2lK,YAAc,EAEd3lK,KAAA4lK,oBAAqB,CAQlB,CAEHn3J,WACE,IAAIo3J,EAAc,EACdC,EAAqB,EACrBC,EAAa,EACbC,EAAoB,EACpBC,EAAY,EACZC,EAAmB,EAEvBlmK,KAAK4lK,mBAAqB5lK,KAAK2xJ,WAAW5c,wBAC1C,MAAMmkB,EAAc,IAAInsE,KAAwB,QAChD/sF,KAAKyiJ,YAAY/+H,KAAKw1I,EAAYvuD,WAAY,QAAQh8F,UAAWgb,IAC/D3pB,KAAK+lC,MAAQpc,EACb3pB,KAAKmmK,WAAanmK,KAAK+lC,MAAM3qC,OAC7B+W,YAAUnS,KAAK+lC,MAAQk+H,IACrBjkK,KAAK0lK,UAAY1lK,KAAK0lK,UAAYzB,EAAQmC,UAE1CpmK,KAAK2lK,YAAc3lK,KAAK2lK,YAA2C,KAA7B1B,EAAQE,eAAqB,GAErEnkK,KAAK2lK,YAAc3lK,KAAK0C,cAAc6F,UAAUvI,KAAK2lK,YAAW,GAG9D3lK,KAAK2xJ,WAAW7c,WAAWvyI,OAC7BsjK,EAAc7lK,KAAK2xJ,WAAW7c,WAAWvyI,MAASnH,OAClD0qK,EAAqB9lK,KAAK2xJ,WAAW7c,WAAWvyI,KAAQowJ,UAGtD3yJ,KAAK2xJ,WAAW7c,WAAWuxB,MAC7BN,EAAa/lK,KAAK2xJ,WAAW7c,WAAWuxB,KAAQjrK,OAChD4qK,EAAoBhmK,KAAK2xJ,WAAW7c,WAAWuxB,IAAO1T,UAGpD3yJ,KAAK2xJ,WAAW7c,WAAWwxB,KAC7BL,EAAYjmK,KAAK2xJ,WAAW7c,WAAWwxB,IAAOlrK,OAC9C8qK,EAAmBlmK,KAAK2xJ,WAAW7c,WAAWwxB,GAAM3T,UAGlD3yJ,KAAK4lK,oBACP5lK,KAAK2xJ,WAAW/b,uBAAuBjnI,UAAW43J,IAC3Cp0J,YAAUo0J,IACbt0J,OAAOC,KAAKq0J,EAAWrjK,SAAS8D,QAAS8pC,IAErC9wC,KAAK2xJ,WAAWsF,oBAChBj3J,KAAK2xJ,WAAWsF,mBAAmBvkJ,IAAI,oBAAoBpS,QAAUwwC,IAErE9wC,KAAKulK,mBAAqBgB,EAAWrjK,QAAQ4tC,GAAQw+C,OAExD,GAKPtvF,KAAKqlK,aAAeQ,EAAcE,EAAaE,EAC/CjmK,KAAK2xJ,WAAW7c,WAAWuwB,aAAkBrlK,KAAKqlK,aAClDrlK,KAAKslK,cAAgBQ,EAAqBE,EAAoBE,CAChE,iDAzEWV,IAA4BvkK,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,IAAA,4DAA5Bs8J,GAA4Bp8J,UAAA,+BAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,6BDbtB5C,8FAKUA,kFAsBAA,iFAKAA,mFAWCA,yFA/BJA,4FAGAA,8FAGAA,yFAwCRA,4FAGAA,2EAAA,2aA9DZvI,2BAHN,WAGMA,CAHM,WAGNA,CAFQ,aAERA,CADQ,eACRA,mBAAA,KAC8BA,2BAIxBA,2BAHN,aAGMA,CAH8F,UAG9FA,CAFG,OAEHA,CADE,WACFA,mBAAA,KACsBA,2BACtBA,2BAAA,SAAIA,mBAAA,IACNA,6BACAA,uBAAA,GAAAulK,GAAA,cAkBEvlK,2BADF,QACEA,CADE,YACFA,mBAAA,MACqBA,2BACrBA,2BAAA,SAAIA,mBAAA,mCACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MACuBA,2BACvBA,2BAAA,SAAIA,mBAAA,mCAMhBA,uCAGIA,2BAFJ,YAEIA,CAFQ,YAERA,CADU,gBACVA,mBAAA,MACsCA,2BACtCA,sBAAA,kBAQJA,6BACAA,uBAAA,GAAAwlK,GAAA,yBAAAxlK,8EA/CgBA,sBAAA,IAAAA,8BAAAwC,EAAA0iK,YAEDllK,wBAA2BA,uBAA3B,QAAAwC,EAAAmiK,mBAA2B3kK,CAAA,WAAAylK,GAoB1BzlK,sBAAA,GAAAA,sDAAA,MAAAwC,EAAAiiK,YAKAzkK,sBAAA,GAAAA,sDAAA,MAAAwC,EAAAkiK,cAWF1kK,sBAAA,GAKAA,uBALA,gBAAAA,4BAAA,GAAAyI,IAKAzI,CALiD,oBAKjDA,CAJuB,qBAIvBA,CAHyB,4BAGzBA,CAF+B,0BAE/BA,CAD8B,kbEhDxCA,2BAJJ,WAIIA,CAH8B,WAG9BA,CADU,YAGRA,sBAAA,YAGAA,2BAAA,WAAAA,mBAAA,KACsDA,2BAGpDA,2BADF,WACEA,CADe,WACfA,mBAAA,KACyCA,2BAEvCA,2BADF,WACEA,CADuB,gBAGfA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAolK,gBAAe,GAFhC1lK,mBAAA,MAI2BA,2BAC3BA,2BAAA,gBAGQA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAqlK,sBAAqB,GAHtC3lK,mBAAA,MASVA,iFAxBWA,sBAAA,GAAAA,uBAAA,MAAAM,EAAAslK,iBAAAv+F,SAAArnE,2BAIIA,sBAAA,GAAAA,sBAAAM,EAAAslK,iBAAA7+F,gEAuCP/mE,2BAFF,WAEEA,CADgB,WAChBA,mBAAA,KACkBA,2BAElBA,sBAAA,iBAKFA,kCALYA,sBAAA,GAIAA,uBAJA,gBAAAA,4BAAA,EAAAktD,IAIAltD,CAJuC,qBAIvCA,CAHwB,qBAGxBA,CAFyB,4BAEzBA,CAD+B,4FAKzCA,2BAFF,WAEEA,CADgB,WAChBA,mBAAA,KACoBA,2BAElBA,2BADF,WACEA,CADqB,oBAKRA,uBAFA,0BAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAAkBM,EAAAulK,cAAAl8J,GAAqB,EAEvC3J,CAFwC,gCAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAChBM,EAAAwlK,qBAAAn8J,GAA4B,EACpD3J,CADqD,oBAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBACzCM,EAAAylK,kBAAAp8J,GAAyB,GAEtD3J,qCANiBA,sBAAA,GACAA,uBADA,eACAA,CADkB,4CASjCA,2BAFF,WAEEA,CADgB,WAChBA,mBAAA,KACwBA,2BACxBA,sBAAA,oBAIFA,kCAJeA,sBAAA,GAGAA,uBAHA,gBAGAA,CAHoB,iBAAAA,4BAAA,EAAA2vE,IAGpB3vE,CAFmD,gBAAAA,4BAAA,EAAAq8I,IAEnDr8I,CAD0E,0CAGzFA,2BAAA,YAEEA,sBAAA,8BACFA,4FAIAA,2BAAA,eAGQA,uBAAA,mBAAAA,0BAAA21D,GAAA,MAAAr1D,EAAAN,0BAAA,UAAAA,wBAASM,EAAA0lK,SAAQ,GAHzBhmK,mBAAA,MAMiBA,4FArDnBA,2BAPJ,WAOIA,CAL+B,WAK/BA,CAF6B,YAE7BA,mBAAA,KACwBA,2BACxBA,sBAAA,kBACFA,2BAEAA,2BAAA,YAEEA,oCAAA,MAiCEA,uBAhCA,EAAAimK,GAAA,aAgCAjmK,CA/BkB,EAAAkmK,GAAA,aA+BlBlmK,CApBkB,EAAAmmK,GAAA,aAoBlBnmK,CARkB,GAAAomK,GAAA,kDAapBpmK,2BAAA,aAEEA,uBAAA,GAAAqmK,GAAA,iBAOArmK,2BAAA,wBAEgBA,uBAAA,wBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,4BAAA,OAAAA,wBAAcM,EAAAgmK,iBAAgB,GACGtmK,2BACjDA,2BAAA,gBACQA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,4BAAA,OAAAA,wBAASM,EAAAimK,aAAY,GAD7BvmK,mBAAA,MAMNA,6EAnEOA,+CAAA,gBAAAA,4BAAA,GAAAK,KAKQL,sBAAA,GAAAA,uBAAA,aAAAM,EAAAkmK,YAIRxmK,+CAAA,gBAAAA,4BAAA,GAAAQ,KACWR,+CAAA,iBAAAM,EAAA6lE,YAAA,KAAA7lE,EAAA6lE,YAAAC,WACNpmE,+CAAA,kBAWAA,+CAAA,kBAYAA,+CAAA,kBASAA,+CAAA,kBAYGA,sBAAA,GAAAA,uBAAA,8BAAAM,EAAAkmK,WAAA,MAAAlmK,EAAA6lE,YAAA,KAAA7lE,EAAA6lE,YAAAC,WAAA,KAAA9lE,EAAAkmK,WAAA,MAAAlmK,EAAA6lE,YAAA,KAAA7lE,EAAA6lE,YAAAC,WAAA1lE,QAKOV,+CAAA,OAAAM,EAAAmmK,yBAIHzmK,sBAAA,GAAAA,sBAAAM,EAAAomK,6EAMjB1mK,2BAAA,UAAAA,wBAAA,MAC0BA,sBAAA,YAAqEA,mDAE/FA,2BAAA,YAAAA,mBAAA,MAC4CA,4BCnExC,MAAO2mK,GAqCX9nK,YACUoO,EACAu3J,EACAlxJ,EACAkuI,EACApxH,EACArjB,EACA65J,EACAhgJ,EACA9J,EACA4zI,EACAj0I,EACAiiB,GACAqwF,IAZAhwH,KAAAkO,qBACAlO,KAAAylK,qBACAzlK,KAAAuU,SACAvU,KAAAyiJ,cACAziJ,KAAAqxB,sBACArxB,KAAAgO,eACAhO,KAAA6nK,iBACA7nK,KAAA6nB,eACA7nB,KAAA+d,cACA/d,KAAA2xJ,aACA3xJ,KAAA0d,QACA1d,KAAA2/B,YACA3/B,KAAAgwH,qBA5CVhwH,KAAA6mK,iBAAwC/+F,KACxC9nE,KAAAynK,WAAqB,CACnB,CACE9lK,MAAO,aAET,CACEA,MAAO,cACPyjB,UAAU,GAEZ,CACEzjB,MAAO,kBACPyjB,UAAU,GAEZ,CACEzjB,MAAO,SACPyjB,UAAU,IAGdplB,KAAA8nK,sBAAuB,EACvB9nK,KAAA4xB,YAAmB,GAEnB5xB,KAAA82J,WAAa,IAAIjgB,GACjB72I,KAAAs1I,YAAwB,GAExBt1I,KAAA+nK,eAAiB,GACjB/nK,KAAAq1J,kBAAmB,EACnBr1J,KAAAgoK,YAA4C,GAG5ChoK,KAAAqc,aAAe,IAAIvS,eAiBjB9J,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK0nE,eAAiB1nE,KAAKylK,mBACxB99F,iBACAh5D,UAAWxE,KACVnK,KAAKonE,YAAcj9D,KAEvBnK,KAAKonE,YAAYC,UAAY,CAC/B,CACAtgE,kBACE/G,KAAKgwH,kBAAkBrmC,eACzB,CAEAl7E,WACEzO,KAAKynK,WAAWzgK,QAAQ,CAACmgE,EAAOjgE,KAC9BigE,EAAM/V,QAAU,IAAOpxD,KAAKonE,YAAYC,UAAYngE,IAEtDlH,KAAK0d,MAAMoiB,YAAYnxB,UAAW6Q,IAEhC,MAAMyoJ,EAAoBzoJ,EAAO0oJ,QAC7BD,IACFjoK,KAAK8nK,qBAAuBG,KAIhCjoK,KAAK2xJ,WAAW/b,uBAAuBjnI,UAAWzL,IAChDlD,KAAKm3J,iBAAmBj0J,EACxBlD,KAAK+nK,eAAiB,CAAEj3H,OAAQ5tC,EAAQ8xJ,mBAAoB+B,WAAW,EAAK,GAG9E/2J,KAAKynK,WAAWzgK,QAASmhK,IACvBnoK,KAAKgoK,YAAYG,EAAUxmK,QAAS,GAExC,CAEAimE,YAAYz9D,GACVnK,KAAKylK,mBAAmB59F,eAAe19D,EACzC,CAEAw8J,gBACE3mK,KAAK8nK,sBAAuB,CAC9B,CAEAlB,sBACE,MAAMtzF,EAAiB,CACrBz/C,UAAWrqB,mBACXsvB,WAAYtvB,oBACZkxB,SAAS,EACT3B,QAAS/4B,KAAKooK,eACd1iH,YAAY,EACZ3xB,SAAUA,KACR/zB,KAAK6nK,eAAerzB,aAAa,kBAAkB7lI,UAAU,CAC3D4S,MAAOA,IAAMvhB,KAAK6nB,aAAa2L,aAC/BpO,SAAUA,KACRplB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiB1Q,KACjB9X,8CAEFxJ,KAAKuU,OAAOC,SAAS,CAAC,eACtBxU,KAAK6nB,aAAa2L,YAAU,GAE/B,GAGLxzB,KAAK6nB,aAAagD,KAAKuO,KAA4Bk6C,EACrD,CAEAv/C,WACE,IAAK/zB,KAAKgoK,YAAY,aAAc,CAClC,MAAM9O,EAAc,IAAInsE,KAAwB,QAChD/sF,KAAKyiJ,YAAY/+H,KAAKw1I,EAAYvuD,WAAY,SAASh8F,UAAWo3B,IAChEA,EAAM/+B,QAASs9B,IACb,MAAMp9B,EAAQo9B,EAAK5jC,OAAU3E,QAAQ,eAAgB,GACjDmL,GAAQ,IACVo9B,EAAK5jC,OAAUwgE,OAAOh6D,EAAO,GAC7BlH,KAAK4xB,YAAY11B,KAAK8D,KAAKyiJ,YAAY16I,OAAOu8B,EAAK52B,UAAa,EAAM42B,EAAK5jC,SAAU,IAExF,EACD0f,YAASpgB,KAAK4xB,aACX5iB,QACCq5J,YAAS,IACProK,KAAK6nK,eAAerzB,aAAa,kBAAkB7lI,UAAU,KAC3D3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,6CAEFxJ,KAAKuU,OAAOC,SAAS,CAAC,cAAa,KAIxC7F,UAAU,CACT4S,MAAQA,GAAUA,EAAMwL,kBACzB,EAEP,CAEA,IAAK/sB,KAAKgoK,YAAY,eAAgB,CACpC,GAAIhoK,KAAK82J,WAAY,CACnB,MAAMjkI,EAAO7yB,KAAKkO,mBAAmBmrB,cACrCr5B,KAAK82J,WAAW7f,QAAQ,aAAapkH,KAAQ1gB,aAC7CnS,KAAKs1I,YAAYp5I,KAAK8D,KAAK82J,WAAW9f,KACxC,CAEA,GAAIh3I,KAAKq1J,iBAAkB,CACzB,MAAMhwJ,EAAQrF,KAAKm3J,kBAAkBj0J,QAAQlD,KAAK+nK,eAAej3H,QAAWzrC,MACtEkwI,EAAa/rI,YAAYnE,eAC/BrF,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,OAASsZ,KAASne,OAAQ,CAC/CilG,YAAaowB,IAEfvwH,KAAMhlB,KAAK2xJ,WAAW1sI,OAAO,CAACjlB,KAAK+nK,gBAAiBxyB,EAAY,gBAEjE5mI,UAAU,CACT4S,MAAQA,GAAUA,EAAMwL,iBACxB3H,SAAUA,KACRplB,KAAKqc,aAAanS,MAAI,GAG9B,SACMlK,KAAK2xJ,WAAW7c,WAAWuwB,aAAkB,EAAG,CAClDrlK,KAAK82J,WAAWrf,WAAW,YAAaz3I,KAAK+nK,eAAehR,WAC5D,MAAMxhB,EAAapjI,SAAOA,QAAMnS,KAAKs1I,YAAa,cAAe,MACjEt1I,KAAK+d,YACF8G,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,OAASsZ,KAASne,OAAQ,CAC/CilG,YAAaowB,IAEfvwH,KAAMhlB,KAAK2xJ,WAAW1sI,OAAOjlB,KAAKs1I,YAAaC,KAEhD5mI,UAAU,CACT4S,MAAQA,GAAUA,EAAMwL,iBACxB3H,SAAUA,KACRplB,KAAKqc,aAAanS,OAClBlK,KAAK2xJ,WAAW7c,WAAa,KAGrC,CAEJ,CACF,CAEAgyB,cAAchQ,GACZ92J,KAAK82J,WAAaA,CACpB,CAEAiQ,qBAAqBj2H,GACnB9wC,KAAK+nK,eAAiBj3H,CACxB,CAEAk2H,kBAAkBniK,GAChB7E,KAAKq1J,iBAAmBxwJ,CAC1B,CAEA2iK,aACOxnK,KAAKylK,mBAAmB36C,aAM3B9qH,KAAK+zB,YALL/zB,KAAKylK,mBAAmB99F,iBAAiBh5D,UAAWxE,IAClDnK,KAAKonE,YAAcj9D,IAErBnK,KAAKylK,mBAAmB76C,iBAI5B,CAEA28C,iBACOvnK,KAAKylK,mBAAmB16C,cAG3B/qH,KAAK2/B,SAASmmB,OAFd9lD,KAAKylK,mBAAmB56C,oBAI5B,CAEAo8C,SACE,MAAMkB,EAAYnoK,KAAKynK,WAAWznK,KAAKonE,YAAYC,WACnDrnE,KAAKgoK,YAAYG,EAAUxmK,QAAS,EACpC3B,KAAKwnK,YACP,CAEAG,wBACE,OAAQ3nK,KAAKylK,mBAAmB36C,aAE5BthH,0BADAxJ,KAAKgO,aAAa67D,IAExB,CAEA69F,wBACE,OAAQ1nK,KAAKylK,mBAAmB16C,cAE5B/qH,KAAKgO,aAAa43C,OADlB5lD,KAAKgO,aAAa87D,IAExB,CAEA9/C,cACEhqB,KAAK0nE,eAAex9C,cACpBlqB,KAAK2xJ,WAAWsF,mBAAqB,IACvC,iDArPW2Q,IAAsB3mK,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,UAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,KAAAhlB,8BAAAilB,IAAAjlB,8BAAA+H,kBAAA/H,8BAAAklB,YAAAllB,mDAAA,4DAAtB2mK,GAAsBx+J,UAAA,wBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,yODjCpBE,sFAAW,mCAITA,6GAMMA,2FAKAA,iFAeTA,2FA4DKA,2EAAA,mCAlDFA,sFAWAA,wFAYAA,4FAmBEA,iFAcNA,8IACe,yFAA4D,yCAG5EA,09CALZvI,uBAzGA,EAAAqnK,GAAA,cAyGArnK,CAxGkC,EAAAsnK,GAAA,eAwGlCtnK,CAvEmC,EAAAunK,GAAA,yBAAAvnK,0CAjC7BA,uBAAA,OAAAwC,EAAAqkK,sBAiCA7mK,+CAAA,QAAAwC,EAAAqkK,mrBE1BM7mK,sBAAA,mDACGA,uBAAA,UAAAA,4BAAA,EAAAQ,GAAAF,EAAAwQ,MAAA8nD,MAAAt4D,EAAAwQ,MAAA02C,QAAAlnD,EAAAwQ,MAAA22C,8BAYOznD,+BAAA,6BAFFA,oCAAA,GAEEA,uBAAA,EAAAwnK,GAAA,0LAAexnK,wBAAmCA,uBAAnC,mBAAAynK,EAAmCznK,CAAA,0BAAAA,4BAAA,EAAAktD,GAAAw6G,EAAAC,EAAA,+BAHtD3nK,oCAAA,GACEA,uBAAA,EAAA4nK,GAAA,0GAAgC5nK,+CAAA,UAAA6nK,EAAA3qI,qCAHpCl9B,2BAAA,sBAEEA,uBAAA,EAAA8nK,GAAA,uBAOF9nK,0DAReA,uBADA,OAAA6nK,EACA7nK,CADa,QAAA2nK,GAEX3nK,+CAAA,cAAA6nK,EAAA,KAAAA,EAAA3qI,YAAA,MAAA2qI,GAAA,MAAAA,EAAA3qI,SAAA,KAAA2qI,EAAA3qI,SAAA/iC,oCAWjB6F,2BAAA,aAGEA,mBAAA,GACFA,+EAFMA,uBAAA,UAAAA,4BAAA,EAAA69I,GAAA79I,4BAAA,EAAAq8I,IAAAp7I,SAAA,MAAA8mK,EAAA,KAAAA,EAAAt6J,QAAAzN,4BAAA,EAAAm8H,IAAAl7H,SAAA,MAAA8mK,EAAA,KAAAA,EAAAt6J,UACJzN,uDAAA,IAAA+nK,EAAAt6J,OAAA,gCAHFzN,uBAAA,EAAAgoK,GAAA,eAKAhoK,2BAAA,UAAMA,mBAAA,UAAMA,2BACZA,sBAAA,uCANOA,uBAAA,aAAA+nK,EAAA,KAAAA,EAAAt6J,QAODzN,sBAAA,GACAA,uBADA,UAAAA,4BAAA,EAAA2vE,GAAA,eAAAo4F,EAAA,KAAAA,EAAA7iK,OACAlF,CAD8C,kBAAA+nK,EAAA,KAAAA,EAAA5uK,KAAA6G,mDAIpDA,+BAAA,6BADFA,oCAAA,GACEA,uBAAA,EAAAioK,GAAA,qJAAejoK,wBAAmCA,uBAAnC,mBAAAynK,EAAmCznK,CAAA,0BAAAA,4BAAA,EAAAg+I,GAAAkqB,+BAOtDloK,2BAFF,WAEEA,CADoB,YACZA,mBAAA,GAAmBA,2BAC3BA,2BAAA,SACEA,sBAAA,2BAEJA,uEAJUA,sBAAA,GAAAA,8BAAAM,EAAA6nK,eAEcnoK,sBAAA,GAAAA,uBAAA,OAAAM,EAAA0mB,WCV5B,MAAOohJ,GAcXvpK,YAAoBwpK,EAA4C3hI,GAA5C3nC,KAAAspK,mBAA4CtpK,KAAA2nC,eAbxD3nC,KAAAw4H,IAAM,IAAI1xC,eAKlB9mF,KAAA+R,MAAQC,KACRhS,KAAAo9E,kBAAmB,EACnBp9E,KAAAq8C,MAAgB,GAGhBr8C,KAAAupK,eAAyC,EAGoD,CAE7F96J,WACEzO,KAAKw4H,IAAMx4H,KAAK2nC,aACbj1B,IAAI,IAAM1S,KAAKspK,iBAAiBtlI,UAAW,KAC3Cr1B,UAAWpM,IACVvC,KAAKo9E,kBAAmB,EACxBp9E,KAAKq8C,MAAQr8C,KAAKwpK,iBAAiBjnK,EAAI,EAE7C,CAEAynB,cACEhqB,KAAKw4H,IAAItuG,aACX,CAEQs/I,iBAAiBjnK,GACvB,MAAM85C,EAAQ95C,EAAK85C,OAAS,GACtBotH,EAAYlnK,EAAKmnK,OAAS,GAC1BC,EAAsC,GAE5C,GAAI,IAAMttH,EAAMjhD,OACd,MAAO,CACL,CACEuG,MAAO,cAKb,MAAM+nK,EAAe,GACrBrtH,SAAMutH,UAAU5iK,QAASoiH,IACnBqgD,EAAUvnK,SAASknH,EAAKh/F,KAC1Bs/I,EAAMxtK,KAAKktH,EAAKh/F,IAElBu/I,EAAYvgD,EAAKh/F,IAAMpqB,KAAK6pK,iBAAiBzgD,EAAMugD,EAAW,GAG/CD,EAAMxsK,IAAKktB,GACnBu/I,EAAYv/I,GAIvB,CAEQy/I,iBAAiBzgD,EAAoBugD,GAC3C,MAAMG,EAAO1gD,EAAKh/F,GAClBpqB,KAAKupK,eAAeO,GAAQ1gD,EAE5B,MAAMhvH,EAAegvH,EAAKhvH,KAAO,KAAOgvH,EAAKjjH,KAAO,IAC9CuI,EAAiB06G,EAAK16G,OAEtByvB,EAAkB,GAClB4rI,EAAkC,CACtCpoK,MAAO3B,KAAKgqK,SACZC,aAAc,CAAE7vK,OAAMsU,SAAQvI,KAAMijH,GAAMjjH,MAC1C7F,MAAOlG,EACPgwB,GAAI0/I,EACJlpF,UAAU,EACVxmF,OACAsU,SACAo7J,OACA3jK,KAAMijH,EAAKjjH,MAEb,OAAIijH,GAAMjrF,UAAU/iC,SAClBguH,EAAKjrF,SAASt2B,OAAOb,QAASkjK,IAC5B/rI,EAASjiC,KAAKytK,EAAYO,GAAQ,GAGpCH,EAAW5rI,SAAcA,GAGpB4rI,CACT,CAEAI,eAAe/gD,GACb,QAAgBxvF,IAAZwvF,EAAKh/F,GAAkB,CACzB,MAAQhwB,OAAM+L,OAAMuI,YAAW07J,GAAWpqK,KAAKupK,eAAerhK,OAAOkhH,EAAKh/F,KAC1EpqB,KAAKioB,SAAWmiJ,EAChBpqK,KAAKopK,cAAgBhvK,EAAO,KAAO+L,EAAO,GAC5C,aACSnG,KAAKioB,gBACLjoB,KAAKopK,aAEhB,iDAhGWC,IAAiBpoK,8BAAAC,MAAAD,8BAAA8H,MAAA,4DAAjBsgK,GAAiBjgK,UAAA,kBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,iRDnCdE,ksBADVvI,2BAHN,UAGMA,CAHW,UAGXA,CAF6B,UAE7BA,CADgB,WAChBA,mBAAA,KAC0BA,2BAGtBA,2BAFJ,UAEIA,CAFmB,UAEnBA,CADe,WAEbA,uBAAA,EAAAopK,GAAA,YAEAppK,2BAAA,wBAEeA,uBAAA,kBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAUwC,EAAA0mK,eAAAv/J,GAAsB,GA2B7C3J,uBA1BA,GAAAqpK,GAAA,yBAAArpK,mCA0BAA,CAxB+B,GAAAspK,GAAA,yBAAAtpK,mCAwB/BA,CAXsB,GAAAupK,GAAA,uBAgB1BvpK,6BACAA,uBAAA,GAAAwpK,GAAA,cAWVxpK,yCAhDgBA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA25E,kBAGWn8E,+CAAA,oBA4BkBA,sBAAA,GAAAA,uBAAA,UAAAwC,EAAA44C,OAO7Bp7C,+CAAA,OAAAwC,EAAAwkB,mNExCV,MAAOyiJ,GACX5qK,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvC6+I,UACE,OAAO3qK,KAAK8rB,KAAKpZ,IAAI,eACvB,CAEAk4J,qBAAqB1pI,GACnB,OAAOlhC,KAAK8rB,KAAKpZ,IAAI,0BAA0BwuB,IACjD,iDATWwpI,IAAWzpK,qBAAAC,cAAA,+DAAXwpK,GAAWvpK,QAAXupK,GAAWtpK,UAAAC,WAFV,QAAM,kBCGd,MAAOwpK,GACX7sE,SAAS8sE,EAAsBC,IAC7BC,aAAO,IAAIC,KAAK,CAACH,IAAgBC,EACnC,iDAHWF,GAAqB,+DAArBA,GAAqB1pK,QAArB0pK,GAAqBzpK,UAAAC,WAFpB,QAAM,kECMhBJ,2BAAA,cACQA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAASM,EAAAy8F,SAAS,QAAO,gCAE/B/8F,sBAAA,yCAGAA,2BAAA,UAAMA,mBAAA,cACRA,yEAJOA,+CAAA,UAAAM,EAAAwQ,MAAAmsF,uEAKPj9F,2BAAA,cACQA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,4BAAA,OAAAA,wBAASM,EAAAy8F,WAAU,gCAEzB/8F,sBAAA,yCAGAA,2BAAA,UAAMA,mBAAA,cACRA,yEAJOA,+CAAA,UAAAM,EAAAwQ,MAAAqxC,WCZL,MAAO8nH,GAOXprK,YAAoBqrK,GAAAnrK,KAAAmrK,wBAHXnrK,KAAAqF,MAAQmE,oBAEjBxJ,KAAA+R,MAAQC,IAC2D,CAEnEgsF,SAAS9lE,GACPl4B,KAAKorK,SAAW,GAAGprK,KAAKorK,aAAQ,IAAQlvI,MAAOmvI,uBAChC,SAAXnzI,EACFl4B,KAAKmrK,sBAAsBntE,SACzB/iD,KAAKC,UAAUl7C,KAAKsrK,WAAY,KAAM,GACtC,GAAGtrK,KAAKorK,iBAGVprK,KAAKmrK,sBAAsBntE,SAASh+F,KAAKurK,SAAU,GAAGvrK,KAAKorK,eAE/D,iDAnBWF,IAAuBjqK,8BAAAC,IAAA,4DAAvBgqK,GAAuB9hK,UAAA,yBAAA+C,OAAA,CAAAm/J,WAAA,aAAAC,SAAA,WAAAH,SAAA,WAAA/lK,MAAA,SAAAmF,MAAA,EAAAC,KAAA,EAAAC,OAAA,2QAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDRlCrI,2BAFF,UAEEA,CAD4B,2CAK1BA,sBAAA,WAEYA,mBAAA,WACdA,yDACAA,2BAAA,WASEA,uBARA,EAAAuqK,GAAA,eAQAvqK,CAN2B,EAAAwqK,GAAA,gBAe/BxqK,oCAzBUA,+CAAA,QAAAwC,EAAA4B,OAGDpE,+CAAA,UAAAwC,EAAAsO,MAAAisF,UAOI/8F,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA6nK,YAQArqK,+CAAA,OAAAwC,EAAA8nK,wKEhBP,MAAOG,GACXnjK,UAAUjI,EAAe+8C,GACvB,IAAKA,EACH,OAAO/8C,EAET+8C,EAAOr9C,KAAK2rK,aAAatuH,GACzB,MAAMq9D,EAAQ,IAAI//G,OAAO0iD,EAAM,MAG/B,OAFc/8C,EAAM9E,MAAMk/G,GAMnBp6G,EAAM8H,QAAQsyG,EAAO,mBAHnBp6G,CAIX,CAEQqrK,aAAajxK,GAEnB,OAAOA,EAAI0N,QAAQ,sBAAuB,OAC5C,iDAnBWsjK,GAAmB,+EAAnBA,GAAmBp+D,MAAA,6DCJ9BrsG,+BAAA,4BAiBUA,sBAAA,qEACoBA,uBADA,aAAA+K,EAAA4/J,KACA3qK,CADmB,WAAA+K,EAAA6/J,oCAKvC5qK,sBAAA,6EAEQA,uBADA,SAAA+K,EAAA6/J,SACA5qK,CADmB,sCAT7BA,2BAAA,YAQEA,uBALA,EAAA6qK,GAAA,4BAKA7qK,CAFmD,EAAA8qK,GAAA,qCAOrD9qK,sEAPuBA,+CAAA,OAAA+K,EAAAggK,wBAKZ/qK,+CAAA,OAAA+K,EAAAggK,mDAMP/qK,2BADF,MACEA,CAD2B,aACHA,mBAAA,kCAAyBA,2BACjDA,2BAAA,8CAAyDA,mBAAA,GAAmBA,2BAC5EA,sBAAA,qDAEFA,oFAJ0BA,sBAAA,GAAAA,sDAAA,IAAAgrK,EAAAC,QAClBjrK,sBAAA,GAAAA,mCAAA,YAAAA,wBAAA,IAAAgrK,EAAAE,UAAA,IAAmDlrK,sBAAA,GAAAA,8BAAAgrK,EAAAE,UAEnDlrK,+CAAA,YAAAA,wBAAA,KAAAgrK,EAAArtI,QAAA5yB,EAAAowE,QAAAn7E,mDAGRA,+BAAA,6BAzBJA,2BAAA,YAEEA,uBAAA,EAAAmrK,GAAA,cAcAnrK,2BAAA,YASEA,uBAPA,EAAAorK,GAAA,YAOAprK,CAP6B,EAAAqrK,GAAA,uBASjCrrK,qGAvBQA,+CAAA,OAAA+K,EAAA4/J,KAAAxwK,QAAA4Q,EAAAugK,iBAaDtrK,+CAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAAwgK,aACiBvrK,+CAAA,UAAA+K,EAAA4/J,MAOL3qK,wBAAwBA,uBAAxB,WAAA+K,EAAA4/J,KAAAxwK,OAAwB6F,CAAA,WAAAwrK,6BAzB3CxrK,uBAAA,EAAAyrK,GAAA,wDACMzrK,uBAAA,OAAA+K,EAAA4/J,gCAsCF3qK,sBAAA,qEACoBA,uBADA,aAAA+K,EAAA2gK,UACA1rK,CADwB,WAAA+K,EAAA4gK,wCAK5C3rK,sBAAA,6EAEQA,uBADA,SAAA+K,EAAA4gK,aACA3rK,CADuB,sCATjCA,2BAAA,YAQEA,uBALA,EAAA4rK,GAAA,4BAKA5rK,CAFmD,EAAA6rK,GAAA,qCAOrD7rK,sEAPuBA,+CAAA,OAAA+K,EAAAggK,wBAKZ/qK,+CAAA,OAAA+K,EAAAggK,mDAKP/qK,2BADF,MACEA,CADgC,aACRA,mBAAA,kCAAyBA,2BACjDA,2BAAA,8CAAyDA,mBAAA,GAAmBA,2BAC5EA,sBAAA,qDAEFA,oFAJ0BA,sBAAA,GAAAA,sDAAA,IAAA8rK,EAAAb,QAClBjrK,sBAAA,GAAAA,mCAAA,YAAAA,wBAAA,IAAA8rK,EAAAZ,UAAA,IAAmDlrK,sBAAA,GAAAA,8BAAA8rK,EAAAZ,UAEnDlrK,+CAAA,YAAAA,wBAAA,KAAA8rK,EAAAnuI,QAAA5yB,EAAAowE,QAAAn7E,mDAGRA,+BAAA,6BAxBJA,2BAAA,YAEEA,uBAAA,EAAA+rK,GAAA,cAcA/rK,2BAAA,YAQEA,uBAPA,EAAAgsK,GAAA,YAOAhsK,CAPkC,EAAAisK,GAAA,uBAStCjsK,qGAtBQA,+CAAA,OAAA+K,EAAA2gK,UAAAvxK,QAagB6F,sBAAA,GAAAA,uBAAA,UAAA+K,EAAA2gK,WAOL1rK,wBAA6BA,uBAA7B,WAAA+K,EAAA2gK,UAAAvxK,OAA6B6F,CAAA,WAAAwrK,6BAxBhDxrK,uBAAA,EAAAksK,GAAA,wDACMlsK,uBAAA,OAAA+K,EAAA2gK,WAAA3gK,EAAAohK,uCAiCJnsK,2BAAA,SACEA,sBAAA,mBAOFA,kCALcA,wBACAA,uBADA,yBACAA,CAD0B,0CAJ1CA,oCAAA,GACEA,uBAAA,EAAAosK,GAAA,wJAAMpsK,wBAA+DA,uBAA/D,OAAAA,wBAAA,IAAA+K,EAAAshK,wBAA+DrsK,CAA1B,WAAAssK,8BAD7CtsK,uBAAA,EAAAusK,GAAA,6HAAyFvsK,uBAA1E,OAAAA,wBAAA,IAAA+K,EAAAyhK,gBAAAzhK,EAAA0hK,oBAA0EzsK,CAAvB,WAAAssK,8BAhF1EtsK,2BAAA,SACEA,uBAAA,EAAA0sK,GAAA,uBAEA1sK,2BAAA,cAMEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACoBA,2BACpBA,uBAAA,EAAA2sK,GAAA,0DA+BF3sK,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,MACkBA,2BAClBA,uBAAA,GAAA4sK,GAAA,0DA8BF5sK,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MACmBA,2BACnBA,uBAAA,GAAA6sK,GAAA,0DAcJ7sK,2BAEAA,sBAAA,aACFA,+HA/FiBA,+CAAA,mBAAA8sK,GAMV9sK,wBACAA,uBADA,uBAAA+K,EAAAgiK,WACA/sK,CADmC,UAAA+K,EAAAiiK,cAwFnChtK,sBAAA,IAAAA,uBAAA,eAAAitK,8BAeCjtK,2BAAA,eAC6BA,mBAAA,GAAeA,qDAApCA,uBAAA,QAAAktK,EAAA7tK,OAAqBW,sDAAAktK,EAAA/zK,uEAR/B6G,2BAJJ,WAIIA,CAHyB,WAGzBA,CAF0B,WAE1BA,CADyB,cACzBA,mBAAA,KAEqBA,2BACrBA,2BAAA,eAEQA,6BAAA,yBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,GAAAA,sCAAA+K,EAAAmgK,SAAAvhK,KAAAoB,EAAAmgK,SAAAvhK,GAAA3J,wBAAA2J,EAAA,GACA3J,uBAAA,2BAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAiB+K,EAAAoiK,aAAY,GACnCntK,uBAAA,EAAAotK,GAAA,iBAGJptK,6BAGEA,2BADF,WACEA,CADyB,cACzBA,mBAAA,KAEoBA,2BAElBA,2BADF,YACEA,CADuB,2CAErBA,sBAAA,aAGFA,yDAEAA,2BAAA,eAGOA,6BAAA,yBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,GAAAA,sCAAA+K,EAAAowE,OAAAxxE,KAAAoB,EAAAowE,OAAAxxE,GAAA3J,wBAAA2J,EAAA,GACA3J,uBAAA,mBAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAAoiK,aAAY,GAJ5BntK,2BAMAA,2BAAA,gBAEQA,uBAAA,mBAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAAsiK,iBAAgB,gCAE/BrtK,sBAAA,aAKNA,6DAGEA,2BADF,YACEA,CADyB,eACzBA,mBAAA,OAEiBA,2BAEfA,2BADF,YACEA,CADuB,iBAOhBA,uBAAA,mBAAAA,0BAAA07E,GAAA,MAAA4xF,EAAAttK,wBAAA,WAAAA,wBAASstK,EAAA59G,OAAQ,GACjB1vD,6BAAA,yBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,GAAAA,sCAAA+K,EAAAwiK,aAAA5jK,KAAAoB,EAAAwiK,aAAA5jK,GAAA3J,wBAAA2J,EAAA,GACA3J,uBAAA,2BAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAiB+K,EAAAoiK,aAAY,GARpCntK,2BASAA,2BAAA,gBAEQA,uBAAA,mBAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAAyiK,YAAW,gCAE1BxtK,sBAAA,aAKNA,6DAGEA,2BADF,YACEA,CADoB,eACpBA,mBAAA,OACkCA,2BAElCA,2BADA,YACAA,CADoB,wBAEJA,6BAAA,yBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,GAAAA,sCAAA+K,EAAA0iK,UAAA9jK,KAAAoB,EAAA0iK,UAAA9jK,GAAA3J,wBAAA2J,EAAA,GACA3J,uBAAA,2BAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAiB+K,EAAAoiK,aAAY,GAAEntK,2BAE/CA,2BAAA,cAAmBA,mBAAA,qBAAmBA,2BAEtCA,2BAAA,wBACgBA,6BAAA,yBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,GAAAA,sCAAA+K,EAAA2iK,QAAA/jK,KAAAoB,EAAA2iK,QAAA/jK,GAAA3J,wBAAA2J,EAAA,GACA3J,uBAAA,2BAAAA,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAiB+K,EAAAoiK,aAAY,GAE3CntK,gFA1EMA,sBAAA,GAAAA,6BAAA,UAAA+K,EAAAmgK,UAEmBlrK,+CAAA,UAAA+K,EAAA4iK,YAWlB3tK,sBAAA,GACAA,uBADA,UAAA+K,EAAA+F,MAAAqqE,OACAn7E,CADwB,OAAA+K,EAAA+F,MAAA8qD,QAQxB57D,qDAAA,UAAA+K,EAAAowE,QAOAn7E,sBAAA,GACAA,uBADA,UAAA+K,EAAA+F,MAAAgX,QACA9nB,CADyB,OAAA+K,EAAA+F,MAAA8qD,QAgBzB57D,sBAAA,GAAAA,uBAAA,UAAA+K,EAAA6iK,SAGA5tK,6BAAA,UAAA+K,EAAAwiK,cAMAvtK,sBAAA,GACAA,uBADA,UAAA+K,EAAA+F,MAAAgX,QACA9nB,CADyB,OAAA+K,EAAA+F,MAAA8qD,QAWlB57D,sBAAA,GAAAA,uBAAA,eACAA,6BAAA,UAAA+K,EAAA0iK,WAKAztK,sBAAA,GAAAA,uBAAA,eACAA,6BAAA,UAAA+K,EAAA2iK,mCAhFpB1tK,uBAAA,EAAA6tK,GAAA,yDACM7tK,uBAAA,OAAA+K,EAAA+iK,kFAsFN9tK,2BAAA,UAAAA,mBAAA,MAA+EA,2BAC/EA,2BAAA,UAAMA,mBAAA,UAAMA,2BACZA,2BAAA,UACGA,uBAAA,mBAAAA,0BAAAi8E,GAAA,MAAAlxE,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAAm1D,cAAa,GADzBlgE,mBAAA,MAEqBA,mDAIrBA,2BAAA,uBAGAA,oCAAA,GAAAA,mBAAA,0CACAA,4BCtLI,MAAO+tK,GA8CXlvK,YACUmvK,EACAC,EACAh1F,EACAjsE,GAHAjO,KAAAivK,cACAjvK,KAAAkvK,cACAlvK,KAAAk6E,WACAl6E,KAAAiO,SAhDVjO,KAAAusK,iBAAkB,EAElBvsK,KAAAotK,eAAgB,EAEhBptK,KAAAytK,gBAAiB,EAEjBztK,KAAAiuK,cAAe,EAEfjuK,KAAA+uK,iBAAkB,EAElB/uK,KAAAgsK,wBAAyB,EAEzBhsK,KAAAguK,WAAa,GAEbhuK,KAAAwsK,YAAa,EAKbxsK,KAAA+R,MAAQC,KAORhS,KAAA4uK,WAAqD,CACnD,CAAEx0K,KAAM,QAASkG,MAAO,SACxB,CAAElG,KAAM,OAAQkG,MAAO,SACvB,CAAElG,KAAM,UAAWkG,MAAO,SAC1B,CAAElG,KAAM,QAASkG,MAAO,SACxB,CAAElG,KAAM,MAAOkG,MAAO,QAExBN,KAAAmsK,SAAW,MACXnsK,KAAAo8E,OAAS,GAETp8E,KAAA0uK,UAAY,CAAEj2I,KAAM,EAAGC,OAAQ,GAC/B14B,KAAA2uK,QAAU,CAAEl2I,KAAM,GAAIC,OAAQ,IAC9B14B,KAAA6uK,QAAU,CACRxmG,UAAUnsC,MAAOizI,cACjBnmC,WAAW9sG,MAAOkzI,WAAa,EAC/BnmC,SAAS/sG,MAAOmzI,UAQf,CAEH5gK,WACEzO,KAAKgkC,UACLhkC,KAAKiO,OAAOy1C,kBAAkB,KAC5B1jD,KAAKsvK,mBACLtvK,KAAKmhH,SAAWzhF,OAAOg5F,YAAY,KACjC14H,KAAKiO,OAAO21C,IAAI,KACd5jD,KAAKgkC,SAAO,EACb,EACA,IAAI,EAEX,CAEAha,cACE2uG,cAAc34H,KAAKmhH,SACrB,CAEAmuD,mBACEtvK,KAAK0tK,mBAAqB1tK,KAAKkvK,YAAY3uI,WAAW,QAAQvxB,QAC5D9R,OAAKqF,GACIA,EAAKnH,OAAS,GAAwB,IAAnBmH,EAAK,GAAGmM,SAGtC1O,KAAKstK,uBAAyBttK,KAAKkvK,YAAY3uI,WAAW,YAAYvxB,QACpE9R,OAAKqF,GACIA,EAAKnH,OAAS,GAAwB,IAAnBmH,EAAK,GAAGmM,QAGxC,CAEAs1B,UACEhkC,KAAKivK,YAAYtE,UAAUh8J,UAAWpM,IACpCvC,KAAKuvK,YAAchtK,EACnBvC,KAAK6rK,SAAW7rK,KAAKwvK,UAAUxvK,KAAKuvK,YAAY3D,MAChD5rK,KAAK4sK,aAAe5sK,KAAKwvK,UAAUxvK,KAAKuvK,YAAY5C,WACpD3sK,KAAKouK,YAAU,EAEnB,CAEAqB,kBACE,MAAMtD,EAAWnsK,KAAKmsK,SAChB5pJ,EAAMviB,KAAKo8E,OAAO73D,cACxB,IAAImrJ,EACJ,GAAI1vK,KAAKwuK,aAAc,CACrB,MAAMjzK,EAAIyE,KAAKwuK,aAAaxlC,MACtB7uI,EAAI6F,KAAKwuK,aAAavlC,IAK5BymC,EAAe,GAHF1vK,KAAKwuK,aAAanmG,QACjB9sE,GAAK,EAAI,IAAIA,IAAM,GAAGA,OACxBpB,GAAK,EAAI,IAAIA,IAAM,GAAGA,KAEpC,MACEu1K,EAAe,GAWjB,MAAO,CAAEvD,WAAU5pJ,MAAKmtJ,eAAcC,MANhB,IAFR3vK,KAAK0uK,WAAWj2I,MAAQ,IACrBz4B,KAAK0uK,WAAWh2I,QAAU,GAOEk3I,MAFvB,IAFR5vK,KAAK2uK,SAASl2I,MAAQ,KACnBz4B,KAAK2uK,SAASj2I,QAAU,IAI3C,CAEAm3I,eAAeC,EAAkBxkF,GAC/B,OAAOwkF,EAAKzrJ,OAAQw9C,IAClB,MAAMkuG,EAAY/vK,KAAKk6E,SAAS3xE,UAAUs5D,EAAKqqG,MAAO,cAChDzzI,EAAOl7B,SAASwyK,EAAUpzK,MAAM,KAAK,GAAI,IACzCqzK,EAAUzyK,SAASwyK,EAAUpzK,MAAM,KAAK,GAAI,IAClD,IAAIszK,EAAcC,EAAeC,EAEjCF,SAA4B,QAArB3kF,EAAQ6gF,SAAqBtqG,EAAKsqG,SAAW7gF,EAAQ6gF,SAC5D+D,EAAQ5kF,EAAQokF,aAAepkF,EAAQokF,aAAe7tG,EAAKqqG,MAC3DiE,EAAkB,GAAP13I,EAAYu3I,EAErBnuG,EAAKsqG,WAAa8D,IACkC,IAApDpuG,EAAKjjC,QAAQra,cAAcxoB,QAAQuvF,EAAQ/oE,OACb,IAA9Bs/C,EAAKqqG,MAAMnwK,QAAQm0K,IACnBC,GAAY7kF,EAAQqkF,OACpBQ,GAAY7kF,EAAQskF,OAG1B,CAEAxB,aACE,MAAM9iF,EAAUtrF,KAAKyvK,kBACrBzvK,KAAK4rK,KAAO5rK,KAAK6vK,eAAe7vK,KAAKuvK,YAAY3D,KAAMtgF,GACvDtrF,KAAK2sK,UAAY3sK,KAAK6vK,eAAe7vK,KAAKuvK,YAAY5C,UAAWrhF,EACnE,CAEAgjF,iBACEtuK,KAAKo8E,OAAS,GACdp8E,KAAKouK,YACP,CACAK,YACEzuK,KAAKwuK,aAAe,KACpBxuK,KAAKouK,YACP,CACAjtG,cACE,OAAAnhE,KAAKmsK,SAAW,MAChBnsK,KAAKo8E,OAAS,GACdp8E,KAAKwuK,aAAe,KACpBxuK,KAAK0uK,UAAY,CAAEj2I,KAAM,EAAGC,OAAQ,GACpC14B,KAAK2uK,QAAU,CAAEl2I,KAAM,GAAIC,OAAQ,IACnC14B,KAAKouK,cAEE,CACT,CAEAoB,UAAUp7E,GACR,IAAIg8E,EAAU,GACd,UAAWvuG,KAAQ5vD,OAAOC,KAAKkiF,GAC7Bg8E,EACEA,EACApwK,KAAKk6E,SAAS3xE,UAAU6rF,EAAIvyB,GAAMqqG,MAAO,UACzC,KACA93E,EAAIvyB,GAAMsqG,SACV,KACA/3E,EAAIvyB,GAAMjjC,QACV,KAEJ,OAAOwxI,CACT,iDAhLWpB,IAAa/tK,8BAAAC,IAAAD,8BAAA8H,MAAA9H,8BAAA+H,YAAA/H,wCAAA,4DAAb+tK,GAAa5lK,UAAA,cAAA+C,OAAA,CAAAogK,gBAAA,kBAAAa,cAAA,gBAAAK,eAAA,iBAAAQ,aAAA,eAAAc,gBAAA,kBAAA/C,uBAAA,yBAAAgC,WAAA,aAAAxB,WAAA,cAAAhiK,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,kCDLZ5C,wFAkCAA,uFAiCAA,wFAKiBA,wFAsBbA,sFAaAA,qFA4BAA,kFAwBWA,wFAgBhBA,iJAIHA,0FAKeA,+GAEJA,68DAJrBvI,uBAjMA,EAAAovK,GAAA,cAiMApvK,CAjMyB,EAAAqvK,GAAA,yBAAArvK,mCAiMzBA,CA/F4B,EAAAsvK,GAAA,yBAAAtvK,mCA+F5BA,CAR2B,EAAAuvK,GAAA,yBAAAvvK,yCAzLrBA,uBAAA,OAAAwC,EAAA8rK,k7CEiBMtuK,2BAAA,eACEA,mBAAA,sCACFA,+EADEA,uDAAA,IAAAA,wBAAA,IAAAwvK,EAAAnwK,MAAAqxI,WAAA8+B,EAAAnwK,MAAAgvF,MAAA,gCAQFruF,2BAFF,WAEEA,CAD8C,YAM5CA,sBAJA,aAIAA,CADuD,cAI3DA,iFAPWA,sBAAA,GAAAA,kCAAA,KAAAwvK,EAAAnwK,MAAAlG,MAGA6G,kCAAA,kBAAAwvK,EAAAnwK,MAAAlG,MAEA6G,0DAAA,MAAAwvK,EAAAnwK,MAAAlG,gCAOT6G,sBAAA,kEAAOA,kCAAA,KAAAwvK,EAAAnwK,MAAAlG,MAGA6G,kCAAA,kBAAAwvK,EAAAnwK,MAAAlG,iCAML6G,2BAAA,eAEEA,mBAAA,GACFA,qDAFQA,uBAAA,UAAAgmB,GACNhmB,uDAAA,IAAAgmB,EAAA,gCANJhmB,2BAAA,eAIEA,uBAAA,EAAAyvK,GAAA,iBAIFzvK,gFARQA,kCAAA,KAAAwvK,EAAAnwK,MAAAlG,MAEA6G,kCAAA,kBAAAwvK,EAAAnwK,MAAAlG,MAEoB6G,+CAAA,UAAAwvK,EAAAnwK,MAAAqwK,sCAK5B1vK,2BAAA,aAAAA,mBAAA,KAE4FA,mDAC5FA,2BAAA,aAAAA,mBAAA,KAE4DA,sDArB9DA,2BAAA,YAmBEA,uBAjBA,EAAA2vK,GAAA,eAiBA3vK,CAb4D,EAAA4vK,GAAA,gBAa5D5vK,CAT2D,EAAA6vK,GAAA,cAS3D7vK,CADW,EAAA8vK,GAAA,eAIb9vK,4KAhBUA,+CAAA,WAAAwvK,EAAAnwK,MAAAqwK,aAAAv1K,QAIC6F,+CAAA,OAAAwvK,EAAAnwK,MAAAqwK,aAAAv1K,OAAA,GAOF6F,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,gBAGAhwK,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,oCAaPhwK,2BAAA,aAAAA,mBAAA,KAEkCA,sDAClCA,2BAAA,aAAAA,mBAAA,KAEoGA,gFAAzFA,8CAAAwvK,EAAAnwK,MAAArB,2DACXgC,2BAAA,aAAAA,mBAAA,KAEqGA,gFAA1FA,8CAAAwvK,EAAAnwK,MAAA8lE,wDACXnlE,2BAAA,aAAAA,mBAAA,KAEkDA,sDAnBpDA,2BAAA,YAEEA,sBAAA,cAeAA,uBATA,EAAAiwK,GAAA,cASAjwK,CAPW,EAAAkwK,GAAA,cAOXlwK,CAJW,EAAAmwK,GAAA,cAIXnwK,CADW,EAAAowK,GAAA,eAIbpwK,4KAlBSA,0DAAA,KAAAwvK,EAAAnwK,MAAAlG,MAGA6G,kCAAA,kBAAAwvK,EAAAnwK,MAAAlG,MACA6G,kCAAA,MAAAwvK,EAAAnwK,MAAA8lE,KACAnlE,kCAAA,MAAAwvK,EAAAnwK,MAAArB,KAEAgC,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,aAGAhwK,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,QAGAhwK,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,QAGAhwK,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,oCAWPhwK,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAE6DA,sDAX/DA,2BAAA,YAEEA,sBAAA,cAOAA,uBAHA,EAAAqwK,GAAA,cAGArwK,CADW,EAAAswK,GAAA,eAIbtwK,4KAVSA,0DAAA,KAAAwvK,EAAAnwK,MAAAlG,MAGA6G,kCAAA,kBAAAwvK,EAAAnwK,MAAAlG,MAEA6G,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,aAGAhwK,+CAAA,OAAA49D,EAAAmyG,cAAA3gK,UAAAogK,EAAAnwK,MAAAlG,KAAA62K,EAAA,uCAjFThwK,2BAJF,WAIEA,CAHyD,cAKvDA,mBAAA,GACAA,uBAAA,EAAAuwK,GAAA,oBAGFvwK,2BAiEAA,uBA7DA,EAAAwwK,GAAA,aA6DAxwK,CA5DgD,EAAAywK,GAAA,aA4DhDzwK,CA/CuE,EAAA0wK,GAAA,aA+CvE1wK,CAtB+E,EAAA2wK,GAAA,cAoCjF3wK,qDApFSA,0DAAA,MAAAwvK,EAAAnwK,MAAAlG,MACL6G,uDAAA,IAAAwvK,EAAAnwK,MAAAlG,KAAA,KACY6G,+CAAA,OAAAwvK,EAAAnwK,MAAAqxI,WAAA8+B,EAAAnwK,MAAAgvF,MAQRruF,+CAAA,gBAAAwvK,EAAAnwK,MAAA6F,MAaAlF,+CAAA,OAAAA,4BAAA,EAAAyI,IAAAxH,SAAAuuK,EAAAnwK,MAAA6F,OAyBAlF,+CAAA,OAAAA,4BAAA,EAAAK,IAAAY,SAAAuuK,EAAAnwK,MAAA6F,OAuBAlF,+CAAA,iBAAAwvK,EAAAnwK,MAAA6F,uEA/EVlF,2BAPN,WAOMA,CANwB,cAMxBA,CAFa,WAEbA,CADgB,YAChBA,mBAAA,KAC6BA,2BAC7BA,2BAAA,YACEA,uBAAA,EAAA4wK,GAAA,+CA0FF5wK,2BAEEA,2BADF,WACEA,CADuB,8BACDA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAsyD,EAAA59D,4BAAA,OAAAA,wBAAqB49D,EAAA9qC,WAAU,GAO7D9yB,+EAzGQA,+CAAA,YAAA49D,EAAAmyG,eAO8B/vK,sBAAA,GAAAA,uBAAA,UAAAA,wBAAA,IAAA49D,EAAAizG,gBA4FR7wK,sBAAA,GACAA,uBADA,OAAA49D,EAAAmyG,cACA/vK,CADsB,aAAA49D,EAAA7wD,aAAAu6D,SClF9C,MAAOwpG,WAA+Bx0J,KAK1Czd,YACSkO,EACC0P,EACAnJ,EACAuJ,EACAu7B,EACAhoB,GAERhjB,QAPOrO,KAAAgO,eACChO,KAAA0d,QACA1d,KAAAuU,SACAvU,KAAA8d,cACA9d,KAAAq5C,mBACAr5C,KAAAqxB,sBATVrxB,KAAAgyK,WAAa,GACbhyK,KAAA8xK,cAAuB,EAWvB,CAEArjK,WACEzO,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAKgyK,WAAavyJ,mBAAmBD,EAAOplB,MAC5C,MAAMw3B,EAAc,CAClB5xB,KAAKq5C,iBAAiB1S,WAAW3mC,KAAKgyK,YACtChyK,KAAKq5C,iBAAiB5S,UAAUzmC,KAAKgyK,cAEvCngJ,cAAmBD,GAAajjB,UAC7Bgb,IACC3pB,KAAK8xK,cAAgBnoJ,EAAK,GAE1B3pB,KAAKif,aAELjf,KAAKgxK,cAAcrxJ,SAASgK,EAAK,IACjC3pB,KAAKwgB,cAAY,EAElB+nI,IACCvoJ,KAAKygG,cAAY,EAClB,EAGP,CAEAsxC,cAAckgC,GACZ,MAAMp2K,EAAS,GACf,OAAQo2K,EAAa9rK,MACnB,IAAK,OACHtK,EAAOK,KAAK4lB,MAAazU,MACzB,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACL,IAAK,OACHxR,EAAOK,KAAKoX,aAAWC,UACvB,MACF,IAAK,MACCpB,aAAW8/J,EAAa7rG,MAC1BvqE,EAAOK,KAAKoX,aAAW4+J,UAAUD,EAAa7rG,MAE5Cj0D,aAAW8/J,EAAahzK,MAC1BpD,EAAOK,KAAKoX,aAAW6+J,UAAUF,EAAahzK,MAEhD,MACF,IAAK,QACHpD,EAAOK,KAAKoX,aAAWC,UACvB1X,EAAOK,KAAK4lB,MAAam/E,iBACzB,MACF,IAAK,OACHplG,EAAOK,KAAK4lB,MAAa8gF,QAG7B,OAAO/mG,CACT,CAEAojB,aACE,MAAMq5C,EAAiB,GACvBnmD,YAAUnS,KAAK8xK,cAAgBG,IAC7B35G,EAAe25G,EAAa73K,MAAQ,CAClC63K,EAAaG,cACbpyK,KAAK+xI,cAAckgC,GAAa,GAGpCjyK,KAAKgxK,cAAgBhxK,KAAK8d,YAAYqZ,MAAMmhC,EAC9C,CAEA+5G,eACEryK,KAAKuU,OAAOC,SAAS,CAAC,gBACxB,CAEAuf,WAEE,GAAI/zB,KAAKgxK,cAAcprJ,SAErB,YADA5lB,KAAKqyK,eAGP,MAAMtvI,EAAS,GACf5wB,YAAUnS,KAAK8xK,cAAgBG,IAC7B,MAAMr+J,EAAU5T,KAAKgxK,cAAct+J,IAAIu/J,EAAa73K,MAEhDwZ,EAAQrC,OAASqC,EAAQtC,QAC3ByxB,EAAOkvI,EAAa73K,MAAQwZ,EAAQtT,SAGxCN,KAAKq5C,iBAAiB3S,aAAa1mC,KAAKgyK,WAAYjvI,GAAQp0B,UAC1D,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,wCAAwCxJ,KAAKgyK,gBAE/ChyK,KAAKqyK,cAAY,EAEnB,KAEEryK,KAAKgxK,cAAczrJ,UAAU,CAAEE,gBAAgB,GAAM,EAG3D,iDAhHWssJ,IAAsB9wK,8BAAAC,MAAAD,8BAAA8H,kBAAA9H,8BAAA8H,UAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAA,4DAAtB6oK,GAAsB3oK,UAAA,yBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,2BDbnB5C,gGA+COA,8JAGAA,6HAcAA,oGAGAA,uIAA4D,oCAG5DA,wIAA6D,oCAG7DA,oHAYAA,oGAGAA,mtCAhGvBvI,uBAAA,EAAAqxK,GAAA,oBACMrxK,uBAAA,gBAAAwC,EAAA4iB,yZEDNplB,oCAAA,GACEA,sBAAA,wGAAoBA,+CAAA,OAAA+K,EAAAumK,gBCQhB,MAAOC,GAMX1yK,YAAoBu5C,GAAAr5C,KAAAq5C,kBAAqC,CAEzDzyC,cACM5G,KAAKiM,WACPjM,KAAKq5C,iBAAiB5S,UAAUzmC,KAAKiM,UAAU7R,MAAMuU,UAAWgb,IAC9D3pB,KAAKuyK,cAAgB5oJ,GAG3B,iDAdW6oJ,IAAyBvxK,8BAAAC,MAAA,4DAAzBsxK,GAAyBppK,UAAA,4BAAA+C,OAAA,CAAAF,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,wBAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GDTtCrI,uBAAA,EAAAwxK,GAAA,2BAAexxK,uBAAA,OAAAwC,EAAAwI,mEEgBbhL,sBAAA,sEACuBA,uBAAA,YAAAM,EAAA+K,cCEnB,MAAOomK,WAA+B3kK,IAU1CjO,YACUoO,EACAmrC,GAERhrC,QAHQrO,KAAAkO,qBACAlO,KAAAq5C,mBANVr5C,KAAA6M,QAA2B,GAC3B7M,KAAA8rI,QAAoB,GACpB9rI,KAAAiM,UAA8B,IAAIqC,IAOhCtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB6lG,UAC3D10G,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,UACNC,SAAU,EACVqiB,UAAW,cACXtI,mBAAoBC,IAAagJ,WAEnC,CACEh4B,KAAMoP,qBACN2F,KAAM,YACNC,SAAU,EACVqiB,UAAW,cACXtI,mBAAoBC,IAAagJ,YAGrC,MAAMugJ,EAAeA,IACnB3yK,KAAKiM,UAAUmc,SAAW0jB,mBAAmB9rC,KAAKiM,UAAUmc,QAAQhuB,MACtE4F,KAAK+M,aAAe,CAClB,CACE3S,KAAMoP,gBACNsD,WAAY,SACZmT,QAASA,KACFjgB,KAAKiM,UAAU8mE,cAI4C,IAAzD9gE,OAAOpJ,OAAO7I,KAAKiM,UAAUmc,QAAQllB,SAAS9H,OAEvDqtB,WAAYA,IAAM,qBAAqBkqJ,MACvCpqJ,KAAMvW,KAAM6W,MAEd,CACEzuB,KAAMoP,kBACNsD,WAAY,SACZkc,MAAOA,IAAMhpB,KAAK4mC,oBAClB3mB,QAASA,IAAMjgB,KAAK4yK,sBAAsB,WAC1CrqJ,KAAMvW,KAAMjX,OAEd,CACEX,KAAMoP,mBACNsD,WAAY,SACZkc,MAAOA,IAAMhpB,KAAK4mC,oBAClB3mB,QAASA,IAAMjgB,KAAK6yK,6BACpBtqJ,KAAMvW,KAAMs1B,MAGlB,CAEAwrI,cAActtK,GACZxF,KAAKq5C,iBAAiB31B,OAAO/U,UAC1Bgb,IACC3pB,KAAK8rI,QAAUniH,GAEjB,KACEnkB,EAAQ+b,OAAK,EAGnB,CAEA7U,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAQA2mK,sBAAsBvoJ,GACpB,IAAKrqB,KAAKiM,UAAU8mE,aAClB,OAAO,EAET,MAAMzT,EAAWt/D,KAAKiM,UAAUmc,QAQhC,GAJsB,cAAlBk3C,EAASllE,MAITklE,EAASyzG,UACX,OAAO,EAET,OAAQ1oJ,GACN,IAAK,UACH,OAAOi1C,EAAS1nC,QAClB,IAAK,WACH,OAAQ0nC,EAAS1nC,QAEvB,CAEAi7I,6BACE,OAAI7yK,KAAKiM,UAAUmc,SAAS2qJ,UACnBvpK,6CAGFxJ,KAAK4yK,sBAAsB,WACpC,CAKAhsI,oBACE,IAAK5mC,KAAKiM,UAAU8mE,aAClB,OAEF,MAAMzT,EAAWt/D,KAAKiM,UAAUmc,QAChCpoB,KAAKq5C,iBAAiBzS,kBAAkB04B,EAASllE,KAAMklE,EAAS1nC,QAAS53B,KAAKsqB,MAChF,iDAnIWooJ,IAAsBzxK,8BAAAC,KAAAD,8BAAA8H,MAAA,4DAAtB2pK,GAAsBtpK,UAAA,yBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BACtBsyE,KAAc,ygBDpB3B36E,2BAAA,kBAUUA,uBAHA,0BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAkBwC,EAAA+I,eAAA5B,GAAsB,EAGxC3J,CAHyC,2BAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBACtBwC,EAAAiJ,gBAAA9B,GAAuB,EAE1C3J,CAF2C,qBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAE9BwC,EAAAqvK,cAAAloK,GAAqB,GAC1C3J,sBAAA,wBAKAA,uBAAA,EAAA+xK,GAAA,+BAGF/xK,iCAbUA,uBALA,gBAKAA,CALoB,OAAAwC,EAAAqoI,QAKpB7qI,CAJgB,UAAAwC,EAAAoJ,QAIhB5L,CAHmB,iBASTA,sBAAA,GAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,oDEPrC,MAAOkmK,GACXnzK,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvConJ,aACE,OAAOlzK,KAAK8rB,KAAKpZ,IAAI,cACvB,iDALWugK,IAAchyK,qBAAAC,cAAA,+DAAd+xK,GAAc9xK,QAAd8xK,GAAc7xK,UAAAC,WAFb,QAAM,4BCKRJ,2BAJN,aAIMA,CAHoB,UAGpBA,CAFG,OAEHA,CADE,WACFA,mBAAA,KAC2BA,2BAC3BA,2BAAA,QAAIA,mBAAA,GACNA,6BAEEA,2BADF,OACEA,CADE,WACFA,mBAAA,KACgCA,2BAChCA,2BAAA,SAAIA,mBAAA,0CACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC6BA,2BAC7BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC2BA,2BAC3BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC2BA,2BAC3BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC6BA,2BAC7BA,2BAAA,SAAIA,mBAAA,IACNA,6BAEEA,2BADF,QACEA,CADE,YACFA,mBAAA,MAC6BA,2BAC7BA,2BAAA,SAAIA,mBAAA,IAGVA,2EAjCUA,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAC,OAAAC,MAKApyK,sBAAA,GAAAA,sDAAA,KAAA+K,EAAAmnK,WAAAC,OAAAE,WAKAryK,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAC,OAAAG,OAKAtyK,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAtsJ,SAAA2sJ,YAKAvyK,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAtsJ,SAAA4sJ,YAKAxyK,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAtsJ,SAAA6sJ,cAKAzyK,sBAAA,GAAAA,8BAAA+K,EAAAmnK,WAAAtsJ,SAAA8sJ,eC7BV,MAAOC,GAOX9zK,YAAoB+zK,GAAA7zK,KAAA6zK,iBAClB7zK,KAAK8zK,SAAW,CACdjnK,QAAS,CACP,CAAEsC,KAAM,OAAQ/U,KAAMoP,gBAAiB2f,mBAAoBC,IAAaX,YACxE,CAAEtZ,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,cAAe/U,KAAMoP,2BAC7B,CACE2F,KAAM,iBACN/U,KAAMoP,yBACN2f,mBAAoBC,IAAaqiE,UACjCinC,WAAYA,CAACqhD,EAAYC,KAEvB,MAAMC,EAAa9hK,SAAO4hK,GACpBG,EAAa/hK,SAAO6hK,GAE1B,OAAKC,GAAeC,GAAcD,IAAeC,EAI1CD,EAAaC,EAAa,GAAI,EAH5B,CAG4B,KAM7Cl0K,KAAKm0K,YAAc,CACjBtnK,QAAS,CACP,CAAEsC,KAAM,OAAQ/U,KAAMoP,gBAAiB2f,mBAAoBC,IAAaX,YACxE,CAAEtZ,KAAM,OAAQ/U,KAAMoP,iBACtB,CAAE2F,KAAM,cAAe/U,KAAMoP,4BAGnC,CAEAg8B,UACExlC,KAAK6zK,eAAeX,aAAavkK,UAAWpM,IAC1CA,EAAK6xK,UAAUl3K,IAAKuxE,IAClBA,EAAI4lG,eAAiB5lG,EAAI95B,MAAM2/H,aAAap3K,IAAKjB,GAAcA,EAAE,IACjEwyE,EAAIiT,OAAS,sBAAwBjT,EAAIr0E,KACzCq0E,EAAIkT,SAAW,CAAEohF,SAAU,YACpBt0F,IAGTlsE,EAAKgyK,WAAWr3K,IAAKuxE,IACnBA,EAAIiT,OAAS,sBAAwBjT,EAAIr0E,KACzCq0E,EAAIkT,SAAW,CAAEohF,SAAU,YACpBt0F,IAGTzuE,KAAK8zK,SAASvxK,KAAO,IAAIA,EAAK6xK,WAC9Bp0K,KAAKm0K,YAAY5xK,KAAO,IAAIA,EAAKgyK,YACjCv0K,KAAKmzK,WAAa5wK,EAAK4wK,YAE3B,iDA5DWS,IAAgB3yK,8BAAAC,IAAA,4DAAhB0yK,GAAgBxqK,UAAA,iBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,6BDRV5C,mFA8CqBA,sFAOAA,0FA/CXA,uFAKAA,2FAKAA,yFAKAA,uFAKAA,uFAKAA,yFAKAA,yeArCvBvI,2BAHN,WAGMA,CAHW,WAGXA,CAFkB,aAElBA,CADQ,eACRA,mBAAA,KACmBA,2BACnBA,uBAAA,EAAAuzK,GAAA,iBAyCJvzK,6BAGEA,2BADF,WACEA,CADoB,eACpBA,mBAAA,KAC6CA,2BAC7CA,2BAAA,SACAA,sBAAA,kBAEWA,2BAEXA,2BAAA,gBAAAA,mBAAA,MACiDA,2BAEjDA,2BADA,SACAA,CADK,kBAEKA,uBAAA,8BAAawC,EAAA+hC,SAAS,GAIpCvkC,wCA1DcA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA0vK,YA8CAlyK,sBAAA,GACAA,uBADA,OAAAwC,EAAAqwK,SAAAvxK,KACAtB,CADsB,UAAAwC,EAAAqwK,SAAAjnK,SAOtB5L,sBAAA,GAEAA,uBAFA,OAAAwC,EAAA0wK,YAAA5xK,KAEAtB,CAFyB,UAAAwC,EAAA0wK,YAAAtnK,8CE3DjC,MAAO4nK,8BCuBDxzK,2BAAA,aAAAA,mBAAA,KAGuBA,sEAFjBA,uBAAA,aAAAmP,EAAAskK,2CAMRzzK,sBAAA,2EAlBAA,2BAFF,WAEEA,CAD+C,cAKxCA,uBAAA,0BAAAsxI,EAAAtxI,0BAAA4P,GAAA0/C,UAAAngD,EAAAnP,4BAAA,OAAAA,wBAAUmP,EAAAukK,YAAApiC,GAAiB,GAJlCtxI,2BAUEA,2BAHF,aAGEA,CAD8B,YACtBA,mBAAA,GAAeA,2BACvBA,uBAAA,EAAA2zK,GAAA,eAIA3zK,sBAAA,QACAA,2BAAA,aAAmCA,mBAAA,GACrCA,6BACAA,uBAAA,EAAA4zK,GAAA,aAEF5zK,gEAlBSA,wBAIAA,uBAJA,UAAAsxI,EAAAjyI,MAIAW,CAJsB,gBAAAsxI,EAAAuiC,cAItB7zK,CAHoC,OAAAsxI,EAAAr0C,KAGpCj9F,CADkB,KAAAsxI,EAAAr0C,MAGlBj9F,+CAAA,MAAAsxI,EAAAr0C,MAEGj9F,sBAAA,GAAAA,8BAAAsxI,EAAAn4I,MAGD6G,+CAAA,OAAAsxI,EAAAwiC,aAG4B9zK,sBAAA,GAAAA,8BAAAsxI,EAAA/gH,aAGhCvwB,+CAAA,QAAA+zK,ICZT,MAAOC,GAyCXn1K,YACSstH,EACAp/G,EACCE,EACAyjJ,EACAtgI,GAJDrxB,KAAAotH,cACAptH,KAAAgO,eACChO,KAAAkO,qBACAlO,KAAA2xJ,aACA3xJ,KAAAqxB,sBA3CVrxB,KAAAk1K,iBAA2B,GAC3Bl1K,KAAAm1K,aAAe,IAAI7kH,mBAAiB,IACpCtwD,KAAAsyI,MAAgB,CACd,CACEp0C,KAAM,OACN9jG,KAAMoP,iBACNgoB,YAAahoB,yCACblJ,OAAO,EACPy0K,aAAa,EACbD,eAAe,GAEjB,CACE52E,KAAM,SACN9jG,KAAMoP,mBACNgoB,YAAahoB,iGACblJ,OAAO,EACPy0K,aAAa,EACbD,eAAe,GAEjB,CACE52E,KAAM,OACN9jG,KAAMoP,iBACNgoB,YAAahoB,2FACblJ,OAAO,EACPy0K,aAAa,EACbD,eAAe,GAEjB,CACE52E,KAAM,QACN9jG,KAAMoP,kBACNgoB,YAAahoB,mFACblJ,OAAO,EACPy0K,aAAa,EACbD,eAAe,IAGnB90K,KAAA00K,mBAA6BlrK,6DAS3BxJ,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACE,MAAM2mK,EAAWp1K,KAAKs/D,SAASlkE,OAC/B4E,KAAK2xJ,WAAW9b,WAAWlnI,UAAW0mK,IACpC,MAAMC,EAAsBt1K,KAAKu1K,yBACjCv1K,KAAKsyI,MAAMtrI,QAAS82F,IAClB,MAAM03E,EAAYF,EAAoBx3E,EAAKI,MACvCm3E,EAAiBnzK,SAAS47F,EAAKI,QACjCJ,EAAKi3E,aAAc,GAGjBS,IAAcJ,EAChBt3E,EAAKx9F,OAAQ,EACJk1K,EAAY,IACrB13E,EAAKg3E,eAAgB,KAGzB90K,KAAKk1K,iBAAmB/iK,cAAYnS,KAAKsyI,MAAK,EAElD,CAEAijC,yBACE,MAAME,EAAa,GACnB,OAAAz1K,KAAKsyI,MAAMtrI,QAAS82F,IAClB23E,EAAW33E,EAAKI,MAAQ,IAG1B,GAAGt1F,UAAU5I,KAAKs/D,SAASpiE,IAAK8zG,GAAQA,EAAI3mF,QAAWntB,IAAKw4K,IACtDzjK,OAAOC,KAAKujK,GAAYvzK,SAASwzK,KACnCD,EAAWC,GAAiBD,EAAWC,GAAiB,KAGrDD,CACT,CAEAd,YAAY72E,GACVA,EAAKx9F,OAASw9F,EAAKx9F,MACnBw9F,EAAKg3E,eAAgB,CACvB,CAEAa,iBACE31K,KAAKsyI,MAAQngI,cAAYnS,KAAKk1K,iBAChC,CAEA74J,eACE,MAAMu5J,EAAc,GACpB51K,KAAKsyI,MAAMtrI,QAAS82F,IACdA,EAAKg3E,cACPc,EAAY93E,EAAKI,MAAQ,KAEzB03E,EAAY93E,EAAKI,MAAQJ,EAAKx9F,QAGlC,MAAMu1K,EAAc71K,KAAKs/D,SAASpiE,IAAK+O,GAAcA,EAAU+kG,KAC/DhxG,KAAK2xJ,WAAW5b,sBAAsB6/B,EAAaC,GAAalnK,UAC9D,KACE3O,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,8BACxDxJ,KAAKotH,YAAYn0F,OAAK,EAExB,KACEj5B,KAAKotH,YAAYn0F,OAAK,EAG5B,iDAjHWg8I,IAA2Bh0K,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,IAAAhI,8BAAAiI,KAAA,4DAA3B+rK,GAA2B7rK,UAAA,+BAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDjBnB5C,iGAqCAA,uGAbEA,u2BA1BvBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAGAA,oCAAA,KAKIA,2BAJF,aAIEA,CADe,WAEbA,uBAAA,EAAA60K,GAAA,cAuBF70K,2BAGEA,2BADF,WACEA,CADwB,eAGhBA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAAkyK,iBAAgB,GAFjC10K,mBAAA,MAGuCA,2BACvCA,2BAAA,8BAAsBA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAA4Y,eAAc,GAK7Dpb,mEAEJA,iCA/CUA,uBAAA,WAAAwC,EAAA2pH,aAOAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA0xK,cAIoBl0K,sBAAA,GAAAA,uBAAA,UAAAwC,EAAA6uI,OA8BArxI,sBAAA,GAEAA,uBAFA,OAAAwC,EAAA0xK,aAEAl0K,CAFqB,aAAAwC,EAAA87B,YAAAyxE,IAAAjpG,OAErB9G,CADqC,aAAAwC,EAAAuK,aAAAu6D,0LEfzDtnE,sBAAA,2EAdAA,2BAFF,WAEEA,CAD+C,cAIxCA,uBAAA,0BAAAsxI,EAAAtxI,0BAAA4P,GAAA0/C,UAAA,OAAAtvD,wBAAAsxI,EAAAjyI,OAAAiyI,EAAAjyI,MAAA,GAHPW,2BAUEA,2BAHF,aAGEA,CAD8B,YACtBA,mBAAA,GAAeA,2BACvBA,sBAAA,QACAA,2BAAA,aAAmCA,mBAAA,GACrCA,6BACAA,uBAAA,EAAA80K,GAAA,aAEF90K,gEAdSA,wBAIAA,uBAJA,UAAAsxI,EAAAjyI,MAIAW,CAJsB,OAAAsxI,EAAAr0C,KAItBj9F,CAFkB,KAAAsxI,EAAAr0C,KAElBj9F,CADgB,WAAAsxI,EAAAhoG,UAGhBtpC,+CAAA,MAAAsxI,EAAAr0C,MAEGj9F,sBAAA,GAAAA,8BAAAsxI,EAAAn4I,MAE2B6G,sBAAA,GAAAA,8BAAAsxI,EAAA/gH,aAGhCvwB,+CAAA,QAAA+0K,ICVT,MAAOC,GAkGXn2K,YACSstH,EACAp/G,EACCE,EACAyjJ,EACAtgI,GAJDrxB,KAAAotH,cACAptH,KAAAgO,eACChO,KAAAkO,qBACAlO,KAAA2xJ,aACA3xJ,KAAAqxB,sBApGVrxB,KAAAm1K,aAAe,IAAI7kH,mBAAiB,IAEpCtwD,KAAAk2K,SAAW,CACTC,KAAM,CACJj4E,KAAM,OACN9jG,KAAMoP,iBACNlJ,OAAO,EACPkxB,YAAahoB,4FAEf4sK,MAAO,CACLl4E,KAAM,QACN9jG,KAAMoP,kBACNlJ,OAAO,EACPkxB,YAAahoB,oFAEf6sK,KAAM,CACJn4E,KAAM,OACN9jG,KAAMoP,iBACNlJ,OAAO,EACPkxB,YAAahoB,0CAEf8sK,OAAQ,CACNp4E,KAAM,SACN9jG,KAAMoP,mBACNlJ,OAAO,EACPkxB,YAAahoB,kGAEf+sK,MAAO,CACLr4E,KAAM,QACN9jG,KAAMoP,iBACNlJ,OAAO,EACPkxB,YAAahoB,oCAEfgtK,QAAS,CACPt4E,KAAM,UACN9jG,KAAMoP,oBACNlJ,OAAO,EACPkxB,YAAahoB,kCAEf,eAAgB,CACd00F,KAAM,eACN9jG,KAAMoP,yBACNlJ,OAAO,EACPkxB,YAAahoB,uCAEfitK,WAAY,CACVv4E,KAAM,aACN9jG,KAAMoP,uBACNlJ,OAAO,EACPkxB,YAAahoB,4CAEfktK,YAAa,CACXx4E,KAAM,cACN9jG,KAAMoP,wBACNlJ,OAAO,EACPkxB,YAAahoB,uEAEfmtK,UAAW,CACTz4E,KAAM,YACN9jG,KAAMoP,sBACNlJ,OAAO,EACPkxB,YAAahoB,yCAEfotK,YAAa,CACX14E,KAAM,cACN9jG,KAAMoP,wBACNlJ,OAAO,EACPkxB,YAAahoB,4BACb+gC,UAAU,GAEZssI,gBAAiB,CACf34E,KAAM,kBACN9jG,KAAMoP,2BACNlJ,OAAO,EACPkxB,YAAahoB,wCACb+gC,UAAU,GAEZusI,iBAAkB,CAChB54E,KAAM,mBACN9jG,KAAMoP,4BACNlJ,OAAO,EACPkxB,YAAahoB,gEACb+gC,UAAU,GAEZwsI,gBAAiB,CACf74E,KAAM,kBACN9jG,KAAMoP,6BACNlJ,OAAO,EACPkxB,YAAahoB,8CACb+gC,UAAU,IAIdvqC,KAAAg3K,aAAyB,GASvBh3K,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAK2xJ,WAAW9b,WAAWlnI,UAAWwT,IACpCA,EAAInb,QAAS1G,IACPN,KAAKk2K,SAAS51K,GAChBN,KAAKk2K,SAAS51K,GAAOA,OAAQ,EAE7BN,KAAKg3K,aAAa96K,KAAKoE,EAAK,GAGhCN,KAAKsyI,MAAQngI,YAAUnS,KAAKk2K,SAAQ,EAExC,CAEA75J,eACE,MAAM46J,EAAWj3K,KAAKsyI,MACnBjuH,OAAQy5E,GAASA,EAAKx9F,OACtBpD,IAAK4gG,GAASA,EAAKI,MACnBt1F,OAAO5I,KAAKg3K,cAEfh3K,KAAK2xJ,WAAW7b,YAAYmhC,GAAUtoK,UACpC,KACE3O,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,8BACxDxJ,KAAKotH,YAAYn0F,OAAK,EAExB,KACEj5B,KAAKotH,YAAYn0F,OAAK,EAG5B,iDAxIWg9I,IAAsBh1K,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,IAAAhI,8BAAAiI,KAAA,4DAAtB+sK,GAAsB7sK,UAAA,yBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDhBd5C,suBAFrBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAGAA,oCAAA,KAMIA,2BALF,aAKEA,CADsB,WAEpBA,uBAAA,EAAAi2K,GAAA,aAmBFj2K,2BAGEA,2BADF,UACEA,CADwB,4BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAA4Y,eAAc,GAK7Dpb,mEAEJA,iCAxCUA,uBAAA,WAAAwC,EAAA2pH,aAOAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA0xK,cAKoBl0K,sBAAA,GAAAA,uBAAA,UAAAwC,EAAA6uI,OAsBArxI,sBAAA,GAEAA,uBAFA,OAAAwC,EAAA0xK,aAEAl0K,CAFqB,aAAAwC,EAAA87B,YAAAyxE,IAAAjpG,OAErB9G,CADqC,aAAAwC,EAAAuK,aAAAu6D,sLEzBzDtnE,2BAAA,eACEA,mBAAA,GAAsBA,gFAAtBA,uDAAA,IAAAk2K,EAAAxlC,UAAA,+BALJ1wI,2BAJJ,UAIIA,CAHgC,YAGhCA,CADyB,OACtBA,mBAAA,GAAiBA,2BACpBA,sBAAA,QACAA,2BAAA,YACEA,mBAAA,GACAA,uBAAA,EAAAm2K,GAAA,mBAGJn2K,6BAGEA,2BADF,WACEA,CAD6B,YAM3BA,sBAJA,cAIAA,CADuC,eAK7CA,mFApBSA,+CAAA,MAAAk2K,EAAA/8K,MACF6G,sBAAA,GAAAA,8BAAAk2K,EAAAvmH,MAGD3vD,sBAAA,GAAAA,+BAAA,IAAAk2K,EAAA7nF,KAAA,KACYruF,+CAAA,OAAAk2K,EAAAxlC,WASL1wI,sBAAA,GACAA,uBADA,KAAAk2K,EAAA/8K,KACA6G,CADkB,kBAAAk2K,EAAA/8K,MAGlB6G,+CAAA,MAAAk2K,EAAA/8K,iCAYP6G,2BAAA,eACEA,mBAAA,GAAsBA,gFAAtBA,uDAAA,IAAAk2K,EAAAxlC,UAAA,qEAWF1wI,2BAAA,eAIQA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAAsmK,EAAAl2K,0BAAA,GAAAsvD,UAAA//B,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAA6mJ,WAAAF,EAAA/8K,MAAuB,GAGtC6G,sBAAA,UAEFA,wEAFKA,+CAAA,UAAAA,4BAAA,EAAAyI,GAAA8mB,EAAAze,MAAA4qF,mCAIP17F,2BAAA,aAEEA,mBAAA,GAA+CA,gFAA/CA,uDAAA,IAAAk2K,EAAAG,mBAAAhoC,gBAAA,+BACFruI,2BAAA,aAEEA,mBAAA,GAA+CA,gFAA/CA,uDAAA,IAAAk2K,EAAAG,mBAAAhoC,gBAAA,+BACFruI,2BAAA,aAAAA,mBAAA,KAE4FA,gFAAjFA,8CAAAk2K,EAAAh1K,gEACXlB,2BAAA,aAAAA,mBAAA,KAEyFA,gFAA9EA,8CAAAk2K,EAAA7mC,gEAvCbrvI,2BAFF,UAEEA,CADkC,aAEPA,mBAAA,GACzBA,sBAAA,QACAA,2BAAA,YACEA,mBAAA,GACAA,uBAAA,EAAAs2K,GAAA,mBAGJt2K,6BAEEA,2BADF,WACEA,CAD6B,YAE3BA,sBAAA,cAMAA,uBAAA,GAAAu2K,GAAA,iBAUFv2K,2BAUAA,uBATA,GAAAw2K,GAAA,cASAx2K,CAR4E,GAAAy2K,GAAA,cAQ5Ez2K,CALgF,GAAA02K,GAAA,cAKhF12K,CADW,GAAA22K,GAAA,eAKf32K,+GAxCSA,+CAAA,MAAAk2K,EAAA/8K,MAAoB6G,uDAAA,GAAAk2K,EAAAvmH,KAAA,KAGvB3vD,sBAAA,GAAAA,+BAAA,IAAAk2K,EAAA7nF,KAAA,KACYruF,+CAAA,OAAAk2K,EAAAxlC,WAOL1wI,sBAAA,GAIAA,uBAJA,OAAAk2K,EAAAG,mBAAAnoC,UAIAluI,CAJ4C,KAAAk2K,EAAA/8K,KAI5C6G,CAHkB,cAAAk2K,EAAAG,mBAAAloC,cAGlBnuI,CAFuD,kBAAAk2K,EAAA/8K,KAEvD6G,CAD+B,OAAAuvB,EAAAogH,QAAAumC,EAAAhxK,KAAAqqB,EAAAqnJ,YAAAlnK,SAAAwmK,EAAA/8K,QAQ7B6G,+CAAA,OAAAuvB,EAAAsnJ,sBAMJ72K,+CAAA,OAAAuvB,EAAAqnJ,YAAAxnK,UAAA8mK,EAAA/8K,KAAAo2B,EAAAunJ,eAAA,YAGA92K,+CAAA,OAAAuvB,EAAAqnJ,YAAAxnK,UAAA8mK,EAAA/8K,KAAAo2B,EAAAunJ,eAAA,gBAGA92K,+CAAA,OAAAuvB,EAAAqnJ,YAAAxnK,UAAA8mK,EAAA/8K,KAAAo2B,EAAAunJ,eAAA,QAGA92K,+CAAA,OAAAuvB,EAAAqnJ,YAAAxnK,UAAA8mK,EAAA/8K,KAAAo2B,EAAAunJ,eAAA,+BAIX92K,sBAAA,qCAtEFA,2BAAA,SAsEEA,uBArEA,EAAA+2K,GAAA,aAqEA/2K,CApEoC,EAAAg3K,GAAA,cAoEpCh3K,CA3CoC,EAAAi3K,GAAA,YA6CtCj3K,8DAtEQA,+CAAA,gBAAAk2K,EAAAhxK,MAyBAlF,+CAAA,gBAAAk2K,EAAAhxK,MA2CDlF,+CAAA,QAAA+0K,ICxDH,MAAOmC,GAgBXr4K,YAAoB2xI,GAAAzxI,KAAAyxI,gBAdpBzxI,KAAAi2J,YAA6B,GAE7Bj2J,KAAA63K,YAA2B,IAAI1kK,KAAY,IAE3CnT,KAAA+3K,eAAyB,IAAIK,SAAO,GAAI,IAExCp4K,KAAAq4K,qBAAuB,GAEvBr4K,KAAA83K,sBAAuB,EAEvB93K,KAAA+R,MAAQC,KACRhS,KAAAkD,QAAsB,GACtBlD,KAAAs4K,iBAAgC,IAAInlK,KAAY,GAEU,CAElD,uBAAOolK,CAAiBh4D,GAC9B,MAAMb,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,UAC9C,OAAOa,EACJ5jH,MAAM,KACN0nB,OAAO,CAAC/kB,EAAG4H,IAAoB,IAAVA,IAAgBw4G,EAASx9G,SAAS5C,IACvDpC,IAAKoC,GAAMA,EAAEizE,OAAO,GAAGC,cAAgBlzE,EAAEojB,UAAU,IACnD9lB,KAAK,IACV,CAEA6R,WACEzO,KAAKif,aACLjf,KAAKw4K,gBACP,CAEQv5J,aACNjf,KAAK63K,YAAY/lC,WAAW9xI,KAAKq4K,qBAAsBr4K,KAAKs4K,kBAC5Dt4K,KAAKi2J,YAAYjvJ,QAASu5G,IACxBvgH,KAAKs4K,iBAAiBxmC,WAAWvxB,EAAY,IAAIntG,qBAAmB,MAAK,EAE7E,CAEAw9H,QAAQzqI,EAAc7F,GACpB,OAAO2uI,GAAkBa,YAAY3pI,EAAM7F,EAC7C,CAEQk4K,iBACNx4K,KAAKyxI,cAAcptH,OAAOrkB,KAAKi2J,aAAatnJ,UAAWpM,IACrDvC,KAAKkD,QAAUX,EAAKrF,IAAKmmC,IACvB,MAAMkxC,EAAcv0E,KAAK63K,YAAYnlK,IAAI2wB,EAAajpC,MAChDy1I,EAAiBZ,GAAkBU,kBAAkBtsG,GAC3DA,SAAai0I,mBAAqBroC,GAAkBO,QAAQnsG,EAAal9B,MAGzEk9B,EAAautB,KAAOunH,GAAsBI,iBAAiBl1I,EAAajpC,MACxEipC,EAAa/iC,MAAQ6R,SAAOkxB,EAAa/iC,MAAQ3C,GAC1B,QAAdA,EAAEqlC,SAEPK,EAAa/iC,QAC8B,SAAzC+iC,EAAai0I,mBAAmBl9K,KAClCm6E,EAAY50D,SAAsC,SAA7B0jB,EAAa/iC,MAAMA,OAExCi0E,EAAY50D,SAAS0jB,EAAa/iC,MAAMA,QAKxCuvI,IACFxsG,EAAaisG,gBAAkBO,EAAeP,gBAC1C,QAASO,GAAyC,KAAvBA,EAAe5wI,MAC5CokC,EAAalhC,SAAW0tI,EAAe5wI,KAErC,QAAS4wI,GAAyC,KAAvBA,EAAezpE,MAC5C/iC,EAAaitG,SAAWT,EAAezpE,KAEzCmO,EAAY5yD,cAAckuH,EAAex8H,aAGpCgwB,GACR,EAEL,CAEAo1I,aACE,MAAMv1K,EAAU,GAChB,OAAAlD,KAAKi2J,YAAYjvJ,QAASu5G,IACxB,MAAMm4D,EAAc14K,KAAK63K,YAAYlnK,SAAS4vG,GAC1B,OAAhBm4D,GAAwC,KAAhBA,IAC1Bx1K,EAAQq9G,GAAc,CACpBv9E,QAAS,MACT1iC,MAAOo4K,MAKN14K,KAAKyxI,cAAcluG,WAAW,CAAErgC,QAASA,GAClD,CAEAm0K,WAAW92D,GACTvgH,KAAKyxI,cAAcpmH,OAAOk1F,EAAY,OAAO5xG,UAE3C,KACsB3O,KAAK63K,YAAYnlK,IAAI6tG,GAC7Bh2F,OAAK,EAGvB,iDAvGW4tJ,IAAqBl3K,8BAAAC,KAAA,4DAArBi3K,GAAqB/uK,UAAA,uBAAA+C,OAAA,CAAA8pJ,YAAA,cAAA4hB,YAAA,cAAAE,eAAA,iBAAAM,qBAAA,uBAAAP,qBAAA,wBAAAttK,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDkCT5C,iLAgBNA,sIAA2D,oCAG3DA,mIAAwD,qyBApE3EvI,2BAAA,WACEA,uBAAA,EAAA03K,GAAA,aAyEF13K,kCA1EKA,uBAAA,YAAAwC,EAAA60K,kBACqBr3K,+CAAA,UAAAwC,EAAAP,maEDpB,MAAO01K,UACG54K,KAAA64K,aAA8B,CAC1C,4BACA,uBACA,qBACA,2BACA,yBACA,yBACA,yBACA,0BACA,wBACA,iBACA,qBACA,kBACA,QAEY74K,KAAA84K,gBAAiC,CAC7C,mCACA,6BACA,sBACA,iDACA,uDACA,iCACA,wBACA,uCACA,+BACA,0BACA,sBACA,sBACA,iBACA,qCACA,0BACA,2BACA,4BACA,8BACA,8BACA,+HCjBQ73K,2BAAA,UACGA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,4BAAA,OAAAA,wBAAAuvB,EAAAuoJ,iBAA2B,EAAI,GADlC93K,mBAAA,KAGmBA,sDAIrBA,2BADF,QACEA,CAD2B,WAC3BA,mBAAA,KACuCA,2BACvCA,sBAAA,2BAKFA,kGALoBA,sBAAA,GAGAA,uBAHA,cAAAuvB,EAAAsoJ,gBAGA73K,CAH+B,cAAAuvB,EAAAwoJ,eAG/B/3K,CAF8B,iBAAAw+D,EAE9Bx+D,CAD0B,6CCXhD,MAAOg4K,GAgBXn5K,YACSstH,EACCl/G,EACAmjB,EACDrjB,GAHAhO,KAAAotH,cACCptH,KAAAkO,qBACAlO,KAAAqxB,sBACDrxB,KAAAgO,eAZThO,KAAA64K,aAA8BD,GAAuBC,aAIrD74K,KAAA84K,gBAAiCF,GAAuBE,gBAExD94K,KAAA+4K,iBAAkB,EAQhB/4K,KAAKg5K,eAAiB,IAAI7lK,KAAY,IACtCnT,KAAKuc,SAAW/S,4BAChBxJ,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAwN,eACE,MAAMuV,EAAc,CAAC5xB,KAAKk5K,mBAAmBT,cAEzCz4K,KAAKm5K,uBACPvnJ,EAAY11B,KAAK8D,KAAKm5K,sBAAsBV,eAAY,EAG1D5mJ,YAAmBD,GAAajjB,UAC9B,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,qCAEFxJ,KAAKotH,YAAYn0F,OAAK,EAExB,KACEj5B,KAAKotH,YAAYn0F,OAAK,EAG5B,iDA/CWggJ,IAAwBh4K,8BAAAC,kBAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAA,4DAAxBgwK,GAAwB7vK,UAAA,4BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,iTDjBDE,qFAAA,kCAAyB,qCAoBzCA,wFAKDA,4rBA3BnBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,8GAGAA,oCAAA,KAKIA,2BAJF,aAIEA,CADsB,YAGpBA,sBAAA,2BAOEA,2BADF,YACEA,CADe,aAEbA,uBAAA,GAAAm4K,GAAA,YAKJn4K,6BACAA,uBAAA,GAAAo4K,GAAA,cASFp4K,2BAEEA,2BADF,YACEA,CADwB,qGACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAA4Y,eAAc,GAM7Dpb,mEAEJA,sEA5CUA,uBAAA,WAAAwC,EAAA2pH,aAE0BnsH,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,KAAAwC,EAAA8Y,sCAI9Etb,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAu1K,gBAKgB/3K,sBAAA,GAGAA,uBAHA,cAAAwC,EAAAo1K,aAGA53K,CAH4B,cAAAwC,EAAAu1K,eAG5B/3K,CAF8B,iBAAAw+D,EAE9Bx+D,CAD0B,yCAQpCA,sBAAA,GAAAA,uBAAA,QAAAwC,EAAAs1K,iBAIF93K,+CAAA,OAAAwC,EAAAs1K,iBAYgB93K,sBAAA,GAEAA,uBAFA,OAAAwC,EAAAu1K,eAEA/3K,CAFuB,aAAAwC,EAAA87B,YAAAm1E,UAAA3sG,OAEvB9G,CAD2C,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,wMElB3Dtb,2BAAA,eAEEA,mBAAA,GACFA,qDAFQA,uBAAA,QAAAq4K,EAAAl/K,MACN6G,uDAAA,IAAAq4K,EAAA1oH,KAAA,6BAGJ3vD,2BAAA,aAAAA,mBAAA,KAEkCA,sDA6BlCA,2BAAA,eAAmCA,mBAAA,GAAqBA,+EAArBA,sDAAAs4K,EAAAj5K,MAAAgvF,8BAQnCruF,2BAAA,aAAAA,mBAAA,KAGkCA,sDAClCA,2BAAA,aAAAA,mBAAA,KAG2CA,+EAAhCA,8CAAAs4K,EAAAj5K,MAAAgvI,uEACXruI,2BAAA,aAAAA,mBAAA,KAGgGA,+EAArFA,8CAAAs4K,EAAAj5K,MAAA6B,gEACXlB,2BAAA,aAAAA,mBAAA,KAG6FA,+EAAlFA,8CAAAs4K,EAAAj5K,MAAAgwI,gEA1BXrvI,2BAJJ,WAIIA,CAH+C,aAG/CA,CADsB,aAEpBA,mBAAA,GACFA,2BACAA,uBAAA,EAAAu4K,GAAA,oBACFv4K,2BACAA,2BAAA,YACEA,sBAAA,cAiBAA,uBAZA,EAAAw4K,GAAA,cAYAx4K,CATW,EAAAy4K,GAAA,cASXz4K,CALW,EAAA04K,GAAA,cAKX14K,CADW,GAAA24K,GAAA,eAMf34K,kHA7BSA,+CAAA,MAAAs4K,EAAAh3J,KACCthB,+CAAA,UAAAA,4BAAA,GAAAyI,GAAA0G,EAAAypK,iBAAAlpK,SAAA,uBACJ1P,uDAAA,IAAAs4K,EAAAj5K,MAAAswD,KAAA,KAEU3vD,+CAAA,OAAAs4K,EAAAj5K,MAAAgvF,MAKLruF,sBAAA,GAEAA,uBAFA,KAAAs4K,EAAAh3J,IAEAthB,CAFe,kBAAAs4K,EAAAh3J,IAEfthB,CAD4B,YAAAmP,EAAAypK,iBAAAlpK,SAAA,sBAG5B1P,+CAAA,OAAAmP,EAAAypK,iBAAAlpK,SAAA,sBAAAP,EAAAypK,iBAAAxpK,UAAAkpK,EAAAh3J,IAAAhS,EAAA,aAIAtP,+CAAA,OAAAmP,EAAAypK,iBAAAlpK,SAAA,sBAAAP,EAAAypK,iBAAAxpK,UAAAkpK,EAAAh3J,IAAAhS,EAAA,YAIAtP,+CAAA,OAAAmP,EAAAypK,iBAAAlpK,SAAA,sBAAAP,EAAAypK,iBAAAxpK,UAAAkpK,EAAAh3J,IAAAhS,EAAA,QAIAtP,+CAAA,OAAAmP,EAAAypK,iBAAAlpK,SAAA,sBAAAP,EAAAypK,iBAAAxpK,UAAAkpK,EAAAh3J,IAAAhS,EAAA,SCxDb,MAAOupK,GAOXh6K,YACSstH,EACAp/G,EACCE,EACAujI,EACApgH,EACAsgI,GALD3xJ,KAAAotH,cACAptH,KAAAgO,eACChO,KAAAkO,qBACAlO,KAAAyxI,gBACAzxI,KAAAqxB,sBACArxB,KAAA2xJ,aATV3xJ,KAAA4uK,WAAoB,GACpB5uK,KAAA+5K,cAAgB,GAUd/5K,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK4uK,WAAa5uK,KAAK2xJ,WAAW3c,4BAA4BC,iBAC9Dj1I,KAAK65K,iBAAmB,IAAI1mK,KAAY,CACtCg5J,SAAU,IAAI/4J,qBAAmB,KAAM,CAAEC,WAAY,CAACC,aAAWC,YACjEymK,kBAAmB,IAAI5mK,sBAAmB,KAE5CpT,KAAK+5K,cAAgB,CACnB7kC,kBAAmB,CACjBtkF,KAAMpnD,yBACN8lF,KAAM,GACNggD,gBAAiB,GACjBntI,cAAUy3B,EACV02G,cAAU12G,GAEZu7G,wBAAyB,CACvBvkF,KAAMpnD,+BACN8lF,KAAM,GACNggD,gBAAiB,GACjBntI,cAAUy3B,EACV02G,cAAU12G,GAEZw7G,8BAA+B,CAC7BxkF,KAAMpnD,qCACN8lF,KAAM,GACNggD,gBAAiB,GACjBntI,cAAUy3B,EACV02G,cAAU12G,GAEZy7G,mBAAoB,CAClBzkF,KAAMpnD,0BACN8lF,KAAM,GACNggD,gBAAiB,GACjBntI,cAAUy3B,EACV02G,cAAU12G,IAId3nB,OAAOC,KAAKlS,KAAK+5K,eAAe/yK,QAASizK,IACvCj6K,KAAK65K,iBAAiB/nC,WACpBmoC,EACA,IAAI7mK,qBAAmB,KAAM,CAAEC,WAAY,CAACC,aAAWC,YAAY,EAGzE,CAEA9E,WACEzO,KAAKyxI,cAAcptH,OAAOpS,OAAOC,KAAKlS,KAAK+5K,gBAAgBprK,UAAWpM,IACpE,MAAM23K,EAAuBl6K,KAAKm6K,iBAAiB53K,GACnDvC,KAAKo6K,eAAeF,EAAqBrxK,OAASsjK,IAChDnsK,KAAKq6K,YAAYlO,EAAQ,GAE3BnsK,KAAKs6K,eAAeJ,EAAqB12I,eACzCxjC,KAAK2hB,cAAcu4J,EAAqB12I,cAAa,EAEzD,CAEA42I,eAAeG,EAAyBC,GACtC,MAAMrO,EAAWh6J,SAAOnS,KAAK4uK,WAAajxK,GACjCwU,YAAUxU,EAAEkL,OAAQ0xK,IAK7B,OAFAv6K,KAAK65K,iBAAiBzoK,SAAS4oK,kBAAkBr6J,UAAS,GAEtDwsJ,EACKqO,EAAWrO,GAG8B,IAA9Cl6J,OAAOqQ,QAAQi4J,GAAoBn/K,QACrC4E,KAAK65K,iBAAiBzoK,SAAS4oK,kBAAkBr6J,UAAS,GACnD66J,EACLvoK,OAAO,CAAE7X,KAAM,SAAUw2D,KAAMpnD,kBAAmBX,OAAQ0xK,MAIvDC,EAAWx6K,KAAK4uK,WAAW,GACpC,CAEAuL,iBAAiB32I,GACf,MAAMi3I,EAAqC,CAAE5xK,OAAQ,GAAI26B,cAAe,IACxEA,SAAcx8B,QAASq8B,IACrBo3I,EAAcj3I,cAActnC,KAAKmnC,GAE7B,UAAWA,EACbA,EAAa/iC,MAAM0G,QAAS1G,IACJ,QAAlBA,EAAM0iC,UACRy3I,EAAc5xK,OAAOw6B,EAAajpC,MAAQ8N,OAAO5H,EAAMA,OAAK,GAGvD,YAAa+iC,GAAyC,OAAzBA,EAAaF,UACnDs3I,EAAc5xK,OAAOw6B,EAAajpC,MAAQ8N,OAAOm7B,EAAaF,SAAO,GAGlEs3I,CACT,CAEAH,eAAe92I,GACbA,EAAcx8B,QAASq8B,IACK,KAAtBA,EAAaisD,OACftvF,KAAK+5K,cAAc12I,EAAajpC,MAAMk1F,KAAOjsD,EAAaisD,OAGhE,CAEA+qF,YAAYlO,GACV,MAAMuO,EAAiBvoK,SAAOnS,KAAK4uK,WAAajxK,GAC5B,WAAXA,EAAEvD,MAGW,WAAlB+xK,EAAS/xK,KACNsgL,GACH16K,KAAK4uK,WAAW1yK,KAAKiwK,GAGnBuO,GACF16K,KAAK4uK,WAAW1tG,OAAOlhE,KAAK4uK,WAAW7yK,QAAQ2+K,GAAiB,GAIpE16K,KAAK65K,iBAAiBzoK,SAAS+6J,SAASxsJ,SAASwsJ,EAAS/xK,MAC1D6X,OAAOqQ,QAAQ6pJ,EAAStjK,QAAQ7B,QAAQ,EAAE5M,EAAMkG,MAC9CN,KAAK65K,iBAAiBzoK,SAAShX,GAAMulB,SAASrf,EAAK,EAEvD,CAEAqhB,cAAc6hB,GACZA,EAAcx8B,QAASq8B,IACrB,MAAMwsG,EAAiBZ,GAAkBU,kBAAkBtsG,GACvDwsG,GACFA,EAAex8H,WAAWnX,KAAKoX,aAAWC,UAEtC,QAASs8H,GAAyC,KAAvBA,EAAe5wI,MAC5Ce,KAAK+5K,cAAc12I,EAAajpC,MAAM+H,SAAW0tI,EAAe5wI,KAG9D,QAAS4wI,GAAyC,KAAvBA,EAAezpE,MAC5CpmE,KAAK+5K,cAAc12I,EAAajpC,MAAMk2I,SAAWT,EAAezpE,KAGlEpmE,KAAK+5K,cAAc12I,EAAajpC,MAAMk1I,gBAAkBO,EAAeP,gBACvEtvI,KAAK65K,iBAAiBzoK,SAASiyB,EAAajpC,MAAMunB,cAAckuH,EAAex8H,aAE/ErT,KAAK65K,iBAAiBzoK,SAASiyB,EAAajpC,MAAMunB,cAAcrO,aAAWC,SAAQ,EAGzF,CAEAonK,4BACE,MAAM9xK,EAAS,GAKf,GAJAoJ,OAAOC,KAAKlS,KAAK+5K,eAAe/yK,QAASizK,IACvCpxK,EAAOoxK,GAAoBj6K,KAAK65K,iBAAiBlpK,SAASspK,EAAgB,GAGxEj6K,KAAK65K,iBAAiBlpK,SAAS,qBAAsB,CACvD,MAAM+pK,EAAiB,CACrBtgL,KAAM,SACNw2D,KAAMpnD,kBACNX,OAAQA,GAEV7I,KAAKq6K,YAAYK,EACnB,MACE16K,KAAKo6K,eAAevxK,EAASsjK,IAC3BnsK,KAAKq6K,YAAYlO,EAAQ,EAG/B,CAEAyO,iBAAiBC,GACf,MAAMC,EACJ3oK,SAAOnS,KAAK4uK,WAAajxK,GAChBA,EAAEvD,OAASygL,IACd76K,KAAK4uK,WAAW,GAExB5uK,KAAK65K,iBAAiBnnK,IAAI,qBAAqBiN,UAAS,GAExD3f,KAAKq6K,YAAYS,EACnB,CAEAz+J,eACE,MAAMnZ,EAAU,GAChB+O,OAAOC,KAAKlS,KAAK+5K,eAAe/yK,QAASizK,IACvC/2K,EAAQ+2K,GAAoB,CAC1Bj3I,QAAS,MACT1iC,MAAON,KAAK65K,iBAAiBlpK,SAASspK,MAI1Cj6K,KAAKyxI,cAAcluG,WAAW,CAAErgC,QAASA,IAAWyL,UAClD,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,iDAAiDxJ,KAAK65K,iBAAiBlpK,SACrE,gBAGJ3Q,KAAKotH,YAAYn0F,OAAK,EAExB,KACEj5B,KAAKotH,YAAYn0F,OAAK,EAG5B,iDAvNW6gJ,IAA0B74K,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,IAAA,4DAA1B2wK,GAA0B1wK,UAAA,8BAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,yBDnBlB5C,kGAYCA,qFA6BIA,sGAhBHA,oGAwCAA,mGAIAA,2EAAA,mCAIAA,sIAA2D,oCAI3DA,mIAAwD,kiCA/E/EvI,2BAAA,gBACEA,oCAAA,MAAAA,mBAAA,yCAGAA,oCAAA,MAQQA,2BAPN,cAOMA,CAJkB,WAIlBA,CAHoB,WAGpBA,CAD0B,cAC1BA,mBAAA,KAEoBA,2BAElBA,2BADF,YACEA,CAD6B,gBAIrBA,uBAAA,kBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAUwC,EAAAm3K,iBAAAhwK,EAAAvD,OAAA/G,OAAqC,GACrDW,uBAAA,GAAA85K,GAAA,iBAIF95K,2BACAA,uBAAA,GAAA+5K,GAAA,eAIJ/5K,6BAMMA,2BAHN,YAGMA,CAHsB,YAGtBA,CAF4B,YAE5BA,CAD0C,eAMnCA,uBAAA,oBAAAA,iCAAAsL,GAAAtL,wBAAUwC,EAAAk3K,4BAA2B,GAL5C15K,2BAMAA,2BAAA,eAAAA,mBAAA,MAKNA,iCAGAA,uBAAA,GAAAg6K,GAAA,kDAiCFh6K,2BAEEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAA4Y,eAAc,GAK7Dpb,mEAEJA,sEA3FUA,uBAAA,WAAAwC,EAAA2pH,aAMAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAo2K,kBAciC54K,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAmrK,YAMxB3tK,+CAAA,OAAAwC,EAAAo2K,iBAAAxpK,UAAA,WAAAE,EAAA,aAwBWtP,sBAAA,GAAAA,uBAAA,UAAAA,wBAAA,KAAAwC,EAAAs2K,gBAmCA94K,sBAAA,GAEAA,uBAFA,OAAAwC,EAAAo2K,iBAEA54K,CAFyB,aAAAwC,EAAAuK,aAAAu6D,OAEzBtnE,CADkC,aAAAwC,EAAA87B,YAAAm1E,UAAA3sG,kYEjElD9G,2BAAA,UAAAA,mBAAA,KACkCA,mDAClCA,2BAAA,UAAAA,mBAAA,KACiDA,sDALnDA,2BAAA,aAIEA,uBAFA,EAAAi6K,GAAA,cAEAj6K,CADW,EAAAk6K,GAAA,eAGbl6K,qEAJSA,+CAAA,aAAA+K,EAAAoqI,OAAAhvG,OAAA,KAAAp7B,EAAAoqI,OAAAhvG,OAAA7zB,UAEAtS,+CAAA,cAAA+K,EAAAoqI,OAAAhvG,OAAA,KAAAp7B,EAAAoqI,OAAAhvG,OAAAnoC,OAAA,MAAA+M,EAAAoqI,OAAAhvG,OAAA,KAAAp7B,EAAAoqI,OAAAhvG,OAAAg/B,OCRf,MAAOg1G,GAKXt7K,YACSkO,EACAo/G,EACCukC,EACA0pB,GAHDr7K,KAAAgO,eACAhO,KAAAotH,cACCptH,KAAA2xJ,aACA3xJ,KAAAq7K,KARVr7K,KAAAs7K,cAAgB,CASb,CAEH,UAAIllC,GACF,OAAOp2I,KAAKu7K,aAAa7oK,IAAI,SAC/B,CAEAjE,WACEzO,KAAKu7K,aAAev7K,KAAKq7K,GAAGlkJ,MAAM,CAChCi/G,OAAQp2I,KAAKq7K,GAAGznK,QAAQ5T,KAAKs7K,cAAe,CAAChoK,aAAWC,YAE5D,CAEAipC,WACEx8C,KAAK2xJ,WACFn1G,SAASx8C,KAAK42I,MAAO52I,KAAKu7K,aAAaj7K,MAAM81I,QAC7CznI,UAAU,IAAM3O,KAAKotH,YAAYn0F,QACtC,iDA1BWmiJ,IAAyBn6K,8BAAAC,MAAAD,8BAAA8H,kBAAA9H,8BAAA+H,IAAA/H,8BAAAgI,MAAA,4DAAzBmyK,GAAyBhyK,UAAA,4BAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDbjB5C,yFAAc,mCAoBVA,oGAEAA,ojBAxBzBvI,2BAAA,gBACEA,oCAAA,KAAAA,mBAAA,yCAGAA,oCAAA,KAIQA,2BAHN,WAGMA,CAH2B,UAG3BA,CAFoB,UAEpBA,CADe,aAEkBA,mBAAA,YAAMA,2BACvCA,2BAAA,YACEA,sBAAA,eAQAA,uBAAA,GAAAu6K,GAAA,eASNv6K,+BAGEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,sCAAqBwC,EAAA+4C,UAAU,GAIzDv7C,mEAEJA,kCArCUA,uBAAA,WAAAwC,EAAA2pH,aAEWnsH,sBAAA,GAAAA,sBAAAwC,EAAAmzI,kCAGX31I,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA83K,cAaSt6K,sBAAA,GAAAA,uBAAA,QAAAwC,EAAA63K,eAEAr6K,+CAAA,OAAAwC,EAAA2yI,OAAAhvG,QAYWnmC,sBAAA,GACAA,uBADA,OAAAwC,EAAA83K,aACAt6K,CADqB,aAAAwC,EAAAuK,aAAA08D,8PEf7C,MAAO+wG,GAKX37K,YACSstH,EACAp/G,EACC2jJ,EACAtgI,EACAqqJ,GAJD17K,KAAAotH,cACAptH,KAAAgO,eACChO,KAAA2xJ,aACA3xJ,KAAAqxB,sBACArxB,KAAA07K,WAPV17K,KAAAs/D,SAAkB,EAQf,CAEH7wD,WACEzO,KAAK27K,UAAY,IAAIrrH,mBAAiB,GACxC,CAEAolF,SACEt1H,cAASpgB,KAAKs/D,SAASpiE,IAAKktB,GAAYpqB,KAAK2xJ,WAAWjc,MAAMtrH,EAAIpqB,KAAK21I,QAAQhnI,UAC7E,KACE,MAAMg1G,EAAY3jH,KAAK21I,KAAO,aAAe,QAE7C31I,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,YAAYm6G,8CAAsD3jH,KAAK07K,SAASnzK,UAC9EvI,KAAKs/D,aAITt/D,KAAKotH,YAAYn0F,OAAK,EAExB,IAAMj5B,KAAKotH,YAAYn0F,QAE3B,iDAjCWwiJ,IAAsBx6K,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,IAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAAtBuyK,GAAsBryK,UAAA,yBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,iBCfjB5C,wLAALA,gFAAK4C,gBAQuB5C,wLAAzBA,oGAAyBoyK,8BACnB,qCAAQ,iCAAqB,iUAVjD36K,2BADF,eACEA,CADiC,YACjCA,mBAAA,KAC0DA,2BAE1DA,oCAAA,KAMMA,2BALJ,aAKIA,CAFa,UAEbA,CADsB,OACtBA,wBAAA,KACcA,sBAAA,0CAAuCA,wBACvDA,6BAGEA,2BADF,WACEA,CADwB,6BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAiyI,QAAO,GAItDz0I,mEAEJA,iCArBUA,uBAAA,WAAAwC,EAAA2pH,aAESnsH,sBAAA,GAAAA,sBAAAwC,EAAAkyI,iCAKT10I,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAk4K,WAGgC16K,sBAAA,GACZA,sBADYwC,EAAAkyI,KACZ10I,CADgBA,wBAAA,KAAAwC,EAAA67D,sCAMhBr+D,sBAAA,GACAA,uBADA,OAAAwC,EAAAk4K,UACA16K,CADkB,aAAAwC,EAAAuK,aAAAu6D,0JCNxCtnE,sBAAA,iEAEgBA,uBAFA,cAAA+K,EAAAglG,IAAA,KAAAhlG,EAAAglG,IAAA5mF,GAEAnpB,CAFiB,iBAAA+K,EAAAC,UAAA,KAAAD,EAAAC,UAAAq4B,KAAAlqC,KAEjB6G,CADiC,wCAQjDA,sBAAA,qEAAoBA,uBAAA,aAAA+K,EAAAglG,KAAA,MAAAhlG,EAAAglG,IAAAr9B,QAAA,KAAA3nE,EAAAglG,IAAAr9B,QAAAkoG,0EAQpB56K,2BAAA,2BACoBA,uBAAA,uBAAAA,0BAAA4P,GAAA,MAAA7E,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAAw5B,UAAS,GAE1CvkC,wEADoBA,uBAAA,aAAA+K,EAAAglG,KAAA,MAAAhlG,EAAAglG,IAAAr9B,QAAA,KAAA3nE,EAAAglG,IAAAr9B,QAAAmoG,sCAGlB76K,2BAAA,uBAAAA,mBAAA,KAC2CA,qDAF7CA,uBAJA,EAAA86K,GAAA,4BAIA96K,CAFwD,EAAA+6K,GAAA,yBAAA/6K,2GAFDA,uBAAlC,aAAA+K,EAAAglG,KAAA,MAAAhlG,EAAAglG,IAAAr9B,QAAA,KAAA3nE,EAAAglG,IAAAr9B,QAAAmoG,aAAkC76K,CAAA,WAAAg7K,6BAcvDh7K,sBAAA,gEAAeA,uBAAA,cAAA+K,EAAAglG,IAAA,KAAAhlG,EAAAglG,IAAA5mF,8BAOfnpB,sBAAA,+EAE8BA,uBAAA,kBAAA+K,EAAAglG,IAAA,KAAAhlG,EAAAglG,IAAA5mF,8BAF9BnpB,uBAAA,EAAAi7K,GAAA,iFAA+Bj7K,uBAAA,aAAA+K,EAAAglG,IAAA,KAAAhlG,EAAAglG,IAAAr9B,mCAW/B1yE,sBAAA,6DAGYA,uBADA,gDAAA+K,EAAAglG,IAAA5mF,GACAnpB,CAD6D,0CAP7EA,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,KAC2BA,2BAC3BA,uBAAA,EAAAk7K,GAAA,qFA1DNl7K,oCAAA,GACEA,2BAAA,cAKEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACeA,2BACfA,uBAAA,EAAAm7K,GAAA,0DAMFn7K,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KAC4BA,2BAC5BA,uBAAA,GAAAo7K,GAAA,0DAKFp7K,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MACgBA,2BAChBA,uBAAA,GAAAq7K,GAAA,0DAWFr7K,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MACqBA,2BACrBA,uBAAA,GAAAs7K,GAAA,0DAIFt7K,oCAAA,OACEA,2BAAA,WAAAA,mBAAA,MAC2BA,2BAC3BA,uBAAA,GAAAu7K,GAAA,0DAOFv7K,uBAAA,GAAAw7K,GAAA,uBAcFx7K,2BAEAA,sBAAA,wHAfiBA,sBAAA,IAAAA,uBAAA,OAAA+K,EAAAqhI,kBAAA96G,MAeZtxB,+CAAA,eAAAksI,ICzDD,MAAOuvC,GAWX58K,YAAoB6xJ,EAAgCzjJ,GAAhClO,KAAA2xJ,aAAgC3xJ,KAAAkO,qBAClDlO,KAAKqtI,kBAAoBrtI,KAAKkO,mBAAmBW,iBAAiBsmG,OACpE,CAEAvuG,cACM5G,KAAKgxG,KAAK5mF,KAAOpqB,KAAKiM,WAAWme,KACnCpqB,KAAKgxG,IAAMhxG,KAAKiM,WAGdkG,aAAWnS,KAAKgxG,KAAK5mF,KACvBpqB,KAAKwlC,SAET,CAEAA,UACExlC,KAAK2xJ,WAAWlc,WAAWz1I,KAAKgxG,IAAI5mF,IAAIzb,UAAWpM,IACjDvC,KAAKgxG,IAAIr9B,QAAUpxE,GAEvB,iDA7BWm6K,IAAmBz7K,8BAAAC,IAAAD,8BAAA8H,KAAA,4DAAnB2zK,GAAmBtzK,UAAA,qBAAA+C,OAAA,CAAAF,UAAA,aAAA4a,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,yBDLlB5C,oFASAA,iGAQAA,oFAcAA,0FAOAA,gGAbiBA,mGAwBjBA,gGAGaA,60BA5D3BvI,uBAAA,EAAA07K,GAAA,4BAAe17K,uBAAA,OAAAwC,EAAAwI,qXEmCPhL,sBAAA,iEACgBA,uBAAA,YAAAM,EAAA+K,8EA7BlBrL,2BAAA,iBAMUA,uBALA,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAq7K,WAAAhyK,GAAkB,EAK/B3J,CALgC,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAIdM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAKlD3J,2BAAA,YAOEA,sBANA,wBAMAA,CADmB,yBASrBA,2BAEAA,uBAAA,EAAA47K,GAAA,yBAGF57K,uEAtBUA,uBATA,OAAAM,EAAAwvG,KASA9vG,CATa,UAAAM,EAAAsL,QASb5L,CAPmB,gBAOnBA,CALmB,mCAKnBA,CAFoC,gBAEpCA,CADmB,QAAAM,EAAAkqC,OAIPxqC,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAAyxE,IAIA/vG,CAJ8B,YAAAM,EAAA0K,UAI9BhL,CAHuB,eAAAM,EAAAwL,cAKvB9L,wBAMAA,uBANA,aAAAA,4BAAA,GAAA69I,IAMA79I,CAN2B,YAAAM,EAAA0K,UAM3BhL,CALuB,eAAAM,EAAAu7K,2CAqB7C77K,sBAAA,wBAGYA,uBADA,8BACAA,CAD+B,yCAP/CA,oCAAA,MAEEA,2BAAA,UAAAA,mBAAA,KAC2BA,2BAC3BA,uBAAA,EAAA87K,GAAA,qFAiBF97K,oCAAA,GAAAA,wBAAA,KAAmBA,sBAAA,yCACnBA,sBAAA,YAA4DA,6GADjCA,sBAAA,GACnBA,sBADmBA,wBAAA,IAAA+7K,GACnB/7K,CAD6Cg8K,yDAqB/Ch8K,2BAAA,QAAAA,mBAAA,mCAKAA,2GAHGA,sBAAA,GAEAA,sBAFAM,EAAA0K,UAAA0c,mBAEA1nB,CAF4BA,wBAAA,IAAAi8K,GAE5Bj8K,CAFwE,IAAAi8K,EAAA9hL,8DAI3E6F,2BAAA,QAAAA,mBAAA,mCAIAA,iHAFGA,sBAAA,GAAqDA,sBAArDM,EAAA0K,UAAA0c,mBAAqD1nB,CAAzBA,wBAAA,IAAAk8K,0DAG/Bl8K,2BAAA,QAAAA,mBAAA,mCAIAA,8GAFGA,sBAAA,GAAwDA,sBAAxDM,EAAA0K,UAAA0c,mBAAwD1nB,CAA5BA,wBAAA,IAAAm8K,0DAG/Bn8K,2BAAA,QACEA,mBAAA,GACFA,8EADEA,uDAAA,IAAAo8K,EAAA,gCAvBJp8K,2BAHJ,WAGIA,CAFqB,sBAErBA,CAD6B,UAC7BA,mBAAA,MAGAA,2BACAA,sBAAA,QACAA,2BAAA,WAiBEA,uBAhBA,EAAAq8K,GAAA,YAgBAr8K,CAfU,EAAAs8K,GAAA,YAeVt8K,CATU,EAAAu8K,GAAA,YASVv8K,CAJU,EAAAw8K,GAAA,aAShBx8K,mLA1BWA,sBAAA,GAAsEA,sBAAtEM,EAAA0K,UAAA0c,mBAAsE1nB,CAA1Cy8K,8BAK5Bz8K,sBAAA,GAAAA,uBAAA,OAAAi8K,EAAA9hL,OAAA,GAMA6F,+CAAA,OAAAk8K,EAAA/hL,OAAA,GAKA6F,+CAAA,OAAAm8K,EAAAhiL,OAAA,GAKA6F,+CAAA,OAAAo8K,8BASPp8K,2BAHJ,WAGIA,CAFqB,sBAErBA,CAD0B,UAC1BA,mBAAA,MAKJA,0EAJWA,sBAAA,GAAAA,sBAAAM,EAAA0K,UAAA0c,0EAJX1nB,uBA/BA,EAAA08K,GAAA,cA+BA18K,CA9ByB,EAAA28K,GAAA,cAuCzB38K,oCAAA,GAAAA,wBAAA,KAAmBA,sBAAA,yCACnBA,sBAAA,YAAwDA,2HAzClDA,uBAAA,QAAA48K,GA+BA58K,+CAAA,OAAA48K,GASqB58K,sBAAA,GACnBA,sBADmBA,wBAAA,IAAA68K,GACnB78K,CAD0Cy8K,yDAMlDz8K,2BAAA,aACmCA,mBAAA,GAAUA,qDAAVA,sDAAA88K,8BACnC98K,2BAAA,aACoCA,mBAAA,GAAUA,qDAAVA,sDAAA+8K,6BADpC/8K,uBAFA,EAAAg9K,GAAA,cAEAh9K,CADmC,EAAAi9K,GAAA,uCADZj9K,uBAAA,UAAAk9K,EAAAC,gBAEAn9K,+CAAA,UAAAk9K,EAAAE,wCAMvBp9K,sBAAA,2EAIcA,uBAJA,eAAAq9K,EAAAttE,IAIA/vG,CAJ0B,QAAAq9K,EAAA3pI,MAAA4pI,WAI1Bt9K,CAH8B,OAAAq9K,EAAA3pI,MAAA6pI,gBAG9Bv9K,CAFkC,mBAAAM,EAAAk9K,YAAAC,eAElCz9K,CAD+C,iBAAAM,EAAAk9K,YAAAE,uCAQ3D19K,oCADF,KACEA,CAD+B,MAG3BA,2BADF,WACEA,CADsB,YAEpBA,sBAAA,cAKAA,2BAAA,cAAAA,mBAAA,MAIJA,0FAbUA,uBAAA,YAAA29K,ICtFV,MAAOC,WAAyB9wK,IAyC1B,oBAAO+wK,CAAc9tE,GAC7B,MAAMpiF,EAAS,CAACoiF,EAAI5nD,GAAQ,KAAO,OACnC,OAAI4nD,EAAI7nD,GACNv6B,EAAO1yB,KAAK,MACH80G,EAAI3mF,MAAMnoB,SAAS,aAC5B0sB,EAAO1yB,KAAK,aAEZ0yB,EAAO1yB,KAAK,QAEP0yB,CACT,CAEA9uB,YACUoO,EACAyjJ,EACAv5F,EACAvwC,EACA+K,EACAre,EACAwJ,EACD/P,EACAqjB,EACCjjB,EACA4oD,GAER3oD,QAZQrO,KAAAkO,qBACAlO,KAAA2xJ,aACA3xJ,KAAAo4D,oBACAp4D,KAAA6nB,eACA7nB,KAAA4yB,aACA5yB,KAAAuU,SACAvU,KAAA+d,cACD/d,KAAAgO,eACAhO,KAAAqxB,sBACCrxB,KAAAoO,cACApO,KAAAg3D,kBA3CVh3D,KAAA+R,MAAQC,KACRhS,KAAAy+K,YAAc,IAAIhK,GAClBz0K,KAAAyrC,MAAQ,EAERzrC,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAA+wG,KAAc,GACd/wG,KAAA++K,cAA0B,CACxB,cACA,kBACA,mBACA,mBAEF/+K,KAAAg/K,eAA2B,CAAC,OAAQ,SAAU,OAAQ,SAGtDh/K,KAAA2wJ,mBAAqB,CACnB1rI,OAAQ,CAACyyH,GAAoBiB,YAC7BttH,OAAQ,CAACqsH,GAAoBkB,aA6B7B54I,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAK+M,aAAe,CAClB,CACE3S,KAAM4F,KAAKgO,aAAakS,OACxBpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWG,cACnD9S,QAAUhU,IAAgCjM,KAAK6wJ,WAAW,SAAU5kJ,IACpEyc,aAAezc,KAAiCA,GAAU8mE,cAE5D,CACE34E,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IAAMhpB,KAAK4oB,cAEpB,CACExuB,KAAM4F,KAAKgO,aAAai9D,MACxBn+D,WAAY,SACZyb,KAAMvW,KAAM8rF,KACZ90E,MAAOA,IAAMhpB,KAAKi/K,4BAClBh/J,QAASA,KAAOjgB,KAAKk/K,gBAEvB,CACE9kL,KAAM4F,KAAKgO,aAAa48D,MACxB99D,WAAY,SACZyb,KAAMvW,KAAMwqF,QACZxzE,MAAOA,IAAMhpB,KAAKm/K,aAAY,GAC9Bl/J,QAASA,KAAOjgB,KAAKk/K,eACrBx2J,aAAezc,IAAgCA,GAAU8mE,cAE3D,CACE34E,KAAM4F,KAAKgO,aAAa+7D,WACxBj9D,WAAY,SACZyb,KAAMvW,KAAMyqF,UACZzzE,MAAOA,IAAMhpB,KAAKm/K,aAAY,GAC9Bl/J,QAASA,KAAOjgB,KAAKk/K,gBAEvB,CACE9kL,KAAM4F,KAAKgO,aAAa08D,SACxB59D,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKw8C,WAClBv8B,QAASA,KAAOjgB,KAAKk/K,iBAAmBl/K,KAAKiM,UAAU0c,mBACvDJ,KAAMvW,KAAMwqC,UAEd,CACEpiD,KAAM4F,KAAKgO,aAAaq8D,SACxBv9D,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKo/K,sBAAsB51K,eAAgBxJ,KAAK2xJ,WAAW1b,SACxEh2H,QAASA,IAAMjgB,KAAKq/K,uBAAuB,OAC3C92J,KAAMvW,KAAMrW,MAEd,CACEvB,KAAM4F,KAAKgO,aAAam8D,QACxBr9D,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKo/K,sBAAsB51K,cAAexJ,KAAK2xJ,WAAWzb,QACvEj2H,QAASA,IAAMjgB,KAAKq/K,uBAAuB,MAC3C92J,KAAMvW,KAAMpW,OAEd,CACExB,KAAM4F,KAAKgO,aAAak8D,UACxBp9D,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKo/K,sBAAsB51K,gBAAiBxJ,KAAK2xJ,WAAWxb,UACzEl2H,QAASA,IAAMjgB,KAAKq/K,uBAAuB,QAC3C92J,KAAMvW,KAAMq3C,MAEd,CACEjvD,KAAM4F,KAAKgO,aAAao8D,UACxBt9D,WAAY,SACZkc,MAAOA,IACLhpB,KAAKs/K,8BACH91K,gBACAA,oBACAA,uBACCwsI,IACQh2I,KAAK2xJ,WAAWjb,cAAcz7F,KAAKC,UAAU86F,KAEtD,qBACAh2I,KAAK2xJ,WAAWrb,UAEpBr2H,QAASA,IAAMjgB,KAAKq/K,uBAAuB,MAC3C92J,KAAMvW,KAAMg/B,SAEd,CACE52C,KAAM4F,KAAKgO,aAAau8D,MACxBz9D,WAAY,SACZkc,MAAOA,IACLhpB,KAAKs/K,8BACH91K,iBACAA,eACAA,kBACCwsI,IACQh2I,KAAK2xJ,WAAWjb,cAAcz7F,KAAKC,UAAU86F,KAEtD,qBACC5rH,KACCpqB,KAAKiM,UAAY,IAAIqC,IACdtO,KAAK2xJ,WAAWpb,MAAMnsH,MAGnCnK,QAASA,IAAMjgB,KAAKq/K,uBAAuB,MAC3C92J,KAAMvW,KAAM2qF,OAEd,CACEviG,KAAM4F,KAAKgO,aAAag8D,QACxBl9D,WAAY,SACZkc,MAAOA,IACLhpB,KAAKs/K,8BACH91K,mBACAA,eACAA,qBACCwsI,IACQh2I,KAAK2xJ,WAAWjb,cAAcz7F,KAAKC,UAAU86F,KAEtD,qBACC5rH,KACCpqB,KAAKiM,UAAY,IAAIqC,IACdtO,KAAK2xJ,WAAW5oI,QAAQqB,MAGrCnK,QAASA,IAAMjgB,KAAKq/K,uBAAuB,MAC3C92J,KAAMvW,KAAM+rF,cAEd,CACE3jG,KAAM4F,KAAKgO,aAAakb,OACxBpc,WAAY,SACZkc,MAAOA,IAAMhpB,KAAKqrB,SAClBpL,QAAUhU,IAAgCjM,KAAK6wJ,WAAW,SAAU5kJ,IACpEsc,KAAMvW,KAAM+W,SAGlB,CAEAta,WACEzO,KAAK88K,mBAAqB,CACxB,CACE1iL,KAAMoP,iBACN+e,KAAMvW,KAAM8rF,KACZ90E,MAAOA,IAAMhpB,KAAKu/K,uBAClBzyK,WAAY,OACZ4sE,QAASA,IAAM15E,KAAKu/B,YAAYyxE,IAAIz+E,MAEtC,CACEn4B,KAAMoP,6BACN+e,KAAMvW,KAAMyqF,UACZzzE,MAAOA,IAAMhpB,KAAKw/K,2BAClB1yK,WAAY,OACZ4sE,QAASA,IAAM15E,KAAKu/B,YAAYm1E,UAAUniF,MAE5C,CACEn4B,KAAMoP,oBACN+e,KAAMvW,KAAMwqF,QACZxzE,MAAOA,IAAMhpB,KAAKy/K,yBAClB3yK,WAAY,OACZ4sE,QAASA,IAAM15E,KAAKu/B,YAAYm1E,UAAUniF,OAG9CvyB,KAAK6M,QAAU,CACb,CACEsC,KAAM,KACN/U,KAAMoP,cACN4F,SAAU,EACV+Z,mBAAoBC,IAAaC,UACjC44D,qBAAsB,CACpBK,WAAY,SAGhB,CAAEnzE,KAAM,YAAa/U,KAAMoP,iBAC3B,CACE2F,KAAM,kBACN/U,KAAMoP,kBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHksD,GAAI,CAAE6S,MAAO,iBACb9S,GAAI,CAAE8S,MAAO,iBACb5S,KAAM,CAAE4S,MAAO,gBACf3S,IAAK,CAAE2S,MAAO,gBACdyjH,UAAW,CAAEzjH,MAAO,mBAI1B,CACE9sD,KAAM,oBACN/U,KAAMoP,wBACN4F,SAAU,IACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHi1J,IAAK,CAAEl2F,MAAO,aACdm2F,IAAK,CAAEn2F,MAAO,gBAIpB,CACE9sD,KAAM,cACN/U,KAAMoP,eACN4F,SAAU,GAEZ,CACED,KAAM,mBACN/U,KAAMoP,gBACN4F,SAAU,EACVJ,KAAMhP,KAAKo4D,mBAEb,CACEjpD,KAAM,QACN/U,KAAMoP,iBACN6F,aAAcrP,KAAK2/K,UAErB,CAAExwK,KAAM,cAAe/U,KAAMoP,iBAAkB6F,aAAcrP,KAAK4/K,aAClE,CACEzwK,KAAM,0BACN/U,KAAMoP,sBACN2f,mBAAoBC,IAAaqiE,WAEnC,CACEt8E,KAAM,yBACN/U,KAAMoP,uBACN2f,mBAAoBC,IAAaqiE,WAEnC,CACEt8E,KAAM,aACN/U,KAAMoP,oBACN2f,mBAAoBC,IAAawiE,WAEnC,CACEz8E,KAAM,aACN/U,KAAMoP,qBACN2f,mBAAoBC,IAAawiE,YAIrC5rF,KAAKoO,YAAYM,SAASC,UAAWD,GAAgC1O,KAAK4O,WAAaF,GAEvF1O,KAAK2xJ,WACFnc,iBACAxmI,QAAK+pC,QAAK,IACVpqC,UAAWpM,IACVvC,KAAKy+K,YAAcl8K,GAEzB,CAEAsuJ,WAAWv0I,EAA6BrQ,GACtC,GAAe,WAAXqQ,EACF,KAAKrQ,EAAU8mE,aACb,OAAO,EAOP,GAJqB5gE,SAAOnS,KAAK6/K,kBAAoB7uE,IACnD,MAAMtiG,EAASyD,QAAM6+F,EAAK,sBAC1B,MAAkB,aAAXtiG,GAAoC,cAAXA,CAAW,GAG3C,OAAO,CARF,CAYX,OAAO1O,KAAKoO,YAAYk9B,0BACtBtrC,KAAK4O,WACL5O,KAAK2wJ,mBAAmBr0I,GAE5B,CAMAwjK,oBACE,MAAMC,EAAS//K,KAAK+wG,KAAK7zG,IAAK8zG,GAAQA,EAAI5mF,IAC1C,OAAOpqB,KAAKiM,UAAUqzD,SACnBpiE,IAAKuxE,GAAQA,EAAIrkD,IACjB/F,OAAQ+F,GAAO21J,EAAO79K,SAASkoB,IAC/BviB,MACL,CAEAg4K,kBACE,OAAO7/K,KAAK+wG,KAAK1sF,OACd2sF,IAAS7+F,gBAAc6+F,IAAQhxG,KAAK8/K,oBAAoB59K,SAAS8uG,EAAI5mF,IAE1E,CAEA,kBAAI80J,GACF,OAAOl/K,KAAK8/K,oBAAoB1kL,OAAS,CAC3C,CAEAsR,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAMAozK,uBAAuBh1J,GACrB,MAAM21J,EAAehgL,KAAK6/K,kBAC1B,GAA4B,IAAxBG,EAAa5kL,OACf,OAAO,EAET,OAAQivB,GACN,IAAK,KACH,OAAO21J,EAAa3gL,KAAM2xG,GAAmB,IAAXA,EAAI5nD,IACxC,IAAK,MACH,OAAO42H,EAAa3gL,KAAM2xG,GAAmB,IAAXA,EAAI5nD,IACxC,IAAK,OACH,OAAO42H,EAAa3gL,KAAM2xG,GAAmB,IAAXA,EAAI7nD,IACxC,IAAK,KACH,OAAO62H,EAAa3gL,KAAM2xG,GAAmB,IAAXA,EAAI7nD,IAE5C,CAEAyzH,WAAWp3K,GACJA,IAASA,EAAU,IAAIunF,MAC5B,MAAMkkE,EAAiBjxJ,KAAK2xJ,WAAW5lH,QAAQvmC,EAAQmlG,YACjD/4E,EAAc,CAACq/H,EAAeprH,WAAY7lC,KAAK2xJ,WAAW9b,aAChEhkH,cAAmBD,GAAajjB,UAAWgb,IACzC3pB,KAAK+wG,KAAOpnF,EAAK,GAAGzsB,IAAK8zG,IACvBhxG,KAAKyrC,MAAQwlH,EAAexlH,MAC5BulE,EAAIivE,gBAAkBpB,GAAiBC,cAAc9tE,GACrDA,EAAIkvE,cAAcC,UAAYnvE,EAAIkvE,cAAcE,aAAaljL,IAAKjB,GAAcA,EAAE,IAClF+0G,EAAIkvE,cAAcG,SAAWrvE,EAAIkvE,cAAcI,YAAYpjL,IAAKjB,GAAcA,EAAE,IAChF+0G,EAAIr8D,MAAMN,MAAQ28D,EAAIr8D,MAAM6pI,gBAAkBxtE,EAAIr8D,MAAM4pI,WACxDvtE,EAAIzvB,YAAa,EACjByvB,EAAIqtE,aAAertE,EAAI3mF,MAAMhG,OAAQd,GAAcvjB,KAAKg/K,eAAe98K,SAASqhB,IAChFytF,EAAIotE,eAAiBz0J,EAAK,GAAGtF,OAAQd,IAAevjB,KAAK++K,cAAc78K,SAASqhB,IAChF,MAAMg9J,EAAepuK,QAAM6+F,EAAK,qBAAsB,aACtD,MAAqB,cAAjBuvE,GAAiD,YAAjBA,IAClCvvE,EAAIr3B,YAAc4mG,GAEbvvE,GACR,EAEL,CAEApoF,aACE,MAAM43J,EAAcruK,WAASnS,KAAK+wG,KAAM,CAAC,KAAM/wG,KAAKiM,UAAUmc,QAAQgC,KAAKjuB,MAE3E6D,KAAKg3D,gBAAgBnsC,KAAK8I,KAAoB,CAC5CE,UAAWrqB,sBAAsBg3K,EAAYp2J,KAC7CwJ,OAAQ,CACN,CACEztB,KAAM,OACN/L,KAAM,cACNkG,MAAOkgL,EAAYh3D,KAAK1lF,aACxBniC,MAAO6H,wBACP+J,UAAU,IAGdugB,iBAAkBtqB,oBAClBuqB,SAAWlrB,IACT7I,KAAK2xJ,WAAW5pJ,OAAOy4K,EAAYp2J,GAAIvhB,EAAOwtI,aAAa1nI,UAAU,KACnE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,yBAAyBg3K,EAAYp2J,OAEvCpqB,KAAK48K,YAAU,EAChB,GAGP,CAEAuC,YAAYxpC,GACV,IAAK31I,KAAKk/K,eACR,OAGF,MAAMrmJ,EAAe,CACnBymC,SAAUt/D,KAAK8/K,oBACfnqC,KAAMA,GAGR31I,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAK4wJ,GAAwB5iJ,EACnE,CAEA0mJ,uBACEv/K,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKorJ,GAC3C,CAEAgJ,4BACE,MAAMpmJ,EAAe,CACnBymC,SAAUt/D,KAAK6/K,mBAEjB7/K,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKoqJ,GAA6Bp8I,EACxE,CAEAumJ,sBAAsBqB,EAAoB1sJ,GACxC,MAAMgsJ,EAAS//K,KAAK8/K,oBACpB9/K,KAAKqpJ,WAAarpJ,KAAKg3D,gBAAgBnsC,KAAKuO,KAA4B,CACtEvF,UAAWrqB,qBAAqBi3K,IAChC3nJ,WAAYtvB,iBAAiBi3K,IAC7B1nJ,QAAS/4B,KAAK0gL,uBACdxwH,YAAa,CACXywH,sBAAuBF,EACvBV,UAEFhsJ,SAAUA,MACRlC,cACE7xB,KAAK8/K,oBAAoB5iL,IAAK8zG,GAAaj9E,EAAS/O,KAAKhlB,KAAK2xJ,WAAY3gD,KAC1EriG,UAAU,IAAM3O,KAAKg3D,gBAAgBxjC,aAAY,GAGzD,CAEAgpB,WACE,MAAMgkI,EAAcxgL,KAAK+wG,KAAK1sF,OAAQ8rD,GAAMA,EAAE/lD,KAAOpqB,KAAKiM,UAAUmc,QAAQgC,IAAIjuB,MAChF6D,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKuwJ,GAA2B,CAClEE,cAAekF,EAAYpqC,OAC3BQ,MAAO4pC,EAAYp2J,IAEvB,CAEAiB,SACE,MAAMu1J,EAAkB,IAAIztK,KAAY,CACtC0tK,SAAU,IAAIztK,sBAAmB,KAGnCpT,KAAKs/K,8BACH91K,kBACAA,eACAA,mBACCwsI,GACQh2I,KAAK2xJ,WAAWhb,aAAa17F,KAAKC,UAAU86F,IAErD,oBACC5rH,IACCpqB,KAAKiM,UAAY,IAAIqC,IACdtO,KAAK+d,YAAY8G,mBAAmB,CACzCC,KAAM,IAAIC,IAAa,OAASsZ,KAASnV,OAAQ,CAC/C29F,OAAQz8F,IAEVpF,KAAMhlB,KAAK2xJ,WAAWtmI,OAAOjB,EAAIw2J,EAAgBtgL,MAAMugL,UAAU,OAGrE,EACAD,EACA5gL,KAAK8gL,kBAET,CAcAxB,8BACEnsH,EACAjoC,EACA61J,EACA5hJ,EACA6hJ,EACA1kK,EACA2kK,GAAuB,EACvB1sH,EACAkB,GAEAt2B,EAAMn/B,KAAK8/K,qBAAqBnxK,UAAW9S,IACzC,MAAMkkL,EAAS//K,KAAK8/K,oBACpB9/K,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1DC,OAAQC,KAAeC,KACvBE,UAAW40J,EACX5sH,kBAAmBA,EACnBjoC,gBAAiBA,EACjB6oC,aAAc/zD,KAAKkhL,wBACnBhxH,YAAa,CACXixH,cAAetlL,EAAOmlL,GACtBpiJ,QAAS/iC,EAAO+iC,QAChBywE,OAAQxzG,EAAOwzG,OACf+xE,aAAcvlL,EAAOwlL,cACrBC,UAAWzlL,EAAO0lL,WAClBpuH,kBAAmB4tH,EACnBhB,UAEFxrH,eAAgBA,EAChBkB,uBAAwBA,EACxBp5C,aAAcA,KACZ,MAAMwpB,MAAahU,YACjB7xB,KAAK8/K,oBAAoB5iL,IAAK8zG,IAAa10F,EAAO0I,KAAKhlB,KAAK2xJ,WAAY3gD,MAEtEiwE,EACFp7I,GAAWl3B,UAAU,CACnB4S,MAAOA,KACLvhB,KAAK48K,aACL58K,KAAKg3D,gBAAgBxjC,YAAU,EAEjCpO,SAAUA,IAAMplB,KAAKg3D,gBAAgBxjC,eAGvCqS,GAAWl3B,UACT,KACE3O,KAAK48K,aACL58K,KAAKg3D,gBAAgBxjC,YAAU,EAEjC,IAAMxzB,KAAKg3D,gBAAgBxjC,aAAY,GAI9C,EAEL,CAEAgsJ,2BACEx/K,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKivJ,GAC3C,CAEA2F,yBACEz/K,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKouJ,QAA0Br/I,EAAW,CAAEv/B,KAAM,MACxF,iDArkBWwkL,IAAgB59K,8BAAAC,KAAAD,8BAAA8H,IAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,KAAAhlB,8BAAAilB,MAAAjlB,8BAAAklB,MAAA,4DAAhB04J,GAAgBz1K,UAAA,kBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,22BAFhB,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IANzC,UAMuE1O,wCAAAuJ,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,iDD9C5E5C,sFAwCAA,gGAGaA,qFAeJA,2EAAA,6DAAe,iCAAmB,wEACrD,sDAAQ,mCAA2B,6GAmDhBA,0EAAA,0DAAY,iCAAmB,iEAClD,sDAAQ,mCAAuB,6GArCrBA,iMADKA,gFACLg4K,yBACJ,qCAMEh4K,mOAEAA,yLAHQA,4EACRi4K,2CAEAC,eAIAl4K,oOADQA,4EACRm4K,+EAKAn4K,8OADQA,4EACRo4K,6EAaEp4K,oMADKA,gFACLq4K,gEAwCUr4K,8hDAtJtBvI,2BAAA,cAGEA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACiBA,2BACjBA,uBAAA,EAAA6gL,GAAA,2DAoCF7gL,uBAAA,EAAA8gL,GAAA,uBAcF9gL,2BAEAA,sBAAA,YA+EAA,uBA7EA,EAAA+gL,GAAA,yBAAA/gL,mCA6EAA,CA3EiC,GAAAghL,GAAA,yBAAAhhL,mCA2EjCA,CA/DiC,GAAAihL,GAAA,yBAAAjhL,mCA+DjCA,CAjBgC,GAAAkhL,GAAA,yBAAAlhL,mCAiBhCA,CATgC,GAAAmhL,GAAA,yBAAAnhL,6EArFfA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA87B,YAAA41E,QAAA5iF,MAeZtxB,+CAAA,eAAAohL,oUEnDC,MAAOC,WAA6Bv0K,IAIxCjO,YAAsByiL,GACpBl0K,QADoBrO,KAAAuiL,oBAHfviL,KAAAwiL,wBAAyB,EACzBxiL,KAAAyiL,0BAA2B,CAIlC,CAEAh0K,WACEzO,KAAKuiL,kBAAkBv1I,yBAAyB,KAC9ChtC,KAAKyiL,0BAA2B,IAElCziL,KAAKuiL,kBAAkBj1I,uBAAuB,KAC5CttC,KAAKwiL,wBAAyB,GAElC,iDAfWF,IAAoBrhL,8BAAAC,MAAA,4DAApBohL,GAAoBz7J,SAAA,CAAA5lB,yCAAA,kBCU3B,MAAOyhL,GACX5iL,YAAoBuxB,GAAArxB,KAAAqxB,qBAA2C,CAE/DsxJ,kBAAkB7lE,GAChBA,EAAc91G,QAAStI,GAAMsB,KAAKqxB,oBAAoBxG,KAAKnsB,GAC7D,CAEAkkL,sBACEC,GAEA,OAAO1wK,aACL0wK,EAAO3lL,IAAK4lL,KAERp0K,OAAQyD,aAAW2wK,EAAMp0K,QACpBo0K,EAA4Bp0K,OAAO2b,MACpCrqB,KAAK+iL,gCAAgCD,GACzC1oL,KAAM0oL,EAAMpiL,OAAOsiL,UACnBhkK,IAAK8jK,EAAMG,aACXzxJ,YAAasxJ,EAAMI,YAAY1xJ,YAC/B2xJ,YAAahxK,aAAW2wK,EAAMp0K,SAAYo0K,EAA4BK,eAG1EhxK,YAEJ,CAKQ4wK,gCAAgCD,GACtC,MAAMz4J,EAAQy4J,EAAMp0K,OACpB,MAAiB,WAAV2b,EAAqB,SAAWA,CACzC,CAEA+4J,2BAA2BN,GACzB,OAAO,IAAI15E,KACTppG,KAAKqjL,WAAWP,EAAMp0K,QACtB,GAAGo0K,EAAM1oL,SAAS0oL,EAAMp0K,UACxB1O,KAAKsjL,iBAAiBR,EAAOA,EAAMtxJ,kBACnCoI,EACA,aAEJ,CAEQypJ,WAAW30K,GAMjB,OAAOsjB,KAAiB7f,YALV,CACZoP,MAAO,CAAC,SAAU,UAClBD,KAAM,CAAC,aAAc,eACrB2Q,QAAS,CAAC,aAE8B9rB,GAASA,EAAKjE,SAASwM,IACnE,CAEQ40K,iBAAiBR,EAA8BlkJ,GACrD,MAAO,GAAGA,cAAoBkkJ,EAAM9jK,sCAAsChN,KAAMurF,oBAAoBvrF,KAAM6qD,qBAC5G,iDAvDW6lH,IAAwBzhL,qBAAAC,KAAA,+DAAxBwhL,GAAwBvhL,QAAxBuhL,GAAwBthL,UAAAC,WAFvB,QAAM,ECCd,MAAOkiL,GASXzjL,YACU0jL,EACAjB,GADAviL,KAAAwjL,iBACAxjL,KAAAuiL,oBAVFviL,KAAAyjL,qBAAsB,EACtBzjL,KAAA0jL,aAAe,IAAIl1K,kBAAkC,IAC7DxO,KAAA2jL,OAAS3jL,KAAK0jL,aAAa37I,eAC3B/nC,KAAA6iL,OAA8B,EAQ3B,CAEHr1I,UAAUC,GACRztC,KAAKuiL,kBAAkBv1I,yBAAyB,KAC9ChtC,KAAKuiL,kBAAkB/0I,UAAUC,GAAuB9+B,UACrDk0K,GAAW7iL,KAAK4jL,aAAaf,GAC7Bl5J,IACK,CAAC,IAAK,KAAKznB,SAASynB,EAAKjb,SAC3B1O,KAAKuiL,kBAAkBn1I,2BAAyB,EAEnD,EAGP,CAEAQ,WACE5tC,KAAKuiL,kBAAkBj1I,uBAAuB,KAC5CttC,KAAKuiL,kBAAkB30I,SAAS,YAAYj/B,UAAWm/B,IACrD,MAAMD,EAAQC,EAAOA,OAAUnlC,OAAO,CAACk8I,EAAK1tH,IACnC0tH,EAAIj8I,OACTuuB,EAAM0W,MAAM3wC,IAAK6mC,IACfA,EAAK5M,MAAQA,EAAM/8B,KACZ2pC,KAGV,IACH/jC,KAAK0jL,aAAaj0K,KAAKo+B,EAAK,EAC7B,EAEL,CAEArI,QAAQiI,GACNztC,KAAKwtC,UAAUC,EACjB,CAEQm2I,aAAaf,GACf7iL,KAAKyjL,qBACPzjL,KAAK6jL,qBAAqBhB,EAAQ7iL,KAAK6iL,QAEzC7iL,KAAK8jL,aAAe3xK,WAClB0wK,EACA,CAAChnL,EAAQinL,IAAkC,WAAvBA,EAAMp0K,OAAO2b,QAAuBxuB,EAASA,EACjE,GAEFmE,KAAK+jL,qBAAuB5xK,WAC1B0wK,EACA,CAAChnL,EAAQinL,IACgB,WAAvBA,EAAMp0K,OAAO2b,OAAgD,aAA1By4J,EAAMpiL,OAAOsjL,WAA4BnoL,EAASA,EACvF,GAEFmE,KAAKikL,oBAAsB9xK,WACzB0wK,EACA,CAAChnL,EAAQinL,IACgB,WAAvBA,EAAMp0K,OAAO2b,OAAgD,YAA1By4J,EAAMpiL,OAAOsjL,WAA2BnoL,EAASA,EACtF,GAEFmE,KAAK6iL,OAASA,EACXjZ,UACA/hK,KAAK,CAACrN,EAAGC,IAAMD,EAAEkG,OAAOsjL,SAASE,cAAczpL,EAAEiG,OAAOsjL,WAC3DhkL,KAAKyjL,qBAAsB,CAC7B,CAEQI,qBAAqBhB,EAA6BsB,GACxD,MAAMC,EAAgBpkL,KAAKqkL,iBACzBrkL,KAAKwjL,eAAeZ,sBAAsBC,GAC1C7iL,KAAKwjL,eAAeZ,sBAAsBuB,IAKtCrnE,EAHqB3qG,WAASiyK,EAAgBtB,GAC1B,eAAjBA,EAAMp0K,QAE0BxR,IAAK4lL,GAC5C9iL,KAAKwjL,eAAeJ,2BAA2BN,IAEjD9iL,KAAKwjL,eAAeb,kBAAkB7lE,EACxC,CAEQunE,iBAAiBxB,EAAiCsB,GAExD,OADsBhyK,mBAAiB0wK,EAAQsB,EAAWhyK,aACrCvJ,OAAO5I,KAAKskL,kBAAkBzB,EAAQsB,GAC7D,CAEQG,kBAAkBzB,EAAiCsB,GACzD,OAAOhyK,mBAAiBgyK,EAAWtB,EAAQ,CAACroL,EAAGC,IAAMD,EAAE2oL,cAAgB1oL,EAAE0oL,aAAajmL,IACnF4lL,IACCA,EAAMp0K,OAAS,WACRo0K,GAGb,iDApGWS,IAAsBtiL,qBAAAC,IAAAD,qBAAA8H,MAAA,+DAAtBw6K,GAAsBpiL,QAAtBoiL,GAAsBniL,UAAAC,WAFrB,QAAM,qFCNhBJ,sBAAA,gFACoCA,8CAAA+K,EAAAu4K,uBAAAR,2GACpC9iL,sBAAA,gFACqCA,8CAAA+K,EAAAu4K,uBAAAN,iDCFnC,MAAOO,GACX1kL,YAAmBykL,GAAAvkL,KAAAukL,wBAAiD,iDADzDC,IAAuBvjL,8BAAAC,IAAA,4DAAvBsjL,GAAuBp7K,UAAA,yBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDFxB5C,yFACR,uDACoC,mCAAiD,8FACrF,yDACqC,qCAAgD,mIAQ7EA,mFAQAA,8tBAzBRvI,2BAFJ,SAEIA,CAFqB,SAErBA,CADmB,SACnBA,wBAAA,KAQAA,uBAFA,EAAAwjL,GAAA,cAEAxjL,CADoC,EAAAyjL,GAAA,eAEyDzjL,wBAC/FA,6BAEEA,2BADF,SACEA,CADmB,SACnBA,mBAAA,KAMFA,6BAEEA,2BADF,SACEA,CADmB,UACnBA,mBAAA,MAOJA,sCAvBOA,sBAAA,GAAAA,uBAAA,0BAAAA,4BAAA,EAAAyI,KAEKzI,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA8gL,uBAAAR,qBAAA,GAEA9iL,+CAAA,OAAAwC,EAAA8gL,uBAAAN,oBAAA,GAQLhjL,sBAAA,GAAAA,uBAAA,0BAAAA,4BAAA,EAAAyI,KAQAzI,sBAAA,GAAAA,uBAAA,0BAAAA,4BAAA,EAAAyI,oHExBPzI,2BAAA,sBAAAA,wBAAA,KAIcA,sBAAA,cAAuCA,6EAmBjDA,sBAAA,qEAMoBA,uBALA,mBAKAA,CALsB,eAKtBA,CAJkB,qBAIlBA,CAHyB,OAAAM,EAAA+K,YAGzBrL,CAFoB,YAAAM,EAAAm5E,UAEpBz5E,CADuB,yCAN7CA,oCAAA,GACEA,uBAAA,EAAA0jL,GAAA,iIAjBJ1jL,2BAAA,gBASUA,uBADA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAClD3J,sBAAA,wBAMAA,uBAAA,EAAA2jL,GAAA,sBAUF3jL,uEAnBUA,uBANA,OAAAM,EAAAgjL,uBAAA1B,OAMA5hL,CANsC,UAAAM,EAAAsL,QAMtC5L,CALmB,qBAKnBA,CAHwB,YAAAM,EAAAm5E,UAGxBz5E,CAFuB,iBAMbA,wBAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAA0K,UAEzBhL,CADuB,eAAAM,EAAAwL,cAI1B9L,+CAAA,OAAAM,EAAA+K,wCAefrL,2BAAA,uCAEEA,sBAAA,YAGOA,mBAAA,cACTA,oFANGA,uBAAA,OAAAgmB,EAAAhmB,2BAEIA,wBACAA,uBADA,UAAAM,EAAAwQ,MAAAwrF,UACAt8F,CAD2B,OAAAM,EAAAwQ,MAAA8qD,SCnB9B,MAAOgoH,WAAiCvC,GAS5CxiL,YAEUoO,EACDq2K,EACC3xJ,EACmB2vJ,GAE3Bl0K,MAAMk0K,GALEviL,KAAAkO,qBACDlO,KAAAukL,yBACCvkL,KAAA4yB,aAPV5yB,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAA+R,MAAQC,KAUNhS,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB89B,WAC3D3sC,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZ4b,aAAezc,GAAgCA,EAAU0c,mBACzD1I,QAAUhU,IACPA,EAAU0c,oBAAsB1c,EAAUmc,QAAQuxD,YACrDpxD,KAAMvW,KAAMwW,IACZC,WAAYA,IACV,cAAgBzoB,KAAK4yB,WAAWs3F,cAAclqH,KAAKiM,UAAUmc,QAAQ+6J,aACvE/oL,KAAMoP,2BAGZ,CAEAiF,WACEJ,MAAMI,WACNzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,mBACNsiB,UAAW,UACXriB,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,sBACNC,SAAU,GAEZ,CACEhV,KAAMoP,oBACN2F,KAAM,kBACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH++F,SAAU,CAAEhgC,MAAO,gBACnBvhC,QAAS,CAAEuhC,MAAO,oBAIxB,CACE7hE,KAAMoP,iBACN2F,KAAM,eACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACHmyG,OAAQ,CAAEpzC,MAAO,cACjB6oH,YAAa,CAAE7oH,MAAO,iBACtB8oH,WAAY,CAAE9oH,MAAO,iBAI3B,CACE7hE,KAAMoP,mBACN2F,KAAM,WACNga,mBAAoBC,IAAaijE,QACjCj9E,SAAU,GAEZ,CACEhV,KAAMoP,eACN2F,KAAM,eACNC,SAAU,EACVwgE,UAAU,EACVvgE,aAAcrP,KAAKglL,kBAGvBhlL,KAAKukL,uBAAuB/2I,WAAU,EACxC,CAEA9gC,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,iDA1FW44K,IAAwB5jL,8BAAAC,KAAAD,8BAAA8H,IAAA9H,8BAAA+H,KAAA/H,8BAczBqrC,MAAiB,4DAdhBu4I,GAAwBz7K,UAAA,2BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4KAJxB,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IAJzC,eAIuE1O,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDdnE5C,kMAEP,qCAA6B,0wBAN3CvI,sBAAA,wBAoCAA,uBAlCA,EAAAgkL,GAAA,uBAkCAhkL,CAhCqB,EAAAikL,GAAA,iBAgCrBjkL,CAnBsD,EAAAkkL,GAAA,yBAAAlkL,2CAfrCA,+CAAA,QAAAwC,EAAAg/K,0BAMNxhL,+CAAA,OAAAwC,EAAAg/K,6IENXxhL,2BAAA,sBAAAA,wBAAA,KAIYA,sBAAA,cAAuCA,6EAU/CA,sBAAA,oEAGoBA,uBAFA,OAAAM,EAAA+K,YAEArL,CAFoB,mBAEpBA,CADsB,WAAAM,EAAAg5E,kCAH5Ct5E,oCAAA,GACEA,uBAAA,EAAAmkL,GAAA,iIARJnkL,2BAAA,gBAMUA,uBADA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EACxC3J,CADyC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACtBM,EAAAmL,gBAAA9B,GAAuB,GAClD3J,uBAAA,EAAAokL,GAAA,sBAOFpkL,uEAVUA,uBAHA,OAAAM,EAAAssC,MAGA5sC,CAHc,UAAAM,EAAAsL,QAGd5L,CAFmB,yBAEnBA,CAD0B,iBAInBA,+CAAA,OAAAM,EAAA+K,cCIX,MAAOg5K,WAA2BhD,GActCxiL,YACSykL,EACoBhC,GAE3Bl0K,MAAMk0K,GAHCviL,KAAAukL,yBAZTvkL,KAAAiM,UAAY,IAAIqC,IAChBtO,KAAA6tC,MAA0B,GAO1B7tC,KAAAu6E,SAAW,CAAC,SAAU,OAQtB,CAEA9rE,WACEJ,MAAMI,WACNzO,KAAKukL,uBAAuB32I,WAC5B5tC,KAAKulL,kBAAoBvlL,KAAKukL,uBAAuBZ,OAAOh1K,UAAWk/B,IACrE7tC,KAAK6tC,MAAQA,IAEf7tC,KAAK6M,QAAU,CACb,CAAEsC,KAAM,OAAQ/U,KAAMoP,gBAAiBioB,UAAW,UAAWriB,SAAU,GACvE,CACED,KAAM,kBACN/U,KAAMoP,oBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH++F,SAAU,CAAEhgC,MAAO,gBACnBvhC,QAAS,CAAEuhC,MAAO,oBAIxB,CACE9sD,KAAM,QACN/U,KAAMoP,iBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,OAEnC,CAAE78E,KAAM,WAAY/U,KAAMoP,oBAAqBwF,KAAM,IAAIq/F,KAAgBj/F,SAAU,GACnF,CAAED,KAAM,QAAS/U,KAAMoP,iBAAkBspE,UAAU,EAAM1jE,SAAU,GACnE,CAAED,KAAM,sBAAuB/U,KAAMoP,mBAAoB4F,SAAU,GAEvE,CAEA1C,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEA+d,cACEhqB,KAAKulL,kBAAkBr7J,aACzB,iDA3DWo7J,IAAkBrkL,8BAAAC,IAAAD,8BAgBnBqrC,MAAiB,4DAhBhBg5I,GAAkBl8K,UAAA,oBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDfV5C,yLAET,qCAA6B,uaANzCvI,sBAAA,wBAQAA,uBANA,EAAAukL,GAAA,uBAMAvkL,CAJqB,EAAAwkL,GAAA,yBAFJxkL,+CAAA,QAAAwC,EAAA++K,wBAMNvhL,+CAAA,OAAAwC,EAAA++K,8FEKL,MAAOkD,GAHb5lL,cAIUE,KAAA2lL,mBAAqB,CAC3B3C,UAAW,OACXz0I,SAAU,2BACVq3I,IAAK,sBACL5B,SAAU,mBAGZ6B,YACEC,EACAj4I,GAEA,OAAO7tC,KAAK+lL,WAAW,CAACD,GAAUj4I,EACpC,CAEAk4I,WACEC,EACAn4I,GAEA,IAAIm4I,EAAS3mL,KAAMymL,GAAYA,EAAQG,SAGvCD,SAASh/K,QAAS8+K,IAChBj4I,EAAQ7tC,KAAKkmL,gBAAgBJ,EAASj4I,EAAK,GAEtC7tC,KAAKmmL,cAAct4I,EAC5B,CAEAq4I,gBAAgBJ,EAAqCj4I,GACnD,MAAMu4I,EAAgBpmL,KAAKqmL,iBAAiBP,EAAQ1rL,MACpD,OAAOyzC,EAAMxpB,OAAQxpB,GAAMsX,QAAMtX,EAAGurL,KAAmBN,EAAQxlL,MACjE,CAEQ6lL,cAAct4I,GACpB,IAAIg1I,EAAS,EACbh1I,SAAM7mC,QAASnM,GAAOgoL,GAAUhoL,EAAEgoL,OAAOznL,QAClC,CACLsT,OAAQ1O,KAAKsmL,aAAaz4I,EAAMzyC,OAAQynL,GACxC0D,SAAU1D,EAAS,cAAgB,cAEvC,CAEAwD,iBAAiBjsL,GACf,OAAO4F,KAAK2lL,mBAAmBvrL,EACjC,CAEQksL,aAAaz4I,EAAeg1I,GAClC,MAAM3+H,EAAM,CACVsiI,OAAQh9K,kFACRi9K,SAAUj9K,4BACVs5K,MAAOt5K,0BACPq5K,OAAQr5K,YAAYq5K,kBACpB9+I,KAAMv6B,0BACNqkC,MAAOrkC,oBAAoBqkC,WAGvB9J,EAAO8J,EAAQ,EAAIqW,EAAIrW,MAAQqW,EAAIngB,KACnC++I,EAAQD,EAAUA,EAAS,EAAI3+H,EAAI2+H,OAAS3+H,EAAI4+H,MAAS5+H,EAAIuiI,SAEnE,OAAO54I,EAAQrkC,YAAYu6B,UAAa++I,KAAW5+H,EAAIsiI,MACzD,iDA5DWd,GAA+B,+DAA/BA,GAA+BvkL,QAA/BukL,GAA+BtkL,UAAAC,WAF9B,QAAM,ECJd,MAAOqlL,GACXC,kBAAkBt+C,EAAiBu+C,GACjC,MAAMlY,GAAarmC,EACbsmC,GAAWiY,EACXthJ,EAAWtlC,KAAK6mL,YAAYzpL,KAAK+B,IAAIuvK,EAAYC,IACvD,OAAID,EAAYC,EACP,IAAMrpI,EAERA,CACT,CAQQuhJ,YAAYC,GAClB,MAAMx0H,EAAO,IAAIp2B,KAAK4qJ,GAChB10E,EAAI9/C,EAAKy0H,cACTxrL,EAAI+2D,EAAK00H,gBAGT9uJ,EAASA,CAACx5B,EAAWg9E,IAAeh9E,GAAIA,EAAIg9E,EAClD,MAAO,CAACxjD,EAHE96B,KAAK2+B,MAAM+qJ,SAGH,KAAM5uJ,EAAOk6E,EAAG,KAAMl6E,EAAO38B,EAAG,MAAM8oB,OAAQrlB,GAAMA,GAAGpC,KAAK,IAChF,CAEAqqL,cAAc30H,EAAYhtB,EAAkBskI,GAC1C,MAAMvjK,GAAQisD,EACd,GAAIngD,UAAQ9L,GACV,OAEF,MAAMsxG,EAAO33G,KAAKknL,cAAc5hJ,IAAaskI,GAAU,EAAK,GAC5D,OAAO,IAAI1tI,KAAK71B,EAAOsxG,EACzB,CAEQuvE,cAAc5hJ,GAIpB,OAAiC,KAAV,IAAV,GAHHtlC,KAAKmnL,qBAAqB7hJ,EAAU,KACpCtlC,KAAKmnL,qBAAqB7hJ,EAAU,MACpCtlC,KAAKmnL,qBAAqB7hJ,EAAU,KAEhD,CAEQ6hJ,qBAAqB7hJ,EAAkBpd,GAC7C,MAAM1sB,EAAQ8pC,EAAS9pC,MAAM,IAAIb,OAAO,UAAUutB,IAAU,MAC5D,OAAO1sB,EAAQ+B,SAAS/B,EAAM,GAAI,IAAM,CAC1C,iDA9CWkrL,GAAe,+DAAfA,GAAevlL,QAAfulL,GAAetlL,UAAAC,WAFd,QAAM,4BCiBNJ,2BAAA,eAEEA,mBAAA,GACFA,qDAFQA,uBAAA,QAAAmmL,GACNnmL,uDAAA,IAAAmmL,EAAA,6BAGJnmL,2BAAA,aAAAA,mBAAA,KAEkCA,mDAkBlCA,2BAAA,aAAAA,mBAAA,KAEkCA,sDAKlCA,2BAHF,WAGEA,CADoB,UAElBA,mBAAA,GAEJA,uEALKA,mCAAA,sBAAAuvB,EAAA62J,aAAAd,SAAA,IAEGtlL,2DAAA,cAAAuvB,EAAA62J,aAAAd,SAAA,IACJtlL,uDAAA,IAAAuvB,EAAA62J,aAAA34K,OAAA,MChCR,MAAO44K,GA+BXxnL,YACUge,EACAypK,EACDn6D,EACAp/G,GAHChO,KAAA8d,cACA9d,KAAAunL,iBACDvnL,KAAAotH,cACAptH,KAAAgO,eA/BThO,KAAAqc,aAAe,IAAIvS,eAGnB9J,KAAAwnL,UAAW,EAEXxnL,KAAAynL,eAAiB,CAAC,YAAa,WAAY,MAAO,YAClDznL,KAAA0nL,eAA2B,GAC3B1nL,KAAAqnL,kBAAgDztJ,EAGhD55B,KAAA2nL,WAAa,IAAIphJ,UACjBvmC,KAAA4nL,WAAa,IAAIrhJ,UACjBvmC,KAAAo8E,OAAU99D,MACDwlI,SACLxlI,EAAMtP,QAAKuP,gBAAa,MAAG,EAAGC,2BAC9Bxe,KAAK4nL,WACL5nL,KAAK2nL,WAAW34K,QAAKqV,UAAO,KAAOrkB,KAAK+jJ,UAAUC,iBAClDh1I,QACA9R,OAAKwxH,IACO,KAATA,EACG1uH,KAAK0nL,eACL1nL,KAAK0nL,eAAerjK,OAAQ4e,GAAMA,EAAE1e,cAAcxoB,QAAQ2yH,EAAKnqG,gBAAiB,IAClFrpB,MAAM,EAAG,MAWf8E,KAAKif,aACLjf,KAAK6nL,oBACP,CAEQ5oK,aACNjf,KAAKyS,KAAOzS,KAAK8d,YAAYqZ,MAAM,CACjC/8B,KAAM,CAAC,KAAM,CAACkZ,aAAWC,WACzBjT,MAAO,CAAC,CAAEA,MAAO,GAAIiqC,UAAU,GAAQ,CAACj3B,aAAWC,WACnD0yK,QAAS,IAAI7yK,sBAAmB,IAEpC,CAEQy0K,qBACN7nL,KAAKyS,KAAKC,IAAI,QAAQimD,aAAahqD,UAAWvU,IAC/B,OAATA,GAIJ4F,KAAK8nL,kBAAkB1tL,GACvB4F,KAAKyS,KAAKC,IAAI,SAAS+Q,UAJrBzjB,KAAKyS,KAAKC,IAAI,SAASuN,SAII,GAE/BjgB,KAAKyS,KAAKC,IAAI,SAASimD,aAAahqD,UAAWrO,IAC7C,MAAMuI,EAAS7I,KAAKyS,KAAKnS,MACzBuI,EAAOvI,MAAQA,EACfN,KAAKqnL,aAAernL,KAAKunL,eAAe1B,YAAYh9K,EAAQ7I,KAAK6tC,MAAK,EAE1E,CAEQi6I,kBAAkB1tL,GACxB4F,KAAK0nL,eAAiBv1K,eACpBnS,KAAK6tC,MAAM3wC,IAAKrC,GAAMsX,QAAMtX,EAAGmF,KAAKunL,eAAelB,iBAAiBjsL,KAAQiqB,OAAQrlB,GAAMA,GAE9F,CAEA+oL,UACE,OAAO/nL,KAAKwnL,SAAWxnL,KAAKgO,aAAauR,KAAOvf,KAAKgO,aAAay6D,GACpE,CAEAu/G,gBAAgBlC,GACd9lL,KAAKyS,KAAKkN,SAASmmK,EACrB,CAEA/xJ,WACE/zB,KAAKqc,aAAanS,KAAKlK,KAAKyS,KAAKnS,OACjCN,KAAKotH,YAAYn0F,OACnB,iDAlFWquJ,IAA4BrmL,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,kBAAA/H,8BAAAgI,MAAA,4DAA5Bq+K,GAA4Bl+K,UAAA,+BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2BAC5BogJ,eAAY,+LDtBZlgJ,qQAAA4C,mBAYS5C,iFAOKA,uHAgBLA,kFAkCIA,mGA1CHA,mGAoBAA,olCAhDrBvI,2BADF,eACEA,CADiC,aACjCA,mBAAA,KAC8DA,2BAE9DA,oCAAA,MAQQA,2BAPN,cAOMA,CAJW,WAIXA,CAHoB,WAGpBA,CAD0B,cAC1BA,mBAAA,KAEgBA,2BAMZA,2BALJ,YAKIA,CAL2B,eAK3BA,CADkB,gBAClBA,mBAAA,MACuDA,2BACvDA,uBAAA,GAAAgnL,GAAA,iBAIFhnL,2BACAA,uBAAA,GAAAinL,GAAA,eAIJjnL,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEiBA,2BAEfA,2BADF,YACEA,CAD6B,iBAGtBA,uBADA,iBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAASwC,EAAAmkL,WAAAn4K,KAAA7E,EAAAvD,OAAA/G,OAA0C,EACnDW,CADoD,iBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAC3CwC,EAAAkkL,WAAAl4K,KAAA7E,EAAAvD,OAAA/G,OAA0C,GAF1DW,2BAQAA,uBAAA,GAAAknL,GAAA,eAGFlnL,2BACAA,uBAAA,GAAAmnL,GAAA,cAOFnnL,2BAKIA,2BAFJ,YAEIA,CAFwB,YAExBA,CAD8B,aAE5BA,sBAAA,eAKAA,2BAAA,eAAAA,mBAAA,MAMRA,mCAGEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAIzD9yB,mEAEJA,sEApFUA,uBAAA,WAAAwC,EAAA2pH,aAEInsH,sBAAA,GAAAA,sBAAAwC,EAAA+jL,qCAKJvmL,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAgP,MAaYxR,sBAAA,GAAAA,uBAAA,gBAEsBA,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAgkL,gBAMzBxmL,+CAAA,OAAAwC,EAAAgP,KAAApC,UAAA,OAAAovD,EAAA,aAgBAx+D,sBAAA,GAAAA,uBAAA,eAAAwC,EAAA24E,QAGAn7E,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,QAAAovD,EAAA,aAIHx+D,+CAAA,OAAAwC,EAAAgP,KAAA9B,SAAA,WAAAlN,EAAAgP,KAAA9B,SAAA,YAAAlN,EAAA4jL,cA4BcpmL,sBAAA,GACAA,uBADA,OAAAwC,EAAAgP,KACAxR,CADa,aAAAwC,EAAAskL,8cExEnC9mL,2BAAA,UACiCA,mBAAA,OAACA,gFAA/BA,uBAAA,aAAAonL,EAAAzjL,iCACH3D,2BAAA,UACuBA,mBAAA,OAACA,sDAL1BA,2BAAA,aAIEA,uBAFA,EAAAqnL,GAAA,WAEArnL,CADiC,EAAAsnL,GAAA,YAGnCtnL,qHAJMA,+CAAA,OAAAunL,EAAAH,EAAAI,YAEAxnL,+CAAA,QAAAunL,EAAAH,EAAAI,uCAINxnL,oCAAA,GACEA,sBAAA,0JACOA,2DAAA,gBAAAonL,EAAAI,UAAA,IAAAC,EAAA,IAEAznL,uBAAA,QAAAunL,EAAAH,EAAAI,uCAbXxnL,oCAAA,GASEA,uBARA,EAAA0nL,GAAA,cAQA1nL,CAP6C,EAAA2nL,GAAA,qFAAtC3nL,+CAAA,mBAAAonL,EAAAI,WAOQxnL,+CAAA,mBAAAonL,EAAAI,4EAVnBxnL,2BAAA,YACEA,uBAAA,EAAA4nL,GAAA,uBAoBA5nL,2BAAA,eAKQA,uBAAA,yBAAAynL,EAAAznL,0BAAA4P,GAAA3J,MAAAozB,EAAAr5B,4BAAA,OAAAA,wBAASq5B,EAAAwuJ,iBAAAJ,GAAuB,gCACtCznL,sBAAA,YAIFA,yDACAA,2BAAA,eAKQA,uBAAA,yBAAAynL,EAAAznL,0BAAA4P,GAAA3J,MAAAozB,EAAAr5B,4BAAA,OAAAA,wBAASq5B,EAAAyuJ,cAAAL,GAAoB,gCACnCznL,sBAAA,YAIJA,2DACAA,sBAAA,mEA1CmCA,+CAAA,UAAAq5B,EAAA0uJ,eAsBzB/nL,2DAAA,qBAAAynL,EAAA,IAKNznL,wBACAA,uBADA,UAAAq5B,EAAAvoB,MAAA8W,KACA5nB,CADsB,OAAAq5B,EAAAvoB,MAAA8qD,QAMhB57D,2DAAA,uBAAAynL,EAAA,IAIDznL,wBACAA,uBADA,UAAAq5B,EAAAvoB,MAAAsqF,MACAp7F,CADuB,OAAAq5B,EAAAvoB,MAAA8qD,gCAiB1B57D,2BAAA,eAAAA,mBAAA,MAC8FA,mDAe1FA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAgBlCA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAoBlCA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAelCA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAiBlCA,2BAAA,aAAAA,mBAAA,MAEkCA,sDAYhCA,2BAFF,UAEEA,CADqF,YACrFA,mBAAA,MACFA,kGAFIA,uBAAA,UAAAA,4BAAA,EAAAK,IAAA2nL,EAAA3oF,UAAA2oF,EAAA3oF,mCAKFr/F,+BAAA,6BADFA,2BAAA,UACEA,uBAAA,EAAAioL,GAAA,uBACFjoL,8HADiBA,wBAA8BA,uBAA9B,mBAAAkoL,EAA8BloL,CAAA,0BAAAA,4BAAA,EAAAQ,GAAA2nL,EAAAC,+BAsB/CpoL,2BAHF,WAGEA,CADoB,UAElBA,mBAAA,GAEJA,uEALKA,mCAAA,sBAAAq5B,EAAA+sJ,aAAAd,SAAA,IAEGtlL,2DAAA,cAAAq5B,EAAA+sJ,aAAAd,SAAA,IACJtlL,uDAAA,IAAAq5B,EAAA+sJ,aAAA34K,OAAA,+BAkBZzN,sBAAA,qEACqBA,uBADA,UAAAq5B,EAAA7nB,KAAAC,IAAA,YACAzR,CADgC,2CAMrDA,sBAAA,qEACqBA,uBADA,UAAAq5B,EAAA7nB,KAAAC,IAAA,UACAzR,CAD8B,kBCrL/C,MAAOqoL,GAmCXxpL,YACUyU,EACArG,EACA4P,EACAykK,EACAlxJ,EACA3T,EACA6rK,EACA1hK,EACA0/J,EACAv5K,EACAw7K,GAVAxpL,KAAAuU,SACAvU,KAAAkO,qBACAlO,KAAA8d,cACA9d,KAAAuiL,oBACAviL,KAAAqxB,sBACArxB,KAAA0d,QACA1d,KAAAupL,WACAvpL,KAAA6nB,eACA7nB,KAAAunL,iBACAvnL,KAAAgO,eACAhO,KAAAwpL,kBA7CVxpL,KAAA+R,MAAQC,KAIRhS,KAAAypL,UAAY,GACZzpL,KAAA0pL,WAAa,GAEb1pL,KAAA2pL,UAAW,EACX3pL,KAAA6oB,MAAO,EAIP7oB,KAAAuc,SAAW/S,mBAEXxJ,KAAAgmL,SAAyC,GACzChmL,KAAAqnL,kBAAgDztJ,EAChD55B,KAAAgpL,cAAgB,CACd,CACEpkL,QAAS4E,0BACTi/K,UAAW,QAEb,CACE7jL,QAAS4E,8BACTi/K,UAAW,WAEb,CACE7jL,QAAS4E,iBACTi/K,UAAW,UAIfzoL,KAAA4pL,eAAiB,mBACjB5pL,KAAA6pL,YAAa,EAeX7pL,KAAKypB,MACP,CAEQA,OACNzpB,KAAK8pL,aACL9pL,KAAK+pL,eACL/pL,KAAKif,aACLjf,KAAKgqL,aACLhqL,KAAKggB,SACP,CAEQ8pK,aACN9pL,KAAK6oB,KAAO7oB,KAAKuU,OAAOyK,IAAIK,WAAW,6BACvCrf,KAAK2pL,SAAW3pL,KAAKuU,OAAOyK,IAAIK,WAAW,iCACvCrf,KAAK6oB,KACP7oB,KAAKsc,OAAStc,KAAKgO,aAAauR,KACvBvf,KAAK2pL,SACd3pL,KAAKsc,OAAStc,KAAKgO,aAAa26D,SAEhC3oE,KAAKsc,OAAStc,KAAKgO,aAAakS,MAEpC,CAEQ6pK,eAIN,GAHA/pL,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB89B,YAEzD3sC,KAAK8M,WAAWylB,QAASvyB,KAAK6oB,KAAO7oB,KAAK8M,WAAW/E,OAAS/H,KAAK8M,WAAWmY,QAE9E,MAAM,IAAIyZ,KAEd,CAEQzf,aACN,MAAMgrK,EAAkBnoK,MAAaC,OAAO,SAAWmoK,KACxB,KAAdA,GAAoB7/K,KAAO6/K,EAAWlqL,KAAK4pL,gBAAgBl3H,YAG5E1yD,KAAKyS,KAAOzS,KAAK8d,YAAYqZ,MAC3B,CACEgzJ,SAAU,CAAC,GAAI,CAAC72K,aAAWC,SAAU02K,IACrC3kJ,SAAU,CAAC,KAAM,CAAChyB,aAAW8yD,IAAI,KACjCgkH,OAAQ,CAAC,GAAI,CAAC92K,aAAWC,SAAU02K,IACnCI,UAAW,CAACrqL,KAAKkO,mBAAmBmrB,cAAe,CAAC/lB,aAAWC,WAC/D+2K,QAAS,CAAC,KAAM,CAACh3K,aAAWC,YAE9B,CACEF,WAAYyO,MAAaC,OAAO,kBAAmB,IAA+B,IAAzB/hB,KAAKgmL,SAAS5qL,SAG7E,CAEQ4uL,aACN,MAAM7tJ,EAAM9xB,OAAS6tB,OAAOl4B,KAAK4pL,gBACjC5pL,KAAKyS,KAAK0tF,UAAU,WAAYhkE,GAChCn8B,KAAKuqL,aACLvqL,KAAKwqL,sBACP,CAEQD,WAAWE,GACjB,MAAMn4H,EAAOjoD,KACXrK,KAAKyS,KAAK9B,SAAS85K,EAAkB,SAAW,YAChDzqL,KAAK4pL,gBACLc,SACIj7K,EAAOzP,KAAKupL,SAAStC,cAAc30H,EAAMtyD,KAAKyS,KAAK9B,SAAS,YAAa85K,GAC/E,GAAIh7K,EAAM,CACR,MAAMk7K,EAAWtgL,KAAOoF,GAAMyoB,OAAOl4B,KAAK4pL,gBAC1C5pL,KAAKyS,KAAK0tF,UAAUsqF,EAAkB,WAAa,SAAUE,EAC/D,CACF,CAEQH,uBACNxqL,KAAKyS,KAAKC,IAAI,YAAYimD,aAAahqD,UAAU,KAC/C3O,KAAK4qL,cAAY,GAEnB5qL,KAAKyS,KAAKC,IAAI,YAAYimD,aAAahqD,UAAU,KAC/C3O,KAAKuqL,YAAU,GAEjBvqL,KAAKyS,KAAKC,IAAI,UAAUimD,aAAahqD,UAAU,KAC7C3O,KAAK4qL,cAAa,EAAI,EAE1B,CAEQA,aAAaH,GACnB,MAAMN,EAAW9/K,KAAOrK,KAAKyS,KAAK9B,SAAS,YAAa3Q,KAAK4pL,gBACvDQ,EAAS//K,KAAOrK,KAAKyS,KAAK9B,SAAS,UAAW3Q,KAAK4pL,gBACrDO,EAASx3H,SAASy3H,GACpBpqL,KAAK6qL,iBAEL7qL,KAAKuqL,WAAWE,EAEpB,CAEQI,iBACN,MAAMV,EAAW9/K,KAAOrK,KAAKyS,KAAK9B,SAAS,YAAa3Q,KAAK4pL,gBAAgBc,SACvEN,EAAS//K,KAAOrK,KAAKyS,KAAK9B,SAAS,UAAW3Q,KAAK4pL,gBAAgBc,SACzE1qL,KAAKyS,KAAK0tF,UAAU,WAAYngG,KAAKupL,SAAS5C,kBAAkBwD,EAAUC,GAC5E,CAEQpqK,UACNhgB,KAAK4tC,WACL5tC,KAAK8qL,qBACP,CAEAl9I,WACE,OAAA5tC,KAAKuiL,kBAAkBj1I,uBACrB,IACEttC,KAAKuiL,kBAAkB30I,WAAWj/B,UAC/Bm/B,IACC9tC,KAAK6tC,MAAQC,EAAOA,OAAUnlC,OAC5B,CAACk8I,EAAK1tH,IAAUhlB,WAAyB0yI,EAAK1tH,EAAM0W,OACpD,GAAE,EAGN,KACE7tC,KAAKuiL,kBAAkBh1I,0BACvBvtC,KAAK6tC,MAAQ,KAGnB,KACE7tC,KAAK6tC,MAAQ,GACb7tC,KAAKqxB,oBAAoBxG,KACvBmH,KAAiB1Q,KACjB9X,oGACAowB,OACAA,EACA,aAAY,GAIX55B,KAAK6tC,KACd,CAEQi9I,sBACN9qL,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IACtBA,EAAO4K,KAGRpqB,KAAK6oB,MAAQ7oB,KAAK2pL,SACpB3pL,KAAKuiL,kBAAkB50I,cAAch/B,UAAWo8K,IAC9C,MAAM/8I,EAAU77B,SAAO44K,EAAU,CAAC,KAAMvrK,EAAO4K,KAC1CjY,gBAAc67B,IACjBhuC,KAAKgrL,oBAAoBh9I,EAAO,GAIpChuC,KAAKuiL,kBAAkB/0I,YAAY7+B,UAAWk0K,IAC5C,MAAMC,EAAQ3wK,SAAO0wK,EAAQ,CAAC,cAAerjK,EAAO4K,KAC/CjY,gBAAc2wK,IACjB9iL,KAAKirL,gBAAgBnI,EAAK,GAE7B,EAGP,CAEQkI,oBAAoBh9I,GAC1BhuC,KAAKoqB,GAAK4jB,EAAQ5jB,GACdpqB,KAAK6oB,OACP,CAAC,WAAY,UAAU7hB,QAASqwI,GAC9Br3I,KAAKyS,KAAK0tF,UAAUk3C,EAAMhtI,KAAO2jC,EAAQqpG,IAAOn/G,OAAOl4B,KAAK4pL,kBAE9D5pL,KAAK6qL,kBAEP,CAAC,YAAa,WAAW7jL,QAASqwI,GAASr3I,KAAKyS,KAAK0tF,UAAUk3C,EAAMrpG,EAAQqpG,KAC7Er3I,KAAKgmL,SAAWh4I,EAAQg4I,SACxBhmL,KAAKkrL,kBACP,CAEQA,mBACDlrL,KAAK6tC,OAIV7tC,KAAKqnL,aAAernL,KAAKunL,eAAexB,WAAW/lL,KAAKgmL,SAAUhmL,KAAK6tC,OACvE7tC,KAAKyS,KAAKwR,cACVjkB,KAAKyS,KAAKoP,0BALR6d,OAAOikB,WAAW,IAAM3jD,KAAKkrL,mBAAoB,IAMrD,CAEQD,gBAAgBnI,GACtB,MAAMpiL,EAASoiL,EAAMpiL,OACrBV,KAAKmrL,WAAW,CACd/wL,KAAM,YACNkG,MAAOI,EAAOsiL,UACdiD,SAAS,GAEb,CAEQkF,WAAWrF,EAAqC5+K,GAClDiL,aAAWjL,GACblH,KAAKgmL,SAAS9+K,GAAS4+K,EAEvB9lL,KAAKgmL,SAAS9pL,KAAK4pL,GAErB9lL,KAAKkrL,kBACP,CAEApC,iBAAiB5hL,GAEf,MAAMkkL,EADWprL,KAAK6nB,aAAagD,KAAKy8J,IACR7zJ,kBAChC23J,EAAev9I,MAAQ7tC,KAAK6tC,MACxB17B,aAAWjL,KACbkkL,EAAe5D,UAAW,EAC1B4D,EAAepD,gBAAgBhoL,KAAKgmL,SAAS9+K,KAE/CkkL,EAAe/uK,aAAa1N,UAAWm3K,IACrC9lL,KAAKmrL,WAAWrF,EAAS5+K,EAAK,EAElC,CAEA6hL,cAAc7hL,GACZlH,KAAKgmL,SAAS9kH,OAAOh6D,EAAO,GAC5BlH,KAAKkrL,kBACP,CAEAt6J,OAAOruB,GACDvC,KAAKyS,KAAKkD,SAGd3V,KAAKuiL,kBAAkBx0I,WAAW/tC,KAAKqrL,iBAAiB18K,UACrDgb,IACKpnB,IACFA,EAAK2rC,UAAYvkB,EAAKxuB,KAAK+yC,WAEzBluC,KAAK6pL,YACP7pL,KAAKuU,OAAOC,SAAS,CAAC,yBAExBxU,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBjyB,KAAKsrL,oBAAoBtrL,KAAKgmL,eAC9BpsJ,OACAA,EACA,cAEF55B,KAAKgmL,SAAW,IAElB,IAAMhmL,KAAKyS,KAAK8S,UAAU,CAAEE,gBAAgB,IAEhD,CAEQ4lK,gBACN,MAAMhxI,EAAUr6C,KAAKyS,KAAKnS,MAC1B,cAAO+5C,EAAQ/U,SACf+U,EAAQ8vI,SAAW9/K,KAAOgwC,EAAQ8vI,SAAUnqL,KAAK4pL,gBAAgBpyD,cACjEn9E,EAAQ+vI,OAAS//K,KAAOgwC,EAAQ+vI,OAAQpqL,KAAK4pL,gBAAgBpyD,cAC7Dn9E,EAAQ2rI,SAAWhmL,KAAKgmL,SACpBhmL,KAAK6oB,OACPwxB,EAAQjwB,GAAKpqB,KAAKoqB,IAEbiwB,CACT,CAEQixI,oBAAoBtF,GAC1B,IAAI1pK,EAEFA,EADEtc,KAAK6oB,KACE7oB,KAAKwpL,gBAAgB/8G,OACrBzsE,KAAK2pL,SACL3pL,KAAKwpL,gBAAgBx7G,UAErBhuE,KAAKwpL,gBAAgBn9G,QAEhC,IAAInoB,EAAM,GACV,UAAW4hI,KAAWE,EACpB9hI,EAAMA,EAAIt7C,OAAO,IAAIk9K,EAAQ1rL,UAAU0rL,EAAQxlL,UAEjD,MAAO,GAAGgc,KAAUtc,KAAKuc,gBAAgB2nC,EAAIhpD,MAAM,GAAG,IACxD,iDAzTWouL,IAAoBroL,8BAAAC,UAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAC,kBAAAD,8BAAAkI,IAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,IAAA/kB,8BAAAglB,MAAAhlB,8BAAAglB,MAAA,4DAApBqjK,GAAoBlgL,UAAA,yBAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,oDDuBd5C,2EAAA,kCAAyB,qCAUtBA,oFAiBAA,oFAmBCA,uFACKA,6IAoBNA,qFAiBAA,qFAkBCA,oFAsBcA,wFAzJbA,iFAWAA,oFAoBAA,4JAiBDA,oGAkBAA,oGAsBAA,oGAiBAA,oGAmBAA,oGAYIA,grEApK3BvI,uBAAA,EAAAsqL,GAAA,yBAAAtqL,oCAyDQA,2BARR,WAQQA,CARiB,cAQjBA,CAHW,WAGXA,CAFc,WAEdA,CADuB,UACvBA,mBAAA,2EAA+DA,2BAC/DA,uBAAA,GAAAuqL,GAAA,oBAEFvqL,2BAKIA,2BAFJ,YAEIA,CAFmB,YAEnBA,CAD0B,eAC1BA,mBAAA,MAEmBA,2BACnBA,2BAAA,aACEA,sBAAA,eAKAA,uBAAA,GAAAwqL,GAAA,eAIJxqL,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEmBA,2BAEjBA,2BADF,YACEA,CAD6B,kBAM7BA,mBAAA,mBAAAA,2BACAA,uBAAA,GAAAyqL,GAAA,eAIJzqL,6BAMIA,2BAHJ,YAGIA,CAHwB,cAGxBA,CADqB,cACrBA,mBAAA,MACqBA,2BACrBA,2BAAA,gBAAAA,mBAAA,OACFA,6BAEEA,2BADF,YACEA,CAD6B,iBAOtBA,uBADA,mBAAAA,0BAAAsL,GAAA,MAAAo/K,EAAA1qL,wBAAA,WAAAA,wBAAS0qL,EAAAh7H,OAAS,EAClB1vD,CADmB,sBAAAA,0BAAAsL,GAAA,MAAAo/K,EAAA1qL,wBAAA,WAAAA,wBACP0qL,EAAA1yJ,QAAU,GAN7Bh4B,2BAOAA,uBAAA,GAAA2qL,GAAA,eAIJ3qL,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,OAEoBA,2BACpBA,2BAAA,aACEA,sBAAA,eAKAA,uBAAA,GAAA4qL,GAAA,eAIJ5qL,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,OAEoBA,2BAElBA,2BADF,YACEA,CAD6B,iBAOtBA,uBADA,mBAAAA,0BAAAsL,GAAA,MAAAu/K,EAAA7qL,wBAAA,WAAAA,wBAAS6qL,EAAAn7H,OAAS,EAClB1vD,CADmB,sBAAAA,0BAAAsL,GAAA,MAAAu/K,EAAA7qL,wBAAA,WAAAA,wBACP6qL,EAAA7yJ,QAAU,GAN7Bh4B,2BAOAA,uBAAA,GAAA8qL,GAAA,eAIJ9qL,6BAIEA,2BADF,cACEA,CADQ,gBACRA,mBAAA,OACqBA,2BAErBA,2BAAA,aAMEA,uBALA,GAAA+qL,GAAA,YAKA/qL,CAJuF,GAAAgrL,GAAA,eAUnFhrL,2BAFJ,YAEIA,CAFa,YAEbA,CADkB,gBAKVA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAAqlL,mBAAkB,gCACjC7nL,sBAAA,2CAGAA,oCAAA,IAAAA,mBAAA,2CAIRA,iCAEAA,uBAAA,GAAAirL,GAAA,cAQJjrL,6BAIIA,2BAFJ,YAEIA,CAFqB,YAErBA,CADsB,qGACAA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAmtB,SAAQ,GAO7D3vB,qCAQAA,uBANA,GAAAkrL,GAAA,yBAAAlrL,mCAMAA,CANuB,GAAAmrL,GAAA,yBAAAnrL,2IA7JfA,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAgP,MAMWxR,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,MAAAwC,EAAA8Y,sCACnDtb,+CAAA,OAAAwC,EAAAolB,MAgBD5nB,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,YAAA44K,EAAA,aAkBAhoL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,UAAA44K,EAAA,aAiBAhoL,sBAAA,GAAAA,uBAAA,aAAAorL,GAKAprL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,WAAA44K,EAAA,aAiBAhoL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,WAAA44K,EAAA,aAcAhoL,sBAAA,GAAAA,uBAAA,aAAAqrL,GAKArrL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgP,KAAApC,UAAA,SAAA44K,EAAA,aAYFhoL,sBAAA,GAAAA,uBAAA,WAAAwC,EAAAuiL,SAAA5qL,QAKqB6F,+CAAA,UAAAwC,EAAAuiL,UASd/kL,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAyI,GAAAu/K,EAAA3oF,WAAA,IAAA78F,EAAAuiL,SAAA5qL,SAED6F,wBACAA,uBADA,UAAAwC,EAAAsO,MAAAyW,IACAvnB,CADqB,OAAAwC,EAAAsO,MAAA8qD,QAS5B57D,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAuiL,SAAA5qL,QAAAqI,EAAA4jL,cAagBpmL,sBAAA,GACAA,uBADA,OAAAwC,EAAAgP,KACAxR,CADa,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,yYEtM7Ctb,2BAAA,sBAAAA,wBAAA,KAIEA,sBAAA,cAAuCA,6EAmBrCA,sBAAA,oEAMoBA,uBALA,mBAKAA,CALsB,eAKtBA,CAJkB,qBAIlBA,CAHyB,OAAAM,EAAA+K,YAGzBrL,CAFoB,YAAAM,EAAAm5E,UAEpBz5E,CADuB,yCAN7CA,oCAAA,GACEA,uBAAA,EAAAsrL,GAAA,iIAjBJtrL,2BAAA,gBAUUA,uBAFA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EAExC3J,CAFyC,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC5BM,EAAAikC,UAAS,EACtBvkC,CADuB,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACJM,EAAAmL,gBAAA9B,GAAuB,GAClD3J,sBAAA,wBAKAA,uBAAA,EAAAurL,GAAA,sBAUFvrL,uEAnBUA,uBANA,OAAAM,EAAAwpL,SAMA9pL,CANiB,UAAAM,EAAAsL,QAMjB5L,CALmB,qBAKnBA,CAJwB,YAAAM,EAAAm5E,UAIxBz5E,CAHuB,QAAAM,EAAAgjF,MAGvBtjF,CAFe,iBAOLA,wBAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAA0K,UAEzBhL,CADuB,eAAAM,EAAAwL,cAG1B9L,+CAAA,OAAAM,EAAA+K,cCeX,MAAOmgL,WAA6BnK,GAgBxCxiL,YACUoO,EACAquG,EACA10F,EACAwJ,EACAuB,EACA5kB,EACAw7K,EACAkD,EACAnF,EACmBhF,GAE3Bl0K,MAAMk0K,GAXEviL,KAAAkO,qBACAlO,KAAAu8G,aACAv8G,KAAA6nB,eACA7nB,KAAAqxB,sBACArxB,KAAA4yB,aACA5yB,KAAAgO,eACAhO,KAAAwpL,kBACAxpL,KAAA0sL,uBACA1sL,KAAAunL,iBAxBVvnL,KAAA+qL,SAAkC,GAIlC/qL,KAAAiM,UAAY,IAAIqC,IAEhBtO,KAAA06E,UAAY,CACV,qBAAsB,SACtB,sBAAuB,UACvB,sBAAuB,WAEzB16E,KAAAukF,MAAyB,CAAC,CAAEp1E,KAAM,SAAUi+E,IAAK0B,KAAgBQ,OAiB/DtvF,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB89B,WAC3D,MAAMggJ,EAAoB1gL,IACxBA,GAAUmc,SAAWnc,GAAUmc,QAAQ1Z,QAA6C,YAAnCzC,GAAUmc,QAAQ1Z,OAAO2b,MAC5ErqB,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZyb,KAAMvW,KAAMwW,IACZC,WAAYA,IAAMzoB,KAAK4yB,WAAWG,YAClCrK,aAAezc,KAAiCA,GAAU0c,mBAC1DvuB,KAAM4F,KAAKgO,aAAakS,QAE1B,CACEpT,WAAY,SACZ4b,aAAezc,IACbA,GAAU0c,oBAAsBgkK,EAAiB1gL,IACnDgU,QAAUhU,KACPA,GAAU0c,oBACX1c,GAAUmc,QAAQuxD,aACjB1tE,GAAUmc,QAAQuxD,aAAegzG,EAAiB1gL,MAClD0gL,EAAiB1gL,IACpBsc,KAAMvW,KAAM++B,KACZtoB,WAAYA,IAAMzoB,KAAK4yB,WAAW03F,YAAYtqH,KAAKiM,UAAUmc,QAAQgC,IACrEhwB,KAAM4F,KAAKgO,aAAa26D,UAE1B,CACE77D,WAAY,SACZyb,KAAMvW,KAAM6W,KACZH,aAAezc,IACbA,GAAU0c,qBAAuBgkK,EAAiB1gL,IACpDgU,QAAUhU,KACPA,GAAU0c,oBACX1c,GAAUmc,QAAQuxD,aACjB1tE,GAAUmc,QAAQuxD,cAAgBgzG,EAAiB1gL,KACpD0gL,EAAiB1gL,IACnBwc,WAAYA,IAAMzoB,KAAK4yB,WAAWQ,QAAQpzB,KAAKiM,UAAUmc,QAAQgC,IACjEhwB,KAAM4F,KAAKgO,aAAauR,MAE1B,CACEzS,WAAY,SACZyb,KAAMvW,KAAMqqF,MACZ3zE,aAAezc,IACbA,GAAU0c,qBAAuBgkK,EAAiB1gL,IACpDgU,QAAUhU,KACPA,GAAU0c,oBACX1c,GAAUmc,QAAQuxD,aAClBgzG,EAAiB1gL,IACnB+c,MAAOA,IAAMhpB,KAAKiuC,gBAClB7zC,KAAM4F,KAAKgO,aAAa46D,SAG5B5oE,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,cACN2F,KAAM,KACNC,SAAU,GAEZ,CACEhV,KAAMoP,2BACN2F,KAAM,iBACNC,SAAU,EACV+Z,mBAAoBC,IAAa4iE,OAEnC,CACE5xF,KAAMoP,sBACN2F,KAAM,YACNC,SAAU,GAEZ,CACEhV,KAAMoP,mBACN2F,KAAM,WACNH,KAAMhP,KAAKu8G,YAEb,CACEniH,KAAMoP,mBACN2F,KAAM,YACNH,KAAMhP,KAAKu8G,YAEb,CACEniH,KAAMoP,gBACN2F,KAAM,SACNH,KAAMhP,KAAKu8G,YAEb,CACEniH,KAAMoP,kBACN2F,KAAM,eACNga,mBAAoBC,IAAauxD,aAGvC,CAEAn1C,UACExlC,KAAKuiL,kBAAkBv1I,yBAAyB,KAC9ChtC,KAAKuiL,kBAAkB50I,cAAch/B,UAClCo8K,IACC/qL,KAAK+qL,SAAWA,EAChB,MAAM6B,EAAiB7B,EAAS1mK,OAC7B2pB,GAA0D,YAAzBA,EAAQt/B,OAAO2b,OAEnDrqB,KAAKwtC,UAAUo/I,EAAc,EAE/B,KACE5sL,KAAKuiL,kBAAkBn1I,2BAAyB,EACjD,EAGP,CAEA1gC,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAuhC,UAAUu9I,GACR,MAAMl9I,EAAQ7tC,KAAK0sL,qBAAqB9+I,WACxCm9I,EAAS/jL,QAASgnC,IAChBA,EAAQg4I,SAASh/K,QAAS8+K,IACxB9lL,KAAK6tC,MAAQ7tC,KAAKunL,eAAerB,gBAAgBJ,EAASj4I,GAC1D,MAAMg/I,EAAuB,GAC7B,UAAW9oJ,KAAQ/jC,KAAK6tC,MACtBg/I,EAAW3wL,KAAK6nC,EAAK3pC,MAEvB4zC,EAAQ8+I,eAAiBD,GAC1B,EAEL,CAEA5+I,gBACE,MAAM7jB,EAAKpqB,KAAKiM,UAAUmc,QAAQgC,GAC5B2iK,EAAcvjL,mBACdwjL,EAAkB,aACxBhtL,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB6hK,EACjB5hK,UAAW,CAACf,GACZ+oC,kBAAmBnzD,KAAKgO,aAAa46D,OACrCx9C,uBAAwBA,IACtB,IAAI0kB,aAAYC,IACd/vC,KAAKuiL,kBAAkBt0I,cAAc7jB,GAAIzb,UACvC,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjB,GAAGjyB,KAAKwpL,gBAAgBv7G,WAAW8+G,KAAe3iK,SAClDwP,OACAA,EACAozJ,EAAe,EAGlBrjK,IACCA,EAAK0/E,YAAiB2jF,EACtBj9I,EAASxuB,MAAMoI,EAAI,EAErB,KACEomB,EAAS3qB,WACTplB,KAAKwlC,SAAO,EACb,IAIX,iDAzLWinJ,IAAoBxrL,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,IAAA/kB,8BA0BrBqrC,MAAiB,4DA1BhBmgJ,GAAoBrjL,UAAA,uBAAAyd,SAAA,CAAA5lB,+BARpB,CACT,CAAEyO,QAASC,IAAmBC,SAAU,IAAID,IAJ/B,wBAKb25K,KACDroL,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WD9BkB5C,sLAEnB,qCAA6B,mrBAN/BvI,sBAAA,wBAQAA,uBANA,EAAAgsL,GAAA,uBAMAhsL,CAJqB,EAAAisL,GAAA,0BAFJjsL,+CAAA,QAAAwC,EAAAg/K,0BAMNxhL,+CAAA,OAAAwC,EAAAg/K,sFEFL,MAAO0K,GAGXrtL,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,eAEyB,CAEvCouK,YACE,OAAOptL,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAKgf,aAC/B,CAEAyE,OAAOA,GAAkB,GACvB,MAAMtoB,EAAO,CAAEsoB,OAAQA,GACvB,OAAIA,IACFtoB,EAAKkyL,aAAkB,eAElBrtL,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAKgf,MAAO7jB,EACtC,iDAfWgyL,IAAgBlsL,qBAAAC,cAAA,+DAAhBisL,GAAgBhsL,QAAhBgsL,GAAgB/rL,UAAAC,WAFf,QAAM,ECCd,MAAOisL,GAHbxtL,cAIEE,KAAA05E,SAAU,EAGV15E,KAAA+H,OAAgC,IAAI+B,eAEpCyjL,cAAc7zG,GACZ15E,KAAK05E,QAAUA,EACf15E,KAAK+H,OAAOmC,KAAKwvE,EACnB,iDATW4zG,GAA4B,+DAA5BA,GAA4BnsL,QAA5BmsL,GAA4BlsL,UAAAC,WAF3B,QAAM,kECoBRJ,2BAAA,SACEA,mBAAA,6BAAsBA,2BAAA,OAAGA,mBAAA,aAAOA,2BAAIA,mBAAA,cAAQA,2BAAA,OAAGA,mBAAA,gBAAUA,2BAAKA,mBAAA,0BAC9DA,2BAAA,eAEQA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAg9J,cAAc,wDAAuD,GAFtFvsL,mBAAA,MAIFA,qDAgIAA,oCAAA,GACAA,2BAAA,YACEA,oCAAA,GAAAA,mBAAA,0CACAA,2BAAA,eAAAA,mBAAA,MACFA,6BAEEA,2BADF,WACEA,CAD0B,cAC1BA,mBAAA,MAEmBA,2BACnBA,2BAAA,YACEA,sBAAA,eAMJA,6BAEEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,OAEuBA,2BACvBA,2BAAA,aACEA,sBAAA,eAOJA,6BAEEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,OAEwBA,2BACxBA,2BAAA,aACEA,sBAAA,eAOJA,yFAgBIA,2BAAA,aAAAA,mBAAA,MAE0EA,4FA/MhFA,2BANN,QAMMA,CANiB,cAMjBA,CAFa,WAEbA,CADgB,YAChBA,mBAAA,KAC8DA,2BAE5DA,2BADF,WACEA,CADqB,OACrBA,wBAAA,KAK+BA,sBAJmD,OAInDA,CAJwD,UAIxDA,CAHgE,QAGhEA,CAD4C,QAC5CA,CADiD,QAKxCA,mDACxCA,uBAAA,GAAAwsL,GAAA,eAOAxsL,2BAAA,aAAAA,mBAAA,MAAqBA,2BACrBA,2BAAA,QAAAA,mBAAA,MACsBA,2BAIpBA,2BADF,YACEA,CAD0B,eAGxBA,oCAAA,IAAAA,mBAAA,0CACAA,2BAAA,gBACEA,oCAAA,IAAAA,mBAAA,0CAEEA,2BADF,QACEA,CADE,SACFA,mBAAA,MAAgCA,2BAChCA,2BAAA,SAAAA,mBAAA,MAAoFA,2BACpFA,2BAAA,SAAAA,mBAAA,OAA8CA,2BAC9CA,2BAAA,SAAAA,mBAAA,OAAgEA,2BAChEA,2BAAA,SAAAA,mBAAA,OAGNA,iCAEEA,2BADF,YACEA,CAD6B,aAM3BA,sBAJA,cAIAA,CADuC,eAK7CA,+BAIEA,2BADF,YACEA,CAD0B,eAGxBA,oCAAA,IAAAA,mBAAA,2CACAA,2BAAA,gBACEA,oCAAA,IAAAA,mBAAA,2CAEEA,2BADF,QACEA,CADE,SACFA,mBAAA,OAAuBA,2BACvBA,2BAAA,SAAAA,mBAAA,OAA8BA,2BAC9BA,2BAAA,SAAAA,mBAAA,OAA2DA,2BAC3DA,2BAAA,SAAAA,mBAAA,OAGNA,iCAEEA,2BADF,YACEA,CAD6B,aAM3BA,sBAJA,cAIAA,CADuC,eAK7CA,+BAIEA,2BADF,YACEA,CAD0B,eAGxBA,oCAAA,IAAAA,mBAAA,2CACAA,sBAAA,mBAGFA,2BAEEA,2BADF,YACEA,CAD6B,aAM3BA,sBAJA,cAIAA,CADwC,eAK9CA,+BAIEA,2BADF,YACEA,CAD0B,eAGxBA,oCAAA,IAAAA,mBAAA,2CACAA,2BAAA,gBACEA,oCAAA,IAAAA,mBAAA,2CAEEA,2BADF,QACEA,CADE,SACEA,mBAAA,0BAAmBA,2BACvBA,2BAAA,SAAIA,mBAAA,4BAGVA,iCAGIA,2BAFJ,YAEIA,CAF2B,YAE3BA,CAD0C,eAKnCA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAk9J,cAAa,GAJ7BzsL,2BAKAA,sBAAA,eAINA,+BAIEA,2BADF,YACEA,CAD0B,eAGxBA,oCAAA,IAAAA,mBAAA,2CACAA,2BAAA,gBACEA,oCAAA,IAAAA,mBAAA,2CAEJA,6BAEEA,2BADF,YACEA,CAD6B,aAM3BA,sBAJA,cAIAA,CADsC,eAK5CA,+BAEAA,uBAAA,GAAA0sL,GAAA,wBA4CA1sL,2BAAA,aAAAA,mBAAA,OAA8BA,2BAE5BA,2BADF,aACEA,CAD0B,gBAGxBA,oCAAA,KAAAA,mBAAA,4CACAA,2BAAA,iBAAAA,mBAAA,QAEFA,6BACAA,2BAAA,cACEA,sBAAA,gBAKAA,uBAAA,IAAA2sL,GAAA,eAIJ3sL,6BAEEA,2BADF,aACEA,CAD0B,gBAGxBA,oCAAA,KAAAA,mBAAA,4CAEEA,2BADF,gBACEA,CADS,SACTA,mBAAA,QAEuBA,2BACvBA,2BAAA,SAAAA,mBAAA,QAEJA,+BACAA,2BAAA,cACEA,sBAAA,gBAMJA,6BACAA,sBAAA,UACAA,2BAAA,SAAAA,wBAAA,QAAQA,sBAAA,SAC6CA,wBACvDA,6BAGIA,2BAFJ,aAEIA,CAFqB,aAErBA,CADmC,iBAG3BA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA/gB,OAAM,GACrBxO,oCAAA,KAAcA,mBAAA,yCAM1BA,+GAvPQA,+CAAA,YAAAuvB,EAAA4/G,YAIQnvI,sBAAA,GAAAA,sBAAAuvB,EAAArmB,iCAOkClJ,sBAAA,GAAAA,sBAAAuvB,EAAAq9J,UAAA5sL,CAIFuvB,EAAAs9J,4CAClC7sL,+CAAA,OAAAuvB,EAAAu9J,eAsIS9sL,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAAw9J,iBA2DJ/sL,sBAAA,IAAAA,uBAAA,OAAAuvB,EAAA4/G,WAAA//H,UAAA,WAAAovD,EAAA,QAgCOx+D,sBAAA,IAAAA,8BAAAuvB,EAAAxiB,aAAA67D,uEAepB5oE,2BANN,QAMMA,CANiB,cAMjBA,CAFa,WAEbA,CADgB,YAChBA,mBAAA,MACwDA,2BAIpDA,2BAHJ,WAGIA,CAHmB,WAGnBA,CAD0B,cAC1BA,wBAAA,MAGAA,sBAAA,mBAGAA,mDACAA,2BAAA,aACEA,sBAAA,eAMJA,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,wBAAA,OAGEA,2BAAA,mBACoEA,sBAAA,SAEpEA,2BACFA,mDACAA,2BAAA,aACEA,sBAAA,kBAMJA,6BAGIA,2BAFJ,YAEIA,CAFwB,YAExBA,CAD8B,aAM5BA,sBAHA,2BAGAA,CADqB,oCAK3BA,+BAKIA,2BAFJ,YAEIA,CAFwB,YAExBA,CAD8B,aAE5BA,sBAAA,eAKAA,2BAAA,eAAAA,wBAAA,OAEmEA,sBAAA,WAAmGA,wBAI9KA,mCAGIA,2BAFJ,YAEIA,CAFqB,YAErBA,CADmC,+BAEbA,uBADA,+BAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,0BAAA,UAAAA,wBAAqBuvB,EAAAuD,WAAU,EAC/B9yB,CADgC,6BAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,0BAAA,UAAAA,wBACbuvB,EAAAs1B,OAAM,GAQzD7kD,kFAlFQA,+CAAA,YAAAuvB,EAAAy9J,aAIQhtL,sBAAA,GAAAA,sBAAAuvB,EAAArmB,iCA0CkBlJ,sBAAA,IAAAA,uBAAA,aAAAuvB,EAAA09J,QA6BFjtL,sBAAA,IAEAA,uBAFA,OAAAuvB,EAAAy9J,YAEAhtL,CAFoB,aAAAuvB,EAAAxiB,aAAAu6D,OAEpBtnE,CADkC,aAAAuvB,EAAAxiB,aAAA87D,iCAhVtE7oE,2BAAA,YAEEA,oCAAA,MA+PEA,uBA7PA,EAAAktL,GAAA,eA6PAltL,CA7PuB,EAAAmtL,GAAA,mDAoV3BntL,qEAtVgBA,+CAAA,WAAAuvB,EAAArmB,MAENlJ,+CAAA,kBA6PAA,+CAAA,mBC3OJ,MAAOotL,WAA2B9wK,KA4BtCzd,YACSkO,EACC8P,EACAu7B,EACAhoB,EACA9c,EACA+5K,EACAC,GAERlgL,QAROrO,KAAAgO,eACChO,KAAA8d,cACA9d,KAAAq5C,mBACAr5C,KAAAqxB,sBACArxB,KAAAuU,SACAvU,KAAAsuL,mBACAtuL,KAAAuuL,+BAjCVvuL,KAAAwuL,cAAe,EAEfxuL,KAAAkD,QAAkB,GAClBlD,KAAAyuL,UAAoB,GACpBzuL,KAAA0uL,WAAqB,GAErB1uL,KAAA2uL,eAAiB,CACf,gBACA,gBACA,iBACA,gBACA,eACA,WACA,QACA,UACA,cACA,gBAEF3uL,KAAA4uL,kBAAoB,CAAC,UAAW,cAAe,gBAC/C5uL,KAAAkuL,YAAiBt0J,EACjB55B,KAAA6uL,cAAmBj1J,EACnB55B,KAAA6tL,UAAY,GACZ7tL,KAAA8tL,gBAAkB,GAClB9tL,KAAAmK,KAAO,CAaP,CAEAsE,WACE,MAAMmjB,EAAc,CAClB5xB,KAAKq5C,iBAAiB1S,WAAW,aACjC3mC,KAAKq5C,iBAAiB5S,UAAU,eAElC5U,cAAmBD,GAAajjB,UAC7Bgb,IACC,MAAM+kK,EAAa/kK,EAAK,GACxB3pB,KAAK+tL,cAAgBW,EAAW92J,QAChC53B,KAAK6tL,UAAYa,EAAW1vK,IAC5Bhf,KAAK8tL,gBAAkBY,EAAWI,WAClC9uL,KAAKguL,gBAAkBU,EAAWK,cAClC/uL,KAAKkD,QAAUiP,SAAOwX,EAAK,GAAI3pB,KAAK2uL,gBACpC3uL,KAAK0uL,WAAav8K,SAAOu8K,EAAY1uL,KAAK2uL,gBAC1C3uL,KAAKgvL,mBACLhvL,KAAKowI,WAAWzwH,SAAS3f,KAAK0uL,YAC9B1uL,KAAKwgB,cAAY,EAElB+nI,IACCvoJ,KAAKygG,cAAY,EAGvB,CAEQuuF,mBACN,MAAM12H,EAAiB,GACvBnmD,YAAUF,OAAOpJ,OAAO7I,KAAKkD,SAAW4tC,IACtCwnB,EAAexnB,EAAO12C,MAAQ,CAAC02C,EAAOshI,cAAepyK,KAAK+xI,cAAcjhG,GAAO,GAEjF9wC,KAAKowI,WAAapwI,KAAK8d,YAAYqZ,MAAMmhC,EAC3C,CAEQ22H,SAAS1sK,EAAajiB,GAG5B,IAAa,WAARiiB,GAA4B,WAARA,IAAqB5iB,MAAMmzD,QAAQxyD,GAAQ,CAClE,MAAMwF,EAAW,GACjB,QAAS7J,EAAI,EAAGA,EAAIqE,EAAMlF,OAAQa,IAChC6J,EAAS5J,KAAK++C,KAAKC,UAAU56C,EAAMrE,KAErC,OAAO6J,CACT,CAEA,OAAOxF,CACT,CAEA4uL,aAAahB,GACX,OAAOjzI,KAAKC,UAAUgzI,EAAQluL,KAAKivL,SAAU,EAC/C,CAEQE,eACN,IAAIp+I,EAAO,GACXA,EAAOkK,KAAKy4B,MAAMz4B,KAAKC,UAAUl7C,KAAKkuL,SACtC,MAAMkB,EAAY,CAChB,gBACA,iBACA,eACA,UACA,sBACA,UACA,aACA,iBAEF,QAASnzL,EAAI,EAAGA,EAAImzL,EAAUh0L,OAAQa,IAAK,CACzC,MAAMsmB,EAAM6sK,EAAUnzL,GAClBsmB,KAAOwuB,EAAKm9I,eACPn9I,EAAKm9I,OAAU3rK,EAE1B,CACA,OAAO04B,KAAKC,UAAUnK,EAAM,KAAM,EACpC,CAEAs+I,iBAAiBnB,GACf,IAAIn9I,EAAO,GACXA,EAAOkK,KAAKy4B,MAAMz4B,KAAKC,UAAUgzI,IACjC,MAAMkB,EAAY,CAChB,gBACA,iBACA,eACA,UACA,sBACA,UACA,aACA,iBAEF,QAASnzL,EAAI,EAAGA,EAAImzL,EAAUh0L,OAAQa,IAAK,CACzC,MAAMsmB,EAAM6sK,EAAUnzL,GAClBsmB,KAAOwuB,UACFA,EAAKxuB,EAEhB,CACA,OAAO04B,KAAKC,UAAUnK,EAAM,KAAM,EACpC,CAEQu+I,oBACN,MAAMl+K,EAAW,CACf88K,OAAQluL,KAAKmvL,eACbN,SAAU7uL,KAAK6uL,SACfL,aAAc,CAACxuL,KAAKwuL,aAAcl7K,aAAW+gD,eAE/Cr0D,KAAKiuL,YAAcjuL,KAAK8d,YAAYqZ,MAAM/lB,EAC5C,CAEQ2gI,cAAcjhG,GACpB,MAAMj1C,EAAS,GACf,OAAQi1C,EAAO3qC,MACb,IAAK,MACHtK,EAAOK,KAAKoX,aAAWC,UACvB,MACF,IAAK,MACCpB,aAAW2+B,EAAOs1B,MACpBvqE,EAAOK,KAAKoX,aAAW4+J,UAAUphI,EAAOs1B,MAEtCj0D,aAAW2+B,EAAO7xC,MACpBpD,EAAOK,KAAKoX,aAAW6+J,UAAUrhI,EAAO7xC,MAI9C,OAAOpD,CACT,CAEQ0zL,uBAAuBC,EAAwB,IAErD,MAAMC,EAA8BzvL,KAAKkuL,OAAOA,OAAUwB,mBACpDC,EAAkB,GACxB,UAAWC,KAAWH,EAAmB,CAEnCD,EADQ,WAAWI,MAErBD,EAAgBzzL,KAAK0zL,EAEzB,CACA5vL,KAAKkuL,OAAOA,OAAU2B,SAAcF,EAEpC,UAAWG,KAAoB9vL,KAAK4uL,kBAClC5uL,KAAKkuL,OAAOA,OAAU4B,GAAoBN,EAAcM,EAE5D,CAEQ1C,YACNptL,KAAKwgG,eAELxgG,KAAKsuL,iBAAiBlB,YAAYz+K,UAC/Bgb,IACC3pB,KAAKkuL,OAASvkK,EACd3pB,KAAK6uL,SAAWllK,EAAKukK,OAAU6B,UAC/B/vL,KAAKuvL,uBAAuBvvL,KAAKyuL,WACjCzuL,KAAKsvL,oBACLtvL,KAAKwgB,eACLxgB,KAAKmK,QAENo+I,IACCvoJ,KAAKygG,cAAY,EAGvB,CAEAitF,cACE1tL,KAAKguL,iBAAmBhuL,KAAKguL,eAC/B,CAEAgC,cACEhwL,KAAKyuL,UAAY,GACjB,UAAW39I,KAAU7+B,OAAOpJ,OAAO7I,KAAKkD,SAAU,CAChD,MAAM0Q,EAAU5T,KAAKowI,WAAW19H,IAAIo+B,EAAO12C,MAE3C,IAAIwZ,EAAQtC,MAIV,YADAtR,KAAKowI,WAAW7qH,UAAU,CAAEE,gBAAgB,IAF5CzlB,KAAKyuL,UAAU39I,EAAO12C,MAAQwZ,EAAQtT,KAK1C,CAEA,IAAKN,KAAKyuL,UAAUM,cAClB,UAAWe,KAAoB9vL,KAAK4uL,kBAClC5uL,KAAKyuL,UAAUqB,GAAoB,GAGvC9vL,KAAKotL,WACP,CAEAI,cAAc5uJ,EAAkB,KAAMqxJ,EAAyB,MAC7DjwL,KAAKsuL,iBAAiB7qK,QAAO,GAAO9U,UAAU,KAC5C3O,KAAKuuL,6BAA6BhB,eAAc,GAC5C3uJ,GACF5+B,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAAS2M,GAEtDqxJ,EACFA,IAEAjwL,KAAKuU,OAAOC,SAAS,CAAC,IAAG,EAG/B,CAEA/E,OACEzP,KAAKgwL,aACP,CAEAlqI,OACE9lD,KAAKmK,MACP,CAEA+lL,mBACE,MAAMV,EAAgB,GACtBr9K,mBAAUnS,KAAK2uL,eAAiBwB,IACzBh+K,YAAUnS,KAAK0uL,WAAWyB,GAAcnwL,KAAKyuL,UAAU0B,MAC1DX,EAAcW,GAAenwL,KAAKyuL,UAAU0B,GAAW,GAGpDX,CACT,CAEAz7J,WACE,MAAMy7J,EAAgBxvL,KAAKkwL,mBACrBt+J,EAAc,CAClB5xB,KAAKsuL,iBAAiB7qK,SACtBzjB,KAAKq5C,iBAAiB3S,aAAa,YAAa8oJ,KAGlD39J,cAAmBD,GAAajjB,UAC9B,KACE3O,KAAKuuL,6BAA6BhB,eAAc,GAChDvtL,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,gFAA+E,EAGnF,KACExJ,KAAKuuL,6BAA6BhB,eAAc,GAChDvtL,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X;gCAIFxJ,KAAKiuL,YAAY1oK,UAAU,CAAEE,gBAAgB,GAAM,EAErD,KACEzlB,KAAKyuL,UAAY,GACjBzuL,KAAKuU,OAAOC,SAAS,CAAC,IAAG,EAG/B,iDA3RW65K,IAAkBptL,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,UAAAjI,8BAAAkI,IAAAlI,8BAAA8kB,IAAA,4DAAlBsoK,GAAkBjlL,UAAA,mBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,qIDyEE5C,qJApFbA,gFAAK,wEAELA,wPAC0E,4IACrD,iDAA8D,qMAErB,gHAAK,8IAC5C,wCAAM,oZAGiD,sCACpF,yFAQWA,qFACLA,iNAOeA,kFAEEA,0HAERA,oGACAA,wJACAA,kHACAA,qIACAA,6KAoBMA,mFAEEA,wHAERA,4FACAA,mGACAA,gIACAA,+IAoBMA,oFAqBAA,kFAEEA,+IAwBFA,kFAEEA,gIA2DZA,+FAIUA,sFACHA,wNAiBGA,mFAETA,wQAGAA,kKAYNA,2EAAA,2CAAQ,+KApNDA,wFA2JSA,mGAaAA,+FArCHA,iGACHA,gKAKJA,qFAYAA,yFAaAA,0FA2BCA,6IAuDIA,8KAkBEA,+HA1BbA,gFAAK,mEAMsBA,qFACjC,yCAEA,6CAeiCA,0FAC/B,yCACoE,2IACa,4CACjF,6CAkCcA,kIAAuD,wFAA+F,omGAtUpLvI,uBAAA,EAAAmvL,GAAA,mBACMnvL,uBAAA,gBAAAwC,EAAA4iB,6VEWIplB,2BAAA,cACoCA,mBAAA,GAASA,mFAArCA,uBAAA,QAAAM,EAAA8uL,aAAA1mL,IAA4B1I,sDAAA0I,ICJxC,MAAO2mL,GAaXxwL,YAAoBywL,GAAAvwL,KAAAuwL,yBAXpBvwL,KAAAqwL,aAA0C,CACxC,MAAO,IACP,OAAQ,IACR,OAAQ,KACR,OAAQ,IACR,QAAS,IACT,QAAS,KACT,QAAS,KAEXrwL,KAAAwwL,aAAev+K,OAAOC,KAAKlS,KAAKqwL,aAEqC,CAErE5hL,WACEzO,KAAKywL,iBAAmBzwL,KAAKuwL,uBAAuBnvE,sBAAwB,GAC9E,CAEAsvE,sBAAsBvvE,GACpBnhH,KAAKuwL,uBAAuBxvE,mBAAmBI,EACjD,iDArBWmvE,IAAwBrvL,8BAAAC,MAAA,4DAAxBovL,GAAwBlnL,UAAA,0BAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDHjB5C,8ZAFZvI,2BAJR,UAIQA,CAJqB,UAIrBA,CAHW,SAGXA,CAFE,UAEFA,CADqC,aACrCA,mBAAA,KAEmBA,2BACnBA,2BAAA,cAGQA,uBAAA,kBAAA2J,GAAA,OAAUnH,EAAAitL,sBAAA9lL,EAAAvD,OAAA/G,MAA0C,GACpDW,6BAAA,yBAAA2J,GAAA3J,sCAAAwC,EAAAgtL,iBAAA7lL,KAAAnH,EAAAgtL,iBAAA7lL,IAAA,GACN3J,uBAAA,EAAA0vL,GAAA,gBAMV1vL,0CAPgBA,sBAAA,GAAAA,6BAAA,UAAAwC,EAAAgtL,kBACkBxvL,+CAAA,UAAAwC,EAAA+sL,4NEZtBI,uCCMN,MAAOC,GAGX/wL,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAA8gC,QAAU,cAE6B,CAEvCgwJ,WAAWxhK,EAAqB,IAC9B,OAAOtvB,KAAK8rB,KAAKpZ,IAAS,GAAG1S,KAAK8gC,kBAAmB,CACnDthB,OAAQ,CAAEsP,WAAYQ,GACtB6Q,QAAS,CAAEC,OAAQ,uCAEvB,iDAVWywJ,IAAe5vL,qBAAAC,cAAA,+DAAf2vL,GAAe1vL,QAAf0vL,GAAezvL,UAAAC,WAFd,QAAM,GDJpB,SAAYuvL,GACVA,EAAA90F,WAAA,qBACA80F,EAAA70F,YAAA,uBACA60F,EAAA50F,UAAA,sBACF,CAJA,CAAY40F,QAAW,qBEQjB,MAAOG,GACXjxL,YAAoB2C,GAAAzC,KAAAyC,WAAuB,CAE3C8F,UAAUjI,GACR,OAAO2R,OAAOC,KAAK0+K,IAAa1uL,SAAS5B,GACrC,CAAEmlE,MAAOzlE,KAAKyC,UAAUgC,cAAcmsL,GAAYtwL,KAClD,IACN,iDAPWywL,IAAe9vL,8BAAAC,KAAA,+EAAf6vL,GAAezjF,MAAA,2CCR5BrsG,+BAAA,6BAUQA,2BAAA,SACEA,mBAAA,GAEFA,8DAFEA,uDAAA,IAAA+vL,EAAA,IAAAC,EAAA,wCAFFhwL,2BAHJ,UAGIA,CAFwB,iBAExBA,CADY,OACTA,mBAAA,qBAAeA,2BAClBA,uBAAA,EAAAiwL,GAAA,aAKJjwL,+GALmCA,sBAAA,GAAAA,uBAAA,UAAAmP,EAAA+gL,iBAAAC,EAAA/rK,oCAOjCpkB,2BADF,QACEA,CADyC,kBAC3BA,mBAAA,GAChBA,uDADgBA,sBAAA,GAAAA,8BAAA,MAAAowL,EAAA,KAAAA,EAAAzyJ,oCAdhB39B,2BADF,OACEA,CADmC,gDAGnCA,mBAAA,GAAgBA,2BAAOA,mBAAA,GAA8BA,sBAAA,QAWrDA,uBAVA,EAAAqwL,GAAA,YAUArwL,CAT4B,EAAAswL,GAAA,aAY9BtwL,qDAfQA,gDAAA,0CAAAmwL,EAAApN,UADA/iL,uBAAA,UAAAA,wBAAA,IAAAmwL,EAAApN,WAEN/iL,sBAAA,GAAAA,+BAAA,IAAAmwL,EAAAjrL,KAAA,IAAuBlF,uDAAA,KAAAmwL,EAAA74E,QAAA35E,QAAA,KACjB39B,sBAAA,GAAAA,uBAAA,iCAAAmwL,EAAAjrL,MAUmBlF,+CAAA,gBAAAmwL,EAAA,KAAAA,EAAA/rK,mCAO3BpkB,oCAAA,GACEA,2BAAA,SAAAA,wBAAA,KACoDA,sBAA3C,QAA2CA,CAAL,UAAqDA,kIAAxFA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAA0G,EAAA2B,MAAA6nD,uCAFd34D,uBAAA,EAAAuwL,GAAA,+DAAevwL,uBAAA,OAAAmP,EAAAmvB,YAAA60D,IAAA7hE,OCbX,MAAOk/J,GAQX3xL,YAAoBoO,GAAAlO,KAAAkO,qBAJpBlO,KAAA+R,MAAQC,KAKNhS,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAsiL,iBAAiB9rK,GACf,OAAOA,EAAOnoB,IACXw0L,GAAkBA,EAAc9yJ,QAAQjiC,MAAM,aAAa,GAAGA,MAAM,QAAQ,GAEjF,iDAhBW80L,IAAqBxwL,8BAAAC,KAAA,4DAArBuwL,GAAqBroL,UAAA,uBAAA+C,OAAA,CAAAwlL,WAAA,cAAAnnL,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDerB5C,2EAAA,sCAAkC,4CAAS,mCAA0B,2RAzBlFvI,uBAAA,EAAA2wL,GAAA,sBACA3wL,2BAAA,QACEA,uBAAA,EAAA4wL,GAAA,YAkBF5wL,2BAEAA,uBAAA,EAAA6wL,GAAA,yBAAA7wL,6EAtBeA,uBAAA,mBAAA8wL,GAES9wL,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAkuL,mNEUhB1wL,2BAAA,uBAAAA,mBAAA,KAGiIA,mDAY3HA,2BAAA,eAAAA,mBAAA,KAEuBA,mDACvBA,2BAAA,eAAAA,mBAAA,KAEuCA,iCAD/BA,uBAAA,uCAERA,2BAAA,eAAAA,mBAAA,KAEmCA,iCAD3BA,uBAAA,0CAERA,2BAAA,eAC0BA,mBAAA,GAAaA,qDAA/BA,uBAAA,QAAA+wL,GAAkB/wL,sDAAA+wL,2BAE5B/wL,2BAAA,aAAAA,mBAAA,KAEkCA,sDAvBpCA,2BAFF,WAEEA,CAD0B,cAC1BA,mBAAA,KAGuBA,2BAErBA,2BADF,WACEA,CAD6B,eAc3BA,uBATA,EAAAgxL,GAAA,gBASAhxL,CAPa,EAAAixL,GAAA,gBAObjxL,CAJa,EAAAkxL,GAAA,gBAIblxL,CADa,EAAAmxL,GAAA,iBAGfnxL,2BACAA,uBAAA,EAAAoxL,GAAA,eAIJpxL,oGAxBSA,+CAAA,UAAAA,4BAAA,EAAAK,IAAAkvB,EAAA8hK,iBAQMrxL,sBAAA,GAAAA,uBAAA,cAAAuvB,EAAA+hK,UAGAtxL,+CAAA,cAAAuvB,EAAA+hK,UAAA,IAAA/hK,EAAA+hK,SAAAn3L,QAGA6F,+CAAA,cAAAuvB,EAAA+hK,UAAA/hK,EAAA+hK,SAAAn3L,OAAA,GAGmB6F,+CAAA,UAAAuvB,EAAA+hK,UAIvBtxL,+CAAA,OAAAuvB,EAAAgiK,YAAAniL,UAAA,oBAAAovD,EAAA,8EASLx+D,2BAJN,WAIMA,CAHsB,WAGtBA,CAF4B,WAE5BA,CAD0C,cAMnCA,uBAAA,mBAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAAiiK,WAAU,GAL1BxxL,2BAMAA,2BAAA,cAAAA,mBAAA,KAKNA,yDAcIA,2BAAA,aAAAA,mBAAA,MAEkCA,sDAXpCA,2BAFF,WAEEA,CADuC,cACvCA,mBAAA,KAEiBA,2BACjBA,2BAAA,YACEA,sBAAA,cAKAA,uBAAA,EAAAyxL,GAAA,eAIJzxL,oGAHWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAgiK,YAAAniL,UAAA,kBAAAovD,EAAA,cCvDb,MAAOkzH,GAUX7yL,YACSkO,EACCE,EACDk/G,EACCwlE,EACAvhK,GAJDrxB,KAAAgO,eACChO,KAAAkO,qBACDlO,KAAAotH,cACCptH,KAAA4yL,iBACA5yL,KAAAqxB,sBAVVrxB,KAAA+R,MAAQC,KAGRhS,KAAAsyL,gBAAiB,EASftyL,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB6lG,SAC7D,CAEAjmG,WAME,GALAzO,KAAKwyL,YAAc,IAAIr/K,KAAY,CACjC0/K,kBAAmB,IAAI1iE,cAAY,KAAM,CAAC78G,aAAWC,WACrDk/K,SAAU,IAAItiE,eAAY,GAC1B2iE,gBAAiB,IAAI3iE,cAAY,aAEbv2F,IAAlB55B,KAAKuyL,SAAwB,CACEvyL,KAAKwyL,YAAY9/K,IAAI,qBAC7BkP,kBACzB,MAAMmxK,EAAyB/yL,KAAKwyL,YAAY9/K,IAAI,mBACpDqgL,EAAuBpxK,cAAcrO,aAAWC,UAChDw/K,EAAuBlxK,wBACzB,CACF,CAEAmxK,eACE,MAAMpyF,EAAU5gG,KAAKwyL,YAAY7hL,SAAS,qBACpCigC,EAAQ5wC,KAAKwyL,YAAY7hL,SAAS,mBACxC3Q,KAAK4yL,eAAe73L,MAAM6lG,EAAShwD,GAAOjiC,UAAU,CAClDc,KAAMA,KACJzP,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,yCAAwC,EAG5C+X,MAAQA,IACNvhB,KAAKwyL,YAAYjtK,UAAU,CAAEE,gBAAgB,IAC7CzlB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,uCACA+X,EAAK,EAGT6D,SAAUA,KACRplB,KAAKotH,YAAYn0F,OAAK,GAG5B,CAEAw5J,WACEzyL,KAAKsyL,gBAAkBtyL,KAAKsyL,eAC5B,MAAMW,EAA2BjzL,KAAKwyL,YAAY9/K,IAAI,qBAChDqgL,EAAyB/yL,KAAKwyL,YAAY9/K,IAAI,mBAEhD1S,KAAKsyL,gBACPW,EAAyBhzK,UACzBgzK,EAAyBrxK,kBAEzBmxK,EAAuBpxK,cAAcrO,aAAWC,UAChDw/K,EAAuBlxK,2BAEvBoxK,EAAyBxvK,SACzBwvK,EAAyBtxK,cAAcrO,aAAWC,UAClD0/K,EAAyBpxK,yBAEzBkxK,EAAuBnxK,kBAE3B,iDA7EW+wK,IAA0B1xL,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,kBAAA/H,8BAAAgI,IAAAhI,8BAAAiI,KAAA,4DAA1BypL,GAA0BvpL,UAAA,2CAAAxP,MAAA8P,GAAAc,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,6BDlBhB5C,4FAaMA,yLAMPA,wFAQKA,uFAGAA,uGAGAA,mGAMJA,mGAgBGA,qFAUJA,kFASCA,6zCA5EvBvI,2BAAA,iBAEIA,oCADF,KACEA,CADgC,GAChCA,mBAAA,yCAAiDA,mBAAA,+CAGnDA,oCAAA,MAMIA,2BALF,cAKEA,CADe,YAqDbA,uBAnDA,EAAAiyL,GAAA,wBAmDAjyL,CAhDqB,GAAAkyL,GAAA,cAgDrBlyL,CA9C4B,GAAAmyL,GAAA,aA8C5BnyL,CAjB4B,GAAAoyL,GAAA,cAiC9BpyL,2BAGEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAuvL,eAAc,GAI7D/xL,mEAEJA,iCAxFUA,uBAAA,WAAAwC,EAAA2pH,aASAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA+uL,aAKevxL,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA6uL,gBAEXrxL,+CAAA,OAAAwC,EAAA8uL,UA6BAtxL,+CAAA,OAAAwC,EAAA8uL,UAmBAtxL,+CAAA,OAAAwC,EAAA6uL,iBAAA7uL,EAAA8uL,UAmBgBtxL,sBAAA,GACAA,uBADA,OAAAwC,EAAA+uL,YACAvxL,CADoB,aAAAwC,EAAAuK,aAAA29D,yUEnE5C,MAAO2nH,WAAuBx0J,KAmBlCh/B,YACUgsB,EACAua,EACAxe,GAERxZ,QAJQrO,KAAA8rB,OACA9rB,KAAAqmC,iBACArmC,KAAA6nB,eArBV7nB,KAAA8gC,QAAU,sBAEV9gC,KAAAuzL,uBAAyB,CACvB,MACA,MACA,QACA,MACA,MACA,MACA,aACA,gBACA,QACA,MAYF,CAEA7vK,OACE,OAAO1jB,KAAK8rB,KAAKpZ,IAAI1S,KAAK8gC,SAAS9xB,QACjC9R,OAAKysB,GACI3pB,KAAKwzL,4BAA4B7pK,IAG9C,CAIA6pK,4BAA4BC,GAC1B,IAAI7yF,EAAU,GACd5gG,KAAKqmC,eAAe13B,UAAW4pG,IAC7B3X,EAAU2X,EAAQ3X,QAAQx4F,QAAQ,gBAAiB,IAAIzL,MAAM,KAAK,EAAC,GAGrE,MAAM+2L,EAAqBD,EAAYlB,SAASluK,OAAQsvK,IACtD,MAAMC,EAAWhzF,EAAQjkG,MAAM,KACzBk3L,EAAWF,EAAch3L,MAAM,KACrC,OACEi3L,EAAS,KAAOC,EAAS,KAAOD,EAAS,GAAKC,EAAS,IAAMD,EAAS,GAAKC,EAAS,GAAC,GAGzFJ,SAAYlB,SAAWmB,EAAmB7rL,OACnC4rL,CACT,CAEA14L,MAAM6lG,EAAkBhwD,GACtB,OAAO5wC,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,gBAAiB,CAAE8P,MAAOA,EAAOgwD,QAASA,GAC1E,CAEA21E,QACE,OAAOv2K,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,gBAAiB,KAChD,CAEAgzJ,SACE,OAAO9zL,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,iBAAkB,KACjD,CAEAwG,OACE,OAAOtnC,KAAK8rB,KAAKgE,IAAI,GAAG9vB,KAAK8gC,eAAgB,KAC/C,CAEApyB,SACE,OAAO1O,KAAK8rB,KAAKpZ,IAA4B,GAAG1S,KAAK8gC,iBACvD,CAEAizJ,aACE,OAAK/zL,KAAKg0L,aACRh0L,KAAKg0L,WAAah0L,KAAK0jB,OAAO1U,QAC5BswB,OACGm0J,GAAuCzzL,KAAKi0L,oBAAsBR,EAAYlB,WAAS,EAE1Fj/E,eArFW,KAwFRtzG,KAAKg0L,UACd,CAEAE,oBACE,OAAOl0L,KAAK6nB,aAAagD,KAAK8nK,GAA4B,CACxDJ,SAAUvyL,KAAKi0L,qBAEnB,iDA1FWX,IAAcryL,qBAAAC,cAAAD,qBAAA8H,MAAA9H,qBAAA+H,MAAA,+DAAdsqL,GAAcnyL,QAAdmyL,GAAclyL,UAAAC,WAFb,QAAM,+CCZhBJ,2BAAA,QAAAA,mBAAA,KAGAA,sDAEEA,2BAAA,SAAAA,wBAAA,KAEEA,sBAAA,SAEFA,8FAFKA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,UACDxnD,sBAAA,MAAA+K,EAAAo3G,cAAA,KAAAp3G,EAAAo3G,cAAAX,gEATRxhH,oCAAA,GAKEA,uBAJA,EAAAkzL,GAAA,WAIAlzL,CAHS,EAAAmzL,GAAA,yBAAAnzL,oJADJA,wBAAwBA,uBAAxB,OAAAozL,EAAAC,UAAwBrzL,CAAA,WAAAszL,8BAFjCtzL,2BAAA,SACEA,uBAAA,EAAAuzL,GAAA,sBAaFvzL,+GAbiBA,wBAA8CA,uBAA9C,OAAAozL,EAAAC,WAAAD,EAAAI,YAA8CxzL,CAAA,WAAAyzL,mGAkB3DzzL,2BAAA,WACIA,uBAAA,mBAAAA,0BAAA21D,GAAA,MAAA5qD,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAA2oL,eAAc,GACzB1zL,sBAAA,SAEFA,gGAFKA,sBAAA,GAAAA,uBAAA,UAAA+K,EAAA+F,MAAAo3C,+BAJPloD,2BAAA,SAAAA,wBAAA,KAEEA,uBAAA,EAAA2zL,GAAA,YAKF3zL,wEALOA,sBAAA,GAAAA,uBAAA,OAAA4zL,EAAAtC,SAAAn3L,OAAA,8BAFP6F,uBAAA,EAAA6zL,GAAA,qFAAM7zL,uBAAA,OAAAA,wBAAA,IAAA+K,EAAA+oL,gBCFF,MAAOC,GAUXl1L,YACUm1L,EACA5uJ,EACAusJ,GAFA5yL,KAAAi1L,sBACAj1L,KAAAqmC,iBACArmC,KAAA4yL,iBAZV5yL,KAAAk1L,eAAyB,EAKjBl1L,KAAAm1L,KAAO,IAAIruG,eAEnB9mF,KAAA+R,MAAQC,IAML,CAEHvD,WACEzO,KAAKi1L,oBAAoBvmL,SAASC,UAAWD,IAC3C1O,KAAKk1L,cAAgBxmL,EAAOuB,UACxBjQ,KAAKk1L,eAAiBxmL,EAAO0mL,gBAAgBnlL,YAC/CjQ,KAAK+0L,aAAe/0L,KAAK4yL,eAAemB,aACxC/zL,KAAKq1L,eAAiBr1L,KAAK4yL,eAAelkL,SAAM,GAIpD1O,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7Bv4G,KAAKojH,cAAgB7K,EAAQqJ,gBAAgBv9F,OAAQ69F,GACnDA,EAAM9nH,KAAK8H,SAAS,qBACpB,EAAC,GAGT,CAEA8nB,cACEhqB,KAAKm1L,MAAMjrK,aACb,CAEAyqK,eACE30L,KAAKs1L,gBAAkBt1L,KAAK4yL,eAAesB,mBAC7C,iDAxCWc,IAAmB/zL,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,IAAA,4DAAnBgsL,GAAmB5rL,UAAA,oBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDZnB5C,gGAMLA,2EAAA,sCAA2C,kDAC/B,qCAShBA,2EAAA,2DAEE,wCAAwB,4DAE1B,0PAvBJvI,uBAAA,EAAAs0L,GAAA,2CAgBAt0L,uBAAA,EAAAu0L,GAAA,yBAAAv0L,6EAhB8CA,uBAAxC,OAAAA,wBAAA,IAAAwC,EAAA4xL,gBAAwCp0L,CAAX,WAAAyzL,kEEa7B,MAAOe,GA6CX31L,YAAoB2C,EAA8BC,GAA9B1C,KAAAyC,YAA8BzC,KAAA0C,gBAzClD1C,KAAA01L,cAAgB,EAEhB11L,KAAA21L,aAAe,EAMR31L,KAAA41L,qBAA8B,CACnC,CACExrK,GAAI,cACJ/mB,WAAWC,GACT,MAAMb,EAAY,IAAIwgD,KAChB4yI,EAAoB,+CAC1BzkE,YAAe0kE,KAAKC,OAASF,EAC7B,MAAMpyL,EAAMH,EAAMG,IAClB,IAAKH,EAAMJ,QAAQK,QAAQyyL,cAAgB1yL,EAAMf,KAAKu/D,SAAS,GAAGngE,MAChE,OAGF8B,EAAIG,OACJ,MAAMjC,EAAQ2B,EAAMf,KAAKu/D,SAAS,GAAGngE,MAAM,GAAGhF,MAAM,MAE9Cs5L,GAAW3yL,EAAMI,UAAU/H,KAAO2H,EAAMI,UAAU9H,OAAS,EAC3Ds6L,GAAW5yL,EAAMI,UAAUC,IAAML,EAAMI,UAAUyyL,QAAU,EACjE1yL,EAAI2yL,UAAY,SAChB3yL,EAAI4yL,aAAe,SAEnB5yL,EAAIqyL,KAAO,QAAQD,IACnBpyL,EAAI6yL,SAAS30L,EAAM,GAAIs0L,EAASC,EAAU,IAEtCv0L,EAAMvG,OAAS,IACjBqI,EAAIqyL,KAAO,QAAQD,IACnBpyL,EAAI8yL,UAAY9zL,EAAUgC,cAAc,uCACxChB,EAAI6yL,SAAS30L,EAAM,GAAIs0L,EAASC,EAAU,KAE5CzyL,EAAIc,SACN,IAKFvE,KAAKw2L,YAAc,CACjBrlE,UAAW,WACXzwH,OAAQ,GACRuC,QAAS,CACP,CACEtB,MAAO,KACPwD,gBAAiB,CACfnF,KAAKyC,UAAUgC,cAAc,0BAC7BzE,KAAKyC,UAAUgC,cAAc,gCAC7BzE,KAAKyC,UAAUgC,cAAc,2BAGjC,CACE9C,MAAO,KACPsC,YAAa,EACbkB,gBAAiB,CACfnF,KAAKyC,UAAUgC,cAAc,oBAC7BzE,KAAKyC,UAAUgC,cAAc,wBAInCvB,QAAS,CACPuzL,OAAQ,MACR1nC,OAAQ,CAAC,QAAS,WAAY,cAC9B2nC,YAAa,EACbnzL,QAAS,CACPyyL,aAAa,EACbtxL,OAAQ,CACNC,SAAS,EACTisH,SAAU,QACVlwH,OAAQ,CACNi2L,SAAU,GACVC,eAAe,EACfC,eAAiBvzL,IACf,IAAI5C,EAAS4C,EAAMf,KAAK7B,OAAOxF,MAAM,EAAG8E,KAAKw2L,YAAY91L,OAAOtF,QAChEsF,SAAO,GAAK,CACVkwD,KAAMpnD,kBAAkBlG,EAAMf,KAAKu/D,SAAS,GAAGv/D,KAAK,KACpDg0L,UAAWjzL,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,GAClDtB,YAAaP,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,IAElD7B,EAAMf,KAAKu/D,SAAS,GAAGv/D,MAAMnH,SAC/BsF,EAAO,GAAK,CACVkwD,KAAMpnD,qBAAqBlG,EAAMf,KAAKu/D,SAAS,GAAGv/D,KAAK,MACvDg0L,UAAWjzL,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,GAClDtB,YAAaP,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,IAEtDzE,EAAO,GAAK,CACVkwD,KAAMpnD,oBACJlG,EAAMf,KAAKu/D,SAAS,GAAGv/D,KAAK,GAAKe,EAAMf,KAAKu/D,SAAS,GAAGv/D,KAAK,MAE/Dg0L,UAAWjzL,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,GAClDtB,YAAaP,EAAMf,KAAKu/D,SAAS,GAAG38D,gBAAgB,KAGjDzE,KAIbkE,QAAS,CACPgzB,SAAS,EACT1yB,eAAe,EACfC,gBAAiBnF,KAAKyC,UAAUgC,cAAc,kCAC9CqyL,aAAc,EACdC,aAAc,GACdC,cAAe,MACfpmE,SAAU,UACVqmE,SAAU,GACVC,SAAU,GACV7yK,OAAS/e,GAC6B,IAA7BA,EAAY6xL,aAErB/xL,UAAW,CACTzD,MAAOA,CAACy/D,EAA2B7+D,KACjC,IAAIquD,EAAOruD,EAAK7B,OAAO0gE,EAAKl6D,OAC5B,OAAK0pD,EAAK1uD,SAAS,OACjB0uD,EAAO,GAAGA,MAASruD,EAAKu/D,SAASV,EAAK+1H,cAAc50L,KAAK6+D,EAAKl6D,YAEzD0pD,KAIbvrD,MAAO,CACLV,SAAS,KAKnB,CAEA8J,WACEzO,KAAKo3L,gBAAgBp3L,KAAKw2L,YAAax2L,KAAKuC,KAC9C,CAEAqE,cACE5G,KAAKo3L,gBAAgBp3L,KAAKw2L,YAAax2L,KAAKuC,KAC9C,CAEQ60L,gBAAgB9zL,EAA4Bf,GAClD,MAAM80L,EAA2C,IAApBr3L,KAAK21L,aAC5B2B,EAAwC,IAArBt3L,KAAK01L,cACxBz2L,EAA0B,iBAAbsD,EAAKtD,IAAmB6I,WAAWvF,EAAKtD,KAAOsD,EAAKtD,IACjE0iH,EAAkC,iBAAjBp/G,EAAKo/G,QAAuB75G,WAAWvF,EAAKo/G,SAAWp/G,EAAKo/G,QAC7E41E,EAAmBv3L,KAAKw3L,eAAev4L,EAAM0iH,EAAS1iH,GACtDw4L,EAAcz3L,KAAKw3L,eAAe71E,EAAS1iH,GAG/Ce,KAAKylE,MADH6xH,EAAmB,GAAKG,GAAeH,EAC5B,kBACJD,EAAuB,GAAKI,GAAeJ,EACvC,qBAEA,mBAGXC,EAAmB,GAAKD,EAAuB,EACjD/zL,EAAML,QAAQ,GAAGV,KAAO,CACtBnF,KAAK42F,MAAMqjG,GACXj6L,KAAK42F,MAAM52F,KAAK+B,IAAIk4L,EAAuBC,IAC3Cl6L,KAAK42F,MAAM,IAAMsjG,IAGnBh0L,EAAML,QAAQ,GAAGkC,gBAAgB,GAAKnF,KAAKyC,UAAUgC,cAAc,0BAGrEnB,EAAML,QAAQ,GAAGV,KAAO,CACtBk1L,EACAF,EACAv3L,KAAK0C,cAAc6F,UAAUhG,EAAKo/G,UAEpCr+G,EAAML,QAAQ,GAAGkC,gBAAgB,GAAKnF,KAAKyC,UAAUgC,cAAczE,KAAKylE,OACxEniE,EAAML,QAAQ,GAAGtB,MAAQ,CAAC,GAAG81L,UAAoBz3L,KAAK0C,cAAc6F,UAAUhG,EAAKtD,OACrF,CAEQu4L,eAAeE,EAAkBj+E,GACvC,OAAKtnG,aAAWulL,IAAcvlL,aAAWsnG,IAAwB,IAAZA,EAG9Cr8G,KAAKu6L,KAAMD,EAAWj+E,EAAW,IAAM,KAAO,IAF5C,CAGX,iDAvLWg8E,IAAqBx0L,8BAAAC,MAAAD,8BAAA8H,MAAA,4DAArB0sL,GAAqBrsL,UAAA,uBAAA+C,OAAA,CAAA5J,KAAA,OAAAmzL,cAAA,gBAAAC,aAAA,gBAAA9uK,SAAA,CAAA5lB,kCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,+NAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICblCrI,2BAAA,WACEA,sBAAA,gBASAA,2BAAA,aAEEA,sBAAA,WAEJA,oCAXUA,wBAIAA,uBAJA,WAAAwC,EAAA+yL,YAAAvzL,QAIAhC,CAJgC,OAAAwC,EAAA+yL,YAAArlE,UAIhClwH,CAH8B,UAAAwC,EAAA+yL,YAAAtzL,QAG9BjC,CAF+B,SAAAwC,EAAA+yL,YAAA91L,OAE/BO,CAD6B,UAAAwC,EAAAmyL,y1CCCjC,MAAOgC,GACX93L,YAAoB+3L,GAAA73L,KAAA63L,mBAAuC,CAE3DtvL,UAAUjI,GACR,IAAKA,EAAO,OAAO,KACnB,MAAMsnD,EAA2C,GACjD,IAAIjB,EAAQ,EACZx0C,mBAAU7R,EAAMw3L,SAAU,CAACC,EAAU7oK,KACnC,MAAM8oK,EAAeh4L,KAAK63L,kBAAkB5oK,gBAAgBC,GACxD/c,gBAAcy1C,EAAiBowI,MACjCpwI,EAAiBowI,GAAgB,GAEnCpwI,EAAiBowI,IAAiBD,EAClCpxI,GAASoxI,IAEJ,CACLnwI,mBACAjB,QAEJ,iDAnBWixI,IAAa32L,8BAAAC,KAAA,6EAAb02L,GAAatqF,MAAA,gPCyCZrsG,2BADF,SACEA,CAD8D,QAC1DA,mBAAA,gBAAUA,2BAEZA,2BADF,OACEA,CADE,UAGAA,mBAAA,GACAA,sBAAA,UAGNA,8EALOA,sBAAA,GAAAA,uBAAA,OAAAg3L,EAAAC,oBAAA,GAAAl5K,IAAA/d,2BACDA,uDAAA,IAAAg3L,EAAAC,oBAAA,GAAA7kB,KAAA,gCANRpyK,oCAAA,GACEA,uBAAA,EAAAk3L,GAAA,wEAAOl3L,+CAAA,OAAAg3L,EAAAC,oBAAA98L,OAAA,6BAqDT6F,sBAAA,8DAAaA,uBAAA,OAAAuvB,EAAA4nK,qCAQbn3L,sBAAA,kGAAaA,uBAAA,OAAAA,wBAAA,IAAAuvB,EAAA6nK,mCAKbp3L,sBAAA,8DAAaA,uBAAA,OAAAuvB,EAAA8nK,qCA/Cfr3L,oCAAA,GAEEA,sBAAA,gFAYAA,sBALA,mBAKAA,CAFoD,uDAMpDA,sBAAA,uDAYAA,sBANA,mBAMAA,CAHoD,wDAoBpDA,uBAbA,GAAAs3L,GAAA,qBAaAt3L,CARwC,GAAAu3L,GAAA,qBAQxCv3L,CAF2C,GAAAw3L,GAAA,6GA3C9Bx3L,wBAIAA,uBAJA,OAAAuvB,EAAA21I,WAIAllK,CAJmB,eAAAA,wBAAA,KAAAuvB,EAAAkoK,qBAAAz3L,wBAAA,KAAAuvB,EAAAmoK,mBAOnB13L,sBAAA,GAAAA,uBAAA,aAAAuvB,EAAAooK,OAAA,KAAApoK,EAAAooK,OAAAxlB,OAAAylB,KAAAz9L,QAKA6F,+CAAA,OAAAA,wBAAA,KAAAuvB,EAAAsoK,SAIA73L,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,KAAAuvB,EAAAuoK,SAMA93L,sBAAA,GAAAA,uBAAA,aAAAuvB,EAAAwoK,WAAA,KAAAxoK,EAAAwoK,WAAA59L,QAMA6F,+CAAA,OAAAA,wBAAA,MAAAuvB,EAAAyoK,WASCh4L,sBAAA,GAAAA,uBAAA,OAAAi4L,EAAAlkF,KAMA/zG,+CAAA,OAAAi4L,EAAAjkF,QAOAh0G,+CAAA,OAAAi4L,EAAArkF,+BAmBV5zG,2BAFF,WAEEA,CADgD,UAChDA,mBAAA,KAIFA,wDAGIA,sBAAA,2HAGIA,uBAFA,UAAAA,4BAAA,EAAAK,GAAAL,wBAAA,IAAAuvB,EAAAmhK,WAAAjjL,QAAA8hB,EAAAze,MAAAstF,SAEAp+F,CAF2D,UAAAA,wBAAA,IAAAuvB,EAAAmhK,WAAAjjL,QAE3DzN,CAD2C,QAAAuvB,EAAAmhK,WAAAjjL,gCAGjDzN,2BAAA,aAAAA,mBAAA,KAEkBA,mDAIhBA,2BAAA,UAAAA,mBAAA,KAIAA,qDAKEA,sBAAA,kEACkBA,uBAAA,aAAAuvB,EAAAmhK,WAAAwH,mCAStBl4L,2BAAA,YAEEA,sBAAA,UAEAA,2BAAA,aAAAA,mBAAA,KAEFA,uEAHKA,+CAAA,UAAAA,4BAAA,EAAAK,GAAAkvB,EAAAze,MAAA+qF,OAAAtsE,EAAAze,MAAAstF,2EAYHp+F,2BAAA,eAGQA,uBAAA,mBAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA4oK,mBAAmB,YAAW,GAI7Cn4L,sBAAA,UACAA,2BAAA,UAAMA,mBAAA,GACRA,0EARQA,uBAAA,UAAAA,4BAAA,EAAAq8I,GAAA,aAAA9sH,EAAA6oK,YAMHp4L,+CAAA,UAAAA,4BAAA,EAAA2vE,GAAApgD,EAAAze,MAAA+qF,SACG77F,sBAAA,GAAAA,8BAAAuvB,EAAA+zJ,uBAAAR,uFAGR9iL,2BAAA,eAGQA,uBAAA,mBAAAA,0BAAA6T,GAAA,MAAA0b,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA4oK,mBAAmB,WAAU,GAI5Cn4L,sBAAA,UACAA,2BAAA,UAAMA,mBAAA,GACRA,0EARQA,uBAAA,UAAAA,4BAAA,EAAAq8I,GAAA,YAAA9sH,EAAA6oK,YAMHp4L,+CAAA,UAAAA,4BAAA,EAAA2vE,GAAApgD,EAAAze,MAAA6nD,aACG34D,sBAAA,GAAAA,8BAAAuvB,EAAA+zJ,uBAAAN,4CAQJhjL,+BAAA,6BA/BJA,2BAHJ,eAGIA,CAF8E,WAE9EA,CADgD,aAChDA,mBAAA,KACiBA,2BAcjBA,uBAXA,EAAAq4L,GAAA,gBAWAr4L,CAL6D,EAAAs4L,GAAA,iBAe/Dt4L,2BAEAA,2BAAA,YACEA,sBAAA,WAEEA,2BADF,qBACEA,CADmC,YAEjCA,uBAAA,GAAAu4L,GAAA,uBAIRv4L,yGAzBaA,sBAAA,GAAAA,uBAAA,aAAAuvB,EAAA+zJ,uBAAA,KAAA/zJ,EAAA+zJ,uBAAAR,sBAWA9iL,+CAAA,aAAAuvB,EAAA+zJ,uBAAA,KAAA/zJ,EAAA+zJ,uBAAAN,qBAQMhjL,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAipK,WAEIx4L,sBAAA,GAAAA,uBAAA,mBAAAy4L,8BAYvBz4L,oCAAA,MAEEA,sBAAA,uGAAkBA,wBAEAA,uBAFA,OAAAA,4BAAA,EAAAm8H,GAAA5sG,EAAAmiI,SAAAgnC,YAAAnpK,EAAAmiI,SAAAinC,sBAEA34L,CAF4E,eAAAuvB,EAAAqpK,iBAAAC,YAE5E74L,CAD6C,gBAAAuvB,EAAAqpK,iBAAAE,oCAejE94L,oCAAA,GACEA,sBAAA,8GACyBA,wBAGAA,uBAHA,WAAAuvB,EAAAmiI,SAAAgnC,YAGA14L,CAHiC,cAAAA,4BAAA,EAAA69I,IAGjC79I,CADiC,YAAAA,4BAAA,EAAA2vE,GAAApgD,EAAAse,eAAAqqD,0CA6C5Dl4F,2BAPR,WAOQA,CAJS,WAITA,CAHoC,WAGpCA,CAF6B,WAE7BA,CADgC,aAG9BA,sBADA,SACAA,CADiD,UAGrDA,6BAGIA,2BAFJ,WAEIA,CAFwB,WAExBA,CADyC,WACbA,mBAAA,IAA4BA,2BACxDA,sBAAA,WAIEA,2BADF,UACEA,CADmC,+CACnCA,mBAAA,6CAOVA,qCACAA,sBAAA,YACFA,8GA5BKA,uBAAA,UAAAA,4BAAA,GAAA2vE,GAAA,UAAApgD,EAAAwpK,WAAAC,EAAAv5L,OAAAsjL,YAOS/iL,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAg+I,GAAAzuH,EAAAze,MAAAwtF,MAAA/uE,EAAAze,MAAA8nD,MAAA,QAAArpC,EAAAwpK,WAAAC,EAAAv5L,OAAAsjL,YACD/iL,+CAAA,UAAAA,4BAAA,GAAAK,GAAAkvB,EAAAze,MAAA0rF,OAAAjtE,EAAAze,MAAA0tF,UACAx+F,+CAAA,UAAAA,4BAAA,GAAAg+I,GAAAzuH,EAAAze,MAAAytF,QAAAhvE,EAAAze,MAAA4tF,QAAAnvE,EAAAze,MAAA2oB,UAKyBz5B,sBAAA,GAAAA,8BAAAg5L,EAAAv5L,OAAAsiL,WAEzB/hL,wBACAA,uBADA,YAAAg5L,EAAA/W,YAAA1xJ,YAAAvwB,2BACAA,CAD2C,aAAAg5L,EAAA/W,YAAA1xJ,aAIrCvwB,sBAAA,GAAAA,uBAAA,QAAAA,wBAAA,KAAAg5L,EAAA9P,WACKlpL,sBAAA,GAAAA,8CAAA,MAAAg5L,EAAA9P,kEAtB1BlpL,oCAAA,GACEA,uBAAA,EAAAi5L,GAAA,6GACMj5L,+CAAA,kBAAAg5L,EAAAvrL,OAAA2b,OAAA4vK,EAAAv5L,OAAAsjL,WAAAxzJ,EAAA6oK,YAAA7oK,EAAA6oK,qCAFRp4L,uBAAA,EAAAk5L,GAAA,gEAAkFl5L,uBAAlD,UAAAuvB,EAAA+zJ,uBAAA1B,OAAkD5hL,CAAhB,eAAAuvB,EAAAzc,sCAkClE9S,oCAAA,GACEA,2BAAA,UAAAA,wBAAA,MACmDA,sBAA3C,SAA2CA,CAAL,WAAqDA,kIAAxFA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAA2vE,GAAApgD,EAAAze,MAAA6nD,uCAFb34D,uBAAA,EAAAm5L,GAAA,gEAAen5L,uBAAA,OAAAuvB,EAAA+O,YAAA60D,IAAA7hE,6BAOftxB,sBAAA,wBCvRI,MAAOo5L,WAA6B/X,GA6DxCxiL,YACUumC,EACA4uJ,EACA/mL,EACAirG,EACA6kB,EACArnG,EACD4rJ,EACClpI,EACAk3I,EACDhM,EACC+V,GAERjsL,MAAMk0K,GAZEviL,KAAAqmC,iBACArmC,KAAAi1L,sBACAj1L,KAAAkO,qBACAlO,KAAAm5G,iBACAn5G,KAAAg+H,gBACAh+H,KAAA22B,kBACD32B,KAAAuiL,oBACCviL,KAAAq5C,mBACAr5C,KAAAuwL,yBACDvwL,KAAAukL,yBACCvkL,KAAAs6L,kBAvEVt6L,KAAAu6L,gBAAoC,GACpCv6L,KAAA65L,iBAAqC,CACnCC,YAAa,KACbC,QAAS,MAEX/5L,KAAAmhH,SAAW,IAAIr6B,eASf9mF,KAAA+R,MAAQC,KACRhS,KAAAw6L,YAAa,EACbx6L,KAAAy5L,UAAY,CACVgB,UAAU,GAIZz6L,KAAAg6L,WAAan+F,KAEb77F,KAAA4nD,iBAA2C,GAC3C5nD,KAAA06L,SAAW,EACX16L,KAAA8uC,eAAwC,CACtCqqD,aAAc,GACdwhG,IAAK,GACLC,IAAK,GACLthG,YAAa,GACbC,aAAc,GACdC,qBAAsB,GACtBC,sBAAuB,GACvBC,cAAe,GACfL,SAAU,GACVD,UAAW,IAGbp5F,KAAA66L,aAAe,qCACf76L,KAAA86L,OAASp7J,OAAOC,SAASm7J,OAEzB96L,KAAA+6L,iBAA2B,EAC3B/6L,KAAAg7L,kBAA4B,EAG5Bh7L,KAAAi7L,gBAAkB,IAAIzsL,kBAAqB,IAEnCxO,KAAAm1L,KAAO,IAAIruG,eACX9mF,KAAAk7L,SAAW,IAAI30J,UAEvBvmC,KAAAmmK,WAAqB,KACrBnmK,KAAA44L,OAAiB,KACjB54L,KAAA84L,OAAiB,KACjB94L,KAAA+4L,OAAiB,KACjB/4L,KAAAg5L,WAAoC,KACpCh5L,KAAAi5L,SAAqB,KACrBj5L,KAAAo4L,SAAmB,KACnBp4L,KAAAq4L,OAAiB,KACjBr4L,KAAAs4L,SAAqB,KAgBnBt4L,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAKm7L,gBAAkBn7L,KAAKm5G,eAAezmG,KAC7C,CAEAjE,WACEJ,MAAMI,WACFzO,KAAKu/B,YAAYm1E,UAAUniF,OAC7BvyB,KAAK04L,mBAAqB14L,KAAKo7L,oBAC/Bp7L,KAAK24L,iBAAmB34L,KAAKi7L,gBAAgBjsL,QAC3CC,aAAU,IACRjP,KAAKs6L,gBAAgBxJ,aAAa9hL,QAChCC,aAAW1M,IACTvC,KAAKg7L,iBAAmBz4L,EAAK+hC,KAAK6nB,UAC3B/oC,MAAG7gB,QAKlBvC,KAAKq7L,iBAAmBr7L,KAAK22B,gBAAgByE,UAAU,wBAGzDp7B,KAAKs7L,kBAGLt7L,KAAKu7L,mBAAmB,IAAMv7L,KAAKg+H,cAAcnQ,sBAAsBl/G,UAAU,CAC/Ec,KAAOkjJ,IACL3yJ,KAAK2yJ,SAAWA,KAIpB3yJ,KAAK8sC,kBAAkB9sC,KAAKuiL,kBAAkB/1I,oBAC9CxsC,KAAKw7L,qBACLx7L,KAAKy7L,qBACLz7L,KAAK07L,sBACL17L,KAAKukL,uBAAuB/2I,WAAU,EACxC,CAEAmuJ,mBACE,OAAO37L,KAAK47L,iBACR,8BACA,sJAGN,CACA5xK,cACEhqB,KAAKuiL,kBAAkBr4J,cACvBlqB,KAAKm1L,MAAMjrK,cACXlqB,KAAKk7L,SAASzrL,OACdzP,KAAKk7L,SAAS91K,UAChB,CAEAg0K,mBAAmBjzL,GACjBnG,KAAKq5L,YAAclzL,EAAQnG,KAAKq5L,UAAY,KAASr5L,KAAKq5L,UAAYlzL,CACxE,CAEAq1L,qBACEx7L,KAAKg+H,cAAclQ,iBAAiBn/G,UAAWpM,IAC7CvC,KAAKu6L,gBAAgBlnB,KAAO9wK,IAE9BvC,KAAKi1L,oBAAoB1pJ,UAAU58B,UAAWpM,IAC5CvC,KAAKu6L,gBAAgB7+E,aAAen5G,IAEtCvC,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7B,MAAM3X,EAAU2X,EAAQ3X,QAAQx4F,QAAQ,gBAAiB,IAAIzL,MAAM,KACnEqD,KAAKu6L,gBAAgBsB,YACnBj7F,EAAQ,GAAK,IAAMA,EAAQ1lG,MAAM,EAAG0lG,EAAQxlG,QAAQwB,KAAK,IAAG,GAGpE,CAEOkwC,kBAAkBjjC,GACvB7J,KAAK8uC,eAAiB9uC,KAAKuiL,kBAAkB3zI,oBAC3C/kC,EACAgvF,MACA74F,KAAK8uC,eAET,CAEAgtJ,uBAAuBv5L,GACrB,IAAIw3L,EAAU,KACVD,EAAc,KAClB,OAAIv3L,IAAO,IAAIw5L,QAASC,WAAgBljG,MAAoBc,UAC1DmgG,EAAUx3L,EAAK,IAAIjC,QAAQ,GAC3Bw5L,EAAcv3L,EAAK,IAAIjC,QAAQ,KAE/By5L,EAAUx3L,IAAO,IAAIjC,QAAQ,GAC7Bw5L,EAAcv3L,IAAO,IAAIjC,QAAQ,IAE5B,CAACy5L,EAASD,EACnB,CAEA4B,sBACE,MAAMO,EAAiB,eAAenjG,MAAoBc,YAAYd,MAAoBa,iBAC1F35F,KAAKuiL,kBACF/zI,kBAAkBytJ,GAClBttL,UAAWpM,IACV,MAAOw3L,EAASD,GAAe95L,KAAK87L,uBAAuBv5L,GAAM1G,QACjEmE,KAAK65L,iBAAiBE,QAAU/5L,KAAKuiL,kBAAkB7zI,kBAAkBqrJ,GACzE/5L,KAAK65L,iBAAiBC,YAAc95L,KAAKuiL,kBAAkB7zI,kBAAkBorJ,EAAW,EAE9F,CAEQ2B,qBACNz7L,KAAKg+H,cAAchQ,qBAAqBr/G,UAAWipB,IACjD53B,KAAK47L,iBAAmBhkK,GAE5B,CAEA7jB,UAAU7M,GACR,OAAOA,CACT,CAEAk0L,oBACE,OAAOp7L,KAAKq5C,iBAAiB5S,UAAU,WAAWz3B,QAChDC,aAAW0a,IACT3pB,KAAK+6L,gBAAkBpxK,GAAMuyK,iBACtB94K,MAAGuG,GAAMuyK,iBAGtB,CAEAX,mBAAmBtuJ,GACjB,OAAOjtC,KAAKuwL,uBAAuB3vE,cAAc5xG,QAC/CmtL,cAAW,IAAMlvJ,IAAKj+B,QAAKwV,cAAW,IAAM43K,YAAO,EACnDvoF,aAAU7zG,KAAKk7L,UAEnB,CAEAI,kBACEt7L,KAAKu7L,mBAAmB,IAAMv7L,KAAKg+H,cAAcpQ,oBAAoBj/G,UAAU,CAC7Ec,KAAO5T,IACLmE,KAAKmmK,WAAatqK,EAAOkqC,MACzB/lC,KAAK44L,OAAS/8L,EAAOs3K,WACrBnzK,KAAK84L,OAASj9L,EAAOwgM,QACrBr8L,KAAK+4L,OAASl9L,EAAOggL,QACrB77K,KAAKg5L,WAAan9L,EAAOgjD,MACzB7+C,KAAKi5L,SAAWp9L,EAAOygM,QACvBt8L,KAAKo4L,SAAWv8L,EAAOm5G,IACvBh1G,KAAKq4L,OAASx8L,EAAO0gM,OACrBv8L,KAAKs4L,SAAWz8L,EAAO2gM,cACvBx8L,KAAK2xL,WAAa91L,EAAO4gM,OACzBz8L,KAAKm7L,gBAAkBn7L,KAAKm5G,eAAezmG,KAAG,GAGpD,iDA5NW2nL,IAAoBp5L,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,IAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,MAAAhlB,8BAAAilB,IAAAjlB,8BAAAklB,IAAA,4DAApBk0K,GAAoBjxL,UAAA,sBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,6BDlCd5C,2EAAA,mCA2HGA,0FAaGA,oFAODA,qFAqBGA,qFAYIA,mFAWAA,oFAhBJA,mFA2HCA,yFAAc,mCAc9BA,2EAAA,sCAAkC,4CAAS,mCAA0B,4vIAvTvEvI,2BAZV,WAYUA,CAZuB,WAYvBA,CAX8B,WAW9BA,CARwC,eAQxCA,CAF+B,UAE/BA,CADoB,QAChBA,mBAAA,gBAAUA,2BACdA,2BAAA,QAAIA,mBAAA,GAA0BA,2BAC9BA,2BAAA,QAAIA,mBAAA,mBAAYA,2BAChBA,2BAAA,SAAAA,mBAAA,MAA8EA,2BAC9EA,2BAAA,SAAIA,mBAAA,mBAAYA,2BAChBA,2BAAA,SACEA,mBAAA,IACAA,sBAAA,oBACFA,2BACAA,2BAAA,SAAIA,mBAAA,kBAAWA,2BAEbA,2BADF,QACEA,CADE,WAGCA,mBAAA,IACDA,sBAAA,WAEJA,6BACAA,oCAAA,IACEA,2BAAA,SAAIA,mBAAA,2BACFA,2BAAA,cAIEA,mBAAA,IAEJA,6BAEEA,2BADF,QACEA,CADE,WAGCA,mBAAA,IACDA,sBAAA,WAEJA,iEAEFA,uBAAA,GAAAy7L,GAAA,sDAaJz7L,6BAGAA,2BAAA,iBAIEA,uBAAA,GAAA07L,GAAA,wDAuDJ17L,6BAOMA,2BAJN,YAIMA,CAJqB,YAIrBA,CAHa,YAGbA,CADoB,iBAQlBA,uBAAA,GAAA27L,GAAA,cAQE37L,2BADF,YACEA,CADkD,aAOlDA,uBALE,GAAA47L,GAAA,YAKF57L,CAFkC,GAAA67L,GAAA,eAOlC77L,2BAFA,sBAEAA,CADmC,aAEjCA,uBAAA,GAAA87L,GAAA,YAKF97L,2BAGEA,2BAFF,cAEEA,CADgB,aAEdA,uBAAA,GAAA+7L,GAAA,2BAOR/7L,mCAEEA,2BAAA,aACEA,uBAAA,GAAAg8L,GAAA,cAOFh8L,2BACAA,uBAAA,GAAAi8L,GAAA,mBAwCJj8L,6BAEEA,2BADF,YACEA,CADyB,iBAKvBA,uBAAA,GAAAk8L,GAAA,uBAQJl8L,6BAQIA,2BALN,YAKMA,CALyC,gBAKzCA,CAF2C,YAE3CA,CAD0B,oCACEA,uBAAA,wBAAA2J,GAAA3J,iCAAAsL,GAAAtL,wBAAgBwC,EAAAqpC,kBAAAliC,GAAyB,GACrE3J,2BACAA,uBAAA,GAAAm8L,GAAA,uBA0BAn8L,sBAlBA,gCAkBAA,CAb0B,gCAa1BA,CAP0B,gCAO1BA,CAD0B,iCAatCA,uCA2CAA,uBAzCA,GAAAo8L,GAAA,yBAAAp8L,mCAyCAA,CAzCyB,GAAAq8L,GAAA,yBAAAr8L,mCAyCzBA,CAPuB,GAAAs8L,GAAA,yBAAAt8L,gFAnTTA,sBAAA,GAAAA,8BAAAwC,EAAA82L,gBAAAlnB,MAEKpyK,sBAAA,GAAAA,sBAAAwC,EAAA82L,gBAAA7+E,cAAA,6DAGPz6G,sBAAA,GAAAA,+BAAA,IAAAwC,EAAA82L,gBAAAsB,YAAA,KAOG56L,sBAAA,GAAAA,+BAAA,IAAAwC,EAAAq3L,OAAA,cAQC75L,sBAAA,GACAA,uBADA,UAAAwC,EAAAm4L,iBAAA,kCACA36L,CADkE,aAAAwC,EAAAk4L,oBAElE16L,uDAAA,IAAAwC,EAAAm4L,iBAAA,yBAKC36L,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAo3L,aAAA55L,2BACAA,uDAAA,IAAAwC,EAAAo3L,aAAA,KAKQ55L,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAAwC,EAAA43L,mBAoBFp6L,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAAwC,EAAA03L,kBAkEJl6L,sBAAA,GAEAA,uBAFA,sBAEAA,CAFyB,aAAAwC,EAAAg/K,0BAAAh/K,EAAA8gL,uBAAA1B,OAAAznL,OAEzB6F,CAD+E,iBAGhFA,+CAAA,OAAAwC,EAAA8gL,uBAAA1B,OAAAznL,QAQG6F,sBAAA,GAAyBA,uBAAzB,aAAAwC,EAAAkuL,WAAA,KAAAluL,EAAAkuL,WAAAjjL,OAAyBzN,CAAA,WAAA0mD,GAMzB1mD,+CAAA,eAAAwC,EAAAkuL,YAAA,MAAAluL,EAAAkuL,WAAAwH,QAAA11L,EAAAkuL,WAAAwH,OAAA/9L,SAES6F,wBACAA,uBADA,gBACAA,CADmB,gBAK7BA,sBAAA,GAAAA,uBAAA,aAAAwC,EAAAkuL,YAAA,MAAAluL,EAAAkuL,WAAAwH,OAAA,KAAA11L,EAAAkuL,WAAAwH,OAAA/9L,QAOiB6F,sBAAA,GAAAA,uBAAA,aAAAwC,EAAAkuL,WAAA,KAAAluL,EAAAkuL,WAAAwH,QAUjBl4L,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAu3L,kBASE/5L,+CAAA,OAAAwC,EAAAg/K,0BAAAh/K,EAAA8gL,uBAAA1B,OAAAznL,QA2CH6F,sBAAA,GAAAA,uBAAA,iBAGQA,+CAAA,OAAAwC,EAAAkvJ,UAiBA1xJ,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAkvJ,UAWU1xJ,wBACAA,uBADA,cAAAA,4BAAA,GAAAyI,IACAzI,CADmC,YAAAA,4BAAA,GAAAK,GAAAmC,EAAAqrC,eAAAuqD,SAAA51F,EAAAqrC,eAAAsqD,YAMnCn4F,wBACAA,uBADA,cAAAA,4BAAA,GAAAQ,IACAR,CADmC,YAAAA,4BAAA,GAAAK,GAAAmC,EAAAqrC,eAAAwqD,YAAA71F,EAAAqrC,eAAAyqD,eAMnCt4F,wBACAA,uBADA,cAAAA,4BAAA,GAAAyI,IACAzI,CADmC,YAAAA,4BAAA,GAAAK,GAAAmC,EAAAqrC,eAAA0qD,qBAAA/1F,EAAAqrC,eAAA2qD,wBAMnCx4F,wBACAA,uBADA,cAAAA,4BAAA,GAAAktD,IACAltD,CADuC,YAAAA,4BAAA,GAAA2vE,GAAAntE,EAAAqrC,eAAA4qD,m3BE3PtE,MAAO8jG,GAuDX19L,YACU4C,EACA0vH,EACA3vH,GAFAzC,KAAA0C,gBACA1C,KAAAoyH,UACApyH,KAAAyC,YAjDVzC,KAAA+iC,OAAS,GAET/iC,KAAAy9L,aAAc,EAIdz9L,KAAA09L,oBAAqB,EAErB19L,KAAA29L,UAAY,IAAI7zL,eAIT9J,KAAA41L,qBAA8B,CACnC,CACExrK,GAAI,cACJ/mB,WAAWC,GACT,MAAMb,EAAY,IAAIwgD,KAChB4yI,EAAoB,+CAC1BzkE,YAAe0kE,KAAKC,OAASF,EAC7B,MAAMpyL,EAAMH,EAAMG,IAClB,IAAKH,EAAMJ,QAAQK,QAAQyyL,cAAgB1yL,EAAMf,KAAKu/D,SAAS,GAAGngE,MAChE,OAGF8B,EAAIG,OACJ,MAAMjC,EAAQ2B,EAAMf,KAAKu/D,SAAS,GAAGngE,MAAMhF,MAAM,MAE3Cs5L,GAAW3yL,EAAMI,UAAU/H,KAAO2H,EAAMI,UAAU9H,OAAS,EAC3Ds6L,GAAW5yL,EAAMI,UAAUC,IAAML,EAAMI,UAAUyyL,QAAU,EACjE1yL,EAAI2yL,UAAY,SAChB3yL,EAAI4yL,aAAe,SAEnB5yL,EAAIqyL,KAAO,QAAQD,IACnBpyL,EAAI8yL,UAAY9zL,EAAUgC,cAAc,2BACxChB,EAAI6yL,SAAS30L,EAAM,GAAIs0L,EAASC,EAAU,IAEtCv0L,EAAMvG,OAAS,IACjBqI,EAAIqyL,KAAO,QAAQD,IACnBpyL,EAAI8yL,UAAY9zL,EAAUgC,cAAc,uCACxChB,EAAI6yL,SAAS30L,EAAM,GAAIs0L,EAASC,EAAU,KAE5CzyL,EAAIc,SACN,IASFvE,KAAKw2L,YAAc,CACjBrlE,UAAW,WACXluH,QAAS,CACP,CACEtB,MAAO,KACPsC,YAAa,EACbkB,gBAAiB,CACfnF,KAAKyC,UAAUgC,cAAc,qBAC7BzE,KAAKyC,UAAUgC,cAAc,sBAC7BzE,KAAKyC,UAAUgC,cAAc,sBAC7BzE,KAAKyC,UAAUgC,cAAc,mBAC7BzE,KAAKyC,UAAUgC,cAAc,uBAInCvB,QAAS,CACPuzL,OAAQ,MACR1nC,OAAQ,CAAC,QAAS,WAAY,cAC9B2nC,YAAa,EACbnzL,QAAS,CACPyyL,aAAa,EACbtxL,OAAQ,CACNC,SAAS,EACTisH,SAAU,QACVlwH,OAAQ,CACNi2L,SAAU,GACVC,eAAe,IAGnB7iC,SAAU,CACRn8H,SAAS,EACT1yB,eAAe,EACfC,gBAAiBnF,KAAKyC,UAAUgC,cAAc,kCAC9CqyL,aAAc,EACdC,aAAc,GACdC,cAAe,MACfpmE,SAAU,UACVqmE,SAAU,GACVC,SAAU,GACV9xL,UAAW,CACTzD,MAAOA,CAACy/D,EAA2B7+D,KACjC,IAAIquD,EAAOruD,EAAK7B,OAAO0gE,EAAKl6D,OAC5B,OAAK0pD,EAAK1uD,SAAS,OACjB0uD,EAAO,GAAGA,MAASruD,EAAKu/D,SAASV,EAAK+1H,cAAc50L,KAAK6+D,EAAKl6D,YAEzD0pD,KAIbvrD,MAAO,CACLV,SAAS,KAKnB,CAEA8J,WASuB,IAAI0zD,KACvBniE,KAAKoiE,eACLpiE,KAAKqiE,gBANcC,CAAC19D,EAAc29D,IAC3BA,EAAY39D,EAAQ49D,OAAS,KALlBuoC,CAACnmG,EAAcmnG,IAC1BA,EAAYnnG,EAAQ69D,OAAS79D,EAAQ3K,OAAS,GAAK,MAc/C4xG,QAAW1wG,GACf6E,KAAK49L,oBAAoBziM,GAGlCgX,UAAQnS,KAAKw2L,YAAax2L,KAAK+iC,QAE/B/iC,KAAK29L,UAAUzzL,KAAK,CAAClK,KAAKw2L,YAAax2L,KAAKuC,MAC9C,CAEAqE,cACE5G,KAAK29L,UAAUzzL,KAAK,CAAClK,KAAKw2L,YAAax2L,KAAKuC,OAC5CvC,KAAK69L,0BACP,CAEQD,oBAAoBziM,GAC1B,MAAM2iM,EAAY3iM,EAAK,GAAGwB,MAAM,MAEhC,OAAIqD,KAAK09L,mBACAI,EAAU,IAGnBA,EAAU,GAAK99L,KAAKy9L,YAChBz9L,KAAK0C,cAAc6F,UAAUu1L,EAAU,IACvC99L,KAAKoyH,QAAQ7pH,UAAUu1L,EAAU,IAE9BA,EAAUlhM,KAAK,MACxB,CAEQihM,2BACN,IAAIE,EAAqB,EACzB5rL,YAAUnS,KAAKw2L,YAAYvzL,QAAQ,GAAGV,KAAM,SAAUrH,GAChDA,EAAQ,IACV6iM,GAAsB,EAE1B,GAEA/9L,KAAKw2L,YAAYvzL,QAAQ,GAAGgB,YAAc85L,EAAqB,EAAI,EAAI,CACzE,iDA1KWP,IAAkBv8L,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA,4DAAlBw0L,GAAkBp0L,UAAA,oBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2pBCxB/BrI,2BAAA,WAUEA,sBATA,eASAA,CADS,aAIXA,kCAVUA,wBAIAA,uBAJA,WAAAwC,EAAA+yL,YAAAvzL,QAIAhC,CAJgC,OAAAwC,EAAA+yL,YAAArlE,UAIhClwH,CAH8B,UAAAwC,EAAA+yL,YAAAtzL,QAG9BjC,CAF+B,SAAAwC,EAAA+yL,YAAA91L,OAE/BO,CAD6B,UAAAwC,EAAAmyL,0yCCFjC30L,2BAAA,SACuBA,mBAAA,GAAeA,qEAAnCA,uBAAA,aAAA+K,EAAA06C,MAAoBzlD,sDAAA+K,EAAAmhD,qCAGrBlsD,mBAAA,4CAAAA,+BAAA,IAAA+K,EAAAmhD,UAAA,MCDF,MAAO6wI,GALbl+L,cAWEE,KAAAi+L,UAAY,mDANDD,GAAiB,4DAAjBA,GAAiB50L,UAAA,mBAAA+C,OAAA,CAAAghD,UAAA,YAAAzG,KAAA,OAAAu3I,UAAA,YAAAC,aAAA,gBAAApwI,mBAAApkD,GAAAc,MAAA,EAAAC,KAAA,EAAAC,OAAA,sPAAAC,SAAA,SAAArB,EAAA7F,MAAA,EAAA6F,kCDJ1BrI,2BAHJ,UAGIA,CAFuB,UAEvBA,CADsE,UAKpEA,uBAHA,EAAAk9L,GAAA,UAGAl9L,CAFuB,EAAAm9L,GAAA,yBAAAn9L,oCAKzBA,2BAEAA,2BAAA,WAEEA,yBAAA,GAGNA,wEAhBKA,uBAAA,UAAAwC,EAAAw6L,WAGKh9L,sBAAA,GAAYA,uBAAZ,OAAAwC,EAAAijD,KAAYzlD,CAAA,WAAA4lD,GASb5lD,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAy6L,y1BEJH,MAAOG,GALbv+L,cAMEE,KAAA+R,MAAQC,qDADGqsL,GAAkB,4DAAlBA,GAAkBj1L,UAAA,oBAAA+C,OAAA,CAAAmyL,WAAA,cAAAxwI,mBAAApkD,GAAAc,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,aCFN5C,gFAFTA,8FAAmB,gDAC3B,qCAEqB,0PANzBvI,2BAFJ,UAEIA,CAFa,UAEbA,CAD4B,YACIA,mBAAA,GAAgBA,2BAE9CA,2BADF,gBACEA,CAD8C,WAC9CA,wBAAA,uCAEEA,sBAAA,gDAGFA,wBAGNA,iCAEAA,2BAAA,YACEA,yBAAA,IACFA,kCAdoCA,sBAAA,GAAAA,8BAAAwC,EAAA66L,YAIpBr9L,sBAAA,GAAAA,mCAAA,oCAAAA,wBAAA,IAAAwC,EAAA66L,YAAA,IADAr9L,sEAAA,IAAAwC,EAAA66L,8QCLT,IAAKC,IAAZ,SAAYA,GACVA,EAAAziG,WAAA,QACAyiG,EAAAxiG,YAAA,UACAwiG,EAAAviG,UAAA,IACF,CAJA,CAAYuiG,QAAW,KCOjB,MAAOC,GACXj2L,UAAUjI,GACR,OAAO2R,OAAOC,KAAKqsL,IAAar8L,SAAS5B,GAAwBi+L,GAAYj+L,GAAS,IACxF,iDAHWk+L,GAAe,2EAAfA,GAAelxF,MAAA,KCFtB,MAAOmxF,GACXl2L,UAAUjI,GACR,OAAKA,EAIUkJ,YAAYlJ,EAAM8yK,OAAOylB,KAAKz9L,OAAOkqB;EACtDhlB,EAAMo+L,OAAO9hM,KAAK,SAJP,EAOX,iDAVW6hM,GAAc,0EAAdA,GAAcnxF,MAAA,KCErB,MAAOqxF,GACXp2L,UAAUjI,GACR,IAAKA,EACH,MAAO,GAGT,IAAIqwG,EAAU,EACVC,EAAU,EACVC,EAAgB,EAChBC,EAAY,EAChB3+F,SAAO7R,EAAMywG,KAAOC,IACdA,EAAI5nD,IACNunD,IAEEK,EAAI7nD,IACNynD,IAEEI,EAAI3mF,MAAMnoB,SAAS,aACrB2uG,IAEEG,EAAI3mF,MAAMnoB,SAAS,SACrB4uG,MAIJ,MAAM8tF,EAAa,CACjB,CACE1kM,QAAS,GAAGoG,EAAMywG,KAAK31G,UAAUoO,mBACjCyyD,MAAO,KAGX2iI,EAAW1iM,KAAK,CACdhC,QAAS,GACT+hE,MAAO,yBAET2iI,EAAW1iM,KAAK,CACdhC,QAAS,GAAG02G,KAAWpnG,kBAAkBmnG,KAAWnnG,gBACpDyyD,MAAO,KAGT,MAAMg1C,EAAY3wG,EAAMywG,KAAK31G,OAASw1G,EAChCM,EAAW5wG,EAAMywG,KAAK31G,OAASu1G,EACrC,GAAIM,EAAY,GAAKC,EAAW,EAAG,CACjC0tF,EAAW1iM,KAAK,CACdhC,QAAS,GACT+hE,MAAO,yBAGT,MAAM4iI,EAAW5tF,EAAY,EAAI,GAAGA,KAAaznG,kBAAoB,GAC/Ds1L,EAAY7tF,EAAY,GAAKC,EAAW,EAAI,KAAO,GACnD6tF,EAAU7tF,EAAW,EAAI,GAAGA,KAAY1nG,iBAAmB,GACjEo1L,EAAW1iM,KAAK,CACdhC,QAAS,GAAG2kM,IAAWC,IAAYC,IACnC9iI,MAAO,mBAEX,CAEA,OAAI40C,EAAgB,GAClB+tF,EAAW1iM,KACT,CACEhC,QAAS,GACT+hE,MAAO,wBAET,CACE/hE,QAAS,GAAG22G,KAAiBrnG,uBAC7ByyD,MAAO,mBAET,CACE/hE,QAAS,GACT+hE,MAAO,yBAKT60C,EAAY,GACd8tF,EAAW1iM,KAAK,CACdhC,QAAS,GAAG42G,KAAatnG,kBACzByyD,MAAO,oBAIJ2iI,CACT,iDAlFWD,GAAuB,mFAAvBA,GAAuBrxF,MAAA,KCA9B,MAAO0xF,GACXz2L,UAAUjI,GACR,IAAKA,EACH,MAAO,GAGT,IAAI4uG,EAAc1lG,eAClB,MAAMy1L,EAAkB9sL,gBAAc7R,EAAMqvG,aACxC,GACA,GAAGnmG,6BAA6BlJ,EAAMqvG,cAEtCsvF,EAAgB7jM,OAAS,IAC3B8zG,EAAc,KAEhB,MAAMgwF,EAAmB5+L,EAAM8uG,SAASlyG,IAAKw+E,GAAmBA,EAAEthF,MAAMwC,KAAK,MACvEuiM,EAAoBD,EAEtB,GAAG11L,+BAA+B01L,IADlC,GAEE/vF,EAAe7uG,EAAM8uG,SAASh0G,OAC9BgkM,EAAa,CACjB,CACEllM,QAAS,GAAGg1G,KAAe1lG,oBAC3ByyD,MAAO,eACPpoC,UAAWorK,IAIfG,SAAWljM,KAAK,CACdhC,QAAS,GACT+hE,MAAO,uBACPpoC,UAAW,KAEburK,EAAWljM,KAAK,CACdhC,QAAS,GAAGi1G,KAAgB3lG,qBAC5ByyD,MAAO,eACPpoC,UAAWsrK,IAGNC,CACT,iDAvCWJ,GAAuB,mFAAvBA,GAAuB1xF,MAAA,KCA9B,MAAO+xF,GACX92L,UAAUjI,GACR,IAAKA,EACH,MAAO,GAGT,IAAIg/L,EAAe,GACfC,EAAe,GACfnwF,EAAW,EACXC,EAAS,EACTC,EAAgB,EACpBn9F,SAAO7R,EAAM8uG,SAAU,KACrBA,GAAY,IAGV9uG,EAAM8uG,WAAa9uG,EAAM8e,aAC3BkgL,EAAe,GAAGlwF,KAAY5lG,gBAC9B+1L,EAAe/1L,2BACuB,IAA7BlJ,EAAM8e,YAAYhkB,OAC3BkkM,EAAe91L,2BAEf2I,SAAO7R,EAAM8e,YAAcmwF,KACzBp9F,SAAOo9F,GAAGC,OAAOluF,KAAOmuF,KACJ,sBAAdA,GAAIplF,MACNilF,GAAiB,EAEjBD,GAAU,GAEb,GAGHiwF,EAAe,GAAGjwF,KAAU7lG,oBAC5B+1L,EAAe,GAAGnwF,EAAWE,KAAiB9lG,sBAEhD,MAAM01L,EAAmB5+L,EAAM8uG,SAASlyG,IAAKw+E,IAAmBA,GAAEthF,MAAMwC,KAAK,MACvEuiM,EAAoBD,EAEtB,GAAG11L,+BAA+B01L,IADlC,GAEEM,EAAWl/L,EAAM8e,YAAc9e,EAAM8e,YAAYhkB,OAAS,EAC1DqkM,EAAaD,EAAW,EAAIl/L,EAAM8e,YAAY,GAAGowF,OAAOluF,KAAO,GAC/Do+K,EAAkBztL,OAAOpJ,OAAO42L,GACnCviM,IAAKokB,IAAsBA,GAAKlnB,MAChCwC,KAAK,MACR,IAAIqiM,GAAmBS,EAAuB,GAAGl2L,6BAA6Bk2L,IAArC,IAEpCrwF,GAAUmwF,EAAW,IACxBP,GAAkB,GAAG3vF,KAAiB9lG,4BAExC,MAAM41L,GAAa,CACjB,CACEllM,QAASolM,EACTrjI,MAAO,eACPpoC,UAAWorK,KAGf,OAAIM,IACFH,GAAWljM,KAAK,CACdhC,QAAS,GACT+hE,MAAO,uBACPpoC,UAAW,KAEburK,GAAWljM,KAAK,CACdhC,QAASqlM,EACTtjI,MAAO,eACPpoC,UAAWsrK,KAIRC,EACT,iDArEWC,GAAuB,mFAAvBA,GAAuB/xF,MAAA,yECkBtBrsG,sBAAA,oCAPRA,oCAAA,GAIMA,2BAHJ,qBAGIA,CAF+B,WAE/BA,CADsB,iDAGhBA,mBAAA,yEACJA,uBAAA,EAAA0+L,GAAA,YAGJ1+L,6BAEEA,2BADF,WACEA,CADuB,aAErBA,sBAAA,0BAGNA,8GAfgBA,wBACAA,uBADA,gBACAA,CADmB,gBAGzBA,sBAAA,GAAAA,uBAAA,UAAAA,wBAAA,IAAA+K,EAAA2lL,WAAA8K,OAAA/tL,SAEAzN,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,KAAAA,wBAAA,IAAA+K,EAAA2lL,WAAA8K,OAAA/tL,SAAA,KACCzN,sBAAA,GAAAA,uBAAA,4BAAA+K,EAAA2lL,WAAA8K,OAAA,KAAAzwL,EAAA2lL,WAAA8K,OAAA/tL,SAMazN,sBAAA,GAAAA,uBAAA,aAAA+K,EAAA2lL,uCAK1B1wL,oCAAA,GACEA,2BAAA,gDACEA,mBAAA,yEACFA,0GAFKA,+CAAA,UAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA8K,OAAA/tL,SACHzN,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,IAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA8K,OAAA/tL,SAAA,gCAzBNzN,2BAAA,qBAuBEA,uBAlBA,EAAA2+L,GAAA,wBAkBA3+L,CAlB4D,EAAA4+L,GAAA,uBAuB9D5+L,sEAvBiBA,+CAAA,cAAA+K,EAAA2lL,WAAA8K,QAAA,MAAAzwL,EAAA2lL,WAAA8K,OAAAtD,OAAA,KAAAntL,EAAA2lL,WAAA8K,OAAAtD,OAAA/9L,QAAA,GAkBA6F,+CAAA,eAAA+K,EAAA2lL,YAAA,MAAA3lL,EAAA2lL,WAAA8K,QAAA,MAAAzwL,EAAA2lL,WAAA8K,OAAAtD,QAAAntL,EAAA2lL,WAAA8K,OAAAtD,OAAA/9L,oCAOjB6F,2BAAA,qBAMEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA5rJ,MAAA,sCAGF9kC,2BAAA,qBAMEA,mBAAA,sCACFA,sEADEA,uDAAA,IAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAxe,YAAA,gCASAlyK,2BAAA,aAEEA,mBAAA,GACFA,qDAFMA,uBAAA,UAAA6+L,EAAA7jI,OACJh7D,uDAAA,IAAA6+L,EAAA5lM,QAAA,gCARJ+G,2BAAA,qBAMEA,uBAAA,EAAA8+L,GAAA,eAIF9+L,gDAJ2BA,+CAAA,UAAA++L,8BAWzB/+L,2BAAA,aAGEA,mBAAA,GACFA,qDAFMA,uBADA,UAAAg/L,EAAAhkI,MACAh7D,CADwB,cAAAg/L,EAAApsK,UAAAosK,EAAApsK,UAAA,IAE5B5yB,uDAAA,IAAAg/L,EAAA/lM,QAAA,gCARJ+G,2BAAA,qBAKEA,uBAAA,EAAAi/L,GAAA,2DAKFj/L,sEAL2BA,+CAAA,UAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA0K,qCAO3Bp7L,2BAAA,qBAMEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA38E,IAAA,sCASA/zG,2BAAA,aAGEA,mBAAA,GACFA,qDAFMA,uBADA,UAAAk/L,EAAAlkI,MACAh7D,CADwB,eAAAk/L,EAAAtsK,UAAAssK,EAAAtsK,UAAA,IAE5B5yB,uDAAA,IAAAk/L,EAAAjmM,QAAA,gCATJ+G,2BAAA,qBAMEA,uBAAA,EAAAm/L,GAAA,eAKFn/L,gDAPcA,uBAAA,gBAAAo/L,EAAAjlM,OAAA,+CAEa6F,+CAAA,UAAAo/L,8BAO3Bp/L,2BAAA,qBAMEA,mBAAA,GACAA,sBAAA,aACAA,mBAAA,GACAA,2BAAA,aAA0EA,mBAAA,GAE5EA,wEALEA,uDAAA,WAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,cAAArzI,KAAA,MAAAn9C,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,cAAAnzI,MAAA,WAEApoD,sBAAA,GAAAA,+BAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,cAAArzI,GAAA,SACMloD,+CAAA,UAAAA,4BAAA,EAAAyI,IAAA,MAAAsC,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,cAAAnzI,MAAA,IAAoEpoD,uDAAA,SAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,cAAAnzI,KAAA,oCAlH9EpoD,2BAAA,qBA2DEA,uBAhDA,EAAAq/L,GAAA,qBAgDAr/L,CA5CgD,EAAAs/L,GAAA,qBA4ChDt/L,CAbgD,EAAAu/L,GAAA,sBAahDv/L,CAJ6C,EAAAw/L,GAAA,mEAqC7Cx/L,uBArBA,EAAAy/L,GAAA,sBAqBAz/L,CAjB0C,EAAA0/L,GAAA,sBAiB1C1/L,CAJqE,EAAA2/L,GAAA,mEAiBrE3/L,uBAAA,GAAA4/L,GAAA,uBAYF5/L,wGAtGiBA,+CAAA,aAAA+K,EAAA2lL,WAAA8K,OAAA,KAAAzwL,EAAA2lL,WAAA8K,OAAA/tL,QA+BAzN,+CAAA,oBAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA5rJ,QASA9kC,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAxe,YAQAlyK,+CAAA,OAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA9V,UAYA56K,sBAAA,GAAAA,uBAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA0K,SAaAp7L,+CAAA,cAAA6/L,EAAA,KAAAA,EAAA9rF,MAAA,aAAAhpG,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA38E,MAOA/zG,+CAAA,OAAAA,wBAAA,YAAA6/L,EAAA,KAAAA,EAAA7rF,UAAA,MAAAjpG,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA4K,UAeAt7L,sBAAA,GAAAA,uBAAA,cAAA6/L,EAAA,KAAAA,EAAAjsF,QAAA,aAAA7oG,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,iFAmBbv7L,2BALF,oBAKEA,CADmC,sBAIpBA,uBAAA,qBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAA3wE,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAAorL,gBAAAxsL,EAAuB,GAACA,EAAU,IAAG,GAEnE3J,0EALiBA,wBAEAA,uBAFA,OAAA+K,EAAA2lL,WAEA1wL,CAFmB,SAAA+K,EAAA+0L,uBAEnB9/L,CADiC,mFAWhDA,2BALF,oBAKEA,CAD2E,sBAE5DA,uBAAA,qBAAA2J,GAAA3J,0BAAAkqI,GAAA,MAAAn/H,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAAg1L,eAAAp2L,EAAsB,GAACA,EAAU,IAAG,GAElE3J,0EAHiBA,+CAAA,OAAA+K,EAAA2lL,mCAuBT1wL,+BAAA,6BAEEA,2BAAA,QACAA,mBAAA,GACAA,qDADAA,uDAAA,IAAAggM,EAAA1+K,IAAA,KAAA0+K,EAAA3gM,MAAA,sEAVNW,2BAXJ,oBAWIA,CAPqC,WAOrCA,CAHsC,WAGtCA,CAD2B,sBAGXA,uBAAA,qBAAA2J,GAAA3J,0BAAA+5I,GAAA,MAAAhvI,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAAk1L,gBAAAt2L,EAAuB,GAACA,EAAU,IAAG,GAElE3J,6BAEEA,2BADF,wBACEA,CADmB,YAEjBA,uBAAA,EAAAkgM,GAAA,uBACAlgM,2BAAA,QACEA,uBAAA,EAAAmgM,GAAA,8CAOVngM,yIArBQA,+CAAA,iBAKYA,sBAAA,GACAA,uBADA,OAAA+K,EAAA2lL,WACA1wL,CADmB,SAAA+K,EAAAq1L,qBAOhBpgM,sBAAA,GAAAA,uBAAA,mBAAAqgM,GAEgBrgM,sBAAA,GAAAA,uBAAA,UAAAA,wBAAA,IAAA+K,EAAA2lL,WAAA2K,QAAAxE,sCASvC72L,2BAAA,qBAMEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA9yI,MAAAzjD,OAAA,gCAGF6F,2BAAA,qBAKEA,mBAAA,mCACFA,sEADEA,uDAAA,IAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA2K,QAAAiF,aAAA,gCAtEJtgM,2BAAA,sBAiEEA,uBA5DA,EAAAugM,GAAA,sBA4DAvgM,CAxDqC,EAAAwgM,GAAA,sBAwDrCxgM,CA5C6E,EAAAygM,GAAA,uBA4C7EzgM,CAlCyC,EAAA0gM,GAAA,sBAkCzC1gM,CAJwC,EAAA2gM,GAAA,uBAW1C3gM,sEA/DiBA,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAkQ,IAYA5gM,+CAAA,oBAAA+K,EAAA2lL,YAAA,MAAA3lL,EAAA2lL,WAAA2K,SAAA,MAAAtwL,EAAA2lL,WAAA2K,QAAAwF,aAAA,KAAA91L,EAAA2lL,WAAA2K,QAAAwF,aAAAjuJ,cAUA5yC,+CAAA,OAAA+K,EAAA2lL,WAAA2K,SA8BAr7L,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA9yI,OAQA59C,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA2K,0EAabr7L,2BALF,oBAKEA,CAD4C,sBAG7BA,uBAAA,qBAAA2J,GAAA3J,0BAAA4V,GAAA,MAAA7K,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAA+1L,sBAAAn3L,EAA6B,GAACA,EAAU,IAAG,GAEzE3J,0EAJiBA,wBACAA,uBADA,OAAA+K,EAAA2lL,WACA1wL,CADmB,SAAA+K,EAAAg2L,oFAWlC/gM,2BALF,oBAKEA,CAD4C,sBAG7BA,uBAAA,qBAAA2J,GAAA3J,0BAAA+6I,GAAA,MAAAhwI,EAAA/K,0BAAA,UAAAA,wBAAa+K,EAAAi2L,wBAAAr3L,EAA+B,GAACA,EAAU,IAAG,GAE3E3J,0EAJiBA,wBACAA,uBADA,OAAA+K,EAAA2lL,WACA1wL,CADmB,SAAA+K,EAAAg2L,8CAMpC/gM,2BAAA,qBAKEA,mBAAA,yCACFA,sEADEA,uDAAA,IAAAA,wBAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAuQ,YAAAC,0BAAA,qCAGFlhM,2BAAA,qBAKEA,mBAAA,GACFA,sEADEA,uDAAA,UAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAyQ,aAAA,gCAtCJnhM,2BAAA,sBAiCEA,uBA9BA,EAAAohM,GAAA,sBA8BAphM,CA1B8C,EAAAqhM,GAAA,sBA0B9CrhM,CAf8C,EAAAshM,GAAA,sBAe9CthM,CAJ8C,EAAAuhM,GAAA,uBAWhDvhM,sEAjCiBA,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAuQ,aAWAjhM,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAuQ,aAWAjhM,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAuQ,aAQAjhM,+CAAA,aAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAyQ,yCAMfnhM,oCAAA,GACEA,2BAAA,UAAAA,wBAAA,KAGEA,sBADA,SACAA,CADsC,UAExCA,kIAFKA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,GAAA0K,EAAA+F,MAAA6nD,uCAHP34D,uBAAA,EAAAwhM,GAAA,iEAAexhM,uBAAA,aAAA+K,EAAAuzB,aAAA,MAAAvzB,EAAAuzB,YAAA60D,IAAA,KAAApoF,EAAAuzB,YAAA60D,IAAA7hE,iCA9OnBtxB,2BAAA,WA6OEA,uBA3OA,EAAAyhM,GAAA,wBA2OAzhM,CAlOqD,EAAA0hM,GAAA,sBAkOrD1hM,CAhHuC,EAAA2hM,GAAA,sBAgHvC3hM,CAxC2E,EAAA4hM,GAAA,yBAAA5hM,oCAiD7EA,qEAlPkBA,+CAAA,cAAA+K,EAAA2lL,YAAA,MAAA3lL,EAAA2lL,WAAA8K,OAAA,KAAAzwL,EAAA2lL,WAAA8K,OAAA/tL,UAAA,MAAA1C,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAxe,cAAA,MAAAnnK,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA9V,WAAA,MAAA7vK,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA0K,UAAA,aAAArwL,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA5rJ,QAAA,aAAA/5B,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA38E,OAAA,MAAAhpG,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA4K,SAAA,aAAAvwL,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA6K,gBAuHAv7L,+CAAA,cAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA9yI,SAAA,MAAA7yC,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAkQ,MAAA,MAAA71L,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAA2K,UA0EAr7L,+CAAA,cAAA+K,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAuQ,eAAA,MAAAl2L,EAAA2lL,WAAA,KAAA3lL,EAAA2lL,WAAAyQ,gBC1KZ,MAAOU,GAgBXhjM,YACUk+H,EACA2zB,EACAzjJ,EACA2pL,EACA1+E,EACAo3E,EACA7tL,EACA0vH,EACA3vH,GARAzC,KAAAg+H,gBACAh+H,KAAA2xJ,aACA3xJ,KAAAkO,qBACAlO,KAAA63L,oBACA73L,KAAAm5G,iBACAn5G,KAAAuwL,yBACAvwL,KAAA0C,gBACA1C,KAAAoyH,UACApyH,KAAAyC,YAvBVzC,KAAAy+K,YAAc,IAAIhK,GAClBz0K,KAAAmhH,SAAW,IAAIr6B,eAGf9mF,KAAA+R,MAAQC,KAERhS,KAAAgiM,kBAAyB,GACzBhiM,KAAA+gM,uBAA8B,GAC9B/gM,KAAAqhM,oBAAsB,CACpBn+L,QAAS,CACP6rJ,OAAQ,CAAC,MAeX/uJ,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAKm7L,gBAAkBn7L,KAAKm5G,eAAezmG,KAC7C,CAEAjE,WACEzO,KAAKgiM,kBAAoB,CACvB/+L,QAAS,CACP,CACEkC,gBAAiB,CACfnF,KAAKyC,UAAUgC,cAAc,oBAC7BzE,KAAKyC,UAAUgC,cAAc,0BAMrCzE,KAAK+gM,uBAAyB,CAC5B99L,QAAS,CACP,CACEkC,gBAAiB,CACfnF,KAAKyC,UAAUgC,cAAc,oBAC7BzE,KAAKyC,UAAUgC,cAAc,wBAKrCzE,KAAKmhH,SAAWnhH,KAAKuwL,uBAAuB3vE,cAAcjyG,UAAU,KAClE3O,KAAK+iM,WAAS,GAGhB/iM,KAAK2xJ,WACFnc,iBACAxmI,QAAK+pC,QAAK,IACVpqC,UAAWpM,IACVvC,KAAKy+K,YAAcl8K,GAEzB,CAEAynB,cACEhqB,KAAKmhH,SAASj3F,aAChB,CAEA64K,YACE/iM,KAAKg+H,cAAcpQ,mBAAmBj/G,UAAWpM,IAC/CvC,KAAK2xL,WAAapvL,GAEtB,CAEAw/L,sBAAsBz+L,GACpB,MAAM0/L,EAAc,GACdC,EAAY,GAEZt8I,EACJ3mD,KAAK2xL,WAAWuQ,YAAYgB,iBAAmBljM,KAAK2xL,WAAWuQ,YAAYiB,gBAE7EH,EAAY9mM,KACV,GAAGsN,qBAAqBxJ,KAAKoyH,QAAQ7pH,UACnCvI,KAAK2xL,WAAWuQ,YAAYiB,oBACzB35L,iBAEPy5L,EAAU/mM,KAAK8D,KAAKw3L,eAAex3L,KAAK2xL,WAAWuQ,YAAYiB,gBAAiBx8I,IAChFq8I,EAAY9mM,KACV,GAAGsN,sBAAsBxJ,KAAKoyH,QAAQ7pH,UACpCvI,KAAK2xL,WAAWuQ,YAAYgB,qBACzB15L,iBAEPy5L,EAAU/mM,KAAK8D,KAAKw3L,eAAex3L,KAAK2xL,WAAWuQ,YAAYgB,iBAAkBv8I,IAEjFrjD,EAAM5C,OAASsiM,EACf1/L,EAAML,QAAQ,GAAGV,KAAO0gM,EACxB3/L,EAAML,QAAQ,GAAGtB,MAAQ,GAAG3B,KAAKoyH,QAAQ7pH,UAAUo+C,OAAWn9C,iBAChE,CAEAy4L,wBAAwB3+L,GACtB,MAAM0/L,EAAc,GACdC,EAAY,GAEZt8I,EACJ3mD,KAAK2xL,WAAWuQ,YAAYkB,eAAiBpjM,KAAK2xL,WAAWuQ,YAAYmB,gBAE3EL,EAAY9mM,KACV,GAAGsN,qBAAqBxJ,KAAK0C,cAAc6F,UACzCvI,KAAK2xL,WAAWuQ,YAAYkB,kBAC1B55L,iBAENy5L,EAAU/mM,KAAK8D,KAAKw3L,eAAex3L,KAAK2xL,WAAWuQ,YAAYkB,eAAgBz8I,IAC/Eq8I,EAAY9mM,KACV,GAAGsN,sBAAsBxJ,KAAK0C,cAAc6F,UAC1CvI,KAAK2xL,WAAWuQ,YAAYmB,mBAC1B75L,iBAENy5L,EAAU/mM,KAAK8D,KAAKw3L,eAAex3L,KAAK2xL,WAAWuQ,YAAYmB,gBAAiB18I,IAEhFrjD,EAAM5C,OAASsiM,EACf1/L,EAAML,QAAQ,GAAGV,KAAO0gM,EACxB3/L,EAAML,QAAQ,GAAGtB,MAAQ,GAAG3B,KAAK0C,cAC9B6F,UAAUo+C,GACVv+C,QAAQ,IAAK,QAAQoB,eAC1B,CAEA4tL,gBAAgB9zL,EAA4Bf,GAC1C,MAAMg1L,EAAmBv3L,KAAKw3L,eAC5Bj1L,EAAKs/L,GAAGltJ,MAAMglJ,YAAcp3L,EAAKs/L,GAAGltJ,MAAMilJ,qBAC1Cr3L,EAAKs/L,GAAGltJ,MAAMglJ,aAEVlC,EAAcz3L,KAAKw3L,eACvBj1L,EAAKs/L,GAAGltJ,MAAMilJ,qBACdr3L,EAAKs/L,GAAGltJ,MAAMglJ,aAGV2J,EAAgBtjM,KAAKy+K,YAAYC,eACjC6kB,EAAYvjM,KAAKy+K,YAAYC,eAGjC1+K,KAAKylE,MADH69H,GAAiB,GAAK7L,EAAc,KAAO6L,EAChC,kBACJC,GAAa,GAAK9L,EAAc,KAAO8L,EACnC,qBAEA,mBAEfvjM,KAAK+gM,uBAAuB99L,QAAQ,GAAGkC,gBAAgB,GAAKnF,KAAKyC,UAAUgC,cACzEzE,KAAKylE,OAGPniE,EAAML,QAAQ,GAAGV,KAAO,CAACk1L,EAAaF,GAEtCj0L,EAAM5C,OAAS,CACb,GAAG8I,oBAAoBxJ,KAAK0C,cAAc6F,UAAUhG,EAAKs/L,GAAGltJ,MAAMilJ,wBAClE,GAAGpwL,sBAAsBxJ,KAAK0C,cAAc6F,UAC1ChG,EAAKs/L,GAAGltJ,MAAMglJ,YAAcp3L,EAAKs/L,GAAGltJ,MAAMilJ,yBAI9Ct2L,EAAML,QAAQ,GAAGtB,MAAQ,GAAG81L,UAAoBz3L,KAAK0C,cAAc6F,UACjEhG,EAAKs/L,GAAGltJ,MAAMglJ,cAElB,CAEAuH,gBAAgB59L,EAA4Bf,GAC1C,MAAMqlD,EAA2C,GACjD,IAAI8yI,EAAW,EAEfvoL,YAAU5P,EAAK+5L,QAAQxE,SAAU,CAACC,EAAU7oK,KAC1C,MAAM8oK,EAAeh4L,KAAK63L,kBAAkB5oK,gBAAgBC,GAExD/c,gBAAcy1C,EAAiBowI,MACjCpwI,EAAiBowI,GAAgB,GAEnCpwI,EAAiBowI,IAAiBD,EAClC2C,GAAY3C,IAGd,UAAWC,KAAgBh4L,KAAK63L,kBAAkB7oK,cAC5C7c,gBAAcy1C,EAAiBowI,MACjCpwI,EAAiBowI,GAAgB,GAIrC10L,EAAML,QAAQ,GAAGV,KAAOvC,KAAK63L,kBAC1B7oK,cACA9xB,IAAK86L,GAAiBh4L,KAAKw3L,eAAe5vI,EAAiBowI,GAAe0C,IAE7Ep3L,EAAM5C,OAAS,CACb,GAAG8I,qBAAqBxJ,KAAKoyH,QAAQ7pH,UAAUq/C,EAAiBC,SAChE,GAAGr+C,uBAAuBxJ,KAAKoyH,QAAQ7pH,UAAUq/C,EAAiBW,WAClE,GAAG/+C,uBAAuBxJ,KAAKoyH,QAAQ7pH,UAAUq/C,EAAiBltB,WAClE,GAAGlxB,uBAAuBxJ,KAAKoyH,QAAQ7pH,UAAUq/C,EAAiBQ,YAGpE9kD,EAAML,QAAQ,GAAGtB,MAAQ,GAAG+4L,MAAalxL,gBAC3C,CAEAw3L,eAAe19L,EAA4Bf,GACzC,MAAMihM,EAAejhM,EAAK+5L,QAAQwF,aAAa2B,kBACzCC,EACJF,EACAjhM,EAAK+5L,QAAQwF,aAAa6B,sBAC1BphM,EAAK+5L,QAAQwF,aAAa8B,qBAC1BrhM,EAAK+5L,QAAQwF,aAAa+B,oBACtBC,EAAoB9jM,KAAKw3L,eAAekM,EAASF,GACjDO,EAAsB/jM,KAAKw3L,eAC/Bj1L,EAAK+5L,QAAQwF,aAAa6B,sBAC1BH,GAEIQ,EAAqBhkM,KAAKw3L,eAC9Bj1L,EAAK+5L,QAAQwF,aAAa8B,qBAC1BJ,GAEIS,EAAoBjkM,KAAKw3L,eAC7Bj1L,EAAK+5L,QAAQwF,aAAa+B,oBAC1BL,GAGFlgM,EAAM5C,OAAS,CACb,GAAG8I,uBAAuBs6L,KAC1B,GAAGt6L,yBAAyBu6L,KAC5B,GAAGv6L,wBAAwBw6L,KAC3B,GAAGx6L,uBAAuBy6L,MAG5B3gM,EAAML,QAAQ,GAAGV,KAAO,CACtBuhM,EACAC,EACAC,EACAC,GAGF3gM,EAAML,QAAQ,GAAGtB,MAAQ,GAAG3B,KAAKoyH,QAAQ7pH,UACvChG,EAAK+5L,QAAQwF,aAAajuJ,iBACtBrqC,oBACR,CAEA06L,iCAIE,OAHgBlkM,KAAK2xL,WAAWuQ,YAAYiB,iBAAmB,IAC9CnjM,KAAK2xL,WAAWuQ,YAAYgB,kBAAoB,GAErC,CAC9B,CAEQ1L,eAAeE,EAAkBj+E,GACvC,OAAKtnG,aAAWulL,IAAcvlL,aAAWsnG,IAAwB,IAAZA,EAI9Cr8G,KAAKu6L,KAAMD,EAAWj+E,EAAW,IAAM,KAAO,IAH5C,CAIX,iDA5PWqpF,IAAe7hM,8BAAAC,IAAAD,8BAAA8H,IAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,MAAA,4DAAf68K,GAAe15L,UAAA,gBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,6DDzBC5C,mFAuHAA,qFA0EAA,wFAtLAA,2FA8BAA,kFASAA,qFASAA,iFAYAA,oFAYAA,4FASAA,6FAaAA,4FAmBAA,0FAYAA,qFAUAA,uFA6BAA,mFASAA,wFAYAA,8FAWAA,+FAWAA,iGAQAA,uFAarBA,2EAAA,sCAAkC,4CAClC,mCAA0B,w6HAlPlCvI,uBAAA,EAAAkjM,GAAA,iDAAMljM,uBAAA,OAAAA,wBAAA,IAAAwC,EAAAkuL,YAAAluL,EAAA03L,66BEIJl6L,oCAAA,KAIEA,sBAFA,wBAEAA,CAF2C,4EAM3CA,sBAAA,qBCHE,MAAOmjM,GAGXtkM,YAAoBq5G,GAAAn5G,KAAAm5G,iBAClBn5G,KAAKm7L,gBAAkBn7L,KAAKm5G,eAAezmG,KAC7C,iDALW0xL,IAAkBnjM,8BAAAC,MAAA,4DAAlBkjM,GAAkBh7L,UAAA,mBAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,2JAAAC,SAAA,SAAArB,EAAA7F,MAAA,EAAA6F,IDR7BrI,2BADF,WACEA,CAD2B,SAERA,mBAAA,qBAAeA,2BAElCA,uBAAA,EAAAojM,GAAA,oDAOApjM,uBAAA,EAAAqjM,GAAA,yBAAArjM,oCAGFA,0EAViBA,sBAAA,GAAsDA,uBAAtD,oBAAAsjM,EAAAtjM,wBAAA,IAAAwC,EAAA03L,kBAAA,KAAAoJ,EAAA1rF,WAAsD53G,CAAA,WAAAujM,uIEIjE,MAAOC,UACJzkM,KAAA0kM,gBAAkB,QAAS,CAMlC5kM,YAAoB4d,GAAA1d,KAAA0d,QAClB1d,KAAK0d,MAAMoiB,YAAYnxB,UAAW6Q,IAChCxf,KAAK+iK,SAAWvjJ,EAAOujJ,UAAY0hC,GAA4BC,kBAEjE1kM,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAK8sB,UAAYrN,mBAAmBD,EAAO4K,IAC3CpqB,KAAK6sB,YAAcrN,EAAOrZ,MAE9B,iDAfWs+L,IAA2BxjM,8BAAAC,kBAAA,4DAA3BujM,GAA2Br7L,UAAA,6BAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,gCAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICRxCrI,2BAAA,YAAQA,mBAAA,GAAiCA,2BACzCA,sBAAA,2CADQA,uDAAA,GAAAwC,EAAAopB,YAAA,IAAAppB,EAAAqpB,UAAA,IACsB7rB,wBACAA,uBADA,cAAAwC,EAAAopB,YACA5rB,CAD2B,YAAAwC,EAAAqpB,mGC0B7C7rB,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEuDA,qDAUvDA,sBAAA,2DAEWA,kCAAA,OAAAM,EAAA+yB,gDAsBXrzB,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEuDA,sDACvDA,2BAAA,aAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAAM,EAAAgzB,kBAAA,6BAsBFtzB,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAEgEA,4BC/EtE,MAAO0jM,GASX7kM,YACSkO,EACAqjB,EACAoF,EACAvoB,EACA4P,EACAvJ,EACAmiB,GANA12B,KAAAgO,eACAhO,KAAAqxB,sBACArxB,KAAAy2B,cACAz2B,KAAAkO,qBACAlO,KAAA8d,cACA9d,KAAAuU,SACAvU,KAAA02B,wBAZT12B,KAAAs0B,uBAAyB,GAGzBt0B,KAAA+R,MAAQC,KAWNhS,KAAKsc,OAAStc,KAAKgO,aAAag9D,OAChChrE,KAAKuc,SAAW/S,oBAChBxJ,KAAKif,YACP,CAEAA,aACEjf,KAAK02B,sBAAsBO,cAActoB,UAAWuoB,IAClDl3B,KAAKs0B,uBAAyB4C,IAEhCl3B,KAAKq0B,SAAWr0B,KAAK8d,YAAYqZ,MAC/B,CACEytK,YAAa,CACX,KACA,CACEtxL,aAAWC,SACXuO,MAAaC,OAAO,WAAY,IAE5B/hB,KAAKq0B,UACLr0B,KAAKq0B,SAAS1jB,SAAS,iBAAmB3Q,KAAKq0B,SAAS1jB,SAAS,kBAKzEk0L,YAAa,CACX,KACA,CACEvxL,aAAWC,SACXuO,MAAaC,OAAO,WAAY,IAE5B/hB,KAAKq0B,UACLr0B,KAAKq0B,SAAS1jB,SAAS,iBAAmB3Q,KAAKq0B,SAAS1jB,SAAS,iBAIvE,CACEmR,MAAauV,eACXr3B,KAAKy2B,YACL,IAAMz2B,KAAKkO,mBAAmBmrB,cAC9B,CAAC/B,EAAiBC,EAAiBC,KACjCx3B,KAAKy3B,2BAA6Bz3B,KAAK02B,sBAAsBgB,qBAC3DH,GAEFv3B,KAAKu0B,kBAAoBpiB,cAAYqlB,EAAW,GAAE,KAK1DstK,mBAAoB,CAAC,KAAM,CAACxxL,aAAWC,YAEzC,CACEF,WAAY,CAACyO,MAAatmB,MAAM,cAAe,wBAGrD,CAEAu4B,WACE,GAAI/zB,KAAKq0B,SAASzO,SAChB,OAEF,MAAMiQ,EAAW71B,KAAKkO,mBAAmBmrB,cACnC+oB,EAAcpiD,KAAKq0B,SAAS1jB,SAAS,eACrC0xC,EAAcriD,KAAKq0B,SAAS1jB,SAAS,eAC3C3Q,KAAKy2B,YAAY0rB,eAAetsB,EAAUusB,EAAaC,GAAa1zC,UAClE,IAAM3O,KAAK+kM,mBACX,KACE/kM,KAAKq0B,SAAS9O,UAAU,CAAEE,gBAAgB,GAAM,EAGtD,CAMAs/K,mBACE/kM,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,mCACxDxJ,KAAKuU,OAAOC,SAAS,CAAC,UACxB,iDA/FWmwL,IAAyB1jM,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,MAAA,4DAAzB4+K,GAAyBv7L,UAAA,4BAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,6BDhBP5C,qFAAA,kCAAyB,qCAOlCA,yFA4BCA,yFA0CDA,iGAtDCA,oGAGAA,wHAoCAA,oGAGAA,wHA2BAA,oGAGAA,ggDAhGjBvI,2BALN,WAKMA,CALmB,cAKnBA,CAFa,WAEbA,CADgB,YAChBA,mBAAA,0EAC6EA,2BAKzEA,2BAHJ,WAGIA,CAHmB,WAGnBA,CAD0B,eAC1BA,mBAAA,MAEwBA,2BAEtBA,2BADF,YACEA,CAD6B,aAS3BA,sBAPA,cAOAA,CADiB,gBAInBA,2BAIAA,uBAHA,GAAA+jM,GAAA,cAGA/jM,CADW,GAAAgkM,GAAA,eAKfhkM,6BAMIA,2BAHJ,YAGIA,CAHwB,cAGxBA,CADuB,cACvBA,mBAAA,MACuBA,2BACvBA,uBAAA,GAAAikM,GAAA,oBAIFjkM,2BAEEA,2BADF,YACEA,CAD6B,aAQ3BA,sBANA,cAMAA,CADqC,gBAKvCA,2BACAA,2BAAA,aACEA,sBAAA,aAIFA,2BAOAA,uBANA,GAAAkkM,GAAA,cAMAlkM,CAJW,GAAAmkM,GAAA,cAIXnkM,CADW,GAAAokM,GAAA,eAMfpkM,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEgCA,2BAE9BA,2BADF,YACEA,CAD6B,aAQ3BA,sBANA,cAMAA,CAD4C,gBAI9CA,2BAIAA,uBAHA,GAAAqkM,GAAA,cAGArkM,CADW,GAAAskM,GAAA,eAMjBtkM,+BAGEA,2BADF,YACEA,CADuB,qGACDA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAO7D9yB,8EAhHQA,+CAAA,YAAAwC,EAAA4wB,UAIuBpzB,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,KAAAwC,EAAA8Y,sCAsBhEtb,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAWKvkM,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA6wB,uBAAAl5B,OAAA,GAmBL6F,sBAAA,GAAAA,uBAAAwC,EAAAg0B,4BAEAx2B,kCAAA,QAAAwC,EAAA8wB,mBAIAtzB,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,mBAwBAvkM,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,qBAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,qBAAAm1L,EAAA,UAQWvkM,sBAAA,GACAA,uBADA,OAAAwC,EAAA4wB,SACApzB,CADiB,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,sVEvFzCtb,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEuDA,mDAuBvDA,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEuDA,sDACvDA,2BAAA,aAEEA,mBAAA,GACFA,qEADEA,uDAAA,IAAAM,EAAAgzB,kBAAA,6BAiBFtzB,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,KAEgEA,4BC9DhE,MAAOwkM,WAAmCd,GAC9C7kM,YACSkO,EACAqjB,EACAoF,EACAvoB,EACA4P,EACAvJ,EACAmiB,EACAF,GAEPnoB,MACEL,EACAqjB,EACAoF,EACAvoB,EACA4P,EACAvJ,EACAmiB,GAhBK12B,KAAAgO,eACAhO,KAAAqxB,sBACArxB,KAAAy2B,cACAz2B,KAAAkO,qBACAlO,KAAA8d,cACA9d,KAAAuU,SACAvU,KAAA02B,wBACA12B,KAAAw2B,aAWT,CAEAuuK,mBAKE/kM,KAAKw2B,YAAYkD,QACnB,CAEAP,WACEn5B,KAAKw2B,YAAYkD,QACnB,iDAhCW+rK,IAA0BxkM,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,MAAA9kB,8BAAA+kB,MAAA,4DAA1By/K,GAA0Br8L,UAAA,6BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,yBDhB5B5C,uGACAA,iIAqBMA,oGAGAA,wHAyBAA,oGAGAA,wHAsBAA,oGAGAA,ywCA9EfvI,2BADF,QACEA,CADG,QACHA,mBAAA,KAAmCA,2BACnCA,2BAAA,QAAAA,mBAAA,KAA6DA,2BAOzDA,2BANJ,aAMIA,CAJa,WAIbA,CADmC,YASjCA,sBAPA,aAOAA,CADiB,gBAInBA,2BAIAA,uBAHA,GAAAykM,GAAA,cAGAzkM,CADW,GAAA0kM,GAAA,eAIb1kM,2BAIEA,2BADF,YACEA,CADmC,aAQjCA,sBANA,cAMAA,CADqC,gBAKvCA,2BACAA,2BAAA,aACEA,sBAAA,aAIFA,2BAOAA,uBANA,GAAA2kM,GAAA,cAMA3kM,CAJW,GAAA4kM,GAAA,cAIX5kM,CADW,GAAA6kM,GAAA,eAKb7kM,2BAIEA,2BADF,YACEA,CADmC,aAQjCA,sBANA,cAMAA,CAD4C,gBAI9CA,2BAIAA,uBAHA,GAAA8kM,GAAA,cAGA9kM,CADW,GAAA+kM,GAAA,eAIb/kM,2BACAA,2BAAA,qGACsBA,uBADA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,EAC/B9yB,CADgC,6BAAAA,iCAAAsL,GAAAtL,wBACbwC,EAAA01B,WAAU,GAMvDl4B,0EApFQA,sBAAA,GAAAA,uBAAA,YAAAwC,EAAA4wB,UAkBKpzB,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAmBAvkM,sBAAA,GAAAA,uBAAAwC,EAAAg0B,4BAEAx2B,kCAAA,QAAAwC,EAAA8wB,mBAIAtzB,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,cAAAm1L,EAAA,mBAmBAvkM,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,qBAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAwC,EAAA4wB,SAAAhkB,UAAA,qBAAAm1L,EAAA,UAKavkM,wBAEAA,uBAFA,OAAAwC,EAAA4wB,SAEApzB,CAFiB,WAAAwC,EAAA4wB,SAAA1e,QAEjB1U,CAD6B,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,66CEpFjD,MAAO0pL,2BCuBPhlM,2BAAA,YAAAA,mBAAA,KAE8BA,mDAoB1BA,2BAAA,YAAAA,mBAAA,KAE8BA,4FA7CtCA,2BAFF,UAEEA,CADyB,UACLA,mBAAA,gBAAUA,2BAC9BA,2BAAA,eACMA,uBAAA,sBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAYM,EAAA69B,QAAO,GAMrBn+B,2BADF,WACEA,CAD2D,cAC3DA,mBAAA,KAEoBA,2BACpBA,2BAAA,gBAEOA,6BAAA,yBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,kEAAAM,EAAA48E,MAAAtoD,SAAAjrB,KAAArJ,EAAA48E,MAAAtoD,SAAAjrB,GAAA3J,wBAAA2J,EAAA,GAFP3J,2BAUAA,uBAAA,GAAAilM,GAAA,cAGFjlM,2BAOMA,2BAJN,YAIMA,CAHiB,YAGjBA,CAFwC,YAExCA,CAD+C,eAC/CA,mBAAA,MAEoBA,2BACpBA,2BAAA,iBAEOA,6BAAA,yBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,kEAAAM,EAAA48E,MAAApoD,SAAAnrB,KAAArJ,EAAA48E,MAAApoD,SAAAnrB,GAAA3J,wBAAA2J,EAAA,GAFP3J,2BASAA,uBAAA,GAAAklM,GAAA,cAGFllM,2BACAA,2BAAA,cACEA,sBAAA,gBAONA,+BAEAA,sBAAA,eAMJA,iKAlDaA,sBAAA,GAAAA,6BAAA,UAAAM,EAAA48E,MAAAtoD,4DASD50B,sBAAA,GAAAA,uBAAA,QAAAmlM,EAAA9lG,WAAA+lG,EAAA90L,QAAA80L,EAAA1wL,SAcK1U,sBAAA,GAAAA,6BAAA,UAAAM,EAAA48E,MAAApoD,4DAQD90B,sBAAA,GAAAA,uBAAA,QAAAmlM,EAAA9lG,WAAAgmG,EAAA/0L,QAAA+0L,EAAA3wL,SAeL1U,sBAAA,GAAAA,uBAAA,WAAAmlM,EAAAzwL,UC9CL,MAAO4wL,GAMXzmM,YACU02B,EACAtoB,EACA2Z,EACAnK,EACAnJ,GAJAvU,KAAAw2B,cACAx2B,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAA0d,QACA1d,KAAAuU,SAVVvU,KAAAm+E,MAAQ,IAAI8nH,GACZjmM,KAAAwmM,eAAgB,EAEhBxmM,KAAAymM,eAAgB,CAQb,CAEHh4L,WACE,GAAIzO,KAAKkO,mBAAmBgmG,aAC1Bl0G,KAAKuU,OAAOC,SAAS,CAAC,SACjB,CAILxU,KAAK6nB,aAAa2L,aAElB,IAAI9U,EAAgB,KACpB,IAAsD,IAAlDghB,OAAOC,SAASy7F,KAAKr/H,QAAQ,iBAAyB,CACxD2iB,EAAQghB,OAAOC,SAASy7F,KAAKz+H,MAAM,iBAAiB,GACpD,MAAM+pM,EAAMhnK,OAAOC,SAASra,WAC5Boa,OAAOinK,QAAQC,aAAa,GAAIxjJ,SAAS/9C,MAAOqhM,EAAI/pM,MAAM,KAAK,GACjE,CACAqD,KAAKw2B,YAAY2I,MAAMzgB,GAAO/P,UAAWywB,IACnCA,EAAMynK,WACR7mM,KAAKymM,cAAyC,mBAAzBrnK,EAAM0nK,eACH,YAApB1nK,EAAMynK,UACR7mM,KAAKwmM,eAAgB,EAErB9mK,OAAOC,SAASv3B,QAAQg3B,EAAMynK,aAGhC7mM,KAAKkO,mBAAmBsqB,IACtB4G,EAAMvJ,SACNuJ,EAAMG,YACNH,EAAMI,IACNJ,EAAMzH,mBAER33B,KAAKuU,OAAOC,SAAS,CAAC,KAAG,EAG/B,CACF,CAEA4qB,QACE2nD,aAAa6D,QAAQ,kBAAmBlrD,OAAOC,SAASm7J,QACxD96L,KAAKw2B,YAAY4I,MAAMp/B,KAAKm+E,OAAOxvE,UAAU,KAC3C,MAAMo4L,EAAU/mM,KAAKymM,cAAgB,IAAM,kBAC3C,IAAIznL,EAAM7M,QAAMnS,KAAK0d,MAAMmiB,SAASC,YAAa,YAAainK,IACzD/mM,KAAKymM,eAAkE,eAAjDzmM,KAAK0d,MAAMmiB,SAASC,YAAYq0E,YACzDn1F,EAAM,mBAEG,mBAAPA,EACFhf,KAAKuU,OAAOC,SAAS,CAACwK,GAAM,CAAE8gB,YAAa,CAAEooI,SAAS,KAEtDloK,KAAKuU,OAAOC,SAAS,CAACwK,GAAI,EAGhC,iDAhEWunL,IAActlM,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,kBAAAhI,8BAAAgI,UAAA,4DAAds9L,GAAcn9L,UAAA,eAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,mBD+CT5C,mFAlDAA,qFAuBIA,qFAVNA,iGAsBIA,uqCA/CpBvI,uBAAA,EAAA+lM,GAAA,mBACM/lM,uBAAA,OAAAwC,EAAA+iM,4gCEWIvlM,2BAAA,WAC+BA,mBAAA,GAAaA,sEAAbA,sDAAA+K,EAAA4yB,oCAC/B39B,2BAAA,QAAAA,wBAAA,KACiCA,sBAAA,UAEjCA,8FAFoCA,sBAAA,GAAAA,kCAAA,OAAA+K,EAAA+pD,OAAA90D,2BAAqCA,sBAAA+K,EAAAi7L,mEAR7EhmM,2BAAA,sCACEA,sBAAA,0CAGMA,2BADN,WACMA,CADwB,OACxBA,CAAA,OAAGA,mBAAA,GAAgBA,6BAGvBA,uBAFA,EAAAimM,GAAA,YAEAjmM,CAD+B,EAAAkmM,GAAA,aAMnClmM,uEAXOA,+CAAA,UAAA+K,EAAAuc,MAGItnB,sBAAA,GAAAA,8BAAA+K,EAAA2yB,QAEF19B,+CAAA,OAAA+K,EAAA2yB,SAAA3yB,EAAA4yB,SACA39B,+CAAA,OAAA+K,EAAAg3B,oCAUL/hC,2BAAA,eAAAA,mBAAA,KAG6BA,sEAFrBA,uBAAA,aAAA+K,EAAAo7L,aAEKnmM,8CAAA+K,EAAAq7L,kEACbpmM,2BAAA,eAAAA,mBAAA,KAGsCA,sEAF9BA,uBAAA,aAAA+K,EAAAs7L,sBAEKrmM,8CAAA+K,EAAAu7L,2EATftmM,2BAAA,YAMEA,uBAJA,EAAAumM,GAAA,gBAIAvmM,CADa,EAAAwmM,GAAA,iBAKfxmM,mGANWA,wBAAiBA,uBAAjB,QAAA+K,EAAAowG,SAAiBn7G,CAAA,WAAAymM,GAIjBzmM,+CAAA,OAAA+K,EAAAu7L,qBAAAv7L,EAAAs7L,uFASjBrmM,2BAAA,eACQA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAAtI,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAA27L,cAAa,GAD9B1mM,mBAAA,KAI6BA,uHAAhBA,8CAAA+K,EAAAq7L,iEAJbpmM,uBAAA,EAAA2mM,GAAA,0DAGS3mM,uBAAA,OAAA+K,EAAAowG,kCAMTn7G,sBAAA,UAGEA,2BADF,WACEA,CAD4B,QAC5BA,wBAAA,KAASA,sBAAA,OAAqBA,mDAE9BA,2BAAA,WAAAA,mBAAA,KAGFA,qDAMEA,2BAFF,WAEEA,CAD2C,eAC3CA,mBAAA,MAGFA,oCAFUA,+CAAA,qDAHVA,uBAAA,EAAA4mM,GAAA,qFAC0B5mM,uBAApB,QAAA+K,EAAAkwG,YAAoBj7G,CAAA,WAAA6mM,oEAUxB7mM,2BAFF,WAEEA,CADuD,eAE/CA,uBAAA,mBAAAA,0BAAA21D,GAAA,MAAA5qD,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAA+7L,eAAc,GAD/B9mM,mBAAA,yCAGFA,0EADeA,sBAAA,GAAAA,8CAAA,IAAA+K,EAAAkwG,mEAJfj7G,uBAAA,EAAA+mM,GAAA,uDACM/mM,uBAAA,OAAA+K,EAAAkwG,eAAAlwG,EAAAq7L,YAAAr7L,EAAAo7L,eCpDF,MAAOa,GAsBXnoM,YACUyU,EACAqhD,EACA9pC,EACAuF,EACAgoB,GAJAr5C,KAAAuU,SACAvU,KAAA41D,aACA51D,KAAA8rB,OACA9rB,KAAAqxB,sBACArxB,KAAAq5C,mBAPVr5C,KAAA+R,MAAQC,IAQL,CAEHvD,WACEzO,KAAKw6E,YACLx6E,KAAKkoM,mBAAqBloM,KAAKuU,OAAOw6I,OACnC//I,QAAKqV,UAAQwuC,GAAeA,aAAiBs1I,kBAC7Cx5L,UAAU,KACT3O,KAAKw6E,WAAS,EAEpB,CAEAmtH,cACE3nM,KAAK8rB,KAAKzwB,KAAK,UAAU2E,KAAKsqC,sBAAuB,IAAI37B,UAAU,CACjEc,KAAMA,KACJzP,KAAKqxB,oBAAoBxG,KAAKmH,KAAiB1Q,KAAM,eAAethB,KAAKo+B,YAAW,EAEtF7c,MAAQA,IACNvhB,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBzQ,MAAOA,EAAK,EAE7D6D,SAAUA,KACRu+B,WAAW,KACT3jD,KAAKuU,OAAOC,SAAS,CAACxU,KAAKsqC,YAC3BtqC,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAAS,cAAcjyB,KAAKo+B,YAAW,EACrF,IAAI,GAGb,CAEiDgqK,cAAcv1I,GAC7DA,EAAMw1I,aAAc,CACtB,CAEA7tH,YACE,IACEx6E,KAAKuU,OAAO+zL,oBAAsB,SAClCtoM,KAAK4+B,QAAU+nK,QAAQt8K,MAAMuU,QAC7B5+B,KAAK2+B,OAASgoK,QAAQt8K,MAAMsU,OAC5B3+B,KAAKgjC,QAAU2jK,QAAQt8K,MAAM2Y,QAC7BhjC,KAAKinM,YAAcN,QAAQt8K,MAAMsxF,aACjC37G,KAAKuoB,KAAOo+K,QAAQt8K,MAAM9B,KAC1BvoB,KAAKkxD,OAASy1I,QAAQt8K,MAAM6mC,OAC5BlxD,KAAKo8G,SAAWuqF,QAAQt8K,MAAM+xF,SAC9Bp8G,KAAKsqC,UAAYq8J,QAAQt8K,MAAMigB,UAC/BtqC,KAAKonM,YAAcT,QAAQt8K,MAAMwxF,aACjC77G,KAAKqnM,WAAaV,QAAQt8K,MAAMuxF,YAChC57G,KAAKuoM,YAAc5B,QAAQt8K,MAAMyxF,aACjC97G,KAAKsnM,qBAAuBX,QAAQt8K,MAAM2xF,uBAC1Ch8G,KAAKunM,oBAAsBZ,QAAQt8K,MAAM0xF,sBACzC/7G,KAAKwoM,qBAAuB7B,QAAQt8K,MAAM4xF,uBAC1Cj8G,KAAKk8G,YAAcyqF,QAAQt8K,MAAM6xF,YACjCl8G,KAAK6mC,WAAa8/J,QAAQt8K,MAAM8xF,YAChCn8G,KAAKo+B,UAAYuoK,QAAQt8K,MAAM+T,UAC/Bp+B,KAAK+1D,OAAS/1D,KAAK41D,WAAWI,aAAah2D,KAAKgjC,QAClD,OACEhjC,KAAKuU,OAAOC,SAAS,CAAC,UACxB,CACF,CAEAwV,cACMhqB,KAAKkoM,oBACPloM,KAAKkoM,mBAAmBh+K,aAE5B,CAEA69K,eACE/nM,KAAKq5C,iBAAiBzS,kBAAkB5mC,KAAKk8G,aAAa,EAAO,KAAMl8G,KAAK6mC,WAC9E,iDA9FWohK,IAAchnM,8BAAAC,UAAAD,8BAAA8H,MAAA9H,8BAAA+H,cAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAAd++L,GAAc7+L,UAAA,eAAAuoD,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAdrI,uBAAA,wBAAA2J,GAAA,OAAAnH,EAAA2kM,cAAAx9L,EAAqB,KAAA3J,uFDHfuI,8FAAwB,4CAAoC,oEACxD,8DAWAA,2EAAA,mCAIAA,2EAAA,mCAYRA,2EAAA,mCAQFA,2EAAA,kDAAiB,uCAGjBA,sLAUIA,4FASAA,kFAAO,8/BAxEtBvI,2BADF,SACEA,CADI,WACGA,mBAAA,gBAAUA,2BACjBA,sBAAA,aACFA,2BAGIA,2BAFJ,WAEIA,CAFwB,WAExBA,CAD+D,YAE7DA,uBAAA,EAAAwnM,GAAA,cAcAxnM,2BAAA,YACEA,uBAAA,EAAAynM,GAAA,cAcRznM,iCAgCAA,uBA9BA,GAAA0nM,GAAA,yBAAA1nM,mCA8BAA,CA9BiC,GAAA2nM,GAAA,yBAAA3nM,mCA8BjCA,CArBwB,GAAA4nM,GAAA,yBAAA5nM,mCAqBxBA,CAT8B,GAAA6nM,GAAA,yBAAA7nM,4GApDlBA,sBAAA,GAAyBA,uBAAzB,OAAAwC,EAAAk7B,QAAAl7B,EAAAm7B,QAAyB39B,CAAA,WAAA8nM,GAgBvB9nM,sBAAA,GAA+CA,uBAA/C,OAAAwC,EAAA4jM,YAAA5jM,EAAA2jM,aAAA3jM,EAAA24G,SAA+Cn7G,CAAA,WAAA+nM,+OEhBvD,MAAOC,sDAAoB,4DAApBA,GAAoB7/L,UAAA,sBAAAoB,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GCPjCrI,sBAAA,yDCEYioM,eCMN,MAAOC,GACXrpM,YAAoBgsB,EAA+Cs9K,GAA/CppM,KAAA8rB,OAA+C9rB,KAAAopM,UAAmB,CAEtFC,YACE,OAAOrpM,KAAKopM,UAAYhhI,KAAYkhI,YACtC,CAEAC,UAAUC,GACRpmJ,SAASqmJ,OAAS,WAAWD,GAC/B,CAEAE,eACE,OAAO1pM,KAAK8rB,KAAKpZ,IAAc,eACjC,iDAbWy2L,IAAeloM,qBAAAC,cAAAD,qBACoB0oM,aAAS,+DAD5CR,GAAehoM,QAAfgoM,GAAe/nM,UAAAC,WAFd,QAAM,kECLlBJ,oCAAA,GACEA,2BAAA,uBAAiBA,uBAAA,yBAAA2oM,EAAA3oM,0BAAAsL,GAAAgkD,UAAA//B,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAAq5K,eAAAD,EAAArnL,KAAwB,GAAEthB,mBAAA,GAAgBA,2FAAhBA,sBAAA,GAAAA,8BAAA2oM,EAAAtpM,SFAxD,SAAY4oM,GACVA,EAAAY,GAAA,oBACAZ,EAAAa,GAAA,UACAb,EAAA,mBACAA,EAAAc,GAAA,aACAd,EAAAe,GAAA,cACAf,EAAA9+K,GAAA,mBACA8+K,EAAAgB,GAAA,WACAhB,EAAAiB,GAAA,qBACAjB,EAAAkB,GAAA,qBACAlB,EAAAmB,GAAA,SACAnB,EAAAoB,GAAA,4BACApB,EAAA,yCACAA,EAAA,6CACF,CAdA,CAAYA,QAAkB,KGUxB,MAAOqB,GAKXzqM,YAAoB0qM,GAAAxqM,KAAAwqM,kBAJpBxqM,KAAAyqM,aAAevB,GACflpM,KAAA0qM,mBAA0C,EAGa,CAEvDj8L,WACEzO,KAAK2qM,iBAAmB3qM,KAAKwqM,gBAAgBnB,YAE7CrpM,KAAKwqM,gBAAgBd,eAAe/6L,UAAWi8L,IAC7C5qM,KAAK0qM,mBAAqBv4L,SAAO+2L,GAAoB0B,EAAK,EAE9D,CAMAC,eACEnrK,OAAOC,SAASmrK,QAClB,CAEAjB,eAAeL,GACbxpM,KAAKwqM,gBAAgBjB,UAAUC,GAC/BxpM,KAAK6qM,cACP,iDA1BWN,IAAyBtpM,8BAAAC,IAAA,4DAAzBqpM,GAAyBnhM,UAAA,2BAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,gDAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDZtCrI,2BAAA,uBACEA,uBAAA,EAAA8pM,GAAA,uDAGF9pM,kCAJiBA,uBAAA,QAAAwC,EAAAgnM,aAAAhnM,EAAAknM,mBACgB1pM,+CAAA,UAAAA,wBAAA,IAAAwC,EAAAinM,4FEK3B,MAAOM,GAGXlrM,YAAoBgsB,GAAA9rB,KAAA8rB,OAFpB9rB,KAAAmrH,UAAY,4BAE2B,CAEvC8/E,gBACE,OAAOjrM,KAAK8rB,KAAKpZ,IAAY1S,KAAKmrH,UACpC,iDAPW6/E,IAAwB/pM,qBAAAC,cAAA,+DAAxB8pM,GAAwB7pM,QAAxB6pM,GAAwB5pM,UAAAC,WAFvB,QAAM,4BCJpBJ,2BAAA,SAC6CA,mBAAA,GAAgBA,gDAAhBA,sDAAAiqM,ICWvC,MAAOC,GAEXrrM,YAAoBsrM,GAAAprM,KAAAorM,0BAAqD,CAEzE38L,WACEzO,KAAKqrM,YAAcrrM,KAAKorM,yBAAyBH,eACnD,iDANWE,IAA0BlqM,8BAAAC,IAAA,4DAA1BiqM,GAA0B/hM,UAAA,6BAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,mDAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDZvCrI,uBAAA,EAAAqqM,GAAA,+CACIrqM,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA4nM,6KEqBUpqM,2BAFF,UAEEA,CADmC,iDAKrCA,uDAJUA,0DAAA,UAAAsqM,EAAAvoK,SACA/hC,sBAAAsqM,EAAA36I,kCChBhB,MAAO46I,GALb1rM,cAMEE,KAAAyrM,SAAkB,CAChB,CAAEzoK,QAAS,OAAQ4tB,KAAMpnD,iBACzB,CAAEw5B,QAAS,WAAY4tB,KAAMpnD,qBAC7B,CAAEw5B,QAAS,aAAc4tB,KAAMpnD,wEAJtBgiM,GAAoB,4DAApBA,GAAoBpiM,UAAA,sBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDgBF5C,2EAAA,+hBArB3BvI,2BAFJ,WAEIA,CAF4B,WAE5BA,CADM,WAEJA,sBAAA,SACAA,2BAAA,WACEA,sBAAA,0BAGNA,+BAIMA,2BAHN,YAGMA,CAHG,UAGHA,CAFmB,UAEnBA,CAD2B,WAEzBA,sBAAA,oBACFA,2BACAA,2BAAA,YACEA,sBAAA,YAGAA,2BAAA,YACEA,uBAAA,GAAAyqM,GAAA,aAOFzqM,2BACAA,sBAAA,6BAKVA,0CAZoCA,sBAAA,IAAAA,uBAAA,UAAAwC,EAAAgoM,w+BEX9B,MAAOE,GAKX7rM,YAC4BsjD,EAClB/c,EACA5jC,GAFkBzC,KAAAojD,WAClBpjD,KAAAqmC,iBACArmC,KAAAyC,WACP,CAEHgnB,OACEzpB,KAAKgf,IAAMhf,KAAKojD,SAAS6N,eAAe,cAAc26I,aAAa,QAEnE5rM,KAAKw4H,IAAMx4H,KAAKqmC,eAAe13B,UAAW4pG,IACxCv4G,KAAK6rM,WAAWtzF,EAAQuzF,cAAa,EAEzC,CAEAD,WAAWn9L,GACT,GAAIA,IAAW1O,KAAK+rM,UAClB,OAGF/rM,KAAK+rM,UAAYr9L,EAEjB,MAAMs9L,EAAUhsM,KAAKojD,SAAS6N,eAAe,aAIvCg7I,EAASjsM,KAAKojD,SAASu0C,cAAc,UAC3Cs0G,EAAOjyM,MAJa,GAKpBiyM,EAAOhyM,OALa,GAOpB,MAAMuL,EAAUymM,EAAOC,WAAW,MAC5BC,EAAMnsM,KAAKojD,SAASu0C,cAAc,OACxCw0G,EAAIC,IAAMpsM,KAAKgf,IAEfmtL,EAAI/lG,OAAS,KAEX5gG,EAAQ6mM,UAAUF,EAAK,EAAG,EAbR,OAedl6L,OAAOC,KAAK0+K,IAAa1uL,SAASwM,KAEpClJ,EAAQ5B,OACR4B,EAAQ8mM,yBAA2B,kBACnC9mM,EAAQ+mM,YACR/mM,EAAQgnM,IAAIP,EAAOjyM,MAnBRyyM,IAmBgCzmM,EAAY,EAAG,EAAI5I,KAAKsvM,IACnElnM,EAAQzL,OACRyL,EAAQjB,UAGRiB,EAAQ+mM,YACR/mM,EAAQgnM,IAAIP,EAAOjyM,MAzBRyyM,MAyBwC,EAAG,EAAIrvM,KAAKsvM,IAE/DlnM,EAAQ+wL,UAAYv2L,KAAKyC,UAAUgC,cAAcmsL,GAAYliL,IAC7DlJ,EAAQzL,QAIViyM,EAAQv0G,aAAa,OAAQw0G,EAAOU,UAAU,aAAY,CAE9D,CAEA3iL,cACEhqB,KAAK6rM,aACL7rM,KAAKw4H,KAAKtuG,aACZ,iDAnEWyhL,IAAc1qM,qBAMf2rM,YAAQ3rM,qBAAAC,MAAAD,qBAAA8H,MAAA,+DANP4iM,GAAcxqM,QAAdwqM,GAAcvqM,WAAA,kBCMrB,MAAOyrM,GAGX/sM,YAAoBgsB,GAAA9rB,KAAA8rB,OAFZ9rB,KAAAgf,IAAM,aAEyB,CAEvCtM,MACE,OAAO1S,KAAK8rB,KAAKpZ,IAAiB1S,KAAKgf,IACzC,iDAPW6tL,IAAW5rM,qBAAAC,cAAA,+DAAX2rM,GAAW1rM,QAAX0rM,GAAWzrM,UAAAC,WAFV,QAAM,kBCFd,MAAOyrM,GAOXhtM,YAAoBitM,GAAA/sM,KAAA+sM,cALb/sM,KAAAgtM,WAAa,IAAIx+L,kBAA6B,MAG7CxO,KAAAitM,gBAAkB,wBAGxBjtM,KAAKktM,MAAQltM,KAAKgtM,WAAWjlK,eAE7B/nC,KAAKkjH,gBAAe9/F,OAAG,GACpBpU,QACCyP,YAAS,IAAMze,KAAK+sM,YAAYr6L,QAAK,EACrC8R,cAAYjD,IAENpP,aAAaoP,EAAMwL,iBACrBxL,EAAMwL,iBAEDqvK,WACR,EACD98J,OAAK6tK,GAAsBntM,KAAKotM,gBAAgBD,KAAK,EACrD9lK,SAAM,MAAK,EACXgmK,aAAM,EACNl6F,SAEDxkG,WACL,CAEAqb,cACEhqB,KAAKkjH,aAAah5F,aACpB,CAEAqzC,OAIE,MAAM4vI,EAAantM,KAAKgtM,WAAWr8L,WACnC,GAAIw8L,EAAM,CACR,MAAM7sM,EAAQ,GAAG6sM,EAAKnpB,YAAYmpB,EAAKG,MACvC,OAAQH,EAAKnpB,UACX,IAAK,OACHj9F,aAAa6D,QAAQ5qF,KAAKitM,gBAAiB3sM,GAC3CwgH,eAAeliD,WAAW5+D,KAAKitM,iBAC/B,MACF,IAAK,UACHnsF,eAAel2B,QAAQ5qF,KAAKitM,gBAAiB3sM,GAC7CymF,aAAanoB,WAAW5+D,KAAKitM,iBAGnC,CACAjtM,KAAKgtM,WAAWv9L,KAAK,KACvB,CAEA29L,gBAAgBD,GACd,MAAM7sM,EACJwgH,eAAev2B,QAAQvqF,KAAKitM,kBAAoBlmH,aAAawD,QAAQvqF,KAAKitM,iBAC5E,IAAIvzH,EAAmBvnE,SAAS7R,GAGhC,IAAKo5E,GAAWyzH,EAAM,CACpB,MAAOnpB,EAAUspB,GAAOhtM,EAAM3D,MAAM,MAChCqnL,IAAampB,EAAKnpB,UAAYspB,IAAQH,EAAKG,OAC7C5zH,GAAU,EACVonC,eAAeliD,WAAW5+D,KAAKitM,iBAC/BlmH,aAAanoB,WAAW5+D,KAAKitM,iBAEjC,CACIvzH,GACF15E,KAAKgtM,WAAWv9L,KAAK09L,EAEzB,iDAtEWL,IAAuB7rM,qBAAAC,IAAA,+DAAvB4rM,GAAuB3rM,QAAvB2rM,GAAuB1rM,UAAAC,WAFtB,QAAM,8BCJd,MAAOksM,GACXztM,YAAoB0tM,GAAAxtM,KAAAwtM,eAA+B,CAEnDC,SAASrzM,EAAcskB,GACrB1e,KAAKwtM,cAAch1K,IAAIp+B,EAAMskB,EAAO,KAAM,KAAM,MAAM,EAAM,SAC9D,CAEAgvL,SAAStzM,GACP,OAAO4F,KAAKwtM,cAAc96L,IAAItY,EAChC,CAEAuzM,YAAYvzM,GACV4F,KAAKwtM,cAAcniL,OAAOjxB,EAC5B,iDAbWmzM,IAActsM,qBAAAC,kBAAA,+DAAdqsM,GAAcpsM,QAAdosM,GAAcnsM,UAAAC,WAFb,QAAM,kBCQd,MAAOusM,GAIX9tM,YACU0jL,EACAjB,GADAviL,KAAAwjL,iBACAxjL,KAAAuiL,oBAJFviL,KAAA6tM,gBAAiB,EAMvB7tM,KAAK88G,cAAgB,EACvB,CAEAt3E,UACMxlC,KAAK6tM,gBAGT7tM,KAAKuiL,kBAAkBp0I,iBAAiBh8B,SAAOnS,KAAK88G,gBAAgBnuG,UACjEmuG,GAAkB98G,KAAK8tM,oBAAoBhxF,GAC5C,IAAO98G,KAAK6tM,gBAAiB,EAEjC,CAEQC,oBAAoBhxF,GACG,IAAzBA,EAAc1hH,SAGd4E,KAAK88G,cAAc1hH,OAAS,GAC9B4E,KAAKwjL,eAAeb,kBAClBxwK,YAAU2qG,EAAc5/G,IAAKkxC,GAAiBpuC,KAAK+tM,mBAAmB3/J,MAG1EpuC,KAAK88G,cAAgB98G,KAAK88G,cAAcl0G,OAAOk0G,GACjD,CAEQixF,mBAAmB3/J,GACzB,OAAOpuC,KAAKwjL,eACTZ,sBAAsBx0I,EAAay0I,QACnC3lL,IAAK4lL,GAAU9iL,KAAKwjL,eAAeJ,2BAA2BN,GACnE,iDArCW8qB,IAA6B3sM,qBAAAC,IAAAD,qBAAA8H,MAAA,+DAA7B6kM,GAA6BzsM,QAA7BysM,GAA6BxsM,UAAAC,WAF5B,QAAM,4GCJVJ,2BAJR,QAIQA,CAJ6D,WAI7DA,CAH6B,WAG7BA,CAFwB,WAExBA,CADgC,0CAE9BA,sBAAA,YAIJA,2DAGIA,2BAFJ,WAEIA,CAFkB,WAElBA,CADyB,WACGA,mBAAA,GAA+BA,2BAC3DA,2BAAA,aACEA,sBAAA,yBAIFA,2BAEEA,2BADF,UACEA,CAD8B,eAE5BA,mBAAA,oCACFA,2BAEAA,2BAAA,cACEA,mBAAA,IAOZA,qCAEAA,sBAAA,SACFA,oFA9BeA,sBAAA,GACAA,uBADA,UAAAuvB,EAAAze,MAAA0rF,OACAx8F,CADwB,OAAAuvB,EAAAze,MAAA8qD,QAOD57D,sBAAA,GAAAA,8BAAA+sM,EAAAx8K,aAGTvwB,sBAAA,GAEAA,uBAFA,cAAA+sM,EAAA,KAAAA,EAAAvrF,SAEAxhH,CAFiC,aAEjCA,CADgB,eAK/BA,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,KAAA+sM,EAAAC,YAAA,KAIAhtM,sBAAA,GAAAA,+BAAA,IAAA+sM,EAAAvrF,UAAA,mCAzBdxhH,uBAAA,EAAAitM,GAAA,yDAAkDjtM,uBAAnB,UAAAuvB,EAAA4xF,eAAmBnhH,CAAA,eAAAuvB,EAAAzc,4EAwEtC9S,2BAAA,eAIQA,uBAAA,mBAAAA,0BAAAiU,GAAA,MAAAi5L,EAAAltM,4BAAAsvD,UAAA//B,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAwd,QAAAmgK,GAAqB,gCACpCltM,sBAAA,YAGFA,wEAHOA,wBACAA,uBADA,UAAAuvB,EAAAze,MAAA4rF,KACA18F,CADsB,OAAAuvB,EAAAze,MAAA8qD,yEAI7B57D,2BAAA,eAIQA,uBAAA,mBAAAA,0BAAAkqI,GAAA,MAAAgjE,EAAAltM,4BAAAsvD,UAAA//B,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA49K,OAAAD,GAAoB,gCACnCltM,sBAAA,YAGFA,wEAHOA,wBACAA,uBADA,UAAAuvB,EAAAze,MAAA2rF,KACAz8F,CADsB,OAAAuvB,EAAAze,MAAA8qD,mCAU3B57D,oCAAA,GACEA,2BAAA,WACEA,oCAAA,GAAAA,mBAAA,yCAA4CA,mBAAA,oCAC9CA,2BACAA,sBAAA,gGAF8CA,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,IAAAktM,EAAA7oK,UAAA,sEAzCpDrkC,2BALR,WAKQA,CAJkC,WAIlCA,CAHqC,WAGrCA,CAFwB,WAExBA,CADgC,aAG9BA,sBADA,SACAA,CADiD,UAGrDA,6BAGIA,2BAFJ,WAEIA,CAFmB,WAEnBA,CADyB,eAIjBA,uBAAA,iBAAA2J,GAAA,MAAAyjM,EAAAptM,0BAAA21D,GAAA1vD,MAASspB,OAATvvB,0BAAA,GAASw+B,OAAA4uK,GAASptM,wBAAE2J,EAAA4xD,kBAAwB,gCAClDv7D,sBAAA,aAGFA,2BAUAA,uBATA,GAAAqtM,GAAA,gBASArtM,CALwC,GAAAstM,GAAA,+CAgBxCttM,2BAAA,YAA4BA,mBAAA,IAAwBA,2BACpDA,sBAAA,WAEAA,2BAAA,WACEA,uBAAA,GAAAutM,GAAA,uBAMAvtM,2BAAA,+CACiDA,mBAAA,0CAA2CA,2BAC5FA,sBAAA,WAOVA,mCAEAA,sBAAA,SACFA,sFA7DKA,uBAAA,UAAAktM,EAAAhkG,aAISlpG,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAAyI,GAAA8mB,EAAAze,MAAAwtF,MAAA/uE,EAAAze,MAAA8nD,MAAAs0I,EAAAjkG,YACDjpG,+CAAA,UAAAA,4BAAA,GAAAK,GAAAkvB,EAAAze,MAAA0rF,OAAAjtE,EAAAze,MAAA0tF,UACAx+F,+CAAA,UAAAA,4BAAA,GAAAyI,GAAA8mB,EAAAze,MAAAytF,QAAAhvE,EAAAze,MAAA4tF,QAAAwuG,EAAAlkG,YASIhpG,sBAAA,GACAA,uBADA,UAAAuvB,EAAAze,MAAAsqF,MACAp7F,CADuB,OAAAuvB,EAAAze,MAAA8qD,QAIrB57D,+CAAA,sBAAAktM,EAAA9kG,aAAA,IAAA8kG,EAAAhoM,OAAAgoM,EAAAxkG,eASA1oG,+CAAA,sBAAAktM,EAAA9kG,aAAA,IAAA8kG,EAAAhoM,MAAAgoM,EAAAxkG,eAWmB1oG,sBAAA,GAAAA,8BAAAktM,EAAA9oM,OAEzBpE,+CAAA,YAAAktM,EAAAvvK,QAAA39B,4BAEcA,sBAAA,GAAAA,uBAAA,OAAAktM,EAAA7oK,UAORrkC,+CAAA,QAAAA,wBAAA,MAAAktM,EAAApkG,YAA0C9oG,sBAAA,GAAAA,sDAAA,MAAAktM,EAAApkG,YAE9C9oG,sBAAA,GACAA,uBADA,UAAAA,4BAAA,GAAAQ,GAAA0sM,EAAA1kG,kBACAxoG,CAD2C,QAAAktM,EAAA9kG,8EAlE5DpoG,oCAAA,GACEA,2BAAA,eAEQA,uBAAA,iBAAA2J,GAAA3J,iCAAA01D,GAAA11D,0BAAA,GAAS87G,YAAW97G,wBAAE2J,EAAA4xD,kBAAwB,gCACpDv7D,sBAAA,YAGAA,mBAAA,0CACAA,oCAAA,GAAAA,mBAAA,yCACFA,2BAEAA,sBAAA,QAEAA,uBAAA,EAAAwtM,GAAA,iGATOxtM,sBAAA,GACAA,uBADA,UAAAuvB,EAAAze,MAAAsqF,MACAp7F,CADuB,OAAAuvB,EAAAze,MAAA8qD,QASA57D,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAssF,yCAbhC77G,uBAAA,EAAAytM,GAAA,gEAAeztM,uBAAA,OAAAuvB,EAAAssF,cAAA1hH,OAAA,2BAiFb6F,2BADF,QACEA,CADqE,YACrEA,mBAAA,KAEFA,uDAHAA,uBAAA,EAAA0tM,GAAA,uDAAM1tM,uBAAA,WAAAuvB,EAAAssF,cAAA1hH,QAAA,IAAAo1B,EAAA4xF,eAAAhnH,+BAsBF6F,+BAAA,yBACAA,+BAAA,yBACAA,+BAAA,GC1GA,MAAO2tM,GAqBX9uM,YACSuxB,EACCgV,EACAi2E,EACAuyF,EACArlB,EACAt7K,EACAq2K,EACAhC,EACAt0K,EACAy3E,GATD1lF,KAAAqxB,sBACCrxB,KAAAqmC,iBACArmC,KAAAs8G,qBACAt8G,KAAA6uM,gCACA7uM,KAAAwpL,kBACAxpL,KAAAkO,qBACAlO,KAAAukL,yBACAvkL,KAAAuiL,oBACAviL,KAAAiO,SACAjO,KAAA0lF,QA9BmB1lF,KAAA8uM,iBAAkB,EAM/C9uM,KAAAoiH,eAAkC,GAE1BpiH,KAAAm1L,KAAO,IAAIruG,eAEnB9mF,KAAA+R,MAAQC,KAGRhS,KAAA+uM,UAAY,GACZ/uM,KAAAgvM,MAAQ,IAAIC,SAEZjvM,KAAAy5L,UAAY,CACVgB,UAAU,GAeVz6L,KAAK88G,cAAgB,EACvB,CAEA9yF,cACE0V,OAAOi5F,cAAc34H,KAAKmhH,UAC1BzhF,OAAO8jB,aAAaxjD,KAAKkvM,SACzBlvM,KAAKm1L,KAAKjrK,aACZ,CAEAzb,WACEzO,KAAK+uM,UAAYrvK,OAAOqnD,aAAawD,QAAQ,aAE7C,MAAMhrD,EAAcv/B,KAAKkO,mBAAmBW,iBACxC0wB,EAAYoN,WAAWpa,MAAQgN,EAAYm1E,UAAUniF,OACvDvyB,KAAKmvM,0BACLnvM,KAAKiO,OAAOy1C,kBAAkB,KAC5B1jD,KAAKmhH,SAAWzhF,OAAOg5F,YAAY,KACjC14H,KAAKiO,OAAO21C,IAAI,KACd5jD,KAAKmvM,yBAAuB,EAC7B,EACA,IAAI,IAIXnvM,KAAKm1L,KAAK3sK,IACRxoB,KAAKqxB,oBAAoBggD,MAAM1iE,UAAWmuG,IACxC98G,KAAK88G,cAAgB3qG,YAAU2qG,EAAe,CAAC,aAAc,CAAC,SAC9D98G,KAAK0lF,MAAMiE,eAAa,IAI5B3pF,KAAKm1L,KAAK3sK,IACRxoB,KAAKqxB,oBAAoBqrF,eAAe/tG,UAAWyvG,IAE/Cp+G,KAAK8uM,iBADH1wF,IAGsBp+G,KAAK8uM,gBAG/BpvK,OAAO8jB,aAAaxjD,KAAKkvM,SACzBlvM,KAAKkvM,QAAUxvK,OAAOikB,WAAW,KAC/B3jD,KAAK0lF,MAAMiE,eAAa,EACvB,EAAC,IAIR3pF,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7Bv4G,KAAKovM,aAAa72F,EAAQqJ,iBAE1B5hH,KAAKgvM,MAAMK,UAAU7nK,KAAMixE,IACzBtmG,WACEomG,EAAQyK,eACPl+F,IAAwB9kB,KAAK+uM,WAAa1kM,KAAOya,EAAKwqL,UAAUC,QAAQvvM,KAAK+uM,YAC9E/nM,QAAS8d,IACT,MAAMie,EAAS/iC,KAAKqxB,oBAAoBysF,2BAA2Bh5F,EAAMA,EAAKmN,SACxEmc,EAAe,IAAIs7D,KAAe3mE,GACxCqL,EAAa27D,UAAYjlF,EAAKwqL,SAC9BlhK,EAAa9I,SAAWxgB,EAAKwgB,WAExBtlC,KAAK+uM,WAAa1kM,KAAOya,EAAKwqL,UAAUC,QAAQvvM,KAAK+uM,cACxD/uM,KAAK+uM,UAAYjqL,EAAKwqL,SACtB5vK,OAAOqnD,aAAa6D,QAAQ,YAAa5qF,KAAK+uM,YAGhD/uM,KAAKqxB,oBAAoBztB,KAAKwqC,EAAY,GAG5CpuC,KAAK0lF,MAAMiE,gBAEX8uB,GAAO,EACR,GAGP,CAEA22F,aAAahtF,GACX,UAAWgB,KAAiBhB,EAC1BgB,EAAc5xF,YAAcxxB,KAAKs8G,mBAAmBuL,gBAAgBzE,GAEtEpjH,KAAKoiH,eAAiBA,CACxB,CAEQ+sF,0BACNnvM,KAAKukL,uBAAuB/+I,SAAQ,GACpCxlC,KAAK6uM,8BAA8BrpK,SACrC,CAEAu3E,YACE/8G,KAAKqxB,oBAAoB0rF,WAC3B,CAEAt9E,OAAOv4B,GACLlH,KAAKqxB,oBAAoBoO,OAAOv4B,EAClC,CAEAsoM,eACExvM,KAAK8uM,iBAAkB,CACzB,CAEA/6L,UAAU7M,GACR,OAAOA,CACT,CAEA8mC,QAAQzrC,GACN,MAAMqnL,EAAiB,mBACjBrtK,EAAW/S,mBACXs8K,EAAsC,CAC1C1rL,KAAM,YACNkG,MAAOiC,EAAK8C,MAAS1I,MAAM,KAAK,GAChCspL,SAAS,GAELwpB,EAAsC,CAC1CzpB,SAAU,CAACF,GACXqE,SAAU9/K,KAAOA,OAAS6tB,OAAO0xJ,IAAiBpyD,cAClD4yD,OAAQ//K,KAAOA,OAASme,IAAI,EAAG,SAAS0P,OAAO0xJ,IAAiBpyD,cAChE6yD,UAAWrqL,KAAKkO,mBAAmBmrB,cACnCixJ,QAAS,+CAEX,IAAIpmI,EAAM,GAEV3hD,EAAKonG,eAAgB,EACrBzlD,EAAMA,EAAIt7C,OAAO,IAAIk9K,EAAQ1rL,UAAU0rL,EAAQxlL,UAC/C,MAAM+E,EAAQ,GAAGrF,KAAKwpL,gBAAgBn9G,WAAW9vD,SAAgB2nC,EAAIhpD,MAAM,GAAG,KAC9E8E,KAAKuiL,kBAAkBx0I,WAAW0hK,GAAgB9gM,UAAWgb,IACvDpnB,IACFA,EAAK2rC,UAAYvkB,EAAKxuB,KAAK+yC,WAE7BluC,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjB5sB,OACAu0B,OACAA,EACA,aAAY,EAGlB,CAEAw0K,OAAO7rM,GACLA,EAAKonG,eAAgB,EACrB3pG,KAAKuiL,kBAAkBt0I,cAAc1rC,EAAK2rC,WAAWv/B,UACnD,KACE3O,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjB,GAAGjyB,KAAKwpL,gBAAgBv7G,WAAW1rE,EAAK2rC,iBACxCtU,OACAA,EACA,aAAY,EAGfjQ,IACCA,EAAK0/E,YAAiB,cAG5B,iDA3LWulG,IAA6B3tM,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,IAAAhI,8BAAAiI,MAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,MAAA/kB,2FAAA,4DAA7B2tM,GAA6BxlM,UAAA,+BAAAktF,SAAA,EAAA3kC,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAA7BrI,wBAAA,SAAAwC,EAAAqrM,yED4FUtlM,oGAlFEA,gGAkBIA,gGASAA,wFASAA,0FAeUA,sFAuBzBA,s+CAHdvI,uBAxHA,EAAAyuM,GAAA,yBAAAzuM,mCAwHAA,CAxHuB,EAAA0uM,GAAA,yBAAA1uM,mCAwHvBA,CAhF+B,EAAA2uM,GAAA,yBAAA3uM,oCAuF/BA,2BAAA,WACKA,uBAAA,0BAAAA,iCAAAsL,GAAAtL,wBAAgBwC,EAAA+rM,eAAc,GAEjCvuM,2BAAA,WACEA,oCAAA,GAAAA,mBAAA,yCAEAA,2BAAA,eAIQA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA+rM,eAAc,GAEjCvuM,6BAGEA,2BADF,sBACEA,CADmC,aAIjCA,uBAFA,GAAA4uM,GAAA,sBAEA5uM,CAF2C,GAAA6uM,GAAA,sBAE3C7uM,CADmD,GAAA8uM,GAAA,uBAIzD9uM,oIAnBKA,sBAAA,GAAAA,uBAAA,sBAAAwC,EAAAqrM,iBAYY7tM,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAg2L,WAEIx4L,sBAAA,GAAAA,uBAAA,mBAAA+uM,GACA/uM,+CAAA,mBAAAgvM,GACAhvM,+CAAA,mBAAAivM,s9BE1InBjvM,sBAAA,YCOI,MAAOkvM,GAMXrwM,YACSuxB,EACCgV,GADDrmC,KAAAqxB,sBACCrxB,KAAAqmC,iBAPVrmC,KAAA+R,MAAQC,KACRhS,KAAAowM,iBAAkB,EAClBpwM,KAAAqwM,kBAAmB,EACXrwM,KAAAm1L,KAAO,IAAIruG,cAKhB,CAEHr4E,WACEzO,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7Bv4G,KAAKowM,gBAAkB73F,EAAQqJ,gBAAgBxmH,OAAS,KAI5D4E,KAAKm1L,KAAK3sK,IACRxoB,KAAKqxB,oBAAoBggD,MAAM1iE,UAAWmuG,IACxC98G,KAAKqwM,iBAAmBvzF,EAAc1hH,OAAS,IAGrD,CAEA4uB,cACEhqB,KAAKm1L,KAAKjrK,aACZ,iDA3BWimL,IAAsBlvM,8BAAAC,KAAAD,8BAAA8H,MAAA,4DAAtBonM,GAAsB/mM,UAAA,uBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDbzB5C,oGAUGA,6QAXbvI,2BAAA,sCAIEA,sBAAA,WAGAA,uBAAA,EAAAqvM,GAAA,4CAGArvM,2BAAA,YAAAA,mBAAA,KAEFA,oCAVGA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAjG,EAAA2sM,kBAMMnvM,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA4sM,weEAH,MAAOE,GACXzwM,YAAoBgsB,GAAA9rB,KAAA8rB,OACpB9rB,KAAAmkC,UAAY,cAD2B,CAGvCqsK,aACE,OAAOxwM,KAAK8rB,KAAKpZ,IAAI,gCACvB,CAEA+9L,YACEC,EACAC,EACApiM,EACAijB,EACAo/K,GAEA,OAAO5wM,KAAK8rB,KAAKzwB,KACf,eACA,CACEq1M,QAASA,EACTC,QAASA,EACTpiM,QAASA,EACTijB,YAAaA,EACbq/K,QAASD,GAEX,CACEzwK,QAAS,CAAEC,OAAQ,uCAGzB,iDA5BWmwK,IAAetvM,qBAAAC,cAAA,+DAAfqvM,GAAepvM,QAAfovM,GAAenvM,UAAAC,WAFd,QAAM,kECGZJ,2BAAA,uBAAAA,wBAAA,KAE2EA,2BAAA,UAAGA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAAsgL,WAAU,GAA4B7vM,2BAC7HA,2EAaIA,2BAAA,aAAAA,mBAAA,MAE4CA,mDAC5CA,2BAAA,aAAAA,mBAAA,MAE2CA,sDAd7CA,2BAFF,WAEEA,CADwB,cACxBA,mBAAA,KAEgCA,2BAChCA,2BAAA,YACEA,sBAAA,cAQAA,uBAHA,EAAA8vM,GAAA,cAGA9vM,CADW,EAAA+vM,GAAA,eAKf/vM,oGANWA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAygL,aAAA5gM,UAAA,UAAAovD,EAAA,aAGAx+D,+CAAA,OAAAuvB,EAAAygL,aAAA5gM,UAAA,UAAAovD,EAAA,6CAgBLx+D,2BAAA,eAC8BA,mBAAA,GAAiBA,qDAAvCA,uBAAA,QAAAiwM,GAAsBjwM,sDAAAiwM,2BAEhCjwM,2BAAA,aAAAA,mBAAA,MAEoCA,sDAelCA,2BAAA,eAC8BA,mBAAA,GAAiBA,qDAAvCA,uBAAA,QAAAkwM,GAAsBlwM,sDAAAkwM,2BAEhClwM,2BAAA,aAAAA,mBAAA,MAEqCA,mDAerCA,2BAAA,aAAAA,mBAAA,MAE+BA,mDAgB/BA,2BAAA,aAAAA,mBAAA,MAEmCA,4BCvFzC,MAAOmwM,GAoBXtxM,YACUuxM,EACDjkF,EACAp/G,EACAsjM,EACCjgL,EACA9c,GALAvU,KAAAqxM,kBACDrxM,KAAAotH,cACAptH,KAAAgO,eACAhO,KAAAsxM,iBACCtxM,KAAAqxB,sBACArxB,KAAAuU,SAzBVvU,KAAAqF,MAAQ,WACRrF,KAAA0wM,QAAe,CACb,YACA,QACA,UACA,cACA,eACA,eACA,cACA,aAEF1wM,KAAA2wM,QAAoB,CAAC,MAAO,WAK5B3wM,KAAAuxM,aAAc,EACdvxM,KAAAwxM,mBAAoB,CASjB,CAEH/iM,WACEzO,KAAKif,aACLjf,KAAKyxM,OAASzxM,KAAKqxM,gBAAgBb,aAAa7hM,UAAU,CACxDc,KAAOlN,IACLvC,KAAKuxM,YAAchvM,EACfvC,KAAKuxM,aACPvxM,KAAKixM,aAAav+L,IAAI,WAAWkP,iBAAe,EAGpDL,MAAOA,KACLvhB,KAAKwxM,mBAAoB,EACzBxxM,KAAKixM,aAAahxL,SAAO,GAG/B,CAEQhB,aACNjf,KAAKixM,aAAe,IAAI99L,KAAY,CAClCu9L,QAAS,IAAIt9L,qBAAmB,GAAIE,aAAWC,UAC/Co9L,QAAS,IAAIv9L,qBAAmB,GAAIE,aAAWC,UAC/ChF,QAAS,IAAI6E,qBAAmB,GAAIE,aAAWC,UAC/Cie,YAAa,IAAIpe,qBAAmB,GAAIE,aAAWC,UACnDs9L,QAAS,IAAIz9L,qBAAmB,GAAIE,aAAWC,WAEnD,CAEAyW,cACEhqB,KAAKyxM,OAAOvnL,aACd,CAEA6J,WACE/zB,KAAKqxM,gBACFZ,YACCzwM,KAAKixM,aAAa7/L,SAASs/L,QAAWpwM,MACtCN,KAAKixM,aAAa7/L,SAASu/L,QAAWrwM,MACtCN,KAAKixM,aAAa7/L,SAAS7C,QAAWjO,MACtCN,KAAKixM,aAAa7/L,SAASogB,YAAelxB,MAC1CN,KAAKixM,aAAa7/L,SAASy/L,QAAWvwM,OAEvCqO,UAAU,CACTc,KAAO5T,IACLmE,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,4DACA,+DAA+D3N,EAAO+iC,QAAW8yK,MAAStnL,wBAA2BvuB,EAAO+iC,QAAW8yK,MAAStnL,UAAY,EAGhK7I,MAAOA,KACLvhB,KAAKixM,aAAav+L,IAAI,WAAW6S,UAAU,CAAEosL,eAAe,IAC5D3xM,KAAKixM,aAAa1rL,UAAU,CAAEE,gBAAgB,GAAM,EAEtDL,SAAUA,KACRplB,KAAKotH,YAAYn0F,OAAK,GAG9B,CAEA63K,WACE9wM,KAAKotH,YAAYn0F,QACjBj5B,KAAKuU,OAAOC,SAAS,CAAC,gBACxB,iDAzFW48L,IAAiBnwM,8BAAAC,IAAAD,8BAAA8H,kBAAA9H,8BAAA+H,MAAA/H,8BAAA8H,YAAA9H,8BAAAgI,KAAAhI,8BAAAiI,UAAA,4DAAjBkoM,GAAiBhoM,UAAA,kBAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,2CDhBlB5C,4FAoCUA,yFAMKA,kGAcLA,oFAMKA,mGAcLA,oFAiBAA,wFApFOA,gIAAsD,yDAAkD,kCAO/GA,iGASCA,6GAGAA,8GAoBAA,sGAoBCA,uGAiBDA,kGAkBAA,86CAxGrBvI,2BADF,gBACEA,CADiC,YACjCA,mBAAA,KACyBA,2BAMrBA,2BAJJ,WAIIA,CAJuB,cAIvBA,CADsB,YAOpBA,uBALA,EAAA2wM,GAAA,wBAKA3wM,CAHqB,EAAA4wM,GAAA,cAyBnB5wM,2BADF,WACEA,CAD0B,eAC1BA,mBAAA,MAEwBA,2BAKpBA,2BAJJ,YAIIA,CAJ2B,eAI3BA,CADgC,gBAChCA,mBAAA,MACmCA,2BACnCA,uBAAA,GAAA6wM,GAAA,iBAEF7wM,2BACAA,uBAAA,GAAA8wM,GAAA,eAIJ9wM,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEmBA,2BAKfA,2BAJJ,YAIIA,CAJ2B,eAI3BA,CADgC,gBAChCA,mBAAA,MACmCA,2BACnCA,uBAAA,GAAA+wM,GAAA,iBAEF/wM,2BACAA,uBAAA,GAAAgxM,GAAA,eAIJhxM,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEmBA,2BACnBA,2BAAA,aACEA,sBAAA,eAKAA,uBAAA,GAAAixM,GAAA,eAIJjxM,6BAIEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAEuBA,2BAErBA,2BADF,YACEA,CAD6B,kBAM7BA,mBAAA,mBAAAA,2BACAA,uBAAA,GAAAkxM,GAAA,eAMNlxM,+BAEEA,2BADF,YACEA,CADwB,8BACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAQ7D9yB,8EAvHUA,uBAAA,WAAAwC,EAAA2pH,aAMAnsH,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAwtM,cAGehwM,sBAAA,GAAAA,uBAAA,QAAAwC,EAAA+tM,mBAMXvwM,+CAAA,QAAAwC,EAAA8tM,aA8BgCtwM,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAitM,SAI3BzvM,+CAAA,OAAAwC,EAAAwtM,aAAA5gM,UAAA,UAAAovD,EAAA,aAgB2Bx+D,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAktM,SAI1B1vM,+CAAA,OAAAwC,EAAAwtM,aAAA5gM,UAAA,UAAAovD,EAAA,aAiBDx+D,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAwtM,aAAA5gM,UAAA,UAAAovD,EAAA,aAkBAx+D,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAwtM,aAAA5gM,UAAA,cAAAovD,EAAA,aAQWx+D,sBAAA,GACAA,uBADA,OAAAwC,EAAAwtM,aACAhwM,CADqB,aAAAwC,EAAAuK,aAAAy7D,6REhHvC2oI,gBAAZ,SAAYA,GACVA,EAAAC,mBAAA,oBACF,CAFA,CAAYD,QAAY,KCkBlB,MAAOE,GAWXxyM,YACSstH,EACC/mF,EACA5P,EACAvoB,GAHDlO,KAAAotH,cACCptH,KAAAqmC,iBACArmC,KAAAy2B,cACAz2B,KAAAkO,qBAERlO,KAAKuyM,eAAiBvyM,KAAKkO,mBAAmBW,iBAAiBgkB,IACjE,CAEApkB,WACEzO,KAAK6mK,iBAAmB/+F,KACxB9nE,KAAKwyM,SAAW9yK,OAAOC,SAASjyB,SAChC1N,KAAKszE,eAAiBtzE,KAAKyyM,eAC3BzyM,KAAKm1L,KAAOn1L,KAAKqmC,eAAe13B,UAAW4pG,IACzC,MAAM3X,EAAU2X,EAAQ3X,QAAQx4F,QAAQ,GAAGkmE,QAAmB,IAAI3xE,MAAM,KACxEqD,KAAKwyM,SAAWj6F,EAAQm6F,SAAStqM,QAAQ,gBAAiB,IAAIA,QAAQ,MAAO,IAC7EpI,KAAK2yM,cAAgB/xG,EAAQ,GAC7B5gG,KAAK4yM,YAAchyG,EAAQ,GAC3B5gG,KAAK6yM,YAAcjyG,EAAQ1lG,MAAM,EAAG0lG,EAAQxlG,QAAQwB,KAAK,IAAG,EAEhE,CAEAotB,cACEhqB,KAAKm1L,KAAKjrK,aACZ,CAEAuoL,eACE,MAAMK,EAAgBtpM,yBAChBknM,EAAU,GAChBA,EAAQ79K,KAAOk0D,aAAawD,QAAQ6nH,GAAaC,oBACjD3B,EAAQhhL,KAAO/H,KACX3nB,KAAKuyM,eAAehgL,MACtBvyB,KAAKy2B,YAAY/jB,IAAIg+L,EAAQ79K,MAAMlkB,UAAWpM,IAC5CmuM,EAAQhhL,KAAOntB,EAAKytB,QAGxB,MAAMqhC,KAAUC,aAChBo/I,SAAQqC,YAAc1hJ,GAAWA,EAAQj3D,KAAOi3D,EAAQj3D,KAAO04M,EAC/DpC,EAAQsC,eAAiB3hJ,GAAWA,EAAQuvC,QAAUvvC,EAAQuvC,QAAUkyG,EACxEpC,EAAQuC,UAAY5hJ,GAAWA,EAAQ6hJ,GAAK7hJ,EAAQ6hJ,GAAKJ,EAClDpC,CACT,iDApDW4B,IAAcrxM,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAA,4DAAdqpM,GAAclpM,UAAA,eAAAoB,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,yBCdH5C,kFAaLA,oFASJA,yFAEAA,iFAEAA,qFAEAA,oFAEAA,4FAEAA,0YAlCXvI,2BAFJ,UAEIA,CAFyB,UAEzBA,CADwB,cAKhBA,uBAAA,0BAASwC,EAAA2pH,YAAAn0F,OAAmB,GAEtCh4B,6BACAA,2BAAA,YACEA,sBAAA,YAIEA,2BADF,OACEA,CADE,YACMA,mBAAA,GACVA,6BAEEA,2BADF,WACEA,CAD4B,YAC5BA,mBAAA,MAAoBA,2BACpBA,sBAAA,SACAA,mBAAA,IAEAA,sBAAA,SACAA,mBAAA,IACFA,2BACAA,sBAAA,SAEEA,2BADF,QACEA,CADE,SACFA,mBAAA,MAAqBA,2BACrBA,2BAAA,SAAIA,mBAAA,IAAcA,2BAClBA,2BAAA,SAAAA,mBAAA,MAAaA,2BACbA,2BAAA,SAAIA,mBAAA,IAAyBA,2BAC7BA,2BAAA,SAAAA,mBAAA,MAAkBA,2BAClBA,2BAAA,SAAIA,mBAAA,IAAyBA,2BAC7BA,2BAAA,SAAAA,mBAAA,MAAgBA,2BAChBA,2BAAA,SAAIA,mBAAA,IAAgCA,2BACpCA,2BAAA,SAAAA,mBAAA,MAAwBA,2BACxBA,2BAAA,SAAIA,mBAAA,IAAmCA,2BACvCA,2BAAA,SAAAA,mBAAA,MAAmBA,2BACnBA,2BAAA,SAAIA,mBAAA,IAERA,+BAEEA,2BADF,YACEA,CADwB,aAEtBA,mBAAA,IAINA,sCAlCSA,sBAAA,GAAAA,kCAAA,MAAAwC,EAAAojK,iBAAA9+F,cAEK9mE,sBAAA,GAAAA,8BAAAwC,EAAAojK,iBAAA7+F,aAKR/mE,sBAAA,GAAAA,+BAAA,IAAAwC,EAAAkvM,cAAA,IAAAlvM,EAAAmvM,YAAA,KAGA3xM,sBAAA,GAAAA,+BAAA,IAAAwC,EAAAovM,YAAA,KAKI5xM,sBAAA,GAAAA,8BAAAwC,EAAA+uM,UAEAvxM,sBAAA,GAAAA,8BAAAwC,EAAA6vE,eAAAzgD,MAEA5xB,sBAAA,GAAAA,8BAAAwC,EAAA6vE,eAAA5jD,MAEAzuB,sBAAA,GAAAA,8BAAAwC,EAAA6vE,eAAAy/H,aAEA9xM,sBAAA,GAAAA,8BAAAwC,EAAA6vE,eAAA0/H,gBAEA/xM,sBAAA,GAAAA,8BAAAwC,EAAA6vE,eAAA2/H,WAKJhyM,sBAAA,GAAAA,+BAAA,IAAAwC,EAAAojK,iBAAA1+F,UAAA,IAAA1kE,EAAAojK,iBAAA3+F,QAAA,00BCbJjnE,sBAAA,0CAKAA,2BAAA,aAAAA,mBAAA,KAC4BA,4BCpBxB,MAAOkyM,GAMXrzM,YAAoB+nB,EAAoC+tC,GAApC51D,KAAA6nB,eAAoC7nB,KAAA41D,aAHxD51D,KAAA+R,MAAQC,IAGyE,CAEjFvD,WACEzO,KAAK41D,WAAW/sB,cAAc,YAAc7pB,IAC1Chf,KAAKozM,QAAUp0L,GAEnB,CAEAq0L,iBACErzM,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKynL,GAAgB,KAAM,CAAEj4M,KAAM,MACvE,CAEAi5M,oBACEtzM,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKumL,GAAmB,KAAM,CAAE/2M,KAAM,MAC5E,iDApBW84M,IAAsBlyM,8BAAAC,MAAAD,8BAAA8H,MAAA,4DAAtBoqM,GAAsB/pM,UAAA,wBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,qBDTvB5C,yFACN,uCAEe,0CAOTA,+EACN,uCAEe,0CAIYA,kFAEAA,+FAOnBA,iFAGYA,ycAhCtBvI,2BAHJ,wBAGIA,CAF6B,OAE7BA,CADE,SACFA,wBAAA,kCAIEA,sBAAA,WAGFA,wBACFA,2DAEEA,2BADF,OACEA,CADE,SACFA,wBAAA,kCAIEA,sBAAA,WAGFA,wBACFA,2DACAA,2BAAA,iCAA0BA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA4vM,iBAAgB,GAAnDpyM,mBAAA,MACoCA,2BACpCA,2BAAA,kCAA0BA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA6vM,oBAAmB,GAAtDryM,mBAAA,MAEFA,6BAEAA,uBAAA,GAAAsyM,GAAA,yBAAAtyM,gFA3BmBA,uBADA,gBAAAuyM,EACAvyM,CAD+B,WAI3CA,sBAAA,GAAAA,kCAAA,OAAAwC,EAAA2vM,QAAAnyM,2BADAA,uBAAA,UAAAA,4BAAA,EAAAyI,IAAAjG,EAAA2vM,gIEMHnyM,2BAFF,SAEEA,CADmC,cACnCA,mBAAA,KAGFA,kFAIAA,sBAAA,uCAAAA,uBAAA,EAAAwyM,GAAA,aAIAxyM,2BAAA,aAAAA,mBAAA,KAC0CA,qEAFpCA,uBAAA,OAAA+K,EAAAumM,eAAAhgL,OCTF,MAAOmhL,GAIX5zM,YAAoBoO,GAAAlO,KAAAkO,qBAClB,MAAMqxB,EAAcv/B,KAAKkO,mBAAmBW,iBAC5C7O,KAAKuyM,eAAiBhzK,EAAY1M,KAClC7yB,KAAK2zM,oBAAsBp0K,EAAYm1E,SACzC,iDARWg/F,IAAuBzyM,8BAAAC,KAAA,4DAAvBwyM,GAAuBtqM,UAAA,wBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,eDLnB5C,4FAMAA,oGAUSA,siBAlBtBvI,2BAHJ,wBAGIA,CAF6B,SAE7BA,CADkD,cAClDA,mBAAA,KAGFA,6BACAA,uBAAA,EAAA2yM,GAAA,YAMF3yM,2BAEAA,uBAAA,EAAA4yM,GAAA,yBAAA5yM,6EAdmBA,uBADA,gBAAAuyM,EACAvyM,CAD+B,WAQ3CA,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAkwM,oBAAAphL,yGECHtxB,2BAAA,eAAAA,wBAAA,kCAIAA,sBAAA,YAGFA,wGAcAA,sBAAA,0CAGAA,2BAAA,aAAAA,mBAAA,KACsCA,4BCvBlC,MAAO6yM,GAKXh0M,YAAoBoO,EAAgDsoB,GAAhDx2B,KAAAkO,qBAAgDlO,KAAAw2B,cAFpEx2B,KAAA+R,MAAQC,IAEuF,CAE/FvD,WACEzO,KAAK61B,SAAW71B,KAAKkO,mBAAmBmrB,cACxCr5B,KAAKw/B,IAAMx/B,KAAKkO,mBAAmBioB,OACrC,CAEAuD,SACE15B,KAAKw2B,YAAYkD,QACnB,iDAdWo6K,IAAiB7yM,8BAAAC,KAAAD,8BAAA8H,MAAA,4DAAjB+qM,GAAiB1qM,UAAA,kBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,iBDN1B5C,2EAAA,+CAA0D,kCAC1D,qCAgBaA,2EAAA,uCAEe,kDAX5BA,2EAAA,uCAEe,0DAmBOA,s3BAhCxBvI,2BAFF,wBAEEA,CAD+B,UAC/BA,wBAAA,KAGEA,sBAAA,WAEFA,mDACAA,2BAAA,UACEA,uBAAA,EAAA8yM,GAAA,gBAQF9yM,2BAEEA,2BADF,UACEA,CADkD,eAC1CA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAAi2B,SAAQ,GAAzBz4B,wBAAA,kCAGaA,sBAAA,YAGfA,wBAEFA,+BAEAA,uBAAA,GAAA+yM,GAAA,yBAAA/yM,gFA5BmBA,uBADA,gBAAAuyM,EACAvyM,CAD+B,WAKDA,sBAAA,GAAAA,sBAAAwC,EAAAoyB,qCAIpC50B,sBAAA,GAAAA,uBAAA,QAAAwC,EAAA+7B,iPEYLv+B,oCAAA,GACEA,2BAAA,wBAAiBA,uBAAA,yBAAAgzM,EAAAhzM,0BAAA4P,GAAA0/C,UAAAngD,EAAAnP,0BAAA,UAAAA,wBAASmP,EAAA8jM,mBAAAD,EAAA3zM,OAAiC,GAGvDW,mBAAA,GACJA,2FAHiBA,gDAAA,eAAAgzM,EAAA3zM,MAAA6zM,2BAEblzM,uDAAA,IAAAgzM,EAAA3zM,MAAAlG,KAAA,YAAA65M,EAAA3zM,MAAA,KAAA2zM,EAAA3zM,MAAAgpC,cAAA,YAAA2qK,EAAA3zM,MAAA,KAAA2zM,EAAA3zM,MAAAuyB,KAAA,gCANR5xB,2BAFF,6BAEEA,CADmD,wBAGjDA,uBAAA,EAAAmzM,GAAA,wDAQJnzM,uEAVmBA,+CAAA,QAAAmP,EAAAikM,oBAEmBpzM,wBAA2BA,uBAA3B,UAAAA,wBAAA,IAAAmP,EAAAkkM,aAA2BrzM,CAAA,eAAAmP,EAAA2D,mCAqB/D9S,2BAAA,YAEEA,sBAAA,uBACFA,mDAUFA,2BAAA,UAEEA,sBAAA,YAEFA,kDASEA,+BAAA,0BA8BEA,2BAAA,sDAGEA,sBAAA,0CAO8EA,2BAJ9E,wBAI8EA,CAAA,UAAAA,mBAAA,KAA0BA,6BAKnBA,2BAJrF,wBAIqFA,CAAA,UAAAA,mBAAA,KACvFA,sCAPoBA,sBAAA,GAAAA,uBAAA,gBAKAA,sBAAA,GAAAA,uBAAA,wCAgBmDA,2BALrE,wBAKqEA,CAAA,UAAAA,mBAAA,KAAuBA,mCAJ1EA,uBAAA,uCAUoDA,2BALtE,wBAKsEA,CAAA,UAAAA,mBAAA,KAAuBA,mCAJ3EA,uBAAA,uCAUmDA,2BALrE,wBAKqEA,CAAA,UAAAA,mBAAA,KAAsBA,mCAJzEA,uBAAA,uCAUwDA,2BAL1E,wBAK0EA,CAAA,UAAAA,mBAAA,KAAgCA,mCAJxFA,uBAAA,uCAUoDA,2BALtE,wBAKsEA,CAAA,UAAAA,mBAAA,MAA2BA,mCAJ/EA,uBAAA,uCAUsDA,2BALxE,wBAKwEA,CAAA,UAAAA,mBAAA,MAA0BA,mCAJhFA,uBAAA,0CAtCpBA,2BAAA,sDAIEA,sBAAA,YAiCAA,uBA9BA,EAAAszM,GAAA,0BA8BAtzM,CAzBqE,EAAAuzM,GAAA,0BAyBrEvzM,CAnBsE,EAAAwzM,GAAA,0BAmBtExzM,CAbqE,EAAAyzM,GAAA,0BAarEzzM,CAP0E,EAAA0zM,GAAA,0BAO1E1zM,CADsE,EAAA2zM,GAAA,2BAOxE3zM,sEAhCqBA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAAzgB,KAAAyT,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAwG,MAAAxT,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAyxE,IAAAz+E,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAwG,MAAAxT,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAyxE,IAAAz+E,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAo1E,QAAApiF,8BAgBkDtxB,2BALrE,wBAKqEA,CAAA,UAAAA,mBAAA,MAAwBA,mCAJ3EA,uBAAA,0EAYdA,sBAAA,iFACmCA,8CAAA,MAAAmP,EAAAykM,aAAA,MAAAzkM,EAAAykM,YAAA/vF,cAAA,KAAA10G,EAAAykM,YAAA/vF,cAAAgwF,gGACnC7zM,sBAAA,iFACkCA,8CAAA,MAAAmP,EAAAykM,aAAA,MAAAzkM,EAAAykM,YAAA/vF,cAAA,KAAA10G,EAAAykM,YAAA/vF,cAAA19E,8DAJpCnmC,2BANF,wBAMEA,CADsE,UACtEA,wBAAA,MAGEA,uBAFA,EAAA8zM,GAAA,eAEA9zM,CADmC,EAAA+zM,GAAA,gBAGrC/zM,wBACFA,wEAXkBA,uBAAA,gBAMNA,sBAAA,GAAAA,uBAAA,kBAAAmP,EAAAykM,aAAA,MAAAzkM,EAAAykM,YAAA/vF,cAAA,KAAA10G,EAAAykM,YAAA/vF,cAAAgwF,WAEA7zM,+CAAA,kBAAAmP,EAAAykM,aAAA,MAAAzkM,EAAAykM,YAAA/vF,cAAA,KAAA10G,EAAAykM,YAAA/vF,cAAA19E,iCASwDnmC,2BALpE,wBAKoEA,CAAA,UAAAA,mBAAA,MAAuBA,mCAJzEA,uBAAA,0CA3BpBA,2BAAA,sDAIEA,sBAAA,YAsBAA,uBAnBA,EAAAg0M,GAAA,0BAmBAh0M,CAdqE,EAAAi0M,GAAA,0BAcrEj0M,CARwE,EAAAk0M,GAAA,yDAkBLl0M,2BAJnE,wBAImEA,CAAA,UAAAA,mBAAA,MACrEA,6GA1BqBA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAAq1E,SAAAriF,MAAA6iL,EAAA3kK,KAMAxvC,+CAAA,OAAAmP,EAAAmvB,YAAAw1E,aAAAxiF,MAAA6iL,EAAAC,WAaAp0M,+CAAA,OAAAmP,EAAAmvB,YAAAs1E,MAAAtiF,MAAA6iL,EAAAvgG,OAGD5zG,+CAAA,wCAqD8CA,2BALhE,yBAKgEA,CAAA,UAAAA,mBAAA,MAAqBA,mCAJnEA,uBAAA,0CA3CpBA,2BAAA,sDAIEA,sBAAA,0CAOqEA,2BAJrE,wBAIqEA,CAAA,UAAAA,mBAAA,MAA0BA,6BAK7BA,2BAJlE,wBAIkEA,CAAA,UAAAA,mBAAA,MAAuBA,6BAKrBA,2BAJpE,wBAIoEA,CAAA,UAAAA,mBAAA,OAAyBA,6BAK1BA,2BAJnE,0BAImEA,CAAA,WAAAA,mBAAA,OAAwBA,6BAKvBA,2BAJpE,0BAIoEA,CAAA,WAAAA,mBAAA,OAAyBA,6BAKtBA,2BAJvE,0BAIuEA,CAAA,WAAAA,mBAAA,OAA4BA,6BAK/BA,2BAJpE,0BAIoEA,CAAA,WAAAA,mBAAA,OAA0BA,6BAC9FA,uBAAA,GAAAq0M,GAAA,4BAU0Er0M,2BAJ1E,0BAI0EA,CAAA,WAAAA,mBAAA,OAC5EA,6GA3CoBA,sBAAA,GAAAA,uBAAA,gBAKAA,sBAAA,GAAAA,uBAAA,gBAKAA,sBAAA,GAAAA,uBAAA,gBAGAA,sBAAA,GAAAA,uBAAA,gBAOAA,sBAAA,GAAAA,uBAAA,gBAKAA,sBAAA,GAAAA,uBAAA,gBAKAA,sBAAA,GAAAA,uBAAA,gBAMCA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAAzwB,IAAAyjB,MAAA6iL,EAAAtmM,KAGD7N,+CAAA,wCAkBkDA,2BALpE,yBAKoEA,CAAA,UAAAA,mBAAA,MAA8BA,mCAJhFA,uBAAA,uCAU+CA,2BALjE,yBAKiEA,CAAA,UAAAA,mBAAA,MAAqBA,mCAJpEA,uBAAA,uCAU+CA,2BALjE,yBAKiEA,CAAA,UAAAA,mBAAA,MAAqBA,mCAJpEA,uBAAA,0CApBpBA,2BAAA,uDAIEA,sBAAA,aAeAA,uBAZA,EAAAs0M,GAAA,2BAYAt0M,CAPoE,EAAAu0M,GAAA,2BAOpEv0M,CADiE,EAAAw0M,GAAA,4BAOnEx0M,yGAdqBA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAA01E,OAAA1iF,MAAA6iL,EAAAngG,QAMAh0G,+CAAA,OAAAmP,EAAAmvB,YAAAzwB,IAAAyjB,MAAA6iL,EAAAtmM,KAMA7N,+CAAA,OAAAmP,EAAAmvB,YAAA61E,IAAA7iF,8BAgBiDtxB,2BALpE,yBAKoEA,CAAA,UAAAA,mBAAA,MAAsBA,mCAJxEA,uBAAA,0EAadA,sBAAA,kFACuCA,8CAAAmP,EAAAm0K,uBAAAR,4GACvC9iL,sBAAA,kFACwCA,8CAAAmP,EAAAm0K,uBAAAN,2EAL1ChjL,2BANF,yBAMEA,CADyE,UACzEA,wBAAA,MACEA,+BAAA,GAGAA,uBAFA,EAAAy0M,GAAA,gBAEAz0M,CADuC,EAAA00M,GAAA,iBAGzC10M,wBACFA,wEAZkBA,uBAAA,gBAONA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAm0K,uBAAAR,qBAAA,GAEA9iL,+CAAA,OAAAmP,EAAAm0K,uBAAAN,oBAAA,8BAvBdhjL,2BAAA,uDAIEA,sBAAA,aASAA,uBANA,EAAA20M,GAAA,2BAMA30M,CADoE,EAAA40M,GAAA,4BAetE50M,sEAhBqBA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAA60D,IAAA7hE,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAoN,WAAApa,8BAwBoDtxB,2BALvE,yBAKuEA,CAAA,UAAAA,mBAAA,MAA0BA,mCAJ/EA,uBAAA,uCAUoDA,2BALtE,yBAKsEA,CAAA,UAAAA,mBAAA,MAAyBA,mCAJ7EA,uBAAA,uCAUkDA,2BALpE,yBAKoEA,CAAA,UAAAA,mBAAA,MAA4BA,mCAJ9EA,uBAAA,uCAUoDA,2BALtE,yBAKsEA,CAAA,UAAAA,mBAAA,MAAiCA,mCAJrFA,uBAAA,uCAU0DA,2BAL5E,yBAK4EA,CAAA,UAAAA,mBAAA,MAA+BA,mCAJzFA,uBAAA,0CAhCpBA,2BAAA,uDAIEA,sBAAA,aA2BAA,uBAxBA,EAAA60M,GAAA,2BAwBA70M,CAnBuE,EAAA80M,GAAA,2BAmBvE90M,CAbsE,EAAA+0M,GAAA,2BAatE/0M,CAPoE,EAAAg1M,GAAA,2BAOpEh1M,CADsE,EAAAi1M,GAAA,4BAOxEj1M,sEA1BqBA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAAwG,MAAAxT,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,MAMAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,uEA1QzBtxB,oCAAA,GACEA,2BAAA,sBAEaA,uBAAA,iBAAA2J,GAAA3J,0BAAA21D,GAAA,MAAAxmD,EAAAnP,0BAAA,UAAAA,wBAASmP,EAAA+lM,YAAAvrM,GAAmB,GAGvC3J,2BAAA,sDAKEA,sBAAA,0CAGAA,2BAAA,UAAAA,mBAAA,KAEFA,6BAuNAA,uBArNA,EAAAm1M,GAAA,0BAqNAn1M,CAnN6B,EAAAo1M,GAAA,0BAmN7Bp1M,CAhM8C,EAAAq1M,GAAA,0BAgM9Cr1M,CAnJ4C,GAAAs1M,GAAA,2BAmJ5Ct1M,CA5GmD,GAAAu1M,GAAA,0BA4GnDv1M,CArD2C,GAAAw1M,GAAA,0BAqD3Cx1M,CA1B8C,GAAAy1M,GAAA,2BAgEhDz1M,qHA5QaA,+CAAA,WAAAmP,EAAAumM,iBAMO11M,sBAAA,GAAAA,uBAAA,gBAYCA,sBAAA,GAAAA,uBAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,MAmBAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAwG,MAAAxT,MAAAniB,EAAAmvB,YAAAo1E,QAAApiF,MAAAniB,EAAAmvB,YAAAyxE,IAAAz+E,MAAAniB,EAAAmvB,YAAAzgB,KAAAyT,MA6CAtxB,+CAAA,QAAAmP,EAAAmvB,YAAAq1E,SAAAriF,MAAAniB,EAAAmvB,YAAAw1E,aAAAxiF,MAAAniB,EAAAmvB,YAAAs1E,MAAAtiF,QAAA6iL,EAAA3kK,KAAA2kK,EAAAC,WAAAD,EAAAvgG,QAuCA5zG,+CAAA,OAAAmP,EAAAmvB,YAAAy1E,IAAAziF,MAAA6iL,EAAApgG,KAuDA/zG,+CAAA,OAAAmP,EAAAmvB,YAAAzwB,IAAAyjB,MAAA6iL,EAAAtmM,KAAAsB,EAAAmvB,YAAA01E,OAAA1iF,MAAA6iL,EAAAngG,QAAA7kG,EAAAmvB,YAAA61E,IAAA7iF,MA2BAtxB,+CAAA,OAAAmP,EAAAmvB,YAAA60D,IAAA7hE,MAAAniB,EAAAmvB,YAAAoN,WAAApa,MA6BAtxB,+CAAA,OAAAmP,EAAAmvB,YAAAm1E,UAAAniF,MAAAniB,EAAAmvB,YAAAwG,MAAAxT,iCAzOvBtxB,uBAAA,EAAA21M,GAAA,gGAAe31M,uBAAA,OAAAA,wBAAA,IAAAmP,EAAA+qL,mBCvDb,MAAO0b,GA2BX/2M,YACSuxB,EACCnjB,EACA4oM,EACAviM,EACA8xB,EACA8yE,EACDorE,EACCipB,EACA72K,GARD32B,KAAAqxB,sBACCrxB,KAAAkO,qBACAlO,KAAA82M,sBACA92M,KAAAuU,SACAvU,KAAAqmC,iBACArmC,KAAAm5G,iBACDn5G,KAAAukL,yBACCvkL,KAAAwtM,gBACAxtM,KAAA22B,kBAnCV32B,KAAA+2M,eAAwB,GAIxB/2M,KAAAg3M,mBAA6B,GAG7Bh3M,KAAAi3M,kBAAmB,EACnBj3M,KAAA22M,iBAAkB,EAElB32M,KAAAy5L,UAAY,CACVgB,UAAU,GAEZz6L,KAAAk3M,iBAAmB,GAEXl3M,KAAAm1L,KAAO,IAAIruG,eAEnB9mF,KAAAs0M,YAAgC,IAAIptH,IAoBlClnF,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAKm7L,gBAAkBn7L,KAAKm5G,eAAezmG,KAC7C,CAEAjE,WACEzO,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnoM,UAAWgb,IAClC,MAAMwtL,EAAiBxtL,EAAKoZ,OACxBo0K,IACFn3M,KAAKs0M,YAAY/gH,QACjBthF,OAAOC,KAAKilM,GAAgBnwM,QAASowM,IACRD,EAAeC,GACvBpwM,QAAS+vM,IAC1B,MAAM9tK,EAAc8tK,EAAelkL,KAE7BwkL,EAAmB,GADNN,EAAe/3L,OACQiqB,IAC1CjpC,KAAKs0M,YAAY97K,IAAI6+K,EAAkBN,GACvC/2M,KAAKs3M,8BAA4B,EAClC,GAEHt3M,KAAKu3M,gBACHv3M,KAAKs0M,YAAY5hM,IAAI,GAAGiX,EAAK6tL,eAAkB7tL,EAAK8tL,iBAAsB,GAC5Ez3M,KAAKq0M,mBAAqB,GAAGr0M,KAAKu3M,iBAAiBn9M,UAAU4F,KAAKu3M,iBAAiBjuK,mBAAmBtpC,KAAKu3M,iBAAiB1kL,OAAI,IAKtI7yB,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7Bv4G,KAAK60M,YAAct8F,KAGvBv4G,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnuK,4BAA6Bhf,IACpD3pB,KAAKg3M,mBAAqBrtL,EAC1B3pB,KAAKs3M,8BAA4B,GAGvC,CAEAttL,cACEhqB,KAAKm1L,KAAKjrK,aACZ,CAEAotL,+BACEt3M,KAAKs0M,YAAYttM,QAAQ,CAAC+vM,EAAgB/tK,KACxC,MAAMguK,EAAqBh3M,KAAKg3M,mBAAmBD,EAAe38M,MAC5Ds9M,EAAmBV,EAAqBA,EAAmBtoM,OAAS,EACpEmkB,EAAOmkL,EAAqBA,EAAmBnkL,KAAOkkL,EAAelkL,KAE3E7yB,KAAKs0M,YAAY97K,IAAIwQ,EAAa,IAC7B+tK,EACH5C,0BAA2BuD,EAC3B7kL,KAAMA,IAG6B,kBAAjCkkL,EAAeztK,eACjBtpC,KAAKs0M,YAAY97K,IAAIwQ,EAAa,IAC7B+tK,EACH5C,0BAA2B,EAC3BthL,KAAMA,GACP,EAGP,CAEA8kL,mBACE,GAAI33M,KAAK60M,aAAe70M,KAAK60M,YAAY/vF,cAAe,CACtD,GAAI9kH,KAAK60M,YAAY/vF,cAAc19E,OAAS,EAC1C,MAAO,CAAEq+B,MAAO,WACX,GAAIzlE,KAAK60M,YAAY/vF,cAAcgwF,SAAW,EACnD,MAAO,CAAErvI,MAAO,UAEpB,CAGF,CAEA0wI,YAAYtjJ,GACV,MAAMxrD,EAASwrD,EAAMxrD,OACrB,KAAMA,aAAkBuwM,aAAc,OACtC,MAAMC,EAAuBxwM,EAAOwiF,QAAQ,oBAE5C,GAAIguH,EAAa,CACf,MAAMC,EAAqBD,EAAYE,yBAErCD,EAAmBn0M,IAAM,GAAKm0M,EAAmB3hB,OAASz2J,OAAOs4K,cAGjEH,EAAYI,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAE5D,CACF,CAEAC,cAAcC,GACZr4M,KAAKk3M,iBAAiBmB,IAASr4M,KAAKk3M,iBAAiBmB,EACvD,CAEAC,qBACEt4M,KAAKi3M,kBAAoBj3M,KAAKi3M,gBAChC,CAEA/C,mBAAmB5zM,GACjBN,KAAK82M,oBAAoBhuK,WAAWxoC,GAAOqO,UACxCgb,IACgC,kBAA3BrpB,EAAMgpC,cACRy9C,aAAa6D,QAAQ,kBAAmB,KAExC7D,aAAa6D,QAAQ,uBAAwB,GAAGtqF,EAAMlG,QAAWkG,EAAMuyB,QACvEk0D,aAAa6D,QAAQ,kBAAmBtqF,EAAM0e,MAEhDhf,KAAKu3M,gBAAkBv3M,KAAKs0M,YAAY5hM,IAAI,GAAGpS,EAAM0e,OAAU1e,EAAMuyB,SAAc,GACnF,MAAMskL,EAAiBxtL,EAAKoZ,OACxBo0K,GAA4C,iBAAnBA,GAC3BllM,OAAOC,KAAKilM,GAAgBnwM,QAASowM,IACRD,EAAeC,GAEvBpwM,QAAS+vM,IAC1B,MAAM/tK,EAAc+tK,EAAe38M,KAC7Bm+M,EAAexB,EAAer4L,MAC9BuqB,EAAc8tK,EAAelkL,KAGjCmW,IAAgBhpC,KAAKu3M,gBAAgBn9M,MACrC6uC,IAAgBjpC,KAAKu3M,gBAAgB1kL,MACD,kBAApCkkL,EAAeztK,eAEftpC,KAAKwtM,cAAcC,SAAS,GAAGzkK,KAAeC,IAAesvK,EAAY,EAE5E,EACF,EAGL,OACA,KAEEv4M,KAAK22B,gBAAgBwW,oBACnB,kBACA,OACA,QACA,GAEF,MAAM/C,EAAepqC,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAK,GAChDqD,KAAK82M,oBAAoB3sK,oBAAoBC,EAAY,EAG/D,CACA+zE,gBACEn+G,KAAKqxB,oBAAoB8sF,eAC3B,CACApqG,UAAUqtD,GACR,OAAOA,CACT,iDA9LWy1I,IAAmB51M,8BAAAC,KAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,UAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,IAAA/kB,8BAAAglB,MAAA,4DAAnB4wL,GAAmBztM,UAAA,oBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,8YD+DCE,sFAUAA,0FAkBAA,oFA6CAA,iFAuCAA,mFAuDAA,iFA2BAA,yFA6BAA,2FAzNZA,sFAWcA,qFAKAA,6FAFgEA,sFAKOA,6FAYvEA,mFAMAA,mFAMAA,kFAMAA,4FAMAA,uFAMAA,sFA3BuDA,mFAMCA,mFAMDA,kFAMKA,4FAMJA,uFAMEA,sFAY1DA,mFAMAA,uFAaAA,mFAMAA,oFAEqDA,oFAxBEA,mFAOnEA,qFACT,uDACmC,mCAA0C,8FAC7E,yDACkC,qCAAwC,sIAQCA,mFAgBtDA,sFAKAA,mFAKAA,qFAMAA,oFAIAA,qFAKAA,uFAKAA,sFAMAA,iFAMAA,2FAvCuDA,sFAKHA,mFAKEA,qFAKDA,oFAKCA,qFAKGA,uFAKHA,sFAWMA,2FALVA,iFAiBlDA,0FAMAA,iFAMAA,iFATsDA,0FAMHA,iFAMAA,iFAYnDA,kFAMAA,oFAHsDA,kFAQ3EA,2EAAA,iDAAoB,4CACpB,uDACuC,mCAAiD,8FACxF,yDACwC,qCAAgD,sIAcnEA,sFAMAA,qFAMAA,wFAMAA,6FAMAA,2FArByDA,sFAMDA,qFAMFA,wFAMEA,6FAMMA,ymPA3VjGvI,2BAAA,YAIEA,sBAAA,8BAOEA,2BAHF,kBAGEA,CADkC,sBAGnBA,uBAAA,sBAAAA,iCAAAsL,GAAAtL,wBAAAwC,EAAAkzM,iBAAAlzM,EAAAkzM,gBAAA,GAAgD11M,2BAI/DA,uBAAA,EAAAu3M,GAAA,gCAeEv3M,2BADF,sBACEA,CADiB,2BAEfA,sBAAA,6BACFA,2BACAA,2BAAA,YACKA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA06G,gBAAe,GAC3Bl9G,sBAAA,sBACFA,2BACAA,2BAAA,aACEA,sBAAA,wBACFA,2BACAA,uBAAA,GAAAw3M,GAAA,cAIAx3M,2BAAA,aACEA,sBAAA,kBAGNA,+BAIAA,uBAAA,GAAAy3M,GAAA,yBAAAz3M,oCAYEA,2BAFF,YAEEA,CAFmB,aAIjBA,uBAAA,GAAA03M,GAAA,uBACF13M,2BAEAA,2BAAA,aAEEA,yBAAA,IAEJA,6BAIAA,uBAAA,GAAA23M,GAAA,yBAAA33M,oCAiRAA,qGAtVYA,sBAAA,GAAAA,uBAAA,QAAA43M,GACK53M,+CAAA,SAAAwC,EAAAkzM,iBAOS11M,+CAAA,cAAAwC,EAAA6wM,YAAA,KAAA7wM,EAAA6wM,YAAAj6M,MAAA,GAyBhB4G,sBAAA,GAAAA,uBAAA,OAAAwC,EAAA87B,YAAA1M,KAAAN,MAwBHtxB,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAQ,IAAAgC,EAAAkzM,kBACY11M,+CAAA,mBAAA63M,GAIZ73M,+CAAA,UAAAA,4BAAA,EAAAktD,IAAA1qD,EAAAkzM,wrJE5CH,MAAOoC,GACJ53L,QACLzD,GAEA,MAAMnb,EAAOmb,EAAM27F,YAAY92G,KACzBgW,EAAqB,OAAdhW,EAAKgW,KAAgB,KAAOvY,KAAKg5M,YAAYt7L,GACpDu7L,EAAe12M,EAAK02M,eAAgB,EAOpCC,EAAwB,CAAC,CAAEtoJ,KAJH,iBAArBruD,EAAK27B,YACR37B,EAAK27B,YACL37B,EAAK27B,YAAY0yB,MAAQruD,EAAKquD,MAAQr4C,EAECA,KAAMA,EAAM0gM,aAAcA,IAEvE,SAAO71L,MAAG81L,EACZ,CAEOF,YAAYt7L,GAMjB,OAAgBA,EAAMy7L,aAFbxwM,OAAO,CAACnO,EAAGyoC,IAAOzoC,EAHLmvH,IACpBA,EAAShhH,OAAO,CAACnO,EAAGyoC,IAAOzoC,EAAK,IAAMyoC,EAAE1qB,KAAO,IAEjB6gM,CAAan2K,EAAEjkB,KAAO,GAGxD,4BClDE/d,2BAAA,2BAEEA,mBAAA,GACFA,+EAFqBA,mCAAA,YAAAo4M,EAAA9gM,KAAA,IACnBtX,uDAAA,IAAAo4M,EAAAzoJ,KAAA,gCAGF3vD,2BAAA,2BAEEA,mBAAA,GACFA,+EADEA,uDAAA,IAAAo4M,EAAAzoJ,KAAA,gCARJ3vD,oCAAA,GAMEA,uBALA,EAAAq4M,GAAA,4BAKAr4M,CAJ+C,EAAAs4M,GAAA,oGADzBt4M,+CAAA,QAAAgwL,GAAA,OAAAooB,EAAA9gM,MAKAtX,+CAAA,OAAAgwL,GAAA,OAAAooB,EAAA9gM,iCAR1BtX,2BAAA,sBAEEA,uBAAA,EAAAu4M,GAAA,sBAWFv4M,qEAbgBA,uBAAA,sBAEkBA,+CAAA,UAAAuvB,EAAA0oL,SCqC5B,MAAOO,GAaX35M,YAAoByU,EAAwBymG,EAA4B0+F,GAApD15M,KAAAuU,SAAwBvU,KAAAg7G,WAA4Bh7G,KAAA05M,eAZxE15M,KAAAk5M,OAAwB,GAQxBl5M,KAAA25M,UAAW,EAEH35M,KAAA45M,gBAAkB,IAAIb,GAG5B/4M,KAAKkjH,aAAeljH,KAAKuU,OAAOw6I,OAC7B//I,QAAKqV,UAAQrlB,GAAMA,aAAa66M,oBAChClrM,UAAU,KACT3O,KAAK25M,UAAW,IAGpB35M,KAAKkjH,aAAeljH,KAAKuU,OAAOw6I,OAC7B//I,QAAKqV,UAAQrlB,GAAMA,aAAampM,kBAChCx5L,UAAU,KACT,MAAMmrM,EAAcvlM,EAAOwlM,YAAYl6K,SAAS+D,KAEhD5jC,KAAKg6M,eAAeF,GACjB9qM,QACCyP,YAAUzf,GAAMA,IAAC,EACjBi7M,YAAUj7M,GAAMA,EAAE4xD,OAAI,EACtB9qB,cAAO,EACPrnB,YAAUzf,IACR,MAAMZ,EAAI4B,KAAKk6M,YAAYl7M,GAC3B,OAAOgB,KAAKm6M,mBAAkC/7M,GAAG4Q,QAAKoZ,WAAO,IAGhEzZ,UAAW3P,IACVgB,KAAK25M,UAAW,EAChB35M,KAAKk5M,OAASl6M,EACd,MAAMqG,EAAQrF,KAAKo6M,mBAAmBp6M,KAAKk5M,QAC3Cl5M,KAAK05M,aAAaW,SAASh1M,EAAK,EACjC,EAET,CAEA2kB,cACEhqB,KAAKkjH,aAAah5F,aACpB,CAEQ8vL,eAAet8L,GACrB,IAAI48L,EAEJ,MAAM/3M,EAAOmb,EAAM27F,aAAe37F,EAAM27F,YAAY92G,KAEpD,GAAIA,GAAQA,EAAK27B,YAAa,CAC5B,IAAIq8K,EAGFA,EADEh4M,EAAK27B,YAAYq0D,qBAAqBwmH,GAC7B/4M,KAAKg7G,SAAStoG,IAAyBnQ,EAAK27B,aAE5Cl+B,KAAK45M,gBAGlB,MAAM/9M,EAAS0+M,EAASp5L,QAAQzD,GAChC48L,EAAUt6M,KAAKm6M,mBAAkCt+M,GAAQmT,QAAKoZ,WAChE,MACEkyL,KAAUl3L,MAAG,IAGf,OAAI1F,EAAM88L,aACRF,KAAU1xM,UAAsB0xM,EAASt6M,KAAKg6M,eAAet8L,EAAM88L,cAG9DF,CACT,CAEAJ,YAAYh8K,GACV,MAAMriC,EAAwB,GAC9BqiC,SAAYl3B,QAASm8C,IACnB,MAAMxmD,EAAQwmD,EAAQyN,KAAKj0D,MAAM,KACjC,IAAKwmD,EAAQ81J,cAAgBt8M,EAAMvB,OAAS,EAAG,CAC7C+nD,EAAQyN,KAAOj0D,EAAMA,EAAMvB,OAAS,GACpC,QAASa,EAAI,EAAGA,EAAIU,EAAMvB,OAAS,EAAGa,IACpCJ,EAAOK,KAAK,CAAE00D,KAAMj0D,EAAMV,GAAIsc,KAAM,MAExC,CACA1c,EAAOK,KAAKinD,EAAO,GAEdtnD,CACT,CAEA4+M,UAAUn6M,GACR,OAAOA,GAA+B,mBAAfA,EAAMknC,IAC/B,CAEA2yK,mBAAsB75M,GACpB,OAAIA,aAAiBwvC,aACZxvC,EAGLN,KAAKy6M,UAAUn6M,IAAK,EACfy+C,QAAK79B,QAAQC,QAAQ7gB,KAAM,EAG7B8iB,MAAG9iB,EACZ,CAEQ85M,mBAAmBlB,GACzB,MAAMwB,EAAkBxB,EACrBh8M,IAAKy9M,GACGA,EAAM/pJ,MAAQ,IAEtBh0D,KAAK,OACR,OAAI89M,EAAgBt/M,OAAS,EACpB,GAAG0sE,KAAaE,gBAAgB0yI,IAEhC5yI,KAAaE,WAExB,iDArHWyxI,IAAoBx4M,8BAAAC,UAAAD,wEAAA8H,SAAA,4DAApB0wM,GAAoBrwM,UAAA,qBAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,uMAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GDvCjCrI,uBAAA,EAAA25M,GAAA,6BACiB35M,uBAAA,OAAAwC,EAAAy1M,OAAA99M,0HEMf6F,2BAAA,SAAAA,wBAAA,KAEEA,sBADqC,WACrCA,CADiE,SAEjBA,8EAClDA,2BAAA,SAAAA,wBAAA,KAEAA,sBADuC,WACvCA,CAD4E,SAE5BA,8FAFDA,sBAAA,GAAAA,sBAAAM,EAAAs6B,4GAZjD56B,2BAAA,sBAMgBA,uBAAA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAs5M,cAAa,GAKxC55M,uBAJA,EAAA65M,GAAA,YAIA75M,CAHU,EAAA85M,GAAA,aAOZ95M,uEAVgBA,uBAJA,OAAAM,EAAA83L,UAIAp4L,CAJkB,eAIlBA,CAFmB,yBAAAM,EAAA83L,WAI3Bp4L,+CAAA,WAAAM,EAAAs6B,gBAIA56B,+CAAA,OAAAM,EAAAs6B,eAAA,ICAF,MAAOm/K,GAMXl7M,YACU62B,EACAzoB,GADAlO,KAAA22B,kBACA32B,KAAAkO,qBAJVlO,KAAAi7M,qBAAsB,CAKnB,CAEHxsM,WACEzO,KAAK22B,gBAAgBmB,sBAAsBnpB,UAAWomB,IACpD/0B,KAAK+0B,sBAAwB,IAAIgD,KAAwBhD,GACzD,MAAM4C,EAAoB33B,KAAKkO,mBAAmBsnG,uBAC9C79E,IACF33B,KAAK67B,eAAiB77B,KAAKk7M,kBAAkBvjL,GACzC33B,KAAK67B,gBAAkB77B,KAAK+0B,sBAAsBw1E,sBACpDvqG,KAAKq5L,UAAY,SAEjBr5L,KAAKq5L,UAAY,UAEnBr5L,KAAKi7M,oBACHj7M,KAAK67B,gBAAkB77B,KAAK+0B,sBAAsBs1E,sBACpDrqG,KAAKkO,mBAAmBonG,qBAAqB7lG,KAAKzP,KAAKi7M,qBAAmB,EAGhF,CAEAjxL,cACEhqB,KAAKkO,mBAAmBonG,qBAAqB7lG,MAAK,EACpD,CAEQyrM,kBAAkBvjL,GACxB,MAAMgqF,EAAU,IAAIzlF,KACdi/K,EAAa,IAAIj/K,KAAyB,IAApBvE,GAC5B,OAAOv6B,KAAK2+B,OAAOo/K,EAAWC,UAAYz5F,EAAQy5F,WAAO,MAC3D,CAEAP,cACE76M,KAAKkO,mBAAmBonG,qBAAqB7lG,MAAK,GAClDzP,KAAKi7M,qBAAsB,CAC7B,iDA1CWD,IAAkC/5M,8BAAAC,MAAAD,8BAAA8H,KAAA,4DAAlCiyM,GAAkC5xM,UAAA,qCAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDHnC5C,uGAA6B,gDAAmB,kDACxD,mCAC0B,oDAElBA,wGAA6B,qCAAQ,iCAAoB,qDACnE,mCAC0B,0UAd5BvI,uBAAA,EAAAo6M,GAAA,6BAEiBp6M,uBAAA,OAAAwC,EAAAw3M,kMEFjBh6M,2BAAA,sBAMgBA,uBAAA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAs5M,cAAa,GACxC55M,2BAAA,SAAAA,wBAAA,KAGAA,sBAFE,QAEFA,CADsE,SACQA,wBAChFA,yEANgBA,uBAHA,eAGAA,CAHmB,OAAAM,EAAA+5M,qBAGnBr6M,CAD6B,yBAAAM,EAAA+5M,uBCWvC,MAAOC,GAIXz7M,YACUu5C,EACAnrC,EACAmjB,EACAk9J,GAHAvuL,KAAAq5C,mBACAr5C,KAAAkO,qBACAlO,KAAAqxB,sBACArxB,KAAAuuL,+BAPVvuL,KAAAi7M,qBAAsB,EACtBj7M,KAAAs7M,qBAAuB,SAOpB,CAEH7sM,WAKE,GAJAzO,KAAKuuL,6BAA6BxmL,OAAO4G,UAAW+qE,IAClD15E,KAAKi7M,oBAAsBvhI,KAGxB15E,KAAKw7M,uBAAwB,CAChC,MAAMC,EAAuBz7M,KAAKkO,mBAAmBW,iBAAiB6lG,UAClEviG,UAAQF,OAAOpJ,OAAO4yM,KACxBz7M,KAAKq5C,iBAAiB5S,UAAU,aAAa93B,UAAWzL,IACjDA,EAAQ00B,SACX53B,KAAKuuL,6BAA6BhB,eAAc,EAAI,EAI5D,CACF,CAEAvjK,cACEhqB,KAAKuuL,6BAA6BhB,eAAc,EAClD,CAEAiuB,uBACE,MAAiE,SAA1Dz0H,aAAawD,QAAQ,gCAC9B,CAEAswH,cACE76M,KAAKuuL,6BAA6BhB,eAAc,GAChDxmG,aAAa6D,QAAQ,gCAAiC,QACtD5qF,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,+CACAA;iFAGJ,iDA7CW+xM,IAA8Bt6M,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,IAAA,4DAA9BsyM,GAA8BnyM,UAAA,gCAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDR/B5C,4IACR,uCACgE,uDAClE,0CAAkE,kcAVpEvI,uBAAA,EAAAy6M,GAAA,6BAAiBz6M,uBAAA,OAAAwC,EAAAw3M,odEAjBh6M,2BAAA,sBAKgBA,uBAAA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAs5M,cAAa,GACxC55M,sBAAA,iDACFA,uEAHgBA,uBAFA,eAEAA,CAFmB,OAAAM,EAAA4rM,KAAAnpB,SAEnB/iL,CADsB,yBAAAM,EAAA4rM,KAAAnpB,UAG9B/iL,+CAAA,YAAAA,wBAAA,IAAAM,EAAA4rM,KAAAvuK,SAAA39B,6BCMF,MAAO06M,GAKX77M,YAAoB87M,GAAA57M,KAAA47M,0BAJpB57M,KAAAmtM,UAAyBvzK,CAI8C,CAEvEnrB,WACEzO,KAAKkjH,aAAeljH,KAAK47M,wBAAwB1O,MAAMv+L,UAAWw+L,IAChEntM,KAAKmtM,KAAOA,GAEhB,CAEAnjL,cACEhqB,KAAKkjH,aAAah5F,aACpB,CAEA2wL,cACE76M,KAAK47M,wBAAwBr+I,MAC/B,iDAnBWo+I,IAAa16M,8BAAAC,IAAA,4DAAby6M,GAAavyM,UAAA,cAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,yJAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GDZ1BrI,uBAAA,EAAA46M,GAAA,6BAAiB56M,uBAAA,OAAAwC,EAAA0pM,mLEePlsM,oCAAA,GACEA,2BAAA,cAEQA,uBAAA,yBAAA66M,EAAA76M,0BAAAsL,GAAAgkD,UAAA//B,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAurL,kBAAAD,GAAyB,GACxC76M,mBAAA,GACFA,2FADEA,sBAAA,GAAAA,+BAAA,IAAA66M,EAAA1xL,GAAA,MAAA0xL,EAAA5iK,eAAA,kCAlBZj4C,oCAAA,GAEIA,2BADF,UACEA,CADoC,YACpCA,mBAAA,KACmCA,2BAIjCA,2BAHF,UAGEA,CAD+B,cAK7BA,mBAAA,GACFA,2BACAA,2BAAA,WACEA,uBAAA,EAAA+6M,GAAA,sBASN/6M,kHAZMA,sBAAA,GAAAA,+BAAA,IAAAg7M,EAAAvjK,eAAAtuB,GAAA,MAAA6xL,EAAAvjK,eAAAQ,eAAA,OAGiCj4C,sBAAA,GAAAA,uBAAA,UAAAg7M,EAAAzjK,oCAf3Cv3C,oCAAA,GACEA,uBAAA,EAAAi7M,GAAA,6GAAej7M,+CAAA,OAAAg7M,EAAAE,OAAAF,EAAAE,MAAAnnG,KAAAxkF,EAAA+O,YAAAy1E,IAAAziF,MAAA/B,EAAA4rL,YAAAH,EAAAzjK,QAAAp9C,OAAA,ICoBX,MAAOihN,GAgBXv8M,YACUoO,EACAirG,EACA5kG,EACAozB,EACDiL,GAJC5yC,KAAAkO,qBACAlO,KAAAm5G,iBACAn5G,KAAAuU,SACAvU,KAAA2nC,eACD3nC,KAAA4yC,mBApBA5yC,KAAAwmC,iBAAmB,IACpBxmC,KAAAm1L,KAAO,IAAIruG,eACX9mF,KAAAs8M,aAAe,OACft8M,KAAAu8M,iBAAmB,YACnBv8M,KAAAw8M,iBAAmB,aACnBx8M,KAAAy8M,mBAAqB,cACrBz8M,KAAA08M,qBAAuB,gBAG/B18M,KAAAo8M,WACEh5J,SAASzjB,SAAS6nH,KAAKtlJ,SAASlC,KAAKu8M,mBACrCn5J,SAASzjB,SAAS6nH,KAAKtlJ,SAASlC,KAAKy8M,qBACrCr5J,SAASzjB,SAAS6nH,KAAKtlJ,SAASlC,KAAKw8M,mBACrCp5J,SAASzjB,SAAS6nH,KAAKtlJ,SAASlC,KAAK08M,qBAQpC,CAEHjuM,WACEzO,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,iBAC3C7O,KAAKw5G,kBAAoBx5G,KAAKm5G,eAAezmG,MAE7C1S,KAAKm1L,KAAK3sK,IACRxoB,KAAKuU,OAAOw6I,OACT//I,QAAKqV,UAAQwuC,GAAiBA,aAAiBs1I,kBAC/Cx5L,UACC,IACG3O,KAAKo8M,WAAa,CACjBp8M,KAAKy8M,mBACLz8M,KAAKu8M,iBACLv8M,KAAKw8M,iBACLx8M,KAAK08M,sBACLr9M,KAAMs9M,GAAc38M,KAAKuU,OAAOyK,IAAIK,WAAWs9L,MAIzD38M,KAAKm1L,KAAK3sK,IACRxoB,KAAK2nC,aACFj1B,IAAI,IAAO1S,KAAKo8M,WAAap8M,KAAK4yC,iBAAiBlvB,OAASk5L,QAAQ58M,KAAKwmC,kBACzE73B,YAEP,CAEAqb,cACEhqB,KAAKm1L,KAAKjrK,aACZ,CAEA6xL,kBAAkBjjK,GAChB94C,KAAK4yC,iBAAiBiG,aAAaC,GACnC94C,KAAKkpF,YACP,CAEQA,aACN,MAAM2zH,EAAa78M,KAAKuU,OAAOyK,IAC/Bhf,KAAKuU,OAAOwyB,cAAc/mC,KAAKs8M,aAAc,CAAEv8K,oBAAoB,IAAQ+8K,QAAQ,KACjF98M,KAAKuU,OAAOC,SAAS,CAACqoM,GAAW,EAErC,iDA/DWR,IAAgBp7M,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,UAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAA,4DAAhBmzM,GAAgBjzM,UAAA,iBAAAoB,MAAA,EAAAC,KAAA,GAAAC,YAAA,IAAA0B,aDVN5C,kGAPNA,gdAJjBvI,uBAAA,EAAA87M,GAAA,sHAAe97M,uBAAA,OAAAA,4BAAA,EAAAyI,GAAAzI,wBAAA,IAAAwC,EAAA+1G,mBAAAv4G,wBAAA,IAAAwC,EAAAmvC,iBAAA6F,UAAAx3C,wBAAA,IAAAwC,EAAAmvC,iBAAA+F,2UEqBT,MAAOqkK,GAIX,SAA0B/gJ,GACxB,MAAO,oBAAsBj8D,KAAK88G,cAAc1hH,MAClD,CAEA0E,YACSyU,EACC8xB,EACA0hF,EACA+uF,EACAmG,EACA/uM,EACAqgL,EACAqtB,GAPD57M,KAAAuU,SACCvU,KAAAqmC,iBACArmC,KAAA+nH,qBACA/nH,KAAA82M,sBACA92M,KAAAi9M,iBACAj9M,KAAAkO,qBACAlO,KAAAuuL,+BACAvuL,KAAA47M,0BAfV57M,KAAA88G,cAA0B,GAClB98G,KAAAm1L,KAAO,IAAIruG,eAgBjB9mF,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACMzO,KAAKu/B,YAAYm1E,UAAUniF,OAC7BvyB,KAAKm1L,KAAK3sK,IAAIxoB,KAAK82M,oBAAoBrvK,gBACvCznC,KAAKm1L,KAAK3sK,IAAIxoB,KAAK82M,oBAAoBvuK,mCAEzCvoC,KAAKm1L,KAAK3sK,IAAIxoB,KAAKqmC,eAAeoB,gBAClCznC,KAAKm1L,KAAK3sK,IAAIxoB,KAAK+nH,mBAAmBt+F,KAAKzpB,KAAKqmC,iBAEhDrmC,KAAKm1L,KAAK3sK,IACRxoB,KAAKkO,mBAAmBqnG,gBAAgB5mG,UAAWuuM,IACjDl9M,KAAKm9M,oBAAoB,iBAAkBD,EAAW,IAG1Dl9M,KAAKm1L,KAAK3sK,IACRxoB,KAAKuuL,6BAA6BxmL,OAAO4G,UAAW+qE,IAClD15E,KAAKm9M,oBAAoB,+BAAgCzjI,EAAO,IAGpE15E,KAAKm1L,KAAK3sK,IACRxoB,KAAK47M,wBAAwB1O,MAAMv+L,UAAWw+L,IAC5CntM,KAAKm9M,oBAAoB,0BAA2BhrM,kBAAgBg7L,GAAK,IAG7EntM,KAAKi9M,eAAexzL,MACtB,CACA0zL,oBAAoB/iN,EAAc8iN,GAChC,GAAIA,EACGl9M,KAAK88G,cAAc56G,SAAS9H,IAC/B4F,KAAK88G,cAAc5gH,KAAK9B,OAErB,CACL,MAAM8M,EAAQlH,KAAK88G,cAAc/gH,QAAQ3B,GACrC8M,GAAS,GACXlH,KAAK88G,cAAc57C,OAAOh6D,EAAO,EAErC,CACF,CAEA8iB,cACEhqB,KAAKm1L,KAAKjrK,aACZ,iDA7DW8yL,IAAwB/7M,8BAAAC,UAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,IAAAjI,8BAAAkI,KAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,IAAA,4DAAxBg3L,GAAwB5zM,UAAA,0BAAAktF,SAAA,EAAA3kC,aAAA,SAAAroD,EAAA7F,GAAA,EAAA6F,GAAxBrI,uBAAAwC,EAAAw4D,iDAFA,CAAC0vI,MAAenhM,MAAA,GAAAC,KAAA,EAAAC,OAAA,mGAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ICZvBrI,2BAPN,eAOMA,CAPkB,kBAOlBA,CANW,UAMXA,CAJwL,WAQtLA,sBAFA,mCAEAA,CAFiE,8BAEjEA,CADuD,aAEzDA,2BAIAA,sBAHA,eAGAA,CAHyB,mBAGzBA,CAFiC,kBAEjCA,CAD+B,sBAIrCA,sCAhBSA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAA,cAAAjG,EAAA8Q,OAAAyK,KAAA,gBAAAvb,EAAA8Q,OAAAyK,KAAA,2BAAAvb,EAAA8Q,OAAAyK,IAAA,iBAAAvb,EAAA8Q,OAAAyK,MAKE/d,+CAAA,UAAAA,4BAAA,EAAAK,GAAA,cAAAmC,EAAA8Q,OAAAyK,KAAA,gBAAAvb,EAAA8Q,OAAAyK,KAAA,2BAAAvb,EAAA8Q,OAAAyK,IAAA,iBAAAvb,EAAA8Q,OAAAyK,4bCCL,MAAOo+L,GACX3uM,WACE4uM,KAAU,CACRr+L,IAAK0gB,OAAOC,SAASm7J,OAAS,qBAC9BwiB,OAAQ,cACRC,OAAQ,cAEZ,iDAPWH,GAAgB,4DAAhBA,GAAgBh0M,UAAA,kBAAAoB,MAAA,EAAAC,KAAA,EAAAC,OAAA,kCAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GCR7BrI,sBAAA,qKCWM,MAAOu8M,GACX19M,YAAoByU,EAAwBrG,GAAxBlO,KAAAuU,SAAwBvU,KAAAkO,oBAAyC,CAErF8lG,YAAYC,EAAgC5pF,GAM1C,QACErqB,KAAKkO,mBAAmBgmG,eACvBl0G,KAAKkO,mBAAmBioB,SACzBn2B,KAAKkO,mBAAmBunG,0BAExBz1G,KAAKuU,OAAOC,SAAS,CAAC,0BAA2B,CAAEsrB,YAAa,CAAEq0E,UAAW9pF,EAAMrL,QAC5E,EAGX,CAEAo1F,iBAAiBC,EAAoChqF,GACnD,OAAOrqB,KAAKg0G,YAAYK,EAAYhqF,EACtC,iDAtBWmzL,IAA0Bv8M,qBAAAC,UAAAD,qBAAA8H,KAAA,+DAA1By0M,GAA0Br8M,QAA1Bq8M,GAA0Bp8M,UAAAC,WAFzB,QAAM,4BCEd,MAAOo8M,GACX39M,YAAoBoO,GAAAlO,KAAAkO,oBAAyC,CAE7D8lG,cACE,IAAKh0G,KAAKkO,mBAAmBioB,QAC3B,OAAO,EAET,MAAM,IAAI0I,KAEZ,CAEAu1E,mBACE,OAAOp0G,KAAKg0G,aACd,iDAbWypG,IAAiBx8M,qBAAAC,KAAA,+DAAjBu8M,GAAiBt8M,QAAjBs8M,GAAiBr8M,UAAAC,WAFhB,QAAM,4ECEVJ,2BAAA,QAAAA,wBAAA,MAEEA,sBAAA,UAC+CA,8FAD5CA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAA02C,UACHxnD,sBAAA,MAAA+K,EAAAo2G,eAAA,KAAAp2G,EAAAo2G,eAAAK,gEAOFxhH,2BAAA,QAAAA,wBAAA,MACEA,sBAAA,UAEFA,8FAFKA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,GAAA0K,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,UACDxnD,sBAAA,MAAA+K,EAAAo2G,eAAA,KAAAp2G,EAAAo2G,eAAAK,gEAdRxhH,oCAAA,GACEA,2BAAA,YACEA,uBAAA,EAAAy8M,GAAA,aAIAz8M,2BAAA,UAAAA,mBAAA,MAGFA,6BAEAA,uBAAA,EAAA08M,GAAA,yBAAA18M,oJAROA,sBAAA,GAAwBA,uBAAxB,OAAAozL,EAAAC,UAAwBrzL,CAAA,WAAAszL,8BAVnCtzL,2BAAA,gBAOEA,uBAAA,EAAA28M,GAAA,uBAkBF38M,gHAlBiBA,wBAA0BA,uBAA1B,OAAAozL,EAAAI,YAA0BxzL,CAAA,WAAA48M,0BA6CnC58M,sBAAA,oCANFA,2BAAA,0DAIEA,2BAAA,YACAA,mBAAA,yEACAA,uBAAA,EAAA68M,GAAA,YAGA78M,2BAEEA,2BADF,WACEA,CADuB,YAErBA,sBAAA,yBAGNA,8EAbgBA,uBAFA,UAAAA,wBAAA,IAAA88M,EAAAthB,OAAA/tL,QAEAzN,CAFkD,gBAElDA,CADmB,gBAIjCA,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,KAAAA,wBAAA,IAAA88M,EAAAthB,OAAA/tL,SAAA,KACKzN,sBAAA,GAAAA,uBAAA,4BAAA88M,EAAAthB,OAAA,KAAAshB,EAAAthB,OAAA/tL,SAMiBzN,sBAAA,GAAAA,uBAAA,aAAA88M,EAAAthB,OAAAtD,mCAM5Bl4L,oCAAA,GACEA,2BAAA,gDACEA,mBAAA,yEACFA,8GAFKA,+CAAA,UAAAA,wBAAA,IAAA88M,EAAAthB,OAAA/tL,SACHzN,sBAAA,GAAAA,+BAAA,IAAAA,wBAAA,IAAAA,wBAAA,IAAA88M,EAAAthB,OAAA/tL,SAAA,+BAcAzN,sBAAA,oDACGA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAAkgB,qCAeLhxB,oCAAA,GACEA,2BAAA,WAAAA,mBAAA,MACsBA,2BACtBA,2BAAA,WAAiBA,mBAAA,GAAgBA,2BACjCA,2BAAA,WAAAA,mBAAA,MACiBA,2BACjBA,2BAAA,WAAiBA,mBAAA,GAAmBA,oFAHnBA,sBAAA,GAAAA,8BAAA4zL,EAAAjkJ,OAGA3vC,sBAAA,GAAAA,8BAAA4zL,EAAAmpB,qCAVnB/8M,2BAFF,UAEEA,CADgC,WAChCA,mBAAA,MACqBA,2BACrBA,2BAAA,WAAiBA,mBAAA,GAAUA,2BAE3BA,uBAAA,EAAAg9M,GAAA,qDAQFh9M,4GAVmBA,sBAAA,GAAAA,8BAAAi9M,GAEFj9M,wBAA6BA,uBAA7B,OAAAA,wBAAA,IAAA+K,EAAAmyM,OAA6Bl9M,CAAT,WAAAm9M,8BAUnCn9M,oCAAA,GACEA,2BAAA,eAAAA,mBAAA,MAC4BA,2BAC5BA,2BAAA,SACEA,sBAAA,oBAOFA,mHANYA,sBAAA,GAIAA,uBAJA,OAAAo9M,EAIAp9M,CAJgB,UAAA+K,EAAAa,QAIhB5L,CAFmB,4EAuBjCA,oCAAA,GACEA,2BAAA,+CAEEA,2BAAA,kDAGQA,uBAAA,mBAAAA,0BAAA+5I,GAAA,MAAAsjE,EAAAr9M,4BAAAmkG,KAAAp5F,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAAuyM,WAAAD,EAAA/rB,SAAA+rB,EAAA/rB,SAAAn3L,OAAgD,IAAG,GAHpE6F,mBAAA,MAMFA,6BACAA,2BAAA,UACGA,uBAAA,mBAAAA,0BAAA+5I,GAAA,MAAAhvI,EAAA/K,0BAAA,UAAAA,wBAAS+K,EAAAkoL,oBAAmB,GAD/BjzL,mBAAA,MAEiCA,4JAV5BA,+CAAA,qBAAAu9M,EAAAv9M,wBAAA,IAAA88M,EAAA1hB,UAAA,KAAAmiB,EAAA73J,QAAA,oDAKK1lD,sBAAA,GAAAA,uBAAA,mBAAAw9M,EAAAx9M,wBAAA,IAAA88M,EAAA1hB,UAAA,KAAAoiB,EAAA93J,QAAA,GACK1lD,sBAAA,GAAAA,sBAAAq9M,EAAA/rB,SAAA+rB,EAAA/rB,SAAAn3L,OAAA,0DAVnB6F,2BAAA,YAEEA,uBAAA,EAAAy9M,GAAA,uBAcFz9M,gHAdiBA,wBAAgCA,uBAAhC,OAAAq9M,EAAA/rB,SAAAn3L,OAAA,EAAgC6F,CAAA,WAAA09M,8BAFjD19M,uBAAA,EAAA29M,GAAA,oHACmC39M,uBAA7B,OAAAA,wBAAA,IAAA+K,EAAAmyM,OAA6Bl9M,CAAT,WAAA49M,8BAxI9B59M,oCAAA,GACEA,uBAAA,EAAA69M,GAAA,gDAkCI79M,2BAPJ,eAOIA,CAFyB,WAEzBA,CADwE,QACpEA,mBAAA,GAERA,+BAQEA,2BANF,eAMEA,CAD0B,YAqB1BA,uBAnBE,EAAA89M,GAAA,2BAAA99M,mCAmBFA,CAnBsC,GAAA+9M,GAAA,uBAyBxC/9M,6BASIA,2BAPJ,gBAOIA,CAFmB,YAEnBA,CADwE,SAEtEA,uBAAA,GAAAg+M,GAAA,gDAIAh+M,mBAAA,wCAGNA,+BAEAA,2BAAA,aACEA,uBAAA,GAAAi+M,GAAA,4CAeAj+M,2BAAA,aACEA,uBAAA,GAAAk+M,GAAA,sDAcJl+M,6BAEAA,2BAAA,gBAAAA,mBAAA,OACyBA,2BACzBA,sBAAA,iBASAA,uBAAA,GAAAm+M,GAAA,yBAAAn+M,+LA/HUA,+CAAA,OAAAA,wBAAA,KAAA+K,EAAAqpL,iBA4BFp0L,sBAAA,GAAAA,8BAAA+K,EAAA40F,SA8BS3/F,sBAAA,GAA0CA,uBAA1C,eAAA88M,EAAAthB,QAAA,MAAAshB,EAAAthB,OAAAtD,QAAA4kB,EAAAthB,OAAAtD,OAAA/9L,QAA0C6F,CAAA,WAAAo+M,GAkBjDp+M,sBAAA,GAAoDA,uBAApD,eAAAu9M,EAAAv9M,wBAAA,MAAA88M,EAAA1hB,UAAA,KAAAmiB,EAAA73J,OAAA,EAAoD1lD,CAAA,WAAAq+M,GAExDr+M,sBAAA,GAAAA,+BAAA,WAAAs+M,EAAAt+M,wBAAA,MAAA88M,EAAA1hB,UAAA,KAAAkjB,EAAA54J,MAAA,KAOC1lD,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAA+K,EAAAwzM,QAeYv+M,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAA+K,EAAAysC,WAkBVx3C,sBAAA,GAMAA,uBANA,mBAMAA,CANuB,oBAMvBA,CALwB,kBAKxBA,CAJsB,qBAItBA,CAHyB,4BAGzBA,CAFgC,4CAnI7CA,2BAAA,YAEEA,uBAAA,EAAAw+M,GAAA,uDA0JFx+M,qEA1JiBA,+CAAA,OAAAA,wBAAA,IAAA+K,EAAA0zM,+EA6Jfz+M,2BAAA,aAAAA,wBAAA,MAGEA,sBAAA,UAGFA,mDACAA,2BAAA,UACGA,uBAAA,mBAAAA,0BAAA69E,GAAA,MAAA9yE,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAAkoL,oBAAmB,GAD/BjzL,mBAAA,MAEqCA,uEANhCA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAAkgB,oCAULhxB,sBAAA,mDACGA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAA2oB,qCAQDz5B,2BAFF,WAEEA,CADkD,eAClDA,wBAAA,MAKEA,sBAAA,UACFA,wBACFA,wEAJUA,+CAAA,eAEHA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,GAAA0K,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,oCAPPxnD,uBAAA,EAAA0+M,GAAA,qFAC2B1+M,uBAArB,QAAA+K,EAAA0xH,aAAqBz8H,CAAA,WAAA2+M,8BAczB3+M,2BAFF,WAEEA,CADgD,aAChDA,wBAAA,MAEEA,sBAAA,UACFA,wBACFA,wEAFOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,GAAA0K,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,oCAJPxnD,uBAAA,EAAA4+M,GAAA,qFAC2B5+M,uBAArB,QAAA+K,EAAA0xH,aAAqBz8H,CAAA,WAAA6+M,oEAUzB7+M,2BADF,WACEA,CADwE,aACxEA,wBAAA,MAGEA,sBAAA,UAEFA,mDACAA,2BAAA,UACGA,uBAAA,mBAAAA,0BAAA+9E,GAAA,MAAAhzE,EAAA/K,4BAAA,OAAAA,wBAAS+K,EAAAkoL,oBAAmB,GAD/BjzL,mBAAA,MAGFA,yEANOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAA+qF,SACH77F,sBAAA+K,EAAA0xH,oEASJz8H,2BAAA,aAAAA,wBAAA,MAEEA,sBAAA,UAEFA,6FAFKA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAyI,GAAAsC,EAAA+F,MAAA+qF,oCAOH77F,2BADF,WACEA,CAD6E,QAC7EA,wBAAA,MACEA,sBAAA,UACiDA,mDACnDA,2BAAA,UAAAA,mBAAA,MAGFA,uEALOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAK,GAAA0K,EAAA+F,MAAA22C,KAAA18C,EAAA+F,MAAA02C,UACHxnD,sBAAA,MAAA+K,EAAAo2G,eAAA,KAAAp2G,EAAAo2G,eAAAK,sCC3MA,MAAOs9F,GAqBXjgN,YACUumC,EACAusJ,EACA50D,EACAiwB,EACA58H,EACA9c,EACAg8K,GANAvwL,KAAAqmC,iBACArmC,KAAA4yL,iBACA5yL,KAAAg+H,gBACAh+H,KAAAiuJ,gBACAjuJ,KAAAqxB,sBACArxB,KAAAuU,SACAvU,KAAAuwL,yBAjBVvwL,KAAAmhH,SAAW,IAAIr6B,eAEf9mF,KAAA6M,QAA2B,GAE3B7M,KAAA+R,MAAQC,KAGRhS,KAAAuO,QAAU,IAAIyxM,gBACNhgN,KAAAm1L,KAAO,IAAIruG,cAUhB,CAEHr4E,WACEzO,KAAKq1L,eAAiBr1L,KAAKuO,QAAQS,QACjCC,aAAU,IAAMjP,KAAK4yL,eAAelkL,WAAQ,EAC5C4kG,eAAY,IAGdtzG,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,uBACN2F,KAAM,cACNC,SAAU,EACV07E,YAAY,GAEd,CACE1wF,KAAMoP,mBACN2F,KAAM,UACNC,SAAU,EACV07E,YAAY,IAIhB9qF,KAAKm1L,KAAK3sK,IACRxoB,KAAKqmC,eAAe13B,UAAW4pG,IAC7B,MAAM3X,EAAU2X,EAAQ3X,QAAQx4F,QAAQ,gBAAiB,IAAIzL,MAAM,KACnEqD,KAAK4gG,QAAUA,EAAQ,GACvB5gG,KAAKoiH,eAAiB7J,EAAQqJ,gBAAgBv9F,OAAQ69F,GACpDA,EAAM9nH,KAAK8H,SAAS,qBACpB,EAAC,IAIPlC,KAAKmhH,SAAWnhH,KAAKuwL,uBAAuB3vE,cAAcjyG,UAAU,KAClE3O,KAAKigN,aAAW,GAGlBjgN,KAAKm+M,MAAQn+M,KAAK4yL,eAAemB,aAAa/kL,QAC5CwV,cAAY07L,IACVA,EAAInzL,iBACJ/sB,KAAK09H,aAAel0H,mCACpBxJ,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjBvhB,KAAK09H,aACLwiF,EAAI3+L,MAAM8D,QAAU66L,EAAI3+L,MAAMqd,UAAO,EAEhCxb,MAAG,SAIdpjB,KAAK0/M,YAAc1/M,KAAKg+H,cAAcpQ,mBACtC5tH,KAAKy4C,SAAWz4C,KAAKiuJ,cAAcvqI,KAAK1jB,KAAK4yL,eAAeW,wBAC5DvzL,KAAKw/M,MAAQx/M,KAAKg+H,cAAclQ,gBAClC,CAEAomE,oBACEl0L,KAAK4qB,SAAW5qB,KAAK4yL,eAAesB,mBACtC,CAEA+rB,cACEjgN,KAAKuO,QAAQkB,MACf,CAEA8uM,WAAW39G,GACT5gG,KAAK4yL,eAAe73L,MAAM6lG,GAASjyF,UAAU,CAC3C4S,MAAQA,IACNvhB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,uCACA+X,EAAK,EAGT6D,SAAUA,KACRplB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,0CAEFxJ,KAAKigN,cACLjgN,KAAKuU,OAAOC,SAAS,CAAC,qBAAoB,GAGhD,CAEAwV,cACEhqB,KAAKmhH,UAAUj3F,cACflqB,KAAKm1L,MAAMjrK,aACb,iDAnHW61L,IAAgB9+M,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,IAAA/H,8BAAAgI,IAAAhI,8BAAAiI,KAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,MAAA,4DAAhBg6L,GAAgB32M,UAAA,iBAAAoB,MAAA,GAAAC,KAAA,EAAAC,YAAA,IAAA0B,+EDpBL5C,wFAECA,wFAyBDA,4FAECA,4FASDA,2FAECA,2FAgCDA,qFAECA,qFAgDRA,yFA5GCA,4FAJNA,2EAAA,sCAA+B,0DACb,qCAQlBA,2EAAA,sCAA2C,kDAC/B,sCAwEPA,0FAKEA,2FAGAA,sFAOIA,6FAoCEA,sFAAW,oCAIlBA,uGAWdA,2EAAA,sCACwB,iEAKlBA,2GAiBOA,iGACX,sCAA2C,0CASlCA,0GACT,sCAA2C,0CAU3CA,0EAAA,sCAA8B,wCAC9B,qCAIMA,2GAORA,2EAAA,sCAA8B,iFAQ5BA,2EAAA,sCAA2C,4DACvB,qCAGdA,shFAPZvI,uBA/NA,EAAAk/M,GAAA,aA+NAl/M,CA9N4B,EAAAm/M,GAAA,yBAAAn/M,mCA8N5BA,CAjEkC,EAAAo/M,GAAA,yBAAAp/M,mCAiElCA,CApD0B,EAAAq/M,GAAA,yBAAAr/M,mCAoD1BA,CA7CuC,EAAAs/M,GAAA,yBAAAt/M,mCA6CvCA,CAhC6B,EAAAu/M,GAAA,yBAAAv/M,mCAgC7BA,CAtBiC,GAAAw/M,GAAA,yBAAAx/M,mCAsBjCA,CAR+B,GAAAy/M,GAAA,yBAAAz/M,yCAtNzBA,uBAAA,8VEYIA,2BAAA,uBAAAA,mBAAA,KAGuHA,sDAJzHA,oCAAA,GACEA,uBAAA,EAAA0/M,GAAA,wGAGiB1/M,+CAAA,QAAAM,EAAA6uB,oCAGnBnvB,2BAAA,uBAAAA,wBAAA,KAOEA,sBAHA,MAGAA,CAFsE,qBAEtEA,CADqD,sBAEvDA,8FAFiBA,sBAAA,GAAAA,uBAAA,QAAAA,4BAAA,EAAAq8I,GAAA/7I,EAAAq/M,YACA3/M,+CAAA,QAAAA,4BAAA,EAAAq8I,GAAA/7I,EAAAs/M,mCAoBb5/M,2BAAA,aAAAA,mBAAA,KAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAEwHA,qDAFxHA,uBAHA,EAAA6/M,GAAA,cAGA7/M,CADW,EAAA8/M,GAAA,kHADJ9/M,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,OAAAioJ,EAAA,aAEAr3J,+CAAA,OAAAM,EAAAkR,KAAApC,UAAA,OAAAioJ,EAAA,oCAeTr3J,2BAAA,uBAAAA,mBAAA,MAKAA,sDAZAA,2BAFF,WAEEA,CADoB,qBACpBA,wBAAA,MAIEA,sBAAA,kBACFA,mDAEAA,uBAAA,EAAA+/M,GAAA,yBAMF//M,sEANmBA,sBAAA,GAAAA,uBAAA,OAAAM,EAAAs9C,MAAAzjD,OAAA,2BAWjB6F,2BAAA,uBAAAA,wBAAA,MAGEA,sBAAA,cAMFA,2EAWEA,2BAAA,eAAAA,mBAAA,MAEuBA,iCADfA,uBAAA,uCAERA,2BAAA,eAAAA,mBAAA,MAE4CA,iCADpCA,uBAAA,uCAERA,2BAAA,eAAAA,mBAAA,MAEgCA,iCADxBA,uBAAA,0CAERA,2BAAA,eACkCA,mBAAA,GAAqBA,qDAA/CA,uBAAA,cAAAggN,EAAA,KAAAA,EAAAzwK,WAA0BvvC,sDAAA,MAAAggN,EAAA,KAAAA,EAAAzwK,4EApBpCvvC,2BAAA,mBAKYA,uBAAA,uBAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAAeM,EAAA2/M,aAAAt2M,GAAoB,GAc7C3J,uBATA,EAAAkgN,GAAA,gBASAlgN,CAPa,EAAAmgN,GAAA,gBAObngN,CAJa,EAAAogN,GAAA,gBAIbpgN,CADa,EAAAqgN,GAAA,iBAGfrgN,iIAbYA,uBADA,WAAAM,EAAAkR,KAAArB,SAAA6tC,SAAA3tC,OAAA/P,EAAAkR,KAAArB,SAAA6tC,SAAA1tC,MACAtQ,CADyE,cAAAsgN,GAG1EtgN,+CAAA,cAAAM,EAAA64H,WAGAn5H,+CAAA,cAAAM,EAAA64H,WAAA,WAAA74H,EAAA64H,UAAA,KAAA74H,EAAA64H,UAAAh/H,SAGA6F,+CAAA,cAAAM,EAAA64H,YAAA,MAAA74H,EAAA64H,UAAA,KAAA74H,EAAA64H,UAAAh/H,QAAA,GAGgB6F,+CAAA,UAAAM,EAAA64H,mCAIzBn5H,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAAugN,GAAA,mHACOvgN,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,WAAAioJ,EAAA,wCApCXr3J,2BAAA,YAkCEA,uBAhCA,EAAAwgN,GAAA,wBAgCAxgN,CA9BgC,EAAAygN,GAAA,oBA8BhCzgN,CAb6B,EAAA0gN,GAAA,yBAAA1gN,oCAkB/BA,sEAnCmBA,+CAAA,OAAAM,EAAA6uB,SAiBJnvB,+CAAA,QAAAM,EAAA6uB,iCAuBbnvB,2BAAA,uBAAAA,wBAAA,MAGEA,sBAAA,cAMFA,2EAWEA,2BAAA,eAAAA,mBAAA,MAEuBA,iCADfA,uBAAA,uCAERA,2BAAA,eAAAA,mBAAA,MAE4CA,iCADpCA,uBAAA,uCAERA,2BAAA,eAAAA,mBAAA,MAEgCA,iCADxBA,uBAAA,0CAERA,2BAAA,eACkCA,mBAAA,GAAqBA,qDAA/CA,uBAAA,cAAA2gN,EAAA,KAAAA,EAAApxK,WAA0BvvC,sDAAA,MAAA2gN,EAAA,KAAAA,EAAApxK,4EApBpCvvC,2BAAA,mBAQYA,uBAAA,uBAAA2J,GAAA3J,0BAAAiU,GAAA,MAAA3T,EAAAN,0BAAA,UAAAA,wBAAeM,EAAA2/M,aAAAt2M,GAAqB,GAAK,GAWnD3J,uBATA,EAAA4gN,GAAA,gBASA5gN,CAPa,EAAA6gN,GAAA,gBAOb7gN,CAJa,EAAA8gN,GAAA,gBAIb9gN,CADa,EAAA+gN,GAAA,iBAGf/gN,iIAdYA,uBADA,WAAAM,EAAAkR,KAAArB,SAAA46G,aAAA16G,OAAA/P,EAAAkR,KAAArB,SAAA46G,aAAAz6G,MACAtQ,CADiF,cAAAghN,GAIlFhhN,+CAAA,cAAAM,EAAA2gN,cAGAjhN,+CAAA,cAAAM,EAAA2gN,cAAA,WAAA3gN,EAAA2gN,aAAA,KAAA3gN,EAAA2gN,aAAA9mN,SAGA6F,+CAAA,cAAAM,EAAA2gN,eAAA,MAAA3gN,EAAA2gN,aAAA,KAAA3gN,EAAA2gN,aAAA9mN,QAAA,GAGgB6F,+CAAA,UAAAM,EAAA2gN,sCAIzBjhN,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAAkhN,GAAA,mHACOlhN,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,eAAAioJ,EAAA,wCApCXr3J,2BAAA,YAkCEA,uBAhCA,EAAAmhN,GAAA,wBAgCAnhN,CA9BgC,EAAAohN,GAAA,oBA8BhCphN,CAb6B,EAAAqhN,GAAA,yBAAArhN,oCAkB/BA,sEAnCmBA,+CAAA,OAAAM,EAAA6uB,SAiBJnvB,+CAAA,QAAAM,EAAA6uB,iCAwBXnvB,2BAFF,WAEEA,CADoB,mBACpBA,wBAAA,MAOEA,sBADA,cACAA,CADoC,eAEtCA,wBACFA,qDA2BIA,2BAAA,aAAAA,mBAAA,MAEkCA,qDAFlCA,uBAAA,EAAAshN,GAAA,mHACOthN,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,QAAAmyM,EAAA,8EAtBTvhN,2BAFF,WAEEA,CADqB,sBAiBNA,uBALA,oBAAA2J,GAAA3J,0BAAA+5I,GAAA,MAAAz5I,EAAAN,0BAAA,UAAAA,wBAAYM,EAAAkhN,cAAA73M,EAAsB,SAAQ,EAK1C3J,CAL2C,wBAAA2J,GAAA3J,0BAAA+5I,GAAA,MAAA1vF,EAAArqD,4BAAAmkG,KAAA,OAAAnkG,wBAAAqqD,EAAA5qD,OAAAkK,EAAA,GAX1D3J,wBAAA,MAkBEA,sBAAA,uBACFA,mDACAA,uBAAA,EAAAyhN,GAAA,yBAAAzhN,oCAKFA,wIAjBiBA,wBAKAA,uBALA,kBAKAA,CALqB,QAAAqqD,EAAA5qD,OAKrBO,CAJqB,UAAAM,EAAAkR,KAAArB,SAAAzP,MAAAgU,SAAApU,EAAAkR,KAAArB,SAAAzP,MAAA4P,MAIrBtQ,CADsE,cAAA0hN,oEAkBrF1hN,2BAFF,WAEEA,CADqB,sBAYNA,uBAAA,oBAAA2J,GAAA3J,0BAAA+6I,GAAA,MAAAz6I,EAAAN,0BAAA,UAAAA,wBAAYM,EAAAkhN,cAAA73M,EAAsB,SAAQ,GAXzD3J,wBAAA,MAaEA,sBAAA,uBACFA,wBACFA,8EANiBA,wBACAA,uBADA,kBACAA,CADqB,QAAAqqD,EAAAvlB,kCA3CtC9kC,oCAAA,GAgCAA,uBA9BA,EAAA2hN,GAAA,aA8BA3hN,CA7BuB,EAAA4hN,GAAA,6FADjB5hN,+CAAA,iBAAAM,EAAAkR,KAAArB,SAAA6yI,UAAA3jJ,QAAAiB,EAAA6uB,SA8BAnvB,+CAAA,iBAAAM,EAAAkR,KAAArB,SAAA6yI,UAAA3jJ,QAAAiB,EAAA6uB,oCA/CRnvB,oCAAA,GAeEA,uBAbA,EAAA6hN,GAAA,aAaA7hN,CAZsB,EAAA8hN,GAAA,oIAAhB9hN,+CAAA,QAAAM,EAAA6uB,SAYSnvB,+CAAA,OAAAA,wBAAA,IAAAM,EAAAyhN,mFAxKvB/hN,oCAAA,GAKIA,2BAJF,cAIEA,CADe,YACfA,mBAAA,0EAC6EA,2BAE7EA,2BAAA,YAQEA,uBAPA,EAAAgiN,GAAA,sBAOAhiN,CAP4C,GAAAiiN,GAAA,yBAgB9CjiN,2BAGIA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAKEA,sBAAA,eAQFA,mDACAA,uBAAA,GAAAkiN,GAAA,yBAAAliN,oCAQFA,2BAuGAA,uBArGA,GAAAmiN,GAAA,aAqGAniN,CApGsB,GAAAoiN,GAAA,aAoGtBpiN,CAlFuD,GAAAqiN,GAAA,aAkFvDriN,CAxCuD,GAAAsiN,GAAA,uBA2GzDtiN,2BAAA,qGAAsBA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAAqBM,EAAAqvB,SAAQ,GAKrD3vB,mNA9NMA,+CAAA,YAAAM,EAAAkR,MAGqBxR,sBAAA,GAAAA,8CAAA,KAAAM,EAAA+a,QAAArb,CAAoDA,wBAAA,KAAAM,EAAAgb,sCAG5Dtb,sBAAA,GAAAA,uBAAA,QAAAuiN,EAAAvzM,WAUEhP,+CAAA,OAAAM,EAAA6uB,SAAA7uB,EAAAkiN,eAWCxiN,sBAAA,GACAA,uBADA,WAAAM,EAAAkR,KAAArB,SAAAhX,KAAAkX,OAAA/P,EAAAkR,KAAArB,SAAAhX,KAAAmX,MACAtQ,CADiE,cAAAyiN,GASxEziN,sBAAA,GAAAA,uBAAA,WAAAM,EAAAkR,KAAArB,SAAAhX,KAAAkX,OAAA/P,EAAAkR,KAAArB,SAAAhX,KAAAmX,OAcLtQ,sBAAA,GAAAA,uBAAA,QAAAM,EAAA6uB,SAkBAnvB,+CAAA,eAAAu9M,EAAAj9M,EAAAkR,KAAAC,IAAA,qBAAA8rM,EAAAl+M,QAAAiB,EAAA6uB,SA0CAnvB,+CAAA,eAAAw9M,EAAAl9M,EAAAkR,KAAAC,IAAA,qBAAA+rM,EAAAn+M,QAAAiB,EAAA6uB,SAwCSnvB,+CAAA,OAAAuiN,EAAAvzM,WAoEKhP,wBAEAA,uBAFA,OAAAq3J,EAEAr3J,CAFgB,aAAAA,wBAAA,MAAAM,EAAA+a,QAAA,IAAArb,wBAAA,MAAAM,EAAAgb,UAEhBtb,CADmE,aAAAM,EAAA6uB,SAAA7uB,EAAAkiN,0CAjO/FxiN,2BAAA,YAGEA,uBAAA,EAAA0iN,GAAA,yBAmOF1iN,qEArOKA,uBAAA,gBAAAA,4BAAA,EAAA2vE,KAEY3vE,+CAAA,gBAAAM,EAAA8kB,UC2BX,MAAOu9L,WAAkCrmM,KAoC7Czd,YACUyU,EACAquI,EACAx0I,EACA0P,EACD9P,EACCy0I,EACA1yB,EACAryG,EACAglI,GAERr0I,QAVQrO,KAAAuU,SACAvU,KAAA4iJ,qBACA5iJ,KAAAoO,cACApO,KAAA8d,cACD9d,KAAAgO,eACChO,KAAAyiJ,cACAziJ,KAAA+vH,gBACA/vH,KAAA0d,QACA1d,KAAA0iJ,cArCV1iJ,KAAAk8I,WAAa,IAAI31G,UACjBvmC,KAAAm8I,WAAa,IAAI51G,UASjBvmC,KAAA+R,MAAQC,KAMRhS,KAAAyjN,eAAyB,EAEzBzjN,KAAA6+C,MAAgB,GAChB7+C,KAAAo6H,UAAoB,GACpBp6H,KAAAkiN,aAAuB,GAKvBliN,KAAA6jN,eAA2B,GAC3B7jN,KAAA8jN,cAA0B,GAcxB9jN,KAAKowB,QAAUpwB,KAAKuU,OAAOyK,IAAIK,WAAW,cAAcgf,KAAS9e,QACjEvf,KAAKsc,OAAStc,KAAKowB,QAAUpwB,KAAKgO,aAAauR,KAAOvf,KAAKgO,aAAakS,OACxElgB,KAAKuc,SAAW/S,uBAChBxJ,KAAKif,YACP,CAEQA,aACNjf,KAAKyS,KAAOzS,KAAK8d,YAAYqZ,MAAM,CACjC/8B,KAAM,IAAI+1H,cAAY,GAAI,CACxB98G,WAAY,CACVC,aAAWE,QAAQ,mDACnBF,aAAWC,YAGf0wI,UAAW,CAAC,IACZl+G,MAAO,CAAC,IACRpkC,MAAO,CACL,KACA,CACEmgB,MAAaG,WAAW,CACtBgiI,UAAW,QACX1F,WAAW,MAIjBA,UAAW,EAAC,GACZwlE,YAAa,EAAC,GACd9kK,SAAU,CACR,KACAn9B,MAAaG,WAAW,CACtB8hM,aAAa,KAGjB/3F,aAAc,CACZ,KACAlqG,MAAaG,WAAW,CACtB8hM,aAAa,OAInB/jN,KAAKoO,YAAYM,SAASC,UAAWD,IACnC1O,KAAK8sJ,gBAAkBp+I,EAAOuB,UAC9BjQ,KAAKyS,KAAKC,IAAI,aAAaiN,SAAS3f,KAAK8sJ,gBAAkB,QAAU,GAAE,EAE3E,CAEAr+I,WACMzO,KAAKowB,SACPpwB,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAKyrH,KAAOvjH,OAAOsX,EAAO4K,GAAE,GAG9BpqB,KAAK+vH,cAAc1E,UAAUrrH,KAAKyrH,MAAM98G,UAAWgb,IACjD3pB,KAAKgkN,kBAAoBr6L,EAAKsrF,OAAU76G,KACxC4F,KAAKyS,KAAKC,IAAI,QAAQiN,SAAS3f,KAAKgkN,mBACpC,MAAM/kK,EACJt1B,EAAKsrF,OAAUp2D,MAAMhsC,KAAMiM,GAA6B,SAAdA,EAAK3Y,OAAkB2Y,MAAQ,GACrEmlM,EACJt6L,EAAKsrF,OAAUp2D,MAAMhsC,KAAMiM,GAA6B,aAAdA,EAAK3Y,OAAsB2Y,MAAQ,GAC/E9e,KAAKyS,KAAKC,IAAI,YAAYiN,SAASs/B,GACnCj/C,KAAKyS,KAAKC,IAAI,gBAAgBiN,SAASskM,GAEvCjkN,KAAKyS,KAAKC,IAAI,YAAYuN,UAC1BjgB,KAAKyS,KAAKC,IAAI,gBAAgBuN,UAE9BjgB,KAAKyjN,iBACF95L,EAAKsrF,OAAUq9B,MAAS4xE,UAAev6L,EAAKsrF,OAAUq9B,MAAS6xE,uBAE9DnkN,KAAKyjN,gBACPzjN,KAAKyS,KAAKC,IAAI,QAAQuN,UACtBjgB,KAAK4gN,UAAY,gBAAgB5gN,KAAKgkN,oBACtChkN,KAAK6gN,SAAW,eAAe7gN,KAAKgkN,+CAAiB,MAExD,EAED5jM,YAAS,CACPgkM,UAAWpkN,KAAK+vH,cAActD,eAC9B5tE,MAAO7+C,KAAK0iJ,YAAY32G,YACvBp9B,UAAU,EAAGy1M,YAAWvlK,YAMzB,MAAMwlK,EAAgBpyM,OAAOpJ,OAAOg2C,GAAOx6B,OACxCvF,GACC9e,KAAK+vH,cAAc7D,aAAaptG,KAC/BslM,EAAUliN,SAAS4c,EAAKA,OACX,YAAdA,EAAK3Y,MAC4B,IAAjC2Y,EAAK61B,MAAMgoF,WAAW2nF,QAEtBD,EAAcjpN,OAAS,GAAG4E,KAAKyS,KAAKC,IAAI,eAAeuN,UAC3DjgB,KAAK6+C,MAAQwlK,EACbrkN,KAAKkiN,aAAeliN,KAAKo6H,UAAYp6H,KAAK6+C,QAG5C7+C,KAAKgjN,mBAAkB5iM,YAAS,CAC9B2lB,MAAO/lC,KAAKyiJ,YAAYx8G,cACxBvlC,OAAQV,KAAKyiJ,YAAY19G,cACxB/1B,QACD9R,OAAI,EAAG6oC,QAAOrlC,aAAM,CAClBqlC,MAAOA,EAAM7oC,IAAKonC,KAAkBpqC,QAASoqC,EAAK52B,YAClDhN,OAAQA,EAAOxD,IAAKyE,KAAqBzH,QAASyH,UAIxD3B,KAAKukN,YAAcvkN,KAAKoO,YAAYM,SACpC1O,KAAKwgB,cACP,CAEA0gM,aAAajgL,EAAkBujL,GAAiB,GACzCA,EAEExkN,KAAKo6H,UAAYp6H,KAAK6+C,MAAMx6B,OAAQvF,GAAeA,EAAK0xB,YAAcvP,GAD3EjhC,KAAKkiN,aAAeliN,KAAK6+C,MAAMx6B,OAAQvF,GAAeA,EAAK0xB,WAAavP,EAE5E,CAEAwhL,cAAc5vJ,EAAY0F,GACV,UAAVA,EAAmBv4D,KAAK6jN,eAAiBhxJ,EAAM31D,IAAKyE,GAAeA,EAAMzH,SACxE8F,KAAK8jN,cAAgBjxJ,EAAM31D,IAAKonC,GAAcA,EAAKpqC,QAC1D,CAEA02B,SACE,MAAM22F,EAAavnH,KAAKyS,KAAKC,IAAI,QAAQpS,MACnCkwJ,EAAW,SAEjB,GAAIxwJ,KAAKowB,QACPpwB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,GAAGyrI,KAAYnyH,KAAS9e,OAAQ,CACrDgoG,WAAYA,IAEdviG,KAAMhlB,KAAK+vH,cAAc5D,OAAOnsH,KAAKgkN,kBAAmBz8F,KAEzD54G,UAAU,CACT4S,MAAOA,KACLvhB,KAAKyS,KAAK8S,UAAU,CAAEE,gBAAgB,GAAM,EAE9CL,SAAUA,KACRplB,KAAKuU,OAAOC,SAAS,CAAC,GAAGg8I,QAAc,QAGxC,CACL,IAAI3nJ,EAAS7I,KAAKyS,KAAKw2I,cACvB,MAAMzoH,EAAsB,CAC1ByjH,UAAW,GACX1F,UAAW11I,EAAO01I,WAEpB,OAAQ11I,EAAOo7I,WACb,IAAK,QACCp7I,EAAOk9B,MAAS3qC,OAAS,IAC3BolC,EAAYyjH,UAAal+G,MAAW/lC,KAAK8jN,eAE3C,MACF,IAAK,QACHtjL,EAAYyjH,UAAatiJ,MAAW3B,KAAK6jN,eAI7C,MAAM5kK,EAAWp2C,EAAOo2C,SAClB+sE,EAAenjH,EAAOmjH,aAEtBg9B,EAAOhpJ,KACb,IAAIkpJ,EAAU,GAAGsH,KAAYnyH,KAASne,SACtClgB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAamkI,EAAS,CAC9B3hC,WAAYA,IAEdviG,KAAMhlB,KAAK+vH,cAAc9qG,OACvBjlB,KAAKyS,KAAKC,IAAI,QAAQpS,MACtBkgC,EACAye,EACA+sE,KAGHr9G,UAAU,CACT4S,QACEynI,EAAKv2I,KAAK8S,UAAU,CAAEE,gBAAgB,GACxC,EACAL,SAAUA,KACRplB,KAAKuU,OAAOC,SAAS,CAAC,GAAGg8I,QAAc,GAG/C,CACF,iDAxOWozD,IAAyB3iN,8BAAAC,UAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,GAAA9kB,8BAAAC,kBAAAD,8BAAA+kB,MAAA,4DAAzB49L,GAAyBx6M,UAAA,qBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,oJAKzBogJ,eAAY,wkBDEOlgJ,oFA5BDA,wHAAA,kCAAyB,qCA0BzBA,+EACnB,iDApB+BA,mKAOjCA,2EAAA,wMACkE,qCAClE,4CAAqC,+DACrC,8CAAoC,oGAsBvBA,mGAGAA,0LASMA,8FACjB,qIAAwG,8CAMrFA,gLAUWA,qFAC9B,+CAmBaA,wFAGAA,6GAGAA,iGAOFA,oGASmBA,yFAC9B,gDAmBaA,wFAGAA,6GAGAA,iGAOFA,oGAcTA,2EAAA,0CAA2B,wDAC3B,6CAA4B,gGAeFA,6FAW1BA,2EAAA,gDAAmB,oDAKRA,qGAceA,2FAM1BA,2EAAA,gDAAmB,2xFA1NjCvI,uBAAA,EAAAwjN,GAAA,kDAEMxjN,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA8gN,8eEgBAtjN,2BAAA,eACQA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,0BAAA,UAAAA,wBAASM,EAAAmjN,eAAc,GAD/BzjN,mBAAA,KAIkBA,4FAClBA,2BAAA,eACQA,uBAAA,mBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAASM,EAAAojN,gBAAe,GADhC1jN,mBAAA,KAImBA,4FACnBA,2BAAA,eACQA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAp1D,EAAAN,0BAAA,UAAAA,wBAASM,EAAAqjN,mBAAkB,GADnC3jN,mBAAA,KAIiBA,sDAhCvBA,2BAAA,SACEA,oCAAA,GACEA,sBAAA,mBAYEA,2BADF,UACEA,CAD4B,eAC5BA,mBAAA,KAGiBA,2BAWjBA,uBAVA,EAAA4jN,GAAA,gBAUA5jN,CANa,EAAA6jN,GAAA,gBAMb7jN,CADa,EAAA8jN,GAAA,iBAMf9jN,+DAEJA,8EAjCiBA,sBAAA,GAQAA,uBARA,cAAAM,EAAA6hH,cAAA,KAAA7hH,EAAA6hH,cAAAX,SAQAxhH,CARiC,cAAAM,EAAA6hH,cAAA,KAAA7hH,EAAA6hH,cAAA5xF,YAQjCvwB,CAPoC,SAAA+jN,EAAAvwB,YAAA,uBAOpCxzL,CAN+D,WAAA+jN,EAAAC,MAM/DhkN,CALgC,iBAAA+jN,EAAAE,kBAKhCjkN,CAJkD,yBAIlDA,CAH0B,aAAA+jN,EAAAviG,SAG1BxhH,CAFqC,aAAA+jN,EAAApmL,QAErC39B,CADoC,WAAA+jN,EAAA1wB,WAStCrzL,sBAAA,GAAAA,uBAAA,OAAA+jN,EAAAvwB,cAAAuwB,EAAA1wB,WAKArzL,+CAAA,OAAA+jN,EAAAvwB,aAAAuwB,EAAA1wB,WAKArzL,+CAAA,OAAA+jN,EAAAvwB,cCHT,MAAO0wB,GAUXrlN,YACUoO,EACA0kL,EACAvhK,EACAxJ,EACAwe,EACA9xB,EACAg8K,GANAvwL,KAAAkO,qBACAlO,KAAA4yL,iBACA5yL,KAAAqxB,sBACArxB,KAAA6nB,eACA7nB,KAAAqmC,iBACArmC,KAAAuU,SACAvU,KAAAuwL,yBAfVvwL,KAAA+R,MAAQC,KAERhS,KAAAmhH,SAAW,IAAIr6B,eAIf9mF,KAAAuO,QAAU,IAAIyxM,gBAWZhgN,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiB6lG,SAC7D,CAEAjmG,WACEzO,KAAKq1L,eAAiBr1L,KAAKuO,QAAQS,QACjCC,aAAU,IAAMjP,KAAK4yL,eAAelkL,WAAQ,EAC5C4wB,OAAK5wB,IACEA,EAAO+lL,aACVz0L,KAAKuU,OAAOC,SAAS,CAAC,YAAW,IAEpC,EACD8+F,eAAY,IAGdtzG,KAAKmhH,SAAWnhH,KAAKuwL,uBAAuB3vE,cAAcjyG,UAAU,KAClE3O,KAAKigN,aAAW,GAGlBjgN,KAAKqmC,eAAe13B,UAAW4pG,IAC7Bv4G,KAAKojH,cAAgB7K,EAAQqJ,gBAAgBv9F,OAAQ69F,GACnDA,EAAM9nH,KAAK8H,SAAS,qBACpB,EAAC,EAEP,CAEAwiN,eACE1kN,KAAK4yL,eAAerc,QAAQ5nK,UAAU,CACpC4S,MAAQA,IACNvhB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,uCACA+X,EAAK,EAGT6D,SAAUA,KACRplB,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,kCACxDxJ,KAAKigN,aAAW,GAGtB,CAEAA,cACEjgN,KAAKuO,QAAQkB,MACf,CAEAk1M,cAAcjwM,GAAQ,GACpB1U,KAAK4yL,eAAekB,SAASnlL,UAAU,CACrC4S,MAAQA,IACNvhB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,wCACA+X,EAAK,EAGT6D,SAAUA,KACRplB,KAAKigN,cACLjgN,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,+BACpDkL,GACF1U,KAAK4qB,SAASqO,OAAK,GAI3B,CAEA2rL,mBAEE5kN,KAAK0kN,eACL1kN,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB,UACjBioC,kBAAmB,OACnB92C,aAAcA,IAAMrc,KAAKolN,cACzBpxJ,wBAAyBA,IAAMh0D,KAAK2kN,eAAc,IAEtD,CAEAS,cACEplN,KAAK4qB,SAASqO,QACdj5B,KAAK4yL,eAAetrJ,OAAO34B,UAAU,CACnC4S,MAAQA,IACNvhB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,sCACA+X,EAAK,EAGT6D,SAAUA,KACRplB,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAASzoB,mCACxDxJ,KAAKuU,OAAOC,SAAS,CAAC,YAAW,GAGvC,CAEAwV,cACEhqB,KAAKmhH,UAAUj3F,aACjB,iDAjHWi7L,IAAwBlkN,8BAAAC,KAAAD,8BAAA8H,IAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,UAAAlI,8BAAA8kB,MAAA,4DAAxBo/L,GAAwB/7M,UAAA,0BAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,mBDaxB5C,yFArBMA,iFAKAA,kFAKAA,mFAKAA,g5BAhCnBvI,uBAAA,EAAAokN,GAAA,4CAqCApkN,2BAAA,cAAAA,mBAAA,KACyBA,2BACvBA,sBAAA,sBAvCIA,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA4xL,iBAuCKp0L,sBAAA,GAMAA,uBANA,mBAMAA,CANuB,oBAMvBA,CALwB,kBAKxBA,CAJsB,qBAItBA,CAHyB,4BAGzBA,CAFgC,4GElCnCA,2BAAA,uBAAAA,mBAAA,KAIAA,qEADqBA,8CAAAM,EAAA+jN,yEAErBrkN,2BAAA,uBAAAA,mBAAA,KAIAA,qEADqBA,8CAAAM,EAAA+jN,sEAsBjBrkN,2BAAA,aAAAA,mBAAA,KAGAA,mDACAA,2BAAA,aAAAA,mBAAA,KAGAA,mDACAA,2BAAA,aAAAA,mBAAA,KAGAA,mDAeAA,2BAAA,aAAAA,mBAAA,MAGAA,mDACAA,2BAAA,aAAAA,mBAAA,MAGAA,mDAeAA,2BAAA,aAAAA,mBAAA,MAGAA,mDACAA,2BAAA,aAAAA,mBAAA,MAGAA,sDAjBFA,2BAFF,WAEEA,CAD6B,cAC7BA,mBAAA,MAGAA,2BACAA,2BAAA,YACEA,sBAAA,cASAA,uBAJA,EAAAskN,GAAA,cAIAtkN,CAFW,EAAAukN,GAAA,eAOfvkN,oGARWA,sBAAA,GAAAA,uBAAA,OAAAM,EAAAkkN,kBAAAp1M,UAAA,WAAAm1L,EAAA,aAIAvkM,+CAAA,OAAAM,EAAAkkN,kBAAAp1M,UAAA,WAAAm1L,EAAA,6CA0BLvkM,2BAAA,aAAAA,mBAAA,MAGAA,sDAtBJA,2BAFF,WAEEA,CAD6B,cAC7BA,mBAAA,MAGAA,2BAEEA,2BADF,WACEA,CAD6B,YAE3BA,sBAAA,cAKAA,2BAAA,aAKEA,sBAJA,cAIAA,CADS,mCAGXA,2BACAA,uBAAA,EAAAykN,GAAA,eAMNzkN,sGALaA,sBAAA,GAAAA,uBAAA,OAAAM,EAAAkkN,kBAAAp1M,UAAA,WAAAm1L,EAAA,4CAQXvkM,2BAFF,WAEEA,CAD6B,cAC7BA,mBAAA,MAE4BA,2BAMxBA,2BALJ,WAKIA,CAL2B,cAK3BA,CADiB,eACCA,mBAAA,WAAKA,2BACvBA,2BAAA,eAAkBA,mBAAA,YAAMA,2BACxBA,2BAAA,eAC0BA,mBAAA,cAAOA,2BACjCA,2BAAA,gBAAmBA,mBAAA,cAGzBA,wCAJcA,sBAAA,GAAAA,uBAAA,uCAsEVA,2BAAA,aAAAA,mBAAA,MAEkCA,mDAClCA,2BAAA,aAAAA,mBAAA,MAEmCA,4FAhBnCA,2BAJJ,WAIIA,CAHwB,aAGxBA,CADoB,UACpBA,mBAAA,MAAsBA,2BACtBA,2BAAA,eAAAA,mBAAA,MACFA,6BAEEA,2BADF,WACEA,CAD6B,iBAK7BA,mBAAA,kBAAAA,2BACAA,2BAAA,cACOA,uBAAA,kBAAA2J,GAAA3J,0BAAA01D,GAAA,MAAAp1D,EAAAN,4BAAA,OAAAA,wBAAUM,EAAA0/I,WAAAr2I,EAAAvD,OAAA4uE,MAAgC,YAAW,GAD5Dh1E,2BAKAA,uBAHA,GAAA0kN,GAAA,cAGA1kN,CADW,GAAA2kN,GAAA,eAKf3kN,sGANWA,sBAAA,IAAAA,uBAAA,OAAAM,EAAAkkN,kBAAAp1M,UAAA,WAAAm1L,EAAA,aAGAvkM,+CAAA,OAAAM,EAAAkkN,kBAAAp1M,UAAA,WAAAm1L,EAAA,aClMb,MAAOqgB,GAoBX/lN,YACSstH,EACAp/G,EACAqjB,EACCylL,GAHD92M,KAAAotH,cACAptH,KAAAgO,eACAhO,KAAAqxB,sBACCrxB,KAAA82M,sBAtBV92M,KAAAqc,aAAe,IAAIvS,eACV9J,KAAA65C,UAAY,wEACZ75C,KAAA6gG,QAAU,yFACV7gG,KAAA8gG,QAAU,wCACnB9gG,KAAA8lN,iBAAmB,oBAGnB9lN,KAAAslN,kBAAoB,GACZtlN,KAAAm1L,KAAO,IAAIruG,eAgBjB9mF,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnoM,UAAWgb,IAClC3pB,KAAK+lN,OAASp8L,EAAK6f,OAAA,IAGvBxpC,KAAKif,YACP,CACAxQ,WACsB,SAAhBzO,KAAKsc,SACPtc,KAAKylN,kBAAkB/yM,IAAI,oBAAoBiN,SAAS3f,KAAK6iB,QAAQ7D,KACrEhf,KAAKylN,kBAAkB/yM,IAAI,gBAAgBiN,SAAS3f,KAAK6iB,QAAQymB,eACjEtpC,KAAKylN,kBAAkB/yM,IAAI,OAAOiN,SAAS3f,KAAK6iB,QAAQ+mB,YACxD5pC,KAAKylN,kBAAkB/yM,IAAI,YAAYiN,SAAS3f,KAAK6iB,QAAQwmB,kBAE3C,cAAhBrpC,KAAKsc,SACPtc,KAAKylN,kBAAkB/yM,IAAI,oBAAoBiN,SAAS3f,KAAK6iB,QAAQ7D,KACrEhf,KAAKylN,kBAAkB/yM,IAAI,oBAAoBuN,UAC/CjgB,KAAKylN,kBAAkB/yM,IAAI,gBAAgBiN,SAAS3f,KAAK6iB,QAAQymB,eACjEtpC,KAAKylN,kBAAkB/yM,IAAI,gBAAgBuN,UAC3CjgB,KAAKylN,kBAAkB/yM,IAAI,YAAYiN,SAAS3f,KAAK6iB,QAAQgQ,MAC7D7yB,KAAKylN,kBAAkB/yM,IAAI,YAAYuN,UACvCjgB,KAAKylN,kBAAkB/yM,IAAI,OAAOiN,SAAS3f,KAAK6iB,QAAQ+mB,YACxD5pC,KAAKylN,kBAAkB/yM,IAAI,YAAYiN,SAAS3f,KAAK6iB,QAAQwmB,mBAE9DrpC,KAAKgmN,kBAAmBhmN,KAAKimN,YAAajmN,KAAKkmN,cAAgB,CAC9D,gBACA,MACA,QACAhpN,IAAKiS,GAASnP,KAAKmmN,cAAcjpN,IAAK2lB,GAAYA,EAAQ1T,IAC9D,CAEA8P,aACEjf,KAAKylN,kBAAoB,IAAItyM,KAAY,CACvC0iB,SAAU,IAAIs6F,cAAY,GAAI,CAC5BruG,MAAaC,OAAO,mBAAqB8T,IACvC,IAAIuwL,EAAmB,GACvB,OACEpmN,KAAKylN,mBACLzlN,KAAKylN,kBAAkB90M,SAAS,qBAChC3Q,KAAKylN,kBAAkB90M,SAAS,oBAAoBmhG,SAAS,KAE7Ds0G,EAAmBpmN,KAAKylN,kBAAkB90M,SAAS,oBAAoBzV,MAAM,GAAG,GACvE8E,KAAKylN,oBACdW,EAAmBpmN,KAAKylN,kBAAkB90M,SAAS,qBAGnD3Q,KAAKylN,mBACLzlN,KAAKimN,aAAa/jN,SAASkkN,IAC3BpmN,KAAKkmN,cAAchkN,SAAS2zB,EAAQ,KAI1CE,SAAU,IAAIo6F,cACZ,KACAruG,MAAaC,OAAO,kBAAoBzhB,GACf,SAAhBN,KAAKsc,SAAsBhc,IAGtC8lN,iBAAkB,IAAIj2F,cAAY,KAAM,CACtC98G,WAAY,CACVyO,MAAaC,OAAO,WAAazhB,IAC3B6R,YAAU7R,MAITN,KAAK65C,UAAU37C,KAAKoC,KACpBN,KAAK6gG,QAAQ3iG,KAAKoC,KAClBN,KAAK8gG,QAAQ5iG,KAAKoC,KAIzBwhB,MAAaC,OAAO,cAAgBqkM,GACX,YAAhBpmN,KAAKsc,QAAwB8pM,GAAkBlkN,SAASlC,KAAK+lN,SAEtEzyM,aAAWC,YAGf41B,aAAc,IAAIgnF,cAAY,KAAM,CAClC98G,WAAY,CACVC,aAAWC,SACXuO,MAAaC,OAAO,aAAeonB,IAEd,YAAhBnpC,KAAKsc,QAAwC,SAAhBtc,KAAKsc,SACnCtc,KAAKgmN,oBAC4C,IAAjDhmN,KAAKgmN,kBAAkBjqN,QAAQotC,IAC/BnpC,KAAK6iB,SAASymB,eACdtpC,KAAK6iB,QAAQymB,gBAAkBH,MAKvCM,IAAK,IAAI0mF,eAAY,GACrBxmF,IAAK,IAAIwmF,cAAY,IACrBu1B,SAAU,IAAIv1B,cAAY,GAAI,CAC5B98G,WAAY,CACVyO,MAAaG,WAAW,CACtBwnB,KAAK,QAKf,CAEAzf,cACEhqB,KAAKm1L,KAAKjrK,aACZ,CAEAm8L,YAAY9kM,GACNA,EAAMA,MAAM28E,KACdl+F,KAAKsmN,oBAAqB,EAC1BtmN,KAAKslN,kBAAoB/jM,EAAMA,MAAM8D,OAKvCrlB,KAAKylN,kBAAkBlgM,UAAU,CAAEE,gBAAgB,IACnDzlB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,4CAEJ,CAEA+8M,cAAc3nL,GACZ5+B,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAAS2M,GACxD5+B,KAAKqc,aAAanS,OAClBlK,KAAKotH,YAAYn0F,OACnB,CAEAutL,eAAelmN,GACb,OAAe,GAARA,CACT,CAEAyzB,WACE,MAAM/U,EAAMhf,KAAKylN,kBAAkB90M,SAAS,oBACtC81M,EAAaznM,EAAI8yF,SAAS,KAAO9yF,EAAI9jB,MAAM,GAAG,GAAM8jB,EACpDmqB,EAAenpC,KAAKylN,kBAAkB90M,SAAS,gBAC/CklB,EAAW71B,KAAKylN,kBAAkB90M,SAAS,YAC3ColB,EAAW/1B,KAAKylN,kBAAkB90M,SAAS,YAC3C84B,EAAMzpC,KAAKylN,kBAAkB90M,SAAS,OACtCg5B,EAAM3pC,KAAKwmN,eAAexmN,KAAKylN,kBAAkB90M,SAAS,QAC1D04B,EAAkBrpC,KAAKylN,kBAAkB90M,SAAS,aAAa6e,OAE/Dk3L,EAAqB,CACzBnlM,MAAQA,GAAevhB,KAAKqmN,YAAY9kM,GACxC9R,KAAO4oB,KACY,IAAbA,GACFr4B,KAAKumN,cAAc/8M,0CAAyC,GAKlE,OAAQxJ,KAAKsc,QACX,IAAK,OACHtc,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBACF5tK,YACClpC,KAAK6iB,QAAQzoB,KACb4kB,EACAmqB,EACAnpC,KAAK6iB,QAAQgQ,KACb4W,EACAJ,GAED16B,UAAU,IACN+3M,EACHthM,SAAUA,IAAMplB,KAAKumN,cAAc/8M,4CAGzC,MACF,IAAK,YACHxJ,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBACFjtK,iBAAiB48K,EAAY5wL,EAAUE,EAAU0T,EAAKJ,EAAiBM,GACvEh7B,UAAU+3M,IAEf,MACF,IAAK,UACH1mN,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBACFvtK,WACCk9K,EACAt9K,EACAtT,EACAE,EACA2J,OAAOC,SAASm7J,OAChBrxJ,EACAJ,EACAM,GAEDh7B,UAAU+3M,IAMrB,CAEAzlE,WAAWhrE,EAAiBgqB,GAC1B,MAAMgG,EAAahwB,EAAM,GACnB4yE,EAAS,IAAI1iD,WACnB0iD,EAAOC,iBAAiB,OAASj2F,IAC/B,MAAMj/C,EAA2B5T,KAAKylN,kBAAkB/yM,IAAIutF,GAC5DrsF,EAAQ+L,SAASkzC,EAAMxrD,OAAOxL,QAC9B+X,EAAQqQ,cACRrQ,EAAQsjF,gBACRtjF,EAAQiO,wBAAsB,GAEhCgnI,EAAOxiD,WAAWJ,EAAM,OAC1B,iDA1OW4/G,IAAyB5kN,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAA,4DAAzB48M,GAAyBz8M,UAAA,4BAAAmB,QAAA,CAAA8R,aAAA,gBAAA7R,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,6DDhBF5C,qFAAA,4CAoBdA,2FACV,yCACE,oCACE,yGAAuE,qCAAG,kCAAuB,sCAC/F,0DAC2C,2DAC7C,sCACF,qCACF,4CA0BUA,wFAmIIA,gFA/KGA,2EAAA,oCAKAA,2EAAA,oCAwBNA,qGAIAA,sGAIAA,kHAkBAA,qGAIAA,uHAQDA,uFAUCA,sGAIAA,kIAQDA,uFAmBGA,sGASHA,8FAoECA,yFACKA,gHAYLA,qGAGAA,+nEArNvBvI,2BAAA,iBACEA,oCAAA,MAAAA,mBAAA,2EAGAA,oCAAA,MAIIA,2BAHF,cAGEA,CADoC,YAOlCA,uBALA,EAAA0lN,GAAA,wBAKA1lN,CAFqB,EAAA2lN,GAAA,yBAQnB3lN,2BADF,YACEA,CAD0B,eAC1BA,wBAAA,MAKMA,2BAFJ,eAEIA,CAFO,UAEPA,CADI,QAEFA,sBADqE,OACrEA,CADmG,oCAKzGA,+BACFA,mDACAA,2BAAA,aACEA,sBAAA,eAcAA,uBARA,GAAA4lN,GAAA,cAQA5lN,CANW,GAAA6lN,GAAA,cAMX7lN,CAFW,GAAA8lN,GAAA,eAOf9lN,6BAEEA,2BADF,YACEA,CAD0B,eAC1BA,mBAAA,MAGAA,2BACAA,2BAAA,aACEA,sBAAA,eAUAA,uBAJA,GAAA+lN,GAAA,cAIA/lN,CAFW,GAAAgmN,GAAA,eAOfhmN,6BAmDAA,uBAlDA,GAAAimN,GAAA,aAkDAjmN,CAjD+B,GAAAkmN,GAAA,cAiD/BlmN,CA3B+B,GAAAmmN,GAAA,eAkF3BnmN,2BAFJ,YAEIA,CAFwB,YAExBA,CAD8B,aAE5BA,sBAAA,eAIAA,2BAAA,eAAAA,mBAAA,MAKNA,iCAGAA,uBAAA,GAAAomN,GAAA,eAuBFpmN,2BAEEA,2BADF,YACEA,CADwB,iEACFA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAswB,WAAU,GAKzD9yB,mEAEJA,sEAjOUA,uBAAA,WAAAwC,EAAA2pH,aAE0BnsH,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,oCAK1Brb,sBAAA,GAAAA,uBAAA,YAAAwC,EAAAgiN,mBAEexkN,sBAAA,GAAAA,uBAAA,YAAA24B,IAAAn2B,EAAA6iN,qBAAA7iN,EAAA6iN,oBAAA,uBAAA7iN,EAAA6hN,mBAKArkN,+CAAA,YAAA24B,IAAAn2B,EAAA6iN,oBAAA7iN,EAAA6iN,oBAYqBrlN,sBAAA,GACAA,uBADA,SAAAwC,EAAAqiN,iBACA7kN,CAD2B,WADiBA,sBAAAwC,EAAAqiN,8CAevE7kN,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgiN,kBAAAp1M,UAAA,mBAAAm1L,EAAA,aAIAvkM,+CAAA,OAAAwC,EAAAgiN,kBAAAp1M,UAAA,mBAAAm1L,EAAA,aAIAvkM,+CAAA,OAAAwC,EAAAgiN,kBAAAp1M,UAAA,mBAAAm1L,EAAA,gBAkBAvkM,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgiN,kBAAAp1M,UAAA,eAAAm1L,EAAA,aAIAvkM,+CAAA,OAAAwC,EAAAgiN,kBAAAp1M,UAAA,eAAAm1L,EAAA,eAMLvkM,+CAAA,gBAAAwC,EAAA6Y,QAsBArb,+CAAA,gBAAAwC,EAAA6Y,QA4BArb,+CAAA,gBAAAwC,EAAA6Y,QAmEArb,sBAAA,GAAAA,uBAAA,OAAAwC,EAAAgiN,kBAAAr0M,SAAAq4B,IAAAnpC,OA0BgBW,sBAAA,GACAA,uBADA,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,WACArb,CADqD,OAAAwC,EAAAgiN,gYExN/ExkN,2BAHJ,UAGIA,CAFoB,UAEpBA,CAD4B,YAC5BA,mBAAA,KAGJA,yEAFoCA,sBAAA,GAAAA,sBAAA+K,EAAAsyL,wCCG9B,MAAOgpB,GALbxnN,cAOEE,KAAAs+L,WAAa,mDAFFgpB,GAAkB,4DAAlBA,GAAkBl+M,UAAA,oBAAA+C,OAAA,CAAAmyL,WAAA,cAAAxwI,mBAAApkD,GAAAc,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WDHK5C,2EAAA,yLAJpCvI,uBAAA,EAAAsmN,GAAA,aAQAtmN,2BAAA,WACEA,yBAAA,GACFA,iCATMA,uBAAA,OAAAwC,EAAA66L,wRESEr9L,2BAFF,WAEEA,CAD+D,WAC3CA,mBAAA,qBAAeA,2BACnCA,2BAAA,WAAiBA,mBAAA,qIAEnBA,wDAGEA,2BAFF,WAEEA,CAD6D,WAC5CA,mBAAA,mDACfA,2BAAA,UAEGA,mBAAA,GACDA,sBAAA,UAGNA,8EALOA,sBAAA,GAAAA,uBAAA,OAAAumN,EAAAtvB,oBAAA,GAAAl5K,IAAA/d,2BACAA,uDAAA,IAAAumN,EAAAtvB,oBAAA,GAAA7kB,KAAA,sEAQHpyK,2BAHJ,WAGIA,CAF6D,WAE7DA,CADuB,eAEfA,uBAAA,mBAAAA,0BAAA4P,GAAA,MAAA2f,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAi3L,6BAA4B,GAC3CxmN,sBAAA,UAEKA,mBAAA,uBAGXA,4EAJSA,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAze,MAAAyW,gCA7BbvnB,oCAAA,KAGIA,2BADF,WACEA,CAD+D,YAE7DA,sBAAA,UAmBFA,uBAhBA,EAAAymN,GAAA,aAgBAzmN,CAfiE,EAAA0mN,GAAA,aAejE1mN,CAT+D,EAAA2mN,GAAA,cAqBjE3mN,qHA9BOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAQ,GAAA+uB,EAAAze,MAAA8nD,MAAArpC,EAAAze,MAAAosF,SAGCl9F,+CAAA,WAAAumN,EAAAtvB,oBAAA98L,QAMA6F,+CAAA,OAAAumN,EAAAtvB,oBAAA98L,OAAA,GAUA6F,+CAAA,WAAAumN,EAAAtvB,oBAAA98L,mCAxBV6F,uBAAA,EAAA4mN,GAAA,8FACe5mN,uBAAA,OAAAA,wBAAA,IAAAuvB,EAAA6qK,8CAyCXp6L,2BAFJ,WAEIA,CAFc,YAEdA,CADwB,UAEtBA,mBAAA,GAGNA,yEALQA,0DAAA,QAAAuvB,EAAA3N,SAEF5hB,sBAAA,GAAAA,+BAAA,IAAAuvB,EAAA3N,QAAA,gCASF5hB,2BAFJ,UAEIA,CAFwB,WAExBA,CAD+D,YAE7DA,sBAAA,UAGAA,2BAAA,UAAAA,mBAAA,KAINA,2EANSA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAktD,GAAA39B,EAAAze,MAAAutF,QAAA9uE,EAAAze,MAAA02C,QAAAj4B,EAAAze,MAAA22C,iEAwBDznD,2BADF,QACEA,CADsD,OAIgEA,sBAFpH,WAEoHA,CAFtF,OAEsFA,CAFnD,WAEmDA,CADxF,OACwFA,CADtD,WACsDA,CAA7F,QAE3BA,+EAJmCA,sBAAA,GAEPA,sBAFO6mN,EAAAx+K,cAEProC,CAFqC6mN,EAAAC,aAErC9mN,CADkC6mN,EAAAE,kBAAAF,EAAAE,kBAAA,4HAbhE/mN,2BAAA,uBAKgBA,uBAAA,uBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAAauvB,EAAAqqL,cAAa,GAL1C55M,wBAAA,KASEA,2BADF,QACEA,CADG,OACAA,sBAAA,YAAwEA,2BAC3EA,uBAAA,EAAAgnN,GAAA,cAOFhnN,2BACAA,gGAZgBA,uBAJA,eAIAA,CAJmB,kBAQRA,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA03L,6FAS3BjnN,2BAAA,uBAKgBA,uBAAA,uBAAAA,0BAAA6T,GAAA,MAAA0b,EAAAvvB,0BAAA,UAAAA,wBAAauvB,EAAAqqL,cAAa,GAL1C55M,wBAAA,KAQEA,sBAAA,OACFA,wDAHgBA,uBAJA,eAIAA,CAJmB,4CAkBzBA,2BAAA,QAA0KA,mBAAA,GAAwCA,sEAAxCA,sDAAAuvB,EAAAse,eAAAqrD,cAAA,kCAC1Kl5F,2BAAA,WAEEA,sBAAA,UACAA,mBAAA,GACFA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAA+qF,QACH77F,uDAAA,IAAAuvB,EAAAse,eAAAwrD,mBAAA,sCAEFr5F,2BAAA,WAEEA,sBAAA,UACEA,mBAAA,GACJA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAA2oB,SACDz5B,uDAAA,IAAAuvB,EAAAse,eAAAurD,qBAAA,sCAEJp5F,2BAAA,WAEEA,sBAAA,UACAA,mBAAA,GACFA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAA+qF,QACH77F,uDAAA,IAAAuvB,EAAAse,eAAAwrD,mBAAA,sCAEFr5F,2BAAA,WAEEA,sBAAA,UACEA,mBAAA,GACJA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAAkgB,SACDhxB,uDAAA,IAAAuvB,EAAAse,eAAAsrD,gBAAA,sCApBNn5F,2BANF,eAMEA,CAD+E,aAkB7EA,uBAhBA,EAAAknN,GAAA,WAgBAlnN,CAhB0K,EAAAmnN,GAAA,YAgB1KnnN,CAd4D,EAAAonN,GAAA,YAc5DpnN,CAT8D,EAAAqnN,GAAA,YAS9DrnN,CAJ4D,EAAAsnN,GAAA,aAUhEtnN,wEAzBSA,uBAAA,iBAGAA,sBAAA,GAAAA,uBAAA,aAAAuvB,EAAAse,eAAAwrD,mBAAA,aAAA9pE,EAAAse,eAAAsrD,gBAAA,aAAA5pE,EAAAse,eAAAurD,qBAAA,OAEAp5F,+CAAA,aAAAuvB,EAAAse,eAAAwrD,mBAAA,OAKAr5F,+CAAA,aAAAuvB,EAAAse,eAAAurD,qBAAA,OAKAp5F,+CAAA,aAAAuvB,EAAAse,eAAAwrD,mBAAA,OAKAr5F,+CAAA,aAAAuvB,EAAAse,eAAAsrD,gBAAA,kCAaLn5F,2BAAA,QACIA,mBAAA,GACJA,sEADIA,uDAAA,IAAAuvB,EAAAse,eAAAorD,aAAA,sCAEJj5F,2BAAA,WAEEA,sBAAA,UACAA,mBAAA,GACFA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAA+qF,QACH77F,uDAAA,IAAAuvB,EAAAse,eAAAisD,sBAAA,sCAEF95F,2BAAA,WAEEA,sBAAA,UACEA,mBAAA,GACJA,sEAFKA,+CAAA,UAAAuvB,EAAAze,MAAA2oB,SACDz5B,uDAAA,IAAAuvB,EAAAse,eAAAksD,qBAAA,sCAZN/5F,2BANF,eAMEA,CADmF,aAUjFA,uBARA,EAAAunN,GAAA,WAQAvnN,CAR0H,EAAAwnN,GAAA,YAQ1HxnN,CAJkE,EAAAynN,GAAA,aAUtEznN,wEAjBSA,uBAAA,iBAGAA,sBAAA,GAAAA,uBAAA,aAAAuvB,EAAAse,eAAAisD,sBAAA,aAAAvqE,EAAAse,eAAAksD,qBAAA,OAIA/5F,+CAAA,aAAAuvB,EAAAse,eAAAisD,sBAAA,OAKA95F,+CAAA,aAAAuvB,EAAAse,eAAAksD,qBAAA,iCAcH/5F,sBAAA,oDAAGA,uBAAA,UAAAuvB,EAAAze,MAAA+qF,mCAYL77F,2BANJ,eAMIA,CAF+E,YAE/EA,CADwB,QACpBA,mBAAA,GAERA,0EAFQA,sBAAA,GAAAA,8BAAAuvB,EAAAse,eAAAqsD,YAAA,kCAMRl6F,2BAAA,gBAKEA,oCAAA,MACEA,sBAAA,6DAKJA,sEALsBA,sBAAA,GAAAA,uBAAA,OAAAA,4BAAA,EAAAq8I,GAAA9sH,EAAAse,eAAAyrD,wBAAA,MAAA/pE,EAAAse,eAAA0rD,oBAAA,kCAkBpBv5F,sBAAA,0EAK0BA,uBAJA,cAAAuvB,EAAAm4L,eAIA1nN,CAJ8B,YAAAuvB,EAAAo4L,eAI9B3nN,CAD4B,8CAItDA,sBAAA,0EAMyBA,uBALA,cAAAuvB,EAAAq4L,WAKA5nN,CAL0B,YAAAuvB,EAAAs4L,WAK1B7nN,CADwB,8CAIjDA,sBAAA,0EAMyBA,uBALA,cAAAuvB,EAAAu4L,iBAKA9nN,CALgC,YAAAuvB,EAAAw4L,iBAKhC/nN,CAD8B,qFAxBvDA,2BANJ,eAMIA,CAFsB,WAEtBA,CAD0B,mCACEA,uBAAA,wBAAA2J,GAAA3J,0BAAAiU,GAAA,MAAAsb,EAAAvvB,0BAAA,UAAAA,wBAAgBuvB,EAAAsc,kBAAAliC,EAA0B,sBAAqB,GAC3F3J,2BAkBAA,uBAjBA,EAAAgoN,GAAA,iCAiBAhoN,CAXmE,EAAAioN,GAAA,iCAWnEjoN,CAF0D,EAAAkoN,GAAA,kCAY9DloN,0EAjCSA,uBAFA,mBAAAuvB,EAAA44L,4BAAA,uBAEAnoN,CAF2E,iBAcrDA,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAm4L,gBAAAn4L,EAAAo4L,gBASD3nN,+CAAA,OAAAuvB,EAAAq4L,YAAAr4L,EAAAs4L,YASA7nN,+CAAA,OAAAuvB,EAAAu4L,kBAAAv4L,EAAAu4L,4CAS9B9nN,sBAAA,2DAEUA,uBAFA,OAAAuvB,EAAA5N,SAEA3hB,CAFiB,UAAAuvB,EAAA3jB,QAEjB5L,CADmB,qCAiBvBA,sBAAA,0EAM0BA,uBALA,cAAAuvB,EAAA64L,mBAKApoN,CALkC,YAAAuvB,EAAA84L,mBAKlCroN,CAFgC,8CAI1DA,sBAAA,0EAOyBA,uBANA,cAAAuvB,EAAA+4L,eAMAtoN,CAN8B,YAAAuvB,EAAAg5L,eAM9BvoN,CAF4B,8CAIrDA,sBAAA,0EAOyBA,uBANA,cAAAuvB,EAAAi5L,qBAMAxoN,CANoC,YAAAuvB,EAAAk5L,qBAMpCzoN,CAFkC,qFAxB3DA,2BALJ,eAKIA,CAFsB,WAEtBA,CAD0B,mCACEA,uBAAA,wBAAA2J,GAAA3J,0BAAA07E,GAAA,MAAAnsD,EAAAvvB,0BAAA,UAAAA,wBAAgBuvB,EAAAsc,kBAAAliC,EAA0B,mBAAkB,GACxF3J,2BAkBAA,uBAjBA,EAAA0oN,GAAA,iCAiBA1oN,CAXiD,EAAA2oN,GAAA,iCAWjD3oN,CAFgD,EAAA4oN,GAAA,kCAYpD5oN,0EAlCSA,uBAAA,mBAAAuvB,EAAA44L,4BAAA,sBAYsBnoN,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA64L,oBAAA74L,EAAA84L,oBASDroN,+CAAA,OAAAuvB,EAAA+4L,gBAAA/4L,EAAAg5L,gBASAvoN,+CAAA,OAAAuvB,EAAAi5L,sBAAAj5L,EAAAk5L,iDAjNtCzoN,oCAAA,GAoBEA,uBAnBA,EAAA6oN,GAAA,wBAmBA7oN,CAZqB,EAAA8oN,GAAA,yBAwBjB9oN,2BAFJ,kBAEIA,CAFW,WAEXA,CADoB,YAgClBA,uBA9BA,EAAA+oN,GAAA,iBA8BA/oN,CAzBiF,EAAAgpN,GAAA,kBA+CnFhpN,2BAOMA,2BANN,WAMMA,CANgB,eAMhBA,CAFoC,aAEpCA,CADwB,YAEtBA,uBAAA,GAAAipN,GAAA,YAEAjpN,mBAAA,IAGNA,+BACAA,uBAAA,GAAAkpN,GAAA,kBASFlpN,2BAEAA,2BAAA,aACEA,uBAAA,GAAAmpN,GAAA,kBAaJnpN,6BAEAA,2BAAA,aACEA,uBAAA,GAAAopN,GAAA,kBAqCJppN,6BAGEA,2BADF,mBACEA,CADa,aAEXA,uBAAA,GAAAqpN,GAAA,mBAMJrpN,6BAIIA,2BAFJ,mBAEIA,CAFW,YAEXA,CAD4C,aAE1CA,uBAAA,GAAAspN,GAAA,kBAqCNtpN,8GAnNiBA,+CAAA,OAAAuvB,EAAA03L,2BAAA9sN,OAAA,GAmBA6F,+CAAA,OAAAuvB,EAAA0X,qBAcDjnC,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAse,eAAAqrD,eAAA3pE,EAAAse,eAAAqrD,cAAA,IA8BAl5F,+CAAA,OAAAuvB,EAAAse,eAAAorD,cAAA1pE,EAAAse,eAAAorD,aAAA,IAwBFj5F,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,GAAA2vE,GAAApgD,EAAAg6L,sBAAA,IAEEvpN,+CAAA,OAAAuvB,EAAAg6L,sBAAA,GACJvpN,uDAAA,IAAAuvB,EAAAg6L,sBAAA,KAQIvpN,+CAAA,OAAAuvB,EAAAse,eAAAqsD,aAAA3qE,EAAAse,eAAAqsD,YAAA,IAYAl6F,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAse,eAAAyrD,yBAAA/pE,EAAAse,eAAAyrD,wBAAA,IAAA/pE,EAAAse,eAAA0rD,qBAAAhqE,EAAAse,eAAA0rD,oBAAA,IAgBFv5F,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA5N,UAwCC3hB,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA5N,UAWC3hB,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAA5N,qCAxLpB3hB,2BAAA,YAEEA,uBAAA,EAAAwpN,GAAA,yBA0NFxpN,mGA1NiBA,wBAAgBA,uBAAhB,QAAAuvB,EAAAnK,QAAgBplB,CAAA,WAAA0mD,8BAHnC1mD,oCAAA,GACEA,uBAAA,EAAAypN,GAAA,kIACMzpN,wBAA6EA,uBAA7E,OAAAuvB,EAAAztB,gBAAA,IAAA4nN,EAAAzyB,oBAAA98L,OAA6E6F,CAAA,WAAA2pN,6BAgOnF3pN,sBAAA,6CACcA,uBADA,QAAA4pN,EAAAC,eACA7pN,CAD4B,OAAA4pN,EAAAE,gBCxQtC,MAAOC,GAyEXlrN,YACUg3M,EACAngL,EACA9O,EACAtT,EACAguK,EACAlxJ,GALArxB,KAAA82M,sBACA92M,KAAA22B,kBACA32B,KAAA6nB,eACA7nB,KAAAuU,SACAvU,KAAAuiL,oBACAviL,KAAAqxB,sBA9EVrxB,KAAAopN,4BAA8B,EAO9BppN,KAAA6M,QAAgC,GAEhC7M,KAAA8uC,eAAsB,CACpBorD,aAAc,EACdC,cAAe,EACfC,gBAAiB,EACjBC,qBAAsB,EACtBC,mBAAoB,EACpBC,wBAAyB,EACzBC,oBAAqB,EACrBc,6BAA8B,EAC9BC,yBAA0B,EAC1BC,+BAAgC,EAChCC,0BAA2B,EAC3BC,sBAAuB,EACvBC,4BAA6B,EAC7BhB,eAAgB,EAChBC,cAAe,EACfM,MAAO,EACPL,MAAO,EACPC,KAAM,EACNM,eAAgB,EAChBwF,QAAS,GACTvF,mBAAoB,GAIdr7F,KAAAm1L,KAAO,IAAIruG,eACnB9mF,KAAAirN,qBAA4C,IAAI/jI,IAChDlnF,KAAA+R,MAAQC,KACRhS,KAAAqmB,SAAU,EAEVrmB,KAAA+C,gBAAiB,EACjB/C,KAAAg3M,mBAA6B,GAE7Bh3M,KAAA4iB,SAAgB,GAChB5iB,KAAAwqN,sBAAwB,EAExBxqN,KAAA2oN,eAA2B,GAC3B3oN,KAAA6oN,WAAuB,GACvB7oN,KAAA+oN,iBAA6B,GAC7B/oN,KAAAupN,eAA2B,GAC3BvpN,KAAAqpN,mBAA+B,GAC/BrpN,KAAAypN,qBAAiC,GAEjCzpN,KAAA4oN,eAA2B,GAC3B5oN,KAAA8oN,WAAuB,GACvB9oN,KAAAgpN,iBAA6B,GAC7BhpN,KAAAwpN,eAA2B,GAC3BxpN,KAAAspN,mBAA+B,GAC/BtpN,KAAA0pN,qBAAiC,GACjC1pN,KAAAkoC,qBAAsB,EACtBloC,KAAAiqC,gBAAiB,EAEjBjqC,KAAAkrN,iBAAmB,IACnBlrN,KAAAmrN,WAAa,IACbnrN,KAAAorN,0BAA4B,IAG5BprN,KAAA2vC,oBAA2B,GAG3B3vC,KAAAkoN,2BAAoC,GAWlCloN,KAAK2vC,oBAAsB,CACzB9sB,QAAS,CACPgsB,QAASw8K,MACTxhN,aAAc7J,KAAKuiL,kBAAkB/1I,oBAEvC1tB,KAAM,CACJ+vB,QAASy8K,MACTzhN,aAAc7J,KAAKuiL,kBAAkB/1I,oBAEvC++K,IAAK,CACH18K,QAAS28K,MACT3hN,aAAc7J,KAAKuiL,kBAAkB/1I,oBAG3C,CAEA/9B,WACEzO,KAAK6M,QAAU,CACb,CACEsC,KAAM,UACN/U,KAAMoP,wBACN4F,SAAU,EACVC,aAAcrP,KAAKq+H,SAErB,CACElvH,KAAM,4BACN/U,KAAMoP,sBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH,EAAG,CAAEoD,MAAO,eAAgB27D,MAAO,gBACnC,EAAG,CAAE37D,MAAO,YAAa27D,MAAO,iBAChC,EAAG,CAAE37D,MAAO,aAAc27D,MAAO,iBAIvC,CACE9sD,KAAM,SACN/U,KAAMoP,kBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH,EAAG,CAAEoD,MAAO,OAAQ27D,MAAO,iBAC3B,EAAG,CAAE37D,MAAO,KAAM27D,MAAO,iBACzB,EAAG,CAAE37D,MAAO,QAAS27D,MAAO,mBAIlC,CAAE9sD,KAAM,QAAS/U,KAAMoP,kBAAmB4F,SAAU,GACpD,CAAED,KAAM,UAAW/U,KAAMoP,mBAAoB4F,SAAU,GACvD,CACED,KAAM,QACN/U,KAAMoP,iBACN6F,aAAcrP,KAAKyrN,gBACnBr8M,SAAU,GAEZ,CAAED,KAAM,QAAS/U,KAAMoP,iBAAkB4F,SAAU,GACnD,CAAED,KAAM,QAAS/U,KAAMoP,iBAAkB4F,SAAU,GACnD,CAAED,KAAM,OAAQ/U,KAAMoP,gBAAiB4F,SAAU,IAGnDpP,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnoM,UAAWgb,IAClC3pB,KAAK+C,eAAiBkP,OAAOC,KAAKyX,EAAKoZ,QAAW3nC,OAAS,EAC3D4E,KAAK+6C,oBAAsB9oC,OAAOpJ,OAAO8gB,EAAKoZ,QAAW2oL,OACzD,MAAM3F,EAASp8L,EAAK6f,QACpB,UAAWjnB,KAAOoH,EAAKoZ,OACrB,GAAIpZ,EAAKoZ,OAAU6I,eAAerpB,GAAM,CACtC,MAAMM,EAAU8G,EAAKoZ,OAAUxgB,GAAK,GACpC,GAAIwjM,IAAWljM,EAAQ7D,IAAK,CAC1Bhf,KAAK2rN,iBAAmB9oM,EAAQzoB,KAChC,KACF,CACF,KAIN4F,KAAKq7L,iBAAmBr7L,KAAK22B,gBAAgByE,UAAU,uBACvDp7B,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnuK,4BAA6Bhf,IACpD3pB,KAAKg3M,mBAAqBrtL,KAI9B3pB,KAAKiqC,eAAiBjqC,KAAK82M,oBAAoB7sK,iBAE3CjqC,KAAKiqC,eACP0Z,WAAW,KACT3jD,KAAK8sC,kBAAkB9sC,KAAKuiL,kBAAkB/1I,oBAC9CxsC,KAAK82M,oBAAoB7sK,gBAAe,EAAK,EAC5CjqC,KAAKkrN,mBAERlrN,KAAKkoC,oBAAsBloC,KAAK82M,oBAAoB9sK,6BAChDhqC,KAAKkoC,oBACPyb,WAAW,KACT3jD,KAAK8sC,kBAAkB9sC,KAAKuiL,kBAAkB/1I,mBAAkB,EAC/DxsC,KAAKmrN,YAERnrN,KAAK8sC,kBAAkB9sC,KAAKuiL,kBAAkB/1I,oBAGpD,CAEAi7K,6BAIEznN,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKg7L,GAHpB,CACnBvpM,OAAQ,WAEwE,CAChFjiB,KAAM,OAER2F,KAAKqpJ,WAAW51H,kBAAkBpX,aAAa1N,UAAU,KACvD3O,KAAKqmB,SAAU,EACfs9B,WAAW,KACT,MAAMvZ,EAAepqC,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAK,GAChDqD,KAAK82M,oBAAoB3sK,oBAAoBC,GAC7CpqC,KAAK8sC,kBAAkB9sC,KAAKuiL,kBAAkB/1I,mBAAkB,EAC/DxsC,KAAKkrN,iBAAgB,EAE5B,CAEAp+K,kBAAkBjjC,EAAmB+hN,GACnC,MAAMl8K,EAAoBz9B,OAAOC,KAAKm5M,OAA4BziN,OAChEqJ,OAAOC,KAAKo5M,QAGRz7K,EAAyB59B,OAAOC,KAAKs5M,OAAY5iN,OACrDqJ,OAAOC,KAAKm5M,OAA4BziN,OAAOqJ,OAAOC,KAAKo5M,SAsB7D,IAAI17K,EAAuBC,EAEvB+7K,IACsB,oBAApBA,IACF5rN,KAAK2vC,oBAAoB7wB,KAAKjV,aAAkBA,EAChD+lC,EAAuB39B,OAAOC,KAAKo5M,QAGb,uBAApBM,IACF5rN,KAAK2vC,oBAAoB9sB,QAAQhZ,aAAeA,EAChD+lC,EAAuB39B,OAAOC,KAAKm5M,SAIvCrrN,KAAKuiL,kBACF/yI,2BACCxvC,KAAK8uC,eAnCY,CACnB,SACA,eACA,gBACA,iBACA,gBACA,QACA,OACA,+BACA,2BACA,iCACA,4BACA,wBACA,8BACA,QACA,iBACA,sBAqBEY,EACA1vC,KAAK2vC,oBACLC,EACAC,GAEDlhC,UAAWpM,IACVvC,KAAK8uC,eAAiBvsC,EACtBvC,KAAKqmB,SAAU,EACfrmB,KAAK6iL,OAAS7iL,KAAK8uC,eAAemsD,OAClCj7F,KAAK6rN,gBACL7rN,KAAK8rN,kBACL9rN,KAAKmhH,SAAWuX,YAAY,KAC1B14H,KAAK8rN,iBAAe,EACnB9rN,KAAKorN,0BAAyB,EAEvC,CAEAS,gBAQE,MAAMhpC,EAAkB,GAExB7iL,KAAK6iL,QAAQ77K,QAASo6D,IACpB,MAAM26H,EAAS36H,EAAK26H,OACdjZ,EAAe,CACnBipC,UAAWhwB,EAAO/Y,UAClBngK,QAASk5K,EAAOl5K,QAChBmpM,WAAYjwB,EAAOkwB,WACnBjoC,SAAU+X,EAAO/X,UAEnBnB,EAAO3mL,KAAK4mL,EAAK,GAGnB9iL,KAAK6iL,OAASA,CAChB,CAEAipC,kBAeE,MAAMlpM,EAA0B,GAChC5iB,KAAK8uC,eAAe6rD,gBAAgB3zF,QAAQ,CAACklN,EAA0BhlN,KACrE,MAAM8hC,EAAckjL,EAAoBnwB,OAAOl5K,QACzCyiJ,EAAgB/nK,SAAS2uN,EAAoB5rN,MAAM,IACnD6rN,EAAiBnsN,KAAKosN,YAAYpsN,KAAK8uC,gBAAgB4rD,aAAc1xD,GACrE43D,EAAU5gG,KAAKqsN,WAAWF,EAAepwB,OAAOuwB,cAEhDC,EAAevsN,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgB8rD,cAAe5xD,GACxE6V,EAAQ7+C,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgB+rD,MAAO7xD,GACzDjD,EAAQ/lC,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgBosD,MAAOlyD,GACzD85I,EAAQ9iL,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgBssD,eAAgBpyD,GAClE+nE,GAAO/wG,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgBgsD,KAAM9xD,GACvDt6B,GAAS1O,KAAKwsN,gBAAgBxsN,KAAK8uC,gBAAgB2rD,cAAezxD,GAClEyjL,GAAqBnnD,EAAgBinD,EACrCG,GAAkB,YAAYxlN,EAAQ,IACtCylN,GAAkB3sN,KAAK8uC,gBAAgBusD,mBAAmBh3E,OAC7D03K,IAAgBA,GAAOA,OAAOnW,MAAQ8mC,IAEzC1sN,KAAK4sN,2BAA2BD,IAEhC/pM,EAAS1mB,KAAK,CACZ2mB,QAASmmB,EAAYxZ,OACrB9gB,UACAo0K,QACAgoC,eAAgBxlD,EAChBylD,cAAewB,EACfE,mBAAoBA,GACpB5tK,QACAkyD,QACAhrE,QACA66D,UACAuzG,0BAA2B,GAC5B,GAGCn0M,KAAKg3M,qBACPp0L,EAAS5b,QAAS6b,IAChBA,EAAQsxL,0BAA4Bn0M,KAAKg3M,mBAAmBn0L,EAAQA,UAAUnU,OAC1EmU,EAAQA,UAAY7iB,KAAK2rN,mBAC3B9oM,EAAQsxL,0BAA4B,KAGxCn0M,KAAKwqN,sBAAwB5nM,EAASyB,OACnCxB,GAAkD,IAAtCA,EAAQsxL,2BACrB/4M,QAGJ4E,KAAK4iB,SAAWA,EAGhB5iB,KAAK2oN,eAAiB3oN,KAAK6sN,mBAAmB7sN,KAAK8uC,eAAewsD,8BAClEt7F,KAAK6oN,WAAa7oN,KAAK6sN,mBAAmB7sN,KAAK8uC,eAAeysD,0BAC9Dv7F,KAAK+oN,iBAAmB/oN,KAAK6sN,mBAC3B7sN,KAAK8uC,eAAe0sD,gCAEtBx7F,KAAKqpN,mBAAqBrpN,KAAK6sN,mBAC7B7sN,KAAK8uC,eAAe2sD,2BACpB,GAEFz7F,KAAKupN,eAAiBvpN,KAAK6sN,mBAAmB7sN,KAAK8uC,eAAe4sD,uBAAuB,GACzF17F,KAAKypN,qBAAuBzpN,KAAK6sN,mBAC/B7sN,KAAK8uC,eAAe6sD,6BACpB,GAGF37F,KAAK4oN,eAAiB5oN,KAAK8sN,eAAe9sN,KAAK8uC,eAAewsD,8BAC9Dt7F,KAAK8oN,WAAa9oN,KAAK8sN,eAAe9sN,KAAK8uC,eAAeysD,0BAC1Dv7F,KAAKgpN,iBAAmBhpN,KAAK8sN,eAAe9sN,KAAK8uC,eAAe0sD,gCAChEx7F,KAAKspN,mBAAqBtpN,KAAK8sN,eAAe9sN,KAAK8uC,eAAe2sD,2BAClEz7F,KAAKwpN,eAAiBxpN,KAAK8sN,eAAe9sN,KAAK8uC,eAAe4sD,uBAC9D17F,KAAK0pN,qBAAuB1pN,KAAK8sN,eAC/B9sN,KAAK8uC,eAAe6sD,4BAExB,CAEAixH,2BAA2BG,IACpBA,GAAgD,IAA5BA,EAAiB3xN,SAI1C4E,KAAKkoN,2BAA6B,GAElC6E,EAAiB/lN,QAASgmN,IACxB,MAAMC,EAAiBD,EAAYjxB,OAAOxtJ,SACpC2+K,EAAaD,EAAetwN,MAAM,KAAK,GACvCwwN,EAAeF,EAAetwN,MAAM,KAAK,GACzCywN,EAAmBJ,EAAY1sN,MAAM,GAE3CN,KAAK+6C,qBAAqB/zC,QAAS+vM,IACjC,GAAIA,EAAe38M,OAAS4F,KAAK2rN,iBAAkB,CACjD,MAAM0B,EAAgBtW,EAAeuW,eAAellN,QAClD,0BACA,IAEImlN,EAAeF,EAAc1wN,MAAM,KAAK,GACxC6wN,EAAiBH,EAAc1wN,MAAM,KAAK,GAAK0wN,EAAc1wN,MAAM,KAAK,GAAK,OAE7DqD,KAAKkoN,2BAA2Br1M,KACnD46M,IAAeA,GAAWzuM,MAAQ+3L,EAAe/3L,MAKlDkuM,IAAeK,GACfJ,IAAiBK,GACI,MAArBJ,IAEAptN,KAAKkoN,2BAA2BhsN,KAAK,CACnC6rN,aAAchR,EAAe38M,KAC7BkvC,cAAeytK,EAAeztK,cAC9BtqB,IAAK+3L,EAAe/3L,MAGtBhf,KAAK82M,oBACFjtK,iBACCktK,EAAe/3L,IACf+3L,EAAelkL,KACf,KACAkkL,EAAentK,WACfmtK,EAAe1tK,gBACf0tK,EAAeptK,IACfotK,EAAer4L,OAEhB/P,UAAU,CACT4S,MAAQ2D,KACN,MAAM8iM,GAAoB9iM,GAAc3D,MAAM8D,OACxCy/G,GAAa9kI,KAAKkoN,2BAA2Bp6H,UAChD2/H,IAAeA,GAAWzuM,MAAQ+3L,EAAe/3L,MAEjC,IAAf8lH,KACF9kI,KAAKkoN,2BACHpjF,IACAkjF,kBAAoBA,KAG1Bv4M,KAAO4oB,KACL,IAAiB,IAAbA,GAAmB,CACrB,MAAMuG,GAAUp1B,6CAChBxJ,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBC,QAAS2M,IAExD5+B,KAAKkoN,2BAA6BloN,KAAKkoN,2BAA2B7jM,OAC/DopM,IAAeA,GAAWzuM,MAAQ+3L,EAAe/3L,IAEtD,KAIV,GACD,GAEL,CAEAwtM,gBAAgBkB,EAAc1kL,GAC5B,MAAM2kL,EAAiB3tN,KAAKosN,YAAYsB,EAAS1kL,GACjD,OAAOzrC,SAASowN,GAAgBrtN,MAAM,IAAM,EAC9C,CAEA8rN,YAAYsB,EAAc1kL,GACxB,OAAO0kL,EAAQ76M,KAAMkpL,GAAgBA,GAAQA,QAAQl5K,UAAYmmB,EACnE,CAEAqjL,WAAWuB,GACT,MAAMhtH,EAAUgtH,EAAYxlN,QAAQ,gBAAiB,IAAIzL,MAAM,KAC/D,OAAOikG,EAAQ,GAAK,IAAMA,EAAQ1lG,MAAM,EAAG0lG,EAAQxlG,QAAQwB,KAAK,IAClE,CAEAiwN,mBAAmBp+K,EAAYr0C,GAAO,EAAOqxC,EAAQzrC,KAAKopN,6BACxD,IAAI1oN,EAAS,GACb,QAASzE,EAAI,EAAGA,EAAIwvC,EAAOxvC,IAAK,CAC9B,IAAI0F,EAAQ,GACR8sC,EAAMxyC,KACR0F,EAAQ8sC,EAAMxyC,IAAI8/L,QAAQl5K,QACtBzoB,IAAMuH,EAAQ8sC,EAAMxyC,IAAI8/L,QAAQ3hM,KAAO,MAAQuH,IAErDjB,EAAOxE,KAAKyF,EACd,CACA,OAAOjB,CACT,CAEAosN,eAAer+K,EAAYhD,EAAQzrC,KAAKopN,6BACtC,IAAIvgN,EAAS,GACb,QAAS5M,EAAI,EAAGA,EAAIwvC,EAAOxvC,IACrBwyC,EAAMxyC,IAAI4M,EAAO3M,KAAKuyC,EAAMxyC,IAAI4M,QAEtC,OAAOA,CACT,CAEAgyM,cACE76M,KAAKkoC,qBAAsB,EAC3BloC,KAAK82M,oBAAoB9sK,4BAA2B,EACtD,CAEAhgB,cACEhqB,KAAKm1L,KAAKjrK,cACVyuG,cAAc34H,KAAKmhH,UACnBnhH,KAAKuiL,kBAAkBr4J,aACzB,iDArfW8gM,IAAqB/pN,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,UAAAhI,8BAAAiI,MAAAjI,8BAAAkI,KAAA,4DAArB6hN,GAAqB5hN,UAAA,uBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,+RDgClBE,wGAkBVA,2EAAA,oCACE,uDAAG,iJAA+D,8FAAS,yDAC3E,oDACE,uDACE,uGAAqB,+FAAU,mCAA8B,wHAC7D,qGAAmB,+FAAU,qCAA6B,wHAC1D,gGAAc,+FAAU,qCAA4F,wHACtH,yDACF,wEACF,6GAUEA,2EAAA,8LAA6J,01IA/BrKvI,uBAhEA,EAAA4sN,GAAA,yBAAA5sN,mCAgEAA,CAhE2B,EAAA6sN,GAAA,yBAAA7sN,mCAgE3BA,CAxBsB,EAAA8sN,GAAA,yBAAA9sN,mCAwBtBA,CAdyB,EAAA+sN,GAAA,oDA8OzB/sN,uBAAA,EAAAgtN,GAAA,yBAAAhtN,2CAhOeA,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA43L,sNEpDPp6L,sBAAA,4DAGYA,uBADA,0CAAA+K,EAAAkiN,oBACAjtN,CADiE,0CARjFA,oCAAA,KAEEA,2BAAA,SAAAA,mBAAA,KAE2BA,2BAC3BA,uBAAA,EAAAktN,GAAA,oFAXNltN,oCAAA,GACEA,2BAAA,aAKEA,uBAAA,EAAAmtN,GAAA,sBAeFntN,2BACAA,sBAAA,sHAfiBA,sBAAA,GAAAA,uBAAA,OAAA+K,EAAAuzB,YAAA41E,QAAA5iF,MAeZtxB,+CAAA,eAAAwlB,ICfD,MAAO4nM,GAOX,uBAAIH,GACF,YAA0Bt0L,IAAnB55B,KAAKiM,UAA0BjM,KAAKiM,UAAU7R,KAAU,IACjE,iDATWi0N,GAA4B,4DAA5BA,GAA4BjlN,UAAA,+BAAA+C,OAAA,CAAAozB,YAAA,cAAAtzB,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,aDG3B5C,gGAGaA,yfAb3BvI,uBAAA,EAAAqtN,GAAA,2BAAertN,uBAAA,OAAAwC,EAAAwI,gOECbhL,oCAAA,KAGIA,2BADF,UACEA,CAD+D,YAE7DA,sBAAA,UAIAA,2BADF,WACEA,CAD4B,WACXA,mBAAA,mDACfA,2BAAA,UAEEA,mBAAA,GACAA,sBAAA,UAKRA,2HAZOA,sBAAA,GAAAA,uBAAA,UAAAA,4BAAA,EAAAQ,GAAAF,EAAAwQ,MAAA8nD,MAAAt4D,EAAAwQ,MAAAosF,SAKEl9F,sBAAA,GAAAA,uBAAA,OAAAumN,EAAAtvB,oBAAA,GAAAl5K,IAAA/d,2BACDA,uDAAA,IAAAumN,EAAAtvB,oBAAA,GAAA7kB,KAAA,gCAXVpyK,uBAAA,EAAAstN,GAAA,+FACettN,uBAAA,OAAAA,wBAAA,IAAAM,EAAA85L,6CA6CLp6L,sBAAA,2EAE0BA,uBADA,cAAAM,EAAAg+B,YACAt+B,CAD2B,YAAAM,EAAA+K,8EAjBvDrL,2BAAA,mBASUA,uBAJA,uBAAAA,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAAaM,EAAAikC,UAAS,EAItBvkC,CAJuB,0BAAA2J,GAAA3J,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAELM,EAAAiL,eAAA5B,GAAsB,EAExC3J,CAFyC,2BAAA2J,GAAA3J,0BAAAqT,GAAA,MAAA/S,EAAAN,0BAAA,UAAAA,wBAEtBM,EAAAmL,gBAAA9B,GAAuB,GAClD3J,sBAAA,yBAMAA,uBAAA,EAAAutN,GAAA,mCAIFvtN,wEAZUA,uBAPA,OAAAM,EAAAgB,KAOAtB,CAPa,UAAAM,EAAAsL,QAOb5L,CANmB,gBAMnBA,CAFmB,eAITA,sBAAA,GAIAA,uBAJA,aAAAM,EAAAg+B,YAAA1M,KAIA5xB,CAJ+B,YAAAM,EAAA0K,UAI/BhL,CAHuB,eAAAM,EAAAwL,yCAlBjD9L,2BADF,QACEA,CADkF,cAIhFA,oCAAA,MACEA,2BAAA,UAAAA,mBAAA,KACqBA,2BACrBA,uBAAA,EAAAwtN,GAAA,0DAwBJxtN,2BACAA,sBAAA,YACFA,oEADOA,sBAAA,GAAAA,uBAAA,eAAAksI,8BAjCTlsI,oCAAA,GACEA,uBAAA,EAAAytN,GAAA,sIAAMztN,wBAA2DA,uBAA3D,WAAA0tN,EAAAz2B,oBAAA98L,OAA2D6F,CAAA,WAAA2tN,8BAsCjE3tN,2BAAA,UAEIA,mBAAA,GACFA,sBAAA,UACFA,oDAHGA,uBAAA,OAAA4tN,EAAA7vM,IAAA/d,2BACCA,uDAAA,UAAA4tN,GAAA,MAAAA,EAAA7vM,KAAA6vM,EAAA7vM,IAAA8yF,SAAA,WAAA+8G,GAAA,MAAAA,EAAA7vM,IAAA,KAAA6vM,EAAA7vM,IAAA9jB,MAAA,MAAA2zN,EAAA7vM,IAAA,+BAUF/d,sBAAA,2FAKGA,uBAAAM,EAAAwQ,MAAA2oB,SADAz5B,wBADA,oBAAA05B,EAAAN,cAAA,EACAp5B,CADiD,qBAAA05B,EAAAN,cAAA,8BAJtDp5B,2BAAA,UACEA,uBAAA,EAAA6tN,GAAA,YAMA7tN,2BAAA,aAAmCA,mBAAA,oCACrCA,gFAPMA,+CAAA,OAAA05B,EAAAN,cAAA,GAMEp5B,0DAAA,QAAA05B,EAAAo0L,YAA6B9tN,8EAAA,IAAA05B,EAAAG,4BAAA,iCAErC75B,2BAAA,UACEA,sBAAA,UAGAA,2BAAA,aAA0BA,mBAAA,mBAC5BA,wEAFKA,+CAAAM,EAAAwQ,MAAA+qF,gCAGL77F,2BAAA,UAAoDA,mBAAA,SAAGA,qDAAvDA,uBAfA,EAAA+tN,GAAA,aAeA/tN,CAf2F,EAAAguN,GAAA,aAe3FhuN,CANqH,EAAAiuN,GAAA,sCAT9GjuN,uBAAA,OAAA05B,EAAAG,4BAAA,qBAAAH,EAAA2O,eASAroC,+CAAA,OAAA05B,EAAAG,6BAAA,GAAAH,EAAAN,eAAA,qBAAAM,EAAA2O,eAMAroC,+CAAA,yBAAA05B,EAAA2O,gBCzDH,MAAO6lL,WAAkCphN,IAwB7CjO,YACUg3M,EACAviM,EACDvG,EACCqjB,EACAnjB,EACA2Z,EACA2lL,EACA72K,EACAqgC,EACAt5C,GAERrP,QAXQrO,KAAA82M,sBACA92M,KAAAuU,SACDvU,KAAAgO,eACChO,KAAAqxB,sBACArxB,KAAAkO,qBACAlO,KAAA6nB,eACA7nB,KAAAwtM,gBACAxtM,KAAA22B,kBACA32B,KAAAg3D,kBACAh3D,KAAA0d,QA3BF1d,KAAAm1L,KAAO,IAAIruG,eAGnB9mF,KAAAg3M,mBAA6B,GAC7Bh3M,KAAA6M,QAAgC,GAEhC7M,KAAAiM,UAAY,IAAIqC,IAEhBtO,KAAAovN,iBAAwC,IAAIloI,IAK5ClnF,KAAA+R,MAAQC,KAERhS,KAAAooC,0BAAmC,GAejCpoC,KAAK+M,aAAe,CAClB,CACED,WAAY,SACZyb,KAAMvW,KAAMwW,IACZpuB,KAAM4F,KAAKgO,aAAa+9D,QACxB9rD,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,UAAW5kJ,GACrE+c,MAAOA,IAAMhpB,KAAKynN,2BAA2B,YAE/C,CACE36M,WAAY,SACZyb,KAAMvW,KAAM6W,KACZzuB,KAAM4F,KAAKgO,aAAauR,KACxBU,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,OAAQ5kJ,GAClE+c,MAAOA,IAAMhpB,KAAKynN,2BAA2B,SAE/C,CACE36M,WAAY,SACZyb,KAAMvW,KAAMwzB,QACZprC,KAAM4F,KAAKgO,aAAai+D,UACxBhsD,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,YAAa5kJ,GACvE+c,MAAOA,IAAMhpB,KAAKynN,2BAA2B,cAE/C,CACE36M,WAAY,SACZyb,KAAMvW,KAAM+W,QACZ3uB,KAAM4F,KAAKgO,aAAag+D,WACxB/rD,QAAUhU,GAAgCjM,KAAK6wJ,WAAW,aAAc5kJ,GACxE+c,MAAOA,IAAMhpB,KAAKqvN,2BAGtBrvN,KAAKu/B,YAAcv/B,KAAKkO,mBAAmBW,gBAC7C,CAEAJ,WACEzO,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnoM,UAAWgb,IAClC,GAAIA,GAAQA,EAAKoZ,OAAW,CAC1B/iC,KAAK+lN,OAASp8L,EAAK6f,QACnBxpC,KAAK68M,WAAalzL,EAAK6tL,YACvB,MAAMz8J,EAAsB9oC,OAAOpJ,OAAO8gB,EAAKoZ,QAAW2oL,OAC1D1rN,KAAKuC,KAAOw4C,EACZ/6C,KAAKs3M,+BACLt3M,KAAKuC,KAAKyE,QAAS6b,IACjBA,EAAQiY,4BAAiC,EACrCjY,EAAQ8mB,KAAU9mB,EAAQ8mB,IAAS,IACrC9mB,EAAQ8mB,IAA0B,IAAjB9mB,EAAQ8mB,IACzB9mB,EAAQiY,4BAAiC96B,KAAKw7B,+BAC5C3Y,EAAQ8mB,KAEV9mB,EAAQwX,cAAmBr6B,KAAKy7B,iBAAiB5Y,EAAQ8mB,KACzD9mB,EAAQksM,WAAgB,IAAI7yL,KAAKA,KAAKC,MAAQtZ,EAAQ8mB,KAAQ2lL,iBAAc,EAGlF,KAIJtvN,KAAK6M,QAAU,CACb,CACEsC,KAAM,gBACN/U,KAAMoP,iBACN4F,SAAU,GAEZ,CACED,KAAM,4BACN/U,KAAMoP,sBACN4F,SAAU,EACV+Z,mBAAoBC,IAAa4iE,MACjC/J,qBAAsB,CACpB/kF,IAAK,CACH,EAAG,CAAEoD,MAAO,eAAgB27D,MAAO,gBACnC,EAAG,CAAE37D,MAAO,YAAa27D,MAAO,iBAChC,EAAG,CAAE37D,MAAO,aAAc27D,MAAO,iBAIvC,CACE9sD,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,GAEZ,CACED,KAAM,MACN/U,KAAMoP,eACN4F,SAAU,EACVC,aAAcrP,KAAK8wJ,QAErB,CACE3hJ,KAAM,OACN/U,KAAMoP,gBACN4F,SAAU,GAEZ,CACED,KAAM,MACN/U,KAAMoP,yBACN4F,SAAU,EACVC,aAAcrP,KAAKm7B,cAIvBn7B,KAAKm1L,KAAK3sK,IACRxoB,KAAK82M,oBAAoBnuK,4BAA6Bhf,IACpD3pB,KAAKg3M,mBAAqBrtL,EAC1B3pB,KAAKs3M,8BAA4B,IAIrCt3M,KAAKq7L,iBAAmBr7L,KAAK22B,gBAAgByE,UAAU,sBACzD,CAEApR,cACEhqB,KAAKm1L,KAAKjrK,aACZ,CAEAuR,iBAAiBp1B,GACf,QAAauzB,IAATvzB,GAA8B,MAARA,EACxB,OAEF,GAAIA,EAAO,EACT,OAAO,EAGT,OAAOjJ,KAAK6B,IAAI,EAAG7B,KAAK2+B,MAAM11B,EADf,OAEjB,CAEAm1B,+BAA+Bn1B,GAC7B,OAAwC,GAAjCjJ,KAAK2+B,MAAM11B,OAA2B,GAC/C,CAEAixM,+BACMt3M,KAAKg3M,oBAAsBh3M,KAAKuC,MAClCvC,KAAKuC,KAAKyE,QAAS6b,IACjB,MAAM0sM,EAAgBvvN,KAAKg3M,mBAAmBn0L,EAAQzoB,WAChCw/B,IAAlB21L,GACF1sM,EAAQsxL,0BAA4Bob,EAAc7gN,OAClDmU,EAAQ8mB,IAAM4lL,EAAcC,WAE5B3sM,EAAQsxL,0BAA4B,EAER,kBAA1BtxL,EAAQymB,gBACVzmB,EAAQsxL,0BAA4B,IAI5C,CAEAsT,2BAA2BnrM,GACzB,MAAMuc,EAAe,CACnBstL,aAAcnmN,KAAKuC,KACnB+Z,OAAQA,EACRuG,QAAS7iB,KAAKiM,UAAUmc,SAE1BpoB,KAAKqpJ,WAAarpJ,KAAK6nB,aAAagD,KAAKg7L,GAA2BhtL,EAAc,CAChFx+B,KAAM,OAER2F,KAAKqpJ,WAAW51H,kBAAkBpX,aAAa1N,UAAU,KACvD,MAAMy7B,EAAepqC,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAK,GAChDqD,KAAK82M,oBAAoB3sK,oBAAoBC,GAC7CpqC,KAAKs3M,+BACLt3M,KAAK82M,oBAAoB7sK,gBAAe,EAAI,EAEhD,CAEAolL,yBACE,MAAMxsM,EAAU7iB,KAAKiM,UAAUmc,QAC/BpoB,KAAK4qB,SAAW5qB,KAAKg3D,gBAAgBnsC,KAAKC,IAAkC,CAC1EooC,YAAa1pD,sKACb2pD,kBAAmB3pD,sBACnB0hB,gBAAiB1hB,mBACjB2hB,UAAW,CAACtI,EAAQymB,cAAmB,MAAQzmB,EAAQgQ,MACvDxW,aAAcA,IACZrc,KAAK82M,oBAAoB/tK,cAAclmB,EAAQzoB,KAASyoB,EAAQgQ,MAASlkB,UAAU,KACjF3O,KAAKwtM,cAAcG,YAAY,GAAG9qL,EAAQzoB,QAAWyoB,EAAQgQ,QAC7D7yB,KAAK82M,oBAAoB9sK,4BAA2B,GACpDhqC,KAAKg3D,gBAAgBxjC,aACrBxzB,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBC,QACjBzoB,kCAAkCqZ,EAAQymB,kBAE5C,MAAMc,EAAepqC,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAK,GAChDqD,KAAK82M,oBAAoB3sK,oBAAoBC,EAAY,IAGjE,CAEAymH,WAAWv0I,EAAgBrQ,GACzB,OAAIjM,KAAK+lN,SAAW/lN,KAAK68M,WAChBrzM,kDAAkD8S,qBAEtDrQ,EAAU8mE,cAA2B,YAAXz2D,KAG3BrQ,EAAU0c,oBAEqB,kBADjB1c,EAAUmc,QACdkhB,eAAmD,YAAXhtB,IAC3C9S,mBAAmB8S,kBALrB9S,kDAAkD8S,GAS7D,CAEA5P,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAO,eAAeF,GACb+B,MAAM7B,eAAeF,GACrBtM,KAAKuU,OAAOC,SAAS,CAAC,uBAAwB,CAAEi7M,WAAYzvN,KAAK0d,OACnE,CAEA8nB,UACExlC,KAAK82M,oBAAoBtxK,SAC3B,iDAzPW2pL,IAAyBluN,8BAAAC,MAAAD,8BAAA8H,UAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,KAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,IAAA9kB,8BAAA+kB,MAAA/kB,8BAAAglB,MAAAhlB,8BAAA8H,kBAAA,4DAAzBomN,GAAyB/lN,UAAA,4BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,4BACzBsyE,KAAc,qZDFXpyE,0FA8CFA,+GAQAA,0hCA7DdvI,uBAtBA,EAAAyuN,GAAA,yBAAAzuN,mCAsBAA,CAtB2B,EAAA0uN,GAAA,oDAoE3B1uN,uBATA,EAAA2uN,GAAA,yBAAA3uN,mCASAA,CARgC,EAAA4uN,GAAA,yBAAA5uN,2CAtCjBA,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA43L,oPEmCR,MAAMy0B,GAAa,CACxBC,QAAS,UACTC,OAAQ,SACRC,MAAO,SAGIC,YAED,WAGCC,QACL,OADKA,mBAEM,mBAGNC,QACL,QADKA,SAEJ,wBCzDF,MAAMC,GAAU,mBACVC,GAAU,mBAKjB,MAAOC,GAMXzwN,YAAoBgsB,EAA0BuF,GAA1BrxB,KAAA8rB,OAA0B9rB,KAAAqxB,sBAL9CrxB,KAAA8gC,QAAU,UACF9gC,KAAAwwN,iBAAmB,IAAIjqL,UAC/BvmC,KAAAywN,WAAazwN,KAAKwwN,iBAAiBzoL,eACnC/nC,KAAA0wN,gBAAeC,UAA2B,KAE+C,CAEzFC,SAASruN,GACPvC,KAAKwwN,iBAAiB/gN,KAAKlN,EAC7B,CAEAsuN,gBAAgBtuN,GACdvC,KAAK0wN,aAAal4L,IAAIj2B,EACxB,CAEAuuN,WAAWj+J,GACT,MAAMozC,EAAOpzC,EAAMhqD,SAAS4G,OAAOnP,OAAO2lG,KAC1C,IAAKA,EACH,OAGF,GAAMA,EAAK9/F,OAASkqN,IAAWpqH,EAAK9/F,OAASmqN,GAK3C,YAJAtwN,KAAKqxB,oBAAoBxG,KACvBmH,KAAiBzQ,MACjB/X,4DAKJ,MAAMq/I,EAAS,IAAI1iD,WACnB0iD,EAAOziD,OAAUvZ,IACf,MAAMkkI,EAAoBlkI,EAAExlF,QAAQxL,OACpC,IAAIm1N,EACJ,IACM/qH,EAAK9/F,OAASkqN,GAChBW,EAAgBC,QAAUF,GACjB9qH,EAAK9/F,OAASmqN,KACvBU,EAAgB/1K,KAAKy4B,MAAMq9I,GAE/B,OAASxvM,GACPvhB,KAAKqxB,oBAAoBxG,KAAKmH,KAAiBzQ,MAAO/X,YAAY+X,EAAMqd,UAC1E,CACA5+B,KAAK6wN,gBAAgBG,EAAa,EAGpCnoE,EAAOxiD,WAAWJ,EACpB,CAEA9mF,eACE,OAAOnf,KAAK8rB,KAAKpZ,IAAkB,GAAG1S,KAAK8gC,kBAC7C,CAEA6lI,cAAchiJ,GACZ,OAAO3kB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,kBAAmBnc,EACnD,CAEAusM,cAAcxnM,GACZ,OAAO1pB,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,mBAAmBpX,IAAa,CAC9DiX,QAAS,YAEb,CAEAwwL,WAAWznM,GACT,OAAO1pB,KAAK8rB,KAAKpZ,IAAgB,GAAG1S,KAAK8gC,4BAA4BpX,IACvE,CAEA0nM,gBACE,OAAOpxN,KAAK8rB,KAAKpZ,IAAmB,GAAG1S,KAAK8gC,mBAC9C,CAEAuwL,kBACE,OAAOrxN,KAAK8rB,KAAKpZ,IAAsB,GAAG1S,KAAK8gC,sBACjD,CAEAwwL,YAAY3sM,GACV,OAAO3kB,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,gBAAiBnc,EACjD,CAEA4sM,SAASl9M,EAAoB+yG,GAC3B,OAAOpnH,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,iBAAiBzsB,KAAc+yG,IAC9D,CAEAoqG,YAAY9nM,EAAmB+nM,GAC7B,OAAOzxN,KAAK8rB,KAAKT,OAAa,GAAGrrB,KAAK8gC,iBAAiBpX,KAAa+nM,IAAW,CAC7E9wL,QAAS,YAEb,CAEA+wL,YAAYrqG,GACV,OAAOrnH,KAAK8rB,KAAKpZ,IAAiB,GAAG1S,KAAK8gC,oBAAoBumF,IAChE,CAEAsqG,eAAerqG,GACb,OAAOtnH,KAAK8rB,KAAKpZ,IAAoB,GAAG1S,KAAK8gC,uBAAuBwmF,IACtE,CAEAsqG,eAAeC,GACb,OAAO7xN,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,mBAAoB,CAChDgxL,UAAWD,GAEf,CAEAE,kBAAkBC,GAChB,OAAOhyN,KAAK8rB,KAAKzwB,KAAK,GAAG2E,KAAK8gC,sBAAuB,CACnDkxL,YAAaA,GAEjB,CAEAC,eAAe5qG,GACb,OAAOrnH,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,oBAAoBumF,IAAU,CAC5D1mF,QAAS,YAEb,CAEAuxL,kBAAkB5qG,GAChB,OAAOtnH,KAAK8rB,KAAKT,OAAO,GAAGrrB,KAAK8gC,uBAAuBwmF,IAAiB,CACtE3mF,QAAS,YAEb,CAEA0H,WAAWh0B,GACT,OAAOrU,KAAK8rB,KAAKpZ,IAAI,GAAG1S,KAAK8gC,mBAAmBzsB,IAClD,iDA3HWk8M,IAAUtvN,qBAAAC,cAAAD,qBAAA8H,KAAA,+DAAVwnN,GAAUpvN,QAAVovN,GAAUnvN,UAAAC,WAFT,QAAM,ECjBpB,IAAK8wN,IAAL,SAAKA,GACHA,EAAAtvM,QAAA,UACAsvM,EAAAC,gBAAA,mBACAD,EAAAE,WAAA,aACAF,EAAAG,SAAA,UACF,CALA,CAAKH,QAAI,KAYH,MAAOI,GAIXzyN,YAAoByU,GAAAvU,KAAAuU,SAFpBvU,KAAAwyN,UAAkBL,GAAKtvM,OAEc,CAErCpU,WACE,MAAMwnH,EAAcj2H,KAAKuU,OAAOyK,IAChChf,KAAKwyN,UAAYvgN,OAAOpJ,OAAOspN,IAAMt/M,KAAM4/M,GAAQx8F,EAAY/zH,SAASuwN,KAASN,GAAKtvM,OACxF,CAEAoyE,WAAWw9H,GACTzyN,KAAK0yN,YAAcD,EACnBzyN,KAAKuU,OAAOC,SAAS,CAAC,cAAei+M,KACvC,CAEA,QAAWE,GACT,OAAOR,EACT,iDAlBWI,IAAgBtxN,8BAAAC,UAAA,4DAAhBqxN,GAAgBnpN,UAAA,kBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,iBCXhB5C,oFAMAA,6FAMAA,uFAMAA,mVAnBXvI,2BALF,eAKEA,CADsB,eAKpBA,uBAAA,6BAAYwC,EAAAwxF,WAAAxxF,EAAAkvN,KAAA9vM,QAAwB,GACtC5hB,2BACAA,2BAAA,eAIEA,uBAAA,6BAAYwC,EAAAwxF,WAAAxxF,EAAAkvN,KAAAP,gBAAgC,GAC9CnxN,2BACAA,2BAAA,eAIEA,uBAAA,6BAAYwC,EAAAwxF,WAAAxxF,EAAAkvN,KAAAN,WAA2B,GACzCpxN,2BACAA,2BAAA,eAIEA,uBAAA,6BAAYwC,EAAAwxF,WAAAxxF,EAAAkvN,KAAAL,SAAyB,GAEzCrxN,oCAzBEA,uBAAA,kBAIEA,+CAAA,SAAAwC,EAAA+uN,YAAA/uN,EAAAkvN,KAAA9vM,SAMA5hB,+CAAA,SAAAwC,EAAA+uN,YAAA/uN,EAAAkvN,KAAAP,iBAMAnxN,+CAAA,SAAAwC,EAAA+uN,YAAA/uN,EAAAkvN,KAAAN,YAMApxN,+CAAA,SAAAwC,EAAA+uN,YAAA/uN,EAAAkvN,KAAAL,2CCNG,MAAMM,GAAiB,8BAQxB,MAAOC,GAUX/yN,YACUyU,EACAqe,EACA1kB,EACDF,EACC8kN,EACAjrM,EACA9J,GANA/d,KAAAuU,SACAvU,KAAA4yB,aACA5yB,KAAAkO,qBACDlO,KAAAgO,eACChO,KAAA8yN,aACA9yN,KAAA6nB,eACA7nB,KAAA+d,cAVV/d,KAAAwrI,SAAW,IAAIh9H,kBAA+B,IAC9CxO,KAAAiM,UAA8B,IAAIqC,IAWhCtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBumG,GAC7D,CAEA3mG,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,UACNC,SAAU,GAEZ,CACEhV,KAAMoP,oBACN2F,KAAM,gBACNC,SAAU,GAEZ,CACEhV,KAAMoP,6BACN2F,KAAM,oBACNC,SAAU,IAIdpP,KAAK+M,aAAe,CAClB,CACE3S,KAAM,GAAG4F,KAAKgO,aAAakS,YAC3BpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWG,cACnDrK,aAAezc,IAAiCA,EAAU8mE,cAE5D,CACE34E,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IACLhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWQ,QAAQ7zB,OAAOS,KAAKiM,UAAUmc,QAAQ2qM,aAEhF,CACE34N,KAAM4F,KAAKgO,aAAakb,OACxBpc,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAKgzN,oBAItBhzN,KAAKizN,UAAYjzN,KAAKwrI,SAASx8H,QAC7BC,aAAU,IACRjP,KAAK8yN,WAAW1B,gBAAgBpiN,QAC9BwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,UAKpB,CAEA8vM,eACElzN,KAAKwrI,SAAS/7H,KAAK,GACrB,CAEAujN,kBACE,MAAM3rG,EAASrnH,KAAKiM,UAAUmc,QAAQ2qM,QAEtC/yN,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDI,gBAAiB1hB,4CACjB2hB,UAAW,CAACk8F,GACZj8F,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,GAAG6tM,MAAkBv0L,KAASnV,SAAU,CAC7Dm+F,OAAQA,IAEVriG,KAAMhlB,KAAK8yN,WAAWb,eAAe5qG,MAG7C,CAEA36G,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,iDAlGW4mN,IAAwB5xN,8BAAAC,UAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,IAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA,4DAAxB8sM,GAAwBzpN,UAAA,4BAAAyd,SAAA,CAAA5lB,+BAFxB,CAAC,CAAEyO,QAASC,IAAmBC,SAAU,IAAID,IAAkBijN,QAAkBpoN,MAAA,EAAAC,KAAA,EAAAC,OAAA,mUAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IC1B9FrI,sBAAA,iBAEAA,2BAAA,8CASEA,uBADA,8BAAawC,EAAAyvN,cAAc,EAC3BjyN,CAD4B,2BAAA2J,GAAA,OACTnH,EAAAiJ,gBAAA9B,EAAuB,GAE1C3J,2BAAA,WACEA,sBAAA,wBAMJA,oCAfEA,wBAIAA,uBAJA,OAAAA,wBAAA,IAAAwC,EAAAwvN,WAIAhyN,CAJ0B,UAAAwC,EAAAoJ,QAI1B5L,CAFmB,iBAQfA,sBAAA,GAEAA,uBAFA,aAAAwC,EAAAqJ,WAEA7L,CAFyB,YAAAwC,EAAAwI,UAEzBhL,CADuB,eAAAwC,EAAAsJ,yHCejB9L,2BAAA,aAIEA,oCAAA,GAAAA,mBAAA,yCACFA,qDALAA,uBAAA,EAAAkyN,GAAA,iHACGlyN,uBAAA,OAAAuvB,EAAA4iM,mBAAA/iN,UAAA,QAAAqgB,EAAA,wCAmCKzvB,2BAAA,eAC6BA,mBAAA,GAAgBA,qDAArCA,uBAAA,QAAAoyN,EAAAN,SAAqB9xN,sDAAAoyN,EAAAN,iCAG7B9xN,2BAAA,aAGEA,oCAAA,GAAAA,mBAAA,yCACFA,4FAOFA,2BAJF,WAIEA,CADmC,wBAGlBA,uBAAA,mBAAAA,0BAAA6T,GAAA,MAAAw+M,EAAAryN,4BAAAiG,MAAAspB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA+iM,iBAAAD,GAAmB,gCAC3CryN,sBAAA,YAIJA,kCATKA,uBAAA,gBAAAA,4BAAA,EAAAK,+BAjCTL,oCAJF,KAIEA,CADD,MAgBSA,2BAdN,WAcMA,CAZ+B,WAY/BA,CARH,kBAQGA,CADD,eACCA,mBAAA,KAIAA,2BACAA,uBAAA,EAAAuyN,GAAA,iBAEFvyN,2BACAA,uBAAA,EAAAwyN,GAAA,yBAAAxyN,oCAOFA,2BACAA,uBAAA,GAAAyyN,GAAA,cAYFzyN,sLA3CYA,+CAAA,gBAAAqyN,GAMRryN,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAAyI,KAMEzI,wBACAA,uBADA,iBAAAuvB,EAAA4iM,mBAAAhiN,SAAA,KAAAof,EAAA4iM,mBAAAhiN,SAAA4zI,aAAA5zI,SAAAkiN,GAAA39M,WAAA,MAAA6a,EAAA4iM,mBAAAhiN,SAAA,KAAAof,EAAA4iM,mBAAAhiN,SAAA4zI,aAAA5zI,SAAAkiN,GAAAliN,SAAAuiN,IAAApiN,OACAtQ,CADqJ,cAAA2yN,GAInJ3yN,+CAAA,cAIqBA,sBAAA,GAAAA,uBAAA,UAAA4yN,GAYrB5yN,sBAAA,GAAAA,uBAAA,OAAAqyN,EAAA,oEAvCdryN,2BAAA,YAGEA,uBAAA,EAAA6yN,GAAA,wBAmDE7yN,2BADF,WACEA,CADqB,eAGbA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAujM,gBAAe,GAFhC9yN,wBAAA,kCAKEA,sBAAA,YAIFA,iFACAA,2BAAA,eAEQA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAwjM,2BAA0B,GAF3C/yN,wBAAA,kCAKEA,sBAAA,YAIFA,wBAEJA,4EAtEkBA,+CAAA,UAAAuvB,EAAAw0H,aAAA5zI,2EArCxBnQ,oCAAA,GAOQA,2BANN,WAMMA,CANe,cAMfA,CAFa,WAEbA,CADqB,uBACrBA,wBAAA,KAQEA,sBAAA,cAMFA,mDACAA,uBAAA,EAAAgzN,GAAA,yBAAAhzN,oCAQFA,2BAEAA,uBAAA,GAAAizN,GAAA,6CA6EJjzN,6BAEAA,2BAAA,qGACEA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAI,SAAQ,GAK/B3vB,wIAjHQA,sBAAA,GAAAA,uBAAA,YAAAuvB,EAAA4iM,oBAKAnyN,sBAAA,GAGAA,uBAHA,WAAAuvB,EAAA4iM,mBAAAhiN,SAAAsoC,MAAApoC,OAAAkf,EAAA4iM,mBAAAhiN,SAAAsoC,MAAAnoC,MAGAtQ,CADC,cAAAkzN,GAsBFlzN,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,KAAAuvB,EAAA4jM,aAgFLnzN,sBAAA,GAEAA,uBAFA,OAAAuvB,EAAA4iM,mBAEAnyN,CAF2B,aAAAA,wBAAA,KAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,UAE3Btb,CADmE,iBCrGnE,MAAOozN,WAAuC92M,KAKlDzd,YACSstH,EACAp/G,EACAsrI,EACAjoH,EACAyhM,EACCjrF,EACAtzH,EAC6B+H,EACEC,EAGhC+3M,GAEPjmN,QAbOrO,KAAAotH,cACAptH,KAAAgO,eACAhO,KAAAs5I,kBACAt5I,KAAAqxB,sBACArxB,KAAA8yN,aACC9yN,KAAA6nI,KACA7nI,KAAAuU,SAC6BvU,KAAAsc,SACEtc,KAAAuc,WAGhCvc,KAAAs0N,uBAGPt0N,KAAKsc,OAAStc,KAAKgO,aAAau6D,OAChCvoE,KAAKuc,SAAW/S,2CAClB,CAEQyV,aACNjf,KAAKozN,mBAAqB,IAAIjgN,KAAY,CACxCumC,MAAO,IAAItmC,qBAAmB,GAAI,CAChCC,WAAY,CACVC,aAAWC,SACXuO,MAAaC,OAAO,aAAe23B,GAC1B15C,KAAKkoJ,aAAiD,IAAnCloJ,KAAKkoJ,WAAWnsJ,QAAQ29C,OAIxDsrG,aAAc,IAAIrc,YAAU,KAEhC,CAEAl6H,WACEzO,KAAKif,aACLjf,KAAKwgB,eACLxgB,KAAKo0N,WAAap0N,KAAK8yN,WAAW1B,gBAClCpxN,KAAKozN,mBAAmB1gN,IAAI,SAASiN,SAAS3f,KAAKs0N,sBAAsB56K,OACzE,MAAMsrG,EAAehlJ,KAAKozN,mBAAmB1gN,IAAI,gBAE7C1S,KAAKs0N,sBAAsBtvE,cAC7BhlJ,KAAKs0N,qBAAqBtvE,aAAah+I,QAASkqD,IAC9C8zF,EAAa9oJ,KAAK8D,KAAKu0N,cAAcrjK,GAAO,GAI3ClxD,KAAKs0N,qBAGRt0N,KAAKsc,OAAStc,KAAKgO,aAAauR,KAFhCvf,KAAK+zN,eAIT,CAEAnjM,SACE5wB,KAAK8yN,WAAWlC,SAAS5wN,KAAKozN,mBAAmB9yN,OACjDN,KAAKwwD,YACP,CAEA,gBAAIw0F,GACF,OAAOhlJ,KAAKozN,mBAAmB1gN,IAAI,eACrC,CAEA6hN,cAAcC,GACZ,OAAO,IAAIhsF,YAAU,CACnBmrF,IAAK,IAAIxjG,cAAYqkG,GAAYb,KAAO,KAAMrgN,aAAWC,WAE7D,CAEAwgN,gBACE/zN,KAAKglJ,aAAa9oJ,KAAK8D,KAAKu0N,iBAC5Bv0N,KAAK6nI,GAAGl+C,eACV,CAEAqqI,2BACEh0N,KAAKwwD,aACLxwD,KAAKuU,OAAOC,SAAS,CAAC,GAAGo+M,MAAkBv0L,KAASne,UACtD,CAEAqzM,iBAAiBrsN,GACf,MAAM89I,EAAehlJ,KAAKozN,mBAAmB1gN,IAAI,gBAE7CxL,GAAS,GAAKA,EAAQ89I,EAAa5pJ,QACrC4pJ,EAAarxI,SAASzM,GAGxBlH,KAAK6nI,GAAGl+C,eACV,iDA3FW0qI,IAA8BpzN,8BAAAC,kBAAAD,8BAAA8H,MAAA9H,8BAAA+H,MAAA/H,8BAAAgI,KAAAhI,8BAAAiI,IAAAjI,iFAAAkI,UAAAlI,8BAanB,SAAQ,GAAAA,8BACR,WAAU,GAAAA,8BAEtB,uBAAsB,+DAhBrBozN,GAA8BjrN,UAAA,kCAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,yBDf9B5C,2EAAA,kCAAyB,qCAgBzBA,sFACD,+CAYqBA,sGA8DRA,mGAEX,uCAGU,0CAKCA,sGAEX,uCAGyB,0CAxDZA,8GASNA,+GASoBA,42CA1EzCvI,2BAAA,kBAGWA,uBAAA,oCAAmBwC,EAAA+sD,YAAY,GACxCvvD,2BAAA,yBAAkBA,uBAAA,gCAAewC,EAAA+sD,YAAY,GAC3CvvD,2BAAA,WAAAA,mBAAA,0EAEFA,6BACAA,uBAAA,EAAAwzN,GAAA,yBAuHFxzN,kCA7HWA,uBADA,OAAAwC,EAAAktD,KACA1vD,CADa,0BAKXA,sBAAA,GAAAA,8CAAA,IAAAwC,EAAA6Y,QAAArb,CAAoDA,wBAAA,IAAAwC,EAAA8Y,sCAEhDtb,+CAAA,gBAAAwC,EAAA4iB,0nBERjBplB,oCAAA,GACEA,2BAAA,gBASEA,uBADA,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAaM,EAAAmzN,gBAAe,EAC5BzzN,CAD6B,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACVM,EAAAmL,gBAAA9B,GAAuB,GAE1C3J,2BAAA,WACEA,sBAAA,wBAQJA,sHAjBEA,wBAIAA,uBAJA,OAAA0zN,EAIA1zN,CAJkB,UAAAM,EAAAsL,QAIlB5L,CAFmB,iBASfA,sBAAA,GAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAA0K,UAEzBhL,CADuB,eAAAM,EAAAwL,eCKxB,MAAM6nN,GAAa,mBAOpB,MAAOC,GAeX/0N,YACUoO,EACDF,EACC8kN,EACA/0M,EACA8J,GAJA7nB,KAAAkO,qBACDlO,KAAAgO,eACChO,KAAA8yN,aACA9yN,KAAA+d,cACA/d,KAAA6nB,eAbV7nB,KAAAiM,UAAY,IAAIqC,IAKhBtO,KAAAwrI,SAAW,IAAIh9H,kBAA4B,IAUzCxO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBumG,GAC7D,CAEA3mG,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,cACN2F,KAAM,WACNC,SAAU,GAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,OACNC,SAAU,GAEZ,CACEhV,KAAMoP,uBACN2F,KAAM,gBACNC,SAAU,GAEZ,CACEhV,KAAMoP,gBACN2F,KAAM,cACNga,mBAAoBC,IAAa7Q,KACjCnJ,SAAU,GAEZ,CACEhV,KAAMoP,2BACN2F,KAAM,wBACNC,SAAU,GAEZ,CACEhV,KAAMoP,qBACN2F,KAAM,mBACNC,SAAU,GAEZ,CACEhV,KAAMoP,oBACN2F,KAAM,kBACNC,SAAU,IAGdpP,KAAK+M,aAAe,CAClB,CACE3S,KAAM,GAAG4F,KAAKgO,aAAakS,SAC3BpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZC,WAAYA,IAAM,CAAC,IAAImsM,MAAcv2L,KAASne,SAAUlgB,KAAK0pB,WAC7DhB,aAAezc,IAAiCA,EAAU0c,oBAE5D,CACEvuB,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZJ,WAAYA,IAAM,CAChB,IAAImsM,MAAcv2L,KAAS9e,OAC3Bvf,KAAK0pB,UACL1pB,KAAKiM,UAAUmc,QAAQhuB,OAG3B,CACE0S,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAK80N,mBAClB16N,KAAM4F,KAAKgO,aAAakb,SAI5BlpB,KAAK+0N,WAAa/0N,KAAKwrI,SAASx8H,QAC9BC,aAAU,IACRjP,KAAK8yN,WAAW3B,WAAWnxN,KAAK0pB,WAAW1a,QACzCwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,UAKpB,CAEAsxM,gBACE10N,KAAKwrI,SAAS/7H,KAAK,GACrB,CAEA/C,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEA6oN,mBACE,MAAMzgN,EAAarU,KAAKiM,UAAUmc,QAAQ/T,WACpC+yG,EAAWpnH,KAAKiM,UAAUmc,QAAQg/F,SAClChtH,EAAO4F,KAAKiM,UAAUmc,QAAQhuB,KAEpC4F,KAAK4qB,SAAW5qB,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvEI,gBAAiB1hB,qBACjB2hB,UAAW,CAAC,UAAUi8F,MAAahtH,oBAAuBia,KAC1D+W,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,GAAG6vM,MAAcv2L,KAASnV,SAAU,CACzDk+F,SAAUA,IAEZpiG,KAAMhlB,KAAK8yN,WAAWtB,YAAYn9M,EAAY+yG,MAGtD,iDA9HWytG,IAAqB5zN,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,IAAA/H,8BAAAgI,KAAAhI,8BAAAiI,MAAA,4DAArB2rN,GAAqBzrN,UAAA,wBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,ihBD5BlCrI,uBAAA,EAAA+zN,GAAA,0DAAe/zN,uBAAA,OAAAA,wBAAA,IAAAwC,EAAAsxN,uFEAf9zN,oCAAA,GACEA,sBAAA,uGACEA,+CAAA,YAAA+K,EAAAC,UAAAoI,aCME,MAAO4gN,sDAAuB,4DAAvBA,GAAuB7rN,UAAA,0BAAA+C,OAAA,CAAAF,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,OAAA,6BAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GDRpCrI,uBAAA,EAAAi0N,GAAA,2BAAej0N,uBAAA,OAAAwC,EAAAwI,oFEwBXhL,sBAAA,qEAEEA,uBAAA,YAAAM,EAAA+K,8EAxBNrL,oCAAA,GACEA,2BAAA,gBAUEA,uBAFA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EAExC3J,CAFyC,qBAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC5BM,EAAA4zN,eAAAvqN,GAAsB,EACnC3J,CADoC,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACjBM,EAAAmL,gBAAA9B,GAAuB,GAE1C3J,2BAAA,WACEA,sBAAA,wBAOFA,2BACAA,uBAAA,EAAAm0N,GAAA,6BAIFn0N,oHAtBEA,wBAIAA,uBAJA,OAAAo0N,EAIAp0N,CAJoB,UAAAM,EAAAsL,QAIpB5L,CAFmB,iBAUfA,sBAAA,GAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAA0K,UAEzBhL,CADuB,eAAAM,EAAAwL,eCOxB,MAAMuoN,GAAe,qBAQtB,MAAOC,WAAgCxnN,IAY3CjO,YACUoO,EACDF,EACC8kN,EACAjrM,EACA9J,EACA6U,GAERvkB,QAPQrO,KAAAkO,qBACDlO,KAAAgO,eACChO,KAAA8yN,aACA9yN,KAAA6nB,eACA7nB,KAAA+d,cACA/d,KAAA4yB,aAVV5yB,KAAAwrI,SAAW,IAAIh9H,kBAA8B,IAC7CxO,KAAAiM,UAAY,IAAIqC,IAYdtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBumG,GAC7D,CAEA3mG,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,aACNC,SAAU,GAEZ,CACEhV,KAAMoP,+BACN2F,KAAM,YACNC,SAAU,IAGdpP,KAAK+M,aAAe,CAClB,CACE3S,KAAM,GAAG4F,KAAKgO,aAAakS,iBAC3BpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZC,WAAYA,IAAMzoB,KAAK4yB,WAAWG,YAClCrK,aAAezc,IAAiCA,EAAU0c,oBAE5D,CACEvuB,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZJ,WAAYA,IACVzoB,KAAKiM,UAAUmc,SAAWpoB,KAAK4yB,WAAWQ,QAAQpzB,KAAKiM,UAAUmc,QAAQ/T,aAE7E,CACEvH,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAKw1N,wBAClBp7N,KAAM4F,KAAKgO,aAAakb,SAI5BlpB,KAAKy1N,aAAez1N,KAAKwrI,SAASx8H,QAChCC,aAAU,IACRjP,KAAK8yN,WAAW3zM,gBAAgBnQ,QAC9BwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,UAKpB,CACA+xM,iBACEn1N,KAAKwrI,SAAS/7H,KAAK,GACrB,CAEA/C,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,CAEAupN,wBACE,MAAMnhN,EAAarU,KAAKiM,UAAUmc,QAAQ/T,WAE1CrU,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDI,gBAAiB1hB,mBACjB2hB,UAAW,CAAC9W,GACZ+W,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,GAAGuwM,MAAgBj3L,KAASnV,SAAU,CAC3D7U,WAAYA,IAEd2Q,KAAMhlB,KAAK8yN,WAAW5B,cAAc78M,MAG5C,iDA7FWkhN,IAAuBt0N,8BAAAC,KAAAD,8BAAA8H,MAAA9H,8BAAA+H,IAAA/H,8BAAAgI,MAAAhI,8BAAAiI,KAAAjI,8BAAAkI,KAAA,4DAAvBosN,GAAuBnsN,UAAA,0BAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,kKAFvB,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IAAkB2lN,OAAgBr0N,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,qYAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,IDhC5FrI,sBAAA,iBAEAA,uBAAA,EAAAy0N,GAAA,2DAAez0N,+CAAA,OAAAA,wBAAA,IAAAwC,EAAAgyN,2EEOT,MAAOE,GAKXlnN,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,oBACN2F,KAAM,OACNC,SAAU,GAGhB,iDAbWumN,GAA8B,4DAA9BA,GAA8BvsN,UAAA,iCAAA+C,OAAA,CAAAF,UAAA,aAAAzB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WCF9B5C,6RADXvI,2BANF,eAMEA,CADD,eAIGA,sBAAA,gBASJA,oCAdEA,uBAAA,kBAMIA,sBAAA,GAIAA,uBAJA,aAAAwC,EAAAwI,UAAA,KAAAxI,EAAAwI,UAAApD,OAAA8a,MAIA1iB,CAJgC,UAAAwC,EAAAoJ,QAIhC5L,CAFmB,4GCUvBA,sBAAA,4EAEEA,uBAAA,YAAAM,EAAA+K,8EAtBJrL,oCAAA,GACEA,2BAAA,gBAUEA,uBAFA,0BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAAkBM,EAAAiL,eAAA5B,GAAsB,EAExC3J,CAFyC,uBAAAA,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBAC5BM,EAAAq0N,kBAAiB,EAC9B30N,CAD+B,2BAAA2J,GAAA3J,0BAAAsL,GAAA,MAAAhL,EAAAN,4BAAA,OAAAA,wBACZM,EAAAmL,gBAAA9B,GAAuB,GAE5C3J,2BAAA,WACEA,sBAAA,wBAKFA,2BACAA,uBAAA,EAAA40N,GAAA,oCAIF50N,oHApBIA,wBAIAA,uBAJA,OAAA60N,EAIA70N,CAJoB,UAAAM,EAAAsL,QAIpB5L,CAFmB,iBASjBA,sBAAA,GAEAA,uBAFA,aAAAM,EAAAuL,WAEA7L,CAFyB,YAAAM,EAAA0K,UAEzBhL,CADuB,eAAAM,EAAAwL,yCAe3B9L,2BAAA,eAIEA,mBAAA,GACFA,qDADEA,uDAAA,UAAA80N,EAAA,KAAAA,EAAA37N,KAAA,+BAJF6G,uBAAA,EAAA+0N,GAAA,yCACoB/0N,uBAAA,gBAAAgsJ,EAAA,KAAAA,EAAApkJ,OAAAilC,SCTf,MAAMmoL,GAAmB,wBAQ1B,MAAOC,WAAoCnoN,IAY/CjO,YACUyU,EACAqe,EACA1kB,EACDF,EACC8kN,EACAjrM,EACA9J,GAER1P,QARQrO,KAAAuU,SACAvU,KAAA4yB,aACA5yB,KAAAkO,qBACDlO,KAAAgO,eACChO,KAAA8yN,aACA9yN,KAAA6nB,eACA7nB,KAAA+d,cAVV/d,KAAAwrI,SAAW,IAAIh9H,kBAAkC,IACjDxO,KAAAiM,UAA8B,IAAIqC,IAYhCtO,KAAK8M,WAAa9M,KAAKkO,mBAAmBW,iBAAiBumG,GAC7D,CAEA3mG,WACEzO,KAAK6M,QAAU,CACb,CACEzS,KAAMoP,gBACN2F,KAAM,kBACNC,SAAU,GAEZ,CACEhV,KAAMoP,2BACN2F,KAAM,sBACNC,SAAU,GAEZ,CACEhV,KAAMoP,kBACN2F,KAAM,gBACNE,aAAcrP,KAAKm2N,eACnB/mN,SAAU,GAEZ,CACEhV,KAAMoP,6BACN2F,KAAM,2BACNC,SAAU,IAIdpP,KAAK+M,aAAe,CAClB,CACE3S,KAAM,GAAG4F,KAAKgO,aAAakS,oBAC3BpT,WAAY,SACZyb,KAAMvW,KAAMwW,IACZQ,MAAOA,IAAMhpB,KAAKuU,OAAOC,SAAS,CAACxU,KAAK4yB,WAAWG,cACnDrK,aAAezc,IAAiCA,EAAU8mE,cAE5D,CACE34E,KAAM4F,KAAKgO,aAAauR,KACxBzS,WAAY,SACZyb,KAAMvW,KAAM6W,KACZG,MAAOA,IACLhpB,KAAKuU,OAAOC,SAAS,CACnBxU,KAAK4yB,WAAWQ,QAAQ7zB,OAAOS,KAAKiM,UAAUmc,QAAQguM,qBAG5D,CACEh8N,KAAM4F,KAAKgO,aAAakb,OACxBpc,WAAY,SACZyb,KAAMvW,KAAM+W,QACZC,MAAOA,IAAMhpB,KAAKgzN,oBAItBhzN,KAAKq2N,aAAer2N,KAAKwrI,SAASx8H,QAChCC,aAAU,IACRjP,KAAK8yN,WAAWzB,kBAAkBriN,QAChCwV,cAAW,KACTxkB,KAAKwF,QAAQ+b,SAAK,EACX6B,MAAG,UAKpB,CAEAwyM,kBACE51N,KAAKwrI,SAAS/7H,KAAK,GACrB,CAEAujN,kBACE,MAAM1rG,EAAgBtnH,KAAKiM,UAAUmc,QAAQguM,gBAE7Cp2N,KAAK6nB,aAAagD,KAAKC,IAAkC,CACvDI,gBAAiB1hB,4CACjB2hB,UAAW,CAACm8F,GACZl8F,uBAAwBA,IACtBprB,KAAK+d,YAAY8G,mBAAmB,CAClCC,KAAM,IAAIC,IAAa,GAAGkxM,MAAoB53L,KAASnV,SAAU,CAC/Do+F,cAAeA,IAEjBtiG,KAAMhlB,KAAK8yN,WAAWZ,kBAAkB5qG,MAGhD,CAEA56G,gBAAgBT,GACdjM,KAAKiM,UAAYA,CACnB,iDA7GWiqN,IAA2Bj1N,8BAAAC,UAAAD,8BAAA8H,KAAA9H,8BAAA+H,KAAA/H,8BAAAgI,MAAAhI,8BAAAiI,IAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA,4DAA3BmwM,GAA2B9sN,UAAA,wBAAAC,UAAA,SAAAC,EAAA7F,MAAA,EAAA6F,2KAF3B,CAAC,CAAEoG,QAASC,IAAmBC,SAAU,IAAID,IAAkBsmN,OAAoBh1N,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,scAAAC,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,ID/BhGrI,sBAAA,iBAEAA,uBAAA,EAAAq1N,GAAA,oDA2BAr1N,uBAAA,EAAAs1N,GAAA,yBAAAt1N,2CA3BeA,+CAAA,OAAAA,wBAAA,IAAAwC,EAAA4yN,0NEgCLp1N,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAAu1N,GAAA,kHAEGv1N,uBAAA,OAAAuvB,EAAAimM,QAAApmN,UAAA,aAAAqgB,EAAA,qCA4BHzvB,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAAy1N,GAAA,kHAEGz1N,uBAAA,OAAAuvB,EAAAimM,QAAApmN,UAAA,YAAAqgB,EAAA,qCAkDLzvB,2BAAA,aAAAA,mBAAA,MAM8EA,4FA3C5EA,2BALJ,WAKIA,CAJoE,WAIpEA,CADkB,uBAClBA,wBAAA,MAIIA,2BADF,WACEA,CAD2B,cAOzBA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAmmM,0BAAyB,GANpC11N,2BAaAA,2BAAA,wBACiBA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAmmM,0BAAyB,gCAEjD11N,sBAAA,YAIFA,yDAEAA,2BAAA,wBACiBA,uBAAA,mBAAAA,0BAAA01D,GAAA,MAAAnmC,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAomM,4BAA2B,gCAEnD31N,sBAAA,YAKJA,6BACFA,wBACFA,6BACAA,uBAAA,GAAA41N,GAAA,6CAQA51N,sBAAA,UACFA,wEAhDOA,+CAAA,gBAAAA,4BAAA,EAAAK,KAWGL,sBAAA,GAEAA,uBAFA,cAAAuvB,EAAA8jM,qBAAA,KAAA9jM,EAAA8jM,qBAAA56K,MAEAz4C,CAFqC,WAAAuvB,EAAAimM,QAAArlN,SAAA0lN,gBAAAxlN,OAAAkf,EAAAimM,QAAArlN,SAAA0lN,gBAAAvlN,OAAAif,EAAAimM,QAAArlN,SAAA0lN,gBAAAz+M,SA8B1CpX,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAimM,QAAA/jN,IAAA,mBAAA0F,SAAA,aAAAoY,EAAAimM,QAAArlN,SAAA0lN,gBAAAz+M,oCAiCGpX,2BAAA,eACqCA,mBAAA,GAAwBA,qDAArDA,uBAAA,QAAA81N,EAAAX,iBAA6Bn1N,sDAAA81N,EAAAX,yCAGrCn1N,2BAAA,aAAAA,mBAAA,MAGwBA,4FAQ1BA,2BAAA,wBAIEA,uBAAA,mBAAAA,0BAAA6T,GAAA,MAAAw+M,EAAAryN,0BAAA,GAAAiG,MAAAspB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAwmM,uBAAA1D,GAAyB,gCAElCryN,sBAAA,YAIFA,sDA9BEA,2BAhBN,WAgBMA,CAZL,WAYKA,CARH,kBAQGA,CADD,eACCA,mBAAA,MAIAA,2BACAA,uBAAA,EAAAg2N,GAAA,iBAEFh2N,2BACAA,uBAAA,EAAAi2N,GAAA,yBAAAj2N,oCAMFA,2BACAA,2BAAA,YAKEA,uBAAA,EAAAk2N,GAAA,0BAYJl2N,kJAzCIA,+CAAA,gBAAAA,4BAAA,EAAAQ,KAKER,wBAEAA,uBAFA,kBAAAqyN,EAEAryN,CAFqB,UAAAuvB,EAAAimM,QAAArlN,SAAAgmN,YAAAhmN,SAAAkiN,GAAA39M,SAAA6a,EAAAimM,QAAArlN,SAAAgmN,YAAAhmN,SAAAkiN,GAAA/hN,MAErBtQ,CAD8G,cAAAo2N,GAI5Gp2N,+CAAA,cAIqBA,sBAAA,GAAAA,uBAAA,UAAAq2N,GAYzBr2N,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAAktD,KAKGltD,+CAAA,OAAAqyN,EAAA,8BAxCTryN,oCAAA,MAEEA,uBAAA,EAAAs2N,GAAA,6HAEGt2N,+CAAA,OAAAA,wBAAA,aAAAuvB,EAAAimM,QAAA/jN,IAAA,aAAApS,OAAAkwB,EAAA6lM,gFAmDHp1N,2BAFF,WAEEA,CAD0D,eAGlDA,uBAAA,mBAAAA,0BAAA+5I,GAAA,MAAAxqH,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAgnM,sBAAqB,GAFtCv2N,wBAAA,mCAKEA,sBAAA,YAIFA,iFAEAA,2BAAA,eAGEA,uBAAA,mBAAAA,0BAAA+5I,GAAA,MAAAxqH,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAinM,4BAA2B,GAHtCx2N,wBAAA,mCAOAA,sBAAA,YAIAA,wBACFA,qDAyCUA,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAAy2N,GAAA,mHAEGz2N,uBAAA,OAAAuvB,EAAAimM,QAAApmN,UAAA,QAAAqgB,EAAA,8EArBLzvB,2BAFF,WAEEA,CADqB,sBAWnBA,uBAAA,oBAAA2J,GAAA3J,0BAAAi8E,GAAA,MAAA1sD,EAAAvvB,0BAAA,UAAAA,wBAAYuvB,EAAAiyL,cAAA73M,EAAsB,SAAQ,GAV5C3J,wBAAA,MAgBEA,sBAAA,uBACFA,mDACAA,uBAAA,EAAA02N,GAAA,yBAAA12N,oCAQFA,wIAnBIA,wBAKAA,uBALA,kBAKAA,CALqB,QAAA22N,EAAAl3N,OAKrBO,CAJqB,UAAAuvB,EAAAimM,QAAArlN,SAAAzP,MAAAgU,SAAA6a,EAAAimM,QAAArlN,SAAAzP,MAAA4P,MAIrBtQ,CAD0E,cAAA42N,oEAoB5E52N,2BAFF,WAEEA,CADqB,sBAWnBA,uBAAA,oBAAA2J,GAAA3J,0BAAA+6I,GAAA,MAAAxrH,EAAAvvB,0BAAA,UAAAA,wBAAYuvB,EAAAiyL,cAAA73M,EAAsB,SAAQ,GAV5C3J,wBAAA,MAaEA,sBAAA,uBACFA,wBACFA,8EAPIA,wBACAA,uBADA,kBACAA,CADqB,QAAA22N,EAAA7xL,kCA3C3B9kC,oCAAA,GAiCEA,uBA/BA,EAAA62N,GAAA,aA+BA72N,CA9BuB,EAAA82N,GAAA,6FADjB92N,+CAAA,iBAAAuvB,EAAAimM,QAAArlN,SAAA6yI,UAAA3jJ,OA+BAW,+CAAA,iBAAAuvB,EAAAimM,QAAArlN,SAAA6yI,UAAA3jJ,kCA/CVW,oCAAA,GAQMA,2BAPJ,WAOIA,CAPmB,kBAOnBA,CADD,eACCA,mBAAA,MACkBA,2BAClBA,2BAAA,eAAAA,mBAAA,MAGJA,+BACAA,uBAAA,EAAA+2N,GAAA,oIAAe/2N,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,IAAAuvB,EAAAwyL,mFAgEjB/hN,oCAAA,MAMMA,2BAJJ,WAIIA,CAHoC,WAGpCA,CADgC,uBAChCA,wBAAA,MAIAA,sBAAA,cAGAA,wBACFA,6BAMEA,2BALF,WAKEA,CADD,wBAIGA,uBAAA,yBAAAg3N,EAAAh3N,0BAAAqW,GAAApQ,MAAAspB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA0nM,gBAAAD,GAAkB,gCAE3Bh3N,sBAAA,YAQNA,2FA5BOA,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAAQ,KAMIR,sBAAA,GAAAA,uBAAA,kBAAAg3N,GAMPh3N,+CAAA,gBAAAA,4BAAA,EAAAktD,gCAkDFltD,2BAAA,YAAAA,mBAAA,yCACoCA,qDAAvBA,sBAAA,GAAAA,8CAAA,IAAAk3N,uDA+BPl3N,2BAAA,aAGEA,oCAAA,GAAAA,mBAAA,0CACFA,4FA5BRA,oCAFF,KAEEA,CADgE,MAO1DA,2BALJ,WAKIA,CAJoC,WAIpCA,CAD+B,uBAC/BA,wBAAA,MASEA,sBAAA,cAOFA,mDACAA,uBAAA,EAAAm3N,GAAA,yBAAAn3N,oCAOFA,2BAIEA,2BAFF,WAEEA,CAD+B,wBAC/BA,wBAAA,OAMAA,sBAAA,eAKAA,wBACFA,6BAMEA,2BALF,YAKEA,CADD,yBAIGA,uBAAA,yBAAAo3N,EAAAp3N,0BAAAq+I,GAAAp4I,MAAAspB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA8nM,kBAAAD,GAAoB,gCAE7Bp3N,sBAAA,aAKNA,yJA9DYA,+CAAA,gBAAAo3N,GAKLp3N,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAA2vE,KAOD3vE,wBACAA,uBADA,iBAAAuvB,EAAAimM,SAAA,MAAAjmM,EAAAimM,QAAArlN,SAAAmnN,aAAA,KAAA/nM,EAAAimM,QAAArlN,SAAAmnN,aAAAnnN,SAAAinN,GAAAjnN,SAAAqR,QAAA9M,WAAA,MAAA6a,EAAAimM,SAAA,MAAAjmM,EAAAimM,QAAArlN,SAAAmnN,aAAA,KAAA/nM,EAAAimM,QAAArlN,SAAAmnN,aAAAnnN,SAAAinN,GAAAjnN,SAAAqR,QAAAlR,OACAtQ,CAD4J,cAAAu3N,GAQ1Jv3N,sBAAA,GAAAA,uBAAA,iBAAAuvB,EAAAimM,QAAA,KAAAjmM,EAAAimM,QAAArlN,SAAAmnN,aAAAnnN,SAAAinN,GAAAjnN,SAAAqR,QAAA9M,WAAA,MAAA6a,EAAAimM,SAAA,MAAAjmM,EAAAimM,QAAArlN,SAAAmnN,aAAA,KAAA/nM,EAAAimM,QAAArlN,SAAAmnN,aAAAnnN,SAAAinN,GAAAjnN,SAAAqR,QAAAlR,QAaDtQ,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAA2vE,KAgBH3vE,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAAktD,sEAoBNltD,2BAJF,WAIEA,CADD,eAGSA,uBAAA,mBAAAA,0BAAAw3N,GAAA,MAAAjoM,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAAkoM,iBAAgB,GAFjCz3N,wBAAA,mCAKEA,sBAAA,YAKFA,iFACAA,2BAAA,eAAAA,mBAAA,MAGFA,8FA3bNA,oCAAA,GAKIA,2BAJF,cAIEA,CADe,YACfA,mBAAA,0EAGAA,2BAIEA,2BADF,WACEA,CADqB,uBACrBA,wBAAA,KAUEA,sBAAA,eAOFA,mDACAA,uBAAA,GAAA03N,GAAA,yBAAA13N,oCAQFA,2BAIEA,2BADF,YACEA,CADqB,oBAQnBA,uBAAA,oBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,0BAAA,UAAAA,wBAAUuvB,EAAAooM,mBAAkB,GAM5B33N,2BAAA,gBAAAA,mBAAA,MAC6BA,2BAC7BA,2BAAA,gBAAAA,mBAAA,MAEFA,6BACAA,uBAAA,GAAA43N,GAAA,yBAAA53N,oCAQFA,2BA8GAA,uBA3GA,GAAA63N,GAAA,cA2GA73N,CA1GwE,GAAA83N,GAAA,sBA0GxE93N,CApDiE,GAAA+3N,GAAA,cA+EjE/3N,2BAAA,mCAEEA,uBAAA,GAAAg4N,GAAA,uBAoEAh4N,2BAAA,aACEA,sBAAA,oBAMFA,2BAGAA,uBAAA,GAAAi4N,GAAA,uBAqCEj4N,2BADF,YACEA,CADqB,gBAGbA,uBAAA,mBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,0BAAA,UAAAA,wBAASuvB,EAAA2oM,eAAc,GAF/Bl4N,wBAAA,oCAKEA,sBAAA,aAKFA,iFACAA,2BAAA,gBAAAA,mBAAA,OAOFA,6BAIEA,2BADF,YACEA,CADqB,oBASnBA,uBAAA,GAAAm4N,GAAA,iBAGJn4N,6BAsEAA,uBAnEA,GAAAo4N,GAAA,wBAmEAp4N,CAlEkE,GAAAq4N,GAAA,cAqFpEr4N,2BACAA,2BAAA,qGACEA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,0BAAA,UAAAA,wBAAqBuvB,EAAAnU,eAAc,GAKvCpb,4MAhcMA,+CAAA,YAAAuvB,EAAAimM,SAIFx1N,sBAAA,GAAAA,8CAAA,KAAAuvB,EAAAlU,QAAArb,CACFA,wBAAA,KAAAuvB,EAAAjU,sCAUItb,sBAAA,GAEAA,uBAFA,WAAAuvB,EAAA9T,OAEAzb,CAFmB,UAAAuvB,EAAAimM,QAAArlN,SAAAiD,WAAAsB,SAAA6a,EAAAimM,QAAArlN,SAAAiD,WAAA9C,MAEnBtQ,CADoF,cAAAs4N,GAQlFt4N,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAimM,QAAArlN,SAAAiD,WAAAsB,SAAA6a,EAAAimM,QAAArlN,SAAAiD,WAAA9C,OAoBFtQ,sBAAA,GAGAA,uBAHA,UAAAuvB,EAAAimM,QAAArlN,SAAAooN,UAAA7jN,SAAA6a,EAAAimM,QAAArlN,SAAAooN,UAAAjoN,MAGAtQ,CAHkF,cAAAw4N,EAGlFx4N,CAF6B,WAAAuvB,EAAA9T,QAwB3Bzb,sBAAA,GAAAA,uBAAA,4BAAAuvB,EAAAimM,QAAA/jN,IAAA,aAAApS,OAsDsBW,+CAAA,UAAAuvB,EAAA4mM,YAAAhmN,UAqDtBnQ,+CAAA,gBAAAuvB,EAAAimM,QAAA/jN,IAAA,aAAApS,OA4BWW,sBAAA,GAAAA,uBAAA,OAAAy4N,EAAAzpN,WAsEXhP,sBAAA,GAGAA,uBAHA,aAGAA,CAHc,0BAGdA,CAF2B,gBAE3BA,CADiB,SAOOA,+CAAA,UAAAuvB,EAAAu0H,WAAA3zI,UAkECnQ,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAmpM,eAOD14N,+CAAA,UAAAuvB,EAAA+nM,aAAAnnN,UAmEzBnQ,+CAAA,OAAAuvB,EAAAimM,QAAA/jN,IAAA,SAAApS,MAAA,GAAAkwB,EAAAimM,QAAA/jN,IAAA,cAAApS,MAAAikB,eAAAiM,EAAAs/L,WAAAC,SAAAv/L,EAAAimM,QAAA/jN,IAAA,cAAApS,MAAAikB,eAAAiM,EAAAs/L,WAAAE,QAqBH/uN,wBACAA,uBADA,OAAAuvB,EAAAimM,QACAx1N,CADgB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,sCAlcxBtb,2BAAA,YAGEA,uBAAA,EAAA24N,GAAA,yBAqcF34N,qEAvcKA,uBAAA,gBAAAA,4BAAA,EAAAyI,KAEYzI,+CAAA,gBAAAuvB,EAAAnK,UC2CX,MAAOwzM,WAAgCt8M,KAmB3Czd,YACU2iJ,EACA3kI,EACDg1M,EACA9kN,EACCI,EACAyZ,EACA+6H,EACAruI,EACAszH,EACAnqH,GAERrP,QAXQrO,KAAAyiJ,cACAziJ,KAAA8d,cACD9d,KAAA8yN,aACA9yN,KAAAgO,eACChO,KAAAoO,cACApO,KAAA6nB,eACA7nB,KAAA4iJ,qBACA5iJ,KAAAuU,SACAvU,KAAA6nI,KACA7nI,KAAA0d,QAxBV1d,KAAA25N,cAA0B,GAC1B35N,KAAA8vN,WAAaA,GACb9vN,KAAA6jN,eAA2B,GAC3B7jN,KAAA8jN,cAA0B,GAG1B9jN,KAAA+R,MAAQC,KAERhS,KAAA0c,QAAS,EAoBP1c,KAAKuc,SAAW/S,mBAChBxJ,KAAKywN,WAAazwN,KAAK8yN,WAAWrC,UACpC,CAEAhiN,WACEzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAKq2N,aAAer2N,KAAK8yN,WAAWzB,kBAChCrxN,KAAKuU,OAAOyK,IAAIK,WAAW,IAAIi2M,MAAgBj3L,KAAS9e,UAC1Dvf,KAAK0c,QAAS,GAEhB1c,KAAK8yN,WAAWrC,WAAW9hN,UAAWpM,IACpCvC,KAAKs0N,qBAAuB/xN,EAC5BvC,KAAKy2N,QAAQ/jN,IAAI,mBAAmBiN,SAASpd,GAAMm3C,MAAK,GAE1D15C,KAAKgjN,mBAAkB5iM,YAAS,CAC9B2lB,MAAO/lC,KAAKyiJ,YAAYx8G,cACxBvlC,OAAQV,KAAKyiJ,YAAY19G,cACxB/1B,QACD9R,OAAI,EAAG6oC,QAAOrlC,aAAM,CAClBqlC,MAAOA,EAAM7oC,IAAKonC,KAAkBpqC,QAASoqC,EAAK52B,YAClDhN,OAAQA,EAAOxD,IAAKyE,KAAqBzH,QAASyH,SAItD3B,KAAKif,aACDjf,KAAK0c,QACP1c,KAAKsc,OAAStc,KAAKgO,aAAauR,KAChCvf,KAAKy2N,QAAQ/jN,IAAI,cAAcuN,UAC/BjgB,KAAKy2N,QAAQ/jN,IAAI,aAAauN,UAC9BjgB,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAKqU,WAAamL,EAAOnL,aAG3BrU,KAAK8yN,WAAWzqL,WAAWroC,KAAKqU,YAAY1F,UAAWwT,IACrDniB,KAAK85N,gBAAkB33M,EAEvB,MAAM43M,EAAgB/5N,KAAK85N,gBAAgB/0E,WACrCi1E,EAAqBh6N,KAAKy2N,QAAQ/jN,IAAI,cACtCunN,EAAmBj6N,KAAKy2N,QAAQ/jN,IAAI,eACpCwnN,EAAel6N,KAAK85N,gBAAgBvB,aACpC4B,EAAuBn6N,KAAKy2N,QAAQ/jN,IAAI,gBAE9C,GAAI1S,KAAK85N,gBAAgBM,WAAY,CACnC,MAAMC,EAAqBr6N,KAAK85N,gBAAgBM,WAE1CE,GADiB,IAAI5oH,MACanpG,UAAU8xN,GAClDr6N,KAAKy2N,QAAQ/jN,IAAI,cAAciN,SAAS26M,GAAoB,GAC9D,CAMA,GALIP,GAAe3+N,QACjB2+N,EAAc/yN,QAASuzN,IACrBP,EAAmB99N,KAAK,IAAIi0H,cAAYoqG,GAAI,GAG5Cv6N,KAAK85N,gBAAgBN,WAAarJ,mBACpCnwN,KAAKs0N,qBAAuBt0N,KAAK85N,iBAAiBhD,gBAClD92N,KAAKy2N,QAAQ/jN,IAAI,mBAAmBiN,SAAS3f,KAAKs0N,qBAAqB56K,YAAK,GAG1E15C,KAAK85N,gBAAgBU,qBACrBx6N,KAAK85N,gBAAgBU,oBAAoBp/N,OAAS,EAClD,CACA4E,KAAK85N,gBAAgBU,oBAAoBxzN,QAASyzN,IAChDR,EAAiB/9N,KAAK,IAAIi0H,cAAYsqG,EAAW9G,KAAI,GAEvD,MAAM+G,EAAgB16N,KAAK85N,gBAAgBU,oBAAoBt9N,IAC5Du9N,GAA2BA,EAAW9G,KAEzCsG,EAAiBt6M,SAAS+6M,EAC5B,CAEF16N,KAAKy2N,QAAQ/jN,IAAI,cAAciN,SAAS3f,KAAK85N,gBAAgBzlN,YAC7DrU,KAAKy2N,QAAQ/jN,IAAI,aAAaiN,SAAS3f,KAAK85N,gBAAgBN,WACxDx5N,KAAK85N,gBAAgB71E,UAAUx4G,OACjCzrC,KAAKy2N,QAAQ/jN,IAAI,SAASiN,SAAS3f,KAAK85N,gBAAgB71E,UAAUx4G,OAEhEyuL,GAAc9+N,QAChB8+N,EAAalzN,QAAS2zN,IACpBR,EAAqBj+N,KACnB8D,KAAK8d,YAAYqZ,MAAM,CACrB1U,QAAS,CAACk4M,EAAWl4M,QAASnP,aAAWC,UACzCmxG,YAAa,CAACi2G,EAAWj2G,aAAe,MACxC,EAEL,KAIL1kH,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAKgjN,mBAAkB5iM,YAAS,CAC9B2lB,MAAO/lC,KAAKyiJ,YAAYx8G,cACxBvlC,OAAQV,KAAKyiJ,YAAY19G,cACxB/1B,QACD9R,OAAI,EAAG6oC,QAAOrlC,aAAM,CAClBqlC,MAAOA,EAAM7oC,IAAKonC,KAAkBpqC,QAASoqC,EAAK52B,YAClDhN,OAAQA,EAAOxD,IAAKyE,KAAqBzH,QAASyH,UAIxD3B,KAAKukN,YAAcvkN,KAAKoO,YAAYM,SACpC1O,KAAK25N,cAAgB1nN,OAAOpJ,OAAOinN,IACnC9vN,KAAKwgB,eACAxgB,KAAK0c,QAAQ1c,KAAK44N,kBACzB,CAEA35M,aACEjf,KAAKy2N,QAAUz2N,KAAK8d,YAAYqZ,MAAM,CACpC9iB,WAAY,IAAI87G,cAAY,GAAI,CAC9B98G,WAAY,CAACC,aAAWC,YAE1BimN,UAAW,CACTrJ,mBACA,CACE98M,WAAY,CAACC,aAAWC,YAG5BujN,gBAAiB,CAAC,MAClB7yE,UAAW,CAAC,IACZl+G,MAAO,CAAC,IACRpkC,MAAO,CACL,KACA,CACEmgB,MAAaG,WAAW,CACtBgiI,UAAW,YAIjBx4G,MAAO,CAAC,GACRs5G,WAAY,IAAIpc,YAAU,IAC1ByuF,YAAa,IAAIzuF,YAAU,IAC3ByxF,WAAY,IAAIhnN,qBACd08M,GAAWC,QAAQx9I,OAAO,GAAGC,cAAgBs9I,GAAWC,QAAQ70N,MAAM,IAExEq9N,aAAc,IAAI5vF,YAAU,MAG9B3oI,KAAKoO,YAAYM,SAASC,UAAWD,IACnC1O,KAAK8sJ,gBAAkBp+I,EAAOuB,UAC9BjQ,KAAKy2N,QAAQ/jN,IAAI,aAAaiN,SAAS3f,KAAK8sJ,gBAAkBsjE,QAAiB,GAAE,EAErF,CAEA3N,cAAc5vJ,EAAY0F,GACpBA,IAAU63J,QAAgBpwN,KAAK8jN,cAAgBjxJ,EAAM31D,IAAKonC,GAAcA,EAAKpqC,SAC5E8F,KAAK6jN,eAAiBhxJ,EAAM31D,IAAKyE,GAAeA,EAAMzH,QAC7D,CAEA0+N,mBACE,MAAMgC,EAAW56N,KAAKy2N,QAAQ/jN,IAAI,aAAapS,MACzCu6N,EAAwB76N,KAAKy2N,QAAQ/jN,IAAI,mBACzCooN,EAA2B96N,KAAKy2N,QAAQ/jN,IAAI,eAGlD,GAAIkoN,IAAazK,mBACX2K,GACFA,EAAyBvnI,QAEvBsnI,IACFA,EAAsBl5M,cAAcrO,aAAWC,UAC/CsnN,EAAsBh5M,0BAEpBi5M,IACFA,EAAyBl5M,kBACzBk5M,EAAyBj5M,+BAAsB,GAGxC+4M,IAAazK,QAAe,CACrC,MAAMv8M,EAAU,IAAIu8G,cAAY,KAAM78G,aAAWC,UACjDunN,EAAyB5+N,KAAK0X,GAC1BinN,IACFA,EAAsBl7M,SAAS,IAC/B3f,KAAKs0N,qBAAuB,CAAE56K,MAAO,GAAIsrG,aAAc,KAEzD61E,EAAsBt1M,UAAU,MAChCu1M,EAAyBn5M,cAAcrO,aAAWC,UAE9CsnN,IACFA,EAAsBj5M,kBACtBi5M,EAAsBh5M,yBAE1B,MACMi5M,IACFA,EAAyBl5M,kBACzBk5M,EAAyBvnI,QACzBunI,EAAyBj5M,yBAG/B,CAEAxF,eACE,MAAMw+M,EAAwB76N,KAAKy2N,QAAQ/jN,IAAI,mBACzCkoN,EAAW56N,KAAKy2N,QAAQ/jN,IAAI,aAAapS,MAEzCuI,EAAS7I,KAAKy2N,QAAQxtE,cACtBzoH,EAAsB,CAC1ByjH,UAAW,IAEb,OAAQp7I,EAAOo7I,WACb,KAAKmsE,QACCvnN,EAAOk9B,MAAS3qC,OAAS,IAC3BolC,EAAYyjH,UAAal+G,MAAW/lC,KAAK8jN,eAE3C,MACF,KAAKsM,SACH5vL,EAAYyjH,UAAatiJ,MAAW3B,KAAK6jN,eAK7C,GAAI+W,IAAazK,qBAA6B0K,EAAsBv6N,MAGlE,OAFAu6N,EAAsBt1M,UAAU,CAAEhS,UAAU,SAC5CvT,KAAKy2N,QAAQsE,mBAGX/6N,KAAK0c,OACP1c,KAAKg7N,kBAAkB38L,KAAS9e,MAEhCvf,KAAKg7N,kBAAkB38L,KAASne,OAEpC,CAEA86M,kBAAkBC,GAChB,MAAMt2M,EAAe3kB,KAAK4kB,eACpBwZ,EAAYp+B,KACZqU,EAAarU,KAAKy2N,QAAQ/jN,IAAI,cAAcpS,MAElDN,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,GAAGuwM,MAAgB2F,IAAW,CAAE5mN,eACvD2Q,KAAMhlB,KAAK8yN,WAAWnsD,cAAchiJ,KAErChW,UAAU,CACTyW,SAAUA,KACRplB,KAAKuU,OAAOC,SAAS,CAAC8gN,IAAa,EAErC/zM,MAAOA,KACL6c,EAAUq4L,QAAQlxM,UAAU,CAAEE,gBAAgB,GAAM,GAG5D,CAEQb,eACN,MAAM/b,EAAS7I,KAAKy2N,QAAQxtE,cACtBiyE,EAAe/oN,cAAYnS,KAAKy2N,QAAQn2N,OACxCopB,EAAY1pB,KAAKy2N,QAAQ/jN,IAAI,eAAepS,MAC5Cs6N,EAAW56N,KAAKy2N,QAAQ/jN,IAAI,cAAcpS,MAS1C66N,GAP6Bn7N,KAAKs0N,sBAAsBtvE,cAAgB,IAC3E3gI,OAAQ6sC,GAA4BA,EAAOyiK,KAC3Cz2N,IAAKg0D,KACJyiK,IAAKziK,EAAOyiK,IACZyH,WAAYlL,eAGkBhzN,IAAKg0D,KACrCkqK,WAAYlL,YACZyD,IAAKziK,EAAOyiK,OAGR0H,EAAiB,CACrB3hL,MAAO15C,KAAKs0N,sBAAsB56K,MAClCsrG,aAAcm2E,GAGVx2M,EAAoC,CACxC22M,iBAAkB,CAChBC,cnB5MwB,mBmB6MxBlnN,WAAYqV,EACZ8vM,UAAWoB,IAIXS,GAAkBA,EAAer2E,aAAa5pJ,OAAS,IACzDupB,EAAa22M,iBAAiBxE,gBAAkBuE,GAE9CH,EAAa9D,aAAah8N,OAAS,IACrCupB,EAAa22M,iBAAiBd,oBAAsBU,EAAa9D,YAAYl6N,IAC1Eg0D,KACCsqK,YAAatL,YACbyD,IAAKziK,MAKX,MAAM1wB,EAAcxgC,KAAKy7N,iBAAiB5yN,GAC1C,OAAI23B,IACF7b,EAAa22M,iBAAiBr3E,UAAYzjH,GAGxC06L,EAAan2E,YAAY3pJ,OAAS,IACpCupB,EAAa22M,iBAAiBv2E,WAAam2E,EAAan2E,YAGtDm2E,EAAa3C,cAAcn9N,OAAS,IACtCupB,EAAa22M,iBAAiB/C,aAAe2C,EAAa3C,aAAar7N,IACpEw+N,GACQA,EAAch3G,YAAcg3G,EAAgB,CAAEj5M,QAASi5M,EAAcj5M,WAK9Ey4M,EAAad,YAAcc,EAAad,WAAW71M,gBAAkBurM,GAAWC,UAClFprM,EAAa22M,iBAAiBlB,WAAac,EAAad,WAAW71M,eAGjE22M,EAAaj3E,UAAUx4G,QACzB9mB,EAAa22M,iBAAiB7vL,MAAQyvL,EAAaj3E,UAAUx4G,OAGxD9mB,CACT,CAEA82M,iBAAiB5yN,GACf,MAAM23B,EAAc,CAClByjH,UAAW,IAKb,OAFAzjH,EAAYyjH,UAAax4G,MAAW5iC,EAAO4iC,MAEnC5iC,EAAOo7I,WACb,IAAK,QACCp7I,EAAOk9B,MAAS3qC,OAAS,IAC3BolC,EAAYyjH,UAAal+G,MAAW/lC,KAAK8jN,cACzCtjL,EAAYyjH,UAAax4G,MAAW5iC,EAAO4iC,OAE7C,MACF,IAAK,QACHjL,EAAYyjH,UAAatiJ,MAAW3B,KAAK6jN,eACzCrjL,EAAYyjH,UAAax4G,MAAW5iC,EAAO4iC,MAI/C,OAAOjL,EAAYyjH,SACrB,CAEA0yE,0BACE32N,KAAK6nB,aAAagD,KAAKwpM,GAAgC,CACrDC,qBAAsBt0N,KAAKs0N,sBAE/B,CAEAsC,4BACE52N,KAAKy2N,QAAQ/jN,IAAI,oBAAoBiN,SAAS,IAC9C3f,KAAKs0N,qBAAuB,CAAE56K,MAAO,GAAIsrG,aAAc,GACzD,CAEA,eAAIoyE,GACF,OAAOp3N,KAAKy2N,QAAQ/jN,IAAI,cAC1B,CAEA,cAAIqyI,GACF,OAAO/kJ,KAAKy2N,QAAQ/jN,IAAI,aAC1B,CAEA,gBAAI6lN,GACF,OAAOv4N,KAAKy2N,QAAQ/jN,IAAI,eAC1B,CAEA8kN,sBACE,MAAM5jN,EAAU,IAAIu8G,cAAY,KAAM78G,aAAWC,UACjDvT,KAAKo3N,YAAYl7N,KAAK0X,EACxB,CAEA6jN,4BACEz3N,KAAKuU,OAAOC,SAAS,CAAC,GAAGyhN,MAAoB53L,KAASne,UACxD,CAEAi5M,eACE,MAAMvlN,EAAU,IAAIu8G,cAAY,GAAI78G,aAAWC,UAC/CvT,KAAK+kJ,WAAW7oJ,KAAK0X,EACvB,CAEA8kN,iBACE,MAAM9kN,EAAU5T,KAAK8d,YAAYqZ,MAAM,CACrC1U,QAAS,CAAC,GAAInP,aAAWC,UACzBmxG,YAAa,CAAC,MAEhB1kH,KAAKu4N,aAAar8N,KAAK0X,EACzB,CAEAojN,uBAAuB9vN,GACrBlH,KAAKo3N,YAAYzjN,SAASzM,GAC1BlH,KAAK6nI,GAAGl+C,eACV,CAEAuuI,gBAAgBhxN,GACdlH,KAAK+kJ,WAAWpxI,SAASzM,GACzBlH,KAAK6nI,GAAGl+C,eACV,CAEA2uI,kBAAkBpxN,GAChBlH,KAAKu4N,aAAa5kN,SAASzM,GAC3BlH,KAAK6nI,GAAGl+C,eACV,iDAzaWkwI,IAAuB54N,8BAAAC,MAAAD,8BAAA8H,MAAA9H,8BAAA+H,IAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,UAAA/kB,iFAAA+kB,kBAAA,4DAAvB6zM,GAAuBzwN,UAAA,0BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,oGD5Bd5C,8FAoCAA;gDA0SEA,qUAvVOA,sFACvB,kCAAyB,sCActBA,wFACD,iDAkCaA,6FAEAA,iFA2QAA,2FAEX,wCAIO,2CAEOA,qTA1SbA,oGA8BAA,qGAa+CA,0GAChD,kCACE,6CAaA,8CAGE,uCAGU,0DACZ,iEAEA,gDAGE,yCAGU,0DACZ,iEACF,2EASGA,qJAkBMA,8GASNA,8HASAA,qGA4BMA,2FAEX,uCAGU,2CAQXA,8FAED,uCAGyB,2CAeNA,mFAEAA,mFAaEA,6FAUbA,2EAAA,gDAAmB,oDAOhBA,qGAcUA,2FAObA,2EAAA,gDAAmB,oDAyBpBA,+EACD,gDA0DWA,2EAAA,oCAgBKA,2KA4BAA,gLAvBbA,mFACC,gDAwBDA,uFACD,kDAbuBA,uGA6ChBA,+FAEX,uCAIO,2CAEOA,gjHA3b1BvI,uBAAA,EAAA06N,GAAA,kDAEM16N,uBAAA,OAAAA,wBAAA,IAAAwC,EAAA8gN,mmBE8BItjN,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAA26N,GAAA,iHAEG36N,uBAAA,OAAAuvB,EAAAqrM,aAAAxrN,UAAA,WAAAqgB,EAAA,qCAkBHzvB,2BAAA,eAAAA,mBAAA,MAIAA,mDACAA,2BAAA,eAAAA,mBAAA,MAIAA,sDACAA,2BAAA,eAAAA,mBAAA,MAIAA,qDAHQA,uBAAA,QAAA66N,EAAA1hO,MAEN6G,8CAAA66N,EAAA1hO,yDAIF6G,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAA86N,GAAA,iHAEG96N,uBAAA,OAAAuvB,EAAAqrM,aAAAxrN,UAAA,SAAAqgB,EAAA,qCAgBHzvB,2BAAA,eAAAA,mBAAA,MAEuBA,mDACvBA,2BAAA,eAAAA,mBAAA,MAIAA,sDACAA,2BAAA,eAAAA,mBAAA,MAOAA,oFAJEA,uBADA,QAAA+6N,EAAA5hO,KACA6G,CADyB,WAAA+6N,EAAA5hO,OAAAo2B,EAAAqrM,aAAAnpN,IAAA,mBAAApS,OAIzBW,8CAAA+6N,EAAA5hO,kGArBJ6G,2BAFF,WAEEA,CAD2C,mBAKzCA,uBAAA,oBAAAA,0BAAA21D,GAAA,MAAApmC,EAAAvvB,0BAAA,UAAAA,wBAAUuvB,EAAA1Z,YAAW,GAWrB7V,uBARA,EAAAg7N,GAAA,gBAQAh7N,CANa,EAAAi7N,GAAA,gBAMbj7N,CAHa,EAAAk7N,GAAA,iBAYjBl7N,0EAnBIA,+CAAA,kBAAAuvB,EAAAtZ,eAESjW,+CAAA,cAAAuvB,EAAAtZ,eAGAjW,+CAAA,cAAAuvB,EAAAtZ,eAAAsZ,EAAAtZ,cAAA9b,QAAA,GAMgB6F,+CAAA,UAAAuvB,EAAAtZ,uCAmBzBjW,2BAAA,eAAAA,mBAAA,MAEuBA,mDACvBA,2BAAA,eAAAA,mBAAA,MAIAA,mDACAA,2BAAA,eAAAA,mBAAA,MAIAA,sDACAA,2BAAA,eAAAA,mBAAA,MAOAA,oFAJEA,uBADA,QAAAm7N,EAAAhiO,KACA6G,CADwB,WAAAm7N,EAAAhiO,OAAAo2B,EAAAqrM,aAAAnpN,IAAA,aAAApS,OAIxBW,8CAAAm7N,EAAAhiO,kGA1BJ6G,2BAFF,WAEEA,CAD2C,mBAKzCA,uBAAA,oBAAAA,0BAAAiU,GAAA,MAAAsb,EAAAvvB,0BAAA,UAAAA,wBAAUuvB,EAAAjZ,gBAAe,GAgBzBtW,uBAbA,EAAAo7N,GAAA,gBAaAp7N,CAXa,EAAAq7N,GAAA,gBAWbr7N,CARa,EAAAs7N,GAAA,gBAQbt7N,CAHa,EAAAu7N,GAAA,iBAYjBv7N,0EAxBIA,+CAAA,kBAAAuvB,EAAA3Y,YAES5W,+CAAA,cAAAuvB,EAAA3Y,YAGA5W,+CAAA,cAAAuvB,EAAA3Y,YAAA,IAAA2Y,EAAA3Y,WAAAzc,QAKA6F,+CAAA,cAAAuvB,EAAA3Y,YAAA2Y,EAAA3Y,WAAAzc,OAAA,GAMe6F,+CAAA,UAAAuvB,EAAA3Y,oCA6CxB5W,2BAAA,aAAAA,mBAAA,MAI0BA,qDAJ1BA,uBAAA,EAAAw7N,GAAA,iHAEGx7N,uBAAA,OAAAuvB,EAAAqrM,aAAAxrN,UAAA,YAAAqgB,EAAA,8EA9KXzvB,oCAAA,GAKIA,2BAJF,cAIEA,CADe,YACfA,mBAAA,0EAGAA,2BAIEA,2BADF,WACEA,CADqB,uBACrBA,wBAAA,KASEA,sBAAA,eAOFA,mDACAA,uBAAA,GAAAy7N,GAAA,yBAAAz7N,oCAQFA,2BAIEA,2BADF,YACEA,CADqB,oBAMnBA,uBAAA,oBAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAUuvB,EAAArb,sBAAqB,GAc/BlU,uBAVA,GAAA07N,GAAA,gBAUA17N,CARa,GAAA27N,GAAA,gBAQb37N,CAHa,GAAA47N,GAAA,iBAQf57N,2BACAA,uBAAA,GAAA67N,GAAA,yBAAA77N,oCAQFA,2BA8BAA,uBA5BA,GAAA87N,GAAA,aA4BA97N,CA3B6C,GAAA+7N,GAAA,cAgE3C/7N,2BAHJ,YAGIA,CAFQ,YAERA,CADU,wBACVA,wBAAA,MAGEA,sBAAA,eAIFA,wBACFA,6BAEEA,2BADF,YACEA,CADU,wBACVA,wBAAA,MAUEA,sBAAA,eASFA,mDACAA,uBAAA,GAAAg8N,GAAA,yBAAAh8N,oCASJA,6BAIIA,2BADF,YACEA,CADqB,sBACrBA,wBAAA,MAGEA,sBAAA,mBAIFA,wBACFA,6BAIEA,2BADF,YACEA,CADqB,sBACrBA,wBAAA,MAGEA,sBAAA,mBACFA,wBACFA,6BACAA,2BAAA,qGACEA,uBAAA,+BAAAA,0BAAAsL,GAAA,MAAAikB,EAAAvvB,4BAAA,OAAAA,wBAAqBuvB,EAAAnU,eAAc,GAKvCpb,uMA7MMA,+CAAA,YAAAuvB,EAAAqrM,cAIF56N,sBAAA,GAAAA,8CAAA,KAAAuvB,EAAAlU,QAAArb,CACFA,wBAAA,KAAAuvB,EAAAjU,sCAUItb,sBAAA,GACAA,uBADA,UAAAuvB,EAAAqrM,aAAAzqN,SAAAg2G,SAAAzxG,SAAA6a,EAAAqrM,aAAAzqN,SAAAg2G,SAAA71G,MACAtQ,CAD0F,cAAAi8N,GAQxFj8N,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAqrM,aAAAzqN,SAAAg2G,SAAAzxG,SAAA6a,EAAAqrM,aAAAzqN,SAAAg2G,SAAA71G,OAqBFtQ,sBAAA,GACAA,uBADA,UAAAuvB,EAAAqrM,aAAAzqN,SAAAk1G,OAAA3wG,SAAA6a,EAAAqrM,aAAAzqN,SAAAk1G,OAAA/0G,MACAtQ,CADsF,cAAAk8N,GAG7El8N,+CAAA,kBAAAuvB,EAAA3a,WAAA,KAAA2a,EAAA3a,WAAAza,SAKA6F,+CAAA,cAAAuvB,EAAA3a,aAAA,MAAA2a,EAAA3a,WAAA,KAAA2a,EAAA3a,WAAAza,QAAA,GAKsB6F,+CAAA,UAAAuvB,EAAA3a,YAiB7B5U,sBAAA,GAAAA,uBAAA,OAAAuvB,EAAAqrM,aAAAlrN,SAAA,WA4BA1P,+CAAA,OAAAuvB,EAAAqrM,aAAAlrN,SAAA,WAiDF1P,sBAAA,GAGAA,uBAHA,UAAAuvB,EAAAqrM,aAAAzqN,SAAAgsN,UAAAznN,SAAA6a,EAAAqrM,aAAAzqN,SAAAgsN,UAAA7rN,MAGAtQ,CADC,cAAAo8N,GAUCp8N,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAAqrM,aAAAzqN,SAAAgsN,UAAAznN,SAAA6a,EAAAqrM,aAAAzqN,SAAAgsN,UAAA7rN,OAsCJtQ,sBAAA,IACAA,uBADA,OAAAuvB,EAAAqrM,aACA56N,CADqB,aAAAA,wBAAA,MAAAuvB,EAAAlU,QAAA,IAAArb,wBAAA,MAAAuvB,EAAAjU,YChLvB,MAAO+gN,WAA8B//M,KAYzCzd,YACUge,EACDg1M,EACA9kN,EACCG,EACAsP,EACAD,EACAolI,EACAruI,EACAmJ,GAERrP,QAVQrO,KAAA8d,cACD9d,KAAA8yN,aACA9yN,KAAAgO,eACChO,KAAAmO,aACAnO,KAAAyd,mBACAzd,KAAAwd,gBACAxd,KAAA4iJ,qBACA5iJ,KAAAuU,SACAvU,KAAA0d,QAjBV1d,KAAA6V,WAA2B,GAC3B7V,KAAAkX,cAAwC,GACxClX,KAAA6X,WAAgC,GAEhC7X,KAAA0c,QAAS,EAgBP1c,KAAKuc,SAAW/S,iBAChBxJ,KAAK0c,OAAS1c,KAAKuU,OAAOyK,IAAIK,WAAW,IAAIu1M,MAAcv2L,KAAS9e,QACpEvf,KAAKsc,OAAStc,KAAK0c,OAAS1c,KAAKgO,aAAauR,KAAOvf,KAAKgO,aAAakS,MACzE,CACAzR,WACEzO,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3Bxf,KAAKonH,SAAW5nG,EAAOiyM,QACvBzxN,KAAK0pB,UAAYlK,EAAOkK,YAE1B1pB,KAAKmO,WAAWiR,cAAczQ,UAAWpM,IACvCvC,KAAK6V,WAAatT,IAEpBvC,KAAKif,aACDjf,KAAK0c,QACP1c,KAAK8yN,WAAWvB,SAASvxN,KAAK0pB,UAAW1pB,KAAKonH,UAAUz4G,UAAWgb,IACjE3pB,KAAKu9N,cAAgB5zM,EACrB3pB,KAAK67N,aAAanpN,IAAI,YAAYiN,SAAS3f,KAAKu9N,cAAcn2G,UAC9DpnH,KAAK67N,aAAanpN,IAAI,YAAYuN,UAClCjgB,KAAK67N,aAAanpN,IAAI,UAAUiN,SAAS3f,KAAKu9N,cAActoH,OAAOqR,QACnEtmH,KAAK67N,aAAanpN,IAAI,mBAAmBiN,SAAS3f,KAAKu9N,cAActoH,OAAOsR,gBAC5EvmH,KAAK67N,aAAanpN,IAAI,aAAaiN,SAAS3f,KAAKu9N,cAActoH,OAAOn9F,WACtE9X,KAAK67N,aAAanpN,IAAI,aAAaiN,SAAS3f,KAAKu9N,cAActoH,OAAO18F,MAClEvY,KAAKu9N,cAAcnnH,UACrBp2G,KAAK67N,aAAanpN,IAAI,YAAYiN,SAAS3f,KAAKu9N,cAAcnnH,UAE5Dp2G,KAAKu9N,cAAcC,YACrBx9N,KAAK67N,aAAanpN,IAAI,cAAciN,SAAS3f,KAAKu9N,cAAcC,YAGlEx9N,KAAK+gB,aAAa/gB,KAAKu9N,cAActoH,OAAOqR,OAAM,GAGtDtmH,KAAKwgB,cACP,CAEAvB,aACEjf,KAAK67N,aAAe77N,KAAK8d,YAAYqZ,MAAM,CACzCiwF,SAAU,IAAI+I,cAAY,GAAI,CAC5B98G,WAAY,CAACC,aAAWC,YAE1B+yG,OAAQ,IAAI6J,cAAY,GAAI,CAC1B98G,WAAY,CAACC,aAAWC,YAE1B4M,gBAAiB,IAAIgwG,cAAY,IACjCr4G,UAAW,IAAIq4G,cAAY,IAC3BstG,aAAc,IAAIttG,cAAY,CAAE7vH,MAAO,GAAIiqC,UAAU,IACrD6yL,UAAW,IAAIjtG,cAAY,IAAK,CAC9B98G,WAAY,CAACC,aAAWC,YAE1BiqN,WAAY,IAAIrtG,eAAY,GAC5B/Z,SAAU,IAAI+Z,eAAY,IAE9B,CAEAh7G,sBACE,MAAM6L,EAAShhB,KAAK67N,aAAalrN,SAAS,UAC1C3Q,KAAK67N,aAAatpN,WAAW,CAC3B4N,gBAAiB,GACjBrI,UAAW,GACX2lN,aAAc,KAEhBz9N,KAAK6X,WAAa,GACdmJ,GACFhhB,KAAK+gB,aAAaC,EAEtB,CAEAD,aAAaulG,GACXtmH,KAAK67N,aAAatpN,WAAW,CAC3B4N,gBAAiB,GACjBrI,UAAW,KAETwuG,GACFtmH,KAAKyd,iBAAiB/K,IAAI4zG,GAAQ33G,UAAWpM,IAE3C,GADAvC,KAAKkX,cAAgB3U,EACjBvC,KAAK0c,OAAQ,CACf,MAAMghN,EAAoB19N,KAAKu9N,cAActoH,OAAOsR,eACpD,GAAIm3G,GAAqBp3G,IAAWtmH,KAAKu9N,cAActoH,OAAOqR,OAAQ,CACpE,MAAMq3G,EAAY39N,KAAKkX,cAAcrE,KAAMskB,GAAUA,EAAM/8B,OAASsjO,GAChEC,IACF39N,KAAK67N,aAAanpN,IAAI,mBAAmBiN,SAASg+M,EAAUvjO,MAC5D4F,KAAK8W,YAET,CACF,GAGN,CAEMA,YAAS,IAAA4J,EAAA1gB,KAAA,SAAA2gB,MAAA,YACb,MAAM2lG,EAAS5lG,EAAKm7M,aAAalrN,SAAS,UACpCiQ,EAAYF,EAAKm7M,aAAalrN,SAAS,mBAC7C+P,EAAKm7M,aAAatpN,WAAW,CAC3BuF,UAAW,GACX2lN,aAAc,KAEhB/8M,EAAK7I,WAAa,GAEdyuG,GAAU1lG,UACNF,EAAKnJ,gBACXmJ,EAAKlD,cAAc9K,IAAI4zG,EAAQ1lG,GAAW,GAAOjS,UAAWpM,IAE1D,GADAme,EAAK7I,WAAatV,EACdme,EAAKhE,OAAQ,CACf,MAAMkhN,EAAiBl9M,EAAK68M,cAActoH,OAAOn9F,UACjD,GAAI8lN,GAAkBl9M,EAAK68M,cAActoH,OAAOsR,eAAgB,CAC9D,MAAM/kG,EAASd,EAAK7I,WAAWhF,KAAM6oE,GAAMA,EAAEthF,OAASwjO,GAClDp8M,IACFd,EAAKm7M,aAAanpN,IAAI,aAAaiN,SAAS6B,EAAOpnB,MACnDsmB,EAAKnJ,gBAET,CACF,IAEH,EAxBY,EAyBf,CAEAA,gBACE,OAAO,IAAI2J,QAAc,CAACC,EAASC,KACjC,MAAMJ,EAAShhB,KAAK67N,aAAalrN,SAAS,UACpCsQ,EAAcjhB,KAAK67N,aAAalrN,SAAS,oBAAsB,GAC/D6Q,EAASxhB,KAAK67N,aAAalrN,SAAS,aAE1C3Q,KAAKwd,cACF8D,KAAKN,EAAQQ,EAAQP,GACrBjS,QAAK9R,OAAKqF,GAAcA,EAAKgW,OAC7B5J,UACE4J,IACCvY,KAAKqhB,WAAW9I,GAChB4I,GAAO,EAERI,GAAeH,EAAOG,GAAM,EAGrC,CAEAF,WAAWo8M,GACTz9N,KAAK67N,aAAatpN,WAAW,CAAEkrN,aAAcA,GAC/C,CAEA74M,eACE,MAAMs2M,EAAe/oN,cAAYnS,KAAK67N,aAAav7N,OAC7Cu9N,EAAgB3C,EAAakC,UAC7B3L,EAAUzxN,KAAK67N,aAAanpN,IAAI,aAAapS,MAkBnD,MAjBwC,CACtCw9N,eAAgB,CACdvC,crB1DsB,iBqB2DtBlnN,WAAYrU,KAAK0pB,UACjB09F,SAAUqqG,EACVx8G,OAAQ,CACNqR,OAAQ40G,EAAa50G,OACrB/tG,KAAMslN,EACNt3G,eAAgB20G,EAAa/6M,gBAC7BrI,UAAWojN,EAAapjN,UACxBimN,SrB9Dc,aqBgEhBP,WAAYtC,EAAasC,WACzBpnH,SAAU8kH,EAAa9kH,UAK7B,CAEA/5F,eACMrc,KAAK0c,OACP1c,KAAKg7N,kBAAkB38L,KAAS9e,MAEhCvf,KAAKg7N,kBAAkB38L,KAASne,OAEpC,CAEA86M,kBAAkBC,GAChB,MAAMt2M,EAAe3kB,KAAK4kB,eACpBwZ,EAAYp+B,KACZonH,EAAWpnH,KAAK67N,aAAanpN,IAAI,YAAYpS,MAEnDN,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAa,GAAG6vM,MAAcqG,IAAW,CAAE7zG,aACrDpiG,KAAMhlB,KAAK8yN,WAAWxB,YAAY3sM,KAEnChW,UAAU,CACTyW,SAAUA,KACRplB,KAAKuU,OAAOC,SAAS,CAAC8gN,IAAa,EAErC/zM,MAAOA,KACL6c,EAAUy9L,aAAat2M,UAAU,CAAEE,gBAAgB,GAAM,GAGjE,iDArNW63M,IAAqBr8N,8BAAAC,MAAAD,8BAAA8H,IAAA9H,8BAAA+H,MAAA/H,8BAAAgI,MAAAhI,8BAAAiI,MAAAjI,8BAAAkI,MAAAlI,8BAAA8kB,KAAA9kB,8BAAA+kB,UAAA/kB,8BAAA+kB,kBAAA,4DAArBs3M,GAAqBl0N,UAAA,wBAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,gEDbZ5C,oGA4BLA,kFArCcA,sFACvB,kCAAyB,sCAatBA,sFACD,iDA0HsDA,yFACtD,iDAgBCA,sFACD,iDAyBiBA,sFACjB,wHAEU,+CASOA,oFACjB,uGAAyE,+CArKtEA,oGAkBUA,4GAKAA,0GAKAA,4EACX,qCAQCA,qGASIA,6FAOMA,wFAGAA,sHAQZA,4EACC,qCAgBWA,wFAGAA,gHAKAA,8GAQZA,4EACC,qCA4CCA,2vDAlLbvI,2BAAA,YAEEA,uBAAA,EAAA+8N,GAAA,yBAkNF/8N,kCAnNKA,uBAAA,gBAAAA,4BAAA,EAAAyI,KACYzI,+CAAA,gBAAAwC,EAAA4iB,kbE+BTplB,2BAAA,aAAAA,mBAAA,KAI0BA,qDAJ1BA,uBAAA,EAAAg9N,GAAA,wDAEGh9N,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,SAAA9O,EAAAkR,KAAA,qCAyBHxR,2BAAA,aAAAA,mBAAA,KAKAA,qDALAA,uBAAA,EAAAi9N,GAAA,wDAEKj9N,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,WAAA9O,EAAAkR,KAAA,qCAyBLxR,2BAAA,aAAAA,mBAAA,MAKAA,qDALAA,uBAAA,EAAAk9N,GAAA,wDAEKl9N,uBAAA,OAAAM,EAAAkR,KAAApC,UAAA,WAAA9O,EAAAkR,KAAA,wCA0BLxR,2BAAA,eACqCA,mBAAA,GAAwBA,qDAArDA,uBAAA,QAAAgzM,EAAA5/L,YAA6BpT,sDAAAgzM,EAAA5/L,uCANrCpT,2BAbJ,WAaIA,CAVH,kBAUGA,CADD,eACCA,mBAAA,MAIAA,2BACAA,uBAAA,EAAAm9N,GAAA,iBAGJn9N,kDAPMA,sBAAA,GAAAA,uBAAA,cAI0BA,sBAAA,GAAAA,uBAAA,UAAAo9N,IC9F9B,MAAOC,WAAiC/gN,KAS5Czd,YACUkO,EACA40I,EACA9kI,EACAg1M,EACAv+M,EACAmJ,EACAiiB,GAERtxB,QARQrO,KAAAgO,eACAhO,KAAA4iJ,qBACA5iJ,KAAA8d,cACA9d,KAAA8yN,aACA9yN,KAAAuU,SACAvU,KAAA0d,QACA1d,KAAA2/B,WAXV3/B,KAAA+R,MAAQC,KAcNhS,KAAKowB,QAAUpwB,KAAKuU,OAAOyK,IAAIK,WAAW,IAAIuzM,MAAkBv0L,KAAS9e,QACzEvf,KAAKuc,SAAW/S,gDAClB,CAEAiF,WAKE,GAJAzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAKy1N,aAAez1N,KAAK8yN,WAAW3zM,eACpCnf,KAAKif,aAEDjf,KAAKowB,QAAS,CAGhB,IAAImuM,EAFJv+N,KAAKsc,OAAStc,KAAKgO,aAAau6D,OAChCvoE,KAAKyS,KAAKC,IAAI,UAAUuN,UAExBjgB,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3B++M,EAAgB/+M,EAAO6nG,SAGzBrnH,KAAK8yN,WAAWpB,YAAY6M,GAAe5vN,UAAWkjN,IACpD7xN,KAAKyS,KAAKC,IAAI,UAAUiN,SAASkyM,EAASkB,SAC1C/yN,KAAKyS,KAAKC,IAAI,YAAYiN,SAASkyM,EAASvuG,KAAKztF,UACjD71B,KAAKyS,KAAKC,IAAI,YAAYiN,SAASkyM,EAASvuG,KAAKvtF,UACjD/1B,KAAKyS,KAAKC,IAAI,mBAAmBiN,SAASkyM,EAAS2M,kBAAiB,EAExE,CACF,CAEAv/M,aACEjf,KAAKyS,KAAOzS,KAAK8d,YAAYqZ,MAAM,CACjCkwF,OAAQ,IAAI8I,cAAY,GAAI,CAC1B98G,WAAY,CAACC,aAAWC,YAE1BsiB,SAAU,IAAIs6F,cAAY,GAAI,CAC5B98G,WAAY,CAACC,aAAWC,YAE1BwiB,SAAU,IAAIo6F,cAAY,GAAI,CAC5B98G,WAAY,CAACC,aAAWC,YAE1BkrN,gBAAiB,IAAItuG,cAAY,OAErC,CAEAv/F,SACE,MAAMy2F,EAASrnH,KAAKyS,KAAK9B,SAAS,UAK5BkhN,EAAwB,CAC5B0J,cvBsD4B,qBuBrD5BxI,QAAS1rG,EACT/D,KAAM,CAAEztF,SAPO71B,KAAKyS,KAAK9B,SAAS,YAONolB,SANb/1B,KAAKyS,KAAK9B,SAAS,aAOlC6tN,kBANsBx+N,KAAKyS,KAAK9B,SAAS,oBASrCq4I,EAAOhpJ,KACb,IAAIkpJ,EAAU,GAAG0pE,MAAkB5yN,KAAKowB,QAAUiO,KAAS9e,KAAO8e,KAASne,SAC3ElgB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAamkI,EAAS,CAC9B7hC,OAAQA,IAEVriG,KAAMhlB,KAAK8yN,WAAWlB,eAAeC,KAEtCljN,UAAU,CACT4S,QACEynI,EAAKv2I,KAAK8S,UAAU,CAAEE,gBAAgB,GACxC,EACAL,SAAUA,KACRplB,KAAK2/B,SAASmmB,MAAI,GAG1B,iDA1FWw4K,IAAwBr9N,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,IAAAhI,8BAAAiI,UAAAjI,8BAAAiI,kBAAAjI,8BAAAkI,YAAA,4DAAxBm1N,GAAwBl1N,UAAA,4BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,+BDHjB5C,8FATSA,sFACvB,kCAAyB,sCAYxBA,iHACC,iDA0BDA,oFACD,iDA0BCA,oFACC,iDAxCGA,oGA2BFA,qGA2BAA,qGAWMA,8FAKKA,yMAMXA,spCAzGLvI,2BARJ,WAQIA,CALH,cAKGA,CADe,YACfA,mBAAA,0EAGAA,2BAIEA,2BADF,WACEA,CADqB,uBACrBA,wBAAA,KAQEA,sBAAA,eAQFA,mDACAA,uBAAA,GAAAy9N,GAAA,yBAAAz9N,oCAQFA,2BAIEA,2BADF,YACEA,CADqB,wBACrBA,wBAAA,MAMAA,sBAAA,eAQAA,mDACAA,uBAAA,GAAA09N,GAAA,yBAAA19N,oCAQFA,2BAIEA,2BADF,YACEA,CADqB,4BACrBA,wBAAA,MAMEA,sBAAA,eAQFA,mDACAA,uBAAA,GAAA29N,GAAA,yBAAA39N,oCAQFA,2BAGAA,uBAAA,GAAA49N,GAAA,6CAsBA59N,2BAAA,qGACIA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAmtB,SAAQ,GAKrC3vB,uIA3HEA,uBAAA,gBAAAA,4BAAA,GAAAyI,KAIMzI,+CAAA,YAAAwC,EAAAgP,MAIFxR,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CACFA,wBAAA,KAAAwC,EAAA8Y,sCASItb,sBAAA,GACAA,uBADA,UAAAwC,EAAAgP,KAAArB,SAAAi2G,OAAA1xG,SAAAlS,EAAAgP,KAAArB,SAAAi2G,OAAA91G,MACAtQ,CADsE,cAAA69N,GASpE79N,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAgP,KAAArB,SAAAi2G,OAAA1xG,SAAAlS,EAAAgP,KAAArB,SAAAi2G,OAAA91G,OAkBFtQ,sBAAA,GACAA,uBADA,UAAAwC,EAAAgP,KAAArB,SAAAykB,SAAAlgB,SAAAlS,EAAAgP,KAAArB,SAAAykB,SAAAtkB,MACAtQ,CAD0E,cAAA89N,GASxE99N,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAgP,KAAArB,SAAAykB,SAAAlgB,SAAAlS,EAAAgP,KAAArB,SAAAykB,SAAAtkB,OAkBFtQ,sBAAA,GACAA,uBADA,UAAAwC,EAAAgP,KAAArB,SAAA2kB,SAAApgB,SAAAlS,EAAAgP,KAAArB,SAAA2kB,SAAAxkB,MACAtQ,CAD0E,cAAA+9N,GASxE/9N,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAgP,KAAArB,SAAA2kB,SAAApgB,SAAAlS,EAAAgP,KAAArB,SAAA2kB,SAAAxkB,OAeHtQ,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAAwC,EAAAgyN,eAuBCx0N,sBAAA,GACAA,uBADA,OAAAwC,EAAAgP,KACAxR,CADa,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,uiBE1GjBtb,2BAAA,0BAYEA,uBAAA,uBAAA2J,GAAA3J,0BAAA4P,GAAA,MAAA2f,EAAAvvB,4BAAA,OAAAA,wBAAeuvB,EAAAsiM,WAAAhC,WAAAlmN,GAA6B,GAC7C3J,gCAHCA,uBADA,SAAAA,4BAAA,EAAAK,IACAL,CAD2B,sCAyBzBA,2BAAA,aAAAA,mBAAA,KAI0BA,qDAJ1BA,uBAAA,EAAAg+N,GAAA,wDAEGh+N,uBAAA,OAAAuvB,EAAA/d,KAAApC,UAAA,gBAAAmgB,EAAA/d,KAAA,wCA0BHxR,2BAAA,eAE+BA,mBAAA,GAC/BA,qDADEA,uBAAA,QAAAi+N,EAAA7qN,YAA6BpT,uDAAA,GAAAi+N,EAAA7qN,WAAA,gCAP/BpT,2BAbJ,WAaIA,CAVH,kBAUGA,CADD,eACCA,mBAAA,KAIAA,2BACAA,uBAAA,EAAAk+N,GAAA,iBAKJl+N,kDATMA,sBAAA,GAAAA,uBAAA,cAKoBA,sBAAA,GAAAA,uBAAA,UAAAm+N,2BAoChBn+N,2BAAA,aAAAA,mBAAA,MAG0BA,mDAyB5BA,2BAAA,aAAAA,mBAAA,MAG0BA,4FAS1BA,2BAAA,wBAIEA,uBAAA,mBAAAA,0BAAA6T,GAAA,MAAAw+M,EAAAryN,4BAAAiG,MAAAspB,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAA6uM,WAAA/L,GAAa,gCAExBryN,sBAAA,YAKFA,sDA5EJA,oCAJF,KAIEA,CADD,MAUOA,2BARJ,WAQIA,CALH,WAKGA,CADD,uBACCA,wBAAA,MAOEA,sBAAA,cAOFA,mDACAA,uBAAA,EAAAq+N,GAAA,yBAAAr+N,oCAOFA,2BAKEA,2BAJF,WAIEA,CADD,4BACCA,wBAAA,OAOAA,sBAAA,eAQFA,mDACAA,uBAAA,GAAAs+N,GAAA,yBAAAt+N,oCAOAA,2BACAA,2BAAA,aAKEA,uBAAA,GAAAu+N,GAAA,0BAaJv+N,kLA9EYA,+CAAA,gBAAAqyN,GAORryN,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,GAAAQ,KAKER,wBAEAA,uBAFA,UAAAuvB,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAAhX,KAAAub,SAAA6a,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAAhX,KAAAmX,MAEAtQ,CADmE,cAAAw+N,GAOjEx+N,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAAhX,KAAAub,SAAA6a,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAAhX,KAAAmX,OAcJtQ,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,GAAAQ,KAKER,wBAEAA,uBAFA,UAAAuvB,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAA2kB,SAAApgB,SAAA6a,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAA2kB,SAAAxkB,MAEAtQ,CADuE,cAAAy+N,GAQvEz+N,sBAAA,GAAAA,uBAAA,UAAAuvB,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAA2kB,SAAApgB,SAAA6a,EAAA/d,KAAArB,SAAAuS,MAAAvS,SAAAkiN,GAAAliN,SAAA2kB,SAAAxkB,OAcFtQ,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,GAAAktD,KAKGltD,+CAAA,OAAAqyN,EAAA,oEAoCTryN,oCAJF,KAIEA,CADD,MAUKA,2BARF,WAQEA,CALD,WAKCA,CADC,uBACDA,wBAAA,MAIEA,sBAAA,cAKFA,wBACAA,6BAKEA,2BAJF,WAIEA,CADgC,wBAI9BA,uBAAA,yBAAA0+N,EAAA1+N,0BAAA+5I,GAAA9zI,MAAAspB,EAAAvvB,4BAAA,OAAAA,wBAASuvB,EAAAovM,YAAAD,GAAc,gCAEzB1+N,sBAAA,YAOJA,6FApCYA,+CAAA,gBAAA0+N,GAOR1+N,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAA2vE,KAeA3vE,sBAAA,GAAAA,uBAAA,gBAAAA,4BAAA,EAAAktD,MCzLN,MAAO0xK,WAAoCtiN,KAa/Czd,YACUkO,EACA40I,EACA9kI,EACDg1M,EACCv+M,EACAszH,EACAnqH,EACAiiB,GAERtxB,QATQrO,KAAAgO,eACAhO,KAAA4iJ,qBACA5iJ,KAAA8d,cACD9d,KAAA8yN,aACC9yN,KAAAuU,SACAvU,KAAA6nI,KACA7nI,KAAA0d,QACA1d,KAAA2/B,WAhBV3/B,KAAA+R,MAAQC,KACRhS,KAAA8/N,cAAwB,EAGxB9/N,KAAA+/N,gBAAuCC,YAAS,IACvChgO,KAAK8yN,WAAWpC,gBAcvB1wN,KAAKowB,QAAUpwB,KAAKuU,OAAOyK,IAAIK,WAAW,IAAI42M,MAAoB53L,KAAS9e,QAC3Evf,KAAKuc,SAAW/S,+CAChBy2N,UAAO,KACL,MAAMC,EAAWlgO,KAAK+/N,eAClBG,IACFlgO,KAAKmgO,SAASD,GACdlgO,KAAK8/N,cAAe,IAG1B,CAEArxN,WAIE,GAHAzO,KAAKsc,OAAStc,KAAKgO,aAAakS,OAChClgB,KAAKy1N,aAAez1N,KAAK8yN,WAAW3zM,eACpCnf,KAAKif,aACDjf,KAAKowB,QAAS,CAGhB,IAAIgwM,EAFJpgO,KAAKsc,OAAStc,KAAKgO,aAAau6D,OAChCvoE,KAAKyS,KAAKC,IAAI,iBAAiBuN,UAE/BjgB,KAAK0d,MAAM8B,OAAO7Q,UAAW6Q,IAC3B4gN,EAAsB5gN,EAAO8nG,gBAE/BtnH,KAAK8yN,WACFnB,eAAeyO,GACfzxN,UAAW0xN,IACVrgO,KAAKmgO,SAASE,EAAW,EAE/B,MACErgO,KAAKsgO,SAET,CAEAt2M,cACEhqB,KAAK8yN,WAAWjC,gBAAgB,KAClC,CAEAsP,SAASE,GACPrgO,KAAKyS,KAAKC,IAAI,iBAAiBiN,SAAS0gN,EAAYjK,iBACpDp2N,KAAKyS,KAAKC,IAAI,mBAAmBiN,SAAS0gN,EAAY7B,mBACtDx+N,KAAK2jB,MAAMvS,SAASpK,QAASu5N,KACtBA,EAAUnvN,SAAShX,KAAKkG,OAASigO,EAAUnvN,SAAS2kB,WACvDwqM,EAAUhuN,WAAW,CACnBnY,KAAMimO,EAAYx3N,OAAO8a,MAAM,GAAGvpB,KAClC27B,SAAUsqM,EAAYx3N,OAAO8a,MAAM,GAAGoS,WAExCsqM,EAAYx3N,OAAO8a,MAAM9lB,QAAK,GAGlCmC,KAAK8tC,OAAO18B,SAASpK,QAASw5N,IACvBA,EAAWpvN,SAAShX,KAAKkG,QAC5BkgO,EAAWjuN,WAAW,CACpBnY,KAAMimO,EAAYx3N,OAAO8a,MAAM,GAAGvpB,OAEpCimO,EAAYx3N,OAAOilC,OAAOjwC,QAAK,GAGnCwiO,EAAYx3N,OAAO8a,MAAM3c,QAAS6rB,IAChC7yB,KAAKsgO,QAAQztM,EAAI,GAEnBwtM,EAAYx3N,OAAOilC,OAAO9mC,QAASmwB,IACjCn3B,KAAKygO,SAAStpM,EAAK,EAEvB,CAEAlY,aACEjf,KAAKyS,KAAOzS,KAAK8d,YAAYqZ,MAAM,CACjCmwF,cAAe,IAAI6I,cAAY,GAAI,CACjC98G,WAAY,CAACC,aAAWC,YAE1BkrN,gBAAiB,IAAItuG,cAAY,MACjCxsG,MAAO,IAAIglH,YAAU,IACrB76F,OAAQ,IAAI66F,YAAU,KAE1B,CAEA/3G,SACE,MAAM02F,EAAgBtnH,KAAKyS,KAAK9B,SAAS,iBACnC8tN,EAAkBz+N,KAAKyS,KAAK9B,SAAS,mBAGrCqhN,EAA8B,CAClCuJ,czBS8B,uByBR9BnF,gBAAiB9uG,EACjBz+G,OAAQ,CAAE8a,MALE3jB,KAAKyS,KAAK9B,SAAS,SAKPm9B,OAJX9tC,KAAKyS,KAAK9B,SAAS,WAKhC6tN,kBAAmBC,GAGfz1E,EAAOhpJ,KAEb,IAAIkpJ,EAAU,GAAG+sE,MAAoBj2N,KAAKowB,QAAUiO,KAAS9e,KAAO8e,KAASne,SAC7ElgB,KAAK4iJ,mBACF/9H,mBAAmB,CAClBC,KAAM,IAAIC,IAAamkI,EAAS,CAC9B5hC,cAAeA,IAEjBtiG,KAAMhlB,KAAK8yN,WAAWf,kBAAkBC,KAEzCrjN,UAAU,CACT4S,QACEynI,EAAKv2I,KAAK8S,UAAU,CAAEE,gBAAgB,GACxC,EACAL,SAAUA,KACRplB,KAAK2/B,SAASmmB,MAAI,GAG1B,CAEA,SAAIniC,GACF,OAAO3jB,KAAKyS,KAAKC,IAAI,QACvB,CAEA,UAAIo7B,GACF,OAAO9tC,KAAKyS,KAAKC,IAAI,SACvB,CAEAguN,QAAQ7tM,GACN,OAAO7yB,KAAK8d,YAAYqZ,MAAM,CAC5B/8B,KAAM,CAACy4B,EAAOA,EAAKz4B,KAAO,GAAIkZ,aAAWC,UACzCwiB,SAAU,CAAClD,EAAOA,EAAKkD,SAAW,GAAI,CAACziB,aAAWC,YAEtD,CAEAotN,SAASxpM,GACP,OAAOn3B,KAAK8d,YAAYqZ,MAAM,CAC5B/8B,KAAM,CAAC+8B,EAAQA,EAAM/8B,KAAO,KAEhC,CAEAkmO,QAAQztM,GACN7yB,KAAK2jB,MAAMznB,KAAK8D,KAAK0gO,QAAQ7tM,GAC/B,CAEA4tM,SAAStpM,GACPn3B,KAAK8tC,OAAO5xC,KAAK8D,KAAK2gO,SAASxpM,GACjC,CAEAkoM,WAAWn4N,GACTlH,KAAK2jB,MAAMhQ,SAASzM,GACpBlH,KAAK6nI,GAAGl+C,eACV,CAEAi2I,YAAY14N,GACVlH,KAAK8tC,OAAOn6B,SAASzM,GACrBlH,KAAK6nI,GAAGl+C,eACV,iDAxKWk2I,IAA2B5+N,8BAAAC,MAAAD,8BAAA8H,KAAA9H,8BAAA+H,MAAA/H,8BAAAgI,IAAAhI,8BAAAiI,UAAAjI,iFAAAiI,kBAAAjI,8BAAAkI,YAAA,4DAA3B02N,GAA2Bz2N,UAAA,8BAAAyd,SAAA,CAAA5lB,wCAAAuJ,MAAA,GAAAC,KAAA,GAAAC,YAAA,IAAA0B,iDDZ3B5C,oGAEMA,qHAEDA,0FAcEA,8FAxBfA,sFACC,kCAAyB,sCA2BxBA,iHACC,iDAyIDA,oFACC,wCAKA,2CAqDWA,sFAEX,wCAIO,2CA7LJA,oGAWIA,8FAIKA,0MAOXA,qGA6BIA,oFACC,gDA0BDA,oFACD,kDAfKA,qGA4BFA,qGA2DJA,iFACC,s5DArMRvI,2BARJ,WAQIA,CALH,cAKGA,CADe,YACfA,mBAAA,0EAKAA,2BAEAA,uBAAA,EAAA2/N,GAAA,4BAiBE3/N,2BADF,WACEA,CADqB,uBACrBA,wBAAA,MAQEA,sBAAA,eAOFA,mDACAA,uBAAA,GAAA4/N,GAAA,yBAAA5/N,oCAQFA,2BAGAA,uBAAA,GAAA6/N,GAAA,6CA0BA7/N,uBAAA,GAAA8/N,GAAA,yBAuFE9/N,2BADF,YACEA,CADqB,gBAInBA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAA68N,UAAS,GAHpBr/N,wBAAA,mCAMEA,sBAAA,aAMFA,wBACFA,6BAGAA,uBAAA,GAAA+/N,GAAA,sDA6CE//N,2BADF,YACEA,CADqB,gBAGbA,uBAAA,mBAAAA,iCAAAsL,GAAAtL,wBAASwC,EAAAg9N,WAAU,GAF3Bx/N,wBAAA,mCAKEA,sBAAA,aAKFA,wBACFA,2DAEAA,2BAAA,qGACEA,uBAAA,+BAAAA,iCAAAsL,GAAAtL,wBAAqBwC,EAAAmtB,SAAQ,GAKjC3vB,2EA1PAA,uBAAA,gBAAAA,4BAAA,GAAAyI,KAIMzI,+CAAA,YAAAwC,EAAAgP,MAMFxR,sBAAA,GAAAA,8CAAA,KAAAwC,EAAA6Y,QAAArb,CACFA,wBAAA,KAAAwC,EAAA8Y,sCAGGtb,+CAAA,QAAAwC,EAAA2sB,UAAA3sB,EAAAq8N,cAqBC7+N,sBAAA,GACAA,uBADA,UAAAwC,EAAAgP,KAAArB,SAAAk2G,cAAA3xG,SAAAlS,EAAAgP,KAAArB,SAAAk2G,cAAA/1G,MACAtQ,CADoF,cAAAggO,GAuBrFhgO,sBAAA,GAAAA,uBAAA,OAAAA,wBAAA,MAAAwC,EAAAgyN,eA2Bax0N,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAkgB,MAAAvS,UAuGAnQ,sBAAA,GAAAA,uBAAA,UAAAwC,EAAAqqC,OAAA18B,UA0DdnQ,sBAAA,GACAA,uBADA,OAAAwC,EAAAgP,KACAxR,CADa,aAAAA,wBAAA,MAAAwC,EAAA6Y,QAAA,IAAArb,wBAAA,MAAAwC,EAAA8Y,ujBEjPb,MAAO2kN,sDAAoB,4DAApBA,GAAoB93N,UAAA,sBAAAoB,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAA0B,WCHxB5C,qMAFTvI,sBAFA,gBAEAA,CAF2B,wBAKzBA,wBACAA,uBADA,8BACAA,CAD+B,8CC0D3B,MAAOkgO,WAA8CpoB,GACzD53L,QAAQzD,GACN,MAAM7hB,EAAwB,GAExBulO,EAAW1jN,EAAMoiB,YAAYijI,UAAY,KAC/C,IAAIs+D,EAAW,GACf,OAAQD,GACN,IAAK,WACHC,EAAW,WACX,MACF,IAAK,SACHA,EAAW,QAGfxlO,SAAOK,KAAK,CAAE00D,KAAM,UAAWr4C,KAAM,OACrC1c,EAAOK,KAAK,CAAE00D,KAAMywK,EAAU9oN,KAAM6oN,IACpCvlO,EAAOK,KAAK,CAAE00D,KAAM,uBAAwBr4C,KAAM,KAE3C1c,CACT,qGAnBWslO,MAAqC9rJ,GAArC8rJ,GAAqC,mEAArCA,GAAqChgO,QAArCggO,GAAqC//N,WAAA,EAuB5C,MAAOkgO,WAAqCvoB,GAChD53L,QAAQzD,GACN,MAAMnF,EAAOmF,EAAM8B,OAAOplB,KAE1B,MAAO,CAAC,CAAEw2D,KAAM,GADHz+C,cAAYoG,UACOA,KAAMA,GACxC,qGALW+oN,MAA4BjsJ,GAA5BisJ,GAA4B,mEAA5BA,GAA4BngO,QAA5BmgO,GAA4BlgO,WAAA,EAQzC,MAAM28B,GAAiB,CAErB,CAAExlB,KAAM,GAAIylB,WAAY,YAAaC,UAAW,QAChD,CAAE1lB,KAAM,WAAY6lB,UAAWg/K,IAC/B,CACE7kM,KAAM,GACN6lB,UAAW4+K,GACXhpG,YAAa,CAACD,KAAkBypG,IAChCppG,iBAAkB,CAACL,KAAkBypG,IACrCr/K,SAAU,CACR,CAAE5lB,KAAM,YAAa6lB,UAAWgmK,IAChC,CAAE7rL,KAAM,QAAS6lB,UAAW6pK,IAG5B,CACE1vL,KAAM,iBACN6lB,UAAWwpI,GACX5zD,YAAa,CAACoH,MACd74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,eACXtM,WAAY,YACZy9E,QAAS,WAEXv9E,YAAa,2BAGjB,CACE3lB,KAAM,QACN6lB,UAAWukI,GACXpgK,KAAM,CAAE27B,YAAa,iBACrBC,SAAU,CACR,CACE5lB,KAAM8lB,KAASoqC,IACfrqC,UAAW46H,GACXnzG,OAAQ,WAId,CACEttC,KAAM,aACN6lB,UAAW6zC,KACX1vE,KAAM,CACJ27B,YAAa,4BACb3hB,SAAU,yBAGd,CACEhE,KAAM,sBACN6lB,UAAWqnE,KACXljG,KAAM,CACJ27B,YAAa,mCACb3hB,SAAU,yBAGd,CACEhE,KAAM,sBACN6lB,UAAWqnE,KACXljG,KAAM,CACJ27B,YAAa,mCACb3hB,SAAU,yBAGd,CACEhE,KAAM,oBACN6lB,UAAWqnE,KACXljG,KAAM,CACJ27B,YAAa,iCACb3hB,SAAU,yBAGd,CACEhE,KAAM,UACN6lB,UAAWw1I,GACXrxK,KAAM,CAAE27B,YAAa,qBAEvB,CACE3lB,KAAM,WACN6lB,UAAWqyH,GACXz8C,YAAa,CAACoH,MACd74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,eACXtM,WAAY,QACZgF,QAAS,OACT24E,aAAc,eACdh9E,OAAQ,iCAEVT,YAAa,2BAEfC,SAAU,CACR,CACE5lB,KAAM8lB,KAASne,OACfke,UAAWmkH,GACX18F,OAAQ,SAEV,CACEttC,KAAM,GAAG8lB,KAASne,eAClBke,UAAWmkH,GACX18F,OAAQ,SAEV,CACEttC,KAAM,GAAG8lB,KAAS9e,mBAClB6e,UAAWmkH,GACX18F,OAAQ,WAId,CACEttC,KAAM,gBACN4lB,SAAU,CACR,CACE5lB,KAAM,WACN6lB,UAAW4sL,IAEb,CACEzyM,KAAM,kBACN6lB,UAAW+wL,GACX5sN,KAAM,CACJ27B,YAAa,iCAEfC,SAAU,CACR,CACE5lB,KAAM,sBACN6lB,UAAWiwL,QAMrB,CACE91M,KAAM,YACNy7F,YAAa,CAACoH,MACdh9E,UAAW+hI,GACX59J,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,eACXtM,WAAY,QACZgF,QAAS,OACT24E,aAAc,eACdh9E,OAAQ,iCAEVT,YAAa,2BAGjB,CACE3lB,KAAM,MACNhW,KAAM,CAAE27B,YAAa,gBACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWygJ,IACvB,CACEtmK,KAAM8lB,KAASne,OACfke,UAAWk4H,GACX/zJ,KAAM,CAAE27B,YAAaI,KAAape,WAIxC,CACE3H,KAAM,gBACNhW,KAAM,CAAE27B,YAAa,gCACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWq1G,IACvB,CACEl7H,KAAM,aACN6lB,UAAWozG,GACXjvI,KAAM,CAAE27B,YAAaI,KAAa/e,SAIxC,CACEhH,KAAM,YACN6lB,UAAWirI,GACX9mK,KAAM,CAAE27B,YAAa,sBAEvB,CACE3lB,KAAM,OACN6lB,UAAW4wI,GACXzsK,KAAM,CAAE27B,YAAa,uBAEvB,CACE3lB,KAAM,YACN6lB,UAAWiwJ,GACX9rL,KAAM,CAAE27B,YAAa,4BAEvB,CACE3lB,KAAM,aACNhW,KAAM,CAAE27B,YAAa,wBACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAIylB,WAAY,gBAAiBC,UAAW,QACpD,CACE1lB,KAAM,gBACNhW,KAAM,CAAE27B,YAAa,iBACrBE,UAAWymJ,IAEb,CACEtsK,KAAM,SACNhW,KAAM,CAAE27B,YAAa,UACrBE,UAAWknJ,IAEb,CACE/sK,KAAM,WACNhW,KAAM,CAAE27B,YAAa,YACrBC,SAAU,CACR,CACE5lB,KAAM,GACN6lB,UAAWquJ,IAEb,CACEl0K,KAAM8lB,KAASne,OACfke,UAAWkrJ,GACX/mL,KAAM,CAAE27B,YAAa,GAAGI,KAAape,mBAEvC,CACE3H,KAAM,GAAG8lB,KAASne,aAClBke,UAAWkrJ,GACX/mL,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,WAClB6e,UAAWkrJ,GACX/mL,KAAM,CAAE27B,YAAaI,KAAa/e,OAEpC,CACEhH,KAAM,GAAG8lB,KAASsqC,eAClBvqC,UAAWkrJ,GACX/mL,KAAM,CAAE27B,YAAaI,KAAaqqC,eAM5C,CACEpwD,KAAM,UACNy7F,YAAa,CAACoH,MACd74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,eACXtM,WAAY,QACZy9E,QAAS,UACTz4E,QAAS,OACT24E,aAAc,eACdh9E,OAAQ,iCAEVT,YAAa,0BAEfC,SAAU,CACR,CACE5lB,KAAM,GACN6lB,UAAW2hL,IAEb,CACExnM,KAAM,WACN6lB,UAAW+mL,GACX5iN,KAAM,CAAE27B,YAAa,eAI3B,CACE3lB,KAAM,0BACN6lB,UAAWqmK,GACXliM,KAAM,CACJ27B,YAAaijM,KAIjB,CACE5oN,KAAM,cACNhW,KAAM,CAAE27B,YAAa,iCACrBC,SAAU,CACR,CACE5lB,KAAM,GACN6lB,UAAWs0I,IAEb,CACEn6J,KAAM,aACN6lB,UAAW2zI,GACXxvK,KAAM,CACJ27B,YAAaojM,OAMrB,CACE/oN,KAAM,OACNhW,KAAM,CAAE27B,YAAa,iBACrBqjM,aAAcA,IAAMrgN,QAAAqqM,IAAA,CAAAiW,EAAA30I,EAAA,8CAAA20I,EAAA30I,EAAA,sCAAArlD,KAAAg6L,EAAAx8N,KAAAw8N,EAAA,QAAkCh6L,KAAMjsC,GAAMA,EAAEkmO,mBAGtE,CACElpN,KAAM,QACNhW,KAAM,CAAE27B,aAAa,EAAM0yB,KAAM,QAASr4C,KAAM,MAChDgpN,aAAcA,IAAMC,EAAA30I,EAAA,8CAAArlD,KAAAg6L,EAAAx8N,KAAAw8N,EAAA,QAAoCh6L,KAAMjsC,GAAMA,EAAEmmO,oBAGxE,CACEnpN,KAAM,SACNy7F,YAAa,CAACkF,MACd/6E,SAAU,CACR,CACE5lB,KAAM,KACN6lB,UAAW8vG,GACX3rI,KAAM,CAAE27B,YAAa,sBAEvB,CACE3lB,KAAM,MAAM8lB,KAASne,SACrBke,UAAWwlL,GACXrhN,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,MAAM8lB,KAAS9e,WACrB6e,UAAWwlL,GACXrhN,KAAM,CAAE27B,YAAaI,KAAa/e,OAEpC,CACEhH,KAAM,MACN67F,iBAAkB,CAAC8E,KAA4BkC,MAC/C74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,cACXtM,WAAY,QACZgF,QAAS,cACT24E,aAAc,cACdh9E,OAAQ,iCAEVT,YAAa,YAEfC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWtwB,MACvB,CACEyK,KAAM,GAAG8lB,KAASne,mCAClBke,UAAW9gB,KACX/a,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAASne,SAClBke,UAAW9gB,KACX/a,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,8BAClB6e,UAAW9gB,KACX/a,KAAM,CAAE27B,YAAaI,KAAa/e,SAIxC,CACEhH,KAAM,MACNy7F,YAAa,CAACoH,MACd74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,MACXtM,WAAY,QACZW,OAAQ,4BACRu9E,YAAa,MACbC,YAAa,cAEfj+E,YAAa,YAEfC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWm3L,IACvB,CACEh9M,KAAM,UACNhW,KAAM,CAAE27B,YAAa,WACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWm3L,IACvB,CACEh9M,KAAM,GAAG8lB,KAASne,SAClBke,UAAWy7L,GACXt3N,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,mBAClB6e,UAAWy7L,GACXt3N,KAAM,CAAE27B,YAAaI,KAAa/e,SAIxC,CACEhH,KAAM,mBACNhW,KAAM,CAAE27B,YAAa,oBACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAWy0L,IACvB,CACEt6M,KAAM,GAAG8lB,KAASne,SAClBke,UAAWkgM,GACX/7N,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,eAClB6e,UAAWkgM,GACX/7N,KAAM,CAAE27B,YAAaI,KAAa/e,SAIxC,CACEhH,KAAM,aACNhW,KAAM,CAAE27B,YAAa,cACrBC,SAAU,CACR,CAAE5lB,KAAM,GAAI6lB,UAAW83L,IACvB,CACE39M,KAAM,GAAG8lB,KAASne,SAClBke,UAAWyhM,GACXt9N,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,GAAG8lB,KAAS9e,sBAClB6e,UAAWyhM,MAIjB,CACEtnN,KAAM,WACN6lB,UAAW8iM,GACX3+N,KAAM,CAAE27B,YAAa,aAEvB,CACE3lB,KAAM,SAAS8lB,KAASne,oBACxBke,UAAWk/L,GACX/6N,KAAM,CAAE27B,YAAaI,KAAape,SAEpC,CACE3H,KAAM,SAAS8lB,KAAS9e,2BACxB6e,UAAWk/L,GACX/6N,KAAM,CAAE27B,YAAaI,KAAa/e,WAO5C,CACEhH,KAAM,MACNy7F,YAAa,CAACkF,KAA4BkC,MAC1C74G,KAAM,CACJg5G,wBAAyB,CACvBjxE,UAAW,MACXtM,WAAY,QACZgF,QAAS,MACT24E,aAAc,iBACdh9E,OAAQ,gDAEVT,aAAa,EACb0yB,KAAM,SACNr4C,KAAM,MAERgpN,aAAcA,IAAMC,EAAA30I,EAAA,kCAAArlD,KAAAg6L,EAAAx8N,KAAAw8N,EAAA,QAAgCh6L,KAAMjsC,GAAMA,EAAEomO,kBAGpE,CACEppN,KAAM,kBACNhW,KAAM,CAAE27B,YAAa,kBAAmB3lB,KAAM,MAC9CgpN,aAAcA,IAAMrgN,QAAAC,UAAAqmB,KAAAg6L,EAAAx8N,KAAAw8N,EAAA,OAAkCh6L,KAAMjsC,GAAMA,EAAEgjC,mBAGtE,CACEhmB,KAAM,eACNhW,KAAM,CAAE27B,YAAa,eAAgB3lB,KAAM,MAC3C4lB,SAAU,CACR,CACE5lB,KAAM8lB,KAAS9e,KACf6e,UAAWumK,GACX3wF,YAAa,CAACypG,IACdl7M,KAAM,CAAE27B,YAAaI,KAAa/e,WAM5C,CACEhH,KAAM,GACN6lB,UAAWotK,GACXrtK,SAAU,CACR,CAAE5lB,KAAM,QAAS6lB,UAAWmoK,IAC5B,CACEhuL,KAAM,wBACN6lB,UAAWqnK,GACXzxF,YAAa,CAACypG,OAIpB,CACEllM,KAAM,GACN6lB,UAAW6qK,GACX9qK,SAAU,CAAC,CAAE5lB,KAAM,KAAMylB,WAAY,aAcnC,MAAO4jM,sDAAgB,2DAAhBA,IAAgB,+DAFhB,CAACN,GAA8BH,IAAsCl2N,QAAA,CAN9EK,eAAawrE,QAAQ/4C,GAAQ,CAC3B8jM,SAAS,EACTC,mBAAoBC,sBAGdz2N,iBAAY,ECpkBlB,MAAO02N,GACXliO,YAAYmiO,EAAiCC,GAC3CD,EAAcE,UAAY,UAC1BF,EAAcG,UAAY,OAC1BH,EAAch+E,UAAY,SAE1Bi+E,EAAcE,UAAY,MAC5B,iDAPWJ,IAAY/gO,8BAAAC,oBAAAD,8BAAAC,oBAAA,4DAAZ8gO,GAAY54N,UAAA,cAAAoB,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAArB,EAAA7F,GAAA,EAAA6F,GCTzBrI,sBAAA,iFCQI3G,GAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,2EAGTC,KAAQ,MACRC,KAAQ,IChBNC,GAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,+GAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,6EAGTC,KAAQ,SACRC,KAAQ,eCrBNC,GAAM,CACRX,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,qCAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,+EAGTC,KAAQ,YACRC,KAAQ,ICmFJ,MAAOgoO,GACXviO,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAAC65C,GAASgsJ,GAAY3lM,KAAO4lM,IAC5D,iDAHWF,IAAYphO,qBAAAC,eAAA,2DAAZmhO,IAAY,+DAFZ,IAACt3N,qBAAcC,iCAA4BC,QAAA,CAlDpDE,eACAE,KACAu2N,GACAY,iBACAp3N,eACAI,cACAC,sBACAg3N,qBACAl3N,mBACA2iB,KACAghC,sBACAC,sBACAszK,qBACAvlM,aACAD,cACAI,iBACAE,eACAkyB,iBACAhyB,cACAilM,oBACAhlM,mBACAC,mBACAR,eACAK,eACAqyB,eACA/xB,iBACAV,aAEAulM,eAAU,EChFd,IAAIjpO,GAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,qCAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,2HAGTC,KAAQ,YACRC,KAAQ,ICrBNX,GAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,oKAGTC,KAAQ,gBACRC,KAAQ,oDCRJ,MAAOuoO,sDAAgB,2DAAhBA,IAAgB,8DAHjBhB,GAAkBz2N,eAAcM,sBAAqBJ,KAAcD,iBAAY,kBC2JrF,MAAOy3N,GACX/iO,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAACqmM,GAAWC,GAAaC,MACxD,iDAHWH,IAAa5hO,qBAAAC,eAAA,2DAAb2hO,IAAa,+DAFb,CAACI,kBAAeh4N,QAAA,CA9EzBE,eACAygB,KACAxgB,eACAC,KACAC,eACAE,cACAC,sBACAF,mBACAq3N,GACAH,qBACAtzK,sBACAqzK,iBACAt3N,KACAgkD,sBACAtxB,mBACAoxB,oBACA7gC,KACA2gC,uBACAhkD,KACAgzB,iBACA2xB,iBACApyB,iBACAH,aACAwyB,0BACAvyB,eACAF,cACAQ,cACAylM,aACAv3N,kBACAyxB,eAAU,ECnER,MAAO+lM,sDAAe,2DAAfA,IAAe,+DAFf,IAACp4N,qBAAcC,iCAA4BC,QAAA,CAvBpDC,KACAC,eACAC,eACAC,KACAC,eACAE,cACAC,sBACAX,KAEAa,oBAAe,EC0Bb,MAAOy3N,GACXtjO,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAACE,MAChC,iDAHWymM,IAASniO,qBAAAC,eAAA,2DAATkiO,IAAS,8DA5BlB33N,sBACAH,eACAD,KACAD,eACAD,eACAs3N,qBACAl3N,mBACA2xB,aACAw6C,YACAn6C,eACAN,cACAK,cACAD,iBACAF,eACAC,aACAulM,aACAE,KAAa,ECsCX,MAAOQ,GACXvjO,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAACE,MAChC,iDAHW0mM,IAASpiO,qBAAAC,eAAA,2DAATmiO,IAAS,8DA3ClB/3N,eACAH,eACAE,KACAu2N,GACAz2N,eACAK,cACAC,sBACAyiB,KACAgP,aACAK,eACAolM,aACAjrJ,YACA4rJ,qBACArmM,cACAI,iBACAE,eACAkyB,iBACAhyB,cACAilM,oBACAvlM,eACAK,eACAqyB,eACA/xB,iBACAV,eAAU,EC1CR,MAAOmmM,sDAAU,2DAAVA,IAAU,8DAXnBp4N,eACA03N,GACAM,GACAv3M,KACAy2M,GACAe,GACAC,GACAh4N,OAAY,iBCZZ+iD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,gGAGTC,KAAQ,eACRC,KAAQ,IChBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,i4BAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,yIAGTC,KAAQ,WACRC,KAAQ,ICrBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,wFAEN,CACDR,KAAQ,SACRC,MAAS,CACP4pO,GAAM,KACNC,GAAM,OACN5oO,EAAK,QAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,2HAGTC,KAAQ,OACRC,KAAQ,IC5BN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,mYAGTC,KAAQ,eACRC,KAAQ,IChBNX,GAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,yFAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,0DAGTC,KAAQ,SACRC,KAAQ,ICrBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,yPAGTC,KAAQ,WACRC,KAAQ,IChBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,ivCAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,iWAGTC,KAAQ,wBACRC,KAAQ,ICrBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8oBAGTC,KAAQ,eACRC,KAAQ,IChBN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,SACRC,MAAS,CACP4pO,GAAM,KACNC,GAAM,KACN5oO,EAAK,MAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,mBAEN,CACDR,KAAQ,SACRC,MAAS,CACP4pO,GAAM,KACNC,GAAM,IACN5oO,EAAK,MAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,kBAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,iMAGTC,KAAQ,YACRC,KAAQ,ICxCN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,4IAEN,CACDR,KAAQ,SACRC,MAAS,CACP4pO,GAAM,IACNC,GAAM,KACN5oO,EAAK,MAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,oFAGTC,KAAQ,iBACRC,KAAQ,IC5BN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,2IAEN,CACDR,KAAQ,SACRC,MAAS,CACP4pO,GAAM,IACNC,GAAM,KACN5oO,EAAK,MAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,iNAGTC,KAAQ,eACRC,KAAQ,IC5BN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,8DAEN,CACDR,KAAQ,SACRC,MAAS,CACP4pO,GAAM,OACNC,GAAM,OACN5oO,EAAK,QAEN,CACDlB,KAAQ,SACRC,MAAS,CACP4pO,GAAM,OACNC,GAAM,OACN5oO,EAAK,QAEN,CACDlB,KAAQ,SACRC,MAAS,CACP4pO,GAAM,OACNC,GAAM,OACN5oO,EAAK,QAEN,CACDlB,KAAQ,OACRC,MAAS,CACPO,EAAK,qCACLoO,UAAa,0BAEd,CACD5O,KAAQ,OACRC,MAAS,CACPO,EAAK,iDACLoO,UAAa,2BAGjBnO,KAAQ,iBACRC,KAAQ,ICjDN+zD,GAAM,CACRz0D,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,6cAGTC,KAAQ,yBACRC,KAAQ,gBChBNX,GAAM,CACRC,KAAQ,MACRC,MAAS,CACPC,MAAS,6BACTC,QAAW,YACXC,KAAQ,eACRC,MAAS,GACTC,OAAU,IAEZC,QAAW,CAAC,CACVP,KAAQ,OACRC,MAAS,CACPO,EAAK,yIAEN,CACDR,KAAQ,OACRC,MAAS,CACPO,EAAK,mGAGTC,KAAQ,SACRC,KAAQ,IC6CJ,MAAOqpO,GACX5jO,YAAoB08B,GAAAx8B,KAAAw8B,cAClBx8B,KAAKw8B,YAAYC,YAAY,CAC3BknM,GACAC,GACAC,GACAC,GACAxB,GACAyB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,KACAC,IAEJ,iDAnBWd,IAAgBziO,qBAAAC,eAAA,2DAAhBwiO,IAAgB,8DA3BzBv4N,eACAoxB,cACAkoM,oBACAz1K,oBACA4yK,GACAv2N,KACAK,0BACAJ,eACA0xB,gBACAI,aACAq6C,cACAD,eACAt6C,aACAwnM,qBAAgB,ECzBd,MAAOC,sDAAU,2DAAVA,IAAU,8DAjBnB15G,iBAAcn0C,UACd3rE,eACAu4N,GACA10K,oBACA1jD,eACAD,KACAq3N,oBAEQgB,KAAgB,kBCItB,MAAOkB,GACX9kO,YACUyU,EACD8c,EACCnjB,EACAs/L,GAHAxtM,KAAAuU,SACDvU,KAAAqxB,sBACCrxB,KAAAkO,qBACAlO,KAAAwtM,eACP,CAEHq3B,UAAU10L,EAA2B1gC,GACnC,MAAMq1N,EAAe30L,EAAQhQ,QAAQztB,IAAI,UACzC,IAAIqyN,EAEJ,MAAMjqC,EAASp7J,OAAOC,SAASm7J,OAE7BiqC,EADED,GAAgBA,EAAazlN,WAAW,8BACzB8wB,EAAQxgB,QAERwgB,EAAQxgB,MAAM,CAC7Bq1M,WAAY,CACV5kM,OAAQoE,KAAcC,gBAAgB,IAAK,QAKjD,IAAIwgM,EAASl+I,aAAawD,QAAQ,mBAE9B06I,IAAWA,EAAOnzH,SAAS,OAC7BmzH,GAAU,KAYZ,IAVqBjlO,KAAKuU,OAAOyK,IAAIriB,MAAM,KAAK,GAWhCuF,SAAS,WATE,CACzB,iBACA,kBACA,+BACA,+BACA,0BAKoBA,SAASiuC,EAAQnxB,MACrCimN,IACCA,EAAO/iO,SAAS44L,GACjB,CACA,MAAMp8K,EAAQ1e,KAAKwtM,cAAcE,SAAS3mH,aAAawD,QAAQ,yBAC/Dw6I,EAAiBA,EAAep1M,MAAM,CACpC3Q,IAAK,GAAGimN,IAASF,EAAe/lN,MAChCgmN,WAAY,CACV,8BAA+BlqC,EAC/BoqC,cAAe,UAAUxmN,MAG/B,CAEA,OAAOjP,EAAK01N,OAAOJ,GAAgB/1N,QACjCwV,cAAYmF,IACV,GAAIA,aAAgBy7M,oBAAmB,CACrC,IAAInnH,EACJ,OAAQt0F,EAAKjb,QACX,KAAK,IACH,MAAMmvG,EAAe,IAAI94F,IAEnBD,GAAO6E,EAAKpI,MAAMuD,KACpB3S,kBAAgB2S,KAClBA,GAAKmD,SAASmW,UAAYtZ,GAAKmD,SAASmW,WAAazU,EAAKpI,MAAM6c,UAEhEy/E,EAAazjH,KAAO0qB,GAAK1qB,KACzByjH,EAAa51F,SAAWnD,GAAKmD,UAE7B41F,EAAa51F,SAAW0B,EAAKpI,MAG/Bs8F,EAAa5rF,SAAU,EACvB4rF,EAAa+J,UAAYj+F,EAAKpI,MAC9B08F,EAAYj+G,KAAKqxB,oBAAoBusF,WAAWC,GAChD,MACF,KAAK,IACH79G,KAAKkO,mBAAmBuxB,SACxBz/B,KAAKuU,OAAOC,SAAS,CAAC,WACtB,MACF,KAAK,IACHxU,KAAKuU,OAAOC,SAAS,CAAC,SAAU,CAC9B6V,MAAO,CACLuU,QAASp1B,2EACTm1B,OAAQn1B,yBACR+e,KAAM,aACN2oC,OAAQ,eAGZ,MACF,QACE+sD,EAAYj+G,KAAKqlO,oBAAoB17M,GAQzCA,EAAKoD,eAAiB,KACpB/sB,KAAKqxB,oBAAoB8rF,OAAOc,EAAS,EAO3Ct0F,EAAK27M,iBAAmB,SAAU52N,GAC5B1O,KAAK0O,SAAWA,GAClB1O,KAAK+sB,gBAET,CACF,CAEA,SAAOw4M,cAAqB57M,EAAI,GAGtC,CAEQ07M,oBAAoB17M,GAC1B,OAAO3pB,KAAKqxB,oBAAoBxG,KAAK,KACnC,IAAI+T,EAAU,GACd,OAAIzsB,kBAAgBwX,EAAKpI,QAAUpP,aAAWwX,EAAKpI,MAAM8D,QACvDuZ,EAAUjV,EAAKpI,MAAM8D,OACZlT,aAAWwX,EAAKpI,OACzBqd,EAAUjV,EAAKpI,MACNpP,aAAWwX,EAAKiV,WACzBA,EAAUjV,EAAKiV,SAEV,IAAIwqE,KACTp3E,KAAiBzQ,MACjB,GAAGoI,EAAKjb,YAAYib,EAAK67M,aACzB5mM,OACAhF,EACAjQ,EAAK0/E,YAAc,EAGzB,iDAzIWu7H,IAAqB3jO,qBAAAC,UAAAD,qBAAA8H,KAAA9H,qBAAA+H,KAAA/H,qBAAAgI,IAAA,+DAArB27N,GAAqBzjO,QAArByjO,GAAqBxjO,UAAAC,WAFpB,QAAM,ECtBd,MAAOokO,GACX3lO,YAAoBgsB,GAAA9rB,KAAA8rB,MAAmB,CAEvC45M,QAAQ1mN,EAAa4f,EAAiB2gE,GACpC,MAAMpvD,EAAU,CACdnxB,IAAKA,EACL4f,QAASA,EACT2gE,MAAOA,GAET,OAAOv/F,KAAK8rB,KAAKzwB,KAAK,0BAA2B80C,EACnD,iDAVWs1L,IAAcxkO,qBAAAC,cAAA,+DAAdukO,GAActkO,QAAdskO,GAAcrkO,UAAAC,WAFb,QAAM,ECGd,MAAOskO,GACX7lO,YAAoBk7G,EAA4BzmG,GAA5BvU,KAAAg7G,WAA4Bh7G,KAAAuU,QAAiB,CAEjE8xM,YAAY9kM,GACV,MAAMqkN,EAAiB5lO,KAAKg7G,SAAStoG,IAAI+yN,IACnCzmN,EAAM0gB,OAAOC,SAAS6nH,KACtB5oH,EAAUrd,GAASA,EAAMqd,QACzB2gE,EAAQh+E,GAASA,EAAMg+E,MAE7B,GADAqmI,EAAeF,QAAQ1mN,EAAK4f,EAAS2gE,GAAO5wF,cACxC4S,EAAMskN,qBAAqBpnM,OAa7B,MAAMld,EAZNoiC,WACE,IACE3jD,KAAKuU,OAAOC,SAAS,CAAC,SAAU,CAC9B6V,MAAO,CACLuU,QAASrd,EAAMskN,UAAUjnM,QACzBD,OAAQpd,EAAMskN,UAAUlnM,OACxBpW,KAAMhH,EAAMskN,UAAUt9M,QAG5B,GAKN,iDAxBWo9M,IAAc1kO,sDAAAC,UAAA,+DAAdykO,GAAcxkO,QAAdwkO,GAAcvkO,WAAA,EC2CrB,MAAO0kO,sDAAS,2DAATA,GAAS9gH,UAAA,CA/BRg9G,KAAY,+DAcb,CACT,CACEtyN,QAASq2N,eACTC,SAAUL,IAEZ,CACEj2N,QAASu2N,oBACTD,SAAUpB,GACVxuJ,OAAO,GAET,CACE1mE,QAASw2N,gBACTt2N,SAAU,KAAO8vB,OAAOC,SAASwmM,SAASxpO,MAAM,IAAK,GAAG,IAAM,QAEhEypO,wBAAkBC,8BACnBp7N,QAAA,CA3BCq7N,gBACAC,0BACAC,eAAa1vJ,QAAQ,CACnB2vJ,cAAe,kBACfC,mBAAmB,EACnBC,YAAY,IAEd/E,GACA+C,GACAt5N,KACAk4N,GAbQl4N,OAAY,ECXpB+8D,KAAYw+J,eACdC,oBAGFC,oBACGC,gBAAgBjB,IAChBt+L,KAAMw/L,IACL,MAAIC,eAAa,CAGf,MAAMC,EADiBF,EAAUhsH,SAAStoG,IAAIy0N,kBACVC,WAAW,IAE/CC,sBAAiBH,EACnB,IAED1tF,MAAO0mE,GAAQonB,QAAQ/lN,MAAM2+L,sCCjBzB,MAAM93I,EAAc,CACzBkhI,aAAc,QACds9B,YAAY,EACZv+J,KAAM,yBCRR,SAAAk/J,EAAA7oO,EAAAgxI,EAAA7iD,EAAAhyF,EAAAs1E,EAAA31E,EAAA8E,GACA,IACA,IAAArD,EAAAyC,EAAAlE,GAAA8E,GACAkoO,EAAAvrO,EAAAqE,KACA,OAAI5B,GACJ,YAAAmuF,EAAAnuF,EACA,CACAzC,EAAAwrO,KAAA/3F,EAAA83F,GAAAtmN,QAAAC,QAAAqmN,GAAAhgM,KAAA3sC,EAAAs1E,EACA,CACA,SAAAxvD,EAAAjiB,GACA,kBACA,IAAAgxI,EAAA1vI,KACA6sF,EAAAiG,UACA,WAAA5xE,QAAA,SAAArmB,EAAAs1E,GACA,IAAA31E,EAAAkE,EAAAZ,MAAA4xI,EAAA7iD,GACA,SAAA66I,EAAAhpO,GACA6oO,EAAA/sO,EAAAK,EAAAs1E,EAAAu3J,EAAAC,EAAA,OAAAjpO,EACA,CACA,SAAAipO,EAAAjpO,GACA6oO,EAAA/sO,EAAAK,EAAAs1E,EAAAu3J,EAAAC,EAAA,QAAAjpO,EACA,CACAgpO,OAAA,EACA,EACA,CACA","names":["_16","elem","attrs","xmlns","viewBox","fill","width","height","content","d","name","size","_32","balanced","a","b","str","RegExp","maybeMatch","r","range","start","end","pre","slice","body","length","post","reg","m","match","begs","beg","left","right","result","ai","indexOf","bi","i","push","pop","module","exports","require","expandTop","substr","expand","escapeBraces","split","join","escSlash","escOpen","escClose","escComma","escPeriod","map","unescapeBraces","Math","random","numeric","parseInt","charCodeAt","parseCommaParts","parts","p","postParts","shift","apply","embrace","isPadded","el","test","lte","y","gte","isTop","expansions","k","expansion","n","N","isNumericSequence","isAlphaSequence","isSequence","isOptions","x","max","incr","abs","pad","some","c","String","fromCharCode","need","z","Array","j","NumberFormatterService","constructor","formatter","this","bytesLabels","bytesPerSecondLabels","secondsLabels","unitlessLabels","formatFromTo","value","units","targetedUnits","factor","labels","decimals","formatNumberFromTo","formatBytesFromTo","formatBytesPerSecondFromTo","formatSecondsFromTo","formatUnitlessFromTo","i0","i1","factory","ɵfac","providedIn","_c1","ctx_r1","truncateLabel","_c2","data_r1","label","maxConvertedValue","maxConvertedValueUnits","DashboardAreaChartComponent_div_5_div_2_ng_container_3_Template","DashboardAreaChartComponent_div_5_div_2_div_5_Template","pointBackgroundColor","chartTitle","includes","maxValue","currentData","currentDataUnits","DashboardAreaChartComponent_div_5_div_2_Template","data","DashboardAreaChartComponent","cssHelper","dimlessBinary","dimlessBinaryPerSecond","dimlessPipe","numberFormatter","labelsArray","isMultiCluster","chartData","dataset","options","currentChartData","chartAreaBorderPlugin","beforeDraw","chart","plugins","borderArea","ctx","chartArea","top","save","strokeStyle","chartAreaBorder","borderColor","lineWidth","borderWidth","setLineDash","borderDash","lineDashOffset","borderDashOffset","strokeRect","restore","chartColors","propertyValue","legend","display","tooltip","mode","external","tooltipModel","bind","intersect","displayColors","backgroundColor","callbacks","title","tooltipItem","xLabel","context","formattedValue","chartDataUnits","responsive","maintainAspectRatio","animation","elements","point","radius","hover","scales","type","grid","time","tooltipFormat","afterFit","scaleInstance","beginAtZero","ticks","maxTicksLimit","ngOnChanges","changes","updateChartData","ngAfterViewInit","forEach","_label","index","colorIndex","tension","target","setChartTicks","dataArray","currentValue","_data","formatData","currentDataValue","convertUnits","sort","parseFloat","update","array","formattedData","Number","convertToChartDataUnits","replace","dataWithUnits","dataUnits","transform","format_number","maxValueDataUnits","allDataValues","reduce","concat","values","callback","i2","i3","i4","i5","i6","selectors","viewQuery","rf","BaseChartDirective","$localize","DashboardAreaChartComponent_div_5_Template","_c0","key_r1","DashboardTimeSelectorComponent","selectedTime","EventEmitter","times","timeToDate","emitTime","emit","step","secondsAgo","moment","unix","outputs","decls","vars","consts","template","$event","DashboardTimeSelectorComponent_option_2_Template","DashboardV3Module","provideCharts","withDefaultRegisterables","imports","CephSharedModule","CommonModule","NgbNavModule","SharedModule","RouterModule","NgbTooltipModule","FormsModule","ReactiveFormsModule","SimplebarAngularModule","ToggletipModule","InlineLoadingModule","SUPPORTED_FSAL","CEPH","RGW","ctx_r0","selection","NfsClusterDetailsComponent","inputs","i18n_0","NfsClusterDetailsComponent_ng_container_0_Template","expandedRow","_r1","setExpandedRow","loadData","updateSelection","NfsClusterComponent_ng_container_0_cd_nfs_cluster_details_3_Template","clusters_r3","columns","permission","tableActions","row_r4","virtual_ip","port","NfsClusterComponent_ng_template_2_span_0_Template","backend_r5","ip","NfsClusterComponent_ng_template_4_span_0_span_1_Template","NfsClusterComponent_ng_template_4_span_0_Template","backends_r6","backend_r7","hostname","NfsClusterComponent_ng_template_6_span_0_span_1_Template","NfsClusterComponent_ng_template_6_span_0_Template","backends_r8","NfsClusterComponent","ListWithDetails","actionLabels","ngZone","authStorageService","nfsService","orchService","super","CdTableSelection","subject","BehaviorSubject","ngOnInit","status","subscribe","orchStatus","getPermissions","nfs","clusters$","pipe","switchMap","nfsClusterList","prop","flexGrow","cellTemplate","hostnameTpl","ipAddrTpl","virtualIpTpl","next","provide","URLBuilderService","useValue","NfsClusterComponent_ng_container_0_Template","NfsClusterComponent_ng_template_2_Template","NfsClusterComponent_ng_template_4_Template","NfsClusterComponent_ng_template_6_Template","available","NfsFormClientComponent_div_7_ng_template_11_span_1_Template","NfsFormClientComponent_div_7_ng_template_11_span_2_Template","ctx_r3","showError","index_r3","formDir_r5","item_r6","getAccessTypeHelp","NfsFormClientComponent_div_7_ng_template_18_span_0_Template","getValue","squash_r7","_r2","removeClient","NfsFormClientComponent_div_7_ng_template_11_Template","NfsFormClientComponent_div_7_option_17_Template","NfsFormClientComponent_div_7_ng_template_18_Template","NfsFormClientComponent_div_7_option_24_Template","item_r8","controls","addresses","valid","dirty","addressesError_r9","accessTypeHelper_r10","nfsAccessType","squashHelperTpl","nfsSquash","getNoSquashDescr","NfsFormClientComponent","icons","Icons","Object","keys","_","clients","client","addClient","patchValue","clientsFormArray","form","get","getNoAccessTypeDescr","accessTypeItem","find","currentAccessTypeItem","help","REGEX_IP","REGEX_LIST_IP","fg","CdFormGroup","UntypedFormControl","validators","Validators","required","pattern","access_type","squash","removeAt","control","formDir","at","trackByFn","contentQueries","dirIndex","NfsFormClientComponent_span_5_Template","NfsFormClientComponent_div_7_Template","cluster_r2","cluster_id","_r3","router","navigate","outlets","modal","NfsFormComponent_ng_container_1_ng_template_17_span_0_Template","nfsForm","allClusters","_r6","onExportTypeChange","filesystem_r8","NfsFormComponent_ng_container_1_div_21_ng_template_7_span_0_Template","_r7","volumeChangeHandler","NfsFormComponent_ng_container_1_div_21_option_3_Template","NfsFormComponent_ng_container_1_div_21_option_4_Template","NfsFormComponent_ng_container_1_div_21_option_5_Template","NfsFormComponent_ng_container_1_div_21_option_6_Template","NfsFormComponent_ng_container_1_div_21_ng_template_7_Template","fsal","fs_name","invalid","fsNameError_r9","allFsNames","user_r10","user_id","NfsFormComponent_ng_container_1_div_22_ng_template_7_span_0_Template","NfsFormComponent_ng_container_1_div_22_option_3_Template","NfsFormComponent_ng_container_1_div_22_option_4_Template","NfsFormComponent_ng_container_1_div_22_option_5_Template","NfsFormComponent_ng_container_1_div_22_option_6_Template","NfsFormComponent_ng_container_1_div_22_ng_template_7_Template","userIdError_r11","allRGWUsers","NfsFormComponent_ng_container_1_div_24_ng_template_4_span_0_Template","NfsFormComponent_ng_container_1_div_24_ng_template_4_Template","sec_label_xattr","secLabelError_r12","subvol_grp_r14","_r13","getSubVol","NfsFormComponent_ng_container_1_div_25_option_3_Template","NfsFormComponent_ng_container_1_div_25_option_4_Template","NfsFormComponent_ng_container_1_div_25_option_5_Template","allsubvolgrps","defaultSubVolGroup","subvolume_r16","NfsFormComponent_ng_container_1_div_26_ng_template_7_span_0_Template","_r15","setSubVolPath","NfsFormComponent_ng_container_1_div_26_option_3_Template","NfsFormComponent_ng_container_1_div_26_option_4_Template","NfsFormComponent_ng_container_1_div_26_option_5_Template","NfsFormComponent_ng_container_1_div_26_option_6_Template","NfsFormComponent_ng_container_1_div_26_ng_template_7_Template","allsubvols","subvolume","subvolumeError_r17","NfsFormComponent_ng_container_1_div_27_ng_template_4_span_0_Template","NfsFormComponent_ng_container_1_div_27_ng_template_4_span_1_Template","NfsFormComponent_ng_container_1_div_27_ng_template_4_span_2_Template","NfsFormComponent_ng_container_1_div_27_ng_template_4_span_3_Template","hasError","touched","NfsFormComponent_ng_container_1_div_27_ng_template_4_Template","path","pathError_r18","pathDataSource","NfsFormComponent_ng_container_1_div_28_ng_template_4_span_0_Template","NfsFormComponent_ng_container_1_div_28_ng_template_4_span_1_Template","NfsFormComponent_ng_container_1_div_28_ng_template_4_Template","bucketPathError_r19","bucketDataSource","NfsFormComponent_ng_container_1_ng_template_36_span_0_Template","NfsFormComponent_ng_container_1_div_38_ng_template_6_span_0_Template","NfsFormComponent_ng_container_1_div_38_ng_template_6_span_1_Template","NfsFormComponent_ng_container_1_div_38_ng_template_6_span_2_Template","NfsFormComponent_ng_container_1_div_38_ng_template_6_span_3_Template","NfsFormComponent_ng_container_1_div_38_ng_template_4_Template","NfsFormComponent_ng_container_1_div_38_ng_template_6_Template","pseudoHelper_r20","pseudo","pseudoError_r21","accessType_r22","NfsFormComponent_ng_container_1_ng_template_45_span_0_Template","NfsFormComponent_ng_container_1_ng_template_47_span_0_Template","storageBackend","NfsFormComponent_ng_container_1_ng_template_49_span_0_Template","squash_r23","NfsFormComponent_ng_container_1_ng_template_57_span_0_Template","NfsFormComponent_ng_container_1_ng_template_57_span_1_Template","NfsFormComponent_ng_container_1_ng_template_57_span_2_Template","NfsFormComponent_ng_container_1_ng_template_57_span_3_Template","NfsFormComponent_ng_container_1_ng_template_59_span_0_Template","NfsFormComponent_ng_container_1_ng_template_68_span_0_Template","storageBackendError","NfsFormComponent_ng_container_1_option_10_Template","NfsFormComponent_ng_container_1_option_11_Template","NfsFormComponent_ng_container_1_option_12_Template","NfsFormComponent_ng_container_1_option_13_Template","NfsFormComponent_ng_container_1_cd_alert_panel_14_Template","NfsFormComponent_ng_container_1_ng_template_15_Template","NfsFormComponent_ng_container_1_ng_template_17_Template","NfsFormComponent_ng_container_1_div_19_Template","NfsFormComponent_ng_container_1_div_21_Template","NfsFormComponent_ng_container_1_div_22_Template","NfsFormComponent_ng_container_1_div_23_Template","NfsFormComponent_ng_container_1_div_24_Template","NfsFormComponent_ng_container_1_div_25_Template","NfsFormComponent_ng_container_1_div_26_Template","NfsFormComponent_ng_container_1_div_27_Template","NfsFormComponent_ng_container_1_div_28_Template","NfsFormComponent_ng_container_1_ng_template_36_Template","NfsFormComponent_ng_container_1_div_38_Template","NfsFormComponent_ng_container_1_option_42_Template","NfsFormComponent_ng_container_1_option_43_Template","NfsFormComponent_ng_container_1_option_44_Template","NfsFormComponent_ng_container_1_ng_template_45_Template","NfsFormComponent_ng_container_1_ng_template_47_Template","NfsFormComponent_ng_container_1_ng_template_49_Template","NfsFormComponent_ng_container_1_option_54_Template","NfsFormComponent_ng_container_1_option_55_Template","NfsFormComponent_ng_container_1_option_56_Template","NfsFormComponent_ng_container_1_ng_template_57_Template","NfsFormComponent_ng_container_1_ng_template_59_Template","NfsFormComponent_ng_container_1_ng_template_68_Template","NfsFormComponent_ng_container_1_cd_alert_panel_72_Template","submitAction","action","resource","clusterError_r25","clusterHelperText_r24","isEdit","protocolNfsv3","protocolError_r26","protocolNfsv4","accessTypeError_r29","accessTypeHelper_r27","accessTypeWarning_r28","squashError_r31","squashHelper_r30","transportUDP","transportError_r32","transportTCP","NfsFormComponent","CdForm","subvolService","subvolgrpService","route","rgwBucketService","rgwUserService","rgwSiteService","formBuilder","taskWrapper","export_id","defaultAccessType","selectedFsName","selectedSubvolGroup","selectedSubvol","DEFAULT_SUBVOLUME_GROUP","text$","debounceTime","distinctUntilChanged","mergeMap","token","getPathTypeahead","val","getBucketTypeahead","pool","getFsalFromRoute","url","createForm","promises","listClusters","filesystems","startsWith","getPathfromFsal","EDIT","params","decodeURIComponent","rgw_export_type","setValue","RgwExportType","BUCKET","setBucket","setUsers","getData","disable","CREATE","subvolume_group","forkJoin","resolveClusters","resolveFsals","resolveModel","loadingReady","isDefaultSubvolumeGroup","_this","_asyncToGenerator","subvolgrp","setSubVolGrpPath","setUpVolumeValidation","getSubVolGrp","fsName","subvolGroup","Promise","resolve","reject","updatePath","info","error","subvol","subvolumeGroup","subVolumeControl","setValidators","clearValidators","updateValueAndValidity","CdValidators","custom","isolatedSlashCondition","requiredIf","security_label","res","protocols","transports","entries","key","addressStr","address","substring","setPathValidation","clusters","cluster","resolveRealms","resolveFilesystems","resolveRouteParams","realms","isDefaultRealm","Error","of","fsalDescr","nfsFsal","f","descr","enable","list","users","accessTypeChangeHandler","accessType","setAsyncValidators","bucketExistence","pathExistence","markAsDirty","getId","lsDir","paths","filter","dirName","toLowerCase","catchError","bucketList","bucketName","requestModel","buildRequest","wrapTaskAroundCall","task","FinishedTask","call","create","errorResponse","setFormErrors","complete","detail","toString","setErrors","pseudoAlreadyExists","cdSubmitButton","uniq","requiredExistenceResult","pristine","directory","pathNameNotAllowed","i7","i8","i9","i10","i11","NfsFormComponent_ng_container_1_Template","loading","clientsColumns","NfsDetailsComponent_ng_container_0_ng_template_6_Template","NfsDetailsComponent_ng_container_0_ng_template_10_Template","nav_r2","NfsDetailsComponent","selectedItem","protocol","features","NfsDetailsComponent_ng_container_0_Template","NfsListComponent_ng_template_5_ng_container_0_Template","NfsListComponent_ng_template_5_ng_container_1_Template","value_r3","protocol_r4","NfsListComponent_ng_template_7_span_0_Template","protocols_r5","transport_r6","NfsListComponent_ng_template_9_span_0_Template","transports_r7","value_r8","NfsListComponent_ng_template_11_span_0_Template","NfsListComponent_ng_template_11_span_1_Template","USER","NfsListComponent","modalService","taskListService","isDefaultCluster","builders","metadata","prefix","getNfsUri","first","encodeURI","createAction","icon","add","routerLink","canBePrimary","hasSingleSelection","editAction","edit","deleteAction","destroy","click","deleteNfsModal","DELETE","cellTransformation","CellTemplate","executing","pathTmpl","protocolTpl","transportTpl","init","clusterId","resp","prepareResponse","onFetchError","taskFilter","itemFilter","ngOnDestroy","summaryDataSubscription","unsubscribe","filteredresp","id","state","table","reset","viewCacheStatus","ViewCacheStatus","ValueException","entry","modalRef","show","DeleteConfirmationModalComponent","impact","DeletionImpact","high","itemDescription","itemNames","submitActionObservable","delete","TaskListService","NfsListComponent_cd_nfs_details_4_Template","NfsListComponent_ng_template_5_Template","NfsListComponent_ng_template_7_Template","NfsListComponent_ng_template_9_Template","NfsListComponent_ng_template_11_Template","PerformanceCounterModule","PerformanceCounterService","http","service_type","service_id","observableOf","counters","__decorate","cdEncode","HttpClient","row_r3","unit","getCounters","TablePerformanceCounterComponent_cd_table_0_ng_template_1_Template","TablePerformanceCounterComponent","performanceCounterService","valueTpl","serviceType","serviceId","preventDefault","TablePerformanceCounterComponent_cd_table_0_Template","TablePerformanceCounterComponent_ng_template_1_Template","warning_r4","RgwRealm","RgwZonegroup","RgwZone","SystemKey","RgwMultisiteSyncPolicyStatus","FlowType","ENABLED","FORBIDDEN","ALLOWED","directional","symmetrical","ManagedPolicyName","AmazonS3FullAccess","AmazonS3ReadOnlyAccess","ManagedPolicyArnMap","DataTableModule","PipesModule","PgCategory","CATEGORY_CLEAN","CATEGORY_WORKING","CATEGORY_WARNING","CATEGORY_UNKNOWN","VALID_CATEGORIES","isValidType","setTypeStates","states","PgCategoryService","categories","createCategories","getAllTypes","getTypeByStates","pgStatesText","pgStates","getPgStatesFromText","intersections","category","pgWorkingStates","trim","RoleService","role","clone","newName","new_name","put","exists","roles","currentRole","ScopeService","RoleFormMode","editing","RoleFormModel","RoleFormComponent_ng_container_1_ng_template_12_span_0_Template","RoleFormComponent_ng_container_1_ng_template_12_span_1_Template","ctx_r2","roleForm","formDir_r2","RoleFormComponent_ng_container_1_ng_template_12_Template","submit","nameError_r4","roleFormMode","scopes_permissions","scopes","initialValue","RoleFormComponent","roleService","scopeService","notificationService","asyncValidators","unique","description","cellClass","initEdit","initCreate","observables","observableForkJoin","getRequest","roleFormModel","NotificationType","success","RoleFormComponent_ng_container_1_Template","RoleDetailsComponent","checkIcon","scope","scope_permission","read","RoleDetailsComponent_ng_container_0_Template","UserTabsComponent","RoleListComponent","emptyPipe","urlBuilder","user","addAction","getCreate","cloneAction","CLONE","cloneRole","system","getEdit","deleteRoleModal","getRoles","deleteRole","dismissAll","componentInstance","stopLoadingSpinner","FormModalComponent","fields","titleText","submitButtonText","onSubmit","RoleListComponent_cd_role_details_3_Template","UserFormMode","UserFormModel","UserFormComponent_ng_container_1_ng_template_12_span_0_Template","UserFormComponent_ng_container_1_ng_template_12_span_1_Template","userForm","passwordPolicyHelpText","passwordValuation","UserFormComponent_ng_container_1_ng_template_19_span_0_Template","UserFormComponent_ng_container_1_ng_template_19_span_1_Template","UserFormComponent_ng_container_1_ng_template_19_span_2_Template","UserFormComponent_ng_container_1_ng_template_25_span_0_Template","UserFormComponent_ng_container_1_ng_template_25_span_1_Template","UserFormComponent_ng_container_1_div_27_cd_helper_3_Template","UserFormComponent_ng_container_1_div_27_span_5_Template","pwdExpirationSettings","pwdExpirationSpan","passwordexp","UserFormComponent_ng_container_1_ng_template_36_span_0_Template","allRoles","UserFormComponent_ng_container_1_ng_template_12_Template","UserFormComponent_ng_container_1_cd_helper_17_Template","UserFormComponent_ng_container_1_ng_template_19_Template","UserFormComponent_ng_container_1_ng_template_25_Template","UserFormComponent_ng_container_1_div_27_Template","UserFormComponent_ng_container_1_ng_template_36_Template","UserFormComponent_ng_container_1_div_38_Template","UserFormComponent_ng_container_1_div_39_Template","UserFormComponent_ng_container_1_div_40_Template","username","usernameError_r4","password","passwordError_r5","confirmpassword","confirmpasswordError_r6","isSSO","email","emailError_r7","isCurrentUser","UserFormComponent","authService","userService","passwordPolicyService","settingsService","userFormMode","messages","SelectMessages","empty","pwdExpirationFormat","getHelpText","helpText","group","validateUserName","passwordPolicy","_valid","credits","valuation","passwordStrengthLevelClass","mapCreditsToCssClass","pwdExpirationDate","enabled","pwdUpdateRequired","getStandardSettings","CdPwdExpirationSettings","pwdExpirationDateField","expirationDate","format","disableForEdit","userFormModel","response","setResponse","mom","set","hour","minute","second","isUserRemovingNeededRolePermissions","initialState","buttonText","bodyTpl","removeSelfUserReadUpdatePermissionTpl","close","doEditAction","onCancel","ConfirmationModalComponent","getUsername","isUserChangingRoles","hasUserReadUpdatePermissions","userPermissions","every","logout","clearExpirationDate","undefined","UserFormComponent_ng_container_1_Template","UserFormComponent_ng_template_2_Template","UserFormComponent_ng_template_4_Template","role_r2","isLast_r3","UserListComponent_ng_template_3_span_0_Template","value_r4","row_r6","remainingDays","ctx_r6","expirationDangerAlert","expirationWarningAlert","value_r5","warning","row_r8","UserListComponent_ng_template_7_i_0_Template","value_r9","remainingTimeWithoutSeconds","UserListComponent","deleteUserModal","warningTpl","userRolesTpl","durationTpl","getValues","USER_PWD_EXPIRATION_WARNING_1","USER_PWD_EXPIRATION_WARNING_2","getUsers","getRemainingTimeWithoutSeconds","getRemainingDays","deleteUser","sessionUsername","getWarningIconClass","expirationDays","getWarningClass","floor","getRemainingTime","withSeconds","Date","now","UserListComponent_ng_template_3_Template","UserListComponent_ng_template_5_Template","UserListComponent_ng_template_7_Template","AuthModule","iconService","registerAll","ChevronDown","Close","AddFilled","SubtractFilled","Reset","EyeIcon","UIShellModule","InputModule","GridModule","ButtonModule","IconModule","CheckboxModule","RadioModule","SelectModule","NumberModule","ModalModule","DatePickerModule","TimePickerModule","NgbPopoverModule","NgbModule","ComboBoxModule","routes","redirectTo","pathMatch","breadcrumbs","children","component","URLVerbs","ActionLabels","RoutedAuthModule","forChild","DashboardError","DashboardNotFoundError","header","message","DashboardUserDeniedError","ApiClient","getVersionHeaderValue","major","minor","AuthService","check","login","credentials","tap","permissions","sso","remove","window","location","redirect_url","snapshot","queryParams","skipLocationChange","CephServiceService","httpParams","serviceName","headers","Accept","append","PaginateObservable","getDaemons","serviceSpec","service_name","service_spec","observe","getKnownTypes","CephfsSubvolumeGroupService","baseURL","volName","groupName","poolName","uid","gid","vol_name","group_name","pool_layout","mapTo","CephfsSubvolumeService","subVolumeGroupName","subVolumeName","namespace","subvol_name","namespace_isolated","retainSnapshots","retain_snapshots","existsInFs","getSnapshots","getSnapshotInfo","snapshotName","snap_name","snapshotExists","createSnapshot","deleteSnapshot","createSnapshotClone","cloneName","targetGroupName","clone_name","target_group_name","ConfigurationService","findValue","config","section","v","indexOfDot","default","getConfigData","configOption","configOptionNames","bulkCreate","configOptions","CrushRuleService","apiPath","formTooltips","root","failure_domain","device_class","rule","getInfo","HostService","deviceService","baseUIURL","predefinedLabels","facts","host","addr","CdHelperClass","cdVersionHeader","getDevices","devices","device","prepareDevice","getSmartData","getLabels","updateLabels","maintenance","force","drain","update_labels","identifyDevice","duration","getInventoryParams","refresh","HttpParams","getInventory","inventoryList","inventoryDeviceList","observable","toArray","hosts","device_id","getAllHosts","GLOBAL","MgrModuleService","blockUI","summaryService","updateCompleted$","Subject","REFRESH_INTERVAL","getConfig","updateConfig","getOptions","updateModuleState","navigateTo","notificationText","navigateByUrl","reconnectingMessage","suspendToasties","timer","retryWhen","errors","delay","stop","refreshBtn","then","startPolling","MultiClusterService","timerService","TOKEN_CHECK_INTERVAL","msSource","msData$","asObservable","tokenStatusSource","tokenStatusSource$","showDeletionMessage","isClusterAddedFlag","prometheusConnectionError","getCluster","getClusterObserver","startClusterTokenStatusPolling","checkAndStartTimer","checkTokenStatus","getClusterTokenStatusObserver","subscribeClusterTokenStatus","refreshTokenStatus","subscribeOnce","setCluster","deleteCluster","clusterName","clusterUser","editCluster","clusterAlias","verify","ssl_certificate","cluster_alias","addCluster","hub_url","ssl","cert","ttl","ssl_verify","reConnectCluster","cluster_token","requestBody","showPrometheusDelayMessage","isClusterAdded","managePrometheusConnectionError","refreshMultiCluster","currentRoute","NfsService","uiApiPath","disabled","no_root_squash","root_id_squash","root_squash","all_squash","exportId","root_dir","throwError","fsals","OrchestratorService","disableMessages","noOrchestrator","missingFeature","hasFeature","feature","getTableActionDisableDesc","getName","obs","count","PoolService","rbdConfigurationService","hasOwnProperty","srcpool","encodeURIComponent","getList","getConfiguration","assign","getOptionByName","attrsStr","toPromise","RbdConfigurationService","PrometheusService","timerTime","lastHourDateObject","settingsKey","alertmanager","prometheus","settings","timerGetPrometheusDataSub","getPrometheusData","getPrometheusQueryData","ifAlertmanagerConfigured","fn","elseFn","ifSettingConfigured","disableAlertmanagerConfig","disableSetting","ifPrometheusConfigured","disablePrometheusConfig","getAlerts","clusterFilteredAlerts","cluster_filter","getSilences","getRules","rules","groups","setSilence","silence","expireSilence","silenceId","getNotifications","notification","setting","getSettingsValue","instance","getGaugeQueryData","query","formatGuageMetric","isFinite","getRangeQueriesData","queries","queriesResults","checkNan","updateTimeStamp","queryName","results","valueArray","isNaN","formattedDate","getMultiClusterData","getMultiClusterQueryRangeData","getMultiClusterQueriesData","validQueries","validRangeQueries","multiClusterQueries","validSelectedQueries","allMultiClusterQueries","Observable","observer","requests","queryNames","_value","request","responses","RbdService","isRBDPool","application_metadata","pool_name","rbd","imageSpec","toStringEncoded","image","configuration","option","copy","flatten","defaultFeatures","cloneFormatVersion","mirrorImageSnapshot","snapshot_name","renameSnapshot","newSnapshotName","new_snap_name","protectSnapshot","isProtected","is_protected","rollbackSnapshot","cloneSnapshot","listTrash","createNamespace","listNamespaces","deleteNamespace","moveTrash","purgeTrash","restoreTrash","newImageName","new_image_name","removeTrash","__param","cdEncodeNot","ImageSpec","Boolean","RgwBucketService","rgwDaemonService","bucketsSubject","totalNumObjectsSubject","totalUsedCapacitySubject","averageObjectSizeSubject","buckets$","totalNumObjects$","totalUsedCapacity$","averageObjectSize$","fetchAndTransformBuckets","buckets","totalNumObjects","totalUsedCapacity","averageObjectSize","transformedBuckets","bucket","transformBucket","num_objects","bucket_size","calculateAverageObjectSize","maxBucketSize","bucket_quota","max_size","maxBucketObjects","max_objects","usage","size_actual","size_usage","calculateSizeUsage","object_usage","calculateObjectUsage","stats","getTotalBucketsAndUsersLength","zonegroup","placementTarget","lockEnabled","lock_mode","lock_retention_period_days","encryption_state","encryption_type","key_id","tags","bucketPolicy","cannedAcl","replication","paramsObject","lock_enabled","bucket_policy","canned_acl","daemon_name","placement_target","fromObject","bucketId","versioningState","encryptionState","encryptionType","keyId","mfaDelete","mfaTokenSerial","mfaTokenPin","lockMode","lockRetentionPeriodDays","lifecycle","appendAll","bucket_id","versioning_state","mfa_delete","mfa_token_serial","mfa_token_pin","getLockDays","bucketData","lock_retention_period_years","setEncryptionConfig","reqBody","getEncryption","deleteEncryption","getEncryptionConfig","setLifecycle","bucket_name","owner","tenant","getLifecycle","updateBucketRateLimit","bid","bucketRateLimitArgs","getBucketRateLimit","getGlobalBucketRateLimit","listNotification","setNotification","deleteNotification","notification_id","RgwDaemonService","daemons","daemons$","selectedDaemon","selectedDaemon$","selectDefaultDaemon","selectDaemon","daemon","take","setMultisiteConfig","realm_name","zonegroup_name","zone_name","RgwMultisiteService","mgrModuleService","uiUrl","restartGatewayMessageSource","restartGatewayMessage$","migrate","realm","zone","zonegroup_endpoints","endpoints","zone_endpoints","getSyncStatus","getSyncPolicy","fetchAllPolicy","getSyncPolicyGroup","group_id","createSyncPolicyGroup","payload","modifySyncPolicyGroup","removeSyncPolicyGroup","setUpMultisiteReplication","realmName","zonegroupName","zonegroupEndpoints","zoneName","zoneEndpoints","replicationZoneName","clusterDetailsArray","selectedRealmName","JSON","stringify","createEditSyncFlow","removeSyncFlow","flow_id","flow_type","createEditSyncPipe","removeSyncPipe","pipe_id","setRestartGatewayMessage","getRgwModuleStatus","moduleData","RgwRealmService","defaultRealm","newRealmName","new_realm_name","replicable","getAllRealmsInfo","getRealmTree","defaultRealmId","nodes","realmIds","is_default","reweight","importRealmToken","realm_token","placementSpec","placement_spec","getRealmTokens","RgwSiteService","RgwUserService","enumerate","uids","detailed","enumerateEmail","getQuota","args","updateQuota","createSubuser","deleteSubuser","subuser","addCapability","perm","deleteCapability","addS3Key","deleteS3Key","accessKey","emailExists","updateUserRateLimit","rateLimitArgs","getUserRateLimit","getGlobalUserRateLimit","RgwZoneService","defaultZone","master","access_key","system_key","secret_key","getAllZonesInfo","deletePools","pools","delete_pools","from","newZoneName","dataPool","indexPool","dataExtraPool","storageClass","dataPoolClass","compression","new_zone_name","data_pool","index_pool","data_extra_pool","storage_class","data_pool_class","getZoneTree","defaultZoneId","zones","zoneIds","deploy","zone_zonegroup","parent","second_parent","is_master","master_zone","zoneNames","secondary_zone","zoneInfo","show_warning","warning_message","getPoolNames","createSystemUser","userName","getUserList","RgwZonegroupService","defaultZonegroup","newZonegroupName","removedZones","addedZones","new_zonegroup_name","placement_targets","remove_zones","add_zones","getAllZonegroupsInfo","getZonegroupTree","defaultZonegroupId","cubes","default_placement","SettingsService","names","forceRefresh","validateGrafanaDashboardUrl","UserService","changePassword","oldPassword","newPassword","old_password","new_password","user_name","validatePassword","updateChanged","componentThis","change","hasChanges","publicVarName","major_ver","minor_ver","CssHelper","propertyName","element","document","getComputedStyle","getPropertyValue","setTableRefreshTimeout","clearTimeout","staleTimeout","runOutsideAngular","setTimeout","run","tableStatus","TableStatus","TableStatusViewCache","ValueOk","statusFor","msg","ValueNone","ValueStale","onAction","actionName","AlertPanelComponent_ng_template_3_button_0_Template","AlertPanelComponent","showTitle","dismissible","spacingClass","lowContrast","variant","dismissed","notificationContent","alertContent","actionsTemplate","actionTpl","showClose","onClose","AlertPanelComponent_ng_template_1_Template","AlertPanelComponent_ng_template_3_Template","BackButtonComponent","backAction","modalForm","showSubmit","hasModalOutlet","CANCEL","outlet","back","observers","HardwareNameMapping","memory","storage","processors","network","power","fans","CardRowComponent_Conditional_4_a_0_ng_template_2_Template","CardRowComponent_Conditional_4_a_0_ng_template_3_Template","CardRowComponent_Conditional_4_a_0_ng_template_4_Template","link","total","CardRowComponent_Conditional_4_a_0_Template","noLinkTitle_r2","CardRowComponent_Conditional_5_a_0_Template","CardRowComponent_ng_container_8_ng_container_1_Template","iscsiSummary_r3","CardRowComponent_ng_container_9_ng_container_1_Template","osdSummary_r4","CardRowComponent_ng_container_10_ng_container_1_Template","simplifiedSummary_r5","CardRowComponent_ng_container_11_ng_container_1_Template","defaultSummary_r6","toggleDropdown","CardRowComponent_div_13_ng_container_2_Template","dropdownTemplate_r8","CardRowComponent_ng_template_14_Conditional_0_ng_container_0_Template","loadingTpl_r9","categoryPgAmount","clean","CardRowComponent_ng_template_14_Conditional_1_span_0_span_1_Template","CardRowComponent_ng_template_14_Conditional_1_span_0_span_2_Template","CardRowComponent_ng_template_14_Conditional_1_span_1_span_1_Template","warn","CardRowComponent_ng_template_14_Conditional_1_span_2_span_1_Template","CardRowComponent_ng_template_14_Conditional_1_span_2_span_2_Template","unknown","CardRowComponent_ng_template_14_Conditional_1_span_3_span_1_Template","CardRowComponent_ng_template_14_Conditional_1_span_3_span_2_Template","working","CardRowComponent_ng_template_14_Conditional_1_span_4_span_1_Template","spinner","spin","CardRowComponent_ng_template_14_Conditional_1_span_0_Template","CardRowComponent_ng_template_14_Conditional_1_span_1_Template","CardRowComponent_ng_template_14_Conditional_1_span_2_Template","CardRowComponent_ng_template_14_Conditional_1_span_3_Template","CardRowComponent_ng_template_14_Conditional_1_span_4_Template","CardRowComponent_ng_template_14_Conditional_0_Template","CardRowComponent_ng_template_14_Conditional_1_Template","CardRowComponent_ng_template_16_Conditional_0_ng_container_0_Template","up","in","down","out","nearfull","full","CardRowComponent_ng_template_16_Conditional_1_span_0_Template","CardRowComponent_ng_template_16_Conditional_1_span_1_Template","CardRowComponent_ng_template_16_Conditional_1_span_2_Template","CardRowComponent_ng_template_16_Conditional_1_span_3_Template","CardRowComponent_ng_template_16_Conditional_1_span_4_Template","CardRowComponent_ng_template_16_Conditional_1_span_5_Template","CardRowComponent_ng_template_16_Conditional_1_span_6_Template","CardRowComponent_ng_template_16_Conditional_0_Template","CardRowComponent_ng_template_16_Conditional_1_Template","CardRowComponent_ng_template_18_Conditional_0_ng_container_0_Template","CardRowComponent_ng_template_18_Conditional_1_cd_icon_2_Template","CardRowComponent_ng_template_18_Conditional_1_span_3_Template","CardRowComponent_ng_template_18_Conditional_0_Template","CardRowComponent_ng_template_18_Conditional_1_Template","CardRowComponent_ng_template_20_Conditional_0_span_0_Template","dropdownTotalError","showErrorNum_r10","CardRowComponent_ng_template_20_Conditional_1_ng_container_0_Template","CardRowComponent_ng_template_20_ng_template_2_span_0_Template","CardRowComponent_ng_template_20_Conditional_0_Template","CardRowComponent_ng_template_20_Conditional_1_Template","CardRowComponent_ng_template_20_ng_template_2_Template","CardRowComponent_ng_template_24_Conditional_0_span_0_ng_template_2_Template","CardRowComponent_ng_template_24_Conditional_0_span_0_ng_template_3_Template","CardRowComponent_ng_template_24_Conditional_0_span_0_ng_template_4_Template","CardRowComponent_ng_template_24_Conditional_0_span_0_Template","CardRowComponent_ng_template_24_Conditional_0_Template","CardRowComponent_ng_template_24_Conditional_1_Template","hwNames","data_r11","CardRowComponent_ng_template_26_ng_container_0_span_4_ng_template_2_Template","CardRowComponent_ng_template_26_ng_container_0_span_4_ng_template_3_Template","CardRowComponent_ng_template_26_ng_container_0_span_4_ng_template_4_Template","CardRowComponent_ng_template_26_ng_container_0_span_4_Template","CardRowComponent_ng_template_26_ng_container_0_cd_icon_7_Template","CardRowComponent_ng_template_26_ng_container_0_span_8_Template","ok","CardRowComponent_ng_template_26_ng_container_0_Template","dropdownData","CardRowComponent","summaryType","dropdownToggled","flawed","CardRowComponent_Conditional_4_Template","CardRowComponent_Conditional_5_Template","CardRowComponent_ng_container_8_Template","CardRowComponent_ng_container_9_Template","CardRowComponent_ng_container_10_Template","CardRowComponent_ng_container_11_Template","CardRowComponent_span_12_Template","CardRowComponent_div_13_Template","CardRowComponent_ng_template_14_Template","CardRowComponent_ng_template_16_Template","CardRowComponent_ng_template_18_Template","CardRowComponent_ng_template_20_Template","CardRowComponent_ng_template_22_Template","CardRowComponent_ng_template_24_Template","CardRowComponent_ng_template_26_Template","cardTitle","CardComponent_h4_1_span_1_Template","cardType","size20","CardComponent","removeBorder","shadow","cardFooter","fullHeight","alignItemsCenter","justifyContentCenter","ngContentSelectors","CardComponent_h4_1_Template","CardComponent_h4_2_Template","CardComponent_h5_3_Template","CardComponent_div_6_Template","_c3","_20","ComponentsModule","InfoIcon","CopyIcon","EditIcon","CodeIcon","downloadIcon","IdeaIcon","CloseIcon","NgbAlertModule","NgbProgressbarModule","DirectivesModule","NgbDropdownModule","ClickOutsideModule","NgbDatepickerModule","NgbTimepickerModule","NotificationModule","TooltipModule","AccordionModule","LoadingModule","TimePickerSelectModule","DropdownModule","ProgressIndicatorModule","PanelModule","ChartsModule","LayoutModule","TilesModule","PopoverModule","BaseModal","bodyData","bodyContext","showCancel","canceled","confirmationForm","UntypedFormGroup","$implicit","closeModal","ConfirmationModalComponent_ng_container_7_Template","ConfirmationModalComponent_p_8_Template","open","text","Copy2ClipboardButtonComponent","toastr","byId","getText","getElementById","source","textContent","onClick","browser","detect","toastrFn","navigator","clipboard","writeText","hostBindings","Copy2ClipboardButtonComponent_Conditional_1_Template","onModelChange","ampm","DateTimePickerComponent_cds_text_label_5_cds_timepicker_2_Template","hasTime","DateTimePickerComponent","calendar","hasSeconds","helperText","placeHolder","date","defaultDate","minDate","getToday","isValid","isBefore","datetime","event","isArray","initialMoment","updatedMoment","DateTimePickerComponent_cds_text_label_5_Template","infoMessage","actionDescription","itemName_r3","DeleteConfirmationModalComponent_span_9_ng_template_2_li_4_Template","DeleteConfirmationModalComponent_span_9_p_1_Template","DeleteConfirmationModalComponent_span_9_ng_template_2_Template","manyNames_r4","DeleteConfirmationModalComponent_ng_template_15_ng_template_3_span_0_Template","DeleteConfirmationModalComponent_ng_template_15_ng_template_3_span_1_Template","deletionForm","DeleteConfirmationModalComponent_ng_template_15_ng_template_3_Template","confirmInput","ResourceError_r6","bodyTemplate","callBackAtionObservable","impactEnum","medium","confirmation","composeIf","requiredTrue","matchResourceName","childFormGroup","child","matchResource","callSubmitAction","hideModal","callBackAction","SubmitButtonComponent","DeleteConfirmationModalComponent_ng_container_2_Template","DeleteConfirmationModalComponent_cd_alert_panel_6_Template","DeleteConfirmationModalComponent_ng_container_7_Template","DeleteConfirmationModalComponent_span_9_Template","DeleteConfirmationModalComponent_ng_template_10_Template","DeleteConfirmationModalComponent_ng_container_12_Template","DeleteConfirmationModalComponent_ng_container_14_Template","DeleteConfirmationModalComponent_ng_template_15_Template","DeleteConfirmationModalComponent_ng_template_19_Template","deletionHeading_r9","noNames_r7","childFormGroupTemplate","highImpactDeletion_r8","DocComponent","docService","docText","noSubscribe","docUrl","urlGenerator","FormAdvancedFieldsetComponent","showAdvanced","FormAdvancedFieldsetComponent_ng_template_5_Template","titleTpl_r3","cancelText","submitText","submitBtnType","FormButtonPanelComponent_ng_container_0_cd_back_button_2_Template","FormButtonPanelComponent_ng_container_0_cd_submit_button_3_Template","wrappingClass","_r4","_r5","FormButtonPanelComponent_ng_template_1_cd_back_button_1_Template","FormButtonPanelComponent_ng_template_1_cd_submit_button_2_Template","FormButtonPanelComponent","cdsModalService","submitActionEvent","backActionEvent","btnClass","hasOpenModals","FormButtonPanelComponent_ng_container_0_Template","FormButtonPanelComponent_ng_template_1_Template","modalFooter_r6","field_r3","getError","typeConfig","placeholder","option_r4","FormModalComponent_ng_container_7_cds_select_5_option_2_Template","FormModalComponent_ng_container_7_cds_select_5_option_3_Template","FormModalComponent_ng_container_7_cds_text_label_2_Template","FormModalComponent_ng_container_7_cds_number_3_Template","FormModalComponent_ng_container_7_cds_text_label_4_Template","FormModalComponent_ng_container_7_cds_select_5_Template","FormModalComponent_ng_container_7_cds_combo_box_6_Template","dimlessBinaryPipe","updateAsyncValidators","controlsConfig","field","createFormControl","formGroup","valueChangeListener","valueChanges","validatorToUpdate","updateValidation","dependsOn","formErrors","getErrorMessage","errorContext","fieldErrors","customError","onSubmitForm","toBytes","validator","FormModalComponent_h3_2_Template","FormModalComponent_p_6_Template","FormModalComponent_ng_container_7_Template","showMessage","undo","infoCircle","large","grafanaSrc","GrafanaComponent_ng_container_3_div_3_cd_alert_panel_1_Template","GrafanaComponent_ng_container_3_div_1_Template","GrafanaComponent_ng_container_3_div_3_Template","panelStyle","GrafanaComponent","sanitizer","grafanaExist","styles","dashboardExist","DEFAULT_TIME","grafanaTimes","one","two","three","four","datasource","baseUrl","getFrame","grafanaStyle","grafanaPath","bypassSecurityTrustResourceUrl","onTimepickerChange","GrafanaComponent_cd_loading_panel_0_Template","GrafanaComponent_cd_alert_panel_1_Template","GrafanaComponent_cd_alert_panel_2_Template","GrafanaComponent_ng_container_3_Template","HelpTextComponent","formAllFieldsRequired","HelpTextComponent_ng_container_1_Template","HelpTextComponent_ng_template_2_Template","contentTpl_r1","HelperType","popover","HelperComponent_ng_template_0_ng_container_2_Template","class","html","content_r2","tooltipTemplate_r3","iconType","iconSize","togglePopover","stopPropagation","HelperComponent_Conditional_3_ng_container_6_Template","isPopoverOpen","HelperComponent","helperType","size16","closePopover","HelperComponent_ng_template_0_Template","HelperComponent_Conditional_2_Template","HelperComponent_Conditional_3_Template","HelperComponent_ng_template_4_Template","IconComponent","IconSize","LoadingPanelComponent","ModalComponent","hide","pageURL","ProgressComponent_h3_2_i_1_Template","ProgressComponent_h3_2_ng_template_2_Template","isPaused","spinningIcon_r2","subLabel","subDescription","completedItems","footerText","ProgressComponent","ProgressComponent_h3_2_Template","ProgressComponent_h3_3_Template","ProgressComponent_h5_4_Template","ProgressComponent_h5_5_Template","ProgressComponent_p_6_Template","ProgressComponent_ng_container_9_Template","ProgressComponent_h4_15_Template","ProgressComponent_h5_16_Template","dataItem_r3","cdSelect_r4","removeItem","ctx_r4","SelectBadgesComponent","customBadges","customBadgeValidators","SelectBadgesComponent_span_3_Template","selectionLimit","customValidations","noOptions","SelectOption","selected","error_r3","SelectComponent_ng_template_0_ng_container_4_span_1_Template","formDir_r4","option_r6","triggerSelection","SelectComponent_ng_template_0_div_5_i_2_Template","SelectComponent_ng_template_0_div_5_ng_container_6_Template","addCustomOption","tag","SelectComponent_ng_template_0_div_7_span_1_Template","keyCode","selectOption","updateFilter","SelectComponent_ng_template_0_ng_container_4_Template","SelectComponent_ng_template_0_div_5_Template","SelectComponent_ng_template_0_div_6_Template","SelectComponent_ng_template_0_div_7_Template","filteredOptions","isCreatable","elemClass","popTemplate_r8","SelectComponent","initFilter","initMissingOptions","updateOptions","addOption","forceOptionsToReflectData","splice","resetFilter","item","SelectComponent_ng_template_0_Template","SelectComponent_a_2_Template","SelectComponent_span_3_Template","SelectComponent_span_4_Template","SparklineComponent","style","parsed","isBinary","line","datasets","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","chartTooltip","ChartTooltip","chartCanvasRef","chartTooltipRef","getStyleLeft","positionX","caretX","caretY","customColors","customTooltips","elRef","buttonType","statusChanges","AbstractControl","focusButton","FormGroupDirective","focusInvalid","nativeElement","offsetParent","querySelector","focus","ariaLabel","SubmitButtonComponent_cds_loading_2_Template","StatusToCssMap","Statuses","SUCCESS","WARNING","DANGER","UsageBarComponent_ng_container_0_ng_container_1_ng_container_1_Template","customLabel","UsageBarComponent_ng_container_0_ng_container_1_Template","UsageBarComponent_ng_container_0_ng_template_2_Template","isCustomLabelTemplate","stringLabel_r2","noDataText","UsageBarComponent","elementRef","used","totalUnit","animations","legendEnabled","toolbarEnabled","enablePercentageLabel","tooltipOptions","TemplateRef","thresholds","warningThreshold","errorThreshold","colorScale","customColorScale","getStatusFromThresholds","chartOptions","toolbar","customHTML","defaultTooltip","color","scale","meter","showLabels","proportional","totalFormatter","getTotalFormatter","breakdownFormatter","getBreakdownFormatter","ranges","threshold","min","getCssVariableValue","variableName","formatValue","customTotalFormatter","customBreakdownFormatter","percentage","toFixed","UsageBarComponent_ng_container_0_Template","UsageBarComponent_ibm_meter_chart_1_Template","UsageBarComponent_ng_template_2_Template","noDataFound_r3","WizardComponent","stepsService","stepsTitle","steps","currentStep","stepIndex","initializeSteps","isFirstChange","setTotalSteps","getSteps","currentStepSub","getCurrentStep","onStepClick","setCurrentStep","AppConstants","organization","projectName","defaultUser","license","copyright","environment","year","cephLogo","UPDATE","REMOVE","ADD","COPY","RECREATE","EXPIRE","RESTART","EVICT","SHOW","START","STOP","REDEPLOY","ActionLabelsI18n","EXPORT","IMPORT","SETUP_MULTISITE_REPLICATION","MIGRATE","SET","SUBMIT","UNSET","PREVIEW","MOVE","NEXT","BACK","DEEP_SCRUB","DESTROY","FLATTEN","MARK_DOWN","MARK_IN","MARK_LOST","MARK_OUT","PROTECT","PURGE","RENAME","RESTORE","REWEIGHT","ROLLBACK","SCRUB","TIERING","TRASH","UNPROTECT","CHANGE","FLAGS","ENTER_MAINTENANCE","EXIT_MAINTENANCE","AUTHORIZE","START_DRAIN","STOP_DRAIN","RESYNC","REMOVE_SCHEDULING","PROMOTE","DEMOTE","START_UPGRADE","ACTIVATE","DEACTIVATE","ATTACH","CONNECT","DISCONNECT","RECONNECT","EXPAND_CLUSTER","NFS_EXPORT","SucceededActionLabelsI18n","CREATED","DELETED","ADDED","REMOVED","EDITED","CANCELED","PREVIEWED","MOVED","CLONED","COPIED","DEEP_SCRUBBED","DESTROYED","FLATTENED","MARKED_DOWN","MARKED_IN","MARKED_LOST","MARKED_OUT","PROTECTED","PURGED","RENAMED","RESTORED","REWEIGHTED","ROLLED_BACK","SCRUBBED","SHOWED","TRASHED","UNPROTECTED","RECREATED","EXPIRED","TimerServiceInterval","TIMER_SERVICE_PERIOD","SSL_PROTOCOLS","SSL_CIPHERS","VERSION_PREFIX","column_r3","column","row","onClickCellCheckbox","isRowChecked","isDisabled","value_r6","ctx_r7","column_r9","row_r10","value_r11","column_r13","_r12","onClickHeaderCheckbox","isHeaderChecked","CheckedTableFormComponent","isTableForOctalMode","cellScopeCheckboxTpl","headerTemplate","headerPermissionCheckboxTpl","cellPermissionCheckboxTpl","sortable","listenToChanges","inputField","scopesPermissions","scopePermission","write","execute","o","property","CheckedTableFormComponent_ng_template_1_Template","CheckedTableFormComponent_ng_template_3_Template","CheckedTableFormComponent_ng_template_5_Template","CephUserService","export","entities","tab_r1","_c4","CRUDTableComponent_ul_0_li_1_Template","tabs","column_r4","CRUDTableComponent_ng_container_1_ng_container_5_table_1_tr_2_Template","meta","detail_columns","CRUDTableComponent_ng_container_1_ng_container_5_table_1_Template","CRUDTableComponent_ng_container_1_ng_container_5_Template","data$","columnMode","selectionType","toolHeader","actions","CRUDTableComponent_ng_template_2_span_0_ng_container_3_Template","instance_r5","isLast_r6","CRUDTableComponent_ng_template_2_span_0_Template","value_r7","modalState","authExportData","CRUDTableComponent","dataGatewayService","cephUserService","activatedRoute","processMeta","word","charAt","toUpperCase","templates","badgeDict","badgeDictTpl","dateTpl","col","isHidden","hasSelection","selectedKey","columnKey","columnDetail","formatColumnDetails","authExport","entity","modalVariables","authxEportTpl","stringReplacer","_key","parse","details","CRUDTableComponent_ul_0_Template","CRUDTableComponent_ng_container_1_Template","CRUDTableComponent_ng_template_2_Template","CRUDTableComponent_ng_template_4_Template","CRUDTableComponent_ng_template_6_Template","CRUDTableComponent_ng_template_8_Template","FormlyTextareaTypeComponent","FieldType","textAreaJsonFormatterService","onChange","textArea","formControl","props","cols","rows","helper","FormlyInputWrapperComponent_ng_template_0_label_1_span_2_Template","FormlyInputWrapperComponent_ng_template_0_label_1_cd_helper_3_Template","hideRequiredMarker","FormlyInputWrapperComponent_ng_template_0_label_1_Template","hideLabel","labelTemplate_r2","FormlyInputWrapperComponent","FieldWrapper","getFieldState","__ngFactoryType__","FormlyInputWrapperComponent_ng_template_0_Template","FormlyInputWrapperComponent_ng_container_3_Template","FormlyInputWrapperComponent_ng_container_6_Template","FormlyInputWrapperComponent_div_7_Template","FormlyInputWrapperComponent_small_8_Template","labelPosition","FormlyFileValueAccessorDirective","onTouched","writeValue","registerOnChange","registerOnTouched","files","NG_VALUE_ACCESSOR","useExisting","multi","FormlyFileTypeComponent","AddIcon","FilterIcon","ReloadIcon","DataTableIcon","CheckIcon","MaximizeIcon","ArrowDown","FormlyModule","forRoot","types","FormlyArrayTypeComponent","FormlyObjectTypeComponent","FormlyInputTypeComponent","wrappers","validationMessages","FormlyBootstrapModule","TableModule","PaginationModule","DialogModule","ThemeModule","TagModule","LayerModule","TableDetailDirective","useClickAction","currentAction","useDisableDesc","buttonKind","disableSelectionAction","useRouterLink","preserveFragment","action_r4","toClassName","TableActionsComponent_ng_container_0_ng_container_2_ng_template_3_ng_container_0_cds_overflow_menu_option_1_Template","TableActionsComponent_ng_container_0_ng_container_2_ng_template_3_ng_container_0_Template","dropDownActions","TableActionsComponent_ng_container_0_ng_container_2_ng_template_3_Template","overflowMenuTpl_r5","downArrow","TableActionsComponent_ng_container_0_button_1_Template","TableActionsComponent_ng_container_0_ng_container_2_Template","primaryDropDown","action_r7","TableActionsComponent_ng_template_3_ng_container_1_cds_overflow_menu_option_1_Template","TableActionsComponent_ng_template_3_ng_container_1_Template","customTrigger_r8","dropDownOnly","TableActionsComponent","btnColor","removeActionsWithNoPermissions","onSelectionChange","updateDropDownActions","updateCurrentAction","visible","cdExecuting","TableActionsComponent_ng_container_0_Template","TableActionsComponent_ng_template_1_Template","TableActionsComponent_ng_template_3_Template","TableActionsComponent_ng_template_5_Template","dropDownOnlyTpl_r9","TableKeyValueComponent","datePipe","autoReload","renderObjects","appendParentKey","hideEmpty","hideKeys","fetchData","bold","customCss","classAdding","useData","pairs","makePairs","pair","tableData","makePairsFromArray","makePairsFromObject","convertValue","insertFlattenObjects","temp","previous","isObject","splitItemIntoItems","isDate","s","sep","TableComponent","headerDescription","TableComponent_cds_table_header_1_p_3_Template","headerTitle","action_r5","toolbar_r6","TableComponent_cds_table_toolbar_2_cds_table_toolbar_actions_2_ng_container_1_button_1_Template","TableComponent_cds_table_toolbar_2_cds_table_toolbar_actions_2_ng_container_1_Template","search","onClearSearch","filter_r9","selectedFilter","option_r10","raw","formatted","_r8","onSelectFilter","TableComponent_cds_table_toolbar_2_ng_container_5_ng_container_4_Template","onChangeFilter","TableComponent_cds_table_toolbar_2_ng_container_5_option_6_Template","TableComponent_cds_table_toolbar_2_ng_container_5_ng_container_7_Template","columnFilters","_r11","_c24","loadingIndicator","column_r14","toggleColumn","tableName","TableComponent_cds_table_toolbar_2_ng_template_9_ng_container_1_cds_checkbox_1_Template","isInvisible","TableComponent_cds_table_toolbar_2_ng_template_9_ng_container_1_Template","theme","localColumns","onBatchActionsCancel","TableComponent_cds_table_toolbar_2_cds_table_toolbar_actions_2_Template","TableComponent_cds_table_toolbar_2_cds_table_toolbar_search_4_Template","TableComponent_cds_table_toolbar_2_ng_container_5_Template","TableComponent_cds_table_toolbar_2_cds_icon_button_6_Template","TableComponent_cds_table_toolbar_2_ng_template_9_Template","model","_c21","_c22","searchField","showHideColumnsRef_r15","_c23","dataTable","_r17","filter_r18","TableComponent_div_3_ng_container_2_cds_tag_1_Template","TableComponent_div_3_ng_container_2_Template","_r16","onClearFilters","_r19","i_r20","onSelect","onDeselect","expandRow","isRowExpanded","row_r22","isRowSelected","isRowExpandable","showSelectionColumn","expandedDataRow_r23","TableComponent_tbody_6_ng_container_1_ng_container_3_tr_1_Template","firstExpandedDataInRow","TableComponent_tbody_6_ng_container_1_tr_1_Template","TableComponent_tbody_6_ng_container_1_tr_2_Template","TableComponent_tbody_6_ng_container_1_ng_container_3_Template","isRowFiltered","shouldExpandAsTable","TableComponent_tbody_6_ng_container_1_Template","enableSingleSelect","identifier","TableComponent_ng_template_8_td_2_Template","_r24","onRowDetailHover","TableComponent_ng_template_10_div_0_ng_template_1_Template","rowDetail","TableComponent_ng_template_10_div_0_Template","row_r25","expanded","column_r27","value_r26","_r28","action_r29","TableComponent_ng_template_14_cds_overflow_menu_0_ng_container_1_cds_overflow_menu_option_1_Template","TableComponent_ng_template_14_cds_overflow_menu_0_ng_container_1_Template","TableComponent_ng_template_14_cds_overflow_menu_0_Template","value_r30","value_r32","row_r31","cdIsBinary","_c25","row_r33","cdLink","cdParams","value_r34","value_r35","value_r36","_c26","column_r38","customTemplateConfig","executingClass","row_r39","TableComponent_ng_template_26_i_0_Template","TableComponent_ng_template_26_span_3_Template","valueClass","value_r40","value_r41","useCustomClass","column_r43","item_r42","TableComponent_ng_template_30_span_0_span_1_Template","TableComponent_ng_template_30_span_0_span_2_Template","last_r44","TableComponent_ng_template_30_span_0_Template","value_r45","value_r47","column_r46","column_r50","item_r48","value_r51","TableComponent_ng_template_34_span_0_Template","value_r53","column_r52","omission","ctx_r54","_r54","row_r56","isExpanded_r57","toggleExpandRow","value_r58","value_r59","TableComponent_ng_template_42_cd_copy_2_clipboard_button_0_Template","value_r60","lg","TableComponent_ng_template_44_cd_copy_2_clipboard_button_0_Template","_expanded","userConfig","sorts","noData","_localColumns","getTableColumnsWithNames","tableColumns","valuesWithNames","_tableColumns","_tableHeaders","visibleColumns","deCamelCase","_rows","doPagination","page","currentPage","pageLength","filteredData","totalDataLength","serverSide","columnFiltered","cdRef","onlyActionHeader","footer","limit","maxLimit","hasDetails","showInlineActions","forceIdentifier","updateSelectionOnRefresh","updateExpandedOnRefresh","autoSave","searchableObjects","extraFilterableColumns","columnFiltersChanged","selectAllCheckbox","selectAllCheckboxSomeSelected","TableModel","cellTemplates","_dataset","_subscriptions","Subscription","localStorage","updating","previousRows","Map","paginate","prepareSearch","className","tableActionTpl","tableHeadersSubscription","TableHeaderItem","datasetSubscription","rowId","prevRow","newRow","colIndex","rowValue","existingCell","oldValue","newValue","expandedData","expandedTemplate","rowDetailTpl","TableItem","defaultValueTpl","prevRaw","newRaw","rowsExpandedSubscription","rowsExpandedChange","rowsExpanded","rowIndex","rowsChangeSubscription","rowsSelectedChange","updateSelectAllCheckbox","dataChangeSubscription","dataChange","reloadData","_addTemplates","createSortingDefinition","initUserConfig","resizeable","filterHiddenColumns","initColumnFilters","updateColumnFilterOptions","loadingSubscription","detectChanges","reloadSubscriber","closest","previousElementSibling","classList","_calculateUniqueTableName","_loadUserConfig","_initUserConfigAutoSave","offset","updateUserColumns","stringToNumber","loaded","getItem","_initUserConfigProxy","saveSubscriber","_saveUserConfig","Proxy","setItem","filterableColumns","filterable","filterInitValue","createColumnFilterOption","filterOptions","doColumnFiltering","appliedFilters","dataOut","filterPredicate","filters","tableCellBoldTpl","checkIconTpl","sparkline","sparklineTpl","routerLinkTpl","perSecond","perSecondTpl","executingTpl","classAddingTpl","badge","badgeTpl","mapTpl","truncate","truncateTpl","timeAgo","timeAgoTpl","pathTpl","tooltipTpl","copyTpl","classes","css","setLimit","e","srcElement","CdTableFetchDataContext","errorConfig","displayError","resetData","pageInfo","dir","onPageChange","paginated","rowIdentity","doSorting","updateSelected","updateExpanded","newSelected","Set","newSelectedArray","findIndex","selectRow","expandedId","newExpanded","_toggleSelection","isSelected","selectedData","selectedRowIndex","selectAll","onSelectAll","rowsSelected","deselectedRowIndex","onDeselectAll","_isSelected","updateColumns","sortProp","CdSortDirection","asc","changeSorting","columnIndex","sorted","descending","ascending","configDir","desc","tmp","rowA","rowB","subSearch","currentSearch","searchTerms","columnsClone","basicDataSearch","searchTerm","cellValue","getRowClass","clickable","expandedRowIndex","rowSelectedId","found","expandAsTable","_index","selectedRowsCount","TableComponent_cds_table_header_1_Template","TableComponent_cds_table_toolbar_2_Template","TableComponent_div_3_Template","TableComponent_tbody_6_Template","TableComponent_ng_template_8_Template","TableComponent_ng_template_10_Template","TableComponent_ng_template_12_Template","TableComponent_ng_template_14_Template","TableComponent_ng_template_16_Template","TableComponent_ng_template_18_Template","TableComponent_ng_template_20_Template","TableComponent_ng_template_22_Template","TableComponent_ng_template_24_Template","TableComponent_ng_template_26_Template","TableComponent_ng_template_28_Template","TableComponent_ng_template_30_Template","TableComponent_ng_template_32_Template","TableComponent_ng_template_34_Template","TableComponent_ng_template_36_Template","TableComponent_ng_template_38_Template","TableComponent_ng_template_40_Template","TableComponent_ng_template_42_Template","TableComponent_ng_template_44_Template","layer","noDataTemplate_r61","encodeClass","encodeMethod","propertyKey","metadataKey","getOwnPropertyNames","prototype","descriptor","getOwnPropertyDescriptor","Function","defineProperty","originalMethod","indices","arguments","AuthStorageDirective","templateRef","viewContainer","cdScopeMatchAll","cdScope","condition","isAuthorized","createEmbeddedView","clear","everyOrSome","AutofocusDirective","autofocus","DimlessBinaryDirective","ngModelChange","defaultUnit","addValidators","roundedSize","round","minBytes","maxBytes","roundPower","log","pow","onBlur","ComboBoxService","searchSubject","DynamicInputComboboxDirective","combBoxService","updatedItems","selectedItems","searchSubscription","searchString","items","onInput","onSelected","FormInputDisableDirective","formScope","cdFormScope","FormLoadingDirective","cdFormLoading","LoadingStatus","Loading","resolveNgContent","createComponent","projectableNodes","Ready","createTextNode","FormScopeDirective","CdFormControlDirective","validClass","invalidClass","controlPath","formControlName","formDirective","getControl","hostVars","CdFormGroupDirective","hasErrors","formControlNames","validationDisabled","hasSuccess","isDirtyAndTouched","FormControlName","CdFormValidationDirective","validSubmit","markAsTouchedAndDirty","UntypedFormArray","markAsTouched","OptionalFieldDirective","renderer","skeleton","labelElement","setProperty","PasswordButtonDirective","setAttribute","iElement","createElement","addClass","appendChild","getInputElement","cdPasswordButton","inputElement","removeClass","RequiredFieldDirective","StatefulTabDirective","nav","cdStatefulTabDefault","activeId","cdStatefulTab","select","onNavChange","nextId","TrimDirective","ngControl","UtilizationCardQueries","CapacityCardQueries","RgwPromqls","MultiClusterPromqls","MultiClusterPromqlsForClusterUtilization","MultiClusterPromqlsForPoolUtilization","USEDCAPACITY","WRITEIOPS","READIOPS","READLATENCY","WRITELATENCY","READCLIENTTHROUGHPUT","WRITECLIENTTHROUGHPUT","RECOVERYBYTES","OSD_NEARFULL","OSD_FULL","RGW_REQUEST_PER_SECOND","AVG_GET_LATENCY","AVG_PUT_LATENCY","GET_BANDWIDTH","PUT_BANDWIDTH","ALERTS_COUNT","CLUSTER_COUNT","HEALTH_OK_COUNT","HEALTH_WARNING_COUNT","HEALTH_ERROR_COUNT","TOTAL_CLUSTERS_CAPACITY","TOTAL_USED_CAPACITY","HEALTH_STATUS","MGR_METADATA","TOTAL_CAPACITY","USED_CAPACITY","POOLS","OSDS","CRITICAL_ALERTS_COUNT","WARNING_ALERTS_COUNT","ALERTS","HOSTS","TOTAL_HOSTS","CLUSTER_ALERTS","FEDERATE_UP_METRIC","CLUSTER_CAPACITY_UTILIZATION","CLUSTER_IOPS_UTILIZATION","CLUSTER_THROUGHPUT_UTILIZATION","POOL_CAPACITY_UTILIZATION","POOL_IOPS_UTILIZATION","POOL_THROUGHPUT_UTILIZATION","HealthIcon","AlertClass","HEALTH_ERR","HEALTH_WARN","HEALTH_OK","critical","addCircle","minusCircle","exchange","trash","lock","unlock","analyse","deepCheck","cogs","erase","share","questionCircle","danger","paragraph","terminal","magic","hourglass","filledHourglass","bullseye","disk","server","lineChart","signOut","circle","bell","mute","leftArrow","rightArrow","flag","clearFilters","download","upload","code","wrench","enter","exit","restart","sitemap","database","bars","navicon","areaChart","eye","externalUrl","nfsExport","launch","parentChild","idea","userAccessLocked","size24","size32","large2x","large3x","stack","stack1x","stack2x","pulse","inverse","CdFormBuilder","UntypedFormBuilder","extra","asyncValidator","validatorOrOpts","controlName","_get","silentSet","emitEvent","errorName","submitted","None","loadingStart","loadingError","loadingNone","isEmptyInputValue","version","ipv4Rgx","ipv6Rgx","number","allowsNegative","decimalNumber","sslCert","sslPrivKey","pemCert","prerequisites","isWatched","prerequisite","op","arg1","compose","validateIf","conditionalValidators","permanentValidators","watchControls","path1","path2","ctrl1","ctrl2","serviceFn","serviceFnThis","usernameFn","uidField","extraArgs","uName","observableTimer","switchMapTo","notUnique","uuid","uuidRe","untouched","invalidUuid","binaryMin","bytes","formatterService","FormatterService","currentBytes","DimlessBinaryPipe","binaryMax","userServiceThis","constraints","notIP","func","onlyLowerCaseAndNumbers","shouldBeInRange","ipAddress","containsUpperCase","lowerCaseOrNumber","bucketNameInvalid","existenceResult","bucketNameNotAllowed","json","invalidJson","xml","DOMParser","parseFromString","invalidXml","jsonOrXml","oauthAddressTest","OAUTH2_HTTPS_ADDRESS_PATTERN","invalidAddress","addressTest","portTest","require_protocol","allow_underscores","require_tld","invalidURL","formUISchema_r2","ngIf","taskInfo","controlSchema","uiSchema","CrudFormComponent_div_1_form_3_Template","CrudFormComponent","queryParamMap","paramMap","formUISchema$","methodType","urlFormName","paramIndex","readFileAsText","file","fileReader","FileReader","onload","readAsText","preSubmit","FileList","_this2","taskMetadata","metadataFields","__message","CrudFormComponent_div_1_Template","i_r4","addWrapper","FormlyArrayTypeComponent_div_3_button_5_Template","field_r5","removable","FieldArrayType","propagateTemplateOptions","fieldGroup","templateOptions","objectTemplateOptions","FormlyArrayTypeComponent_legend_1_Template","FormlyArrayTypeComponent_p_2_Template","FormlyArrayTypeComponent_div_3_Template","FormlyArrayTypeComponent_div_4_Template","FormlyArrayTypeComponent_span_5_Template","f_r2","inputClass","layoutType","defaultFlexClasses","FormlyObjectTypeComponent_legend_1_Template","FormlyObjectTypeComponent_p_2_Template","FormlyObjectTypeComponent_div_3_Template","FormlyObjectTypeComponent_formly_field_5_Template","formlyAsyncFileValidator","_reject","file_size","not_a_file","formlyAsyncJsonValidator","formlyRgwRolePath","rgwRolePath","formlyRgwRoleNameValidator","rgwRoleName","formlyFormNumberValidator","rgwRoleSessionDuration","formState","setupValidators","fieldState","validatorStr","validation","CdNotificationConfig","application","isFinishedTask","Ceph","Prometheus","applicationClass","CdNotification","alertSilenced","textClasses","iconClasses","borderClasses","timestamp","toJSON","iconClass","textClass","borderClass","user_pwd_expiration_span","pwdExpirationWarning1","user_pwd_expiration_warning_1","pwdExpirationWarning2","user_pwd_expiration_warning_2","PageInfo","pageSize","toParams","_selected","hasMultiSelection","chartCanvas","getStyleTop","checkOffset","chartEl","tooltipEl","opacity","yAlign","titleLines","bodyLines","bodyItem","lines","innerHtml","getTitle","colors","labelColors","getBody","innerHTML","positionY","offsetTop","offsetLeft","halfWidth","fontFamily","_fontFamily","fontSize","fontStyle","_fontStyle","padding","RbdConfigurationSourceField","RbdConfigurationType","global","bps","iops","milliseconds","ExecutingTask","Task","fromString","imageSpecSplit","imageName","getNameSpace","ArrayPipe","pure","BooleanTextPipe","truthyText","falsyText","BooleanPipe","CdDatePipe","utcOffset","utc","local","CephReleaseNamePipe","exec","CephShortVersionPipe","DimlessBinaryPerMinutePipe","DimlessBinaryPerSecondPipe","DimlessPipe","DurationPipe","seconds","levels","returntext","EmptyPipe","HealthIconPipe","IopsPipe","IscsiBackstorePipe","JoinPipe","LogPriorityPipe","MapPipe","MbpersecondPipe","MdsSummaryPipe","activeCount","standbyCount","standbys","active","standbyReplay","fs","mdsmap","mds","MgrSummaryPipe","active_name","MillisecondsPipe","NotAvailablePipe","OctalToHumanReadablePipe","toTableArray","permissionSummary","digits","padStart","fileType","getFileTypeSymbol","others","toolTip","returnlist","OrdinalPipe","num","OsdSummaryPipe","inCount","upCount","nearFullCount","fullCount","osds","osd","downCount","outCount","PathPipe","splittedPath","PipeFunctionPipe","handler","EncodeUriPipe","DatePipe","RelativeDatePipe","UpperFirstPipe","TruncatePipe","SanitizeHtmlPipe","PluralizePipe","endsWith","relativeTime","future","past","ss","mm","h","hh","dd","w","ww","M","MM","yy","upperFirst","relativeDate","fromNow","domSanitizer","sanitize","SecurityContext","HTML","whenPageVisible","visibilitychange$","fromEvent","shareReplay","refCount","bufferSize","pageVisible$","pageHidden$","partition","visibilityState","takeUntil","repeatWhen","AuthGuardService","canActivate","_route","isLoggedIn","returnUrl","canActivateChild","childRoute","Permission","serverPermission","Permissions","serverPermissions","configOpt","monitor","rbdImage","iscsi","nvmeof","rbdMirroring","rgw","cephfs","manager","grafana","smb","AuthStorageService","isPwdDisplayedSource","isPwdDisplayed$","getPwdExpirationDate","getPwdUpdateRequired","CdTableServerSideService","getCount","CrudFormAdapterService","formlyJsonschema","processJsonSchemaForm","forms","control_schema","ui_schema","cSchema","toFieldConfig","readonly","task_info","method_type","DataGatewayService","crudFormAdapater","cache","dataPath","cacheable","getCacheable","getUrlAndVersion","formPath","modelKey","model_key","method","DeviceService","calculateAdditionalData","life_expectancy_min","life_expectancy_max","hasDate","float","weeks","isoDate1","isoDate2","diff","asWeeks","ageOfStamp","life_expectancy_stamp","life_expectancy_weeks","readable","readableDaemons","DocService","summaryservice","cephReleaseNamePipe","releaseDataSource","releaseData$","summary","releaseName","release","domain","domainCeph","multisite","dashboard","orch","pgs","security","trademarks","FeatureTogglesGuardService","featureToggles","enabledFeatures","routeConfig","FeatureTogglesService","API_URL","featureToggleMap$","divisor","conversionFactor","unitsArray","unitsArrayLowerCase","toLocaleLowerCase","convertedN","error_value","bytesRegexMatch","base","toMilliseconds","testResult","toIops","toOctalPermission","modes","octalMode","scopeValue","performValidation","regex","errorObject","iopmMaxSizeValidator","rateOpsMaxSize","ModalCdsService","createModal","injector","placeholderService","hasComponentRef","ModalService","ModuleStatusGuardService","ALLOWLIST","doCheck","moduleStatusGuardConfig","backendCheck","backend","orchestrator","section_info","button_name","button_route","button_title","secondary_button_name","secondary_button_route","secondary_button_title","module_name","navigate_to","uiConfig","NotificationService","taskMessageService","cdDatePipe","hideToasties","dataSource","sidebarSubject","queued","KEY","stringNotifications","notifications","removeAll","recent","arg","queueToShow","cancel","queuedTimeoutId","showQueued","getUnifiedTitleQueue","showToasty","queueShiftByTitle","configs","byTitle","renderTimeAndApplicationHtml","notifyTask","finishedTask","finishedTaskToNotification","getSuccessTitle","getErrorTitle","timeoutId","suspend","toggleSidebar","forceClose","CdPwdPolicySettings","pwdPolicyEnabled","pwd_policy_enabled","pwdPolicyMinLength","pwd_policy_min_length","pwdPolicyCheckLengthEnabled","pwd_policy_check_length_enabled","pwdPolicyCheckOldpwdEnabled","pwd_policy_check_oldpwd_enabled","pwdPolicyCheckUsernameEnabled","pwd_policy_check_username_enabled","pwdPolicyCheckExclusionListEnabled","pwd_policy_check_exclusion_list_enabled","pwdPolicyCheckRepetitiveCharsEnabled","pwd_policy_check_repetitive_chars_enabled","pwdPolicyCheckSequentialCharsEnabled","pwd_policy_check_sequential_chars_enabled","pwdPolicyCheckComplexityEnabled","pwd_policy_check_complexity_enabled","PasswordPolicyService","i18nHelp","sections","heading","displayName","getOptionsFromSections","filterConfigOptionsByName","configName","getOptionValueByName","fieldName","defaultValue","getWritableSections","readOnly","getOptionFields","getWritableOptionFields","optionName","getDisplayName","getDescription","RefreshIntervalService","intervalDataSource","intervalData$","initialInterval","sessionStorage","setRefreshInterval","newInterval","intervalTime","intervalSubscription","interval","getRefreshInterval","SummaryService","summaryDataSource","summaryData$","retrieveSummaryObservable","retrieveSummaryObserver","addRunningTask","current","executing_tasks","getUpdate","preProcessing","setList","fetch","updateData","tasks","addMissing","executingTasks","getTaskAction","defaultBuilder","existing","builder","progress","getRunningText","TaskSubscription","onTaskFinished","TaskManagerService","subscriptions","finishedTasks","finished_tasks","newSubscriptions","subscription","_getTask","executingTask","Components","auth","TaskMessageOperation","running","failure","TaskMessage","operation","involves","TaskMessageService","defaultMessage","newTaskMessage","pluralize","commonOperations","import","activate","deactivate","image_spec","image_name","child_pool_name","child_namespace","child_image_name","destination","dest_pool_name","dest_namespace","dest_image_name","rbd_mirroring","site_name","bootstrap","pool_peer","update_dashboards","tracking_id","ecp","crushRule","image_id_spec","bucket_names","account_names","group_names","flow_ids","pipe_ids","rgwStorageClass","iscsiTarget","nvmeofSubsystem","nvmeofListener","nvmeofNamespace","nvmeofInitiator","topic","service","crudMessage","crudMessageId","volume","subvolumegroup","snapshotSchedule","smbCluster","smbShare","smbJoinAuth","smbUsersgroups","svc_id","target_iqn","nqn","host_name","nsid","nsCount","plural","share_id","authId","usersGroupsId","volumeName","clientId","subvolumegroupName","_getTaskTitle","_metadata","exception","getRunningTitle","TaskWrapperService","taskManagerService","_handleExecutingTasks","asyncTask","TextAreaJsonFormatterService","pixels","NgZoneScheduler","scheduler","asyncScheduler","LeaveNgZoneScheduler","schedule","EnterNgZoneScheduler","NgZoneSchedulerService","leave","TimerService","DEFAULT_REFRESH_INTERVAL","DEFAULT_DUE_TIME","refreshInterval","dueTime","observeOn","TreeViewService","findNode","node","expandNode","nodeToExpand","nodesCopy","tree","expandedNodes","concatURLSegments","segments","Location","joinWithSlash","buildURL","absolute","getURL","verb","getCreateFrom","getDelete","getAdd","getRemove","getRecreate","initialStep","isComplete","WizardStepsService","currentStep$","steps$","moveToNextStep","moveToPreviousStep","isLastStep","isFirstStep","BlockUIService","BlockUIModule","CephfsService","baseUiURL","depth","getCephfs","getTabs","getClients","evictClient","fsId","getMdsCounters","getFsRootDirectory","mkSnapshot","rmSnapshot","quota","quotas","metadataPool","metadata_pool","isCephFsPool","rename","new_vol_name","setAuth","caps","rootSquash","client_id","getUsedPools","textWrap","code_r1","CodeBlockComponent_ng_container_0_span_3_Template","codes","CodeBlockComponent","grayBg","CodeBlockComponent_ng_container_0_Template","CodeBlockComponent_ng_template_1_Template","singleCodeBlock_r3","CephfsMountDetailsComponent","activeModal","MOUNT_DIRECTORY","mount","mountData","rootPath","fuse","HealthService","getFullHealth","getMinimalHealth","getClusterCapacity","getClusterFsid","getOrchestratorName","getTelemetryStatus","DirectoryStoreService","cephFsService","_directoryStoreSubject","directoryStore$","stopDirectoryPolling","isLoading","loadDirectories","store","retry","term","regEx","stopPollingDictories","CephfsAuthModalComponent_ng_container_6_ng_template_8_span_0_Template","CephfsAuthModalComponent_ng_container_6_ng_template_17_span_0_Template","CephfsAuthModalComponent_ng_container_6_ng_template_23_span_0_Template","permission_r5","CephfsAuthModalComponent_ng_container_6_ng_container_29_cd_help_text_4_Template","CephfsAuthModalComponent_ng_container_6_ng_template_8_Template","CephfsAuthModalComponent_ng_container_6_ng_template_15_Template","CephfsAuthModalComponent_ng_container_6_ng_template_17_Template","CephfsAuthModalComponent_ng_container_6_ng_template_23_Template","CephfsAuthModalComponent_ng_container_6_ng_container_29_Template","fsNameError_r6","userIdHelperText_r7","userId","userIdError_r8","directoryError_r9","directoryStore","clientPermissions","CephfsAuthModalComponent","cephfsService","changeDetectorRef","isSubvolume","input","FormControl","updateOn","transformPermissions","toggleFormControl","CephfsAuthModalComponent_ng_container_6_Template","CephfsChartComponent","lhsCounter","rhsCounter","yAxisID","position","ts","displayFormats","quarter","maxRotation","LHS","RHS","chartType","Chart","register","registerables","mdsCounter","setChartTooltip","updateChart","chartDataset","convertTimeSeries","deltaTimeSeries","sourceSeries","dp","prev","cur","mdsCounter_r1","row_r2","CephfsDetailComponent","dimless","objectValues","setStandbys","ranks","activityTmpl","poolUsageTpl","comparator","_valueA","_valueB","valA","avail","valB","CephfsDetailComponent_div_14_Template","CephfsDetailComponent_ng_template_15_Template","CephfsDetailComponent_ng_template_17_Template","mdsCounters","CephfsClientsComponent","triggerApiUpdate","evictAction","evictClientModal","CephfsDirectoriesComponent_div_9_ng_container_5_Template","selectedDir","snapshots","selectOrigin","CephfsDirectoriesComponent","treeViewService","selectNode","getDirectory","setSettings","updateDirectory","setUpQuotaTable","setUpSnapshotTable","originTmpl","dirValue","updateQuotaModal","unsetQuotaModal","disableCreateSnapshot","deleteSnapshotModal","folders","dirs","requestedPaths","nodeIds","setRootNode","firstCall","unsetLoadingIndicator","setLoadingIndicator","updateTreeStructure","updateQuotaTable","updateTree","getChildren","hasActiveNodes","treeComponent","getNode","getSubDirectories","subTree","getSubTree","createNode","innerNode","toNode","quotaKey","valueConvertFn","currentPath","getOrigin","nextMaxValue","nextMaxPath","getParent","nextMaxDir","originPath","nextTreeMaximum","quotaSetting","getQuotaFromTree","originTree","inherited","nextMax","getModalQuotaTitle","getQuotaValueFromPathMsg","getQuotaFormField","getQuotaName","isBytesQuotaSelected","formValidators","onSuccess","forceDirRefresh","quotaValue","conclusion","toISOString","validateValue","alreadyExists","selectedNode","getChildrenAndPaths","directories","received","cached","removeOldDirectory","updateExistingDirectory","addNewDirectory","rmDir","updateDirectoriesParentNode","newDir","updatedDir","currentDirObject","sub","refreshAllDirectories","setInterval","clearInterval","loadingTimeout","l","parentNode","TreeViewComponent","CephfsDirectoriesComponent_div_8_Template","CephfsDirectoriesComponent_div_9_Template","CephfsDirectoriesComponent_ng_template_10_Template","CephfsSubvolumeFormComponent_ng_container_6_ng_template_8_span_0_Template","CephfsSubvolumeFormComponent_ng_container_6_ng_template_8_span_1_Template","CephfsSubvolumeFormComponent_ng_container_6_ng_template_8_span_2_Template","subvolumeForm","subvolumegroup_r4","CephfsSubvolumeFormComponent_ng_container_6_cds_select_15_option_3_Template","subvolumeGroups_r5","CephfsSubvolumeFormComponent_ng_container_6_ng_template_21_span_0_Template","pool_r6","CephfsSubvolumeFormComponent_ng_container_6_ng_template_8_Template","CephfsSubvolumeFormComponent_ng_container_6_cds_select_15_Template","CephfsSubvolumeFormComponent_ng_container_6_ng_template_21_Template","CephfsSubvolumeFormComponent_ng_container_6_option_25_Template","subvolumeName","subvolumeNameError_r7","subVolumeGroups$","sizeError_r8","dataPools","scopePermissions","initialMode","CephfsSubvolumeFormComponent","cephFsSubvolumeService","cephFsSubvolumeGroupService","octalToHumanReadable","populateForm","subvolumeGroupName","isolatedNamespace","bytes_quota","pool_namespace","editSize","CephfsSubvolumeFormComponent_ng_container_6_Template","ColorClassFromTextPipe","cssClasses","hash","charCode","tooltipText","CdLabelComponent","CdLabelComponent_span_0_Template","CdLabelComponent_ng_template_1_Template","key_value_r2","selectItem","activeItem","item_r5","VerticalNavigationComponent_ng_container_0_li_5_a_1_Template","VerticalNavigationComponent_ng_container_0_li_5_a_2_Template","VerticalNavigationComponent_ng_container_0_h3_1_Template","VerticalNavigationComponent_ng_container_0_li_5_Template","inputIdentifier","filteredItems","VerticalNavigationComponent","emitFilteredItems","emitActiveItem","filterInput","VerticalNavigationComponent_ng_container_0_Template","selectSubVolumeGroup","subvolumeGroupList","bytes_used","CephfsSubvolumeListComponent_ng_template_8_ng_template_1_span_0_Template","bytes_pcent","CephfsSubvolumeListComponent_ng_template_8_cd_usage_bar_0_Template","CephfsSubvolumeListComponent_ng_template_8_ng_template_1_Template","noLimitTpl_r5","result_r7","CephfsSubvolumeListComponent_ng_template_12_span_0_Template","row_r9","_c6","CephfsSubvolumeListComponent_ng_template_14_span_2_Template","CephfsSubvolumeListComponent_ng_template_14_ng_template_3_Template","CephfsSubvolumeListComponent_ng_template_14_cd_label_5_Template","CephfsSubvolumeListComponent_ng_template_14_cd_label_6_Template","snapshotRetainedTpl_r10","errorMessage","CephfsSubvolumeListComponent_ng_template_16_cd_alert_panel_2_Template","form_r11","CephfsSubvolumeListComponent","cephfsSubVolumeService","cephfsSubvolumeGroupService","healthService","selectedName","groupsSubject","subVolumesList","activeGroupName","nameTpl","quotaUsageTpl","modeToHumanReadableTpl","openModal","showAttachInfo","removeSubVolumeModal","unshift","selectedSubVolume","removeForm","removeTmpl","getSubVolumes","subVolumes$","CephfsSubvolumeListComponent_div_1_Template","CephfsSubvolumeListComponent_ng_template_8_Template","CephfsSubvolumeListComponent_ng_template_10_Template","CephfsSubvolumeListComponent_ng_template_12_Template","CephfsSubvolumeListComponent_ng_template_14_Template","CephfsSubvolumeListComponent_ng_template_16_Template","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_8_span_0_Template","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_8_span_1_Template","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_8_span_2_Template","subvolumegroupForm","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_18_span_0_Template","pool_r4","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_8_Template","CephfsSubvolumegroupFormComponent_ng_container_6_ng_template_18_Template","CephfsSubvolumegroupFormComponent_ng_container_6_option_22_Template","subvolumegroupNameError_r5","sizeError_r6","CephfsSubvolumegroupFormComponent","CephfsSubvolumegroupFormComponent_ng_container_6_Template","subvolumeGroup_r3","CephfsSubvolumeGroupComponent_ng_container_0_cd_table_1_Template","CephfsSubvolumeGroupComponent_ng_template_2_ng_template_1_span_0_Template","CephfsSubvolumeGroupComponent_ng_template_2_cd_usage_bar_0_Template","CephfsSubvolumeGroupComponent_ng_template_2_ng_template_1_Template","CephfsSubvolumeGroupComponent_ng_template_6_span_0_Template","CephfsSubvolumeGroupComponent","cephfsSubvolumeGroup","subvolumeGroup$","CephfsSubvolumeGroupComponent_ng_container_0_Template","CephfsSubvolumeGroupComponent_ng_template_2_Template","CephfsSubvolumeGroupComponent_ng_template_4_Template","CephfsSubvolumeGroupComponent_ng_template_6_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_ng_template_8_span_0_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_ng_template_8_span_1_Template","snapshotForm","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_cds_select_15_ng_container_1_option_1_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_cds_select_15_ng_container_1_option_2_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_cds_select_15_ng_container_1_Template","subVolumeGroups","subVolume_r6","resetValidators","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_div_16_option_2_Template","subVolumes_r7","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_ng_template_8_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_cds_select_15_Template","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_div_16_Template","snapshotNameError_r8","CephfsSubvolumeSnapshotsFormComponent","subVolumes","CephfsSubvolumeSnapshotsFormComponent_ng_container_6_Template","RepeatFrequency","RepeaFrequencySingular","RepeaFrequencyPlural","RetentionFrequency","RetentionFrequencyCopy","selectSubVolume","snapshots$","CephfsSubvolumeSnapshotsListComponent_div_1_div_3_Template","CephfsSubvolumeSnapshotsListComponent_div_1_div_5_Template","isSubVolumesAvailable","CephfsSubvolumeSnapshotsListComponent_ng_template_2_cd_alert_panel_0_Template","CephfsSubvolumeSnapshotsListComponent","cephfsSubvolumeService","snapshotSubject","subVolumeSubject","activeSubVolumeName","allGroups","no","yes","cloneModal","getSubVolumesSnapshot","subVolume","CephfsSubvolumeSnapshotsListComponent_ng_container_0_Template","CephfsSubvolumeSnapshotsListComponent_div_1_Template","CephfsSubvolumeSnapshotsListComponent_ng_template_2_Template","noGroupsTpl_r5","Hourly","Daily","Weekly","Monthly","Yearly","Y","CephfsSnapshotScheduleService","rest","retentionPolicy","deleteUrl","checkScheduleExists","frequency","getSnapshotScheduleList","checkRetentionPolicyExists","retentionFrequencies","retentionFrequenciesRemoved","getSnapshotSchedule","errorIndex","intersection","retention","recursive","snapList","uniqWith","snapItem","scheduleCopy","parseScheduleCopy","retentionCopy","parseRetentionCopy","isEqual","scheduleArr","frequencyUnit","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_9_span_0_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_9_span_1_Template","snapScheduleForm","freq_r4","CephfsSnapshotscheduleFormComponent_ng_container_6_cds_select_17_option_1_Template","repeatFrequency","repeatFrequencyError_r5","repeatFrequencies","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_18_span_0_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_20_span_0_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_20_span_1_Template","freq_r7","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_22_cds_select_6_option_1_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_22_ng_template_10_span_0_Template","retentionPolicies","i_r8","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_22_cds_select_6_Template","removeRetentionPolicy","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_22_ng_template_10_Template","retentionPolicyError_r9","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_7_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_9_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_span_12_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_cds_select_17_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_18_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_template_20_Template","CephfsSnapshotscheduleFormComponent_ng_container_6_ng_container_22_Template","addRetentionPolicy","directoryError_r10","repeatInterval","repeatIntervalError_r11","CephfsSnapshotscheduleFormComponent","snapScheduleService","cd","subvolumeService","retentionPoliciesToRemove","currentDatetime","getUTCFullYear","getUTCMonth","getUTCDate","pluck","startDate","idx","freqKey","FormGroup","retentionInterval","retentionFrequency","FormArray","validateSchedule","validateRetention","convertNumberToString","parseDatetime","month","day","parseSchedule","parseRetentionPolicies","retentionPoliciesToAdd","ctrl","updateObj","retention_to_add","retention_to_remove","snapScheduleObj","snap_schedule","retentionPoliciesValues","retention_policy","frm","getFormArrayItem","frmArrayName","retentionList","rp","CephfsSnapshotscheduleFormComponent_ng_container_6_Template","enableSnapshotSchedule","pathForSelection","tmp_9_0","tmp_10_0","tmp_13_0","CephfsSnapshotscheduleListComponent_ng_template_2_ng_template_6_cd_copy_2_clipboard_button_0_Template","CephfsSnapshotscheduleListComponent_ng_template_2_span_3_Template","CephfsSnapshotscheduleListComponent_ng_template_2_ng_template_4_Template","CephfsSnapshotscheduleListComponent_ng_template_2_ng_template_6_Template","fullpathTpl","inactiveStatusTpl_r4","ret_r5","CephfsSnapshotscheduleListComponent_ng_template_4_ul_0_li_1_Template","CephfsSnapshotscheduleListComponent_ng_template_4_ul_0_Template","noDataTpl_r7","CephfsSnapshotscheduleListComponent_ng_template_6_span_0_Template","_r9","snapshotSchedules$","tableActions$","CephfsSnapshotscheduleListComponent","snapshotScheduleService","subject$","snapScheduleModuleStatus$","MODULE_NAME","ENABLE_MODULE_TIMER","deleteSnapshotSchedule","moduleServiceListSub","modules","subvolTpl","retentionTpl","isActive","deactivateSnapshotSchedule","activateSnapshotSchedule","CephfsSnapshotscheduleListComponent_cd_alert_panel_0_Template","CephfsSnapshotscheduleListComponent_ng_template_2_Template","CephfsSnapshotscheduleListComponent_ng_template_4_Template","CephfsSnapshotscheduleListComponent_ng_template_6_Template","CephfsSnapshotscheduleListComponent_ng_template_8_Template","CephfsSnapshotscheduleListComponent_cd_table_10_Template","softRefresh","CephfsTabsComponent_ng_container_0_ng_template_6_Template","CephfsTabsComponent_ng_container_0_ng_template_10_Template","CephfsTabsComponent_ng_container_0_ng_template_14_Template","CephfsTabsComponent_ng_container_0_ng_template_18_Template","CephfsTabsComponent_ng_container_0_ng_template_22_Template","CephfsTabsComponent_ng_container_0_ng_template_26_Template","CephfsTabsComponent_ng_container_0_ng_template_33_Template","CephfsTabsComponent_ng_container_0_ng_template_37_Template","nav_r4","CephfsTabsComponent","grafanaPermission","setupSelected","unsubscribeInterval","mdsInfo","firstMds","grafanaId","updateInterval","subscribeInterval","mds_counters","CephfsTabsComponent_ng_container_0_Template","loadFilesystems","CephfsListComponent_ng_template_3_cd_cephfs_tabs_1_Template","CephfsListComponent_ng_template_7_cd_grafana_0_Template","CephfsListComponent","configurationService","monAllowPoolDelete","authorizeModal","removeVolumeModal","getDisableDesc","monSection","selectedFileSystem","fsData","deleteTpl","CephfsListComponent_ng_template_3_Template","CephfsListComponent_ng_template_5_Template","CephfsListComponent_ng_template_7_Template","fileSystemListContent_r3","grafanaContent_r4","ConfigOptionTypes","knownTypes","inputType","humanReadable","defaultMin","patternHelpText","isNumberType","getType","currentType","t","getTypeValidators","typeParams","typeValidators","getTypeStep","decimal","ConfigFormCreateRequestModel","force_update","service_r2","ConfigurationFormComponent_div_0_div_18_span_4_Template","configForm","section_r4","minValue","ConfigurationFormComponent_div_0_ng_container_22_div_2_span_5_Template","ConfigurationFormComponent_div_0_ng_container_22_div_2_span_6_Template","ConfigurationFormComponent_div_0_ng_container_22_div_2_span_7_Template","ConfigurationFormComponent_div_0_ng_container_22_div_2_span_8_Template","humanReadableType","getStep","ConfigurationFormComponent_div_0_ng_container_22_div_1_Template","ConfigurationFormComponent_div_0_ng_container_22_div_2_Template","ConfigurationFormComponent_div_0_div_14_Template","ConfigurationFormComponent_div_0_div_15_Template","ConfigurationFormComponent_div_0_div_16_Template","ConfigurationFormComponent_div_0_div_17_Template","ConfigurationFormComponent_div_0_div_18_Template","ConfigurationFormComponent_div_0_ng_container_22_Template","forceUpdate","openCriticalConfirmModal","availSections","ConfigurationFormComponent","configService","formControls","long_desc","daemon_default","services","addControl","getValidators","sectionValue","can_update_at_runtime","createRequest","ConfigurationFormComponent_div_0_Template","conf_r1","isLast_r2","flags","flag_r3","service_r5","ConfigurationDetailsComponent_ng_container_0_span_22_Template","ConfigurationDetailsComponent_ng_container_0_span_52_Template","ConfigurationDetailsComponent_ng_container_0_span_57_Template","level","enum_values","see_also","ConfigurationDetailsComponent","runtime","no_mon_update","startup","cluster_create","ConfigurationDetailsComponent_ng_container_0_Template","conf_r3","isLast_r4","ConfigurationComponent_ng_template_3_span_0_span_1_Template","ConfigurationComponent_ng_template_3_span_0_Template","ConfigurationComponent","Level","basic","advanced","dev","levelVal","getConfigOptUri","isEditable","canAutoResize","confValTpl","getConfigurationList","ConfigurationComponent_cd_configuration_details_2_Template","ConfigurationComponent_ng_template_3_Template","ClusterService","getStatus","updateStatus","PaginateParams","majorVersion","minorVersion","OsdService","uiPath","osdDevices","isDeployementModeSimple","osdRecvSpeedModalPriorities","KNOWN_PRIORITIES","osd_max_backfills","osd_recovery_max_active","osd_recovery_max_single_start","osd_recovery_sleep","driveGroups","trackingId","getOsdSettings","getDetails","scrub","deep","getDeploymentOptions","getFlags","updateFlags","updateIndividualFlags","ids","markOut","markIn","markDown","weight","deviceClass","markLost","purge","preserveId","preserve_id","safeToDestroy","safeToDelete","osdId","DriveGroup","deviceSelectionAttrs","human_readable_type","spec","setName","setHostPattern","host_pattern","setDeviceSelection","attr","clearDeviceSelection","setSlots","slots","setFeature","OrchestratorFeature","HOST_LIST","HOST_ADD","HOST_REMOVE","HOST_LABEL_ADD","HOST_LABEL_REMOVE","HOST_MAINTENANCE_ENTER","HOST_MAINTENANCE_EXIT","HOST_FACTS","HOST_DRAIN","SERVICE_LIST","SERVICE_CREATE","SERVICE_EDIT","SERVICE_DELETE","SERVICE_RELOAD","DAEMON_LIST","OSD_GET_REMOVE_STATUS","OSD_CREATE","OSD_DELETE","DEVICE_LIST","DEVICE_BLINK_LIGHT","PlacementPipe","kv","hostPattern","CreateRgwServiceEntitiesComponent","rgwMultisiteService","rgwZoneService","rgwZonegroupService","rgwRealmService","createMultisiteEntitiesForm","catch","CreateRgwServiceEntitiesComponent_span_14_Template","CreateRgwServiceEntitiesComponent_span_20_Template","CreateRgwServiceEntitiesComponent_span_26_Template","createMultisiteSetup","currentURL","serviceType_r4","service_r6","prePopulateId","ServiceFormComponent_div_22_option_5_Template","ServiceFormComponent_div_22_option_6_Template","ServiceFormComponent_div_22_option_7_Template","ServiceFormComponent_div_22_option_8_Template","ServiceFormComponent_div_22_span_9_Template","serviceForm","frm_r7","pool_r9","setNvmeServiceId","ServiceFormComponent_div_23_option_5_Template","ServiceFormComponent_div_23_option_6_Template","ServiceFormComponent_div_23_option_7_Template","ServiceFormComponent_div_23_option_8_Template","ServiceFormComponent_div_23_span_11_Template","rbdPools","_r10","ServiceFormComponent_div_24_span_9_Template","ServiceFormComponent_div_25_span_6_Template","ServiceFormComponent_div_25_span_8_Template","ServiceFormComponent_div_25_span_9_Template","ServiceFormComponent_div_25_span_10_Template","realm_r11","ServiceFormComponent_div_26_option_5_Template","ServiceFormComponent_div_26_option_6_Template","realmList","zonegroup_r12","ServiceFormComponent_div_27_option_5_Template","zonegroupList","zone_r13","ServiceFormComponent_div_28_option_5_Template","zoneList","_r14","onPlacementChange","labelFocus","labelClick","ServiceFormComponent_div_38_span_5_Template","searchLabels","ServiceFormComponent_div_40_span_8_Template","ServiceFormComponent_div_40_span_9_Template","ServiceFormComponent_ng_container_41_span_6_Template","ServiceFormComponent_ng_container_41_span_7_Template","ServiceFormComponent_ng_container_41_span_8_Template","pool_r16","ServiceFormComponent_div_42_option_5_Template","ServiceFormComponent_div_42_option_6_Template","ServiceFormComponent_div_42_option_7_Template","ServiceFormComponent_div_42_option_8_Template","ServiceFormComponent_div_42_span_9_Template","ServiceFormComponent_ng_container_43_span_19_Template","ServiceFormComponent_ng_container_43_span_20_Template","ServiceFormComponent_ng_container_43_span_21_Template","ServiceFormComponent_ng_container_43_span_27_Template","ServiceFormComponent_ng_container_43_span_36_Template","_c5","feature_r17","ServiceFormComponent_ng_container_44_span_8_Template","ServiceFormComponent_ng_container_44_span_17_Template","ServiceFormComponent_ng_container_44_span_18_Template","ServiceFormComponent_ng_container_44_div_25_Template","smbFeaturesList","ServiceFormComponent_ng_container_45_span_10_Template","ServiceFormComponent_ng_container_45_span_20_Template","ServiceFormComponent_ng_container_45_span_21_Template","ServiceFormComponent_ng_container_45_span_22_Template","ServiceFormComponent_ng_container_45_span_23_Template","ServiceFormComponent_ng_container_45_span_33_Template","ServiceFormComponent_ng_container_45_span_34_Template","ServiceFormComponent_ng_container_45_span_35_Template","ServiceFormComponent_ng_container_45_span_36_Template","ServiceFormComponent_ng_container_45_div_37_Template","unmanaged","snmpVersion_r19","ServiceFormComponent_ng_container_46_div_21_span_9_Template","ServiceFormComponent_ng_container_46_div_21_span_10_Template","authProtocol_r20","ServiceFormComponent_ng_container_46_div_22_option_7_Template","ServiceFormComponent_ng_container_46_div_22_span_8_Template","_c7","privacyProtocol_r21","ServiceFormComponent_ng_container_46_div_23_option_7_Template","_c8","ServiceFormComponent_ng_container_46_div_27_span_6_Template","ServiceFormComponent_ng_container_46_div_28_span_6_Template","ServiceFormComponent_ng_container_46_div_29_span_6_Template","ServiceFormComponent_ng_container_46_div_30_span_6_Template","_r18","clearValidations","ServiceFormComponent_ng_container_46_option_8_Template","ServiceFormComponent_ng_container_46_span_9_Template","ServiceFormComponent_ng_container_46_span_19_Template","ServiceFormComponent_ng_container_46_span_20_Template","ServiceFormComponent_ng_container_46_div_21_Template","ServiceFormComponent_ng_container_46_div_22_Template","ServiceFormComponent_ng_container_46_div_23_Template","ServiceFormComponent_ng_container_46_div_27_Template","ServiceFormComponent_ng_container_46_div_28_Template","ServiceFormComponent_ng_container_46_div_29_Template","ServiceFormComponent_ng_container_46_div_30_Template","snmp_version","privacy_protocol","ServiceFormComponent_ng_container_47_span_9_Template","ServiceFormComponent_ng_container_47_span_18_Template","ServiceFormComponent_ng_container_47_span_31_Template","ServiceFormComponent_ng_container_47_span_40_Template","ServiceFormComponent_ng_container_47_span_41_Template","ServiceFormComponent_ng_container_47_span_50_Template","ServiceFormComponent_ng_container_48_span_6_Template","ServiceFormComponent_ng_container_48_span_7_Template","ServiceFormComponent_ng_container_48_span_8_Template","ServiceFormComponent_ng_container_48_span_31_Template","sslProtocolsItems","_r22","fileUpload","ServiceFormComponent_ng_container_49_div_2_span_10_Template","ServiceFormComponent_ng_container_49_div_2_span_11_Template","_r23","ServiceFormComponent_ng_container_49_div_3_span_10_Template","ServiceFormComponent_ng_container_49_div_3_span_11_Template","ServiceFormComponent_ng_container_49_ng_container_1_Template","ServiceFormComponent_ng_container_49_div_2_Template","ServiceFormComponent_ng_container_49_div_3_Template","_c9","ServiceFormComponent_ng_container_50_span_10_Template","ServiceFormComponent_ng_container_50_span_11_Template","ServiceFormComponent_ng_container_50_span_12_Template","ServiceFormComponent_ng_container_50_span_13_Template","ServiceFormComponent_div_53_span_7_Template","_r25","ServiceFormComponent_div_54_span_7_Template","_r26","ServiceFormComponent_div_55_span_7_Template","_r27","ServiceFormComponent_div_56_span_7_Template","ServiceFormComponent_div_57_span_7_Template","ServiceFormComponent","cephServiceService","hostService","poolService","rbdService","taskWrapperService","timerServiceVariable","MDS_SVC_ID_PATTERN","SNMP_DESTINATION_PATTERN","SNMP_ENGINE_ID_PATTERN","INGRESS_SUPPORTED_SERVICE_TYPES","SMB_CONFIG_URI_PATTERN","OAUTH2_ISSUER_URL_PATTERN","SSL_CIPHERS_PATTERN","DEFAULT_SSL_PROTOCOL_ITEM","hiddenServices","serviceTypes","serviceIds","multisiteInfo","showRealmCreationForm","sslCiphersItems","cipher","showMgmtGatewayMessage","merge","typeahead","isPopupOpen","placement","enable_mtls","root_ca_cert","client_cert","client_key","server_cert","server_key","rgw_frontend_port","trusted_ip_list","api_port","api_user","api_password","acc","config_uri","custom_dns","join_sources","user_sources","include_ceph_users","backend_service","frontend_port","monitor_port","virtual_interface_networks","ssl_protocols","ssl_ciphers","ciphers","ssl_cert","ssl_key","enable_auth","snmp_destination","engine_id","auth_protocol","snmp_community","snmp_v3_auth_username","snmp_v3_auth_password","snmp_v3_priv_password","grafana_port","grafana_admin_password","provider_display_name","client_secret","oidc_issuer_url","https_address","allowlist_domains","resolveRoute","serviceList","onServiceTypeChange","disableForEditing","placementKey","placementValue","api_secure","setRgwFields","rgw_realm","rgw_zonegroup","rgw_zone","rgw_frontend_ssl_certificate","hrefSplitted","href","selectedValues","initial_admin_password","getDefaultsEntitiesForRgw","defaultRealmName","defaultZonegroupName","defaultZoneName","zonegroupNames","getDefaultPlacementCount","zonegroups","realmNames","default_realm","default_zonegroup","default_zone","defaultsInfo","_error","setNvmeDefaultPool","defaultPool","requiresServiceId","setServiceId","selectedServiceType","reader","addEventListener","backendService","self","getRawValue","taskUrl","snmpVersion","privacyProtocol","bsModalRef","i12","i13","i14","i15","NgbTypeahead","ServiceFormComponent_cd_alert_panel_9_Template","ServiceFormComponent_cd_alert_panel_10_Template","ServiceFormComponent_cd_alert_panel_11_Template","ServiceFormComponent_cd_alert_panel_12_Template","ServiceFormComponent_option_20_Template","ServiceFormComponent_span_21_Template","ServiceFormComponent_div_22_Template","ServiceFormComponent_div_23_Template","ServiceFormComponent_div_24_Template","ServiceFormComponent_div_25_Template","ServiceFormComponent_div_26_Template","ServiceFormComponent_div_27_Template","ServiceFormComponent_div_28_Template","ServiceFormComponent_div_37_Template","ServiceFormComponent_div_38_Template","ServiceFormComponent_div_39_Template","ServiceFormComponent_div_40_Template","ServiceFormComponent_ng_container_41_Template","ServiceFormComponent_div_42_Template","ServiceFormComponent_ng_container_43_Template","ServiceFormComponent_ng_container_44_Template","ServiceFormComponent_ng_container_45_Template","ServiceFormComponent_ng_container_46_Template","ServiceFormComponent_ng_container_47_Template","ServiceFormComponent_ng_container_48_Template","ServiceFormComponent_ng_container_49_Template","ServiceFormComponent_ng_container_50_Template","ServiceFormComponent_cd_alert_panel_51_Template","ServiceFormComponent_div_52_Template","ServiceFormComponent_div_53_Template","ServiceFormComponent_div_54_Template","ServiceFormComponent_div_55_Template","ServiceFormComponent_div_56_Template","ServiceFormComponent_div_57_Template","OrchestratorDocPanelComponent","missingFeatures","OrchestratorDocPanelComponent_cd_alert_panel_0_Template","OrchestratorDocPanelComponent_ng_template_1_Template","elseBlock_r1","DaemonService","daemonName","actionType","container_image","daemonTypes","daemon_types","ServiceDaemonListComponent_div_1_ng_container_1_Template","serviceDaemonDetailsTpl_r1","ServiceDaemonListComponent_ng_template_2_ng_template_6_ng_container_0_Template","getServices","serviceColumns","ServiceDaemonListComponent_ng_template_2_ng_template_10_cd_table_0_Template","hasOrchestrator","ServiceDaemonListComponent_ng_template_2_ng_template_6_Template","ServiceDaemonListComponent_ng_template_2_ng_template_10_Template","row_r5","getStatusClass","status_desc","ServiceDaemonListComponent_ng_template_6_ul_0_li_1_span_7_Template","ServiceDaemonListComponent_ng_template_6_ul_0_li_1_span_8_Template","event_r6","created","ServiceDaemonListComponent_ng_template_6_ul_0_li_1_Template","events_r7","ServiceDaemonListComponent_ng_template_6_ul_0_Template","ServiceDaemonListComponent_ng_template_6_ng_template_1_Template","noEventsAvailable_r8","ServiceDaemonListComponent_ng_template_8_cd_table_0_Template","cpu_percentage","ServiceDaemonListComponent","relativeDatePipe","daemonService","hiddenColumns","showDocPanel","daemonAction","actionDisabled","statusTpl","cpuTpl","listTpl","daemonsTable","daemonsTableTplsSub","daemonsTableTpls","tableRefs","serviceSub","sortDaemonEvents","events","event1","event2","getTime","daemon_type","ServiceDaemonListComponent_cd_orchestrator_doc_panel_0_Template","ServiceDaemonListComponent_div_1_Template","ServiceDaemonListComponent_ng_template_2_Template","ServiceDaemonListComponent_ng_template_4_Template","ServiceDaemonListComponent_ng_template_6_Template","ServiceDaemonListComponent_ng_template_8_Template","ServiceDaemonListComponent_ng_template_10_Template","serviceDetailsTpl_r11","ServiceDetailsComponent","ServiceDetailsComponent_ng_container_0_Template","ServicesComponent_ng_container_1_cd_service_details_3_Template","ServicesComponent_ng_template_3__svg_svg_2_Template","serviceUrls","ServicesComponent_ng_template_5_ng_container_0_a_1_Template","ServicesComponent_ng_template_5_ng_container_0_ng_template_2_Template","isMgmtGateway","mgmtGateway_r5","ServicesComponent_ng_template_5_ng_container_0_Template","ServicesComponent_ng_template_5_ng_template_1_Template","noUrl_r6","BASE_URL","ServicesComponent","routedModal","actionOrchFeatures","isLoadingServices","getDisable","urlTpl","runningTpl","configureServiceUrl","pagination_obs","ServicesComponent_cd_orchestrator_doc_panel_0_Template","ServicesComponent_ng_container_1_Template","ServicesComponent_ng_template_3_Template","ServicesComponent_ng_template_5_Template","OsdDeploymentOptions","COST_CAPACITY","THROUGHPUT","IOPS","OsdCreationPreviewModalComponent","osdService","InventoryDevicesComponent","showAvailDeviceOnly","diskType","filterColumns","filterChange","fetchInventory","identify","hdd","ssd","fetchInventorySub","onColumnFiltersChanged","filter_r2","OsdDevicesSelectionModalComponent_cd_alert_panel_7_span_3_Template","requiredFilters","filteredDevices","capacity","OsdDevicesSelectionModalComponent","wizardStepService","canSubmit","inventoryDevices","onFilterChange","OsdDevicesSelectionModalComponent_cd_alert_panel_7_Template","OsdDevicesSelectionModalComponent_div_10_Template","deviceType","showSelectionModal","addButtonTooltip","availDevices","canSelect","expansionCanSelect","filter_r4","OsdDevicesSelectionGroupsComponent_ng_template_10_span_1_Template","clearDevices","OsdDevicesSelectionGroupsComponent_ng_template_10_div_8_Template","OsdDevicesSelectionGroupsComponent","cleared","tooltips","noAvailDevices","addPrimaryFirst","addByFilters","isOsdPage","disableSelect","updateAddButtonTooltip","clearedDevices","OsdDevicesSelectionGroupsComponent_span_5_Template","OsdDevicesSelectionGroupsComponent_span_6_Template","OsdDevicesSelectionGroupsComponent_span_7_Template","OsdDevicesSelectionGroupsComponent_ng_container_9_Template","OsdDevicesSelectionGroupsComponent_ng_template_10_Template","blockClearDevices_r5","emitDeploymentSelection","optionName_r4","deploymentOptions","recommended_option","OsdFormComponent_div_1_div_29_span_12_Template","OsdFormComponent_div_1_div_32_span_12_Template","feature_r7","dataDeviceSelectionGroups_r9","simpleDeployment","OsdFormComponent_div_1_div_1_Template","OsdFormComponent_div_1_cd_alert_panel_5_Template","emitDeploymentMode","OsdFormComponent_div_1_div_13_Template","onDevicesSelected","onDevicesCleared","OsdFormComponent_div_1_div_29_Template","OsdFormComponent_div_1_div_32_Template","OsdFormComponent_div_1_div_40_Template","OsdFormComponent_div_1_div_41_Template","hideTitle","optionNames","walDeviceSelectionGroups_r10","dbDeviceSelectionGroups_r11","featureList","hideSubmitBtn","OsdFormComponent","emitDriveGroup","emitDeploymentOption","emitMode","allDevices","dataDeviceFilters","dbDeviceFilters","walDeviceFilters","driveGroup","encrypted","getDataDevices","selectedFormValues","enableFeatures","deploymentOption","featureFormUpdate","walSlots","dbSlots","checked","disableFeatures","hostnameFilter","walDeviceSelectionGroups","dbDeviceSelectionGroups","slotControlName","dataDeviceSelectionGroups","deploymentSpec","previewButtonPanel","submitButton","OsdFormComponent_cd_orchestrator_doc_panel_0_Template","OsdFormComponent_div_1_Template","HostFormComponent_ng_container_6_ng_template_9_span_0_Template","HostFormComponent_ng_container_6_ng_template_9_span_1_Template","hostForm","formDir_r3","HostFormComponent_ng_container_6_div_23_ng_template_4_span_0_Template","HostFormComponent_ng_container_6_div_23_ng_template_4_Template","checkHostNameValue","HostFormComponent_ng_container_6_ng_template_9_Template","HostFormComponent_ng_container_6_div_23_Template","labelsOption","HostFormComponent_ng_container_6_div_28_Template","hostnameError_r4","hideMaintenance","HostFormComponent","hostnameArray","hostContext","hostnames","uniqueLabels","isCommaSeparatedPattern","isRangeTypePattern","replaceBraces","checkHostNamePattern","hostnameRange","hostArray","allLabels","hostName","HostFormComponent_ng_container_6_Template","location_r2","DeviceListComponent_ng_template_2_ng_container_0_cd_label_1_Template","DeviceListComponent_ng_template_2_ng_container_0_Template","osdIdDaemon_r5","readableDaemons_r6","daemon_r7","DeviceListComponent_ng_template_6_ng_container_0_cd_label_1_Template","DeviceListComponent_ng_template_6_ng_container_0_Template","daemons_r8","daemon_r9","DeviceListComponent_ng_template_8_ng_container_0_Template","daemons_r10","translationMapping","DeviceListComponent_ng_template_10_span_0_Template","DeviceListComponent_ng_template_10_span_1_Template","DeviceListComponent_ng_template_10_span_2_Template","DeviceListComponent_ng_template_10_span_3_Template","life_expectancy_enabled","value_r12","DeviceListComponent","osdList","other","minWidth","good","bad","stale","lifeExpectancyTemplate","lifeExpectancyTimestampTemplate","locationTemplate","daemonNameTemplate","updateDevicesFn","DeviceListComponent_cd_table_0_Template","DeviceListComponent_cd_alert_panel_1_Template","DeviceListComponent_ng_template_2_Template","DeviceListComponent_ng_template_4_Template","DeviceListComponent_ng_template_6_Template","DeviceListComponent_ng_template_8_Template","DeviceListComponent_ng_template_10_Template","DeviceListComponent_ng_template_12_Template","device_r1","userMessage","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_template_1_ng_template_2_ng_container_0_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_template_1_ng_template_2_ng_template_1_Template","smart_status","passed","selfTestFailed_r2","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_template_1_cd_alert_panel_0_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_template_1_ng_template_2_Template","isEmpty","hasSmartStatus_r3","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_6_cd_table_key_value_0_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_6_cd_alert_panel_2_Template","smart","attributes","smartDataColumns","nvmeData","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_10_cd_table_0_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_10_cd_table_key_value_1_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_10_cd_table_key_value_2_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_10_cd_alert_panel_3_Template","scsi_error_counter_log","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_6_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_ng_template_10_Template","innerNav_r5","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_0_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_template_1_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_ng_container_3_Template","noError_r6","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_ng_template_3_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_ng_container_3_Template","nav_r7","SmartListComponent_ng_container_0_ng_container_3_cd_alert_panel_1_Template","SmartListComponent_ng_container_0_ng_container_3_ng_container_3_Template","SmartListComponent_ng_container_0_cd_alert_panel_1_Template","SmartListComponent_ng_container_0_cd_alert_panel_2_Template","SmartListComponent_ng_container_0_ng_container_3_Template","incompatible","SmartListComponent","isSmartError","isNvmeSmartData","isAtaSmartData","isIscsiSmartData","smartData","deviceId","smartctl_error_code","_result","smartctl_output","nvme_vendor","json_format_version","extractAtaData","extractIscsiData","extractNvmeData","nvme_smart_health_information_log","serial_number","scsi_grown_defect_list","ata_smart_attributes","ata_smart_data","scsiSmartDataColumns","SmartListComponent_ng_container_0_Template","SmartListComponent_ng_template_1_Template","isLoading_r8","InventoryComponent","reloadInterval","firstRefresh","InventoryComponent_cd_orchestrator_doc_panel_0_Template","InventoryComponent_ng_container_1_Template","selectedHostname","HostDetailsComponent_ng_container_0_ng_container_7_ng_template_3_Template","HostDetailsComponent_ng_container_0_ng_container_8_ng_template_3_Template","HostDetailsComponent_ng_container_0_ng_container_9_ng_template_3_Template","HostDetailsComponent_ng_container_0_ng_template_13_cd_smart_list_0_Template","noHostname_r2","HostDetailsComponent_ng_container_0_ng_template_6_Template","HostDetailsComponent_ng_container_0_ng_container_7_Template","HostDetailsComponent_ng_container_0_ng_container_8_Template","HostDetailsComponent_ng_container_0_ng_container_9_Template","HostDetailsComponent_ng_container_0_ng_template_13_Template","nav_r3","HostDetailsComponent","HostDetailsComponent_ng_container_0_Template","HostDetailsComponent_ng_template_1_Template","getHosts","HostsComponent_ng_template_5_cd_host_details_5_Template","hasTableDetails","hideToolHeader","expandClusterActions","HostsComponent_ng_container_7_ng_template_3_Template","service_r3","HostsComponent_ng_template_9_span_0_Template","services_r4","HostsComponent_ng_template_11_span_3_Template","msg_r6","HostsComponent_ng_template_13_div_0_ul_1_Template","last_r7","HostsComponent_ng_template_13_div_0_Template","HostsComponent_ng_template_13_ng_container_1_Template","HostsComponent_ng_template_15_div_0_Template","HostsComponent_ng_template_15_div_1_Template","validValue","HostsComponent_ng_template_17_div_0_Template","HostsComponent_ng_template_17_div_1_Template","HostsComponent","showGeneralActionsOnly","showExpandClusterBtn","isLoadingHosts","fromLink","isExecuting","tableContext","nonOrchHost","hostDrain","enableDrainBtn","hostMaintenance","enableMaintenanceBtn","hostNameTpl","servicesTpl","hostMetricTmpl","hostDimlessTmpl","flashTmpl","maintenanceConfirmTpl","checkHostsFactsAvailable","orchFeatures","get_facts","transformHostsData","hostKey","memory_total_bytes","memory_total_kb","raw_capacity","hdd_capacity_bytes","flash_capacity_bytes","orchTmpl","factsAvailable","hostList","HostsComponent_ng_template_5_Template","HostsComponent_ng_container_6_Template","HostsComponent_ng_container_7_Template","HostsComponent_ng_template_9_Template","HostsComponent_ng_template_11_Template","HostsComponent_ng_template_13_Template","HostsComponent_ng_template_15_Template","HostsComponent_ng_template_17_Template","HostsComponent_ng_template_19_Template","HostsComponent_ng_template_21_Template","nav_r10","totalDevices","totalCapacity","deploymentDescText","CreateClusterReviewComponent","wizardStepsService","totalCPUs","totalMemory","isSimpleDeployment","dataDevices","dataDeviceCapacity","walDevices","walDeviceCapacity","dbDevices","dbDeviceCapacity","hostsCount","cpu_count","wal","db","optionsObj","CreateClusterReviewComponent_tr_12_Template","CreateClusterReviewComponent_ng_template_30_Template","simpleDeploymentTextTpl_r2","createCluster","skipClusterCreation","projectConstants","setDriveGroup","setDeploymentOptions","setDeploymentMode","onSkip","CreateClusterComponent_div_1_div_7_Template","CreateClusterComponent_div_1_div_8_Template","CreateClusterComponent_div_1_div_9_Template","CreateClusterComponent_div_1_div_10_Template","CreateClusterComponent_div_1_button_12_Template","onPreviousStep","onNextStep","stepTitles","showCancelButtonLabel","showSubmitButtonLabel","CreateClusterComponent","clusterService","startClusterCreation","selectedOption","stepsToSkip","showWelcomeScreen","welcome","stepTitle","skipConfirmTpl","finalize","CreateClusterComponent_div_0_Template","CreateClusterComponent_div_1_Template","CreateClusterComponent_ng_template_2_Template","CrushmapComponent_ng_template_11_ng_container_1_ng_container_1_ng_container_1_Template","nodeTemplateRef_r5","child_r3","depth_r4","CrushmapComponent_ng_template_11_ng_container_1_ng_container_1_Template","node_r6","CrushmapComponent_ng_template_11_ng_container_1_Template","data_r7","CrushmapComponent_ng_template_13_span_0_Template","CrushmapComponent_ng_container_15_ng_container_1_Template","node_r8","metadataTitle","CrushmapComponent","crushRuleService","metadataKeyMap","abstractTreeData","rootNodes","roots","treeNodeMap","reverse","generateTreeLeaf","cdId","resultNode","labelTpl","labelContext","childId","onNodeSelected","remain","CrushmapComponent_i_8_Template","CrushmapComponent_ng_template_11_Template","CrushmapComponent_ng_template_13_Template","CrushmapComponent_ng_container_15_Template","CrushmapComponent_div_16_Template","LogsService","getLogs","validateDashboardUrl","TextToDownloadService","downloadText","filename","saveAs","Blob","DownloadButtonComponent","textToDownloadService","fileName","toLocaleDateString","objectItem","textItem","DownloadButtonComponent_button_5_Template","DownloadButtonComponent_button_6_Template","SearchHighlightPipe","escapeRegExp","clog","clogText","LogsComponent_div_0_ng_template_7_div_0_div_1_cd_download_button_1_Template","LogsComponent_div_0_ng_template_7_div_0_div_1_cd_copy_2_clipboard_button_2_Template","showDownloadCopyButton","line_r2","stamp","priority","LogsComponent_div_0_ng_template_7_div_0_div_1_Template","LogsComponent_div_0_ng_template_7_div_0_p_3_Template","LogsComponent_div_0_ng_template_7_div_0_ng_container_4_Template","showClusterLogs","scrollable","noEntriesTpl_r3","LogsComponent_div_0_ng_template_7_div_0_Template","audit_log","auditLogText","LogsComponent_div_0_ng_template_11_div_0_div_1_cd_download_button_1_Template","LogsComponent_div_0_ng_template_11_div_0_div_1_cd_copy_2_clipboard_button_2_Template","line_r4","LogsComponent_div_0_ng_template_11_div_0_div_1_Template","LogsComponent_div_0_ng_template_11_div_0_p_3_Template","LogsComponent_div_0_ng_template_11_div_0_ng_container_4_Template","LogsComponent_div_0_ng_template_11_div_0_Template","showAuditLogs","LogsComponent_div_0_ng_template_15_ng_container_0_div_1_Template","promtailServiceStatus$","daemonLogsTpl_r5","LogsComponent_div_0_ng_template_15_ng_container_0_Template","showDaemonLogs","lokiServiceStatus$","LogsComponent_div_0_ng_container_1_Template","LogsComponent_div_0_ng_template_7_Template","LogsComponent_div_0_ng_template_11_Template","LogsComponent_div_0_ng_template_15_Template","logFiltersTpl_r7","defaultTab","showNavLinks","nav_r6","prio_r9","filterLogs","LogsComponent_ng_template_1_div_0_option_6_Template","clearSearchKey","d_r10","selectedDate","clearDate","startTime","endTime","priorities","maxDate","LogsComponent_ng_template_1_div_0_Template","showFilterTools","LogsComponent","logsService","cephService","getFullYear","getMonth","getDate","getDaemonDetails","contentData","logToText","abstractFilters","yearMonthDay","sTime","eTime","filterExecutor","logs","localDate","minutes","prio","y_m_d","timeSpan","logText","LogsComponent_div_0_Template","LogsComponent_ng_template_1_Template","LogsComponent_ng_template_3_Template","LogsComponent_ng_template_5_Template","moduleOption_r2","MgrModuleFormComponent_div_0_div_7_div_5_select_2_option_1_Template","enum_allowed","MgrModuleFormComponent_div_0_div_7_div_5_input_1_Template","MgrModuleFormComponent_div_0_div_7_div_5_select_2_Template","MgrModuleFormComponent_div_0_div_7_div_5_span_3_Template","MgrModuleFormComponent_div_0_div_7_div_5_span_4_Template","mgrModuleForm","frm_r4","MgrModuleFormComponent_div_0_div_7_div_6_span_2_Template","MgrModuleFormComponent_div_0_div_7_div_6_span_3_Template","MgrModuleFormComponent_div_0_div_7_div_6_span_4_Template","MgrModuleFormComponent_div_0_div_7_div_6_span_5_Template","MgrModuleFormComponent_div_0_div_7_div_7_span_2_Template","MgrModuleFormComponent_div_0_div_7_div_7_span_3_Template","MgrModuleFormComponent_div_0_div_7_cd_helper_3_Template","MgrModuleFormComponent_div_0_div_7_div_4_Template","MgrModuleFormComponent_div_0_div_7_div_5_Template","MgrModuleFormComponent_div_0_div_7_div_6_Template","MgrModuleFormComponent_div_0_div_7_div_7_Template","MgrModuleFormComponent_div_0_div_7_Template","moduleOptions","MgrModuleFormComponent","moduleName","moduleOption","minLength","maxLength","default_value","goToListView","MgrModuleFormComponent_div_0_Template","module_config","MgrModuleDetailsComponent","MgrModuleDetailsComponent_ng_container_0_Template","MgrModuleListComponent","getModuleUri","isTableActionDisabled","getTableActionDisabledDesc","getModuleList","always_on","MgrModuleListComponent_cd_mgr_module_details_3_Template","MonitorService","getMonitor","mon_status","monmap","fsid","modified","epoch","quorum_con","quorum_mon","required_con","required_mon","MonitorComponent","monitorService","inQuorum","dataA","dataB","lastValueA","lastValueB","notInQuorum","in_quorum","cdOpenSessions","num_sessions","out_quorum","MonitorComponent_table_5_Template","OsdSettings","clusterWideTooltip","changeValue","OsdFlagsIndivModalComponent_div_7_span_5_Template","OsdFlagsIndivModalComponent_div_7_hr_9_Template","indeterminate","clusterWide","last_r5","OsdFlagsIndivModalComponent","initialSelection","osdFlagsForm","osdCount","clusterWideFlags","activatedIndivFlags","getActivatedIndivFlags","flagCount","flagsCount","activatedFlag","resetSelection","activeFlags","selectedIds","OsdFlagsIndivModalComponent_div_7_Template","OsdFlagsModalComponent_div_7_hr_8_Template","last_r4","OsdFlagsModalComponent","allFlags","noin","noout","noup","nodown","pause","noscrub","nobackfill","norebalance","norecover","sortbitwise","purged_snapdirs","recovery_deletes","pglog_hardlimit","unknownFlags","newFlags","OsdFlagsModalComponent_div_7_Template","option_r1","ConfigOptionComponent_div_1_div_1_cd_helper_7_Template","resetValue","additionalTypeInfo","ConfigOptionComponent_div_1_div_2_cd_helper_6_Template","ConfigOptionComponent_div_1_div_2_button_10_Template","ConfigOptionComponent_div_1_div_2_span_11_Template","ConfigOptionComponent_div_1_div_2_span_12_Template","ConfigOptionComponent_div_1_div_2_span_13_Template","ConfigOptionComponent_div_1_div_2_span_14_Template","optionsForm","optionsFormShowReset","optionsFormDir","ConfigOptionComponent_div_1_div_1_Template","ConfigOptionComponent_div_1_div_2_Template","ConfigOptionComponent_div_1_hr_3_Template","ConfigOptionComponent","NgForm","optionsFormGroupName","optionsFormGroup","optionNameToText","loadStoredData","saveValues","optionValue","ConfigOptionComponent_div_1_Template","OsdPgScrubModalOptions","basicOptions","advancedOptions","advancedEnabled","osdPgScrubForm","OsdPgScrubModalComponent","basicOptionsValues","advancedOptionsValues","OsdPgScrubModalComponent_a_13_Template","OsdPgScrubModalComponent_div_14_Template","priority_r2","attr_r3","OsdRecvSpeedModalComponent_div_20_cd_helper_4_Template","OsdRecvSpeedModalComponent_div_20_span_7_Template","OsdRecvSpeedModalComponent_div_20_span_8_Template","OsdRecvSpeedModalComponent_div_20_span_9_Template","OsdRecvSpeedModalComponent_div_20_span_10_Template","osdRecvSpeedForm","OsdRecvSpeedModalComponent","priorityAttrs","customizePriority","configOptionName","config_option_values","getCurrentValues","detectPriority","setPriority","setDescription","configOptionValues","callbackFn","currentValues","customPriority","onCustomizePriorityChange","onPriorityChange","selectedPriorityName","selectedPriority","OsdRecvSpeedModalComponent_option_12_Template","OsdRecvSpeedModalComponent_span_13_Template","OsdRecvSpeedModalComponent_div_20_Template","OsdReweightModalComponent_span_11_span_1_Template","OsdReweightModalComponent_span_11_span_2_Template","OsdReweightModalComponent","fb","currentWeight","reweightForm","OsdReweightModalComponent_span_11_Template","OsdScrubModalComponent","joinPipe","scrubForm","i18n_2","osd_map","osd_metadata","OsdDetailsComponent_ng_container_0_ng_template_14_cd_table_key_value_0_Template","OsdDetailsComponent_ng_container_0_ng_template_14_ng_template_1_Template","noMetaData_r3","OsdDetailsComponent_ng_container_0_ng_template_22_cd_table_performance_counter_0_Template","OsdDetailsComponent_ng_container_0_ng_container_23_ng_template_3_Template","OsdDetailsComponent_ng_container_0_ng_template_6_Template","OsdDetailsComponent_ng_container_0_ng_template_10_Template","OsdDetailsComponent_ng_container_0_ng_template_14_Template","OsdDetailsComponent_ng_container_0_ng_template_18_Template","OsdDetailsComponent_ng_container_0_ng_template_22_Template","OsdDetailsComponent_ng_container_0_ng_container_23_Template","OsdDetailsComponent","OsdDetailsComponent_ng_container_0_Template","getOsdList","OsdListComponent_ng_template_5_cd_osd_details_4_Template","clusterWideActions","OsdListComponent_ng_container_6_ng_template_3_Template","osdIds_r4","markActionDescription_r3","active_r5","missingStats_r6","storedPgs_r7","message_r8","OsdListComponent_ng_template_10_div_0_li_6_Template","OsdListComponent_ng_template_10_div_0_li_7_Template","OsdListComponent_ng_template_10_div_0_li_8_Template","OsdListComponent_ng_template_10_div_0_li_9_Template","actionDescription_r10","OsdListComponent_ng_template_10_div_0_Template","OsdListComponent_ng_template_10_div_1_Template","safeToPerform_r11","osdIds_r12","flag_r13","flag_r14","OsdListComponent_ng_template_12_span_0_Template","OsdListComponent_ng_template_12_span_1_Template","row_r15","cdClusterFlags","cdIndivFlags","row_r16","stat_bytes","stat_bytes_used","osdSettings","nearfull_ratio","full_ratio","form_r17","OsdListComponent","collectStates","disabledFlags","indivFlagNames","configureFlagsIndivAction","hasOsdSelected","scrubAction","showConfirmationModal","isNotSelectedOrInState","showCriticalConfirmationModal","configureFlagsAction","configureQosParamsAction","configurePgScrubAction","destroyed","flagsTpl","osdUsageTpl","getSelectedOsds","getSelectedOsdIds","osdIds","selectedOsds","collectedStates","stats_history","out_bytes","op_out_bytes","in_bytes","op_in_bytes","deploy_state","selectedOsd","markAction","markOsdConfirmationTpl","markActionDescription","deleteFormGroup","preserve","deleteOsdExtraTpl","templateItemDescription","checkKey","taskWrapped","criticalConfirmationTpl","safeToPerform","missingStats","missing_stats","storedPgs","stored_pgs","i18n_5","i18n_7","i18n_8","i18n_10","i18n_12","i18n_14","OsdListComponent_ng_template_5_Template","OsdListComponent_ng_container_6_Template","OsdListComponent_ng_template_8_Template","OsdListComponent_ng_template_10_Template","OsdListComponent_ng_template_12_Template","OsdListComponent_ng_template_14_Template","OsdListComponent_ng_template_16_Template","nav_r18","PrometheusListHelper","prometheusService","isPrometheusConfigured","isAlertmanagerConfigured","PrometheusAlertFormatter","sendNotifications","convertToCustomAlerts","alerts","alert","getPrometheusNotificationStatus","alertname","generatorURL","annotations","fingerprint","convertAlertToNotification","formatType","appendSourceLink","PrometheusAlertService","alertFormatter","canAlertsBeNotified","rulesSubject","rules$","handleAlerts","notifyOnAlertChanges","activeAlerts","activeCriticalAlerts","severity","activeWarningAlerts","localeCompare","oldAlerts","changedAlerts","getChangedAlerts","getVanishedAlerts","prometheusAlertService","PrometheusTabsComponent","PrometheusTabsComponent_small_4_Template","PrometheusTabsComponent_small_5_Template","ActiveAlertListComponent_cd_table_2_ng_container_2_cd_table_key_value_1_Template","ActiveAlertListComponent_cd_table_2_ng_container_2_Template","ActiveAlertListComponent","unprocessed","suppressed","externalLinkTpl","ActiveAlertListComponent_cd_alert_panel_1_Template","ActiveAlertListComponent_cd_table_2_Template","ActiveAlertListComponent_ng_template_3_Template","RulesListComponent_cd_table_2_ng_container_1_cd_table_key_value_1_Template","RulesListComponent_cd_table_2_ng_container_1_Template","RulesListComponent","rulesSubscription","RulesListComponent_cd_alert_panel_1_Template","RulesListComponent_cd_table_2_Template","PrometheusSilenceMatcherService","valueAttributePath","job","singleMatch","matcher","multiMatch","matchers","isRegex","getMatchedRules","describeMatch","attributePath","getAttributePath","getMatchText","cssClass","noRule","noAlerts","TimeDiffService","calculateDuration","endDate","getDuration","ms","getUTCHours","getUTCMinutes","calculateDate","getDurationMs","getNumbersFromString","attribute_r2","matcherMatch","SilenceMatcherModalComponent","silenceMatcher","editMode","nameAttributes","possibleValues","valueClick","valueFocus","subscribeToChanges","setPossibleValues","getMode","preFillControls","SilenceMatcherModalComponent_option_14_Template","SilenceMatcherModalComponent_span_15_Template","SilenceMatcherModalComponent_span_22_Template","SilenceMatcherModalComponent_div_23_Template","config_r3","SilenceFormComponent_ng_template_0_ng_container_1_span_1_i_1_Template","SilenceFormComponent_ng_template_0_ng_container_1_span_1_i_2_Template","matcher_r4","attribute","index_r6","SilenceFormComponent_ng_template_0_ng_container_1_span_1_Template","SilenceFormComponent_ng_template_0_ng_container_1_ng_container_2_Template","SilenceFormComponent_ng_template_0_ng_container_1_Template","showMatcherModal","deleteMatcher","matcherConfig","formDir_r10","SilenceFormComponent_span_54_ng_container_1_Template","matcherTpl_r13","i_r12","matcher_r11","SilenceFormComponent","timeDiff","succeededLabels","matchName","matchValue","recreate","datetimeFormat","isNavigate","chooseMode","authenticate","setupDates","formatValidator","expiresAt","startsAt","endsAt","createdBy","comment","updateDate","subscribeDateChanges","updateStartDate","toDate","nextDate","onDateChange","updateDuration","getModeSpecificData","silences","fillFormWithSilence","fillFormByAlert","validateMatchers","setMatcher","modalComponent","getSubmitData","getNotificationTile","SilenceFormComponent_ng_template_0_Template","SilenceFormComponent_cd_helper_11_Template","SilenceFormComponent_span_18_Template","SilenceFormComponent_span_25_Template","ps_r8","SilenceFormComponent_span_35_Template","SilenceFormComponent_span_41_Template","pe_r9","SilenceFormComponent_span_48_Template","SilenceFormComponent_h5_53_Template","SilenceFormComponent_span_54_Template","SilenceFormComponent_div_61_Template","SilenceFormComponent_ng_template_67_Template","SilenceFormComponent_ng_template_69_Template","popStart_r14","popEnd_r15","SilenceListComponent_cd_table_2_ng_container_2_cd_table_key_value_1_Template","SilenceListComponent_cd_table_2_ng_container_2_Template","SilenceListComponent","silenceFormComponent","selectionExpired","activeSilences","alertNames","silencedAlerts","i18nSilence","applicationName","SilenceListComponent_cd_alert_panel_1_Template","SilenceListComponent_cd_table_2_Template","TelemetryService","getReport","license_name","TelemetryNotificationService","setVisibility","disableModule","TelemetryComponent_div_0_div_2_div_14_Template","toggleIdent","TelemetryComponent_div_0_div_2_ng_container_97_Template","TelemetryComponent_div_0_div_2_span_108_Template","sendToUrl","sendToDeviceUrl","moduleEnabled","showContactInfo","previewForm","report","TelemetryComponent_div_0_div_2_Template","TelemetryComponent_div_0_div_3_Template","TelemetryComponent","telemetryService","telemetryNotificationService","licenseAgrmt","newConfig","configResp","requiredFields","contactInfofields","reportId","device_url","channel_ident","createConfigForm","replacer","replacerTest","formatReport","perf_keys","formatReportTest","createPreviewForm","updateReportFromConfig","updatedConfig","availableChannels","channels_available","updatedChannels","channel","channels","contactInfofield","report_id","buildReport","followUpFunc","getChangedConfig","configField","TelemetryComponent_div_0_Template","intervalList","RefreshSelectorComponent","refreshIntervalService","intervalKeys","selectedInterval","changeRefreshInterval","RefreshSelectorComponent_option_7_Template","HealthColor","HardwareService","getSummary","HealthColorPipe","failedDaemons_r1","last_r2","HealthChecksComponent_li_2_div_6_div_4_Template","getFailedDaemons","check_r3","details_r5","HealthChecksComponent_li_2_div_6_Template","HealthChecksComponent_li_2_div_7_Template","HealthChecksComponent_ng_template_3_ng_container_0_Template","HealthChecksComponent","failedDaemons","healthData","HealthChecksComponent_ng_container_0_Template","HealthChecksComponent_li_2_Template","HealthChecksComponent_ng_template_3_Template","logsLink_r6","version_r2","UpgradeStartModalComponent_div_10_option_5_Template","UpgradeStartModalComponent_div_10_option_6_Template","UpgradeStartModalComponent_div_10_option_7_Template","UpgradeStartModalComponent_div_10_option_8_Template","UpgradeStartModalComponent_div_10_span_9_Template","showImageField","versions","upgradeForm","useImage","UpgradeStartModalComponent_div_12_span_5_Template","UpgradeStartModalComponent","upgradeService","availableVersions","customImageName","customImageNameControl","startUpgrade","availableVersionsControl","UpgradeStartModalComponent_cd_alert_panel_9_Template","UpgradeStartModalComponent_div_10_Template","UpgradeStartModalComponent_div_11_Template","UpgradeStartModalComponent_div_12_Template","UpgradeService","upgradableServiceTypes","versionAvailableForUpgrades","upgradeInfo","upgradableVersions","targetVersion","cVersion","tVersion","resume","listCached","_listData$","_upgradableVersions","startUpgradeModal","UpgradableComponent_div_0_ng_container_1_h5_1_Template","UpgradableComponent_div_0_ng_container_1_ng_template_2_Template","status_r3","is_paused","inProgress_r2","UpgradableComponent_div_0_ng_container_1_Template","in_progress","isUpgradable_r4","upgradeModal","UpgradableComponent_ng_template_2_div_0_h5_2_Template","info_r6","UpgradableComponent_ng_template_2_div_0_Template","upgradeInfo$","UpgradableComponent","orchestratorService","orchAvailable","subs","upgrade_status","upgradeStatus$","upgradeModalRef","UpgradableComponent_div_0_Template","UpgradableComponent_ng_template_2_Template","DashboardPieComponent","highThreshold","lowThreshold","doughnutChartPlugins","defaultFontFamily","font","family","center_text","centerX","centerY","bottom","textAlign","textBaseline","fillText","fillStyle","chartConfig","cutout","aspectRatio","boxWidth","usePointStyle","generateLabels","cornerRadius","bodyFontSize","bodyFontStyle","xPadding","yPadding","datasetIndex","prepareRawUsage","nearFullRatioPercent","fullRatioPercent","percentAvailable","calcPercentage","percentUsed","dividend","ceil","PgSummaryPipe","pgCategoryService","statuses","pgAmount","categoryType","managedByConfig_r2","MANAGED_BY_CLUSTERS","DashboardV3Component_ng_container_33_span_1_Template","rgwCount","mdsMap","iscsiMap","DashboardV3Component_ng_container_36_cd_card_row_12_Template","DashboardV3Component_ng_container_36_cd_card_row_13_Template","DashboardV3Component_ng_container_36_cd_card_row_14_Template","isHardwareEnabled$","hardwareSummary$","monMap","mons","mgrMap","osdMap","poolStatus","pgStatus","enabledFeature_r4","checks","toggleAlertsWindow","alertType","DashboardV3Component_section_56_button_4_Template","DashboardV3Component_section_56_button_5_Template","DashboardV3Component_section_56_ng_container_10_Template","simplebar","alertsCard_r7","total_bytes","total_used_raw_bytes","capacityCardData","osdNearfull","osdFull","alertClass","alert_r8","DashboardV3Component_ng_template_69_ng_container_0_div_1_Template","DashboardV3Component_ng_template_69_ng_container_0_Template","DashboardV3Component_ng_template_71_ng_container_0_Template","DashboardV3Component","hardwareService","detailsCardData","flexHeight","autoHide","totalPgs","IPS","OPS","telemetryURL","origin","hardwareEnabled","hasHardwareError","hardwareSubject","destroy$","enabledFeature$","getHardwareConfig","managedByConfig$","loadInventories","refreshIntervalObs","getDetailsCardData","getTelemetryReport","getCapacityCardData","getTelemetryText","telemetryEnabled","cephVersion","getCapacityQueryValues","metric","__name__","CAPACITY_QUERY","hw_monitoring","exhaustMap","EMPTY","mgr_map","pg_info","fs_map","iscsi_daemons","health","DashboardV3Component_ng_container_33_Template","DashboardV3Component_ng_container_36_Template","DashboardV3Component_div_42_Template","DashboardV3Component_i_45_Template","DashboardV3Component_span_46_Template","DashboardV3Component_a_49_Template","DashboardV3Component_cd_health_checks_53_Template","DashboardV3Component_div_55_Template","DashboardV3Component_section_56_Template","DashboardV3Component_ng_container_59_Template","DashboardV3Component_ng_container_64_Template","DashboardV3Component_ng_template_69_Template","DashboardV3Component_ng_template_71_Template","DashboardV3Component_ng_template_73_Template","HealthPieComponent","isBytesData","showLabelAsTooltip","prepareFn","getChartTooltipBody","setChartSliceBorderWidth","bodySplit","nonZeroValueSlices","InfoCardComponent","cardClass","contentClass","InfoCardComponent_a_3_Template","InfoCardComponent_ng_template_4_Template","InfoGroupComponent","groupTitle","HealthLabel","HealthLabelPipe","MonSummaryPipe","quorum","osdDashboardSummaryPipe","osdSummary","downText","separator","outText","MgrDashboardSummaryPipe","activeTitleText","standbyHoverText","standbyTitleText","mgrSummary","MdsDashboardSummaryPipe","contentLine1","contentLine2","fsLength","infoObject","activeHoverText","HealthComponent_div_0_cd_info_group_1_cd_info_card_1_ng_container_1_i_8_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_1_ng_container_1_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_1_ng_container_2_Template","result_r2","HealthComponent_div_0_cd_info_group_1_cd_info_card_4_span_1_Template","transformedResult_r3","result_r4","HealthComponent_div_0_cd_info_group_1_cd_info_card_6_span_1_Template","result_r5","HealthComponent_div_0_cd_info_group_1_cd_info_card_8_span_1_Template","transformedResult_r6","HealthComponent_div_0_cd_info_group_1_cd_info_card_1_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_2_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_3_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_4_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_6_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_7_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_8_Template","HealthComponent_div_0_cd_info_group_1_cd_info_card_10_Template","enabledFeature_r7","rawCapacityChartConfig","prepareObjects","pgStatesText_r11","preparePgStatus","HealthComponent_div_0_cd_info_group_2_cd_info_card_3_ng_container_6_Template","HealthComponent_div_0_cd_info_group_2_cd_info_card_3_li_8_Template","pgStatusChartConfig","logsLink_r12","pgs_per_osd","HealthComponent_div_0_cd_info_group_2_cd_info_card_1_Template","HealthComponent_div_0_cd_info_group_2_cd_info_card_2_Template","HealthComponent_div_0_cd_info_group_2_cd_info_card_3_Template","HealthComponent_div_0_cd_info_group_2_cd_info_card_4_Template","HealthComponent_div_0_cd_info_group_2_cd_info_card_5_Template","df","object_stats","prepareReadWriteRatio","clientStatsConfig","prepareClientThroughput","client_perf","recovering_bytes_per_sec","scrub_status","HealthComponent_div_0_cd_info_group_3_cd_info_card_1_Template","HealthComponent_div_0_cd_info_group_3_cd_info_card_2_Template","HealthComponent_div_0_cd_info_group_3_cd_info_card_3_Template","HealthComponent_div_0_cd_info_group_3_cd_info_card_4_Template","HealthComponent_div_0_ng_template_4_ng_container_0_Template","HealthComponent_div_0_cd_info_group_1_Template","HealthComponent_div_0_cd_info_group_2_Template","HealthComponent_div_0_cd_info_group_3_Template","HealthComponent_div_0_ng_template_4_Template","HealthComponent","getHealth","ratioLabels","ratioData","write_op_per_sec","read_op_per_sec","read_bytes_sec","write_bytes_sec","nearfullRatio","fullRatio","objectCopies","num_object_copies","healthy","num_objects_misplaced","num_objects_degraded","num_objects_unfound","healthyPercentage","misplacedPercentage","degradedPercentage","unfoundPercentage","isClientReadWriteChartShowable","HealthComponent_div_0_Template","DashboardComponent","DashboardComponent_ng_container_3_Template","DashboardComponent_ng_template_5_Template","tmp_1_0","dashboardV3_r1","PerformanceCounterComponent","defaultFromLink","UserPasswordFormComponent","oldpassword","newpassword","confirmnewpassword","onPasswordChange","UserPasswordFormComponent_span_16_Template","UserPasswordFormComponent_span_17_Template","UserPasswordFormComponent_cd_helper_22_Template","UserPasswordFormComponent_span_29_Template","UserPasswordFormComponent_span_30_Template","UserPasswordFormComponent_span_31_Template","UserPasswordFormComponent_span_39_Template","UserPasswordFormComponent_span_40_Template","frm_r3","LoginPasswordFormComponent","LoginPasswordFormComponent_span_11_Template","LoginPasswordFormComponent_span_12_Template","LoginPasswordFormComponent_span_19_Template","LoginPasswordFormComponent_span_20_Template","LoginPasswordFormComponent_span_21_Template","LoginPasswordFormComponent_span_26_Template","LoginPasswordFormComponent_span_27_Template","Credentials","LoginComponent_div_0_div_10_Template","LoginComponent_div_0_div_18_Template","loginForm_r3","username_r4","password_r5","LoginComponent","isLoginActive","postInstalled","uri","history","replaceState","login_url","cluster_status","urlPath","LoginComponent_div_0_Template","sectionInfo","ErrorComponent_div_7_h4_6_Template","ErrorComponent_div_7_h4_7_Template","buttonRoute","buttonName","secondaryButtonRoute","secondaryButtonName","ErrorComponent_div_9_button_1_Template","ErrorComponent_div_9_button_2_Template","configureButtonTpl_r2","doConfigure","ErrorComponent_ng_template_10_button_0_Template","ErrorComponent_ng_template_14_div_0_Template","enableButton_r4","enableModule","ErrorComponent_ng_template_16_div_0_Template","ErrorComponent","routerSubscription","NavigationEnd","unloadHandler","returnValue","onSameUrlNavigation","buttonTitle","secondaryButtonTitle","ErrorComponent_div_7_Template","ErrorComponent_div_9_Template","ErrorComponent_ng_template_10_Template","ErrorComponent_ng_template_12_Template","ErrorComponent_ng_template_14_Template","ErrorComponent_ng_template_16_Template","elseBlock_r6","dashboardButton_r7","BlankLayoutComponent","SupportedLanguages","LanguageService","localeId","getLocale","default_lang","setLocale","lang","cookie","getLanguages","LOCALE_ID","lang_r2","changeLanguage","cs","de","es","fr","it","ja","ko","pl","pt","LanguageSelectorComponent","languageService","allLanguages","supportedLanguages","selectedLanguage","langs","reloadWindow","reload","LanguageSelectorComponent_ng_container_1_Template","CustomLoginBannerService","getBannerText","bannerText_r1","CustomLoginBannerComponent","customLoginBannerService","bannerText$","CustomLoginBannerComponent_p_0_Template","docItem_r1","LoginLayoutComponent","docItems","LoginLayoutComponent_li_14_Template","FaviconService","getAttribute","changeIcon","health_status","oldStatus","favicon","canvas","getContext","img","src","drawImage","globalCompositeOperation","beginPath","arc","faviconSize","PI","toDataURL","DOCUMENT","MotdService","MotdNotificationService","motdService","motdSource","localStorageKey","motd$","motd","processResponse","repeat","md5","CookiesService","cookieService","setToken","getToken","deleteToken","PrometheusNotificationService","backendFailure","handleNotifications","formatNotification","executingTask_r2","begin_time","NotificationsSidebarComponent_ng_template_0_div_0_Template","notification_r8","expire","i_r6","NotificationsSidebarComponent_ng_template_2_ng_container_0_div_7_button_11_Template","NotificationsSidebarComponent_ng_template_2_ng_container_0_div_7_button_12_Template","NotificationsSidebarComponent_ng_template_2_ng_container_0_div_7_ng_container_17_Template","NotificationsSidebarComponent_ng_template_2_ng_container_0_div_7_Template","NotificationsSidebarComponent_ng_template_2_ng_container_0_Template","NotificationsSidebarComponent_ng_template_4_div_0_Template","NotificationsSidebarComponent","prometheusNotificationService","isSidebarOpened","last_task","mutex","Mutex","timeout","triggerPrometheusAlerts","_handleTasks","acquire","end_time","isAfter","closeSidebar","silencePayload","NotificationsSidebarComponent_ng_template_0_Template","NotificationsSidebarComponent_ng_template_2_Template","NotificationsSidebarComponent_ng_template_4_Template","NotificationsSidebarComponent_ng_container_13_Template","NotificationsSidebarComponent_ng_container_14_Template","NotificationsSidebarComponent_ng_container_15_Template","tasksTpl_r10","notificationsTpl_r11","emptyTpl_r12","NotificationsComponent","hasRunningTasks","hasNotifications","NotificationsComponent_span_2_Template","FeedbackService","isKeyExist","createIssue","project","tracker","apiKey","api_key","redirect","FeedbackComponent_div_8_span_5_Template","FeedbackComponent_div_8_span_6_Template","feedbackForm","projectName_r5","trackerName_r6","FeedbackComponent","feedbackService","secondaryModal","isAPIKeySet","isFeedbackEnabled","keySub","issue","invalidApiKey","FeedbackComponent_cd_alert_panel_7_Template","FeedbackComponent_div_8_Template","FeedbackComponent_option_16_Template","FeedbackComponent_span_17_Template","FeedbackComponent_option_25_Template","FeedbackComponent_span_26_Template","FeedbackComponent_span_32_Template","FeedbackComponent_span_39_Template","LocalStorage","DASHBOARD_USRENAME","AboutComponent","userPermission","hostAddr","setVariables","mgr_host","versionNumber","versionHash","versionName","NOT_AVAILABLE","browserName","browserVersion","browserOS","os","DashboardHelpComponent","docsUrl","openAboutModal","openFeedbackModal","DashboardHelpComponent_ng_template_13_Template","customTrigger_r2","AdministrationComponent_ng_template_5__svg_svg_0_Template","AdministrationComponent","configOptPermission","AdministrationComponent_li_4_Template","AdministrationComponent_ng_template_5_Template","IdentityComponent","IdentityComponent_button_5_Template","IdentityComponent_ng_template_10_Template","cluster_r3","onClusterSelection","cluster_connection_status","NavigationComponent_cds_header_navigation_4_ng_container_2_Template","currentClusterName","clustersMap","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_2_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_4_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_5_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_6_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_cds_sidenav_item_7_Template","summaryData","warnings","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_cds_sidenav_item_3_small_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_cds_sidenav_item_3_small_4_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_cds_sidenav_item_2_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_cds_sidenav_item_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_cds_sidenav_item_4_Template","enabledFeature_r6","mirroring","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_10_cds_sidenav_item_23_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_11_cds_sidenav_item_2_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_11_cds_sidenav_item_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_11_cds_sidenav_item_4_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_12_cds_sidenav_item_3_small_4_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_12_cds_sidenav_item_3_small_5_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_12_cds_sidenav_item_2_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_12_cds_sidenav_item_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_cds_sidenav_item_2_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_cds_sidenav_item_3_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_cds_sidenav_item_4_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_cds_sidenav_item_5_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_cds_sidenav_item_6_Template","onMenuClick","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_7_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_8_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_9_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_10_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_11_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_12_Template","NavigationComponent_ng_template_22_ng_container_0_cds_sidenav_menu_13_Template","showMenuSidebar","NavigationComponent_ng_template_22_ng_container_0_Template","NavigationComponent","multiClusterService","clusterDetails","clusterTokenStatus","rightSidebarOpen","displayedSubMenu","clustersConfig","clusterKey","clusterUniqueKey","checkClusterConnectionStatus","selectedCluster","current_url","current_user","connectionStatus","blockHealthColor","HTMLElement","menuElement","clientViewBounding","getBoundingClientRect","innerHeight","scrollIntoView","behavior","block","toggleSubMenu","menu","toggleRightSidebar","clusterToken","NavigationComponent_cds_header_navigation_4_Template","NavigationComponent_div_12_Template","NavigationComponent_ng_template_15_Template","NavigationComponent_ng_container_19_Template","NavigationComponent_ng_template_22_Template","brandTemplate_r7","cd_menu_r8","BreadcrumbsResolver","getFullPath","disableSplit","crumbs","pathFromRoot","relativePath","crumb_r1","BreadcrumbsComponent_cds_breadcrumb_0_ng_container_1_cds_breadcrumb_item_1_Template","BreadcrumbsComponent_cds_breadcrumb_0_ng_container_1_cds_breadcrumb_item_2_Template","BreadcrumbsComponent_cds_breadcrumb_0_ng_container_1_Template","BreadcrumbsComponent","titleService","finished","defaultResolver","NavigationStart","currentRoot","routerState","_resolveCrumbs","distinct","postProcess","wrapIntoObservable","getTitleFromCrumbs","setTitle","crumbs$","resolver","firstChild","isPromise","currentLocation","crumb","BreadcrumbsComponent_cds_breadcrumb_0_Template","onDismissed","PwdExpirationNotificationComponent_cd_alert_panel_0_div_1_Template","PwdExpirationNotificationComponent_cd_alert_panel_0_div_2_Template","PwdExpirationNotificationComponent","displayNotification","getExpirationDays","expiration","valueOf","PwdExpirationNotificationComponent_cd_alert_panel_0_Template","notificationSeverity","TelemetryNotificationComponent","isNotificationHidden","configOptPermissions","TelemetryNotificationComponent_cd_alert_panel_0_Template","MotdComponent","motdNotificationService","MotdComponent_cd_alert_panel_0_Template","daemon_r2","onDaemonSelection","ContextComponent_ng_container_0_ng_container_1_ng_container_8_Template","data_r4","ContextComponent_ng_container_0_ng_container_1_Template","ftMap","isRgwRoute","ContextComponent","rgwUrlPrefix","rgwUserUrlPrefix","rgwRoleUrlPrefix","rgwBuckerUrlPrefix","rgwAccountsUrlPrefix","urlPrefix","NEVER","currentUrl","finally","ContextComponent_ng_container_0_Template","WorkbenchLayoutComponent","faviconService","isDisplayed","showTopNotification","ApiDocsComponent","SwaggerUI","dom_id","layout","ChangePasswordGuardService","NoSsoGuardService","UpgradeComponent_div_0_ng_container_1_cd_card_1_ng_container_1_h5_2_Template","UpgradeComponent_div_0_ng_container_1_cd_card_1_ng_container_1_ng_template_5_Template","UpgradeComponent_div_0_ng_container_1_cd_card_1_ng_container_1_Template","upgradeStatusTpl_r4","UpgradeComponent_div_0_ng_container_1_ng_template_9_i_6_Template","healthData_r5","registry","UpgradeComponent_div_0_ng_container_1_dl_20_ng_container_5_Template","fsid_r7","info$","loadingDetails_r8","daemons_r9","info_r11","upgradeNow","tmp_16_0","tmp_17_0","UpgradeComponent_div_0_ng_container_1_ng_template_28_div_0_ng_container_1_Template","noUpgradesAvailable_r12","UpgradeComponent_div_0_ng_container_1_ng_template_28_div_0_Template","checkingForUpgradeStatus_r13","UpgradeComponent_div_0_ng_container_1_cd_card_1_Template","UpgradeComponent_div_0_ng_container_1_ng_template_9_Template","UpgradeComponent_div_0_ng_container_1_ng_container_11_Template","UpgradeComponent_div_0_ng_container_1_i_15_Template","UpgradeComponent_div_0_ng_container_1_dl_20_Template","UpgradeComponent_div_0_ng_container_1_ng_container_23_Template","UpgradeComponent_div_0_ng_container_1_ng_template_28_Template","healthWarningAndError_r14","warningIcon_r15","tmp_18_0","fsid$","UpgradeComponent_div_0_ng_container_1_Template","healthData$","UpgradeComponent_ng_template_5_div_0_Template","upgradeStatusError_r17","UpgradeComponent_ng_template_7_div_0_Template","upgradeInfoError_r18","UpgradeComponent","ReplaySubject","fetchStatus","err","UpgradeComponent_div_0_Template","UpgradeComponent_ng_template_1_Template","UpgradeComponent_ng_template_3_Template","UpgradeComponent_ng_template_5_Template","UpgradeComponent_ng_template_7_Template","UpgradeComponent_ng_template_9_Template","UpgradeComponent_ng_template_11_Template","UpgradeComponent_ng_template_13_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_9_cd_alert_panel_1_Template","fsFailCmd","fsSetCmd","CephfsVolumeFormComponent_div_0_ng_container_1_ng_template_15_span_0_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_template_15_span_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_17_cd_alert_panel_4_Template","pool_r5","onPoolChange","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_select_2_option_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_select_2_option_2_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_select_2_option_3_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_select_2_option_4_Template","dataPoolError_r6","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_ng_template_3_span_0_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_text_label_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_cds_select_2_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_ng_template_3_Template","pool_r8","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_select_2_option_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_select_2_option_2_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_select_2_option_3_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_select_2_option_4_Template","metadataPoolError_r9","metadatPools","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_ng_template_3_span_0_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_text_label_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_cds_select_2_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_ng_template_3_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_ng_container_2_div_1_ng_template_4_span_0_Template","frm_r12","multiSelector","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_ng_container_2_div_1_ng_template_4_Template","labelError_r13","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_ng_container_2_div_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_ng_container_2_div_2_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_div_1_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_ng_container_2_Template","hostsAndLabels$","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_9_Template","CephfsVolumeFormComponent_div_0_ng_container_1_cd_alert_panel_10_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_template_15_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_17_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_18_Template","CephfsVolumeFormComponent_div_0_ng_container_1_div_19_Template","CephfsVolumeFormComponent_div_0_ng_container_1_ng_container_20_Template","orchStatus_r16","disableRename","nameError_r15","CephfsVolumeFormComponent_div_0_ng_container_1_Template","CephfsVolumeFormComponent","selectedLabels","selectedHosts","customPools","currentVolumeName","metaPool","joinable","refuse_client_session","usedPools","filteredPools","latest","orchStatus$","metadataChange","CephfsVolumeFormComponent_div_0_Template","pauseUpgrade","resumeUpgrade","stopUpgradeModal","UpgradeProgressComponent_div_0_button_6_Template","UpgradeProgressComponent_div_0_button_7_Template","UpgradeProgressComponent_div_0_button_8_Template","upgradeStatus_r5","which","services_complete","UpgradeProgressComponent","stopUpgrade","UpgradeProgressComponent_div_0_Template","connectionMessage","MultiClusterFormComponent_div_30_span_5_Template","MultiClusterFormComponent_div_30_span_6_Template","remoteClusterForm","MultiClusterFormComponent_div_31_span_9_Template","MultiClusterFormComponent_div_39_span_10_Template","MultiClusterFormComponent_div_39_span_11_Template","MultiClusterFormComponent","clusterApiUrlCmd","hubUrl","clusterAliasNames","clusterUrls","clusterUsers","clustersData","remoteClusterUrl","handleError","connectionVerified","handleSuccess","convertToHours","updatedUrl","commonSubscribtion","MultiClusterFormComponent_cd_alert_panel_8_Template","MultiClusterFormComponent_cd_alert_panel_9_Template","MultiClusterFormComponent_span_20_Template","MultiClusterFormComponent_span_21_Template","MultiClusterFormComponent_span_22_Template","MultiClusterFormComponent_span_28_Template","MultiClusterFormComponent_span_29_Template","MultiClusterFormComponent_div_30_Template","MultiClusterFormComponent_div_31_Template","MultiClusterFormComponent_div_32_Template","MultiClusterFormComponent_div_39_Template","CardGroupComponent","CardGroupComponent_div_0_Template","managedByConfig_r1","openRemoteClusterInfoModal","MultiClusterComponent_ng_template_0_ng_container_0_div_4_Template","MultiClusterComponent_ng_template_0_ng_container_0_div_5_Template","MultiClusterComponent_ng_template_0_ng_container_0_div_6_Template","MultiClusterComponent_ng_template_0_ng_container_0_Template","cluster_r5","cluster_name","reconnectionError","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_alert_panel_1_div_5_Template","prometheusConnectionErrors","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_h3_2_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_h3_3_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_h3_4_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_h3_5_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_h3_6_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_7_h3_2_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_7_h3_3_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_7_h3_4_Template","capacityLabels","capacityValues","iopsLabels","iopsValues","throughputLabels","throughputValues","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_18_cd_dashboard_area_chart_3_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_18_cd_dashboard_area_chart_4_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_18_cd_dashboard_area_chart_5_Template","COUNT_OF_UTILIZATION_CHARTS","poolCapacityLabels","poolCapacityValues","poolIOPSLabels","poolIOPSValues","poolThroughputLabels","poolThroughputValues","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_25_cd_dashboard_area_chart_3_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_25_cd_dashboard_area_chart_4_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_25_cd_dashboard_area_chart_5_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_alert_panel_1_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_alert_panel_2_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_6_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_7_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_i_12_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_14_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_16_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_18_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_table_21_Template","MultiClusterComponent_ng_container_6_div_1_ng_container_1_cd_card_25_Template","connectionErrorsCount","MultiClusterComponent_ng_container_6_div_1_ng_container_1_Template","MultiClusterComponent_ng_container_6_div_1_Template","managedByConfig_r10","emptyCluster_r11","row_r12","total_capacity","used_capacity","MultiClusterComponent","dashboardClustersMap","PROMETHEUS_DELAY","LOAD_DELAY","CLUSTERS_REFRESH_INTERVAL","ClusterUltilizationQueries","PoolUltilizationQueries","all","allQueries","clusterUsageTpl","flat","localClusterName","selectedQueries","getAlertsInfo","getClustersInfo","alertName","alertState","alertstate","totalCapacityMetric","getMgrMetadata","findCluster","getVersion","ceph_version","usedCapacity","findClusterData","available_capacity","federateJobName","federateMetrics","checkFederateMetricsStatus","generateQueryLabel","getQueryValues","federatedMetrics","metricEntry","instanceIpPort","instanceIp","instancePort","federationStatus","prometheusUrl","prometheus_url","prometheusIp","prometheusPort","errorEntry","metrics","clusterMetrics","fullVersion","MultiClusterComponent_ng_template_0_Template","MultiClusterComponent_ng_template_2_Template","MultiClusterComponent_ng_template_4_Template","MultiClusterComponent_ng_container_6_Template","MultiClusterComponent_ng_template_8_Template","selectedClusterFsid","MultiClusterDetailsComponent_ng_container_0_ng_container_3_ng_template_3_Template","MultiClusterDetailsComponent_ng_container_0_ng_container_3_Template","MultiClusterDetailsComponent","MultiClusterDetailsComponent_ng_container_0_Template","MultiClusterListComponent_ng_template_0_ng_container_0_Template","MultiClusterListComponent_ng_container_2_div_1_ng_template_6_cd_multi_cluster_details_3_Template","MultiClusterListComponent_ng_container_2_div_1_ng_template_6_Template","MultiClusterListComponent_ng_container_2_div_1_Template","managedByConfig_r5","emptyCluster_r6","row_r7","MultiClusterListComponent_ng_template_6_span_0_i_1_Template","expiryDate","MultiClusterListComponent_ng_template_6_span_0_Template","MultiClusterListComponent_ng_template_6_span_1_Template","MultiClusterListComponent_ng_template_6_span_2_Template","MultiClusterListComponent","clustersTokenMap","openDeleteClusterModal","toLocaleString","clusterStatus","time_left","relativeTo","MultiClusterListComponent_ng_template_0_Template","MultiClusterListComponent_ng_container_2_Template","MultiClusterListComponent_ng_template_4_Template","MultiClusterListComponent_ng_template_6_Template","CLUSTERING","Default","Always","Never","RESOURCE","AUTHMODE","PLACEMENT","APPYAML","APPJSON","SmbService","modalDataSubject","modalData$","dataUploader","signal","passData","setDataUploaded","uploadData","fileContents","parsedContent","yaml","removeCluster","listShares","listJoinAuths","listUsersGroups","createShare","getShare","deleteShare","shareId","getJoinAuth","getUsersGroups","createJoinAuth","joinAuth","join_auth","createUsersGroups","usersgroups","deleteJoinAuth","deleteUsersgroups","TABS","activeDirectory","standalone","overview","SmbTabsComponent","activeTab","tab","selectedTab","Tabs","JOIN_AUTH_PATH","SmbJoinAuthListComponent","smbService","auth_id","openDeleteModal","joinAuth$","loadJoinAuth","SmbDomainSettingModalComponent_ng_container_6_ng_template_8_span_0_Template","domainSettingsForm","jA_r5","i_r7","removeJoinSource","SmbDomainSettingModalComponent_ng_container_6_div_10_ng_container_1_option_7_Template","SmbDomainSettingModalComponent_ng_container_6_div_10_ng_container_1_ng_template_8_Template","SmbDomainSettingModalComponent_ng_container_6_div_10_ng_container_1_div_10_Template","ref","joinSourceError_r8","joinAuths_r9","SmbDomainSettingModalComponent_ng_container_6_div_10_ng_container_1_Template","addJoinSource","navigateCreateJoinSource","SmbDomainSettingModalComponent_ng_container_6_ng_template_8_Template","SmbDomainSettingModalComponent_ng_container_6_div_10_Template","realmNameError_r10","joinAuths$","SmbDomainSettingModalComponent","domainSettingsObject","newJoinSource","joinSource","SmbDomainSettingModalComponent_ng_container_6_Template","loadSMBShares","smbShares_r3","SHARE_PATH","SmbShareListComponent","deleteShareModal","smbShares$","SmbShareListComponent_ng_container_0_Template","SmbClusterTabsComponent","SmbClusterTabsComponent_ng_container_0_Template","loadSMBCluster","SmbClusterListComponent_ng_container_1_cd_smb_cluster_tabs_4_Template","smbClusters_r3","CLUSTER_PATH","SmbClusterListComponent","removeSMBClusterModal","smbClusters$","SmbClusterListComponent_ng_container_1_Template","SmbUsersgroupsDetailsComponent","loadUsersGroups","SmbUsersgroupsListComponent_ng_container_1_cd_smb_usersgroups_details_4_Template","usersGroups_r3","group_r4","SmbUsersgroupsListComponent_ng_template_3_cds_tag_0_Template","USERSGROUPS_PATH","SmbUsersgroupsListComponent","groupsNamesTpl","users_groups_id","usersGroups$","SmbUsersgroupsListComponent_ng_container_1_Template","SmbUsersgroupsListComponent_ng_template_3_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_template_11_span_0_Template","smbForm","SmbClusterFormComponent_div_0_ng_container_1_ng_template_19_span_0_Template","editDomainSettingsModal","deleteDomainSettingsModal","SmbClusterFormComponent_div_0_ng_container_1_div_21_span_10_Template","domain_settings","ug_r5","removeUserGroupSetting","SmbClusterFormComponent_div_0_ng_container_1_ng_container_22_div_1_option_5_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_22_div_1_ng_template_6_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_22_div_1_cds_icon_button_9_Template","joinSources","ugError_r9","usersGroups_r8","SmbClusterFormComponent_div_0_ng_container_1_ng_container_22_div_1_Template","addUserGroupSetting","navigateCreateUsersGroups","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_ng_container_7_div_1_ng_template_4_span_0_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_ng_container_7_div_1_ng_template_4_Template","data_r13","labelError_r12","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_ng_container_7_div_1_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_ng_container_7_div_2_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_ng_container_7_Template","i_r16","removeCustomDNS","data_r17","SmbClusterFormComponent_div_0_ng_container_1_ng_container_38_ng_template_7_Template","i_r19","removePublicAddrs","public_addrs","addressError_r20","_r21","addPublicAddrs","SmbClusterFormComponent_div_0_ng_container_1_ng_template_11_Template","onAuthModeChange","SmbClusterFormComponent_div_0_ng_container_1_ng_template_19_Template","SmbClusterFormComponent_div_0_ng_container_1_div_21_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_22_Template","SmbClusterFormComponent_div_0_ng_container_1_div_23_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_25_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_28_Template","addCustomDns","SmbClusterFormComponent_div_0_ng_container_1_option_37_Template","SmbClusterFormComponent_div_0_ng_container_1_ng_container_38_Template","SmbClusterFormComponent_div_0_ng_container_1_div_39_Template","clusterError_r22","auth_mode","authModeError_r23","orchStatus_r24","allClustering","SmbClusterFormComponent_div_0_ng_container_1_Template","SmbClusterFormComponent","clusterResponse","customDnsList","customDnsFormArray","joinSourcesArray","pubAddresses","publicAddrsFormArray","clustering","responseClustering","upperCaseCluster","dns","user_group_settings","JoinSource","joinSourceRef","pubAddress","authMode","domainSettingsControl","userGroupSettingsControl","markAllAsTouched","handleTaskRequest","urlVerb","rawFormValue","joinSourceObj","sourceType","domainSettings","cluster_resource","resource_type","source_type","getPlacementSpec","publicAddress","SmbClusterFormComponent_div_0_Template","SmbShareFormComponent_ng_container_1_ng_template_11_span_0_Template","smbShareForm","filesystem_r4","SmbShareFormComponent_ng_container_1_ng_template_18_span_0_Template","subvol_grp_r6","SmbShareFormComponent_ng_container_1_div_20_option_2_Template","SmbShareFormComponent_ng_container_1_div_20_option_3_Template","SmbShareFormComponent_ng_container_1_div_20_option_4_Template","subvolume_r8","SmbShareFormComponent_ng_container_1_div_21_option_2_Template","SmbShareFormComponent_ng_container_1_div_21_option_3_Template","SmbShareFormComponent_ng_container_1_div_21_option_4_Template","SmbShareFormComponent_ng_container_1_div_21_option_5_Template","SmbShareFormComponent_ng_container_1_ng_template_31_span_0_Template","SmbShareFormComponent_ng_container_1_ng_template_11_Template","SmbShareFormComponent_ng_container_1_option_15_Template","SmbShareFormComponent_ng_container_1_option_16_Template","SmbShareFormComponent_ng_container_1_option_17_Template","SmbShareFormComponent_ng_container_1_ng_template_18_Template","SmbShareFormComponent_ng_container_1_div_20_Template","SmbShareFormComponent_ng_container_1_div_21_Template","SmbShareFormComponent_ng_container_1_ng_template_31_Template","shareError_r9","volumeError_r10","inputPath","pathError_r11","SmbShareFormComponent","shareResponse","browseable","prefixedPath","selectedSubVolGrp","subvolGrp","selectedSubVol","correctedPath","share_resource","provider","SmbShareFormComponent_ng_container_1_Template","SmbJoinAuthFormComponent_ng_template_11_span_0_Template","SmbJoinAuthFormComponent_ng_template_17_span_0_Template","SmbJoinAuthFormComponent_ng_template_23_span_0_Template","SmbJoinAuthFormComponent_div_25_option_4_Template","clusters_r4","SmbJoinAuthFormComponent","editingAuthId","linked_to_cluster","linkedToCluster","SmbJoinAuthFormComponent_ng_template_11_Template","SmbJoinAuthFormComponent_ng_template_17_Template","SmbJoinAuthFormComponent_ng_template_23_Template","SmbJoinAuthFormComponent_div_25_Template","jaError_r5","usernameError_r6","passwordError_r7","SmbUsersgroupsFormComponent_ng_template_12_span_0_Template","cluster_r4","SmbUsersgroupsFormComponent_div_14_option_4_Template","clusters_r5","removeUser","SmbUsersgroupsFormComponent_ng_container_16_ng_template_7_Template","SmbUsersgroupsFormComponent_ng_container_16_ng_template_13_Template","SmbUsersgroupsFormComponent_ng_container_16_cds_icon_button_16_Template","usersNameError_r8","usersPasswordError_r9","i_r11","removeGroup","SmbUsersgroupsFormComponent","hideUploader","uploadedData","computed","effect","formData","fillForm","editingUsersGroupId","usersGroups","addUser","userField","groupField","addGroup","newUser","newGroup","SmbUsersgroupsFormComponent_cds_file_uploader_7_Template","SmbUsersgroupsFormComponent_ng_template_12_Template","SmbUsersgroupsFormComponent_div_14_Template","SmbUsersgroupsFormComponent_ng_container_16_Template","SmbUsersgroupsFormComponent_ng_container_21_Template","usersgroupsError_r12","SmbOverviewComponent","PerformanceCounterBreadcrumbsResolver","fromPath","fromText","StartCaseBreadcrumbsResolver","loadChildren","__webpack_require__","RoutedPoolModule","RoutedBlockModule","RoutedRgwModule","AppRoutingModule","useHash","preloadingStrategy","PreloadAllModules","AppComponent","popoverConfig","tooltipConfig","autoClose","container","CephfsModule","LaunchIcon","Trash","TreeviewModule","NgbTypeaheadModule","PlaceholderModule","TabsModule","MgrModulesModule","ClusterModule","Analytics","CloseFilled","ProgressBarRoundIcon","NgbActiveModal","ListModule","DashboardModule","NfsModule","SmbModule","FileUploaderModule","CephModule","cx","cy","NavigationModule","UserFilledIcon","SettingsIcon","HelpIcon","NotificationIcon","DashboardIcon","ClusterIcon","MultiClusterIcon","BlockIcon","ObjectIcon","FileIcon","ObservabilityIcon","AdminIcon","LockedIcon","LogoutIcon","NgbCollapseModule","BreadcrumbModule","CoreModule","ApiInterceptorService","intercept","acceptHeader","reqWithVersion","setHeaders","apiUrl","Authorization","handle","HttpErrorResponse","prepareNotification","ignoreStatusCode","observableThrowError","statusText","LoggingService","jsError","JsErrorHandler","loggingService","rejection","AppModule","ErrorHandler","useClass","HTTP_INTERCEPTORS","APP_BASE_HREF","pathname","provideHttpClient","withInterceptorsFromDi","BrowserModule","BrowserAnimationsModule","ToastrModule","positionClass","preventDuplicates","enableHtml","production","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","moduleRef","isDevMode","componentRef","ApplicationRef","components","enableDebugTools","console","asyncGeneratorStep","u","done","_next","_throw"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@carbon/icons/es/chevron--down/16.js","./node_modules/@carbon/icons/es/close/16.js","./node_modules/@carbon/icons/es/close/32.js","./node_modules/@carbon/icons/es/locked/16.js","./node_modules/@carbon/icons/es/progress-bar--round/32.js","./node_modules/@carbon/icons/es/reset/32.js","./node_modules/@carbon/icons/es/subtract--filled/32.js","./node_modules/@carbon/icons/es/view/16.js","./node_modules/balanced-match/index.js","./node_modules/brace-expansion/index.js","./src/app/shared/services/number-formatter.service.ts","./src/app/ceph/dashboard-v3/dashboard-area-chart/dashboard-area-chart.component.html","./src/app/ceph/dashboard-v3/dashboard-area-chart/dashboard-area-chart.component.ts","./src/app/ceph/dashboard-v3/dashboard-time-selector/dashboard-time-selector.component.html","./src/app/ceph/dashboard-v3/dashboard-time-selector/dashboard-time-selector.component.ts","./src/app/ceph/dashboard-v3/dashboard-v3.module.ts","./src/app/ceph/nfs/models/nfs.fsal.ts","./src/app/ceph/nfs/nfs-cluster-details/nfs-cluster-details.component.html","./src/app/ceph/nfs/nfs-cluster-details/nfs-cluster-details.component.ts","./src/app/ceph/nfs/nfs-cluster/nfs-cluster.component.html","./src/app/ceph/nfs/nfs-cluster/nfs-cluster.component.ts","./src/app/ceph/nfs/nfs-form-client/nfs-form-client.component.html","./src/app/ceph/nfs/nfs-form-client/nfs-form-client.component.ts","./src/app/ceph/nfs/nfs-form/nfs-form.component.html","./src/app/ceph/nfs/nfs-form/nfs-form.component.ts","./src/app/ceph/nfs/nfs-details/nfs-details.component.html","./src/app/ceph/nfs/nfs-details/nfs-details.component.ts","./src/app/ceph/nfs/nfs-list/nfs-list.component.html","./src/app/ceph/nfs/nfs-list/nfs-list.component.ts","./src/app/ceph/nfs/utils.ts","./src/app/ceph/performance-counter/performance-counter.module.ts","./src/app/shared/api/performance-counter.service.ts","./src/app/ceph/performance-counter/table-performance-counter/table-performance-counter.component.html","./src/app/ceph/performance-counter/table-performance-counter/table-performance-counter.component.ts","./src/app/ceph/rgw/models/rgw-multisite.ts","./src/app/ceph/rgw/utils/constants.ts","./src/app/ceph/shared/ceph-shared.module.ts","./src/app/ceph/shared/pg-category.model.ts","./src/app/ceph/shared/pg-category.service.ts","./src/app/shared/api/role.service.ts","./src/app/shared/api/scope.service.ts","./src/app/core/auth/role-form/role-form-mode.enum.ts","./src/app/core/auth/role-form/role-form.model.ts","./src/app/core/auth/role-form/role-form.component.html","./src/app/core/auth/role-form/role-form.component.ts","./src/app/core/auth/role-details/role-details.component.html","./src/app/core/auth/role-details/role-details.component.ts","./src/app/core/auth/user-tabs/user-tabs.component.ts","./src/app/core/auth/user-tabs/user-tabs.component.html","./src/app/core/auth/role-list/role-list.component.html","./src/app/core/auth/role-list/role-list.component.ts","./src/app/core/auth/user-form/user-form-mode.enum.ts","./src/app/core/auth/user-form/user-form.model.ts","./src/app/core/auth/user-form/user-form.component.html","./src/app/core/auth/user-form/user-form.component.ts","./src/app/core/auth/user-list/user-list.component.html","./src/app/core/auth/user-list/user-list.component.ts","./node_modules/@carbon/icons/es/add--filled/32.js","./src/app/core/auth/auth.module.ts","./src/app/core/error/error.ts","./src/app/shared/api/api-client.ts","./src/app/shared/api/auth.service.ts","./src/app/shared/api/ceph-service.service.ts","./src/app/shared/api/cephfs-subvolume-group.service.ts","./src/app/shared/api/cephfs-subvolume.service.ts","./src/app/shared/api/configuration.service.ts","./src/app/shared/api/crush-rule.service.ts","./src/app/shared/api/host.service.ts","./src/app/shared/api/mgr-module.service.ts","./src/app/shared/api/multi-cluster.service.ts","./src/app/shared/api/nfs.service.ts","./src/app/shared/api/orchestrator.service.ts","./src/app/shared/api/paginate.model.ts","./src/app/shared/api/pool.service.ts","./src/app/shared/api/prometheus.service.ts","./src/app/shared/api/rbd.service.ts","./src/app/shared/api/rgw-bucket.service.ts","./src/app/shared/api/rgw-daemon.service.ts","./src/app/shared/api/rgw-multisite.service.ts","./src/app/shared/api/rgw-realm.service.ts","./src/app/shared/api/rgw-site.service.ts","./src/app/shared/api/rgw-user.service.ts","./src/app/shared/api/rgw-zone.service.ts","./src/app/shared/api/rgw-zonegroup.service.ts","./src/app/shared/api/settings.service.ts","./src/app/shared/api/user.service.ts","./src/app/shared/classes/cd-helper.class.ts","./src/app/shared/classes/css-helper.ts","./src/app/shared/classes/list-with-details.class.ts","./src/app/shared/classes/table-status-view-cache.ts","./src/app/shared/classes/table-status.ts","./src/app/shared/components/alert-panel/alert-panel.component.html","./src/app/shared/components/alert-panel/alert-panel.component.ts","./src/app/shared/components/back-button/back-button.component.ts","./src/app/shared/components/back-button/back-button.component.html","./src/app/shared/enum/hardware.enum.ts","./src/app/shared/components/card-row/card-row.component.html","./src/app/shared/components/card-row/card-row.component.ts","./src/app/shared/components/card/card.component.html","./src/app/shared/components/card/card.component.ts","./node_modules/@carbon/icons/es/edit/20.js","./node_modules/@carbon/icons/es/code/16.js","./node_modules/@carbon/icons/es/information/16.js","./node_modules/@carbon/icons/es/copy/32.js","./node_modules/@carbon/icons/es/download/16.js","./node_modules/@carbon/icons/es/idea/20.js","./src/app/shared/components/components.module.ts","./src/app/shared/components/confirmation-modal/confirmation-modal.component.html","./src/app/shared/components/confirmation-modal/confirmation-modal.component.ts","./src/app/shared/components/copy2clipboard-button/copy2clipboard-button.component.html","./src/app/shared/components/copy2clipboard-button/copy2clipboard-button.component.ts","./src/app/shared/components/date-time-picker/date-time-picker.component.html","./src/app/shared/components/date-time-picker/date-time-picker.component.ts","./src/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component.html","./src/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component.ts","./src/app/shared/components/doc/doc.component.ts","./src/app/shared/components/doc/doc.component.html","./src/app/shared/components/form-advanced-fieldset/form-advanced-fieldset.component.html","./src/app/shared/components/form-advanced-fieldset/form-advanced-fieldset.component.ts","./src/app/shared/components/form-button-panel/form-button-panel.component.html","./src/app/shared/components/form-button-panel/form-button-panel.component.ts","./src/app/shared/components/form-modal/form-modal.component.html","./src/app/shared/components/form-modal/form-modal.component.ts","./src/app/shared/components/grafana/grafana.component.html","./src/app/shared/components/grafana/grafana.component.ts","./src/app/shared/components/help-text/help-text.component.html","./src/app/shared/components/help-text/help-text.component.ts","./src/app/shared/enum/cd-helper.enum.ts","./src/app/shared/components/helper/helper.component.html","./src/app/shared/components/helper/helper.component.ts","./src/app/shared/components/icon/icon.component.ts","./src/app/shared/components/icon/icon.component.html","./src/app/shared/components/loading-panel/loading-panel.component.ts","./src/app/shared/components/loading-panel/loading-panel.component.html","./src/app/shared/components/modal/modal.component.ts","./src/app/shared/components/modal/modal.component.html","./src/app/shared/components/progress/progress.component.html","./src/app/shared/components/progress/progress.component.ts","./src/app/shared/components/select-badges/select-badges.component.html","./src/app/shared/components/select-badges/select-badges.component.ts","./src/app/shared/components/select/select-messages.model.ts","./src/app/shared/components/select/select-option.model.ts","./src/app/shared/components/select/select.component.html","./src/app/shared/components/select/select.component.ts","./src/app/shared/components/sparkline/sparkline.component.ts","./src/app/shared/components/sparkline/sparkline.component.html","./src/app/shared/components/submit-button/submit-button.component.html","./src/app/shared/components/submit-button/submit-button.component.ts","./src/app/shared/enum/usage-bar-chart.enum.ts","./src/app/shared/components/usage-bar/usage-bar.component.html","./src/app/shared/components/usage-bar/usage-bar.component.ts","./src/app/shared/components/wizard/wizard.component.ts","./src/app/shared/components/wizard/wizard.component.html","./src/app/shared/constants/app.constants.ts","./src/app/shared/constants/cephfs.constant.ts","./src/app/shared/datatable/checked-table-form/checked-table-form.component.html","./src/app/shared/datatable/checked-table-form/checked-table-form.component.ts","./src/app/shared/api/ceph-user.service.ts","./src/app/shared/datatable/crud-table/crud-table.component.html","./src/app/shared/datatable/crud-table/crud-table.component.ts","./node_modules/@carbon/icons/es/add/16.js","./node_modules/@carbon/icons/es/filter/16.js","./node_modules/@carbon/icons/es/renew/16.js","./node_modules/@carbon/icons/es/data-table/16.js","./node_modules/@carbon/icons/es/checkmark/16.js","./node_modules/@carbon/icons/es/maximize/16.js","./node_modules/@carbon/icons/es/caret--down/16.js","./src/app/shared/forms/crud-form/formly-textarea-type/formly-textarea-type.component.ts","./src/app/shared/forms/crud-form/formly-textarea-type/formly-textarea-type.component.html","./src/app/shared/forms/crud-form/formly-input-wrapper/formly-input-wrapper.component.html","./src/app/shared/forms/crud-form/formly-input-wrapper/formly-input-wrapper.component.ts","./src/app/shared/forms/crud-form/formly-file-type/formly-file-type-accessor.ts","./src/app/shared/forms/crud-form/formly-file-type/formly-file-type.component.ts","./src/app/shared/forms/crud-form/formly-file-type/formly-file-type.component.html","./src/app/shared/datatable/datatable.module.ts","./src/app/shared/datatable/directives/table-detail.directive.ts","./src/app/shared/datatable/table-actions/table-actions.component.html","./src/app/shared/datatable/table-actions/table-actions.component.ts","./src/app/shared/datatable/table-key-value/table-key-value.component.ts","./src/app/shared/datatable/table-key-value/table-key-value.component.html","./src/app/shared/datatable/table/table.component.html","./src/app/shared/datatable/table/table.component.ts","./src/app/shared/decorators/cd-encode.ts","./src/app/shared/directives/auth-storage.directive.ts","./src/app/shared/directives/autofocus.directive.ts","./src/app/shared/directives/dimless-binary.directive.ts","./src/app/shared/directives/directives.module.ts","./src/app/shared/services/combo-box.service.ts","./src/app/shared/directives/dynamic-input-combobox.directive.ts","./src/app/shared/directives/form-input-disable.directive.ts","./src/app/shared/directives/form-loading.directive.ts","./src/app/shared/directives/form-scope.directive.ts","./src/app/shared/directives/ng-bootstrap-form-validation/cd-form-control.directive.ts","./src/app/shared/directives/ng-bootstrap-form-validation/cd-form-group.directive.ts","./src/app/shared/directives/ng-bootstrap-form-validation/cd-form-validation.directive.ts","./src/app/shared/directives/optional-field.directive.ts","./src/app/shared/directives/password-button.directive.ts","./src/app/shared/directives/required-field.directive.ts","./src/app/shared/directives/stateful-tab.directive.ts","./src/app/shared/directives/trim.directive.ts","./src/app/shared/enum/cd-sort-direction.ts","./src/app/shared/enum/cell-template.enum.ts","./src/app/shared/enum/dashboard-promqls.enum.ts","./src/app/shared/enum/delete-confirmation-modal-impact.enum.ts","./src/app/shared/enum/health-icon.enum.ts","./src/app/shared/enum/icons.enum.ts","./src/app/shared/enum/notification-type.enum.ts","./src/app/shared/enum/view-cache-status.enum.ts","./src/app/shared/forms/cd-form-builder.ts","./src/app/shared/forms/cd-form-group.ts","./src/app/shared/forms/cd-form.ts","./src/app/shared/forms/cd-validators.ts","./src/app/shared/forms/crud-form/crud-form.component.html","./src/app/shared/forms/crud-form/crud-form.component.ts","./src/app/shared/forms/crud-form/formly-array-type/formly-array-type.component.html","./src/app/shared/forms/crud-form/formly-array-type/formly-array-type.component.ts","./src/app/shared/forms/crud-form/formly-input-type/formly-input-type.component.ts","./src/app/shared/forms/crud-form/formly-input-type/formly-input-type.component.html","./src/app/shared/forms/crud-form/formly-object-type/formly-object-type.component.html","./src/app/shared/forms/crud-form/formly-object-type/formly-object-type.component.ts","./src/app/shared/forms/crud-form/validators/file-validator.ts","./src/app/shared/forms/crud-form/validators/json-validator.ts","./src/app/shared/forms/crud-form/validators/rgw-role-validator.ts","./src/app/shared/forms/crud-form/helpers.ts","./src/app/shared/models/cd-notification.ts","./src/app/shared/models/cd-pwd-expiration-settings.ts","./src/app/shared/models/cd-table-paging.ts","./src/app/shared/models/cd-table-fetch-data-context.ts","./src/app/shared/models/cd-table-selection.ts","./src/app/shared/models/chart-tooltip.ts","./src/app/shared/models/configuration.ts","./src/app/shared/models/executing-task.ts","./src/app/shared/models/finished-task.ts","./src/app/shared/models/image-spec.ts","./src/app/shared/models/task.ts","./src/app/shared/pipes/array.pipe.ts","./src/app/shared/pipes/boolean-text.pipe.ts","./src/app/shared/pipes/boolean.pipe.ts","./src/app/shared/pipes/cd-date.pipe.ts","./src/app/shared/pipes/ceph-release-name.pipe.ts","./src/app/shared/pipes/ceph-short-version.pipe.ts","./src/app/shared/pipes/dimless-binary-per-minute.pipe.ts","./src/app/shared/pipes/dimless-binary-per-second.pipe.ts","./src/app/shared/pipes/dimless-binary.pipe.ts","./src/app/shared/pipes/dimless.pipe.ts","./src/app/shared/pipes/duration.pipe.ts","./src/app/shared/pipes/empty.pipe.ts","./src/app/shared/pipes/health-icon.pipe.ts","./src/app/shared/pipes/iops.pipe.ts","./src/app/shared/pipes/iscsi-backstore.pipe.ts","./src/app/shared/pipes/join.pipe.ts","./src/app/shared/pipes/log-priority.pipe.ts","./src/app/shared/pipes/map.pipe.ts","./src/app/shared/pipes/mbpersecond.pipe.ts","./src/app/shared/pipes/mds-summary.pipe.ts","./src/app/shared/pipes/mgr-summary.pipe.ts","./src/app/shared/pipes/milliseconds.pipe.ts","./src/app/shared/pipes/not-available.pipe.ts","./src/app/shared/pipes/octal-to-human-readable.pipe.ts","./src/app/shared/pipes/ordinal.pipe.ts","./src/app/shared/pipes/osd-summary.pipe.ts","./src/app/shared/pipes/path.pipe.ts","./src/app/shared/pipes/pipe-function.pipe.ts","./src/app/shared/pipes/encode-uri.pipe.ts","./src/app/shared/pipes/pipes.module.ts","./src/app/shared/pipes/pluralize.pipe.ts","./src/app/shared/pipes/relative-date.pipe.ts","./src/app/shared/pipes/sanitize-html.pipe.ts","./src/app/shared/pipes/truncate.pipe.ts","./src/app/shared/pipes/upper-first.pipe.ts","./src/app/shared/rxjs/operators/page-visibility.operator.ts","./src/app/shared/services/auth-guard.service.ts","./src/app/shared/models/permissions.ts","./src/app/shared/services/auth-storage.service.ts","./src/app/shared/services/cd-table-server-side.service.ts","./src/app/shared/services/crud-form-adapter.service.ts","./src/app/shared/services/data-gateway.service.ts","./src/app/shared/services/device.service.ts","./src/app/shared/services/doc.service.ts","./src/app/shared/services/feature-toggles-guard.service.ts","./src/app/shared/services/feature-toggles.service.ts","./src/app/shared/services/formatter.service.ts","./src/app/shared/services/modal-cds.service.ts","./src/app/shared/services/modal.service.ts","./src/app/shared/services/module-status-guard.service.ts","./src/app/shared/services/notification.service.ts","./src/app/shared/models/cd-pwd-policy-settings.ts","./src/app/shared/services/password-policy.service.ts","./src/app/shared/services/rbd-configuration.service.ts","./src/app/shared/services/refresh-interval.service.ts","./src/app/shared/services/summary.service.ts","./src/app/shared/services/task-list.service.ts","./src/app/shared/services/task-manager.service.ts","./src/app/shared/enum/components.enum.ts","./src/app/shared/services/task-message.service.ts","./src/app/shared/services/task-wrapper.service.ts","./src/app/shared/services/text-area-json-formatter.service.ts","./src/app/shared/services/ngzone-scheduler.service.ts","./src/app/shared/services/timer.service.ts","./src/app/shared/services/tree-view.service.ts","./src/app/shared/services/url-builder.service.ts","./src/app/shared/services/wizard-steps.service.ts","./src/app/shared/shared.module.ts","./src/app/shared/api/cephfs.service.ts","./src/app/shared/components/code-block/code-block.component.html","./src/app/shared/components/code-block/code-block.component.ts","./src/app/ceph/cephfs/cephfs-mount-details/cephfs-mount-details.component.ts","./src/app/ceph/cephfs/cephfs-mount-details/cephfs-mount-details.component.html","./src/app/shared/api/health.service.ts","./src/app/shared/api/directory-store.service.ts","./src/app/ceph/cephfs/cephfs-auth-modal/cephfs-auth-modal.component.html","./src/app/ceph/cephfs/cephfs-auth-modal/cephfs-auth-modal.component.ts","./src/app/ceph/cephfs/cephfs-chart/cephfs-chart.component.ts","./src/app/ceph/cephfs/cephfs-chart/cephfs-chart.component.html","./src/app/ceph/cephfs/cephfs-detail/cephfs-detail.component.html","./src/app/ceph/cephfs/cephfs-detail/cephfs-detail.component.ts","./src/app/ceph/cephfs/cephfs-clients/cephfs-clients.component.ts","./src/app/ceph/cephfs/cephfs-clients/cephfs-clients.component.html","./src/app/ceph/cephfs/cephfs-directories/cephfs-directories.component.html","./src/app/ceph/cephfs/cephfs-directories/cephfs-directories.component.ts","./src/app/ceph/cephfs/cephfs-subvolume-form/cephfs-subvolume-form.component.html","./src/app/ceph/cephfs/cephfs-subvolume-form/cephfs-subvolume-form.component.ts","./src/app/shared/components/cd-label/color-class-from-text.pipe.ts","./src/app/shared/components/cd-label/cd-label.component.html","./src/app/shared/components/cd-label/cd-label.component.ts","./src/app/shared/components/vertical-navigation/vertical-navigation.component.html","./src/app/shared/components/vertical-navigation/vertical-navigation.component.ts","./src/app/ceph/cephfs/cephfs-subvolume-list/cephfs-subvolume-list.component.html","./src/app/ceph/cephfs/cephfs-subvolume-list/cephfs-subvolume-list.component.ts","./src/app/ceph/cephfs/cephfs-subvolumegroup-form/cephfs-subvolumegroup-form.component.html","./src/app/ceph/cephfs/cephfs-subvolumegroup-form/cephfs-subvolumegroup-form.component.ts","./src/app/ceph/cephfs/cephfs-subvolume-group/cephfs-subvolume-group.component.html","./src/app/ceph/cephfs/cephfs-subvolume-group/cephfs-subvolume-group.component.ts","./src/app/ceph/cephfs/cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-form/cephfs-subvolume-snapshots-form.component.html","./src/app/ceph/cephfs/cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-form/cephfs-subvolume-snapshots-form.component.ts","./src/app/shared/enum/repeat-frequency.enum.ts","./src/app/shared/enum/retention-frequency.enum.ts","./src/app/ceph/cephfs/cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-list.component.html","./src/app/ceph/cephfs/cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-list.component.ts","./src/app/shared/api/cephfs-snapshot-schedule.service.ts","./src/app/ceph/cephfs/cephfs-snapshotschedule-form/cephfs-snapshotschedule-form.component.html","./src/app/ceph/cephfs/cephfs-snapshotschedule-form/cephfs-snapshotschedule-form.component.ts","./src/app/ceph/cephfs/cephfs-snapshotschedule-list/cephfs-snapshotschedule-list.component.html","./src/app/ceph/cephfs/cephfs-snapshotschedule-list/cephfs-snapshotschedule-list.component.ts","./src/app/ceph/cephfs/cephfs-tabs/cephfs-tabs.component.html","./src/app/ceph/cephfs/cephfs-tabs/cephfs-tabs.component.ts","./src/app/ceph/cephfs/cephfs-list/cephfs-list.component.html","./src/app/ceph/cephfs/cephfs-list/cephfs-list.component.ts","./src/app/shared/components/config-option/config-option.types.ts","./src/app/ceph/cluster/configuration/configuration-form/configuration-form-create-request.model.ts","./src/app/ceph/cluster/configuration/configuration-form/configuration-form.component.html","./src/app/ceph/cluster/configuration/configuration-form/configuration-form.component.ts","./src/app/ceph/cluster/configuration/configuration-details/configuration-details.component.html","./src/app/ceph/cluster/configuration/configuration-details/configuration-details.component.ts","./src/app/ceph/cluster/configuration/configuration.component.html","./src/app/ceph/cluster/configuration/configuration.component.ts","./src/app/shared/api/cluster.service.ts","./src/app/shared/classes/paginate-params.class.ts","./src/app/shared/api/osd.service.ts","./src/app/ceph/cluster/osd/osd-form/drive-group.model.ts","./src/app/shared/models/orchestrator.enum.ts","./src/app/ceph/cluster/services/placement.pipe.ts","./src/app/ceph/rgw/create-rgw-service-entities/create-rgw-service-entities.component.html","./src/app/ceph/rgw/create-rgw-service-entities/create-rgw-service-entities.component.ts","./src/app/ceph/cluster/services/service-form/service-form.component.html","./src/app/ceph/cluster/services/service-form/service-form.component.ts","./src/app/shared/components/orchestrator-doc-panel/orchestrator-doc-panel.component.html","./src/app/shared/components/orchestrator-doc-panel/orchestrator-doc-panel.component.ts","./src/app/shared/api/daemon.service.ts","./src/app/ceph/cluster/services/service-daemon-list/service-daemon-list.component.html","./src/app/ceph/cluster/services/service-daemon-list/service-daemon-list.component.ts","./src/app/ceph/cluster/services/service-details/service-details.component.html","./src/app/ceph/cluster/services/service-details/service-details.component.ts","./src/app/ceph/cluster/services/services.component.html","./src/app/ceph/cluster/services/services.component.ts","./src/app/shared/models/osd-deployment-options.ts","./src/app/ceph/cluster/osd/osd-creation-preview-modal/osd-creation-preview-modal.component.ts","./src/app/ceph/cluster/osd/osd-creation-preview-modal/osd-creation-preview-modal.component.html","./src/app/ceph/cluster/inventory/inventory-devices/inventory-devices.component.ts","./src/app/ceph/cluster/inventory/inventory-devices/inventory-devices.component.html","./src/app/ceph/cluster/osd/osd-devices-selection-modal/osd-devices-selection-modal.component.html","./src/app/ceph/cluster/osd/osd-devices-selection-modal/osd-devices-selection-modal.component.ts","./src/app/ceph/cluster/osd/osd-devices-selection-groups/osd-devices-selection-groups.component.html","./src/app/ceph/cluster/osd/osd-devices-selection-groups/osd-devices-selection-groups.component.ts","./src/app/ceph/cluster/osd/osd-form/osd-form.component.html","./src/app/ceph/cluster/osd/osd-form/osd-form.component.ts","./src/app/ceph/cluster/hosts/host-form/host-form.component.html","./src/app/ceph/cluster/hosts/host-form/host-form.component.ts","./src/app/ceph/shared/device-list/device-list.component.html","./src/app/ceph/shared/device-list/device-list.component.ts","./src/app/ceph/shared/smart-list/smart-list.component.html","./src/app/ceph/shared/smart-list/smart-list.component.ts","./src/app/ceph/cluster/inventory/inventory.component.html","./src/app/ceph/cluster/inventory/inventory.component.ts","./src/app/ceph/cluster/hosts/host-details/host-details.component.html","./src/app/ceph/cluster/hosts/host-details/host-details.component.ts","./src/app/ceph/cluster/hosts/hosts.component.html","./src/app/ceph/cluster/hosts/hosts.component.ts","./src/app/ceph/cluster/create-cluster/create-cluster-review.component.html","./src/app/ceph/cluster/create-cluster/create-cluster-review.component.ts","./src/app/ceph/cluster/create-cluster/create-cluster.component.html","./src/app/ceph/cluster/create-cluster/create-cluster.component.ts","./src/app/ceph/cluster/crushmap/crushmap.component.html","./src/app/ceph/cluster/crushmap/crushmap.component.ts","./src/app/shared/api/logs.service.ts","./src/app/shared/services/text-to-download.service.ts","./src/app/shared/components/download-button/download-button.component.html","./src/app/shared/components/download-button/download-button.component.ts","./src/app/shared/pipes/search-highlight.pipe.ts","./src/app/ceph/cluster/logs/logs.component.html","./src/app/ceph/cluster/logs/logs.component.ts","./src/app/ceph/cluster/mgr-modules/mgr-module-form/mgr-module-form.component.html","./src/app/ceph/cluster/mgr-modules/mgr-module-form/mgr-module-form.component.ts","./src/app/ceph/cluster/mgr-modules/mgr-module-details/mgr-module-details.component.html","./src/app/ceph/cluster/mgr-modules/mgr-module-details/mgr-module-details.component.ts","./src/app/ceph/cluster/mgr-modules/mgr-module-list/mgr-module-list.component.html","./src/app/ceph/cluster/mgr-modules/mgr-module-list/mgr-module-list.component.ts","./src/app/shared/api/monitor.service.ts","./src/app/ceph/cluster/monitor/monitor.component.html","./src/app/ceph/cluster/monitor/monitor.component.ts","./src/app/shared/models/osd-settings.ts","./src/app/ceph/cluster/osd/osd-flags-indiv-modal/osd-flags-indiv-modal.component.html","./src/app/ceph/cluster/osd/osd-flags-indiv-modal/osd-flags-indiv-modal.component.ts","./src/app/ceph/cluster/osd/osd-flags-modal/osd-flags-modal.component.html","./src/app/ceph/cluster/osd/osd-flags-modal/osd-flags-modal.component.ts","./src/app/shared/components/config-option/config-option.component.html","./src/app/shared/components/config-option/config-option.component.ts","./src/app/ceph/cluster/osd/osd-pg-scrub-modal/osd-pg-scrub-modal.options.ts","./src/app/ceph/cluster/osd/osd-pg-scrub-modal/osd-pg-scrub-modal.component.html","./src/app/ceph/cluster/osd/osd-pg-scrub-modal/osd-pg-scrub-modal.component.ts","./src/app/ceph/cluster/osd/osd-recv-speed-modal/osd-recv-speed-modal.component.html","./src/app/ceph/cluster/osd/osd-recv-speed-modal/osd-recv-speed-modal.component.ts","./src/app/ceph/cluster/osd/osd-reweight-modal/osd-reweight-modal.component.html","./src/app/ceph/cluster/osd/osd-reweight-modal/osd-reweight-modal.component.ts","./src/app/ceph/cluster/osd/osd-scrub-modal/osd-scrub-modal.component.ts","./src/app/ceph/cluster/osd/osd-scrub-modal/osd-scrub-modal.component.html","./src/app/ceph/cluster/osd/osd-details/osd-details.component.html","./src/app/ceph/cluster/osd/osd-details/osd-details.component.ts","./src/app/ceph/cluster/osd/osd-list/osd-list.component.html","./src/app/ceph/cluster/osd/osd-list/osd-list.component.ts","./src/app/shared/helpers/prometheus-list-helper.ts","./src/app/shared/services/prometheus-alert-formatter.ts","./src/app/shared/services/prometheus-alert.service.ts","./src/app/ceph/cluster/prometheus/prometheus-tabs/prometheus-tabs.component.html","./src/app/ceph/cluster/prometheus/prometheus-tabs/prometheus-tabs.component.ts","./src/app/ceph/cluster/prometheus/active-alert-list/active-alert-list.component.html","./src/app/ceph/cluster/prometheus/active-alert-list/active-alert-list.component.ts","./src/app/ceph/cluster/prometheus/rules-list/rules-list.component.html","./src/app/ceph/cluster/prometheus/rules-list/rules-list.component.ts","./src/app/shared/services/prometheus-silence-matcher.service.ts","./src/app/shared/services/time-diff.service.ts","./src/app/ceph/cluster/prometheus/silence-matcher-modal/silence-matcher-modal.component.html","./src/app/ceph/cluster/prometheus/silence-matcher-modal/silence-matcher-modal.component.ts","./src/app/ceph/cluster/prometheus/silence-form/silence-form.component.html","./src/app/ceph/cluster/prometheus/silence-form/silence-form.component.ts","./src/app/ceph/cluster/prometheus/silence-list/silence-list.component.html","./src/app/ceph/cluster/prometheus/silence-list/silence-list.component.ts","./src/app/shared/api/telemetry.service.ts","./src/app/shared/services/telemetry-notification.service.ts","./src/app/ceph/cluster/telemetry/telemetry.component.html","./src/app/ceph/cluster/telemetry/telemetry.component.ts","./src/app/shared/components/refresh-selector/refresh-selector.component.html","./src/app/shared/components/refresh-selector/refresh-selector.component.ts","./src/app/shared/enum/health-color.enum.ts","./src/app/shared/api/hardware.service.ts","./src/app/shared/pipes/health-color.pipe.ts","./src/app/ceph/shared/health-checks/health-checks.component.html","./src/app/ceph/shared/health-checks/health-checks.component.ts","./src/app/ceph/cluster/upgrade/upgrade-form/upgrade-start-modal.component.html","./src/app/ceph/cluster/upgrade/upgrade-form/upgrade-start-modal.component.ts","./src/app/shared/api/upgrade.service.ts","./src/app/shared/components/upgradable/upgradable.component.html","./src/app/shared/components/upgradable/upgradable.component.ts","./src/app/ceph/dashboard-v3/dashboard-pie/dashboard-pie.component.ts","./src/app/ceph/dashboard-v3/dashboard-pie/dashboard-pie.component.html","./src/app/ceph/dashboard-v3/pg-summary.pipe.ts","./src/app/ceph/dashboard-v3/dashboard/dashboard-v3.component.html","./src/app/ceph/dashboard-v3/dashboard/dashboard-v3.component.ts","./src/app/ceph/dashboard/health-pie/health-pie.component.ts","./src/app/ceph/dashboard/health-pie/health-pie.component.html","./src/app/ceph/dashboard/info-card/info-card.component.html","./src/app/ceph/dashboard/info-card/info-card.component.ts","./src/app/ceph/dashboard/info-group/info-group.component.ts","./src/app/ceph/dashboard/info-group/info-group.component.html","./src/app/shared/enum/health-label.enum.ts","./src/app/shared/pipes/health-label.pipe.ts","./src/app/ceph/dashboard/mon-summary.pipe.ts","./src/app/ceph/dashboard/osd-dashboard-summary.pipe.ts","./src/app/ceph/dashboard/mgr-dashboard-summary.pipe.ts","./src/app/ceph/dashboard/mds-dashboard-summary.pipe.ts","./src/app/ceph/dashboard/health/health.component.html","./src/app/ceph/dashboard/health/health.component.ts","./src/app/ceph/dashboard/dashboard/dashboard.component.html","./src/app/ceph/dashboard/dashboard/dashboard.component.ts","./src/app/ceph/performance-counter/performance-counter/performance-counter.component.ts","./src/app/ceph/performance-counter/performance-counter/performance-counter.component.html","./src/app/core/auth/user-password-form/user-password-form.component.html","./src/app/core/auth/user-password-form/user-password-form.component.ts","./src/app/core/auth/login-password-form/login-password-form.component.html","./src/app/core/auth/login-password-form/login-password-form.component.ts","./src/app/shared/models/credentials.ts","./src/app/core/auth/login/login.component.html","./src/app/core/auth/login/login.component.ts","./src/app/core/error/error.component.html","./src/app/core/error/error.component.ts","./src/app/core/layouts/blank-layout/blank-layout.component.ts","./src/app/core/layouts/blank-layout/blank-layout.component.html","./src/app/shared/components/language-selector/supported-languages.enum.ts","./src/app/shared/services/language.service.ts","./src/app/shared/components/language-selector/language-selector.component.html","./src/app/shared/components/language-selector/language-selector.component.ts","./src/app/shared/api/custom-login-banner.service.ts","./src/app/shared/components/custom-login-banner/custom-login-banner.component.html","./src/app/shared/components/custom-login-banner/custom-login-banner.component.ts","./src/app/core/layouts/login-layout/login-layout.component.html","./src/app/core/layouts/login-layout/login-layout.component.ts","./src/app/shared/services/favicon.service.ts","./src/app/shared/api/motd.service.ts","./src/app/shared/services/motd-notification.service.ts","./src/app/shared/services/cookie.service.ts","./src/app/shared/services/prometheus-notification.service.ts","./src/app/shared/components/notifications-sidebar/notifications-sidebar.component.html","./src/app/shared/components/notifications-sidebar/notifications-sidebar.component.ts","./src/app/core/navigation/notifications/notifications.component.html","./src/app/core/navigation/notifications/notifications.component.ts","./src/app/shared/api/feedback.service.ts","./src/app/ceph/shared/feedback/feedback.component.html","./src/app/ceph/shared/feedback/feedback.component.ts","./src/app/shared/enum/local-storage-enum.ts","./src/app/core/navigation/about/about.component.ts","./src/app/core/navigation/about/about.component.html","./src/app/core/navigation/dashboard-help/dashboard-help.component.html","./src/app/core/navigation/dashboard-help/dashboard-help.component.ts","./src/app/core/navigation/administration/administration.component.html","./src/app/core/navigation/administration/administration.component.ts","./src/app/core/navigation/identity/identity.component.html","./src/app/core/navigation/identity/identity.component.ts","./src/app/core/navigation/navigation/navigation.component.html","./src/app/core/navigation/navigation/navigation.component.ts","./src/app/shared/models/breadcrumbs.ts","./src/app/core/navigation/breadcrumbs/breadcrumbs.component.html","./src/app/core/navigation/breadcrumbs/breadcrumbs.component.ts","./src/app/shared/components/pwd-expiration-notification/pwd-expiration-notification.component.html","./src/app/shared/components/pwd-expiration-notification/pwd-expiration-notification.component.ts","./src/app/shared/components/telemetry-notification/telemetry-notification.component.html","./src/app/shared/components/telemetry-notification/telemetry-notification.component.ts","./src/app/shared/components/motd/motd.component.html","./src/app/shared/components/motd/motd.component.ts","./src/app/core/context/context.component.html","./src/app/core/context/context.component.ts","./src/app/core/layouts/workbench-layout/workbench-layout.component.ts","./src/app/core/layouts/workbench-layout/workbench-layout.component.html","./src/app/core/navigation/api-docs/api-docs.component.ts","./src/app/core/navigation/api-docs/api-docs.component.html","./src/app/shared/services/change-password-guard.service.ts","./src/app/shared/services/no-sso-guard.service.ts","./src/app/ceph/cluster/upgrade/upgrade.component.html","./src/app/ceph/cluster/upgrade/upgrade.component.ts","./src/app/ceph/cephfs/cephfs-form/cephfs-form.component.html","./src/app/ceph/cephfs/cephfs-form/cephfs-form.component.ts","./src/app/ceph/cluster/upgrade/upgrade-progress/upgrade-progress.component.html","./src/app/ceph/cluster/upgrade/upgrade-progress/upgrade-progress.component.ts","./src/app/ceph/cluster/multi-cluster/multi-cluster-form/multi-cluster-form.component.html","./src/app/ceph/cluster/multi-cluster/multi-cluster-form/multi-cluster-form.component.ts","./src/app/shared/components/card-group/card-group.component.html","./src/app/shared/components/card-group/card-group.component.ts","./src/app/ceph/cluster/multi-cluster/multi-cluster.component.html","./src/app/ceph/cluster/multi-cluster/multi-cluster.component.ts","./src/app/ceph/cluster/multi-cluster/multi-cluster-details/multi-cluster-details.component.html","./src/app/ceph/cluster/multi-cluster/multi-cluster-details/multi-cluster-details.component.ts","./src/app/ceph/cluster/multi-cluster/multi-cluster-list/multi-cluster-list.component.html","./src/app/ceph/cluster/multi-cluster/multi-cluster-list/multi-cluster-list.component.ts","./src/app/ceph/smb/smb.model.ts","./src/app/shared/api/smb.service.ts","./src/app/ceph/smb/smb-tabs/smb-tabs.component.ts","./src/app/ceph/smb/smb-tabs/smb-tabs.component.html","./src/app/ceph/smb/smb-join-auth-list/smb-join-auth-list.component.ts","./src/app/ceph/smb/smb-join-auth-list/smb-join-auth-list.component.html","./src/app/ceph/smb/smb-domain-setting-modal/smb-domain-setting-modal.component.html","./src/app/ceph/smb/smb-domain-setting-modal/smb-domain-setting-modal.component.ts","./src/app/ceph/smb/smb-share-list/smb-share-list.component.html","./src/app/ceph/smb/smb-share-list/smb-share-list.component.ts","./src/app/ceph/smb/smb-cluster-tabs/smb-cluster-tabs.component.html","./src/app/ceph/smb/smb-cluster-tabs/smb-cluster-tabs.component.ts","./src/app/ceph/smb/smb-cluster-list/smb-cluster-list.component.html","./src/app/ceph/smb/smb-cluster-list/smb-cluster-list.component.ts","./src/app/ceph/smb/smb-usersgroups-details/smb-usersgroups-details.component.ts","./src/app/ceph/smb/smb-usersgroups-details/smb-usersgroups-details.component.html","./src/app/ceph/smb/smb-usersgroups-list/smb-usersgroups-list.component.html","./src/app/ceph/smb/smb-usersgroups-list/smb-usersgroups-list.component.ts","./src/app/ceph/smb/smb-cluster-form/smb-cluster-form.component.html","./src/app/ceph/smb/smb-cluster-form/smb-cluster-form.component.ts","./src/app/ceph/smb/smb-share-form/smb-share-form.component.html","./src/app/ceph/smb/smb-share-form/smb-share-form.component.ts","./src/app/ceph/smb/smb-join-auth-form/smb-join-auth-form.component.html","./src/app/ceph/smb/smb-join-auth-form/smb-join-auth-form.component.ts","./src/app/ceph/smb/smb-usersgroups-form/smb-usersgroups-form.component.html","./src/app/ceph/smb/smb-usersgroups-form/smb-usersgroups-form.component.ts","./src/app/ceph/smb/smb-overview/smb-overview.component.ts","./src/app/ceph/smb/smb-overview/smb-overview.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./node_modules/@carbon/icons/es/add/32.js","./node_modules/@carbon/icons/es/launch/32.js","./node_modules/@carbon/icons/es/trash-can/32.js","./src/app/ceph/cephfs/cephfs.module.ts","./node_modules/@carbon/icons/es/analytics/16.js","./node_modules/@carbon/icons/es/close--filled/16.js","./src/app/ceph/cluster/mgr-modules/mgr-modules.module.ts","./src/app/ceph/cluster/cluster.module.ts","./src/app/ceph/dashboard/dashboard.module.ts","./src/app/ceph/nfs/nfs.module.ts","./src/app/ceph/smb/smb.module.ts","./src/app/ceph/ceph.module.ts","./node_modules/@carbon/icons/es/user--filled/20.js","./node_modules/@carbon/icons/es/settings/20.js","./node_modules/@carbon/icons/es/help/20.js","./node_modules/@carbon/icons/es/notification/20.js","./node_modules/@carbon/icons/es/launch/16.js","./node_modules/@carbon/icons/es/template/20.js","./node_modules/@carbon/icons/es/web-services--cluster/20.js","./node_modules/@carbon/icons/es/edge-cluster/20.js","./node_modules/@carbon/icons/es/datastore/20.js","./node_modules/@carbon/icons/es/object-storage/20.js","./node_modules/@carbon/icons/es/file-storage/20.js","./node_modules/@carbon/icons/es/observed--hail/20.js","./node_modules/@carbon/icons/es/network--admin-control/20.js","./node_modules/@carbon/icons/es/logout/16.js","./src/app/core/navigation/navigation.module.ts","./src/app/core/core.module.ts","./src/app/shared/services/api-interceptor.service.ts","./src/app/shared/api/logging.service.ts","./src/app/shared/services/js-error-handler.service.ts","./src/app/app.module.ts","./src/bootstrap.ts","./src/environments/environment.ts","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z\"\n    }\n  }],\n  \"name\": \"chevron--down\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z\"\n    }\n  }],\n  \"name\": \"close\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z\"\n    }\n  }],\n  \"name\": \"close\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M24,14H22V8A6,6,0,0,0,10,8v6H8a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2V16A2,2,0,0,0,24,14ZM12,8a4,4,0,0,1,8,0v6H12ZM24,28H8V16H24Z\"\n    }\n  }],\n  \"name\": \"locked\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,22a6,6,0,1,1,6-6A6.0067,6.0067,0,0,1,16,22Zm0-10a4,4,0,1,0,4,4A4.0045,4.0045,0,0,0,16,12Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,26a10.0162,10.0162,0,0,1-7.4531-3.3325l1.49-1.334A8,8,0,1,0,16,8V6a10,10,0,0,1,0,20Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,30A14,14,0,1,1,30,16,14.0158,14.0158,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12.0137,12.0137,0,0,0,16,4Z\"\n    }\n  }],\n  \"name\": \"progress-bar--round\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M18,28A12,12,0,1,0,6,16v6.2L2.4,18.6,1,20l6,6,6-6-1.4-1.4L8,22.2V16H8A10,10,0,1,1,18,26Z\"\n    }\n  }],\n  \"name\": \"reset\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"m16,2c-7.6,0-14,6.4-14,14s6.4,14,14,14,14-6.4,14-14S23.6,2,16,2Zm8,15H8v-2h16v2Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"fill\": \"none\",\n      \"d\": \"M24 17L8 17 8 15 24 15 24 17z\"\n    }\n  }],\n  \"name\": \"subtract--filled\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M15.5,7.8C14.3,4.7,11.3,2.6,8,2.5C4.7,2.6,1.7,4.7,0.5,7.8c0,0.1,0,0.2,0,0.3c1.2,3.1,4.1,5.2,7.5,5.3\\tc3.3-0.1,6.3-2.2,7.5-5.3C15.5,8.1,15.5,7.9,15.5,7.8z M8,12.5c-2.7,0-5.4-2-6.5-4.5c1-2.5,3.8-4.5,6.5-4.5s5.4,2,6.5,4.5\\tC13.4,10.5,10.6,12.5,8,12.5z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8,5C6.3,5,5,6.3,5,8s1.3,3,3,3s3-1.3,3-3S9.7,5,8,5z M8,10c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S9.1,10,8,10z\"\n    }\n  }],\n  \"name\": \"view\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,(?!,).*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","import { Injectable } from '@angular/core';\nimport { FormatterService } from './formatter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NumberFormatterService {\n  readonly bytesLabels = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  readonly bytesPerSecondLabels = [\n    'B/s',\n    'KiB/s',\n    'MiB/s',\n    'GiB/s',\n    'TiB/s',\n    'PiB/s',\n    'EiB/s',\n    'ZiB/s',\n    'YiB/s'\n  ];\n  readonly secondsLabels = ['ns', 'μs', 'ms', 's', 'ks', 'Ms'];\n  readonly unitlessLabels = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n\n  constructor(private formatter: FormatterService) {}\n\n  formatFromTo(\n    value: any,\n    units: string,\n    targetedUnits: string = '',\n    factor: number,\n    labels: string[],\n    decimals: number = 1\n  ): any {\n    return this.formatter.formatNumberFromTo(value, units, targetedUnits, factor, labels, decimals);\n  }\n\n  formatBytesFromTo(value: any, units: string, targetedUnits: string, decimals: number = 1): any {\n    return this.formatFromTo(value, units, targetedUnits, 1024, this.bytesLabels, decimals);\n  }\n\n  formatBytesPerSecondFromTo(\n    value: any,\n    units: string,\n    targetedUnits: string,\n    decimals: number = 1\n  ): any {\n    return this.formatFromTo(\n      value,\n      units,\n      targetedUnits,\n      1024,\n      this.bytesPerSecondLabels,\n      decimals\n    );\n  }\n\n  formatSecondsFromTo(value: any, units: string, targetedUnits: string, decimals: number = 1): any {\n    return this.formatFromTo(value, units, targetedUnits, 1000, this.secondsLabels, decimals);\n  }\n\n  formatUnitlessFromTo(\n    value: any,\n    units: string,\n    targetedUnits: string = '',\n    decimals: number = 1\n  ): any {\n    return this.formatFromTo(value, units, targetedUnits, 1000, this.unitlessLabels, decimals);\n  }\n}\n","<div class=\"row mt-2\">\n  <div class=\"col-3 d-flex flex-column align-self-center\">\n    <br>\n    <b class=\"chartTitle pb-2\"\n       i18n>{{ chartTitle }}</b>\n    <div *ngFor=\"let data of currentChartData.dataset\"\n         i18n>\n      <div *ngIf=\"data.data.length !== 0\"\n           class=\"d-inline-flex align-items-center gap-1\">\n        <div class=\"box\"\n             [style.background-color]=\"data.pointBackgroundColor\">\n        </div>\n        <ng-container *ngIf=\"!chartTitle.includes(data.label)\">\n          <span [ngClass]=\"{'d-inline-block text-truncate': truncateLabel}\"\n                [ngStyle]=\"{'width': truncateLabel ? '10rem' : 'auto'}\"\n                [title]=\"data.label\">{{ data.label }}</span>:\n        </ng-container>\n        <span>{{ data?.currentData || 'N/A' }} {{ data?.currentDataUnits }}</span>\n        <div *ngIf=\"maxValue && data.currentData\">\n          used of {{ maxConvertedValue }} {{ maxConvertedValueUnits }}\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-9 d-flex flex-column\">\n    <div [ngClass]=\"{'chart mt-3': !isMultiCluster, 'mt-3': isMultiCluster}\">\n      <canvas baseChart\n              [datasets]=\"chartData.dataset\"\n              [options]=\"options\"\n              [type]=\"'line'\"\n              [plugins]=\"chartAreaBorderPlugin\">\n      </canvas>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  Input,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n  AfterViewInit\n} from '@angular/core';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessBinaryPerSecondPipe } from '~/app/shared/pipes/dimless-binary-per-second.pipe';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { NumberFormatterService } from '~/app/shared/services/number-formatter.service';\nimport 'chartjs-adapter-moment';\n\n@Component({\n  selector: 'cd-dashboard-area-chart',\n  templateUrl: './dashboard-area-chart.component.html',\n  styleUrls: ['./dashboard-area-chart.component.scss']\n})\nexport class DashboardAreaChartComponent implements OnChanges, AfterViewInit {\n  @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n\n  @Input()\n  chartTitle: string;\n  @Input()\n  maxValue?: number;\n  @Input()\n  dataUnits: string;\n  @Input()\n  dataArray?: Array<Array<[number, string]>>; // Array of query results\n  @Input()\n  labelsArray?: string[] = []; // Array of chart labels\n  @Input()\n  decimals?: number = 1;\n  @Input()\n  truncateLabel = false;\n  @Input()\n  isMultiCluster?: boolean = false;\n\n  currentDataUnits: string;\n  currentData: number;\n  maxConvertedValue?: number;\n  maxConvertedValueUnits?: string;\n\n  chartDataUnits: string;\n  chartData: any = { dataset: [] };\n  options: any = {};\n  currentChartData: any = {};\n\n  chartColors!: any[];\n\n  public chartAreaBorderPlugin: any[] = [\n    {\n      beforeDraw(chart: any) {\n        if (!chart.options.plugins.borderArea) {\n          return;\n        }\n        const {\n          ctx,\n          chartArea: { left, top, width, height }\n        } = chart;\n        ctx.save();\n        ctx.strokeStyle = chart.options.plugins.chartAreaBorder.borderColor;\n        ctx.lineWidth = chart.options.plugins.chartAreaBorder.borderWidth;\n        ctx.setLineDash(chart.options.plugins.chartAreaBorder.borderDash || []);\n        ctx.lineDashOffset = chart.options.plugins.chartAreaBorder.borderDashOffset;\n        ctx.strokeRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  ];\n\n  constructor(\n    private cssHelper: CssHelper,\n    private dimlessBinary: DimlessBinaryPipe,\n    private dimlessBinaryPerSecond: DimlessBinaryPerSecondPipe,\n    private dimlessPipe: DimlessPipe,\n    private formatter: FormatterService,\n    private numberFormatter: NumberFormatterService\n  ) {\n    this.chartColors = [\n      [\n        this.cssHelper.propertyValue('chart-color-strong-blue'),\n        this.cssHelper.propertyValue('chart-color-translucent-blue')\n      ],\n      [\n        this.cssHelper.propertyValue('chart-color-orange'),\n        this.cssHelper.propertyValue('chart-color-translucent-orange')\n      ],\n      [\n        this.cssHelper.propertyValue('chart-color-green'),\n        this.cssHelper.propertyValue('chart-color-translucent-green')\n      ],\n      [\n        this.cssHelper.propertyValue('chart-color-cyan'),\n        this.cssHelper.propertyValue('chart-color-translucent-cyan')\n      ],\n      [\n        this.cssHelper.propertyValue('chart-color-purple'),\n        this.cssHelper.propertyValue('chart-color-translucent-purple')\n      ],\n      [\n        this.cssHelper.propertyValue('chart-color-red'),\n        this.cssHelper.propertyValue('chart-color-translucent-red')\n      ]\n    ];\n\n    this.options = {\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          mode: 'index',\n          external: function (tooltipModel: any) {\n            tooltipModel.tooltip.x = 10;\n            tooltipModel.tooltip.y = 0;\n          }.bind(this),\n          intersect: false,\n          displayColors: true,\n          backgroundColor: this.cssHelper.propertyValue('chart-color-tooltip-background'),\n          callbacks: {\n            title: function (tooltipItem: any): any {\n              return tooltipItem[0].xLabel;\n            },\n            label: (context: any) => {\n              return (\n                ' ' +\n                context.dataset.label +\n                ' - ' +\n                context.formattedValue +\n                ' ' +\n                this.chartDataUnits\n              );\n            }\n          }\n        },\n        borderArea: true,\n        chartAreaBorder: {\n          borderColor: this.cssHelper.propertyValue('chart-color-slight-dark-gray'),\n          borderWidth: 1\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: false,\n      elements: {\n        point: {\n          radius: 0\n        }\n      },\n      hover: {\n        intersect: false\n      },\n      scales: {\n        x: {\n          display: false,\n          type: 'time',\n          grid: {\n            display: false\n          },\n          time: {\n            tooltipFormat: 'DD/MM/YYYY - HH:mm:ss'\n          }\n        },\n        y: {\n          afterFit: (scaleInstance: any) => (scaleInstance.width = 100),\n          grid: {\n            display: false\n          },\n          beginAtZero: true,\n          ticks: {\n            maxTicksLimit: 4\n          }\n        }\n      }\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updateChartData(changes);\n  }\n\n  ngAfterViewInit() {\n    this.updateChartData(null);\n  }\n\n  private updateChartData(changes: SimpleChanges): void {\n    this.labelsArray.forEach((_label: string, index: number) => {\n      const colorIndex = index % this.chartColors?.length;\n      this.chartData.dataset[index] = {\n        label: '',\n        data: [],\n        tension: 0.2,\n        pointBackgroundColor: this.chartColors[colorIndex][0],\n        backgroundColor: this.chartColors[colorIndex][1],\n        borderColor: this.chartColors[colorIndex][0],\n        borderWidth: 1,\n        fill: {\n          target: 'origin'\n        }\n      };\n      this.chartData.dataset[index].label = this.labelsArray[index];\n    });\n\n    this.setChartTicks();\n\n    if (this.dataArray?.[0]?.length) {\n      this.dataArray = changes?.dataArray?.currentValue || this.dataArray;\n      this.currentChartData = this.chartData;\n      this.dataArray?.forEach((_data: Array<[number, string]>, index: number) => {\n        this.chartData.dataset[index].data = this.formatData(this.dataArray[index]);\n        let currentDataValue = this.dataArray?.[index]?.[this.dataArray[index]?.length - 1]\n          ? this.dataArray[index][this.dataArray[index]?.length - 1][1]\n          : 0;\n        if (currentDataValue) {\n          [\n            this.currentChartData.dataset[index]['currentData'],\n            this.currentChartData.dataset[index]['currentDataUnits']\n          ] = this.convertUnits(currentDataValue).split(' ');\n          [this.maxConvertedValue, this.maxConvertedValueUnits] = this.convertUnits(\n            this.maxValue\n          ).split(' ');\n          this.currentChartData.dataset[index]['currentDataValue'] = currentDataValue;\n        }\n      });\n      this.currentChartData.dataset.sort(\n        (a: { currentDataValue: string }, b: { currentDataValue: string }) =>\n          parseFloat(b['currentDataValue']) - parseFloat(a['currentDataValue'])\n      );\n    }\n\n    if (this.chart) {\n      this.chart.chart.update();\n    }\n  }\n\n  private formatData(array: Array<any>): any {\n    let formattedData = {};\n    formattedData = array?.map((data: any) => ({\n      x: data[0] * 1000,\n      y: Number(this.convertToChartDataUnits(data[1]).replace(/[^\\d,.]+/g, ''))\n    }));\n    return formattedData;\n  }\n\n  private convertToChartDataUnits(data: any): any {\n    let dataWithUnits: string = '';\n    if (this.chartDataUnits !== null) {\n      if (this.dataUnits === 'B') {\n        dataWithUnits = this.numberFormatter.formatBytesFromTo(\n          data,\n          this.dataUnits,\n          this.chartDataUnits,\n          this.decimals\n        );\n      } else if (this.dataUnits === 'B/s') {\n        dataWithUnits = this.numberFormatter.formatBytesPerSecondFromTo(\n          data,\n          this.dataUnits,\n          this.chartDataUnits,\n          this.decimals\n        );\n      } else if (this.dataUnits === 'ms') {\n        dataWithUnits = this.numberFormatter.formatSecondsFromTo(\n          data,\n          this.dataUnits,\n          this.chartDataUnits,\n          this.decimals\n        );\n      } else {\n        dataWithUnits = this.numberFormatter.formatUnitlessFromTo(\n          data,\n          this.dataUnits,\n          this.chartDataUnits,\n          this.decimals\n        );\n      }\n    }\n    return dataWithUnits;\n  }\n\n  private convertUnits(data: any): any {\n    let dataWithUnits: string = '';\n    if (this.dataUnits === 'B') {\n      dataWithUnits = this.dimlessBinary.transform(data, this.decimals);\n    } else if (this.dataUnits === 'B/s') {\n      dataWithUnits = this.dimlessBinaryPerSecond.transform(data, this.decimals);\n    } else if (this.dataUnits === 'ms') {\n      dataWithUnits = this.formatter.format_number(data, 1000, ['ms', 's'], this.decimals);\n    } else {\n      dataWithUnits = this.dimlessPipe.transform(data, this.decimals);\n    }\n    return dataWithUnits;\n  }\n\n  private setChartTicks() {\n    if (!this.chart) {\n      this.chartDataUnits = '';\n      return;\n    }\n\n    let maxValue = 0;\n    let maxValueDataUnits = '';\n\n    const allDataValues = this.dataArray?.reduce((array: string[], data) => {\n      return array.concat(data?.map((values: [number, string]) => values[1]));\n    }, []);\n\n    maxValue = allDataValues ? Math.max(...allDataValues.map(Number)) : 0;\n    [maxValue, maxValueDataUnits] = this.convertUnits(maxValue).split(' ');\n\n    const yAxesTicks = this.chart.chart.options.scales.y;\n    yAxesTicks.ticks.callback = (value: any) => {\n      if (value === 0) {\n        return null;\n      }\n      if (!maxValueDataUnits) {\n        return `${value}`;\n      }\n      return `${value} ${maxValueDataUnits}`;\n    };\n    this.chartDataUnits = maxValueDataUnits || '';\n    this.chart.chart.update();\n  }\n}\n","<div class=\"timeSelector\">\n  <select id=\"timepicker\"\n          name=\"timepicker\"\n          [(ngModel)]=\"time\"\n          (ngModelChange)=\"emitTime()\"\n          class=\"form-select\">\n    <option *ngFor=\"let key of times\"\n            [ngValue]=\"key.value\">{{ key.name }}\n    </option>\n  </select>\n</div>\n","import { Component, EventEmitter, Output } from '@angular/core';\n\nimport moment from 'moment';\n\n@Component({\n  selector: 'cd-dashboard-time-selector',\n  templateUrl: './dashboard-time-selector.component.html',\n  styleUrls: ['./dashboard-time-selector.component.scss']\n})\nexport class DashboardTimeSelectorComponent {\n  @Output()\n  selectedTime = new EventEmitter<any>();\n\n  times: any;\n  time: any;\n\n  constructor() {\n    this.times = [\n      {\n        name: $localize`Last 5 minutes`,\n        value: this.timeToDate(5 * 60, 1)\n      },\n      {\n        name: $localize`Last 15 minutes`,\n        value: this.timeToDate(15 * 60, 3)\n      },\n      {\n        name: $localize`Last 30 minutes`,\n        value: this.timeToDate(30 * 60, 7)\n      },\n      {\n        name: $localize`Last 1 hour`,\n        value: this.timeToDate(3600, 14)\n      },\n      {\n        name: $localize`Last 3 hours`,\n        value: this.timeToDate(3 * 3600, 42)\n      },\n      {\n        name: $localize`Last 6 hours`,\n        value: this.timeToDate(6 * 3600, 84)\n      },\n      {\n        name: $localize`Last 12 hours`,\n        value: this.timeToDate(12 * 3600, 168)\n      },\n      {\n        name: $localize`Last 24 hours`,\n        value: this.timeToDate(24 * 3600, 336)\n      }\n    ];\n    this.time = this.times[3].value;\n  }\n\n  emitTime() {\n    this.selectedTime.emit(this.timeToDate(this.time.end - this.time.start, this.time.step));\n  }\n\n  public timeToDate(secondsAgo: number, step: number): any {\n    const date: number = moment().unix() - secondsAgo;\n    const dateNow: number = moment().unix();\n    const formattedDate: any = {\n      start: date,\n      end: dateNow,\n      step: step\n    };\n    return formattedDate;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbNavModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { provideCharts, withDefaultRegisterables, BaseChartDirective } from 'ng2-charts';\nimport { SimplebarAngularModule } from 'simplebar-angular';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { CephSharedModule } from '../shared/ceph-shared.module';\nimport { DashboardAreaChartComponent } from './dashboard-area-chart/dashboard-area-chart.component';\nimport { DashboardPieComponent } from './dashboard-pie/dashboard-pie.component';\nimport { DashboardTimeSelectorComponent } from './dashboard-time-selector/dashboard-time-selector.component';\nimport { DashboardV3Component } from './dashboard/dashboard-v3.component';\nimport { PgSummaryPipe } from './pg-summary.pipe';\nimport { InlineLoadingModule, ToggletipModule } from 'carbon-components-angular';\n\n@NgModule({\n  imports: [\n    CephSharedModule,\n    CommonModule,\n    NgbNavModule,\n    SharedModule,\n    RouterModule,\n    NgbTooltipModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SimplebarAngularModule,\n    BaseChartDirective,\n    ToggletipModule,\n    InlineLoadingModule\n  ],\n  declarations: [\n    DashboardV3Component,\n    DashboardPieComponent,\n    PgSummaryPipe,\n    DashboardAreaChartComponent,\n    DashboardTimeSelectorComponent\n  ],\n  exports: [\n    DashboardV3Component,\n    DashboardAreaChartComponent,\n    DashboardTimeSelectorComponent,\n    DashboardPieComponent\n  ],\n  providers: [provideCharts(withDefaultRegisterables())]\n})\nexport class DashboardV3Module {}\n","export enum SUPPORTED_FSAL {\n  CEPH = 'CEPH',\n  RGW = 'RGW'\n}\nexport interface NfsFSAbstractionLayer {\n  value: SUPPORTED_FSAL;\n  descr: string;\n  disabled: boolean;\n}\n","  <ng-container *ngIf=\"!!selection\">\n  <legend\n  i18n\n  >\n  {{title | titlecase}}\n  <cd-help-text>\n    Lists exports for a cluster\n  </cd-help-text>\n  </legend>\n  <cd-nfs-list [clusterId]=\"selection.name\"></cd-nfs-list>\n  </ng-container>\n","import { Component, Input } from '@angular/core';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\n\n@Component({\n  selector: 'cd-nfs-cluster-details',\n  templateUrl: './nfs-cluster-details.component.html',\n  styleUrls: ['./nfs-cluster-details.component.scss']\n})\nexport class NfsClusterDetailsComponent {\n  title = $localize`Export`;\n  @Input()\n  selection: CdTableSelection;\n}\n","  <ng-container *ngIf=\"orchStatus?.available && clusters$ | async as clusters\">\n  <cd-table [autoReload]=\"true\"\n            [data]=\"clusters\"\n            columnMode=\"flex\"\n            [columns]=\"columns\"\n            selectionType=\"single\"\n            [hasDetails]=\"true\"\n            (setExpandedRow)=\"setExpandedRow($event)\"\n            (fetchData)=\"loadData()\"\n            (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [selection]=\"selection\"\n                    [permission]=\"permission\"\n                    [tableActions]=\"tableActions\"></cd-table-actions>\n  <cd-nfs-cluster-details  *cdTableDetail\n                           [selection]=\"expandedRow\"></cd-nfs-cluster-details>\n  </cd-table>\n  </ng-container>\n\n  <ng-template\n  #virtualIpTpl\n  let-row=\"data.row\"\n  >\n  <span *ngIf=\"row.virtual_ip || row.port\">\n  <cds-tag size=\"md\">\n    {{ row.virtual_ip }}:{{row.port}}\n  </cds-tag>\n  </span>\n  </ng-template>\n\n  <ng-template\n  #ipAddrTpl\n  let-backends=\"data.value\"\n  >\n  <span *ngFor=\"let backend of backends\">\n  <span *ngIf=\"backend.ip || backend.port\">\n  <cds-tag size=\"md\">\n    {{ backend.ip }}:{{backend.port}}\n  </cds-tag>\n  </span>\n  </span>\n  </ng-template>\n\n  <ng-template #hostnameTpl\n               let-backends=\"data.value\">\n  <span *ngFor=\"let backend of backends\">\n    <span *ngIf=\"backend.hostname\">\n      <cds-tag size=\"md\">{{backend.hostname }}</cds-tag>\n    </span>\n  </span>\n  </ng-template>\n","import { Component, NgZone, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { NfsService } from '~/app/shared/api/nfs.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { NFSCluster } from '../models/nfs-cluster-config';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nconst BASE_URL = 'cephfs/nfs';\n@Component({\n  selector: 'cd-nfs-cluster',\n  templateUrl: './nfs-cluster.component.html',\n  styleUrls: ['./nfs-cluster.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class NfsClusterComponent extends ListWithDetails implements OnInit {\n  @ViewChild('hostnameTpl', { static: true })\n  hostnameTpl: TemplateRef<any>;\n\n  @ViewChild('ipAddrTpl', { static: true })\n  ipAddrTpl: TemplateRef<any>;\n\n  @ViewChild('virtualIpTpl', { static: true })\n  virtualIpTpl: TemplateRef<any>;\n\n  columns: CdTableColumn[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n  tableActions: CdTableAction[] = [];\n  permission: Permission;\n  orchStatus: OrchestratorStatus;\n  clusters$: Observable<NFSCluster[]>;\n  subject = new BehaviorSubject<NFSCluster[]>([]);\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    protected ngZone: NgZone,\n    private authStorageService: AuthStorageService,\n    private nfsService: NfsService,\n    private orchService: OrchestratorService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.orchService.status().subscribe((status: OrchestratorStatus) => {\n      this.orchStatus = status;\n    });\n    this.permission = this.authStorageService.getPermissions().nfs;\n    this.clusters$ = this.subject.pipe(switchMap(() => this.nfsService.nfsClusterList()));\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Hostnames`,\n        prop: 'backend',\n        flexGrow: 2,\n        cellTemplate: this.hostnameTpl\n      },\n      {\n        name: $localize`IP Address`,\n        prop: 'backend',\n        flexGrow: 2,\n        cellTemplate: this.ipAddrTpl\n      },\n      {\n        name: $localize`Virtual IP Address`,\n        prop: 'virtual_ip',\n        flexGrow: 1,\n        cellTemplate: this.virtualIpTpl\n      }\n    ];\n  }\n\n  loadData() {\n    this.subject.next([]);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<div class=\"form-item\">\n  <legend class=\"cds--label\"\n          i18n>Clients</legend>\n\n  <div [formGroup]=\"form\"\n       #formDir=\"ngForm\">\n    <span *ngIf=\"form.get('clients').value.length === 0\"\n          class=\"no-border text-muted\">\n      <span class=\"form-text text-muted\"\n            i18n>Any client can access</span>\n    </span>\n\n    <ng-container formArrayName=\"clients\">\n      <div *ngFor=\"let item of clientsFormArray.controls; let index = index; trackBy: trackByFn\">\n        <div [formGroup]=\"item\">\n          <h6>\n            Client {{ (index + 1) }}\n            <cds-icon-button kind=\"ghost\"\n                             size=\"md\"\n                             class=\"float-end\"\n                             (click)=\"removeClient(index)\"\n                             data-testid=\"remove_client\"\n                             data-toggle=\"button\"\n                             title=\"Remove Client\">\n              <svg cdsIcon=\"close\"\n                   size=\"32\"\n                   class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </h6>\n\n          <div>\n            <!-- Addresses -->\n            <div class=\"form-item\">\n              <cds-text-label for=\"addresses\"\n                              i18n\n                              cdRequiredField=\"Addresses\"\n                              [invalid]=\"!item.controls['addresses'].valid && (item.controls['addresses'].dirty)\"\n                              [invalidText]=\"addressesError\"\n                              i18n-invalidText>Addresses\n                <input cdsText\n                       name=\"addresses\"\n                       id=\"addresses\"\n                       formControlName=\"addresses\"\n                       placeholder=\"192.168.0.10, 192.168.1.0/8\"\n                       [invalid]=\"!item.controls['addresses'].valid && (item.controls['addresses'].dirty)\">\n              </cds-text-label>\n              <ng-template #addressesError>\n                <span class=\"invalid-feedback\">\n                  <span *ngIf=\"showError(index, 'addresses', formDir, 'required')\"\n                        i18n>This field is required.</span>\n\n                  <span *ngIf=\"showError(index, 'addresses', formDir, 'pattern')\">\n                    <ng-container i18n>Must contain one or more comma-separated values</ng-container>\n                    <br>\n                    <ng-container i18n>For example:</ng-container> 192.168.0.10, 192.168.1.0/8\n                  </span>\n                </span>\n              </ng-template>\n            </div>\n\n            <!-- Access Type-->\n            <div class=\"form-item\">\n              <cds-select label=\"Access Type\"\n                          for=\"access_type\"\n                          formControlName=\"access_type\"\n                          name=\"access_type\"\n                          id=\"access_type\"\n                          [helperText]=\"accessTypeHelper\"\n                          i18n>Access Type\n                <option value=\"\">No Access Type</option>\n                <option *ngFor=\"let item of nfsAccessType\"\n                        [value]=\"item.value\">{{ item.value }}</option>\n              </cds-select>\n              <ng-template #accessTypeHelper>\n                <span *ngIf=\"getValue(index, 'access_type')\">\n                  {{ getAccessTypeHelp(index) }}\n                </span>\n              </ng-template>\n            </div>\n\n            <!-- Squash -->\n            <div class=\"form-group row\">\n              <cds-select label=\"Squash\"\n                          for=\"squash\"\n                          formControlName=\"squash\"\n                          name=\"squash\"\n                          id=\"squash\"\n                          [helperText]=\"squashHelperTpl\"\n                          i18n>Squash\n                <option value=\"\">{{ getNoSquashDescr() }}</option>\n                <option *ngFor=\"let squash of nfsSquash\"\n                        [value]=\"squash\">{{ squash }}</option>\n              </cds-select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <div cdsRow>\n      <div cdsCol>\n        <button cdsButton=\"tertiary\"\n                type=\"button\"\n                (click)=\"addClient()\"\n                name=\"add_client\">\n          <ng-container i18n>Add clients</ng-container>\n          <svg cdsIcon=\"add\"\n               size=\"32\"\n               class=\"cds--btn__icon\"></svg>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, NgForm, Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { NfsService } from '~/app/shared/api/nfs.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\n@Component({\n  selector: 'cd-nfs-form-client',\n  templateUrl: './nfs-form-client.component.html',\n  styleUrls: ['./nfs-form-client.component.scss']\n})\nexport class NfsFormClientComponent implements OnInit {\n  @Input()\n  form: CdFormGroup;\n\n  @Input()\n  clients: any[];\n\n  @ContentChild('squashHelper', { static: true }) squashHelperTpl: TemplateRef<any>;\n\n  nfsSquash: any[] = [];\n  nfsAccessType: any[] = [];\n  icons = Icons;\n  clientsFormArray: UntypedFormArray;\n\n  constructor(private nfsService: NfsService) {}\n\n  ngOnInit() {\n    this.nfsSquash = Object.keys(this.nfsService.nfsSquash);\n    this.nfsAccessType = this.nfsService.nfsAccessType;\n    _.forEach(this.clients, (client) => {\n      const fg = this.addClient();\n      fg.patchValue(client);\n    });\n    this.clientsFormArray = this.form.get('clients') as UntypedFormArray;\n  }\n\n  getNoAccessTypeDescr() {\n    if (this.form.getValue('access_type')) {\n      return `${this.form.getValue('access_type')} ${$localize`(inherited from global config)`}`;\n    }\n    return $localize`-- Select the access type --`;\n  }\n\n  getAccessTypeHelp(index: number) {\n    const accessTypeItem = this.nfsAccessType.find((currentAccessTypeItem) => {\n      return this.getValue(index, 'access_type') === currentAccessTypeItem.value;\n    });\n    return _.isObjectLike(accessTypeItem) ? accessTypeItem.help : '';\n  }\n\n  getNoSquashDescr() {\n    if (this.form.getValue('squash')) {\n      return `${this.form.getValue('squash')} (${$localize`inherited from global config`})`;\n    }\n    return $localize`-- Select what kind of user id squashing is performed --`;\n  }\n\n  addClient() {\n    this.clientsFormArray = this.form.get('clients') as UntypedFormArray;\n\n    const REGEX_IP = `(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\.([0-9]{1,3})([/](\\\\d|[1-2]\\\\d|3[0-2]))?)`;\n    const REGEX_LIST_IP = `${REGEX_IP}([ ,]{1,2}${REGEX_IP})*`;\n    const fg = new CdFormGroup({\n      addresses: new UntypedFormControl('', {\n        validators: [Validators.required, Validators.pattern(REGEX_LIST_IP)]\n      }),\n      access_type: new UntypedFormControl(''),\n      squash: new UntypedFormControl('')\n    });\n\n    this.clientsFormArray.push(fg);\n    return fg;\n  }\n\n  removeClient(index: number) {\n    this.clientsFormArray = this.form.get('clients') as UntypedFormArray;\n    this.clientsFormArray.removeAt(index);\n  }\n\n  showError(index: number, control: string, formDir: NgForm, x: string) {\n    return (<any>this.form.controls.clients).controls[index].showError(control, formDir, x);\n  }\n\n  getValue(index: number, control: string) {\n    this.clientsFormArray = this.form.get('clients') as UntypedFormArray;\n    const client = this.clientsFormArray.at(index) as CdFormGroup;\n    return client.getValue(control);\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"nfsForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"nfsForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n      <!-- cluster_id -->\n      <div class=\"form-item\">\n        <cds-select formControlName=\"cluster_id\"\n                    name=\"cluster_id\"\n                    for=\"cluster_id\"\n                    label=\"Cluster\"\n                    cdRequiredField=\"Cluster\"\n                    id=\"cluster_id\"\n                    [invalid]=\"nfsForm.controls.cluster_id.invalid && (nfsForm.controls.cluster_id.dirty)\"\n                    [invalidText]=\"clusterError\"\n                    [skeleton]=\"allClusters === null\"\n                    [helperText]=\"clusterHelperText\"\n                    i18n>\n          <option *ngIf=\"allClusters === null\"\n                  value=\"\">Loading...</option>\n          <option *ngIf=\"allClusters !== null && allClusters.length === 0\"\n                  value=\"\">-- No cluster available --</option>\n          <option *ngIf=\"allClusters !== null && allClusters.length > 0\"\n                  value=\"\">-- Select the cluster --</option>\n          <option *ngFor=\"let cluster of allClusters\"\n                  [value]=\"cluster.cluster_id\">{{ cluster.cluster_id }}</option>\n        </cds-select>\n        <cd-alert-panel *ngIf=\"allClusters?.length === 0\"\n                        type=\"info\"\n                        actionName=\"Create\"\n                        spacingClass=\"mt-2\"\n                        (action)=\"(router.navigate(['/services', {outlets: {modal: ['create']}}]))\"\n                        i18n>To create a new NFS cluster, you need to create an NFS Service.\n        </cd-alert-panel>\n        <ng-template #clusterHelperText>\n          <span i18n>\n          This is the ID of an NFS Service</span>\n        </ng-template>\n        <ng-template #clusterError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('cluster_id', formDir, 'required') || allClusters?.length === 0\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- RGW Export Type -->\n      <div *ngIf=\"storageBackend === 'RGW' && !isEdit\"\n           class=\"form-item\">\n        <cds-select formControlName=\"rgw_export_type\"\n                    name=\"rgw_export_type\"\n                    (valueChange)=\"onExportTypeChange()\"\n                    label=\"Type\">\n          <option value=\"bucket\"\n                  i18n>Bucket</option>\n          <option value=\"user\"\n                  i18n>User</option>\n        </cds-select>\n      </div>\n\n      <!-- FSAL -->\n      <div formGroupName=\"fsal\">\n        <!-- CephFS Volume -->\n        <div class=\"form-item\"\n             *ngIf=\"storageBackend === 'CEPH'\">\n          <cds-select formControlName=\"fs_name\"\n                      name=\"fs_name\"\n                      for=\"fs_name\"\n                      label=\"Volume\"\n                      cdRequiredField=\"Volume\"\n                      id=\"fs_name\"\n                      (change)=\"volumeChangeHandler()\"\n                      [invalid]=\"nfsForm.controls.fsal.controls.fs_name.invalid && (nfsForm.controls.fsal.controls.fs_name.dirty)\"\n                      [invalidText]=\"fsNameError\"\n                      [skeleton]=\"allFsNames === null\"\n                      i18n>\n            <option *ngIf=\"allFsNames === null\"\n                    value=\"\">Loading...</option>\n            <option *ngIf=\"allFsNames !== null && allFsNames.length === 0\"\n                    value=\"\">-- No CephFS filesystem available --</option>\n            <option *ngIf=\"allFsNames !== null && allFsNames.length > 0\"\n                    value=\"\">-- Select the CephFS filesystem --</option>\n            <option *ngFor=\"let filesystem of allFsNames\"\n                    [value]=\"filesystem.name\">{{ filesystem.name }}</option>\n          </cds-select>\n          <ng-template #fsNameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"nfsForm.showError('fs_name', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n\n        <!-- RGW User -->\n        <div class=\"form-item\"\n             *ngIf=\"storageBackend === 'RGW' && nfsForm.getValue('rgw_export_type') === 'user'\">\n          <cds-select formControlName=\"user_id\"\n                      name=\"user_id\"\n                      for=\"user_id\"\n                      label=\"User\"\n                      cdRequiredField=\"User\"\n                      id=\"user_id\"\n                      [invalid]=\"nfsForm.controls.fsal.controls.user_id.invalid && (nfsForm.controls.fsal.controls.user_id.dirty)\"\n                      [invalidText]=\"userIdError\"\n                      [skeleton]=\"allRGWUsers === null\"\n                      i18n>\n            <option *ngIf=\"allRGWUsers === null\"\n                    value=\"\">Loading...</option>\n            <option *ngIf=\"allRGWUsers !== null && allRGWUsers.length === 0\"\n                    value=\"\">-- No RGW User available --</option>\n            <option *ngIf=\"allRGWUsers !== null && allRGWUsers.length > 0\"\n                    value=\"\">-- Select the RGW User --</option>\n            <option *ngFor=\"let user of allRGWUsers\"\n                    [value]=\"user.user_id\">{{ user.user_id }}</option>\n          </cds-select>\n          <ng-template #userIdError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"nfsForm.showError('user_id', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n      </div>\n\n      <!-- Security Label -->\n      <div class=\"form-item\"\n           *ngIf=\"storageBackend === 'CEPH'\">\n        <cds-checkbox formControlName=\"security_label\"\n                      name=\"security_label\"\n                      id=\"security_label\"\n                      i18n>Enable security label</cds-checkbox>\n      </div>\n\n      <div class=\"form-item\"\n           *ngIf=\"nfsForm.getValue('security_label')\">\n        <cds-text-label for=\"sec_label_xattr\"\n                        [invalid]=\"nfsForm.controls.sec_label_xattr.invalid && (nfsForm.controls.sec_label_xattr.dirty)\"\n                        [invalidText]=\"secLabelError\"\n                        i18n>Security Label\n          <input cdsText\n                 name=\"sec_label_xattr\"\n                 id=\"sec_label_xattr\"\n                 formControlName=\"sec_label_xattr\"\n                 [invalid]=\"nfsForm.controls.sec_label_xattr.invalid && (nfsForm.controls.sec_label_xattr.dirty)\">\n        </cds-text-label>\n        <ng-template #secLabelError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('sec_label_xattr', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\"\n           *ngIf=\"storageBackend === 'CEPH' && nfsForm.getValue('fsal').fs_name && !this.isEdit\">\n        <cds-select formControlName=\"subvolume_group\"\n                    name=\"subvolume_group\"\n                    for=\"subvolume_group\"\n                    label=\"Subvolume Group\"\n                    id=\"subvolume_group\"\n                    (change)=\"getSubVol()\"\n                    [skeleton]=\"allsubvolgrps === null\"\n                    i18n>\n          <option *ngIf=\"allsubvolgrps === null\"\n                  value=\"\">Loading...</option>\n          <option *ngIf=\"allsubvolgrps !== null && allsubvolgrps.length >= 0\"\n                  value=\"\">-- Select the CephFS subvolume group --</option>\n          <option *ngFor=\"let subvol_grp of allsubvolgrps\"\n                  [value]=\"subvol_grp.name\"\n                  [selected]=\"subvol_grp.name === nfsForm.get('subvolume_group').value\">{{ subvol_grp.name }}</option>\n          <option [value]=\"defaultSubVolGroup\">{{ defaultSubVolGroup }}</option>\n        </cds-select>\n      </div>\n\n    <div class=\"form-group row\"\n         *ngIf=\"storageBackend === 'CEPH' && nfsForm.getValue('fsal').fs_name && !this.isEdit\">\n      <cds-select formControlName=\"subvolume\"\n                  name=\"subvolume\"\n                  for=\"subvolume\"\n                  label=\"Subvolume\"\n                  id=\"subvolume\"\n                  [skeleton]=\"allsubvols === null\"\n                  (change)=\"setSubVolPath()\"\n                  [invalid]=\"nfsForm.controls.subvolume.invalid && (nfsForm.controls.subvolume.dirty)\"\n                  [invalidText]=\"subvolumeError\"\n                  i18n>\n        <option *ngIf=\"allsubvols === null\"\n                value=\"\">Loading...</option>\n        <option *ngIf=\"allsubvols !== null && allsubvols.length === 0\"\n                value=\"\">-- No CephFS subvolume available --</option>\n        <option *ngIf=\"allsubvols !== null && allsubvols.length > 0\"\n                value=\"\">-- Select the CephFS subvolume --</option>\n        <option *ngFor=\"let subvolume of allsubvols\"\n                [value]=\"subvolume.name\"\n                [selected]=\"subvolume.name === nfsForm.get('subvolume').value\">{{ subvolume.name }}</option>\n      </cds-select>\n      <ng-template #subvolumeError>\n        <span\n                  *ngIf=\"nfsForm.getValue('subvolume_group') === defaultSubVolGroup && !nfsForm.getValue('subvolume')\"\n                  class=\"invalid-feedback\"\n                  i18n>\n                  This field is required.\n        </span>\n      </ng-template>\n    </div>\n\n      <!-- Path -->\n      <div class=\"form-item\"\n           *ngIf=\"storageBackend === 'CEPH'\">\n        <cds-text-label for=\"path\"\n                        i18n\n                        helperText=\"A path in a CephFS file system.\"\n                        cdRequiredField=\"Path\"\n                        [invalid]=\"nfsForm.controls.path.invalid && (nfsForm.controls.path.dirty)\"\n                        [invalidText]=\"pathError\">Path\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Path...\"\n                 i18n-placeholder\n                 id=\"path\"\n                 name=\"path\"\n                 formControlName=\"path\"\n                 [ngbTypeahead]=\"pathDataSource\"\n                 [invalid]=\"nfsForm.controls.path.invalid && (nfsForm.controls.path.dirty)\">\n        </cds-text-label>\n        <ng-template #pathError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('path', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.get('path').hasError('isIsolatedSlash') && nfsForm.get('path').touched\"\n                i18n>Export on CephFS volume \"<code>/</code>\" not allowed.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('path', formDir, 'pattern')\"\n                i18n>Path need to start with a '/' and can be followed by a word</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('path', formDir, 'pathNameNotAllowed')\"\n                i18n>The path does not exist in the selected volume.</span>\n        </ng-template>\n      </div>\n\n      <!-- Bucket -->\n      <div class=\"form-item\"\n           *ngIf=\"storageBackend === 'RGW' && nfsForm.getValue('rgw_export_type') === 'bucket'\">\n        <cds-text-label for=\"path\"\n                        i18n\n                        cdRequiredField=\"Bucket\"\n                        [invalid]=\"nfsForm.controls.path.invalid && (nfsForm.controls.path.dirty)\"\n                        [invalidText]=\"bucketPathError\">\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Bucket name...\"\n                 i18n-placeholder\n                 id=\"path\"\n                 name=\"path\"\n                 formControlName=\"path\"\n                 [ngbTypeahead]=\"bucketDataSource\"\n                 [invalid]=\"nfsForm.controls.path.invalid && (nfsForm.controls.path.dirty)\">\n        </cds-text-label>\n        <ng-template #bucketPathError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('path', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('path', formDir, 'bucketNameNotAllowed')\"\n                i18n>The bucket does not exist or is not in the default realm (if multiple realms are configured).\n                    To continue, <a routerLink=\"/rgw/bucket/create\"\n                                    class=\"btn-link\">create a new bucket</a>.</span>\n        </ng-template>\n      </div>\n\n      <!-- NFS Protocol -->\n      <div class=\"form-item\">\n        <legend class=\"cds--label\"\n                cdRequiredField=\"NFS Protocol\"\n                i18n>NFS Protocol (required)</legend>\n        <cds-checkbox formControlName=\"protocolNfsv3\"\n                      name=\"protocolNfsv3\"\n                      id=\"protocolNfsv3\"\n                      [invalid]=\"nfsForm.controls.protocolNfsv3.invalid && (nfsForm.controls.protocolNfsv3.dirty)\"\n                      [invalidText]=\"protocolError\"\n                      i18n>NFSv3</cds-checkbox>\n        <cds-checkbox formControlName=\"protocolNfsv4\"\n                      name=\"protocolNfsv4\"\n                      id=\"protocolNfsv4\"\n                      [invalid]=\"nfsForm.controls.protocolNfsv4.invalid && (nfsForm.controls.protocolNfsv4.dirty)\"\n                      [invalidText]=\"protocolError\"\n                      i18n>NFSv4</cds-checkbox>\n          <ng-template #protocolError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"nfsForm.showError('protocolNfsv3', formDir, 'required') ||\n                  nfsForm.showError('protocolNfsv4', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </ng-template>\n        </div>\n\n      <!-- Pseudo -->\n      <div class=\"form-item\"\n           *ngIf=\"nfsForm.getValue('protocolNfsv4') || nfsForm.getValue('protocolNfsv3')\">\n        <cds-text-label for=\"pseudo\"\n                        i18n\n                        [helperText]=\"pseudoHelper\"\n                        cdRequiredField=\"Pseudo\"\n                        [invalid]=\"nfsForm.controls.pseudo.invalid && (nfsForm.controls.pseudo.dirty)\"\n                        [invalidText]=\"pseudoError\">\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Pseudo...\"\n                 i18n-placeholder\n                 id=\"pseudo\"\n                 name=\"pseudo\"\n                 formControlName=\"pseudo\"\n                 minlength=\"2\"\n                 [invalid]=\"nfsForm.controls.pseudo.invalid && (nfsForm.controls.pseudo.dirty)\">\n        </cds-text-label>\n        <ng-template #pseudoHelper>\n          <span i18n>The position this export occupies in the Pseudo FS. It must be unique.</span><br/>\n          <span i18n>By using different Pseudo options, the same Path may be exported multiple times.</span>\n        </ng-template>\n        <ng-template #pseudoError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('pseudo', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('pseudo', formDir, 'pseudoAlreadyExists')\"\n                i18n>The pseudo is already in use by another export.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('pseudo', formDir, 'pattern')\"\n                i18n>Pseudo needs to start with a '/' and can't contain any of the following: &gt;, &lt;, |, &, ( or ).</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('pseudo', formDir, 'minlength') && nfsForm.getValue('pseudo') === '/'\"\n                i18n>Pseudo path should be an absolute path and it cannot be just '/'</span>\n        </ng-template>\n      </div>\n\n      <!-- Access Type -->\n      <div class=\"form-item\">\n        <cds-select formControlName=\"access_type\"\n                    name=\"access_type\"\n                    for=\"access_type\"\n                    label=\"Access Type\"\n                    cdRequiredField=\"Access Type\"\n                    id=\"access_type\"\n                    [invalid]=\"nfsForm.controls.access_type.invalid && (nfsForm.controls.access_type.dirty)\"\n                    [invalidText]=\"accessTypeError\"\n                    [helperText]=\"accessTypeHelper\"\n                    [warn]=\"nfsForm.getValue('access_type') === 'RW' && storageBackend === 'RGW'\"\n                    [warnText]=\"accessTypeWarning\"\n                    [skeleton]=\"nfsAccessType === null\"\n                    i18n>\n          <option *ngIf=\"nfsAccessType === null\"\n                  value=\"\">Loading...</option>\n          <option *ngIf=\"nfsAccessType !== null && nfsAccessType.length === 0\"\n                  value=\"\">-- No access type available --</option>\n          <option *ngFor=\"let accessType of nfsAccessType\"\n                  [value]=\"accessType.value\">{{ accessType.value }}</option>\n        </cds-select>\n        <ng-template #accessTypeHelper>\n          <span *ngIf=\"nfsForm.getValue('access_type')\">\n            {{ getAccessTypeHelp(nfsForm.getValue('access_type')) }}\n          </span>\n        </ng-template>\n        <ng-template #accessTypeWarning>\n          <span *ngIf=\"nfsForm.getValue('access_type') === 'RW' && storageBackend === 'RGW'\"\n                i18n>The Object Gateway NFS backend has a number of\n            limitations which will seriously affect applications writing to\n            the share. Please consult the&nbsp;<cd-doc section=\"rgw-nfs\"></cd-doc>&nbsp;\n            for details before enabling write access.</span>\n        </ng-template>\n        <ng-template #accessTypeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('access_type', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Squash -->\n      <div class=\"form-item\">\n        <cds-select formControlName=\"squash\"\n                    name=\"squash\"\n                    for=\"squash\"\n                    label=\"Squash\"\n                    cdRequiredField=\"Squash\"\n                    id=\"squash\"\n                    [invalid]=\"nfsForm.controls.squash.invalid && (nfsForm.controls.squash.dirty)\"\n                    [invalidText]=\"squashError\"\n                    [skeleton]=\"nfsSquash === null\"\n                    [helperText]=\"squashHelper\"\n                    i18n>\n          <option *ngIf=\"nfsSquash === null\"\n                  value=\"\">Loading...</option>\n          <option *ngIf=\"nfsSquash !== null && nfsSquash.length === 0\"\n                  value=\"\">-- No squash available --</option>\n          <option *ngFor=\"let squash of nfsSquash\"\n                  [value]=\"squash\">{{ squash }}</option>\n        </cds-select>\n        <ng-template #squashHelper>\n          <span *ngIf=\"nfsForm.getValue('squash') === 'root_squash'\"\n                i18n>Maps the root user on the NFS client to an anonymous user/group with limited privileges. This prevents a root client user from having total control over the NFS export.</span>\n\n          <span *ngIf=\"nfsForm.getValue('squash') === 'root_id_squash'\"\n                i18n>Maps the root user on the NFS client to an anonymous user/group with limited privileges, preventing root access but retaining non-root group privileges.</span>\n\n          <span *ngIf=\"nfsForm.getValue('squash') === 'all_squash'\"\n                i18n>Maps all users on the NFS client to an anonymous user/group with limited privileges, ensuring that no user has special privileges on the NFS export.</span>\n\n          <span *ngIf=\"nfsForm.getValue('squash') === 'no_root_squash'\"\n                i18n>Allows the root user on the NFS client to retain full root privileges on the NFS server, which may pose security risks.</span>\n        </ng-template>\n        <ng-template #squashError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('squash', formDir,'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Transport Protocol -->\n      <div class=\"form-item\">\n        <legend class=\"cds--label\"\n                cdRequiredField=\"Transport Protocol\"\n                i18n>Transport Protocol (required)</legend>\n        <cds-checkbox formControlName=\"transportUDP\"\n                      name=\"transportUDP\"\n                      id=\"transportUDP\"\n                      [invalid]=\"nfsForm.controls.transportUDP.invalid && (nfsForm.controls.transportUDP.dirty)\"\n                      [invalidText]=\"transportError\"\n                      i18n>UDP</cds-checkbox>\n        <cds-checkbox formControlName=\"transportTCP\"\n                      name=\"transportTCP\"\n                      id=\"transportTCP\"\n                      [invalid]=\"nfsForm.controls.transportTCP.invalid && (nfsForm.controls.transportTCP.dirty)\"\n                      [invalidText]=\"transportError\"\n                      i18n>TCP</cds-checkbox>\n        <ng-template #transportError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"nfsForm.showError('transportUDP', formDir, 'required') ||\n                nfsForm.showError('transportTCP', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Clients -->\n      <cd-nfs-form-client [form]=\"nfsForm\"\n                          [clients]=\"clients\"\n                          #nfsClients>\n      </cd-nfs-form-client>\n\n      <!-- Errors -->\n      <cd-alert-panel type=\"error\"\n                      *ngIf=\"!!storageBackendError\">\n        {{storageBackendError}}\n      </cd-alert-panel>\n      <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                            [form]=\"nfsForm\"\n                            [disabled]=\"!!storageBackendError\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            wrappingClass=\"text-right\"></cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  UntypedFormControl,\n  ValidationErrors,\n  Validators\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, distinctUntilChanged, map, mergeMap } from 'rxjs/operators';\n\nimport { SUPPORTED_FSAL } from '~/app/ceph/nfs/models/nfs.fsal';\nimport { Directory, NfsService } from '~/app/shared/api/nfs.service';\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { RgwSiteService } from '~/app/shared/api/rgw-site.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { CdHttpErrorResponse } from '~/app/shared/services/api-interceptor.service';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { NfsFormClientComponent } from '../nfs-form-client/nfs-form-client.component';\nimport { getFsalFromRoute, getPathfromFsal } from '../utils';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { RgwUserService } from '~/app/shared/api/rgw-user.service';\nimport { RgwExportType } from '../nfs-list/nfs-list.component';\nimport { DEFAULT_SUBVOLUME_GROUP } from '~/app/shared/constants/cephfs.constant';\n\n@Component({\n  selector: 'cd-nfs-form',\n  templateUrl: './nfs-form.component.html',\n  styleUrls: ['./nfs-form.component.scss']\n})\nexport class NfsFormComponent extends CdForm implements OnInit {\n  @ViewChild('nfsClients', { static: true })\n  nfsClients: NfsFormClientComponent;\n\n  clients: any[] = [];\n\n  permission: Permission;\n  nfsForm: CdFormGroup;\n  isEdit = false;\n\n  cluster_id: string = null;\n  export_id: string = null;\n\n  allClusters: { cluster_id: string }[] = null;\n  icons = Icons;\n\n  allFsNames: any[] = null;\n\n  allRGWUsers: any[] = null;\n\n  storageBackend: SUPPORTED_FSAL;\n  storageBackendError: string = null;\n\n  defaultAccessType = { RGW: 'RO' };\n  nfsAccessType: any[] = [];\n  nfsSquash: any[] = [];\n\n  action: string;\n  resource: string;\n\n  allsubvolgrps: any[] = [];\n  allsubvols: any[] = [];\n\n  selectedFsName: string = '';\n  selectedSubvolGroup: string = '';\n  selectedSubvol: string = '';\n  defaultSubVolGroup = DEFAULT_SUBVOLUME_GROUP;\n\n  pathDataSource = (text$: Observable<string>) => {\n    return text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      mergeMap((token: string) => this.getPathTypeahead(token)),\n      map((val: string[]) => val)\n    );\n  };\n\n  bucketDataSource = (text$: Observable<string>) => {\n    return text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      mergeMap((token: string) => this.getBucketTypeahead(token))\n    );\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private nfsService: NfsService,\n    private subvolService: CephfsSubvolumeService,\n    private subvolgrpService: CephfsSubvolumeGroupService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private rgwBucketService: RgwBucketService,\n    private rgwUserService: RgwUserService,\n    private rgwSiteService: RgwSiteService,\n    private formBuilder: CdFormBuilder,\n    private taskWrapper: TaskWrapperService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().pool;\n    this.resource = $localize`NFS export`;\n    this.storageBackend = getFsalFromRoute(this.router.url);\n  }\n\n  ngOnInit() {\n    this.nfsAccessType = this.nfsService.nfsAccessType;\n    this.nfsSquash = Object.keys(this.nfsService.nfsSquash);\n    this.createForm();\n    const promises: Observable<any>[] = [this.nfsService.listClusters()];\n\n    if (this.storageBackend === SUPPORTED_FSAL.RGW) {\n      promises.push(this.rgwSiteService.get('realms'));\n    } else {\n      promises.push(this.nfsService.filesystems());\n    }\n\n    if (this.router.url.startsWith(`/${getPathfromFsal(this.storageBackend)}/nfs/edit`)) {\n      this.isEdit = true;\n    }\n\n    if (this.isEdit) {\n      this.action = this.actionLabels.EDIT;\n      this.route.params.subscribe(\n        (params: { cluster_id: string; export_id: string; rgw_export_type?: string }) => {\n          this.cluster_id = decodeURIComponent(params.cluster_id);\n          this.export_id = decodeURIComponent(params.export_id);\n          if (params.rgw_export_type) {\n            this.nfsForm.get('rgw_export_type').setValue(params.rgw_export_type);\n            if (params.rgw_export_type === RgwExportType.BUCKET) {\n              this.setBucket();\n            } else {\n              this.setUsers();\n            }\n          }\n          promises.push(this.nfsService.get(this.cluster_id, this.export_id));\n          this.getData(promises);\n        }\n      );\n      this.nfsForm.get('cluster_id').disable();\n      this.nfsForm.get('fsal').disable();\n      this.nfsForm.get('path').disable();\n    } else {\n      this.action = this.actionLabels.CREATE;\n      this.route.params.subscribe(\n        (params: { fs_name: string; subvolume_group: string; subvolume?: string }) => {\n          this.selectedFsName = params.fs_name;\n          this.selectedSubvolGroup = params.subvolume_group;\n          if (params.subvolume) this.selectedSubvol = params.subvolume;\n        }\n      );\n\n      if (this.storageBackend === SUPPORTED_FSAL.RGW) {\n        this.nfsForm.get('rgw_export_type').setValue('bucket');\n        this.setBucket();\n      }\n      this.getData(promises);\n    }\n  }\n\n  getData(promises: Observable<any>[]) {\n    forkJoin(promises).subscribe((data: any[]) => {\n      this.resolveClusters(data[0]);\n      this.resolveFsals(data[1]);\n      if (data[2]) {\n        this.resolveModel(data[2]);\n      }\n      this.loadingReady();\n    });\n  }\n\n  volumeChangeHandler() {\n    this.isDefaultSubvolumeGroup();\n  }\n\n  async getSubVol() {\n    const fs_name = this.nfsForm.getValue('fsal').fs_name;\n    const subvolgrp = this.nfsForm.getValue('subvolume_group');\n    await this.setSubVolGrpPath();\n\n    (subvolgrp === this.defaultSubVolGroup\n      ? this.subvolService.get(fs_name)\n      : this.subvolService.get(fs_name, subvolgrp)\n    ).subscribe((data: any) => {\n      this.allsubvols = data;\n    });\n    this.setUpVolumeValidation();\n  }\n\n  getSubVolGrp(fs_name: string) {\n    this.subvolgrpService.get(fs_name).subscribe((data: any) => {\n      this.allsubvolgrps = data;\n    });\n  }\n\n  setSubVolGrpPath(): Promise<void> {\n    const fsName = this.nfsForm.getValue('fsal').fs_name;\n    const subvolGroup = this.nfsForm.getValue('subvolume_group');\n\n    return new Promise<void>((resolve, reject) => {\n      if (subvolGroup == this.defaultSubVolGroup) {\n        this.updatePath('/volumes/' + this.defaultSubVolGroup);\n      } else if (subvolGroup != '') {\n        this.subvolgrpService\n          .info(fsName, subvolGroup)\n          .pipe(map((data) => data['path']))\n          .subscribe(\n            (path) => {\n              this.updatePath(path);\n              resolve();\n            },\n            (error) => reject(error)\n          );\n      } else {\n        this.updatePath('');\n        this.setUpVolumeValidation();\n      }\n      resolve();\n    });\n  }\n\n  // Checking if subVolGroup is \"_nogroup\" and updating path to default as \"/volumes/_nogroup else blank.\"\n  isDefaultSubvolumeGroup() {\n    const fsName = this.nfsForm.getValue('fsal').fs_name;\n    this.getSubVolGrp(fsName);\n    this.getSubVol();\n    this.updatePath('/volumes/' + this.defaultSubVolGroup);\n    this.setUpVolumeValidation();\n  }\n\n  setSubVolPath(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const subvol = this.nfsForm.getValue('subvolume');\n      const subvolGroup = this.nfsForm.getValue('subvolume_group');\n      const fs_name = this.nfsForm.getValue('fsal').fs_name;\n\n      this.subvolService\n        .info(fs_name, subvol, subvolGroup === this.defaultSubVolGroup ? '' : subvolGroup)\n        .pipe(map((data) => data['path']))\n        .subscribe(\n          (path) => {\n            this.updatePath(path);\n            resolve();\n          },\n          (error) => reject(error)\n        );\n    });\n  }\n\n  setUpVolumeValidation() {\n    const subvolumeGroup = this.nfsForm.get('subvolume_group').value;\n    const subVolumeControl = this.nfsForm.get('subvolume');\n\n    // SubVolume is required if SubVolume Group is \"_nogroup\".\n    if (subvolumeGroup == this.defaultSubVolGroup) {\n      subVolumeControl?.setValidators([Validators.required]);\n    } else {\n      subVolumeControl?.clearValidators();\n    }\n    subVolumeControl?.updateValueAndValidity();\n  }\n\n  updatePath(path: string) {\n    this.nfsForm.patchValue({ path: path });\n  }\n\n  createForm() {\n    this.nfsForm = new CdFormGroup({\n      // Common fields\n      cluster_id: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      path: new UntypedFormControl('', {\n        validators: [\n          Validators.required,\n          CdValidators.custom('isIsolatedSlash', this.isolatedSlashCondition) // Path can never be single \"/\".\n        ]\n      }),\n      protocolNfsv3: new UntypedFormControl(true, {\n        validators: [\n          CdValidators.requiredIf({ protocolNfsv4: false }, (value: boolean) => {\n            return !value;\n          })\n        ]\n      }),\n      protocolNfsv4: new UntypedFormControl(true, {\n        validators: [\n          CdValidators.requiredIf({ protocolNfsv3: false }, (value: boolean) => {\n            return !value;\n          })\n        ]\n      }),\n      pseudo: new UntypedFormControl('', {\n        validators: [\n          CdValidators.requiredIf({ protocolNfsv4: true, protocolNfsv3: true }),\n          Validators.pattern('^/[^><|&()]*$')\n        ]\n      }),\n      access_type: new UntypedFormControl('RW'),\n      squash: new UntypedFormControl(this.nfsSquash[0]),\n      transportUDP: new UntypedFormControl(true, {\n        validators: [\n          CdValidators.requiredIf({ transportTCP: false }, (value: boolean) => {\n            return !value;\n          })\n        ]\n      }),\n      transportTCP: new UntypedFormControl(true, {\n        validators: [\n          CdValidators.requiredIf({ transportUDP: false }, (value: boolean) => {\n            return !value;\n          })\n        ]\n      }),\n      clients: this.formBuilder.array([]),\n      security_label: new UntypedFormControl(false),\n\n      // FSAL fields (common for RGW and CephFS)\n      fsal: new CdFormGroup({\n        name: new UntypedFormControl(this.storageBackend, {\n          validators: [Validators.required]\n        }),\n        // RGW-specific field\n        user_id: new UntypedFormControl('', {\n          validators: [\n            CdValidators.requiredIf({\n              name: 'RGW'\n            })\n          ]\n        }),\n        // CephFS-specific field\n        fs_name: new UntypedFormControl('', {\n          validators: [\n            CdValidators.requiredIf({\n              name: 'CEPH'\n            })\n          ]\n        })\n      }),\n\n      // CephFS-specific fields\n      subvolume_group: new UntypedFormControl(this.defaultSubVolGroup),\n      subvolume: new UntypedFormControl(''),\n      sec_label_xattr: new UntypedFormControl(\n        'security.selinux',\n        CdValidators.requiredIf({ security_label: true, 'fsal.name': 'CEPH' })\n      ),\n\n      // RGW-specific fields\n      rgw_export_type: new UntypedFormControl(\n        null,\n        CdValidators.requiredIf({\n          'fsal.name': 'RGW'\n        })\n      )\n    });\n  }\n\n  resolveModel(res: any) {\n    if (res.fsal.name === 'CEPH') {\n      res.sec_label_xattr = res.fsal.sec_label_xattr;\n    }\n\n    res.protocolNfsv4 = res.protocols.indexOf(4) !== -1;\n    res.protocolNfsv3 = res.protocols.indexOf(3) !== -1;\n    delete res.protocols;\n\n    res.transportTCP = res.transports.indexOf('TCP') !== -1;\n    res.transportUDP = res.transports.indexOf('UDP') !== -1;\n    delete res.transports;\n\n    Object.entries(this.nfsService.nfsSquash).forEach(([key, value]) => {\n      if (value.includes(res.squash)) {\n        res.squash = key;\n      }\n    });\n\n    res.clients.forEach((client: any) => {\n      let addressStr = '';\n      client.addresses.forEach((address: string) => {\n        addressStr += address + ', ';\n      });\n      if (addressStr.length >= 2) {\n        addressStr = addressStr.substring(0, addressStr.length - 2);\n      }\n      client.addresses = addressStr;\n    });\n\n    this.nfsForm.patchValue(res);\n    this.setPathValidation();\n    this.clients = res.clients;\n  }\n\n  resolveClusters(clusters: string[]) {\n    this.allClusters = [];\n    for (const cluster of clusters) {\n      this.allClusters.push({ cluster_id: cluster });\n    }\n    if (!this.isEdit && this.allClusters.length > 0) {\n      this.nfsForm.get('cluster_id').setValue(this.allClusters[0].cluster_id);\n    }\n  }\n\n  resolveFsals(res: string[]) {\n    if (this.storageBackend === SUPPORTED_FSAL.RGW) {\n      this.resolveRealms(res);\n    } else {\n      this.resolveFilesystems(res);\n    }\n    if (!this.isEdit && this.storageBackend === SUPPORTED_FSAL.RGW) {\n      this.nfsForm.patchValue({\n        path: '',\n        access_type: this.defaultAccessType[SUPPORTED_FSAL.RGW]\n      });\n    }\n  }\n\n  resolveRouteParams() {\n    if (!_.isEmpty(this.selectedFsName)) {\n      this.nfsForm.patchValue({\n        fsal: {\n          fs_name: this.selectedFsName\n        }\n      });\n      this.getSubVolGrp(this.selectedFsName);\n    }\n    if (!_.isEmpty(this.selectedSubvolGroup)) {\n      this.nfsForm.patchValue({\n        subvolume_group: this.selectedSubvolGroup\n      });\n      this.getSubVol();\n    }\n    if (!_.isEmpty(this.selectedSubvol)) {\n      this.nfsForm.patchValue({\n        subvolume: this.selectedSubvol\n      });\n      this.setSubVolPath();\n    }\n  }\n\n  resolveFilesystems(filesystems: any[]) {\n    this.allFsNames = filesystems;\n    if (!this.isEdit) {\n      this.resolveRouteParams();\n    }\n  }\n\n  resolveRealms(realms: string[]) {\n    if (realms.length !== 0) {\n      this.rgwSiteService\n        .isDefaultRealm()\n        .pipe(\n          mergeMap((isDefaultRealm) => {\n            if (!isDefaultRealm) {\n              throw new Error('Selected realm is not the default.');\n            }\n            return of(true);\n          })\n        )\n        .subscribe({\n          error: (error) => {\n            const fsalDescr = this.nfsService.nfsFsal.find((f) => f.value === this.storageBackend)\n              .descr;\n            this.storageBackendError = $localize`${fsalDescr} backend is not available. ${error}`;\n          }\n        });\n    }\n  }\n\n  setUsers() {\n    this.nfsForm.get('fsal.user_id').enable();\n    this.nfsForm.get('path').setValue('');\n    this.nfsForm.get('path').disable();\n    this.rgwUserService.list().subscribe((users: any) => {\n      this.allRGWUsers = users;\n    });\n  }\n\n  setBucket() {\n    this.nfsForm.get('path').enable();\n    this.nfsForm.get('fsal.user_id').setValue('');\n    this.nfsForm.get('fsal').disable();\n\n    this.setPathValidation();\n  }\n\n  onExportTypeChange() {\n    this.nfsForm.getValue('rgw_export_type') === RgwExportType.BUCKET\n      ? this.setBucket()\n      : this.setUsers();\n  }\n\n  accessTypeChangeHandler() {\n    const name = this.nfsForm.getValue('name');\n    const accessType = this.nfsForm.getValue('access_type');\n    this.defaultAccessType[name] = accessType;\n  }\n\n  isolatedSlashCondition(value: string): boolean {\n    return value === '/';\n  }\n\n  setPathValidation() {\n    const path = this.nfsForm.get('path');\n    if (this.storageBackend === SUPPORTED_FSAL.RGW) {\n      path.setAsyncValidators([CdValidators.bucketExistence(true, this.rgwBucketService)]);\n    } else {\n      path.setAsyncValidators([this.pathExistence(true)]);\n    }\n\n    if (this.isEdit) {\n      path.markAsDirty();\n    }\n  }\n\n  getAccessTypeHelp(accessType: string) {\n    const accessTypeItem = this.nfsAccessType.find((currentAccessTypeItem) => {\n      if (accessType === currentAccessTypeItem.value) {\n        return currentAccessTypeItem;\n      }\n    });\n    return _.isObjectLike(accessTypeItem) ? accessTypeItem.help : '';\n  }\n\n  getId() {\n    if (\n      _.isString(this.nfsForm.getValue('cluster_id')) &&\n      _.isString(this.nfsForm.getValue('path'))\n    ) {\n      return this.nfsForm.getValue('cluster_id') + ':' + this.nfsForm.getValue('path');\n    }\n    return '';\n  }\n\n  private getPathTypeahead(path: any) {\n    if (!_.isString(path) || path === '/') {\n      return of([]);\n    }\n\n    const fsName = this.nfsForm.getValue('fsal').fs_name;\n    return this.nfsService.lsDir(fsName, path).pipe(\n      map((result: Directory) =>\n        result.paths.filter((dirName: string) => dirName.toLowerCase().includes(path)).slice(0, 15)\n      ),\n      catchError(() => of([$localize`Error while retrieving paths.`]))\n    );\n  }\n\n  private getBucketTypeahead(path: string): Observable<any> {\n    if (_.isString(path) && path !== '/' && path !== '') {\n      return this.rgwBucketService.list().pipe(\n        map((bucketList) =>\n          bucketList\n            .filter((bucketName: string) => bucketName.toLowerCase().includes(path))\n            .slice(0, 15)\n        ),\n        catchError(() => of([$localize`Error while retrieving bucket names.`]))\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  submitAction() {\n    let action: Observable<any>;\n    const requestModel = this.buildRequest();\n\n    if (this.isEdit) {\n      action = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('nfs/edit', {\n          cluster_id: this.cluster_id,\n          export_id: _.parseInt(this.export_id)\n        }),\n        call: this.nfsService.update(this.cluster_id, _.parseInt(this.export_id), requestModel)\n      });\n    } else {\n      // Create\n      action = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('nfs/create', {\n          path: requestModel.path,\n          fsal: requestModel.fsal,\n          cluster_id: requestModel.cluster_id\n        }),\n        call: this.nfsService.create(requestModel)\n      });\n    }\n\n    action.subscribe({\n      error: (errorResponse: CdHttpErrorResponse) => this.setFormErrors(errorResponse),\n      complete: () => this.router.navigate([`/${getPathfromFsal(this.storageBackend)}/nfs`])\n    });\n  }\n\n  private setFormErrors(errorResponse: CdHttpErrorResponse) {\n    if (\n      errorResponse.error.detail &&\n      errorResponse.error.detail\n        .toString()\n        .includes(`Pseudo ${this.nfsForm.getValue('pseudo')} is already in use`)\n    ) {\n      this.nfsForm.get('pseudo').setErrors({ pseudoAlreadyExists: true });\n    }\n    this.nfsForm.setErrors({ cdSubmitButton: true });\n  }\n\n  private buildRequest() {\n    const requestModel: any = _.cloneDeep(this.nfsForm.value);\n    requestModel.fsal = this.nfsForm.get('fsal').value;\n    if (this.isEdit) {\n      requestModel.export_id = _.parseInt(this.export_id);\n      requestModel.path = this.nfsForm.get('path').value;\n      if (requestModel.fsal.name === SUPPORTED_FSAL.RGW) {\n        requestModel.fsal.user_id = this.nfsForm.getValue('fsal').user_id;\n      }\n    }\n\n    if (requestModel.fsal.name === SUPPORTED_FSAL.RGW) {\n      delete requestModel.fsal.fs_name;\n      if (requestModel.rgw_export_type === 'bucket') {\n        delete requestModel.fsal.user_id;\n      } else {\n        requestModel.path = '';\n      }\n    } else {\n      delete requestModel.fsal.user_id;\n    }\n    delete requestModel.rgw_export_type;\n    delete requestModel.subvolume;\n    delete requestModel.subvolume_group;\n\n    requestModel.protocols = [];\n    if (requestModel.protocolNfsv3) {\n      requestModel.protocols.push(3);\n    }\n    if (requestModel.protocolNfsv4) {\n      requestModel.protocols.push(4);\n    }\n    if (!requestModel.protocolNfsv3 && !requestModel.protocolNfsv4) {\n      requestModel.pseudo = null;\n    }\n    delete requestModel.protocolNfsv3;\n    delete requestModel.protocolNfsv4;\n\n    requestModel.transports = [];\n    if (requestModel.transportTCP) {\n      requestModel.transports.push('TCP');\n    }\n    delete requestModel.transportTCP;\n    if (requestModel.transportUDP) {\n      requestModel.transports.push('UDP');\n    }\n    delete requestModel.transportUDP;\n\n    requestModel.clients.forEach((client: any) => {\n      if (_.isString(client.addresses)) {\n        client.addresses = _(client.addresses)\n          .split(/[ ,]+/)\n          .uniq()\n          .filter((address) => address !== '')\n          .value();\n      } else {\n        client.addresses = [];\n      }\n\n      if (!client.squash) {\n        client.squash = requestModel.squash;\n      }\n\n      if (!client.access_type) {\n        client.access_type = requestModel.access_type;\n      }\n    });\n\n    if (requestModel.security_label === false || requestModel.fsal.name === 'RGW') {\n      requestModel.fsal.sec_label_xattr = null;\n    } else {\n      requestModel.fsal.sec_label_xattr = requestModel.sec_label_xattr;\n    }\n    delete requestModel.sec_label_xattr;\n\n    return requestModel;\n  }\n\n  private pathExistence(requiredExistenceResult: boolean): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (control.pristine || !control.value) {\n        return of({ required: true });\n      }\n      const fsName = this.nfsForm.getValue('fsal').fs_name;\n      return this.nfsService.lsDir(fsName, control.value).pipe(\n        map((directory: Directory) =>\n          directory.paths.includes(control.value) === requiredExistenceResult\n            ? null\n            : { pathNameNotAllowed: true }\n        ),\n        catchError(() => of({ pathNameNotAllowed: true }))\n      );\n    };\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"nfs-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [data]=\"data\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"clients\">\n      <a ngbNavLink\n         i18n>Clients ({{ clients.length }})</a>\n      <ng-template ngbNavContent>\n\n        <cd-table #table\n                  [data]=\"clients\"\n                  columnMode=\"flex\"\n                  [columns]=\"clientsColumns\"\n                  identifier=\"addresses\"\n                  forceIdentifier=\"true\"\n                  selectionType=\"\">\n        </cd-table>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\n\n@Component({\n  selector: 'cd-nfs-details',\n  templateUrl: './nfs-details.component.html',\n  styleUrls: ['./nfs-details.component.scss']\n})\nexport class NfsDetailsComponent implements OnChanges {\n  @Input()\n  selection: any;\n\n  selectedItem: any;\n  data: any;\n\n  clientsColumns: CdTableColumn[];\n  clients: any[] = [];\n\n  constructor() {\n    this.clientsColumns = [\n      {\n        name: $localize`Addresses`,\n        prop: 'addresses',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Access Type`,\n        prop: 'access_type',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Squash`,\n        prop: 'squash',\n        flexGrow: 1\n      }\n    ];\n  }\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.selectedItem = this.selection;\n\n      this.clients = this.selectedItem.clients;\n\n      this.data = {};\n      this.data[$localize`Cluster`] = this.selectedItem.cluster_id;\n      this.data[$localize`NFS Protocol`] = this.selectedItem.protocols.map(\n        (protocol: string) => 'NFSv' + protocol\n      );\n      this.data[$localize`Pseudo`] = this.selectedItem.pseudo;\n      this.data[$localize`Access Type`] = this.selectedItem.access_type;\n      this.data[$localize`Squash`] = this.selectedItem.squash;\n      this.data[$localize`Transport`] = this.selectedItem.transports;\n      this.data[$localize`Path`] = this.selectedItem.path;\n\n      if (this.selectedItem.fsal.name === 'CEPH') {\n        this.data[$localize`Storage Backend`] = $localize`CephFS`;\n        this.data[$localize`CephFS User`] = this.selectedItem.fsal.user_id;\n        this.data[$localize`CephFS Filesystem`] = this.selectedItem.fsal.fs_name;\n        this.data[$localize`Security Label`] = this.selectedItem.fsal.sec_label_xattr;\n      } else {\n        this.data[$localize`Storage Backend`] = $localize`Object Gateway`;\n        this.data[$localize`Object Gateway User`] = this.selectedItem.fsal.user_id;\n      }\n    }\n  }\n}\n","<cd-table #table\n          [data]=\"exports\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"id\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          [hasDetails]=\"false\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions class=\"btn-group\"\n                      [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n\n  <cd-nfs-details *cdTableDetail\n                  [selection]=\"expandedRow\">\n  </cd-nfs-details>\n</cd-table>\n\n<ng-template #nfsFsal\n             let-value=\"data.value\">\n  <ng-container *ngIf=\"value.name==='CEPH'\"\n                i18n>CephFS</ng-container>\n  <ng-container *ngIf=\"value.name==='RGW'\"\n                i18n>Object Gateway</ng-container>\n</ng-template>\n\n<ng-template #protocolTpl\n             let-protocols=\"data.value\">\n  <span *ngFor=\"let protocol of protocols\">\n    <cds-tag size=\"md\">NFSv{{protocol}}</cds-tag>\n  </span>\n</ng-template>\n\n<ng-template #transportTpl\n             let-transports=\"data.value\">\n  <span *ngFor=\"let transport of transports\">\n    <cds-tag size=\"md\">{{transport}}</cds-tag>\n  </span>\n</ng-template>\n\n<ng-template #pathTmpl\n             let-value=\"data.value\">\n  <span *ngIf=\"value === ''\"\n        i18n\n        i18n-ngbTooltip\n        ngbTooltip=\"All buckets owned by user\">*</span>\n  <span *ngIf=\"value !== ''\">{{ value }}</span>\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\n\nimport { NfsService } from '~/app/shared/api/nfs.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ViewCacheStatus } from '~/app/shared/enum/view-cache-status.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { Task } from '~/app/shared/models/task';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { getFsalFromRoute, getPathfromFsal } from '../utils';\nimport { SUPPORTED_FSAL } from '../models/nfs.fsal';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nexport enum RgwExportType {\n  BUCKET = 'bucket',\n  USER = 'user'\n}\n\n@Component({\n  selector: 'cd-nfs-list',\n  templateUrl: './nfs-list.component.html',\n  styleUrls: ['./nfs-list.component.scss'],\n  providers: [TaskListService]\n})\nexport class NfsListComponent extends ListWithDetails implements OnInit, OnDestroy {\n  @ViewChild('nfsState')\n  nfsState: TemplateRef<any>;\n  @ViewChild('nfsFsal', { static: true })\n  nfsFsal: TemplateRef<any>;\n  @ViewChild('pathTmpl', { static: true })\n  pathTmpl: TemplateRef<any>;\n\n  @ViewChild('table', { static: true })\n  table: TableComponent;\n\n  @ViewChild('protocolTpl', { static: true })\n  protocolTpl: TemplateRef<any>;\n\n  @ViewChild('transportTpl', { static: true })\n  transportTpl: TemplateRef<any>;\n\n  @Input() clusterId: string;\n  modalRef: NgbModalRef;\n\n  columns: CdTableColumn[];\n  permission: Permission;\n  selection = new CdTableSelection();\n  summaryDataSubscription: Subscription;\n  viewCacheStatus: any;\n  exports: any[];\n  tableActions: CdTableAction[];\n  isDefaultCluster = false;\n  fsal: SUPPORTED_FSAL;\n\n  builders = {\n    'nfs/create': (metadata: any) => {\n      return {\n        path: metadata['path'],\n        cluster_id: metadata['cluster_id'],\n        fsal: metadata['fsal']\n      };\n    }\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private modalService: ModalCdsService,\n    private nfsService: NfsService,\n    private taskListService: TaskListService,\n    private taskWrapper: TaskWrapperService,\n    private router: Router,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().nfs;\n    this.fsal = getFsalFromRoute(this.router.url);\n    const prefix = getPathfromFsal(this.fsal);\n    const getNfsUri = () =>\n      this.selection.first() &&\n      `${encodeURI(this.selection.first().cluster_id)}/${encodeURI(\n        this.selection.first().export_id\n      )}`;\n\n    const createAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => `/${prefix}/nfs/create`,\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection,\n      name: this.actionLabels.CREATE\n    };\n\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => [\n        `/${prefix}/nfs/edit/${getNfsUri()}`,\n        {\n          rgw_export_type:\n            this.fsal === SUPPORTED_FSAL.RGW && !_.isEmpty(this.selection?.first()?.path)\n              ? RgwExportType.BUCKET\n              : RgwExportType.USER\n        }\n      ],\n      name: this.actionLabels.EDIT\n    };\n\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteNfsModal(),\n      name: this.actionLabels.DELETE\n    };\n\n    this.tableActions = [createAction, editAction, deleteAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`User`,\n        prop: 'fsal.user_id',\n        flexGrow: 2,\n        cellTransformation: CellTemplate.executing\n      },\n      {\n        name: this.fsal === SUPPORTED_FSAL.CEPH ? $localize`Path` : $localize`Bucket`,\n        prop: 'path',\n        flexGrow: 2,\n        cellTemplate: this.pathTmpl,\n        cellTransformation: CellTemplate.path\n      },\n      {\n        name: $localize`Pseudo`,\n        prop: 'pseudo',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Cluster`,\n        prop: 'cluster_id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Storage Backend`,\n        prop: 'fsal',\n        flexGrow: 2,\n        cellTemplate: this.nfsFsal\n      },\n      {\n        name: $localize`Access Type`,\n        prop: 'access_type',\n        flexGrow: 2\n      },\n      {\n        name: $localize`NFS Protocol`,\n        prop: 'protocols',\n        flexGrow: 2,\n        cellTemplate: this.protocolTpl\n      },\n      {\n        name: $localize`Transports`,\n        prop: 'transports',\n        flexGrow: 2,\n        cellTemplate: this.transportTpl\n      }\n    ];\n\n    this.taskListService.init(\n      () => this.nfsService.list(this.clusterId),\n      (resp) => this.prepareResponse(resp),\n      (exports) => (this.exports = exports),\n      () => this.onFetchError(),\n      this.taskFilter,\n      this.itemFilter,\n      this.builders\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.summaryDataSubscription) {\n      this.summaryDataSubscription.unsubscribe();\n    }\n  }\n\n  prepareResponse(resp: any): any[] {\n    let result: any[] = [];\n    const filteredresp = resp.filter((nfs: any) => nfs.fsal?.name === this.fsal);\n    filteredresp.forEach((nfs: any) => {\n      nfs.id = `${nfs.cluster_id}:${nfs.export_id}`;\n      nfs.state = 'LOADING';\n      result = result.concat(nfs);\n    });\n    return result;\n  }\n\n  onFetchError() {\n    this.table.reset(); // Disable loading indicator.\n    this.viewCacheStatus = { status: ViewCacheStatus.ValueException };\n  }\n\n  itemFilter(entry: any, task: Task) {\n    return (\n      entry.cluster_id === task.metadata['cluster_id'] &&\n      entry.export_id === task.metadata['export_id']\n    );\n  }\n\n  taskFilter(task: Task) {\n    return ['nfs/create', 'nfs/delete', 'nfs/edit'].includes(task.name);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteNfsModal() {\n    const cluster_id = this.selection.first().cluster_id;\n    const export_id = this.selection.first().export_id;\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: $localize`NFS export`,\n      itemNames: [`${cluster_id}:${export_id}`],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('nfs/delete', {\n            cluster_id: cluster_id,\n            export_id: export_id\n          }),\n          call: this.nfsService.delete(cluster_id, export_id)\n        })\n    });\n  }\n}\n","import { SUPPORTED_FSAL } from './models/nfs.fsal';\n\nexport const getFsalFromRoute = (url: string): SUPPORTED_FSAL =>\n  url.startsWith('/rgw/nfs') ? SUPPORTED_FSAL.RGW : SUPPORTED_FSAL.CEPH;\n\nexport const getPathfromFsal = (fsal: SUPPORTED_FSAL): string =>\n  fsal === SUPPORTED_FSAL.CEPH ? 'cephfs' : 'rgw';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { PerformanceCounterComponent } from './performance-counter/performance-counter.component';\nimport { TablePerformanceCounterComponent } from './table-performance-counter/table-performance-counter.component';\n\n@NgModule({\n  imports: [CommonModule, SharedModule, RouterModule],\n  declarations: [TablePerformanceCounterComponent, PerformanceCounterComponent],\n  exports: [TablePerformanceCounterComponent]\n})\nexport class PerformanceCounterModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { of as observableOf } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { cdEncode } from '../decorators/cd-encode';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class PerformanceCounterService {\n  private url = 'api/perf_counters';\n\n  constructor(private http: HttpClient) {}\n\n  list() {\n    return this.http.get(this.url);\n  }\n\n  get(service_type: string, service_id: string) {\n    return this.http.get(`${this.url}/${service_type}/${service_id}`).pipe(\n      mergeMap((resp: any) => {\n        return observableOf(resp['counters']);\n      })\n    );\n  }\n}\n","<cd-table *ngIf=\"counters; else warning\"\n          [data]=\"counters\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          [autoSave]=\"false\"\n          (fetchData)=\"getCounters($event)\">\n  <ng-template #valueTpl\n               let-row=\"data.row\">\n    {{ row.value | dimless }} {{ row.unit }}\n  </ng-template>\n</cd-table>\n<ng-template #warning>\n  <cd-alert-panel type=\"warning\"\n                  i18n>Performance counters not available</cd-alert-panel>\n</ng-template>\n","import { Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { PerformanceCounterService } from '~/app/shared/api/performance-counter.service';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\n\n/**\n * Display the specified performance counters in a datatable.\n */\n@Component({\n  selector: 'cd-table-performance-counter',\n  templateUrl: './table-performance-counter.component.html',\n  styleUrls: ['./table-performance-counter.component.scss']\n})\nexport class TablePerformanceCounterComponent implements OnInit {\n  columns: Array<CdTableColumn> = [];\n  counters: Array<object> = [];\n\n  @ViewChild('valueTpl')\n  public valueTpl: TemplateRef<any>;\n\n  /**\n   * The service type, e.g. 'rgw', 'mds', 'mon', 'osd', ...\n   */\n  @Input()\n  serviceType: string;\n\n  /**\n   * The service identifier.\n   */\n  @Input()\n  serviceId: string;\n\n  constructor(private performanceCounterService: PerformanceCounterService) {}\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Description`,\n        prop: 'description',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Value`,\n        prop: 'value',\n        cellTemplate: this.valueTpl,\n        flexGrow: 1\n      }\n    ];\n  }\n\n  getCounters(context: CdTableFetchDataContext) {\n    this.performanceCounterService.get(this.serviceType, this.serviceId).subscribe(\n      (resp: object[]) => {\n        this.counters = resp;\n      },\n      (error) => {\n        if (error.status === 404) {\n          error.preventDefault();\n          this.counters = null;\n        } else {\n          context.error();\n        }\n      }\n    );\n  }\n}\n","export class RgwRealm {\n  id: string;\n  name: string;\n  current_period: string;\n  epoch: number;\n}\n\nexport class RgwZonegroup {\n  id: string;\n  name: string;\n  api_name: string;\n  is_master: boolean;\n  endpoints: string;\n  hostnames: string[];\n  hostnames_s3website: string[];\n  master_zone: string;\n  zones: RgwZone[];\n  placement_targets: any[];\n  default_placement: string;\n  realm_id: string;\n  sync_policy: object;\n  enabled_features: string[];\n}\n\nexport class RgwZone {\n  id: string;\n  name: string;\n  domain_root: string;\n  control_pool: string;\n  gc_pool: string;\n  lc_pool: string;\n  log_pool: string;\n  intent_log_pool: string;\n  usage_log_pool: string;\n  roles_pool: string;\n  reshard_pool: string;\n  user_keys_pool: string;\n  user_email_pool: string;\n  user_swift_pool: string;\n  user_uid_pool: string;\n  otp_pool: string;\n  system_key: SystemKey;\n  placement_pools: any[];\n  realm_id: string;\n  notif_pool: string;\n  endpoints: string;\n}\n\nexport class SystemKey {\n  access_key: string;\n  secret_key: string;\n}\n\nexport enum RgwMultisiteSyncPolicyStatus {\n  ENABLED = 'enabled',\n  FORBIDDEN = 'forbidden',\n  ALLOWED = 'allowed'\n}\n\nexport enum FlowType {\n  directional = 'directional',\n  symmetrical = 'symmetrical'\n}\n\nexport interface Zone {\n  added: string[];\n  removed: string[];\n}\n","export const RGW = 'rgw';\n\nexport enum ManagedPolicyName {\n  AmazonS3FullAccess = 'AmazonS3FullAccess',\n  AmazonS3ReadOnlyAccess = 'AmazonS3ReadOnlyAccess'\n}\n\nexport const ManagedPolicyArnMap: Record<ManagedPolicyName, string> = {\n  [ManagedPolicyName.AmazonS3FullAccess]: 'arn:aws:iam::aws:policy/AmazonS3FullAccess',\n  [ManagedPolicyName.AmazonS3ReadOnlyAccess]: 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PipesModule } from '~/app/shared/pipes/pipes.module';\n\nimport { DataTableModule } from '~/app/shared/datatable/datatable.module';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { DeviceListComponent } from './device-list/device-list.component';\nimport { SmartListComponent } from './smart-list/smart-list.component';\nimport { HealthChecksComponent } from './health-checks/health-checks.component';\n\n@NgModule({\n  imports: [CommonModule, DataTableModule, SharedModule, NgbNavModule, PipesModule],\n  exports: [DeviceListComponent, SmartListComponent, HealthChecksComponent],\n  declarations: [DeviceListComponent, SmartListComponent, HealthChecksComponent]\n})\nexport class CephSharedModule {}\n","export class PgCategory {\n  static readonly CATEGORY_CLEAN = 'clean';\n  static readonly CATEGORY_WORKING = 'working';\n  static readonly CATEGORY_WARNING = 'warning';\n  static readonly CATEGORY_UNKNOWN = 'unknown';\n  static readonly VALID_CATEGORIES = [\n    PgCategory.CATEGORY_CLEAN,\n    PgCategory.CATEGORY_WORKING,\n    PgCategory.CATEGORY_WARNING,\n    PgCategory.CATEGORY_UNKNOWN\n  ];\n\n  states: string[];\n\n  constructor(public type: string) {\n    if (!this.isValidType()) {\n      throw new Error('Wrong placement group category type');\n    }\n\n    this.setTypeStates();\n  }\n\n  private isValidType() {\n    return PgCategory.VALID_CATEGORIES.includes(this.type);\n  }\n\n  private setTypeStates() {\n    switch (this.type) {\n      case PgCategory.CATEGORY_CLEAN:\n        this.states = ['active', 'clean'];\n        break;\n      case PgCategory.CATEGORY_WORKING:\n        this.states = [\n          'activating',\n          'backfill_wait',\n          'backfilling',\n          'creating',\n          'deep',\n          'degraded',\n          'forced_backfill',\n          'forced_recovery',\n          'peering',\n          'peered',\n          'recovering',\n          'recovery_wait',\n          'repair',\n          'scrubbing',\n          'snaptrim',\n          'snaptrim_wait'\n        ];\n        break;\n      case PgCategory.CATEGORY_WARNING:\n        this.states = [\n          'backfill_toofull',\n          'backfill_unfound',\n          'down',\n          'incomplete',\n          'inconsistent',\n          'recovery_toofull',\n          'recovery_unfound',\n          'remapped',\n          'snaptrim_error',\n          'stale',\n          'undersized'\n        ];\n        break;\n      default:\n        this.states = [];\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { CephSharedModule } from './ceph-shared.module';\nimport { PgCategory } from './pg-category.model';\n\n@Injectable({\n  providedIn: CephSharedModule\n})\nexport class PgCategoryService {\n  private categories: object;\n\n  constructor() {\n    this.categories = this.createCategories();\n  }\n\n  getAllTypes() {\n    return PgCategory.VALID_CATEGORIES;\n  }\n\n  getTypeByStates(pgStatesText: string): string {\n    const pgStates = this.getPgStatesFromText(pgStatesText);\n\n    if (pgStates.length === 0) {\n      return PgCategory.CATEGORY_UNKNOWN;\n    }\n\n    const intersections = _.zipObject(\n      PgCategory.VALID_CATEGORIES,\n      PgCategory.VALID_CATEGORIES.map(\n        (category) => _.intersection(this.categories[category].states, pgStates).length\n      )\n    );\n\n    if (intersections[PgCategory.CATEGORY_WARNING] > 0) {\n      return PgCategory.CATEGORY_WARNING;\n    }\n\n    const pgWorkingStates = intersections[PgCategory.CATEGORY_WORKING];\n    if (pgStates.length > intersections[PgCategory.CATEGORY_CLEAN] + pgWorkingStates) {\n      return PgCategory.CATEGORY_UNKNOWN;\n    }\n\n    return pgWorkingStates ? PgCategory.CATEGORY_WORKING : PgCategory.CATEGORY_CLEAN;\n  }\n\n  private createCategories() {\n    return _.zipObject(\n      PgCategory.VALID_CATEGORIES,\n      PgCategory.VALID_CATEGORIES.map((category) => new PgCategory(category))\n    );\n  }\n\n  private getPgStatesFromText(pgStatesText: string) {\n    const pgStates = pgStatesText\n      .replace(/[^a-z_]+/g, ' ')\n      .trim()\n      .split(' ');\n\n    return _.uniq(pgStates);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { RoleFormModel } from '~/app/core/auth/role-form/role-form.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n  constructor(private http: HttpClient) {}\n\n  list() {\n    return this.http.get('api/role');\n  }\n\n  delete(name: string) {\n    return this.http.delete(`api/role/${name}`);\n  }\n\n  get(name: string) {\n    return this.http.get(`api/role/${name}`);\n  }\n\n  create(role: RoleFormModel) {\n    return this.http.post(`api/role`, role);\n  }\n\n  clone(name: string, newName: string) {\n    return this.http.post(`api/role/${name}/clone`, { new_name: newName });\n  }\n\n  update(role: RoleFormModel) {\n    return this.http.put(`api/role/${role.name}`, role);\n  }\n\n  exists(name: string): Observable<boolean> {\n    return this.list().pipe(\n      mergeMap((roles: Array<RoleFormModel>) => {\n        const exists = roles.some((currentRole: RoleFormModel) => {\n          return currentRole.name === name;\n        });\n        return observableOf(exists);\n      })\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScopeService {\n  constructor(private http: HttpClient) {}\n\n  list() {\n    return this.http.get('ui-api/scope');\n  }\n}\n","export enum RoleFormMode {\n  editing = 'editing'\n}\n","export class RoleFormModel {\n  name: string;\n  description: string;\n  scopes_permissions: any;\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"roleForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"roleForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}\n      </div>\n        <!--Name -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"name\"\n                        cdRequiredField=\"Name\"\n                        [invalid]=\"!roleForm.controls.name.valid && roleForm.controls.name.dirty\"\n                        [invalidText]=\"nameError\"\n                        i18n>Name\n          <span [ngClass]=\"{'required': mode !== roleFormMode.editing}\"></span>\n          <input cdsText\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"name\"\n                 name=\"name\"\n                 formControlName=\"name\"\n                 [invalid]=\"!roleForm.controls.name.valid && roleForm.controls.name.dirty\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #nameError>\n          <span *ngIf=\"roleForm.showError('name', formDir, 'required')\">\n            <ng-container i18n>\n               This field is required.\n            </ng-container>\n          </span>\n          <span *ngIf=\"roleForm.showError('name', formDir, 'notUnique')\">\n            <ng-container i18n>\n                The chosen name is already in use.\n            </ng-container>\n          </span>\n        </ng-template>\n      </div>\n    <!-- Description -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"name\"\n                        i18n>Description\n        <input cdsText\n               type=\"text\"\n               class=\"input-field\"\n               placeholder=\"Description..\"\n               id=\"description\"\n               name=\"description\"\n               formControlName=\"description\">\n        </cds-text-label>\n      </div>\n      <!-- Permissions -->\n      <div  class=\"form-item\">\n        <cds-text-label>Permissions</cds-text-label>\n        <cd-checked-table-form [data]=\"scopes_permissions\"\n                               [columns]=\"columns\"\n                               [form]=\"roleForm\"\n                               inputField=\"scopes_permissions\"\n                               [scopes]=\"scopes\"\n                               [initialValue]=\"initialValue\"></cd-checked-table-form>\n      </div>\n      <!--Submit Button-->\n      <div class=\"form-item\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"roleForm\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                              wrappingClass=\"text-right\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin } from 'rxjs';\n\nimport { RoleService } from '~/app/shared/api/role.service';\nimport { ScopeService } from '~/app/shared/api/scope.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RoleFormMode } from './role-form-mode.enum';\nimport { RoleFormModel } from './role-form.model';\n\n@Component({\n  selector: 'cd-role-form',\n  templateUrl: './role-form.component.html',\n  styleUrls: ['./role-form.component.scss']\n})\nexport class RoleFormComponent extends CdForm implements OnInit {\n  roleForm: CdFormGroup;\n  response: RoleFormModel;\n\n  columns: CdTableColumn[];\n  scopes: Array<string> = [];\n  scopes_permissions: Array<any> = [];\n  initialValue = {};\n\n  roleFormMode = RoleFormMode;\n  mode: RoleFormMode;\n\n  action: string;\n  resource: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private roleService: RoleService,\n    private scopeService: ScopeService,\n    private notificationService: NotificationService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.resource = $localize`role`;\n    this.createForm();\n    // this.listenToChanges();\n  }\n\n  createForm() {\n    this.roleForm = new CdFormGroup({\n      name: new UntypedFormControl('', {\n        validators: [Validators.required],\n        asyncValidators: [CdValidators.unique(this.roleService.exists, this.roleService)]\n      }),\n      description: new UntypedFormControl(''),\n      scopes_permissions: new UntypedFormControl({})\n    });\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        prop: 'scope',\n        name: $localize`All`,\n        flexGrow: 2\n      },\n      {\n        prop: 'read',\n        name: $localize`Read`,\n        flexGrow: 1,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'create',\n        name: $localize`Create`,\n        flexGrow: 1,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'update',\n        name: $localize`Update`,\n        flexGrow: 1,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'delete',\n        name: $localize`Delete`,\n        flexGrow: 1,\n        cellClass: 'text-center'\n      }\n    ];\n    if (this.router.url.startsWith('/user-management/roles/edit')) {\n      this.mode = this.roleFormMode.editing;\n      this.action = this.actionLabels.EDIT;\n    } else {\n      this.action = this.actionLabels.CREATE;\n    }\n    if (this.mode === this.roleFormMode.editing) {\n      this.initEdit();\n    } else {\n      this.initCreate();\n    }\n  }\n\n  initCreate() {\n    // Load the scopes and initialize the default scopes/permissions data.\n    this.scopeService.list().subscribe((scopes: Array<string>) => {\n      this.scopes = scopes;\n\n      this.loadingReady();\n    });\n  }\n\n  initEdit() {\n    // Disable the 'Name' input field.\n    this.roleForm.get('name').disable();\n    // Load the scopes and the role data.\n    this.route.params.subscribe((params: { name: string }) => {\n      const observables = [];\n      observables.push(this.scopeService.list());\n      observables.push(this.roleService.get(params.name));\n      observableForkJoin(observables).subscribe((resp: any[]) => {\n        this.scopes = resp[0];\n        ['name', 'description', 'scopes_permissions'].forEach((key) =>\n          this.roleForm.get(key).setValue(resp[1][key])\n        );\n        this.initialValue = resp[1]['scopes_permissions'];\n\n        this.loadingReady();\n      });\n    });\n  }\n\n  getRequest(): RoleFormModel {\n    const roleFormModel = new RoleFormModel();\n    ['name', 'description', 'scopes_permissions'].forEach(\n      (key) => (roleFormModel[key] = this.roleForm.get(key).value)\n    );\n    return roleFormModel;\n  }\n\n  createAction() {\n    const roleFormModel = this.getRequest();\n    this.roleService.create(roleFormModel).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Created role '${roleFormModel.name}'`\n        );\n        this.router.navigate(['/user-management/roles']);\n      },\n      () => {\n        this.roleForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n\n  editAction() {\n    const roleFormModel = this.getRequest();\n    this.roleService.update(roleFormModel).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated role '${roleFormModel.name}'`\n        );\n        this.router.navigate(['/user-management/roles']);\n      },\n      () => {\n        this.roleForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n\n  submit() {\n    if (this.mode === this.roleFormMode.editing) {\n      this.editAction();\n    } else {\n      this.createAction();\n    }\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <cd-table [data]=\"scopes_permissions\"\n            [columns]=\"columns\"\n            columnMode=\"flex\"\n            [toolHeader]=\"false\"\n            [autoReload]=\"false\"\n            [autoSave]=\"false\"\n            [footer]=\"false\"\n            [limit]=\"0\">\n  </cd-table>\n</ng-container>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\n\n@Component({\n  selector: 'cd-role-details',\n  templateUrl: './role-details.component.html',\n  styleUrls: ['./role-details.component.scss']\n})\nexport class RoleDetailsComponent implements OnChanges, OnInit {\n  @Input()\n  selection: any;\n  @Input()\n  scopes: Array<string>;\n  selectedItem: any;\n\n  columns: CdTableColumn[];\n  scopes_permissions: Array<any> = [];\n\n  ngOnInit() {\n    this.columns = [\n      {\n        prop: 'scope',\n        name: $localize`Scope`,\n        flexGrow: 2\n      },\n      {\n        prop: 'read',\n        name: $localize`Read`,\n        flexGrow: 1,\n        cellClass: 'text-left',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        prop: 'create',\n        name: $localize`Create`,\n        flexGrow: 1,\n        cellClass: 'text-left',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        prop: 'update',\n        name: $localize`Update`,\n        flexGrow: 1,\n        cellClass: 'text-left',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        prop: 'delete',\n        name: $localize`Delete`,\n        flexGrow: 1,\n        cellClass: 'text-left',\n        cellTransformation: CellTemplate.checkIcon\n      }\n    ];\n  }\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.selectedItem = this.selection;\n      // Build the scopes/permissions data used by the data table.\n      const scopes_permissions: any[] = [];\n      _.each(this.scopes, (scope) => {\n        const scope_permission: any = { read: false, create: false, update: false, delete: false };\n        scope_permission['scope'] = scope;\n        if (scope in this.selectedItem['scopes_permissions']) {\n          _.each(this.selectedItem['scopes_permissions'][scope], (permission) => {\n            scope_permission[permission] = true;\n          });\n        }\n        scopes_permissions.push(scope_permission);\n      });\n      this.scopes_permissions = scopes_permissions;\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'cd-user-tabs',\n  templateUrl: './user-tabs.component.html',\n  styleUrls: ['./user-tabs.component.scss']\n})\nexport class UserTabsComponent {\n  url: string;\n\n  constructor(public router: Router) {}\n}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/user-management/users\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Users</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/user-management/roles\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Roles</a>\n  </li>\n</ul>\n","<cd-user-tabs></cd-user-tabs>\n\n<cd-table [data]=\"roles\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"name\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (fetchData)=\"getRoles()\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-role-details *cdTableDetail\n                   [selection]=\"expandedRow\"\n                   [scopes]=\"scopes\">\n  </cd-role-details>\n</cd-table>\n","import { Component, OnInit } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { forkJoin } from 'rxjs';\n\nimport { RoleService } from '~/app/shared/api/role.service';\nimport { ScopeService } from '~/app/shared/api/scope.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { EmptyPipe } from '~/app/shared/pipes/empty.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\n\nconst BASE_URL = 'user-management/roles';\n\n@Component({\n  selector: 'cd-role-list',\n  templateUrl: './role-list.component.html',\n  styleUrls: ['./role-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class RoleListComponent extends ListWithDetails implements OnInit {\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[];\n  roles: Array<any>;\n  scopes: Array<string>;\n  selection = new CdTableSelection();\n\n  modalRef: NgbModalRef;\n\n  constructor(\n    private roleService: RoleService,\n    private scopeService: ScopeService,\n    private emptyPipe: EmptyPipe,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    private urlBuilder: URLBuilderService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().user;\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      name: this.actionLabels.CREATE\n    };\n    const cloneAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.clone,\n      name: this.actionLabels.CLONE,\n      disable: () => !this.selection.hasSingleSelection,\n      click: () => this.cloneRole()\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      disable: () => !this.selection.hasSingleSelection || this.selection.first().system,\n      routerLink: () =>\n        this.selection.first() && this.urlBuilder.getEdit(this.selection.first().name),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      disable: () => !this.selection.hasSingleSelection || this.selection.first().system,\n      click: () => this.deleteRoleModal(),\n      name: this.actionLabels.DELETE\n    };\n    this.tableActions = [addAction, cloneAction, editAction, deleteAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 3\n      },\n      {\n        name: $localize`Description`,\n        prop: 'description',\n        flexGrow: 5,\n        pipe: this.emptyPipe\n      },\n      {\n        name: $localize`System Role`,\n        prop: 'system',\n        cellClass: 'text-left',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.checkIcon\n      }\n    ];\n  }\n\n  getRoles() {\n    forkJoin([this.roleService.list(), this.scopeService.list()]).subscribe(\n      (data: [Array<any>, Array<string>]) => {\n        this.roles = data[0];\n        this.scopes = data[1];\n      }\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteRole(role: string) {\n    this.roleService.delete(role).subscribe(\n      () => {\n        this.getRoles();\n        this.modalService.dismissAll();\n        this.notificationService.show(NotificationType.success, $localize`Deleted role '${role}'`);\n      },\n      () => {\n        this.modalRef.componentInstance.stopLoadingSpinner();\n      }\n    );\n  }\n\n  deleteRoleModal() {\n    const name = this.selection.first().name;\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Role',\n      itemNames: [name],\n      submitAction: () => this.deleteRole(name)\n    });\n  }\n\n  cloneRole() {\n    const name = this.selection.first().name;\n    this.modalRef = this.modalService.show(FormModalComponent, {\n      fields: [\n        {\n          type: 'text',\n          name: 'newName',\n          value: `${name}_clone`,\n          label: $localize`New name`,\n          required: true\n        }\n      ],\n      titleText: $localize`Clone Role`,\n      submitButtonText: $localize`Clone Role`,\n      onSubmit: (values: object) => {\n        this.roleService.clone(name, values['newName']).subscribe(() => {\n          this.getRoles();\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Cloned role '${values['newName']}' from '${name}'`\n          );\n        });\n      }\n    });\n  }\n}\n","export enum UserFormMode {\n  editing = 'editing'\n}\n","export class UserFormModel {\n  username: string;\n  password: string;\n  pwdExpirationDate: number;\n  name: string;\n  email: string;\n  roles: Array<string>;\n  enabled: boolean;\n  pwdUpdateRequired: boolean;\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form #frm=\"ngForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"userForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}\n      </div>\n      <!-- UserName -->\n      <div class=\"form-item\">\n        <cds-text-label labelInputID=\"username\"\n                        cdRequiredField=\"Username\"\n                        [invalid]=\"!userForm.controls.username.valid && userForm.controls.username.dirty\"\n                        [invalidText]=\"usernameError\"\n                        i18n>Username\n          <input cdsText\n                 placeholder=\"Username...\"\n                 i18n-placeholder\n                 id=\"username\"\n                 formControlName=\"username\"\n                 [invalid]=\"!userForm.controls.username.valid && userForm.controls.username.dirty\"\n                 autofocus\n                 ngbTooltip=\"White spaces at the beginning and end will be trimmed\"\n                 i18n-ngbTooltip\n                 cdTrim>\n        </cds-text-label>\n        <ng-template #usernameError>\n          <span *ngIf=\"userForm.showError('username', formDir, 'required')\">\n            <ng-container i18n>\n             This field is required.\n            </ng-container>\n          </span>\n          <span *ngIf=\"userForm.showError('username', formDir, 'notUnique')\">\n            <ng-container i18n>\n              The username already exists.\n            </ng-container>\n          </span>\n        </ng-template>\n      </div>\n      <!-- Password -->\n      <div class=\"form-item\">\n        <cds-password-label labelInputID=\"password\"\n                            label=\"Password...\"\n                            [invalid]=\"!userForm.controls.password.valid && userForm.controls.password.dirty\"\n                            [invalidText]=\"passwordError\"\n                            i18n>Password\n        <cd-helper *ngIf=\"passwordPolicyHelpText.length > 0\"\n                    class=\"text-pre-wrap\"\n                    html=\"{{ passwordPolicyHelpText }}\">\n        </cd-helper>\n        <input cdsPassword\n               type=\"password\"\n               placeholder=\"Password...\"\n               id=\"password\"\n               autocomplete=\"new-password\"\n               formControlName=\"password\"\n               >\n        </cds-password-label>\n        <ng-template #passwordError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('password', formDir, 'match')\"\n                i18n>Password confirmation doesn't match the password.\n          </span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('password', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('password', formDir, 'passwordPolicy')\">\n            {{ passwordValuation }}\n          </span>\n        </ng-template>\n      </div>\n\n      <!-- Confirm password -->\n      <div class=\"form-item\">\n        <cds-password-label labelInputID=\"confirmpassword\"\n                            label=\"Confirm password...\"\n                            [invalid]=\"!userForm.controls.confirmpassword.valid && userForm.controls.confirmpassword.dirty\"\n                            [invalidText]=\"confirmpasswordError\"\n                            i18n> Confirm password\n          <input cdsPassword\n                 type=\"password\"\n                 placeholder=\"Confirm password...\"\n                 id=\"confirmpassword\"\n                 formControlName=\"confirmpassword\">\n        </cds-password-label>\n        <ng-template #confirmpasswordError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('confirmpassword', formDir, 'match')\"\n                i18n>Password confirmation doesn't match the password.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('confirmpassword', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n      <!-- Password expiration date -->\n      <div class=\"form-item\"\n           *ngIf=\"!authStorageService.isSSO()\">\n        <cds-text-label  [ngClass]=\"{'required': pwdExpirationSettings.pwdExpirationSpan > 0}\">{{'Password Expiration Date'}}\n          <cd-helper class=\"text-pre-wrap\"\n                     *ngIf=\"pwdExpirationSettings.pwdExpirationSpan == 0\">\n            <span>\n                The Dashboard setting defining the expiration interval of\n                passwords is currently set to <strong>0</strong>. This means\n                if a date is set, the user password will only expire once.\n            </span>\n            <span>Consider configuring the Dashboard setting\n              <a routerLink=\"/mgr-modules/edit/dashboard\"\n                 class=\"alert-link\">USER_PWD_EXPIRATION_SPAN</a>\n                  in order to let passwords expire periodically.\n            </span>\n          </cd-helper>\n        <cd-date-time-picker [control]=\"userForm.get('pwdExpirationDate')\"\n                             placeHolder=\"Password expiration date\"\n                             [hasTime]=\"false\"\n                             [defaultDate]=\"passwordexp\"\n                             i18n-name\n                             >\n        </cd-date-time-picker>\n      </cds-text-label>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"userForm.showError('pwdExpirationDate', formDir, 'required')\"\n              i18n>This field is required.\n        </span>\n      </div>\n      <!--Full Name-->\n      <div class=\"form-item\">\n        <cds-text-label for=\"name\"\n                        i18n> Full Name\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Full Name...\"\n                 id=\"name\"\n                 formControlName=\"name\">\n        </cds-text-label>\n      </div>\n      <!-- Email -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"email\"\n                        [invalid]=\"!userForm.controls.email.valid && userForm.controls.email.dirty\"\n                        [invalidText]=\"emailError\"\n                        i18n>\n          Email\n          <input cdsText\n                 type=\"email\"\n                 placeholder=\"Email...\"\n                 id=\"email\"\n                 formControlName=\"email\">\n        </cds-text-label>\n        <ng-template #emailError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"userForm.showError('email', formDir, 'email')\"\n                i18n>Invalid email.\n          </span>\n        </ng-template>\n      </div>\n      <!-- Roles -->\n      <div class=\"form-item\"\n           *ngIf=\"allRoles\">\n        <cds-combo-box label=\"Roles\"\n                       type=\"multi\"\n                       selectionFeedback=\"top-after-reopen\"\n                       for=\"roles\"\n                       formControlName=\"roles\"\n                       id=\"roles\"\n                       placeholder=\"Select Roles...\"\n                       i18n-placeholder\n                       [appendInline]=\"true\"\n                       [items]=\"allRoles\"\n                       itemValueKey=\"name\"\n                       i18n>\n          <cds-dropdown-list></cds-dropdown-list>\n        </cds-combo-box>\n      </div>\n      <!-- Enabled -->\n      <div class=\"form-item\"\n           *ngIf=\"!isCurrentUser()\">\n        <cds-checkbox id=\"enabled\"\n                      formControlName=\"enabled\"\n                      name=\"enabled\"\n                      i18n>Enabled\n        </cds-checkbox>\n      </div>\n      <!-- Force change password -->\n      <div class=\"form-item\"\n           *ngIf=\"!isCurrentUser() && !authStorageService.isSSO()\">\n        <cds-checkbox id=\"pwdUpdateRequired\"\n                      formControlName=\"pwdUpdateRequired\"\n                      name=\"pwdUpdateRequired\"\n                      i18n>User must change password at next login\n        </cds-checkbox>\n      </div>\n      <!--Submit Button-->\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"userForm\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            wrappingClass=\"text-right\">\n      </cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n\n<ng-template #removeSelfUserReadUpdatePermissionTpl>\n  <p><strong i18n>You are about to remove \"user read / update\" permissions from your own user.</strong></p>\n  <br>\n  <p i18n>If you continue, you will no longer be able to add or remove roles from any user.</p>\n\n  <ng-container i18n>Are you sure you want to continue?</ng-container>\n</ng-template>\n\n<ng-template #popContent>\n  <cd-date-time-picker [control]=\"userForm.get('pwdExpirationDate')\"\n                       [hasTime]=\"false\"></cd-date-time-picker>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { forkJoin as observableForkJoin } from 'rxjs';\n\nimport { AuthService } from '~/app/shared/api/auth.service';\nimport { RoleService } from '~/app/shared/api/role.service';\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { UserService } from '~/app/shared/api/user.service';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdPwdExpirationSettings } from '~/app/shared/models/cd-pwd-expiration-settings';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PasswordPolicyService } from '~/app/shared/services/password-policy.service';\nimport { UserFormMode } from './user-form-mode.enum';\nimport { UserFormRoleModel } from './user-form-role.model';\nimport { UserFormModel } from './user-form.model';\n\n@Component({\n  selector: 'cd-user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent extends CdForm implements OnInit {\n  @ViewChild('removeSelfUserReadUpdatePermissionTpl', { static: true })\n  removeSelfUserReadUpdatePermissionTpl: TemplateRef<any>;\n\n  modalRef: NgbModalRef;\n\n  userForm: CdFormGroup;\n  response: UserFormModel;\n\n  userFormMode = UserFormMode;\n  mode: UserFormMode;\n  allRoles: Array<UserFormRoleModel>;\n  messages = new SelectMessages({ empty: $localize`There are no roles.` });\n  action: string;\n  resource: string;\n  passwordPolicyHelpText = '';\n  passwordStrengthLevelClass: string;\n  passwordValuation: string;\n  icons = Icons;\n  pwdExpirationSettings: CdPwdExpirationSettings;\n  pwdExpirationFormat = 'YYYY-MM-DD';\n  selectedRole: string[];\n  passwordexp: boolean = false;\n  constructor(\n    private authService: AuthService,\n    private authStorageService: AuthStorageService,\n    private route: ActivatedRoute,\n    public router: Router,\n    private modalService: ModalCdsService,\n    private roleService: RoleService,\n    private userService: UserService,\n    private notificationService: NotificationService,\n    public actionLabels: ActionLabelsI18n,\n    private passwordPolicyService: PasswordPolicyService,\n    private formBuilder: CdFormBuilder,\n    private settingsService: SettingsService\n  ) {\n    super();\n    this.resource = $localize`user`;\n    this.createForm();\n    this.messages = new SelectMessages({ empty: $localize`There are no roles.` });\n  }\n\n  createForm() {\n    this.passwordPolicyService.getHelpText().subscribe((helpText: string) => {\n      this.passwordPolicyHelpText = helpText;\n    });\n    this.userForm = this.formBuilder.group(\n      {\n        username: [\n          '',\n          [Validators.required],\n          [CdValidators.unique(this.userService.validateUserName, this.userService)]\n        ],\n        name: [''],\n        password: [\n          '',\n          [],\n\n          [\n            CdValidators.passwordPolicy(\n              this.userService,\n              () => this.userForm.getValue('username'),\n              (_valid: boolean, credits: number, valuation: string) => {\n                this.passwordStrengthLevelClass = this.passwordPolicyService.mapCreditsToCssClass(\n                  credits\n                );\n                this.passwordValuation = _.defaultTo(valuation, '');\n              }\n            )\n          ]\n        ],\n        confirmpassword: [''],\n        pwdExpirationDate: [''],\n        email: ['', [CdValidators.email]],\n        roles: [[]],\n        enabled: [true, [Validators.required]],\n        pwdUpdateRequired: [true]\n      },\n      {\n        validators: [CdValidators.match('password', 'confirmpassword')]\n      }\n    );\n  }\n\n  ngOnInit() {\n    if (this.router.url.startsWith('/user-management/users/edit')) {\n      this.mode = this.userFormMode.editing;\n      this.action = this.actionLabels.EDIT;\n      this.passwordexp = false;\n    } else {\n      this.action = this.actionLabels.CREATE;\n      this.passwordexp = true;\n    }\n\n    const observables = [this.roleService.list(), this.settingsService.getStandardSettings()];\n    observableForkJoin(observables).subscribe(\n      (result: [UserFormRoleModel[], CdPwdExpirationSettings]) => {\n        this.allRoles = _.map(result[0], (role) => {\n          role.enabled = true;\n          role.content = `${role.name}, ${role.description}`;\n          return role;\n        });\n        this.pwdExpirationSettings = new CdPwdExpirationSettings(result[1]);\n\n        if (this.mode === this.userFormMode.editing) {\n          this.initEdit();\n        } else {\n          if (this.pwdExpirationSettings.pwdExpirationSpan > 0) {\n            const pwdExpirationDateField = this.userForm.get('pwdExpirationDate');\n            const expirationDate = moment();\n            expirationDate.add(this.pwdExpirationSettings.pwdExpirationSpan, 'day');\n            pwdExpirationDateField.setValue(expirationDate.format(this.pwdExpirationFormat));\n            pwdExpirationDateField.setValidators([Validators.required]);\n          }\n\n          this.loadingReady();\n        }\n      }\n    );\n  }\n\n  initEdit() {\n    this.disableForEdit();\n    this.route.params.subscribe((params: { username: string }) => {\n      const username = params.username;\n      this.userService.get(username).subscribe((userFormModel: UserFormModel) => {\n        this.response = _.cloneDeep(userFormModel);\n        this.setResponse(userFormModel);\n        this.loadingReady();\n      });\n    });\n  }\n\n  disableForEdit() {\n    this.userForm.get('username').disable();\n  }\n\n  setResponse(response: UserFormModel) {\n    ['username', 'name', 'email', 'roles', 'enabled', 'pwdUpdateRequired'].forEach((key) =>\n      this.userForm.get(key).setValue(response[key])\n    );\n    const expirationDate = response['pwdExpirationDate'];\n\n    if (expirationDate) {\n      this.passwordexp = false;\n      this.userForm\n        .get('pwdExpirationDate')\n        .setValue(moment(expirationDate * 1000).format(this.pwdExpirationFormat));\n    } else {\n      this.passwordexp = true;\n    }\n  }\n\n  getRequest(): UserFormModel {\n    const userFormModel = new UserFormModel();\n\n    ['username', 'password', 'name', 'email', 'roles', 'enabled', 'pwdUpdateRequired'].forEach(\n      (key) => {\n        userFormModel[key] = this.userForm.get(key).value;\n      }\n    );\n    const expirationDate = this.userForm.get('pwdExpirationDate').value;\n    if (expirationDate) {\n      this.passwordexp = false;\n      const mom = moment(expirationDate, this.pwdExpirationFormat);\n      if (\n        this.mode !== this.userFormMode.editing ||\n        this.response.pwdExpirationDate !== mom.unix()\n      ) {\n        mom.set({ hour: 23, minute: 59, second: 59 });\n      }\n      userFormModel['pwdExpirationDate'] = mom.unix();\n    }\n    return userFormModel;\n  }\n\n  createAction() {\n    const userFormModel = this.getRequest();\n    this.userService.create(userFormModel).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Created user '${userFormModel.username}'`\n        );\n        this.router.navigate(['/user-management/users']);\n      },\n      () => {\n        this.userForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n\n  editAction() {\n    if (this.isUserRemovingNeededRolePermissions()) {\n      const initialState = {\n        titleText: $localize`Update user`,\n        buttonText: $localize`Continue`,\n        bodyTpl: this.removeSelfUserReadUpdatePermissionTpl,\n        onSubmit: () => {\n          this.modalRef.close();\n          this.doEditAction();\n        },\n        onCancel: () => {\n          this.userForm.setErrors({ cdSubmitButton: true });\n          this.userForm.get('roles').reset(this.userForm.get('roles').value);\n        }\n      };\n      this.modalRef = this.modalService.show(ConfirmationModalComponent, initialState);\n    } else {\n      this.doEditAction();\n    }\n  }\n\n  public isCurrentUser(): boolean {\n    return this.authStorageService.getUsername() === this.userForm.getValue('username');\n  }\n\n  private isUserChangingRoles(): boolean {\n    const isCurrentUser = this.isCurrentUser();\n    return (\n      isCurrentUser &&\n      this.response &&\n      !_.isEqual(this.response.roles, this.userForm.getValue('roles'))\n    );\n  }\n\n  private isUserRemovingNeededRolePermissions(): boolean {\n    const isCurrentUser = this.isCurrentUser();\n    return isCurrentUser && !this.hasUserReadUpdatePermissions(this.userForm.getValue('roles'));\n  }\n\n  private hasUserReadUpdatePermissions(roles: Array<string> = []) {\n    for (const role of this.allRoles) {\n      if (roles.indexOf(role.name) !== -1 && role.scopes_permissions['user']) {\n        const userPermissions = role.scopes_permissions['user'];\n        return ['read', 'update'].every((permission) => {\n          return userPermissions.indexOf(permission) !== -1;\n        });\n      }\n    }\n    return false;\n  }\n\n  private doEditAction() {\n    const userFormModel = this.getRequest();\n    this.userService.update(userFormModel).subscribe(\n      () => {\n        if (this.isUserChangingRoles()) {\n          this.authService.logout(() => {\n            this.notificationService.show(\n              NotificationType.info,\n              $localize`You were automatically logged out because your roles have been changed.`\n            );\n          });\n        } else {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Updated user '${userFormModel.username}'`\n          );\n          this.router.navigate(['/user-management/users']);\n        }\n      },\n      () => {\n        this.userForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n\n  clearExpirationDate() {\n    this.userForm.get('pwdExpirationDate').setValue(undefined);\n  }\n\n  submit() {\n    if (this.mode === this.userFormMode.editing) {\n      this.editAction();\n    } else {\n      this.createAction();\n    }\n  }\n}\n","<cd-user-tabs></cd-user-tabs>\n\n<cd-table [data]=\"users\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"username\"\n          selectionType=\"single\"\n          (fetchData)=\"getUsers()\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n\n<ng-template #userRolesTpl\n             let-value=\"data.value\">\n  <span *ngFor=\"let role of value; last as isLast\">\n    {{ role }}{{ !isLast ? \", \" : \"\" }}\n  </span>\n</ng-template>\n\n<ng-template #warningTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <div [class.border-danger]=\"row.remainingDays < this.expirationDangerAlert\"\n       [class.border-warning]=\"row.remainingDays < this.expirationWarningAlert && row.remainingDays >= this.expirationDangerAlert\"\n       class=\"border-margin\">\n    <div class=\"warning-content\"> {{ value }} </div>\n  </div>\n</ng-template>\n\n<ng-template #durationTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <i *ngIf=\"row.remainingDays < this.expirationWarningAlert\"\n     i18n-title\n     title=\"User's password is about to expire\"\n     [class.icon-danger-color]=\"row.remainingDays < this.expirationDangerAlert\"\n     [class.icon-warning-color]=\"row.remainingDays < this.expirationWarningAlert && row.remainingDays >= this.expirationDangerAlert\"\n     class=\"{{ icons.warning }}\"></i>\n  <span title=\"{{ value | cdDate }}\">{{ row.remainingTimeWithoutSeconds / 1000 | duration }}</span>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { UserService } from '~/app/shared/api/user.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { EmptyPipe } from '~/app/shared/pipes/empty.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\n\nconst BASE_URL = 'user-management/users';\n\n@Component({\n  selector: 'cd-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class UserListComponent implements OnInit {\n  @ViewChild('userRolesTpl', { static: true })\n  userRolesTpl: TemplateRef<any>;\n  @ViewChild('warningTpl', { static: true })\n  warningTpl: TemplateRef<any>;\n  @ViewChild('durationTpl', { static: true })\n  durationTpl: TemplateRef<any>;\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[];\n  users: Array<any>;\n  expirationWarningAlert: number;\n  expirationDangerAlert: number;\n  selection = new CdTableSelection();\n  icons = Icons;\n\n  modalRef: NgbModalRef;\n\n  constructor(\n    private userService: UserService,\n    private emptyPipe: EmptyPipe,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    private authStorageService: AuthStorageService,\n    private urlBuilder: URLBuilderService,\n    private settingsService: SettingsService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    this.permission = this.authStorageService.getPermissions().user;\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      name: this.actionLabels.CREATE\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () =>\n        this.selection.first() && this.urlBuilder.getEdit(this.selection.first().username),\n      name: this.actionLabels.EDIT\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteUserModal(),\n      name: this.actionLabels.DELETE\n    };\n    this.tableActions = [addAction, editAction, deleteAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Username`,\n        prop: 'username',\n        flexGrow: 1,\n        cellTemplate: this.warningTpl\n      },\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1,\n        pipe: this.emptyPipe\n      },\n      {\n        name: $localize`Email`,\n        prop: 'email',\n        flexGrow: 1,\n        pipe: this.emptyPipe\n      },\n      {\n        name: $localize`Roles`,\n        prop: 'roles',\n        flexGrow: 1,\n        cellTemplate: this.userRolesTpl\n      },\n      {\n        name: $localize`Enabled`,\n        prop: 'enabled',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        name: $localize`Password expires`,\n        prop: 'pwdExpirationDate',\n        flexGrow: 1,\n        cellTemplate: this.durationTpl\n      }\n    ];\n    const settings: string[] = ['USER_PWD_EXPIRATION_WARNING_1', 'USER_PWD_EXPIRATION_WARNING_2'];\n    this.settingsService.getValues(settings).subscribe((data) => {\n      this.expirationWarningAlert = data['USER_PWD_EXPIRATION_WARNING_1'];\n      this.expirationDangerAlert = data['USER_PWD_EXPIRATION_WARNING_2'];\n    });\n  }\n\n  getUsers() {\n    this.userService.list().subscribe((users: Array<any>) => {\n      users.forEach((user) => {\n        user['remainingTimeWithoutSeconds'] = 0;\n        if (user['pwdExpirationDate'] && user['pwdExpirationDate'] > 0) {\n          user['pwdExpirationDate'] = user['pwdExpirationDate'] * 1000;\n          user['remainingTimeWithoutSeconds'] = this.getRemainingTimeWithoutSeconds(\n            user.pwdExpirationDate\n          );\n          user['remainingDays'] = this.getRemainingDays(user.pwdExpirationDate);\n        }\n      });\n      this.users = users;\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteUser(username: string) {\n    this.userService.delete(username).subscribe(\n      () => {\n        this.getUsers();\n        this.modalService.dismissAll();\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Deleted user '${username}'`\n        );\n      },\n      () => {\n        this.modalRef.componentInstance.stopLoadingSpinner();\n      }\n    );\n  }\n\n  deleteUserModal() {\n    const sessionUsername = this.authStorageService.getUsername();\n    const username = this.selection.first().username;\n    if (sessionUsername === username) {\n      this.notificationService.show(\n        NotificationType.error,\n        $localize`Failed to delete user '${username}'`,\n        $localize`You are currently logged in as '${username}'.`\n      );\n      return;\n    }\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'User',\n      itemNames: [username],\n      submitAction: () => this.deleteUser(username)\n    });\n  }\n\n  getWarningIconClass(expirationDays: number): any {\n    if (expirationDays === null || this.expirationWarningAlert > 10) {\n      return '';\n    }\n    const remainingDays = this.getRemainingDays(expirationDays);\n    if (remainingDays <= this.expirationDangerAlert) {\n      return 'icon-danger-color';\n    } else {\n      return 'icon-warning-color';\n    }\n  }\n\n  getWarningClass(expirationDays: number): any {\n    if (expirationDays === null || this.expirationWarningAlert > 10) {\n      return '';\n    }\n    const remainingDays = this.getRemainingDays(expirationDays);\n    if (remainingDays <= this.expirationDangerAlert) {\n      return 'border-danger';\n    } else {\n      return 'border-warning';\n    }\n  }\n\n  getRemainingDays(time: number): number {\n    if (time === undefined || time == null) {\n      return undefined;\n    }\n    if (time < 0) {\n      return 0;\n    }\n    const toDays = 1000 * 60 * 60 * 24;\n    return Math.max(0, Math.floor(this.getRemainingTime(time) / toDays));\n  }\n\n  getRemainingTimeWithoutSeconds(time: number): number {\n    const withSeconds = this.getRemainingTime(time);\n    return Math.floor(withSeconds / (1000 * 60)) * 60 * 1000;\n  }\n\n  getRemainingTime(time: number): number {\n    return time - Date.now();\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,2A14.1725,14.1725,0,0,0,2,16,14.1725,14.1725,0,0,0,16,30,14.1725,14.1725,0,0,0,30,16,14.1725,14.1725,0,0,0,16,2Zm8,15H17v7H15V17H8V15h7V8h2v7h7Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"fill\": \"none\",\n      \"d\": \"M24 17L17 17 17 24 15 24 15 17 8 17 8 15 15 15 15 8 17 8 17 15 24 15 24 17z\",\n      \"data-icon-path\": \"inner-path\"\n    }\n  }],\n  \"name\": \"add--filled\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgbModule, NgbNavModule, NgbPopoverModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PipesModule } from '~/app/shared/pipes/pipes.module';\n\nimport { ActionLabels, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { LoginPasswordFormComponent } from './login-password-form/login-password-form.component';\nimport { LoginComponent } from './login/login.component';\nimport { RoleDetailsComponent } from './role-details/role-details.component';\nimport { RoleFormComponent } from './role-form/role-form.component';\nimport { RoleListComponent } from './role-list/role-list.component';\nimport { UserFormComponent } from './user-form/user-form.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { UserPasswordFormComponent } from './user-password-form/user-password-form.component';\nimport { UserTabsComponent } from './user-tabs/user-tabs.component';\n\nimport {\n  ButtonModule,\n  CheckboxModule,\n  DatePickerModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  ModalModule,\n  NumberModule,\n  RadioModule,\n  SelectModule,\n  UIShellModule,\n  TimePickerModule,\n  ComboBoxModule\n} from 'carbon-components-angular';\n// Icons\nimport ChevronDown from '@carbon/icons/es/chevron--down/16';\nimport Close from '@carbon/icons/es/close/32';\nimport AddFilled from '@carbon/icons/es/add--filled/32';\nimport SubtractFilled from '@carbon/icons/es/subtract--filled/32';\nimport Reset from '@carbon/icons/es/reset/32';\nimport EyeIcon from '@carbon/icons/es/view/16';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    UIShellModule,\n    InputModule,\n    GridModule,\n    ButtonModule,\n    IconModule,\n    CheckboxModule,\n    RadioModule,\n    SelectModule,\n    NumberModule,\n    ModalModule,\n    DatePickerModule,\n    TimePickerModule,\n    NgbNavModule,\n    NgbPopoverModule,\n    PipesModule,\n    RouterModule,\n    NgbModule,\n    IconModule,\n    GridModule,\n    InputModule,\n    ComboBoxModule\n  ],\n  declarations: [\n    LoginComponent,\n    LoginPasswordFormComponent,\n    RoleDetailsComponent,\n    RoleFormComponent,\n    RoleListComponent,\n    UserTabsComponent,\n    UserListComponent,\n    UserFormComponent,\n    UserPasswordFormComponent\n  ]\n})\nexport class AuthModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([ChevronDown, Close, AddFilled, SubtractFilled, Reset, EyeIcon]);\n  }\n}\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'users', pathMatch: 'full' },\n  {\n    path: 'users',\n    data: { breadcrumbs: 'Users' },\n    children: [\n      { path: '', component: UserListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: UserFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:username`,\n        component: UserFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  },\n  {\n    path: 'roles',\n    data: { breadcrumbs: 'Roles' },\n    children: [\n      { path: '', component: RoleListComponent },\n      {\n        path: URLVerbs.CREATE,\n        component: RoleFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:name`,\n        component: RoleFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [AuthModule, RouterModule.forChild(routes)]\n})\nexport class RoutedAuthModule {}\n","import { Icons } from '~/app/shared/enum/icons.enum';\n\nexport class DashboardError extends Error {\n  header: string;\n  message: string;\n  icon: string;\n}\n\nexport class DashboardNotFoundError extends DashboardError {\n  header = $localize`Page Not Found`;\n  message = $localize`Sorry, we couldn’t find what you were looking for.\n  The page you requested may have been changed or moved.`;\n  icon = Icons.warning;\n}\n\nexport class DashboardForbiddenError extends DashboardError {\n  header = $localize`Access Denied`;\n  message = $localize`Sorry, you don’t have permission to view this page or resource.`;\n  icon = Icons.lock;\n}\n\nexport class DashboardUserDeniedError extends DashboardError {\n  header = $localize`User Denied`;\n  message = $localize`Sorry, the user does not exist in Ceph.\n  You'll be logged out from the Identity Provider when you retry logging in.`;\n  icon = Icons.warning;\n}\n","export abstract class ApiClient {\n  getVersionHeaderValue(major: number, minor: number) {\n    return `application/vnd.ceph.api.v${major}.${minor}+json`;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport * as _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Credentials } from '../models/credentials';\nimport { LoginResponse } from '../models/login-response';\nimport { AuthStorageService } from '../services/auth-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(\n    private authStorageService: AuthStorageService,\n    private http: HttpClient,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  check(token: string) {\n    return this.http.post('api/auth/check', { token: token });\n  }\n\n  login(credentials: Credentials): Observable<LoginResponse> {\n    return this.http.post('api/auth', credentials).pipe(\n      tap((resp: LoginResponse) => {\n        this.authStorageService.set(\n          resp.username,\n          resp.permissions,\n          resp.sso,\n          resp.pwdExpirationDate,\n          resp.pwdUpdateRequired\n        );\n      })\n    );\n  }\n\n  logout(callback: Function = null) {\n    return this.http.post('api/auth/logout', null).subscribe((resp: any) => {\n      this.authStorageService.remove();\n      if (resp.protocol == 'oauth2') {\n        return window.location.replace(resp.redirect_url);\n      }\n      const url = _.get(this.route.snapshot.queryParams, 'returnUrl', '/login');\n      this.router.navigate([url], { skipLocationChange: true });\n      if (callback) {\n        callback();\n      }\n      window.location.replace(resp.redirect_url);\n    });\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ApiClient } from '~/app/shared/api/api-client';\nimport { Daemon } from '../models/daemon.interface';\nimport { CephServiceSpec } from '../models/service.interface';\nimport { PaginateObservable } from './paginate.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephServiceService extends ApiClient {\n  private url = 'api/service';\n\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  list(httpParams: HttpParams, serviceName?: string): PaginateObservable<CephServiceSpec[]> {\n    const options = {\n      headers: { Accept: this.getVersionHeaderValue(2, 0) },\n      params: httpParams\n    };\n    options['observe'] = 'response';\n    if (serviceName) {\n      options.params = options.params.append('service_name', serviceName);\n    }\n    return new PaginateObservable<CephServiceSpec[]>(\n      this.http.get<CephServiceSpec[]>(this.url, options)\n    );\n  }\n\n  getDaemons(serviceName?: string): Observable<Daemon[]> {\n    return this.http.get<Daemon[]>(`${this.url}/${serviceName}/daemons`);\n  }\n\n  create(serviceSpec: { [key: string]: any }) {\n    const serviceName = serviceSpec['service_id']\n      ? `${serviceSpec['service_type']}.${serviceSpec['service_id']}`\n      : serviceSpec['service_type'];\n    return this.http.post(\n      this.url,\n      {\n        service_name: serviceName,\n        service_spec: serviceSpec\n      },\n      { observe: 'response' }\n    );\n  }\n\n  update(serviceSpec: { [key: string]: any }) {\n    const serviceName = serviceSpec['service_id']\n      ? `${serviceSpec['service_type']}.${serviceSpec['service_id']}`\n      : serviceSpec['service_type'];\n    return this.http.put(\n      `${this.url}/${serviceName}`,\n      {\n        service_name: serviceName,\n        service_spec: serviceSpec\n      },\n      { observe: 'response' }\n    );\n  }\n\n  delete(serviceName: string) {\n    return this.http.delete(`${this.url}/${serviceName}`, { observe: 'response' });\n  }\n\n  getKnownTypes(): Observable<string[]> {\n    return this.http.get<string[]>(`${this.url}/known_types`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport _ from 'lodash';\nimport { mapTo, catchError } from 'rxjs/operators';\nimport { CephfsSubvolumeGroup } from '../models/cephfs-subvolume-group.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephfsSubvolumeGroupService {\n  baseURL = 'api/cephfs/subvolume/group';\n\n  constructor(private http: HttpClient) {}\n\n  get(volName: string, info = true): Observable<CephfsSubvolumeGroup[]> {\n    return this.http.get<CephfsSubvolumeGroup[]>(`${this.baseURL}/${volName}`, {\n      params: {\n        info: info\n      }\n    });\n  }\n\n  create(\n    volName: string,\n    groupName: string,\n    poolName: string,\n    size: string,\n    uid: number,\n    gid: number,\n    mode: string\n  ) {\n    return this.http.post(\n      this.baseURL,\n      {\n        vol_name: volName,\n        group_name: groupName,\n        pool_layout: poolName,\n        size: size,\n        uid: uid,\n        gid: gid,\n        mode: mode\n      },\n      { observe: 'response' }\n    );\n  }\n\n  info(volName: string, groupName: string) {\n    return this.http.get(`${this.baseURL}/${volName}/info`, {\n      params: {\n        group_name: groupName\n      }\n    });\n  }\n\n  exists(groupName: string, volName: string) {\n    return this.info(volName, groupName).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return of(false);\n      })\n    );\n  }\n\n  update(volName: string, groupName: string, size: string) {\n    return this.http.put(`${this.baseURL}/${volName}`, {\n      group_name: groupName,\n      size: size\n    });\n  }\n\n  remove(volName: string, groupName: string) {\n    return this.http.delete(`${this.baseURL}/${volName}`, {\n      params: {\n        group_name: groupName\n      },\n      observe: 'response'\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CephfsSubvolume, SubvolumeSnapshot } from '../models/cephfs-subvolume.model';\nimport { Observable, of } from 'rxjs';\nimport { catchError, mapTo } from 'rxjs/operators';\nimport _ from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephfsSubvolumeService {\n  baseURL = 'api/cephfs/subvolume';\n\n  constructor(private http: HttpClient) {}\n\n  get(fsName: string, subVolumeGroupName: string = '', info = true): Observable<CephfsSubvolume[]> {\n    return this.http.get<CephfsSubvolume[]>(`${this.baseURL}/${fsName}`, {\n      params: {\n        group_name: subVolumeGroupName,\n        info: info\n      }\n    });\n  }\n\n  create(\n    fsName: string,\n    subVolumeName: string,\n    subVolumeGroupName: string,\n    poolName: string,\n    size: string,\n    uid: number,\n    gid: number,\n    mode: string,\n    namespace: boolean\n  ) {\n    return this.http.post(\n      this.baseURL,\n      {\n        vol_name: fsName,\n        subvol_name: subVolumeName,\n        group_name: subVolumeGroupName,\n        pool_layout: poolName,\n        size: size,\n        uid: uid,\n        gid: gid,\n        mode: mode,\n        namespace_isolated: namespace\n      },\n      { observe: 'response' }\n    );\n  }\n\n  info(fsName: string, subVolumeName: string, subVolumeGroupName: string = '') {\n    return this.http.get(`${this.baseURL}/${fsName}/info`, {\n      params: {\n        subvol_name: subVolumeName,\n        group_name: subVolumeGroupName\n      }\n    });\n  }\n\n  remove(\n    fsName: string,\n    subVolumeName: string,\n    subVolumeGroupName: string = '',\n    retainSnapshots: boolean = false\n  ) {\n    return this.http.delete(`${this.baseURL}/${fsName}`, {\n      params: {\n        subvol_name: subVolumeName,\n        group_name: subVolumeGroupName,\n        retain_snapshots: retainSnapshots\n      },\n      observe: 'response'\n    });\n  }\n\n  exists(subVolumeName: string, fsName: string, subVolumeGroupName: string = '') {\n    return this.info(fsName, subVolumeName, subVolumeGroupName).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return of(false);\n      })\n    );\n  }\n\n  existsInFs(fsName: string, groupName = ''): Observable<boolean> {\n    return this.http.get<boolean>(`${this.baseURL}/${fsName}/exists`, {\n      params: {\n        group_name: groupName\n      }\n    });\n  }\n\n  update(fsName: string, subVolumeName: string, size: string, subVolumeGroupName: string = '') {\n    return this.http.put(`${this.baseURL}/${fsName}`, {\n      subvol_name: subVolumeName,\n      size: size,\n      group_name: subVolumeGroupName\n    });\n  }\n\n  getSnapshots(\n    fsName: string,\n    subVolumeName: string,\n    groupName = ''\n  ): Observable<SubvolumeSnapshot[]> {\n    return this.http.get<SubvolumeSnapshot[]>(\n      `${this.baseURL}/snapshot/${fsName}/${subVolumeName}`,\n      {\n        params: {\n          group_name: groupName\n        }\n      }\n    );\n  }\n\n  getSnapshotInfo(snapshotName: string, fsName: string, subVolumeName: string, groupName = '') {\n    return this.http.get(`${this.baseURL}/snapshot/${fsName}/${subVolumeName}/info`, {\n      params: {\n        snap_name: snapshotName,\n        group_name: groupName\n      }\n    });\n  }\n\n  snapshotExists(\n    fsName: string,\n    snapshotName: string,\n    subVolumeName: string,\n    groupName: string = ''\n  ): Observable<boolean> {\n    return this.getSnapshotInfo(fsName, snapshotName, subVolumeName, groupName).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return of(false);\n      })\n    );\n  }\n\n  createSnapshot(\n    fsName: string,\n    snapshotName: string,\n    subVolumeName: string,\n    groupName: string = ''\n  ) {\n    return this.http.post(\n      `${this.baseURL}/snapshot/`,\n      {\n        vol_name: fsName,\n        subvol_name: subVolumeName,\n        snap_name: snapshotName,\n        group_name: groupName\n      },\n      { observe: 'response' }\n    );\n  }\n\n  deleteSnapshot(fsName: string, subVolumeName: string, snapshotName: string, groupName = '') {\n    return this.http.delete(`${this.baseURL}/snapshot/${fsName}/${subVolumeName}`, {\n      params: {\n        snap_name: snapshotName,\n        group_name: groupName\n      },\n      observe: 'response'\n    });\n  }\n\n  createSnapshotClone(\n    fsName: string,\n    subVolumeName: string,\n    snapshotName: string,\n    cloneName: string,\n    groupName = '',\n    targetGroupName = ''\n  ) {\n    return this.http.post(\n      `${this.baseURL}/snapshot/clone`,\n      {\n        vol_name: fsName,\n        subvol_name: subVolumeName,\n        snap_name: snapshotName,\n        clone_name: cloneName,\n        group_name: groupName,\n        target_group_name: targetGroupName\n      },\n      { observe: 'response' }\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { ConfigFormCreateRequestModel } from '~/app/ceph/cluster/configuration/configuration-form/configuration-form-create-request.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  constructor(private http: HttpClient) {}\n\n  private findValue(config: any, section: string) {\n    if (!config.value) {\n      return undefined;\n    }\n    return config.value.find((v: any) => v.section === section);\n  }\n\n  getValue(config: any, section: string) {\n    let val = this.findValue(config, section);\n    if (!val) {\n      const indexOfDot = section.indexOf('.');\n      if (indexOfDot !== -1) {\n        val = this.findValue(config, section.substring(0, indexOfDot));\n      }\n    }\n    if (!val) {\n      val = this.findValue(config, 'global');\n    }\n    if (val) {\n      return val.value;\n    }\n    return config.default;\n  }\n\n  getConfigData() {\n    return this.http.get('api/cluster_conf/');\n  }\n\n  get(configOption: string) {\n    return this.http.get(`api/cluster_conf/${configOption}`);\n  }\n\n  filter(configOptionNames: Array<string>) {\n    return this.http.get(`api/cluster_conf/filter?names=${configOptionNames.join(',')}`);\n  }\n\n  create(configOption: ConfigFormCreateRequestModel) {\n    return this.http.post('api/cluster_conf/', configOption);\n  }\n\n  delete(configOption: string, section: string) {\n    return this.http.delete(`api/cluster_conf/${configOption}?section=${section}`);\n  }\n\n  bulkCreate(configOptions: object) {\n    return this.http.put('api/cluster_conf/', configOptions);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { CrushRuleConfig } from '../models/crush-rule';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrushRuleService {\n  apiPath = 'api/crush_rule';\n\n  formTooltips = {\n    // Copied from /doc/rados/operations/crush-map.rst\n    root: $localize`The name of the node under which data should be placed.`,\n    failure_domain: $localize`The type of CRUSH nodes across which we should separate replicas.`,\n    device_class: $localize`The device class on which to place data.`\n  };\n\n  constructor(private http: HttpClient) {}\n\n  create(rule: CrushRuleConfig) {\n    return this.http.post(this.apiPath, rule, { observe: 'response' });\n  }\n\n  delete(name: string) {\n    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\n  }\n\n  getInfo() {\n    return this.http.get(`ui-${this.apiPath}/info`);\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { map, mergeMap, toArray } from 'rxjs/operators';\n\nimport { InventoryDevice } from '~/app/ceph/cluster/inventory/inventory-devices/inventory-device.model';\nimport { InventoryHost } from '~/app/ceph/cluster/inventory/inventory-host.model';\nimport { ApiClient } from '~/app/shared/api/api-client';\nimport { CdHelperClass } from '~/app/shared/classes/cd-helper.class';\nimport { Daemon } from '../models/daemon.interface';\nimport { CdDevice } from '../models/devices';\nimport { SmartDataResponseV1 } from '../models/smart';\nimport { DeviceService } from '../services/device.service';\nimport { Host } from '../models/host.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HostService extends ApiClient {\n  baseURL = 'api/host';\n  baseUIURL = 'ui-api/host';\n\n  predefinedLabels = ['mon', 'mgr', 'osd', 'mds', 'rgw', 'nfs', 'iscsi', 'rbd', 'grafana'];\n\n  constructor(private http: HttpClient, private deviceService: DeviceService) {\n    super();\n  }\n\n  list(params: any, facts: string): Observable<object[]> {\n    params = params.set('facts', facts);\n    return this.http\n      .get<object[]>(this.baseURL, {\n        headers: { Accept: this.getVersionHeaderValue(1, 2) },\n        params: params,\n        observe: 'response'\n      })\n      .pipe(\n        map((response: any) => {\n          return response['body'].map((host: any) => {\n            host['headers'] = response.headers;\n            return host;\n          });\n        })\n      );\n  }\n\n  create(hostname: string, addr: string, labels: string[], status: string) {\n    return this.http.post(\n      this.baseURL,\n      { hostname: hostname, addr: addr, labels: labels, status: status },\n      { observe: 'response', headers: { Accept: CdHelperClass.cdVersionHeader('0', '1') } }\n    );\n  }\n\n  delete(hostname: string) {\n    return this.http.delete(`${this.baseURL}/${hostname}`, { observe: 'response' });\n  }\n\n  getDevices(hostname: string): Observable<CdDevice[]> {\n    return this.http\n      .get<CdDevice[]>(`${this.baseURL}/${hostname}/devices`)\n      .pipe(map((devices) => devices.map((device) => this.deviceService.prepareDevice(device))));\n  }\n\n  getSmartData(hostname: string) {\n    return this.http.get<SmartDataResponseV1>(`${this.baseURL}/${hostname}/smart`);\n  }\n\n  getDaemons(hostname: string): Observable<Daemon[]> {\n    return this.http.get<Daemon[]>(`${this.baseURL}/${hostname}/daemons`);\n  }\n\n  getLabels(): Observable<string[]> {\n    return this.http.get<string[]>(`${this.baseUIURL}/labels`);\n  }\n\n  update(\n    hostname: string,\n    updateLabels = false,\n    labels: string[] = [],\n    maintenance = false,\n    force = false,\n    drain = false\n  ) {\n    return this.http.put(\n      `${this.baseURL}/${hostname}`,\n      {\n        update_labels: updateLabels,\n        labels: labels,\n        maintenance: maintenance,\n        force: force,\n        drain: drain\n      },\n      { headers: { Accept: this.getVersionHeaderValue(0, 1) } }\n    );\n  }\n\n  identifyDevice(hostname: string, device: string, duration: number) {\n    return this.http.post(`${this.baseURL}/${hostname}/identify_device`, {\n      device,\n      duration\n    });\n  }\n\n  private getInventoryParams(refresh?: boolean): HttpParams {\n    let params = new HttpParams();\n    if (refresh) {\n      params = params.append('refresh', _.toString(refresh));\n    }\n    return params;\n  }\n\n  /**\n   * Get inventory of a host.\n   *\n   * @param hostname the host query.\n   * @param refresh true to ask the Orchestrator to refresh inventory.\n   */\n  getInventory(hostname: string, refresh?: boolean): Observable<InventoryHost> {\n    const params = this.getInventoryParams(refresh);\n    return this.http.get<InventoryHost>(`${this.baseURL}/${hostname}/inventory`, {\n      params: params\n    });\n  }\n\n  /**\n   * Get inventories of all hosts.\n   *\n   * @param refresh true to ask the Orchestrator to refresh inventory.\n   */\n  inventoryList(refresh?: boolean): Observable<InventoryHost[]> {\n    const params = this.getInventoryParams(refresh);\n    return this.http.get<InventoryHost[]>(`${this.baseUIURL}/inventory`, { params: params });\n  }\n\n  /**\n   * Get device list via host inventories.\n   *\n   * @param hostname the host to query. undefined for all hosts.\n   * @param refresh true to ask the Orchestrator to refresh inventory.\n   */\n  inventoryDeviceList(hostname?: string, refresh?: boolean): Observable<InventoryDevice[]> {\n    let observable;\n    if (hostname) {\n      observable = this.getInventory(hostname, refresh).pipe(toArray());\n    } else {\n      observable = this.inventoryList(refresh);\n    }\n    return observable.pipe(\n      mergeMap((hosts: InventoryHost[]) => {\n        const devices = _.flatMap(hosts, (host) => {\n          return host.devices.map((device) => {\n            device.hostname = host.name;\n            device.uid = device.device_id\n              ? `${device.device_id}-${device.hostname}-${device.path}`\n              : `${device.hostname}-${device.path}`;\n            return device;\n          });\n        });\n        return observableOf(devices);\n      })\n    );\n  }\n\n  getAllHosts(): Observable<Host[]> {\n    return this.http.get<Host[]>(`${this.baseUIURL}/list`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BlockUIService } from 'ng-block-ui';\n\nimport { Observable, Subject, timer } from 'rxjs';\nimport { NotificationService } from '../services/notification.service';\nimport { TableComponent } from '../datatable/table/table.component';\nimport { Router } from '@angular/router';\nimport { MgrModuleInfo } from '../models/mgr-modules.interface';\nimport { NotificationType } from '../enum/notification-type.enum';\nimport { delay, retryWhen, switchMap, tap } from 'rxjs/operators';\nimport { SummaryService } from '../services/summary.service';\n\nconst GLOBAL = 'global';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MgrModuleService {\n  private url = 'api/mgr/module';\n  updateCompleted$ = new Subject<void>();\n\n  readonly REFRESH_INTERVAL = 2000;\n\n  constructor(\n    private blockUI: BlockUIService,\n    private http: HttpClient,\n    private notificationService: NotificationService,\n    private router: Router,\n    private summaryService: SummaryService\n  ) {}\n\n  /**\n   * Get the list of Ceph Mgr modules and their state (enabled/disabled).\n   * @return {Observable<Object[]>}\n   */\n  list(): Observable<MgrModuleInfo[]> {\n    return this.http.get<MgrModuleInfo[]>(`${this.url}`);\n  }\n\n  /**\n   * Get the Ceph Mgr module configuration.\n   * @param {string} module The name of the mgr module.\n   * @return {Observable<Object>}\n   */\n  getConfig(module: string): Observable<Object> {\n    return this.http.get(`${this.url}/${module}`);\n  }\n\n  /**\n   * Update the Ceph Mgr module configuration.\n   * @param {string} module The name of the mgr module.\n   * @param {object} config The configuration.\n   * @return {Observable<Object>}\n   */\n  updateConfig(module: string, config: object): Observable<Object> {\n    return this.http.put(`${this.url}/${module}`, { config: config });\n  }\n\n  /**\n   * Enable the Ceph Mgr module.\n   * @param {string} module The name of the mgr module.\n   */\n  enable(module: string) {\n    return this.http.post(`${this.url}/${module}/enable`, null);\n  }\n\n  /**\n   * Disable the Ceph Mgr module.\n   * @param {string} module The name of the mgr module.\n   */\n  disable(module: string) {\n    return this.http.post(`${this.url}/${module}/disable`, null);\n  }\n\n  /**\n   * Get the Ceph Mgr module options.\n   * @param {string} module The name of the mgr module.\n   * @return {Observable<Object>}\n   */\n  getOptions(module: string): Observable<Object> {\n    return this.http.get(`${this.url}/${module}/options`);\n  }\n\n  /**\n   * Update the Ceph Mgr module state to enabled or disabled.\n   */\n  updateModuleState(\n    module: string,\n    enabled: boolean = false,\n    table: TableComponent = null,\n    navigateTo: string = '',\n    notificationText?: string,\n    navigateByUrl?: boolean,\n    reconnectingMessage: string = $localize`Reconnecting, please wait ...`\n  ): void {\n    const moduleToggle$ = enabled ? this.disable(module) : this.enable(module);\n\n    moduleToggle$.subscribe({\n      next: () => {\n        // Module toggle succeeded\n        this.updateCompleted$.next();\n      },\n      error: () => {\n        // Module toggle failed, trigger reconnect flow\n        this.notificationService.suspendToasties(true);\n        this.blockUI.start(GLOBAL, reconnectingMessage);\n\n        timer(this.REFRESH_INTERVAL)\n          .pipe(\n            switchMap(() => this.list()),\n            retryWhen((errors) =>\n              errors.pipe(\n                tap(() => {\n                  // Keep retrying until list() succeeds\n                }),\n                delay(this.REFRESH_INTERVAL)\n              )\n            )\n          )\n          .subscribe({\n            next: () => {\n              // Reconnection successful\n              this.notificationService.suspendToasties(false);\n              this.blockUI.stop(GLOBAL);\n\n              if (table) {\n                table.refreshBtn();\n              }\n\n              if (notificationText) {\n                this.notificationService.show(\n                  NotificationType.success,\n                  $localize`${notificationText}`\n                );\n              }\n\n              if (navigateTo) {\n                const navigate = () => this.router.navigate([navigateTo]);\n                if (navigateByUrl) {\n                  this.router.navigateByUrl('/', { skipLocationChange: true }).then(navigate);\n                } else {\n                  navigate();\n                }\n              }\n\n              this.updateCompleted$.next();\n              this.summaryService.startPolling();\n            }\n          });\n      }\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { TimerService } from '../services/timer.service';\nimport { filter, first } from 'rxjs/operators';\nimport { SummaryService } from '../services/summary.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultiClusterService {\n  TOKEN_CHECK_INTERVAL = 600000; // 10m interval\n  private msSource = new BehaviorSubject<any>(null);\n  msData$ = this.msSource.asObservable();\n  private tokenStatusSource = new BehaviorSubject<any>(null);\n  tokenStatusSource$ = this.tokenStatusSource.asObservable();\n  showDeletionMessage = false;\n  isClusterAddedFlag = false;\n  prometheusConnectionError: any[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private timerService: TimerService,\n    private summaryService: SummaryService,\n    private router: Router\n  ) {}\n\n  startPolling(): Subscription {\n    return this.timerService\n      .get(() => this.getCluster(), 5000)\n      .subscribe(this.getClusterObserver());\n  }\n\n  startClusterTokenStatusPolling() {\n    return this.checkAndStartTimer();\n  }\n\n  private checkAndStartTimer() {\n    this.checkTokenStatus().subscribe(this.getClusterTokenStatusObserver());\n    return this.timerService\n      .get(() => this.checkTokenStatus(), this.TOKEN_CHECK_INTERVAL)\n      .subscribe(this.getClusterTokenStatusObserver());\n  }\n\n  subscribeClusterTokenStatus(next: (data: any) => void, error?: (error: any) => void) {\n    return this.tokenStatusSource$.pipe(filter((value) => !!value)).subscribe(next, error);\n  }\n\n  refresh(): Subscription {\n    return this.getCluster().subscribe(this.getClusterObserver());\n  }\n\n  refreshTokenStatus() {\n    return this.checkTokenStatus().subscribe(this.getClusterTokenStatusObserver());\n  }\n\n  subscribeOnce(next: (data: any) => void, error?: (error: any) => void) {\n    return this.msData$\n      .pipe(\n        filter((value) => !!value),\n        first()\n      )\n      .subscribe(next, error);\n  }\n\n  subscribe(next: (data: any) => void, error?: (error: any) => void) {\n    return this.msData$.pipe(filter((value) => !!value)).subscribe(next, error);\n  }\n\n  setCluster(cluster: object) {\n    return this.http.put('api/multi-cluster/set_config', { config: cluster });\n  }\n\n  getCluster() {\n    return this.http.get('api/multi-cluster/get_config');\n  }\n\n  deleteCluster(clusterName: string, clusterUser: string): Observable<any> {\n    return this.http.delete(`api/multi-cluster/delete_cluster/${clusterName}/${clusterUser}`);\n  }\n\n  editCluster(\n    name: string,\n    url: any,\n    clusterAlias: string,\n    username: string,\n    verify = false,\n    ssl_certificate = ''\n  ) {\n    return this.http.put('api/multi-cluster/edit_cluster', {\n      name: name,\n      url,\n      cluster_alias: clusterAlias,\n      username: username,\n      verify: verify,\n      ssl_certificate: ssl_certificate\n    });\n  }\n\n  addCluster(\n    url: any,\n    clusterAlias: string,\n    username: string,\n    password: string,\n    hub_url = '',\n    ssl = false,\n    cert = '',\n    ttl: number\n  ) {\n    return this.http.post('api/multi-cluster/auth', {\n      url,\n      cluster_alias: clusterAlias,\n      username,\n      password,\n      hub_url,\n      ssl_verify: ssl,\n      ssl_certificate: cert,\n      ttl: ttl\n    });\n  }\n\n  reConnectCluster(\n    url: any,\n    username: string,\n    password: string,\n    ssl = false,\n    cert = '',\n    ttl: number,\n    cluster_token?: string\n  ) {\n    const requestBody: any = {\n      url,\n      username,\n      password,\n      ssl_verify: ssl,\n      ssl_certificate: cert,\n      ttl: ttl\n    };\n\n    if (cluster_token) {\n      requestBody.cluster_token = cluster_token;\n    }\n\n    return this.http.put('api/multi-cluster/reconnect_cluster', requestBody);\n  }\n\n  private getClusterObserver() {\n    return (data: any) => {\n      this.msSource.next(data);\n    };\n  }\n\n  private getClusterTokenStatusObserver() {\n    return (data: any) => {\n      this.tokenStatusSource.next(data);\n    };\n  }\n\n  checkTokenStatus(): Observable<object> {\n    return this.http.get<object>('api/multi-cluster/check_token_status');\n  }\n\n  showPrometheusDelayMessage(showDeletionMessage?: boolean) {\n    if (showDeletionMessage !== undefined) {\n      this.showDeletionMessage = showDeletionMessage;\n    }\n    return this.showDeletionMessage;\n  }\n\n  isClusterAdded(isClusterAddedFlag?: boolean) {\n    if (isClusterAddedFlag !== undefined) {\n      this.isClusterAddedFlag = isClusterAddedFlag;\n    }\n    return this.isClusterAddedFlag;\n  }\n\n  managePrometheusConnectionError(prometheusConnectionError?: any[]) {\n    if (prometheusConnectionError !== undefined) {\n      this.prometheusConnectionError = prometheusConnectionError;\n    }\n    return this.prometheusConnectionError;\n  }\n\n  refreshMultiCluster(currentRoute: string) {\n    this.refresh();\n    this.refreshTokenStatus();\n    this.summaryService.refresh();\n    if (currentRoute.includes('dashboard')) {\n      this.router.navigateByUrl('/pool', { skipLocationChange: true }).then(() => {\n        this.router.navigate([currentRoute]);\n      });\n    } else {\n      this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n        this.router.navigate([currentRoute]);\n      });\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable, throwError } from 'rxjs';\nimport { NFSCluster } from '~/app/ceph/nfs/models/nfs-cluster-config';\n\nimport { NfsFSAbstractionLayer, SUPPORTED_FSAL } from '~/app/ceph/nfs/models/nfs.fsal';\nimport { ApiClient } from '~/app/shared/api/api-client';\n\nexport interface Directory {\n  paths: string[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NfsService extends ApiClient {\n  apiPath = 'api/nfs-ganesha';\n  uiApiPath = 'ui-api/nfs-ganesha';\n\n  nfsAccessType = [\n    {\n      value: 'RW',\n      help: $localize`Allows all operations`\n    },\n    {\n      value: 'RO',\n      help: $localize`Allows only operations that do not modify the server`\n    },\n    {\n      value: 'NONE',\n      help: $localize`Allows no access at all`\n    }\n  ];\n\n  nfsFsal: NfsFSAbstractionLayer[] = [\n    {\n      value: SUPPORTED_FSAL.CEPH,\n      descr: $localize`CephFS`,\n      disabled: false\n    },\n    {\n      value: SUPPORTED_FSAL.RGW,\n      descr: $localize`Object Gateway`,\n      disabled: false\n    }\n  ];\n  nfsSquash = {\n    no_root_squash: ['no_root_squash', 'noidsquash', 'none'],\n    root_id_squash: ['root_id_squash', 'rootidsquash', 'rootid'],\n    root_squash: ['root_squash', 'rootsquash', 'root'],\n    all_squash: ['all_squash', 'allsquash', 'all', 'allanonymous', 'all_anonymous']\n  };\n\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  list(clusterId?: string) {\n    return this.http.get(`${this.apiPath}/export`, {\n      params: { cluster_id: clusterId }\n    });\n  }\n\n  get(clusterId: string, exportId: string) {\n    return this.http.get(`${this.apiPath}/export/${clusterId}/${exportId}`);\n  }\n\n  create(nfs: any) {\n    return this.http.post(`${this.apiPath}/export`, nfs, {\n      headers: { Accept: this.getVersionHeaderValue(2, 0) },\n      observe: 'response'\n    });\n  }\n\n  update(clusterId: string, id: number, nfs: any) {\n    return this.http.put(`${this.apiPath}/export/${clusterId}/${id}`, nfs, {\n      headers: { Accept: this.getVersionHeaderValue(2, 0) },\n      observe: 'response'\n    });\n  }\n\n  delete(clusterId: string, exportId: string) {\n    return this.http.delete(`${this.apiPath}/export/${clusterId}/${exportId}`, {\n      headers: { Accept: this.getVersionHeaderValue(2, 0) },\n      observe: 'response'\n    });\n  }\n\n  listClusters() {\n    return this.http.get(`${this.apiPath}/cluster`, {\n      headers: { Accept: this.getVersionHeaderValue(0, 1) }\n    });\n  }\n\n  lsDir(fs_name: string, root_dir: string): Observable<Directory> {\n    if (!fs_name) {\n      return throwError($localize`Please specify a filesystem volume.`);\n    }\n    return this.http.get<Directory>(`${this.uiApiPath}/lsdir/${fs_name}?root_dir=${root_dir}`);\n  }\n\n  fsals() {\n    return this.http.get(`${this.uiApiPath}/fsals`);\n  }\n\n  filesystems() {\n    return this.http.get(`${this.uiApiPath}/cephfs/filesystems`);\n  }\n\n  nfsClusterList(): Observable<NFSCluster[]> {\n    return this.http.get<NFSCluster[]>(`${this.apiPath}/cluster`, {\n      headers: { Accept: this.getVersionHeaderValue(0, 1) },\n      params: { info: true }\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport { OrchestratorFeature } from '../models/orchestrator.enum';\nimport { OrchestratorStatus } from '../models/orchestrator.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrchestratorService {\n  private url = 'ui-api/orchestrator';\n\n  disableMessages = {\n    noOrchestrator: $localize`The feature is disabled because Orchestrator is not available.`,\n    missingFeature: $localize`The Orchestrator backend doesn't support this feature.`\n  };\n\n  constructor(private http: HttpClient) {}\n\n  status(): Observable<OrchestratorStatus> {\n    return this.http.get<OrchestratorStatus>(`${this.url}/status`);\n  }\n\n  hasFeature(status: OrchestratorStatus, features: OrchestratorFeature[]): boolean {\n    return _.every(features, (feature) => _.get(status.features, `${feature}.available`));\n  }\n\n  getTableActionDisableDesc(\n    status: OrchestratorStatus,\n    features: OrchestratorFeature[]\n  ): boolean | string {\n    if (!status) {\n      return false;\n    }\n    if (!status.available) {\n      return this.disableMessages.noOrchestrator;\n    }\n    if (!this.hasFeature(status, features)) {\n      return this.disableMessages.missingFeature;\n    }\n    return false;\n  }\n\n  getName() {\n    return this.http.get(`${this.url}/get_name`);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class PaginateObservable<Type> {\n  observable: Observable<Type>;\n  count: number;\n\n  constructor(obs: Observable<Type>) {\n    this.observable = obs.pipe(\n      map((response: any) => {\n        this.count = Number(response.headers?.get('X-Total-Count'));\n        return response['body'] || response;\n      })\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { cdEncode } from '../decorators/cd-encode';\nimport { RbdConfigurationEntry } from '../models/configuration';\nimport { RbdConfigurationService } from '../services/rbd-configuration.service';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class PoolService {\n  apiPath = 'api/pool';\n\n  constructor(private http: HttpClient, private rbdConfigurationService: RbdConfigurationService) {}\n\n  create(pool: any) {\n    return this.http.post(this.apiPath, pool, { observe: 'response' });\n  }\n\n  update(pool: any) {\n    let name: string;\n    if (pool.hasOwnProperty('srcpool')) {\n      name = pool.srcpool;\n      delete pool.srcpool;\n    } else {\n      name = pool.pool;\n      delete pool.pool;\n    }\n    return this.http.put(`${this.apiPath}/${encodeURIComponent(name)}`, pool, {\n      observe: 'response'\n    });\n  }\n\n  delete(name: string) {\n    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\n  }\n\n  get(poolName: string) {\n    return this.http.get(`${this.apiPath}/${poolName}`);\n  }\n\n  getList() {\n    return this.http.get(`${this.apiPath}?stats=true`);\n  }\n\n  getConfiguration(poolName: string): Observable<RbdConfigurationEntry[]> {\n    return this.http.get<RbdConfigurationEntry[]>(`${this.apiPath}/${poolName}/configuration`).pipe(\n      // Add static data maintained in RbdConfigurationService\n      map((values) =>\n        values.map((entry) =>\n          Object.assign(entry, this.rbdConfigurationService.getOptionByName(entry.name))\n        )\n      )\n    );\n  }\n\n  getInfo() {\n    return this.http.get(`ui-${this.apiPath}/info`);\n  }\n\n  list(attrs: string[] = []) {\n    const attrsStr = attrs.join(',');\n    return this.http\n      .get(`${this.apiPath}?attrs=${attrsStr}`)\n      .toPromise()\n      .then((resp: any) => {\n        return resp;\n      });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable, Subscription, forkJoin, of, timer } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport { AlertmanagerSilence } from '../models/alertmanager-silence';\nimport {\n  AlertmanagerAlert,\n  AlertmanagerNotification,\n  PrometheusRuleGroup\n} from '../models/prometheus-alerts';\nimport moment from 'moment';\n\nexport type PromethuesGaugeMetricResult = {\n  metric: Record<string, string>; // metric metadata\n  value: [number, string]; // timestamp, value\n};\n\nexport type PromqlGuageMetric = {\n  resultType: 'vector';\n  result: PromethuesGaugeMetricResult[];\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrometheusService {\n  timerGetPrometheusDataSub: Subscription;\n  timerTime = 30000;\n  readonly lastHourDateObject = {\n    start: moment().unix() - 3600,\n    end: moment().unix(),\n    step: 14\n  };\n  private baseURL = 'api/prometheus';\n  private settingsKey = {\n    alertmanager: 'ui-api/prometheus/alertmanager-api-host',\n    prometheus: 'ui-api/prometheus/prometheus-api-host'\n  };\n  private settings: { [url: string]: string } = {};\n\n  constructor(private http: HttpClient) {}\n\n  unsubscribe() {\n    if (this.timerGetPrometheusDataSub) {\n      this.timerGetPrometheusDataSub.unsubscribe();\n    }\n  }\n\n  // Range Queries\n  getPrometheusData(params: any): any {\n    return this.http.get<any>(`${this.baseURL}/data`, { params });\n  }\n\n  // Guage Queries\n  getPrometheusQueryData(params: { params: string }): Observable<PromqlGuageMetric> {\n    return this.http.get<any>(`${this.baseURL}/prometheus_query_data`, { params });\n  }\n\n  ifAlertmanagerConfigured(fn: (value?: string) => void, elseFn?: () => void): void {\n    this.ifSettingConfigured(this.settingsKey.alertmanager, fn, elseFn);\n  }\n\n  disableAlertmanagerConfig(): void {\n    this.disableSetting(this.settingsKey.alertmanager);\n  }\n\n  ifPrometheusConfigured(fn: (value?: string) => void, elseFn?: () => void): void {\n    this.ifSettingConfigured(this.settingsKey.prometheus, fn, elseFn);\n  }\n\n  disablePrometheusConfig(): void {\n    this.disableSetting(this.settingsKey.prometheus);\n  }\n\n  getAlerts(clusterFilteredAlerts = false, params = {}): Observable<AlertmanagerAlert[]> {\n    params['cluster_filter'] = clusterFilteredAlerts;\n    return this.http.get<AlertmanagerAlert[]>(this.baseURL, { params });\n  }\n\n  getSilences(params = {}): Observable<AlertmanagerSilence[]> {\n    return this.http.get<AlertmanagerSilence[]>(`${this.baseURL}/silences`, { params });\n  }\n\n  getRules(\n    type: 'all' | 'alerting' | 'rewrites' = 'all'\n  ): Observable<{ groups: PrometheusRuleGroup[] }> {\n    return this.http.get<{ groups: PrometheusRuleGroup[] }>(`${this.baseURL}/rules`).pipe(\n      map((rules) => {\n        if (['alerting', 'rewrites'].includes(type)) {\n          rules.groups.map((group) => {\n            group.rules = group.rules.filter((rule) => rule.type === type);\n          });\n        }\n        return rules;\n      })\n    );\n  }\n\n  setSilence(silence: AlertmanagerSilence) {\n    return this.http.post<object>(`${this.baseURL}/silence`, silence, { observe: 'response' });\n  }\n\n  expireSilence(silenceId: string) {\n    return this.http.delete(`${this.baseURL}/silence/${silenceId}`, { observe: 'response' });\n  }\n\n  getNotifications(\n    notification?: AlertmanagerNotification\n  ): Observable<AlertmanagerNotification[]> {\n    const url = `${this.baseURL}/notifications?from=${\n      notification && notification.id ? notification.id : 'last'\n    }`;\n    return this.http.get<AlertmanagerNotification[]>(url);\n  }\n\n  ifSettingConfigured(url: string, fn: (value?: string) => void, elseFn?: () => void): void {\n    const setting = this.settings[url];\n    if (setting === undefined) {\n      this.http.get(url).subscribe(\n        (data: any) => {\n          this.settings[url] = this.getSettingsValue(data);\n          this.ifSettingConfigured(url, fn, elseFn);\n        },\n        (resp) => {\n          if (resp.status !== 401) {\n            this.settings[url] = '';\n          }\n        }\n      );\n    } else if (setting !== '') {\n      fn(setting);\n    } else {\n      if (elseFn) {\n        elseFn();\n      }\n    }\n  }\n\n  // Easiest way to stop reloading external content that can't be reached\n  disableSetting(url: string) {\n    this.settings[url] = '';\n  }\n\n  private getSettingsValue(data: any): string {\n    return data.value || data.instance || '';\n  }\n\n  getGaugeQueryData(query: string): Observable<PromqlGuageMetric> {\n    return this.getPrometheusQueryData({ params: query }).pipe(\n      map((result: PromqlGuageMetric) => result),\n      catchError(() => of({ result: [] } as PromqlGuageMetric))\n    );\n  }\n\n  formatGuageMetric(data: string): number {\n    const value: number = parseFloat(data ?? '');\n    // Guage value can be \"Nan\", \"+inf\", \"-inf\" in case of errors\n    return isFinite(value) ? value : null;\n  }\n\n  getRangeQueriesData(selectedTime: any, queries: any, queriesResults: any, checkNan?: boolean) {\n    this.ifPrometheusConfigured(() => {\n      if (this.timerGetPrometheusDataSub) {\n        this.timerGetPrometheusDataSub.unsubscribe();\n      }\n      this.timerGetPrometheusDataSub = timer(0, this.timerTime)\n        .pipe(\n          switchMap(() => {\n            selectedTime = this.updateTimeStamp(selectedTime);\n            const observables = [];\n            for (const queryName in queries) {\n              if (queries.hasOwnProperty(queryName)) {\n                const query = queries[queryName];\n                observables.push(\n                  this.getPrometheusData({\n                    params: encodeURIComponent(query),\n                    start: selectedTime['start'],\n                    end: selectedTime['end'],\n                    step: selectedTime['step']\n                  }).pipe(map((data: any) => ({ queryName, data })))\n                );\n              }\n            }\n            return forkJoin(observables);\n          })\n        )\n        .subscribe((results: any) => {\n          results.forEach(({ queryName, data }: any) => {\n            if (data.result.length) {\n              queriesResults[queryName] = data.result[0].values;\n            } else {\n              queriesResults[queryName] = [];\n            }\n            if (\n              queriesResults[queryName] !== undefined &&\n              queriesResults[queryName] !== '' &&\n              checkNan\n            ) {\n              queriesResults[queryName].forEach((valueArray: any[]) => {\n                if (isNaN(parseFloat(valueArray[1]))) {\n                  valueArray[1] = '0';\n                }\n              });\n            }\n          });\n        });\n    });\n    return queriesResults;\n  }\n\n  private updateTimeStamp(selectedTime: any): any {\n    let formattedDate = {};\n    let secondsAgo = selectedTime['end'] - selectedTime['start'];\n    const date: number = moment().unix() - secondsAgo;\n    const dateNow: number = moment().unix();\n    formattedDate = {\n      start: date,\n      end: dateNow,\n      step: selectedTime['step']\n    };\n    return formattedDate;\n  }\n\n  getMultiClusterData(params: any): any {\n    return this.http.get<any>(`${this.baseURL}/prometheus_query_data`, { params });\n  }\n\n  getMultiClusterQueryRangeData(params: any): any {\n    return this.http.get<any>(`${this.baseURL}/data`, { params });\n  }\n\n  getMultiClusterQueriesData(\n    queriesResults: any,\n    validQueries: string[],\n    validRangeQueries: string[],\n    multiClusterQueries: any,\n    validSelectedQueries: string[],\n    allMultiClusterQueries: string[]\n  ) {\n    return new Observable((observer) => {\n      this.ifPrometheusConfigured(() => {\n        if (this.timerGetPrometheusDataSub) {\n          this.timerGetPrometheusDataSub.unsubscribe();\n        }\n\n        this.timerGetPrometheusDataSub = timer(0, this.timerTime).subscribe(() => {\n          let requests: any[] = [];\n          let queryNames: string[] = [];\n\n          Object.entries(multiClusterQueries).forEach(([key, _value]) => {\n            for (const queryName in multiClusterQueries[key].queries) {\n              if (\n                multiClusterQueries[key].queries.hasOwnProperty(queryName) &&\n                validSelectedQueries.includes(queryName)\n              ) {\n                const query = multiClusterQueries[key].queries[queryName];\n                const start = this.updateTimeStamp(multiClusterQueries[key].selectedTime)['start'];\n                const end = this.updateTimeStamp(multiClusterQueries[key].selectedTime)['end'];\n                const step = this.updateTimeStamp(multiClusterQueries[key].selectedTime)['step'];\n\n                if (validRangeQueries.includes(queryName)) {\n                  const request = this.getMultiClusterQueryRangeData({\n                    params: encodeURIComponent(query),\n                    start,\n                    end,\n                    step\n                  });\n                  requests.push(request);\n                  queryNames.push(queryName);\n                } else {\n                  const request = this.getMultiClusterData({\n                    params: encodeURIComponent(query),\n                    start,\n                    end,\n                    step\n                  });\n                  requests.push(request);\n                  queryNames.push(queryName);\n                }\n              }\n            }\n          });\n\n          validSelectedQueries = allMultiClusterQueries;\n\n          forkJoin(requests).subscribe(\n            (responses: any[]) => {\n              for (let i = 0; i < responses.length; i++) {\n                const data = responses[i];\n                const queryName = queryNames[i];\n                if (data.result.length) {\n                  if (validQueries.includes(queryName)) {\n                    queriesResults[queryName] = data.result;\n                  } else {\n                    queriesResults[queryName] = data.result.map(\n                      (result: { value: any }) => result.value\n                    );\n                  }\n                }\n              }\n              observer.next(queriesResults);\n              observer.complete();\n            },\n            (error: Error) => {\n              observer.error(error);\n            }\n          );\n        });\n      });\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { ApiClient } from '~/app/shared/api/api-client';\nimport { cdEncode, cdEncodeNot } from '../decorators/cd-encode';\nimport { ImageSpec } from '../models/image-spec';\nimport { RbdConfigurationService } from '../services/rbd-configuration.service';\nimport { RbdPool } from './rbd.model';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RbdService extends ApiClient {\n  constructor(private http: HttpClient, private rbdConfigurationService: RbdConfigurationService) {\n    super();\n  }\n\n  isRBDPool(pool: any) {\n    return _.indexOf(pool.application_metadata, 'rbd') !== -1 && !pool.pool_name.includes('/');\n  }\n\n  create(rbd: any) {\n    return this.http.post('api/block/image', rbd, { observe: 'response' });\n  }\n\n  delete(imageSpec: ImageSpec) {\n    return this.http.delete(`api/block/image/${imageSpec.toStringEncoded()}`, {\n      observe: 'response'\n    });\n  }\n\n  update(imageSpec: ImageSpec, rbd: any) {\n    return this.http.put(`api/block/image/${imageSpec.toStringEncoded()}`, rbd, {\n      observe: 'response'\n    });\n  }\n\n  get(imageSpec: ImageSpec) {\n    return this.http.get(`api/block/image/${imageSpec.toStringEncoded()}`);\n  }\n\n  list(params: any) {\n    return this.http\n      .get<RbdPool[]>('api/block/image', {\n        params: params,\n        headers: { Accept: this.getVersionHeaderValue(2, 0) },\n        observe: 'response'\n      })\n      .pipe(\n        map((response: any) => {\n          return response['body'].map((pool: any) => {\n            pool.value.map((image: any) => {\n              if (!image.configuration) {\n                return image;\n              }\n              image.configuration.map((option: any) =>\n                Object.assign(option, this.rbdConfigurationService.getOptionByName(option.name))\n              );\n              return image;\n            });\n            pool['headers'] = response.headers;\n            return pool;\n          });\n        })\n      );\n  }\n\n  copy(imageSpec: ImageSpec, rbd: any) {\n    return this.http.post(`api/block/image/${imageSpec.toStringEncoded()}/copy`, rbd, {\n      observe: 'response'\n    });\n  }\n\n  flatten(imageSpec: ImageSpec) {\n    return this.http.post(`api/block/image/${imageSpec.toStringEncoded()}/flatten`, null, {\n      observe: 'response'\n    });\n  }\n\n  defaultFeatures() {\n    return this.http.get('api/block/image/default_features');\n  }\n\n  cloneFormatVersion() {\n    return this.http.get<number>('api/block/image/clone_format_version');\n  }\n\n  createSnapshot(\n    imageSpec: ImageSpec,\n    @cdEncodeNot snapshotName: string,\n    mirrorImageSnapshot: boolean\n  ) {\n    const request = {\n      snapshot_name: snapshotName,\n      mirrorImageSnapshot: mirrorImageSnapshot\n    };\n    return this.http.post(`api/block/image/${imageSpec.toStringEncoded()}/snap`, request, {\n      observe: 'response'\n    });\n  }\n\n  renameSnapshot(imageSpec: ImageSpec, snapshotName: string, @cdEncodeNot newSnapshotName: string) {\n    const request = {\n      new_snap_name: newSnapshotName\n    };\n    return this.http.put(\n      `api/block/image/${imageSpec.toStringEncoded()}/snap/${snapshotName}`,\n      request,\n      {\n        observe: 'response'\n      }\n    );\n  }\n\n  protectSnapshot(imageSpec: ImageSpec, snapshotName: string, @cdEncodeNot isProtected: boolean) {\n    const request = {\n      is_protected: isProtected\n    };\n    return this.http.put(\n      `api/block/image/${imageSpec.toStringEncoded()}/snap/${snapshotName}`,\n      request,\n      {\n        observe: 'response'\n      }\n    );\n  }\n\n  rollbackSnapshot(imageSpec: ImageSpec, snapshotName: string) {\n    return this.http.post(\n      `api/block/image/${imageSpec.toStringEncoded()}/snap/${snapshotName}/rollback`,\n      null,\n      { observe: 'response' }\n    );\n  }\n\n  cloneSnapshot(imageSpec: ImageSpec, snapshotName: string, request: any) {\n    return this.http.post(\n      `api/block/image/${imageSpec.toStringEncoded()}/snap/${snapshotName}/clone`,\n      request,\n      { observe: 'response' }\n    );\n  }\n\n  deleteSnapshot(imageSpec: ImageSpec, snapshotName: string) {\n    return this.http.delete(`api/block/image/${imageSpec.toStringEncoded()}/snap/${snapshotName}`, {\n      observe: 'response'\n    });\n  }\n\n  listTrash() {\n    return this.http.get(`api/block/image/trash/`);\n  }\n\n  createNamespace(pool: string, namespace: string) {\n    const request = {\n      namespace: namespace\n    };\n    return this.http.post(`api/block/pool/${pool}/namespace`, request, { observe: 'response' });\n  }\n\n  listNamespaces(pool: string) {\n    return this.http.get(`api/block/pool/${pool}/namespace/`);\n  }\n\n  deleteNamespace(pool: string, namespace: string) {\n    return this.http.delete(`api/block/pool/${pool}/namespace/${namespace}`, {\n      observe: 'response'\n    });\n  }\n\n  moveTrash(imageSpec: ImageSpec, delay: number) {\n    return this.http.post(\n      `api/block/image/${imageSpec.toStringEncoded()}/move_trash`,\n      { delay: delay },\n      { observe: 'response' }\n    );\n  }\n\n  purgeTrash(poolName: string) {\n    return this.http.post(`api/block/image/trash/purge/?pool_name=${poolName}`, null, {\n      observe: 'response'\n    });\n  }\n\n  restoreTrash(imageSpec: ImageSpec, @cdEncodeNot newImageName: string) {\n    return this.http.post(\n      `api/block/image/trash/${imageSpec.toStringEncoded()}/restore`,\n      { new_image_name: newImageName },\n      { observe: 'response' }\n    );\n  }\n\n  removeTrash(imageSpec: ImageSpec, force = false) {\n    return this.http.delete(\n      `api/block/image/trash/${imageSpec.toStringEncoded()}/?force=${force}`,\n      { observe: 'response' }\n    );\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { BehaviorSubject, of as observableOf } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { Bucket } from '~/app/ceph/rgw/models/rgw-bucket';\nimport { RgwRateLimitConfig } from '~/app/ceph/rgw/models/rgw-rate-limit';\n\nimport { ApiClient } from '~/app/shared/api/api-client';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { cdEncode } from '~/app/shared/decorators/cd-encode';\nimport { KmipConfig, VaultConfig } from '../models/rgw-encryption-config-keys';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwBucketService extends ApiClient {\n  private url = 'api/rgw/bucket';\n  private bucketsSubject = new BehaviorSubject<Bucket[]>([]);\n  private totalNumObjectsSubject = new BehaviorSubject<number>(0);\n  private totalUsedCapacitySubject = new BehaviorSubject<number>(0);\n  private averageObjectSizeSubject = new BehaviorSubject<number>(0);\n  buckets$ = this.bucketsSubject.asObservable();\n  totalNumObjects$ = this.totalNumObjectsSubject.asObservable();\n  totalUsedCapacity$ = this.totalUsedCapacitySubject.asObservable();\n  averageObjectSize$ = this.averageObjectSizeSubject.asObservable();\n\n  constructor(private http: HttpClient, private rgwDaemonService: RgwDaemonService) {\n    super();\n  }\n\n  fetchAndTransformBuckets() {\n    return this.list(true).pipe(\n      map((buckets: Bucket[]) => {\n        let totalNumObjects = 0;\n        let totalUsedCapacity = 0;\n        let averageObjectSize = 0;\n        const transformedBuckets = buckets.map((bucket) => this.transformBucket(bucket));\n        transformedBuckets.forEach((bucket) => {\n          totalNumObjects += bucket?.num_objects || 0;\n          totalUsedCapacity += bucket?.bucket_size || 0;\n        });\n        averageObjectSize = this.calculateAverageObjectSize(totalNumObjects, totalUsedCapacity);\n        this.bucketsSubject.next(transformedBuckets);\n        this.totalNumObjectsSubject.next(totalNumObjects);\n        this.totalUsedCapacitySubject.next(totalUsedCapacity);\n        this.averageObjectSizeSubject.next(averageObjectSize);\n      })\n    );\n  }\n\n  transformBucket(bucket: Bucket) {\n    const maxBucketSize = bucket?.bucket_quota?.max_size ?? 0;\n    const maxBucketObjects = bucket?.bucket_quota?.max_objects ?? 0;\n    const bucket_size = bucket['usage']?.['rgw.main']?.['size_actual'] || 0;\n    const num_objects = bucket['usage']?.['rgw.main']?.['num_objects'] || 0;\n    return {\n      ...bucket,\n      bucket_size,\n      num_objects,\n      size_usage: this.calculateSizeUsage(bucket_size, maxBucketSize),\n      object_usage: this.calculateObjectUsage(num_objects, maxBucketObjects)\n    };\n  }\n\n  calculateSizeUsage(bucket_size: number, maxBucketSize: number) {\n    return maxBucketSize > 0 ? bucket_size / maxBucketSize : undefined;\n  }\n\n  calculateObjectUsage(num_objects: number, maxBucketObjects: number) {\n    return maxBucketObjects > 0 ? num_objects / maxBucketObjects : undefined;\n  }\n\n  calculateAverageObjectSize(totalNumObjects: number, totalUsedCapacity: number) {\n    return totalNumObjects > 0 ? totalUsedCapacity / totalNumObjects : 0;\n  }\n\n  /**\n   * Get the list of buckets.\n   * @return Observable<Object[]>\n   */\n  list(stats: boolean = false, uid: string = '') {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('stats', stats.toString());\n      if (uid) {\n        params = params.append('uid', uid);\n      }\n      return this.http.get(this.url, {\n        headers: { Accept: this.getVersionHeaderValue(1, 1) },\n        params: params\n      });\n    });\n  }\n\n  get(bucket: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/${bucket}`, { params: params });\n    });\n  }\n\n  getTotalBucketsAndUsersLength() {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`ui-${this.url}/buckets_and_users_count`, { params: params });\n    });\n  }\n\n  create(\n    bucket: string,\n    uid: string,\n    zonegroup: string,\n    placementTarget: string,\n    lockEnabled: boolean,\n    lock_mode: 'GOVERNANCE' | 'COMPLIANCE',\n    lock_retention_period_days: string,\n    encryption_state: boolean,\n    encryption_type: string,\n    key_id: string,\n    tags: string,\n    bucketPolicy: string,\n    cannedAcl: string,\n    replication: string\n  ) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      const paramsObject = {\n        bucket,\n        uid,\n        zonegroup,\n        lock_enabled: String(lockEnabled),\n        lock_mode,\n        lock_retention_period_days,\n        encryption_state: String(encryption_state),\n        encryption_type,\n        key_id,\n        tags: tags,\n        bucket_policy: bucketPolicy,\n        canned_acl: cannedAcl,\n        replication: replication,\n        daemon_name: params.get('daemon_name')\n      };\n\n      if (placementTarget) {\n        paramsObject['placement_target'] = placementTarget;\n      }\n\n      return this.http.post(this.url, null, {\n        params: new HttpParams({ fromObject: paramsObject })\n      });\n    });\n  }\n\n  update(\n    bucket: string,\n    bucketId: string,\n    uid: string,\n    versioningState: string,\n    encryptionState: boolean,\n    encryptionType: string,\n    keyId: string,\n    mfaDelete: string,\n    mfaTokenSerial: string,\n    mfaTokenPin: string,\n    lockMode: 'GOVERNANCE' | 'COMPLIANCE',\n    lockRetentionPeriodDays: string,\n    tags: string,\n    bucketPolicy: string,\n    cannedAcl: string,\n    replication: string,\n    lifecycle: string\n  ) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_id: bucketId,\n        uid: uid,\n        versioning_state: versioningState,\n        encryption_state: String(encryptionState),\n        encryption_type: encryptionType,\n        key_id: keyId,\n        mfa_delete: mfaDelete,\n        mfa_token_serial: mfaTokenSerial,\n        mfa_token_pin: mfaTokenPin,\n        lock_mode: lockMode,\n        lock_retention_period_days: lockRetentionPeriodDays,\n        tags: tags,\n        bucket_policy: bucketPolicy,\n        canned_acl: cannedAcl,\n        replication: replication,\n        lifecycle: lifecycle\n      });\n      return this.http.put(`${this.url}/${bucket}`, null, { params: params });\n    });\n  }\n\n  delete(bucket: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.delete(`${this.url}/${bucket}`, { params: params });\n    });\n  }\n\n  /**\n   * Check if the specified bucket exists.\n   * @param {string} bucket The bucket name to check.\n   * @return Observable<boolean>\n   */\n  exists(bucket: string) {\n    return this.get(bucket).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return observableOf(false);\n      })\n    );\n  }\n\n  getLockDays(bucketData: object): number {\n    if (bucketData['lock_retention_period_years'] > 0) {\n      return Math.floor(bucketData['lock_retention_period_years'] * 365.242);\n    }\n\n    return bucketData['lock_retention_period_days'] || 0;\n  }\n\n  setEncryptionConfig(config: VaultConfig | KmipConfig) {\n    const reqBody = {\n      ...config\n    };\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.put(`${this.url}/setEncryptionConfig`, reqBody, { params: params });\n    });\n  }\n\n  getEncryption(bucket: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/${bucket}/getEncryption`, { params: params });\n    });\n  }\n\n  deleteEncryption(bucket: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/${bucket}/deleteEncryption`, { params: params });\n    });\n  }\n\n  getEncryptionConfig() {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/getEncryptionConfig`, { params: params });\n    });\n  }\n\n  setLifecycle(bucket_name: string, lifecycle: string, owner: string, tenant: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_name: bucket_name,\n        lifecycle: lifecycle,\n        owner: owner,\n        tenant: tenant\n      });\n      return this.http.put(`${this.url}/lifecycle`, null, { params: params });\n    });\n  }\n\n  getLifecycle(bucket_name: string, owner: string, tenant: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_name: bucket_name,\n        owner: owner,\n        tenant: tenant\n      });\n      return this.http.get(`${this.url}/lifecycle`, { params: params });\n    });\n  }\n  updateBucketRateLimit(bid: string, bucketRateLimitArgs: RgwRateLimitConfig) {\n    return this.http.put(`${this.url}/${bid}/ratelimit`, bucketRateLimitArgs);\n  }\n  getBucketRateLimit(uid: string) {\n    return this.http.get(`${this.url}/${uid}/ratelimit`);\n  }\n  getGlobalBucketRateLimit() {\n    return this.http.get(`${this.url}/ratelimit`);\n  }\n\n  listNotification(bucket_name: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_name: bucket_name\n      });\n      return this.http.get(`${this.url}/notification`, { params: params });\n    });\n  }\n\n  setNotification(bucket_name: string, notification: string, owner: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_name: bucket_name,\n        notification: notification,\n        owner: owner\n      });\n      return this.http.put(`${this.url}/notification`, null, { params: params });\n    });\n  }\n\n  deleteNotification(bucket_name: string, notification_id: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        bucket_name: bucket_name,\n        notification_id: notification_id\n      });\n      return this.http.delete(`${this.url}/notification`, { params });\n    });\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { mergeMap, take, tap } from 'rxjs/operators';\n\nimport { RgwDaemon } from '~/app/ceph/rgw/models/rgw-daemon';\nimport { cdEncode } from '~/app/shared/decorators/cd-encode';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwDaemonService {\n  private url = 'api/rgw/daemon';\n  private daemons = new BehaviorSubject<RgwDaemon[]>([]);\n  daemons$ = this.daemons.asObservable();\n  private selectedDaemon = new BehaviorSubject<RgwDaemon>(null);\n  selectedDaemon$ = this.selectedDaemon.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  list(): Observable<RgwDaemon[]> {\n    return this.http.get<RgwDaemon[]>(this.url).pipe(\n      tap((daemons: RgwDaemon[]) => {\n        this.daemons.next(daemons);\n        const selectedDaemon = this.selectedDaemon.getValue();\n        // Set or re-select the default daemon if the current one is not\n        // in the list anymore.\n        if (_.isEmpty(selectedDaemon) || undefined === _.find(daemons, { id: selectedDaemon.id })) {\n          this.selectDefaultDaemon(daemons);\n        }\n      })\n    );\n  }\n\n  get(id: string) {\n    return this.http.get(`${this.url}/${id}`);\n  }\n\n  selectDaemon(daemon: RgwDaemon) {\n    this.selectedDaemon.next(daemon);\n  }\n\n  private selectDefaultDaemon(daemons: RgwDaemon[]): RgwDaemon {\n    if (daemons.length === 0) {\n      return null;\n    }\n\n    for (const daemon of daemons) {\n      if (daemon.default) {\n        this.selectDaemon(daemon);\n        return daemon;\n      }\n    }\n\n    this.selectDaemon(daemons[0]);\n    return daemons[0];\n  }\n\n  request(next: (params: HttpParams) => Observable<any>) {\n    return this.selectedDaemon.pipe(\n      mergeMap((daemon: RgwDaemon) =>\n        // If there is no selected daemon, retrieve daemon list so default daemon will be selected.\n        _.isEmpty(daemon)\n          ? this.list().pipe(\n              mergeMap((daemons) =>\n                _.isEmpty(daemons) ? throwError('No RGW daemons found!') : this.selectedDaemon$\n              )\n            )\n          : of(daemon)\n      ),\n      take(1),\n      mergeMap((daemon: RgwDaemon) => {\n        let params = new HttpParams();\n        params = params.append('daemon_name', daemon.id);\n        return next(params);\n      })\n    );\n  }\n\n  setMultisiteConfig(realm_name: string, zonegroup_name: string, zone_name: string) {\n    return this.request((params: HttpParams) => {\n      params = params.appendAll({\n        realm_name: realm_name,\n        zonegroup_name: zonegroup_name,\n        zone_name: zone_name\n      });\n      return this.http.put(`${this.url}/set_multisite_config`, null, { params: params });\n    });\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RgwRealm, RgwZone, RgwZonegroup } from '~/app/ceph/rgw/models/rgw-multisite';\nimport { RgwDaemonService } from './rgw-daemon.service';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MgrModuleInfo } from '../models/mgr-modules.interface';\nimport { RGW } from '~/app/ceph/rgw/utils/constants';\nimport { MgrModuleService } from './mgr-module.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwMultisiteService {\n  private uiUrl = 'ui-api/rgw/multisite';\n  private url = 'api/rgw/multisite';\n\n  private restartGatewayMessageSource = new BehaviorSubject<boolean>(null);\n  restartGatewayMessage$ = this.restartGatewayMessageSource.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    public rgwDaemonService: RgwDaemonService,\n    private mgrModuleService: MgrModuleService\n  ) {}\n\n  migrate(realm: RgwRealm, zonegroup: RgwZonegroup, zone: RgwZone, username: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.appendAll({\n        realm_name: realm.name,\n        zonegroup_name: zonegroup.name,\n        zone_name: zone.name,\n        zonegroup_endpoints: zonegroup.endpoints,\n        zone_endpoints: zone.endpoints,\n        username: username\n      });\n      return this.http.put(`${this.uiUrl}/migrate`, null, { params: params });\n    });\n  }\n\n  getSyncStatus() {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/sync_status`, { params: params });\n    });\n  }\n\n  status() {\n    return this.http.get(`${this.uiUrl}/status`);\n  }\n\n  getSyncPolicy(bucketName?: string, zonegroup?: string, fetchAllPolicy = false) {\n    let params = new HttpParams();\n    if (bucketName) {\n      params = params.append('bucket_name', bucketName);\n    }\n    if (zonegroup) {\n      params = params.append('zonegroup_name', zonegroup);\n    }\n    // fetchAllPolicy - if true, will fetch all the policy either linked or not linked with the buckets\n    params = params.append('all_policy', fetchAllPolicy);\n    return this.http.get(`${this.url}/sync-policy`, { params });\n  }\n\n  getSyncPolicyGroup(group_id: string, bucket_name?: string) {\n    let params = new HttpParams();\n    if (bucket_name) {\n      params = params.append('bucket_name', bucket_name);\n    }\n    return this.http.get(`${this.url}/sync-policy-group/${group_id}`, { params });\n  }\n\n  createSyncPolicyGroup(payload: { group_id: string; status: string; bucket_name?: string }) {\n    return this.http.post(`${this.url}/sync-policy-group`, payload);\n  }\n\n  modifySyncPolicyGroup(payload: { group_id: string; status: string; bucket_name?: string }) {\n    return this.http.put(`${this.url}/sync-policy-group`, payload);\n  }\n\n  removeSyncPolicyGroup(group_id: string, bucket_name?: string) {\n    let params = new HttpParams();\n    if (bucket_name) {\n      params = params.append('bucket_name', bucket_name);\n    }\n    return this.http.delete(`${this.url}/sync-policy-group/${group_id}`, { params });\n  }\n\n  setUpMultisiteReplication(\n    realmName: string,\n    zonegroupName: string,\n    zonegroupEndpoints: string,\n    zoneName: string,\n    zoneEndpoints: string,\n    username: string,\n    cluster?: string,\n    replicationZoneName?: string,\n    clusterDetailsArray?: any,\n    selectedRealmName?: string\n  ) {\n    let params = new HttpParams()\n      .set('realm_name', realmName)\n      .set('zonegroup_name', zonegroupName)\n      .set('zonegroup_endpoints', zonegroupEndpoints)\n      .set('zone_name', zoneName)\n      .set('zone_endpoints', zoneEndpoints)\n      .set('username', username);\n\n    if (cluster) {\n      params = params.set('cluster_fsid', cluster);\n    }\n\n    if (clusterDetailsArray) {\n      params = params.set('cluster_details', JSON.stringify(clusterDetailsArray));\n    }\n\n    if (replicationZoneName) {\n      params = params.set('replication_zone_name', replicationZoneName);\n    }\n\n    if (selectedRealmName) {\n      params = params.set('selectedRealmName', selectedRealmName);\n    }\n\n    return this.http.post(`${this.uiUrl}/multisite-replications`, null, { params: params });\n  }\n\n  createEditSyncFlow(payload: any) {\n    return this.http.put(`${this.url}/sync-flow`, payload);\n  }\n\n  removeSyncFlow(flow_id: string, flow_type: string, group_id: string, bucket_name?: string) {\n    let params = new HttpParams();\n    if (bucket_name) {\n      params = params.append('bucket_name', encodeURIComponent(bucket_name));\n    }\n    return this.http.delete(\n      `${this.url}/sync-flow/${encodeURIComponent(flow_id)}/${flow_type}/${encodeURIComponent(\n        group_id\n      )}`,\n      { params }\n    );\n  }\n\n  createEditSyncPipe(payload: any, user?: string, mode?: string) {\n    let params = new HttpParams();\n    if (user) {\n      params = params.append('user', user);\n    }\n    if (mode) {\n      params = params.append('mode', mode);\n    }\n    return this.http.put(`${this.url}/sync-pipe`, payload, { params });\n  }\n\n  removeSyncPipe(pipe_id: string, group_id: string, bucket_name?: string) {\n    let params = new HttpParams();\n    if (bucket_name) {\n      params = params.append('bucket_name', encodeURIComponent(bucket_name));\n    }\n    return this.http.delete(\n      `${this.url}/sync-pipe/${encodeURIComponent(group_id)}/${encodeURIComponent(pipe_id)}`,\n      { params }\n    );\n  }\n\n  setRestartGatewayMessage(value: boolean): void {\n    this.restartGatewayMessageSource.next(value);\n  }\n\n  getRgwModuleStatus(): Observable<boolean> {\n    return this.mgrModuleService.list().pipe(\n      map((moduleData: MgrModuleInfo[]) => {\n        const rgwModule = moduleData.find((module) => module.name === RGW);\n        return !!rgwModule?.enabled;\n      })\n    );\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RgwRealm } from '~/app/ceph/rgw/models/rgw-multisite';\nimport { Icons } from '../enum/icons.enum';\nimport { RgwDaemonService } from './rgw-daemon.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwRealmService {\n  private url = 'api/rgw/realm';\n\n  constructor(private http: HttpClient, public rgwDaemonService: RgwDaemonService) {}\n\n  create(realm: RgwRealm, defaultRealm: boolean) {\n    let requestBody = {\n      realm_name: realm.name,\n      default: defaultRealm\n    };\n    return this.http.post(`${this.url}`, requestBody);\n  }\n\n  update(realm: RgwRealm, defaultRealm: boolean, newRealmName: string) {\n    let requestBody = {\n      realm_name: realm.name,\n      default: defaultRealm,\n      new_realm_name: newRealmName\n    };\n    return this.http.put(`${this.url}/${realm.name}`, requestBody);\n  }\n\n  list(replicable?: boolean): Observable<object> {\n    let params = new HttpParams();\n    if (replicable) {\n      params = params.appendAll({\n        replicable: replicable.toString()\n      });\n    }\n    return this.http.get<object>(`${this.url}`, { params });\n  }\n\n  get(realm: RgwRealm): Observable<object> {\n    return this.http.get(`${this.url}/${realm.name}`);\n  }\n\n  getAllRealmsInfo(): Observable<object> {\n    return this.http.get(`${this.url}/get_all_realms_info`);\n  }\n\n  delete(realmName: string): Observable<any> {\n    let params = new HttpParams();\n    params = params.appendAll({\n      realm_name: realmName\n    });\n    return this.http.delete(`${this.url}/${realmName}`, { params: params });\n  }\n\n  getRealmTree(realm: RgwRealm, defaultRealmId: string) {\n    let nodes = {};\n    let realmIds = [];\n    nodes['id'] = realm.id;\n    realmIds.push(realm.id);\n    nodes['name'] = realm.name;\n    nodes['info'] = realm;\n    nodes['is_default'] = realm.id === defaultRealmId ? true : false;\n    nodes['icon'] = Icons.reweight;\n    nodes['type'] = 'realm';\n    return {\n      nodes: nodes,\n      realmIds: realmIds\n    };\n  }\n\n  importRealmToken(realm_token: string, zone_name: string, port: number, placementSpec: object) {\n    let requestBody = {\n      realm_token: realm_token,\n      zone_name: zone_name,\n      port: port,\n      placement_spec: placementSpec\n    };\n    return this.http.post(`${this.url}/import_realm_token`, requestBody);\n  }\n\n  getRealmTokens() {\n    return this.rgwDaemonService.request(() => {\n      return this.http.get(`${this.url}/get_realm_tokens`);\n    });\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { RgwDaemon } from '~/app/ceph/rgw/models/rgw-daemon';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { cdEncode } from '~/app/shared/decorators/cd-encode';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwSiteService {\n  private url = 'api/rgw/site';\n\n  constructor(private http: HttpClient, private rgwDaemonService: RgwDaemonService) {}\n\n  get(query?: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      if (query) {\n        params = params.append('query', query);\n      }\n      return this.http.get(this.url, { params: params });\n    });\n  }\n\n  isDefaultRealm(): Observable<boolean> {\n    return this.get('default-realm').pipe(\n      mergeMap((defaultRealm: string) =>\n        this.rgwDaemonService.selectedDaemon$.pipe(\n          map((selectedDaemon: RgwDaemon) => selectedDaemon.realm_name === defaultRealm)\n        )\n      )\n    );\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin, Observable, of as observableOf } from 'rxjs';\nimport { catchError, mapTo, mergeMap } from 'rxjs/operators';\nimport { RgwRateLimitConfig } from '~/app/ceph/rgw/models/rgw-rate-limit';\n\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { cdEncode } from '~/app/shared/decorators/cd-encode';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwUserService {\n  private url = 'api/rgw/user';\n\n  constructor(private http: HttpClient, private rgwDaemonService: RgwDaemonService) {}\n\n  /**\n   * Get the list of users.\n   * @return {Observable<Object[]>}\n   */\n  list() {\n    return this.enumerate().pipe(\n      mergeMap((uids: string[]) => {\n        if (uids.length > 0) {\n          return observableForkJoin(\n            uids.map((uid: string) => {\n              return this.get(uid);\n            })\n          );\n        }\n        return observableOf([]);\n      })\n    );\n  }\n\n  /**\n   * Get the list of usernames.\n   * @return {Observable<string[]>}\n   */\n  enumerate(detailed: boolean = false) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('detailed', detailed);\n      return this.http.get(this.url, { params });\n    });\n  }\n\n  enumerateEmail() {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/get_emails`, { params: params });\n    });\n  }\n\n  get(uid: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/${uid}`, { params: params });\n    });\n  }\n\n  getQuota(uid: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.get(`${this.url}/${uid}/quota`, { params: params });\n    });\n  }\n\n  create(args: Record<string, any>) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      _.keys(args).forEach((key) => {\n        if (typeof args[key] === 'object') {\n          args[key] = JSON.stringify(args[key]);\n        }\n        params = params.append(key, args[key]);\n      });\n      return this.http.post(this.url, null, { params: params });\n    });\n  }\n\n  update(uid: string, args: Record<string, any>) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      _.keys(args).forEach((key) => {\n        if (typeof args[key] === 'object') {\n          args[key] = JSON.stringify(args[key]);\n        }\n        params = params.append(key, args[key]);\n      });\n      return this.http.put(`${this.url}/${uid}`, null, { params: params });\n    });\n  }\n\n  updateQuota(uid: string, args: Record<string, string>) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      _.keys(args).forEach((key) => {\n        params = params.append(key, args[key]);\n      });\n      return this.http.put(`${this.url}/${uid}/quota`, null, { params: params });\n    });\n  }\n\n  delete(uid: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.delete(`${this.url}/${uid}`, { params: params });\n    });\n  }\n\n  createSubuser(uid: string, args: Record<string, string>) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      _.keys(args).forEach((key) => {\n        params = params.append(key, args[key]);\n      });\n      return this.http.post(`${this.url}/${uid}/subuser`, null, { params: params });\n    });\n  }\n\n  deleteSubuser(uid: string, subuser: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      return this.http.delete(`${this.url}/${uid}/subuser/${subuser}`, { params: params });\n    });\n  }\n\n  addCapability(uid: string, type: string, perm: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('type', type);\n      params = params.append('perm', perm);\n      return this.http.post(`${this.url}/${uid}/capability`, null, { params: params });\n    });\n  }\n\n  deleteCapability(uid: string, type: string, perm: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('type', type);\n      params = params.append('perm', perm);\n      return this.http.delete(`${this.url}/${uid}/capability`, { params: params });\n    });\n  }\n\n  addS3Key(uid: string, args: Record<string, string>) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('key_type', 's3');\n      _.keys(args).forEach((key) => {\n        params = params.append(key, args[key]);\n      });\n      return this.http.post(`${this.url}/${uid}/key`, null, { params: params });\n    });\n  }\n\n  deleteS3Key(uid: string, accessKey: string) {\n    return this.rgwDaemonService.request((params: HttpParams) => {\n      params = params.append('key_type', 's3');\n      params = params.append('access_key', accessKey);\n      return this.http.delete(`${this.url}/${uid}/key`, { params: params });\n    });\n  }\n\n  /**\n   * Check if the specified user ID exists.\n   * @param {string} uid The user ID to check.\n   * @return {Observable<boolean>}\n   */\n  exists(uid: string): Observable<boolean> {\n    return this.get(uid).pipe(\n      mapTo(true),\n      catchError((error: Event) => {\n        if (_.isFunction(error.preventDefault)) {\n          error.preventDefault();\n        }\n        return observableOf(false);\n      })\n    );\n  }\n\n  // Using @cdEncodeNot would be the preferred way here, but this\n  // causes an error: https://tracker.ceph.com/issues/37505\n  // Use decodeURIComponent as workaround.\n  // emailExists(@cdEncodeNot email: string): Observable<boolean> {\n  emailExists(email: string): Observable<boolean> {\n    email = decodeURIComponent(email);\n    return this.enumerateEmail().pipe(\n      mergeMap((resp: any[]) => {\n        const index = _.indexOf(resp, email);\n        return observableOf(-1 !== index);\n      })\n    );\n  }\n\n  updateUserRateLimit(uid: string, rateLimitArgs: RgwRateLimitConfig) {\n    return this.http.put(`${this.url}/${uid}/ratelimit`, rateLimitArgs);\n  }\n\n  getUserRateLimit(uid: string) {\n    return this.http.get(`${this.url}/${uid}/ratelimit`);\n  }\n  getGlobalUserRateLimit() {\n    return this.http.get(`${this.url}/ratelimit`);\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RgwRealm, RgwZone, RgwZonegroup } from '~/app/ceph/rgw/models/rgw-multisite';\nimport { Icons } from '../enum/icons.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwZoneService {\n  private url = 'api/rgw/zone';\n\n  constructor(private http: HttpClient) {}\n\n  create(\n    zone: RgwZone,\n    zonegroup: RgwZonegroup,\n    defaultZone: boolean,\n    master: boolean,\n    endpoints: string\n  ) {\n    let params = new HttpParams();\n    params = params.appendAll({\n      zone_name: zone.name,\n      zonegroup_name: zonegroup.name,\n      default: defaultZone,\n      master: master,\n      zone_endpoints: endpoints,\n      access_key: zone.system_key.access_key,\n      secret_key: zone.system_key.secret_key\n    });\n    return this.http.post(`${this.url}`, null, { params: params });\n  }\n\n  list(): Observable<object> {\n    return this.http.get<object>(`${this.url}`);\n  }\n\n  get(zone: RgwZone): Observable<object> {\n    return this.http.get(`${this.url}/${zone.name}`);\n  }\n\n  getAllZonesInfo(): Observable<object> {\n    return this.http.get(`${this.url}/get_all_zones_info`);\n  }\n\n  delete(\n    zoneName: string,\n    deletePools: boolean,\n    pools: Set<string>,\n    zonegroupName: string\n  ): Observable<any> {\n    let params = new HttpParams();\n    params = params.appendAll({\n      zone_name: zoneName,\n      delete_pools: deletePools,\n      pools: Array.from(pools.values()),\n      zonegroup_name: zonegroupName\n    });\n    return this.http.delete(`${this.url}/${zoneName}`, { params: params });\n  }\n\n  update(\n    zone: RgwZone,\n    zonegroup: RgwZonegroup,\n    newZoneName: string,\n    defaultZone?: boolean,\n    master?: boolean,\n    endpoints?: string,\n    placementTarget?: string,\n    dataPool?: string,\n    indexPool?: string,\n    dataExtraPool?: string,\n    storageClass?: string,\n    dataPoolClass?: string,\n    compression?: string\n  ) {\n    let requestBody = {\n      zone_name: zone.name,\n      zonegroup_name: zonegroup.name,\n      new_zone_name: newZoneName,\n      default: defaultZone,\n      master: master,\n      zone_endpoints: endpoints,\n      access_key: zone.system_key.access_key,\n      secret_key: zone.system_key.secret_key,\n      placement_target: placementTarget,\n      data_pool: dataPool,\n      index_pool: indexPool,\n      data_extra_pool: dataExtraPool,\n      storage_class: storageClass,\n      data_pool_class: dataPoolClass,\n      compression: compression\n    };\n    return this.http.put(`${this.url}/${zone.name}`, requestBody);\n  }\n\n  getZoneTree(\n    zone: RgwZone,\n    defaultZoneId: string,\n    zones: RgwZone[],\n    zonegroup?: RgwZonegroup,\n    realm?: RgwRealm\n  ) {\n    let nodes = {};\n    let zoneIds = [];\n    nodes['id'] = zone.id;\n    zoneIds.push(zone.id);\n    nodes['name'] = zone.name;\n    nodes['type'] = 'zone';\n    nodes['name'] = zone.name;\n    nodes['info'] = zone;\n    nodes['icon'] = Icons.deploy;\n    nodes['zone_zonegroup'] = zonegroup;\n    nodes['parent'] = zonegroup ? zonegroup.name : '';\n    nodes['second_parent'] = realm ? realm.name : '';\n    nodes['is_default'] = zone.id === defaultZoneId ? true : false;\n    nodes['endpoints'] = zone.endpoints;\n    nodes['is_master'] = zonegroup && zonegroup.master_zone === zone.id ? true : false;\n    nodes['type'] = 'zone';\n    const zoneNames = zones.map((zone: RgwZone) => {\n      return zone['name'];\n    });\n    nodes['secondary_zone'] = !zoneNames.includes(zone.name) ? true : false;\n    const zoneInfo = zones.filter((zoneInfo) => zoneInfo.name === zone.name);\n    if (zoneInfo && zoneInfo.length > 0) {\n      const access_key = zoneInfo[0].system_key['access_key'];\n      const secret_key = zoneInfo[0].system_key['secret_key'];\n      nodes['access_key'] = access_key ? access_key : '';\n      nodes['secret_key'] = secret_key ? secret_key : '';\n      nodes['user'] = access_key && access_key !== '' ? true : false;\n    }\n    if (nodes['access_key'] === '' || nodes['access_key'] === 'null') {\n      nodes['show_warning'] = true;\n      nodes['warning_message'] = 'Access/Secret keys not found';\n    } else {\n      nodes['show_warning'] = false;\n    }\n    if (nodes['endpoints'] && nodes['endpoints'].length === 0) {\n      nodes['show_warning'] = true;\n      nodes['warning_message'] = nodes['warning_message'] + '\\n' + 'Endpoints not configured';\n    }\n    return {\n      nodes: nodes,\n      zoneIds: zoneIds\n    };\n  }\n\n  getPoolNames() {\n    return this.http.get(`${this.url}/get_pool_names`);\n  }\n\n  createSystemUser(userName: string, zone: string) {\n    let requestBody = {\n      userName: userName,\n      zoneName: zone\n    };\n    return this.http.put(`${this.url}/create_system_user`, requestBody);\n  }\n\n  getUserList(zoneName: string) {\n    let params = new HttpParams();\n    params = params.appendAll({\n      zoneName: zoneName\n    });\n    return this.http.get(`${this.url}/get_user_list`, { params: params });\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RgwRealm, RgwZonegroup } from '~/app/ceph/rgw/models/rgw-multisite';\nimport { Icons } from '../enum/icons.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RgwZonegroupService {\n  private url = 'api/rgw/zonegroup';\n\n  constructor(private http: HttpClient) {}\n\n  create(realm: RgwRealm, zonegroup: RgwZonegroup, defaultZonegroup: boolean, master: boolean) {\n    let params = new HttpParams();\n    params = params.appendAll({\n      realm_name: realm.name,\n      zonegroup_name: zonegroup.name,\n      default: defaultZonegroup,\n      master: master,\n      zonegroup_endpoints: zonegroup.endpoints\n    });\n    return this.http.post(`${this.url}`, null, { params: params });\n  }\n\n  update(\n    realm: RgwRealm,\n    zonegroup: RgwZonegroup,\n    newZonegroupName: string,\n    defaultZonegroup?: boolean,\n    master?: boolean,\n    removedZones?: string[],\n    addedZones?: string[]\n  ) {\n    let requestBody = {\n      zonegroup_name: zonegroup.name,\n      realm_name: realm.name,\n      new_zonegroup_name: newZonegroupName,\n      default: defaultZonegroup,\n      master: master,\n      zonegroup_endpoints: zonegroup.endpoints,\n      placement_targets: zonegroup.placement_targets,\n      remove_zones: removedZones,\n      add_zones: addedZones\n    };\n    return this.http.put(`${this.url}/${zonegroup.name}`, requestBody);\n  }\n\n  list(): Observable<object> {\n    return this.http.get<object>(`${this.url}`);\n  }\n\n  get(zonegroup: RgwZonegroup): Observable<object> {\n    return this.http.get(`${this.url}/${zonegroup.name}`);\n  }\n\n  getAllZonegroupsInfo(): Observable<object> {\n    return this.http.get(`${this.url}/get_all_zonegroups_info`);\n  }\n\n  delete(zonegroupName: string, deletePools: boolean, pools: Set<string>): Observable<any> {\n    let params = new HttpParams();\n    params = params.appendAll({\n      zonegroup_name: zonegroupName,\n      delete_pools: deletePools,\n      pools: Array.from(pools.values())\n    });\n    return this.http.delete(`${this.url}/${zonegroupName}`, { params: params });\n  }\n\n  getZonegroupTree(zonegroup: RgwZonegroup, defaultZonegroupId: string, realm?: RgwRealm) {\n    let nodes = {};\n    nodes['id'] = zonegroup.id;\n    nodes['name'] = zonegroup.name;\n    nodes['info'] = zonegroup;\n    nodes['icon'] = Icons.cubes;\n    nodes['is_master'] = zonegroup.is_master;\n    nodes['parent'] = realm ? realm.name : '';\n    nodes['is_default'] = zonegroup.id === defaultZonegroupId ? true : false;\n    nodes['type'] = 'zonegroup';\n    nodes['endpoints'] = zonegroup.endpoints;\n    nodes['master_zone'] = zonegroup.master_zone;\n    nodes['zones'] = zonegroup.zones;\n    nodes['placement_targets'] = zonegroup.placement_targets;\n    nodes['default_placement'] = zonegroup.default_placement;\n    if (nodes['endpoints'].length === 0) {\n      nodes['show_warning'] = true;\n      nodes['warning_message'] = 'Endpoints not configured';\n    }\n    return nodes;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nclass SettingResponse {\n  name: string;\n  default: any;\n  type: string;\n  value: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  constructor(private http: HttpClient) {}\n\n  private settings: { [url: string]: string } = {};\n\n  getValues(names: string | string[]): Observable<{ [key: string]: any }> {\n    if (_.isArray(names)) {\n      names = names.join(',');\n    }\n    return this.http.get(`api/settings?names=${names}`).pipe(\n      map((resp: SettingResponse[]) => {\n        const result = {};\n        _.forEach(resp, (option: SettingResponse) => {\n          _.set(result, option.name, option.value);\n        });\n        return result;\n      })\n    );\n  }\n\n  ifSettingConfigured(\n    url: string,\n    fn: (value?: string) => void,\n    elseFn?: () => void,\n    forceRefresh = false\n  ): void {\n    const setting = this.settings[url];\n    if (forceRefresh || setting === undefined) {\n      this.http.get(url).subscribe(\n        (data: any) => {\n          this.settings[url] = this.getSettingsValue(data);\n          this.ifSettingConfigured(url, fn, elseFn);\n        },\n        (resp) => {\n          if (resp.status !== 401) {\n            this.settings[url] = '';\n          }\n        }\n      );\n    } else if (setting !== '') {\n      fn(setting);\n    } else {\n      if (elseFn) {\n        elseFn();\n      }\n    }\n  }\n\n  // Easiest way to stop reloading external content that can't be reached\n  disableSetting(url: string) {\n    this.settings[url] = '';\n  }\n\n  private getSettingsValue(data: any): string {\n    return data.value || data.instance || '';\n  }\n\n  validateGrafanaDashboardUrl(uid: string) {\n    return this.http.get(`api/grafana/validation/${uid}`);\n  }\n\n  getStandardSettings(): Observable<{ [key: string]: any }> {\n    return this.http.get('ui-api/standard_settings');\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { catchError, mapTo } from 'rxjs/operators';\n\nimport { UserFormModel } from '~/app/core/auth/user-form/user-form.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  list() {\n    return this.http.get('api/user');\n  }\n\n  delete(username: string) {\n    return this.http.delete(`api/user/${username}`);\n  }\n\n  get(username: string) {\n    return this.http.get(`api/user/${username}`);\n  }\n\n  create(user: UserFormModel) {\n    return this.http.post(`api/user`, user);\n  }\n\n  update(user: UserFormModel) {\n    return this.http.put(`api/user/${user.username}`, user);\n  }\n\n  changePassword(username: string, oldPassword: string, newPassword: string) {\n    // Note, the specified user MUST be logged in to be able to change\n    // the password. The backend ensures that the password of another\n    // user can not be changed, otherwise an error will be thrown.\n    return this.http.post(`api/user/${username}/change_password`, {\n      old_password: oldPassword,\n      new_password: newPassword\n    });\n  }\n\n  validateUserName(user_name: string): Observable<boolean> {\n    return this.get(user_name).pipe(\n      mapTo(true),\n      catchError((error) => {\n        error.preventDefault();\n        return observableOf(false);\n      })\n    );\n  }\n\n  validatePassword(password: string, username: string = null, oldPassword: string = null) {\n    return this.http.post('api/user/validate_password', {\n      password: password,\n      username: username,\n      old_password: oldPassword\n    });\n  }\n}\n","import _ from 'lodash';\n\nexport class CdHelperClass {\n  /**\n   * Simple way to only update variables if they have really changed and not just the reference\n   *\n   * @param componentThis - In order to update the variables if necessary\n   * @param change - The variable name (attribute of the object) is followed by the current value\n   *                 it would update even if it equals\n   */\n  static updateChanged(componentThis: any, change: { [publicVarName: string]: any }) {\n    let hasChanges = false;\n\n    Object.keys(change).forEach((publicVarName) => {\n      const data = change[publicVarName];\n      if (!_.isEqual(data, componentThis[publicVarName])) {\n        componentThis[publicVarName] = data;\n        hasChanges = true;\n      }\n    });\n\n    return hasChanges;\n  }\n\n  static cdVersionHeader(major_ver: string, minor_ver: string) {\n    return `application/vnd.ceph.api.v${major_ver}.${minor_ver}+json`;\n  }\n}\n","export class CssHelper {\n  /**\n   * Gets the value of a CSS custom property (CSS variable).\n   * @param propertyName The name of the variable without `--`.\n   * @param element Optional: HTMLElement to scope the variable lookup. Defaults to `document.body`.\n   */\n  propertyValue(propertyName: string, element?: HTMLElement): string {\n    const target = element ?? document.body;\n    return getComputedStyle(target).getPropertyValue(`--${propertyName}`);\n  }\n}\n","import { NgZone } from '@angular/core';\n\nimport { TableStatus } from './table-status';\n\nexport class ListWithDetails {\n  expandedRow: any;\n  staleTimeout: number;\n  tableStatus: TableStatus;\n\n  constructor(protected ngZone?: NgZone) {}\n\n  setExpandedRow(expandedRow: any) {\n    this.expandedRow = expandedRow;\n  }\n\n  setTableRefreshTimeout() {\n    clearTimeout(this.staleTimeout);\n    this.ngZone.runOutsideAngular(() => {\n      this.staleTimeout = window.setTimeout(() => {\n        this.ngZone.run(() => {\n          this.tableStatus = new TableStatus(\n            'secondary',\n            $localize`The user list data might be stale. If needed, you can manually reload it.`\n          );\n        });\n      }, 10000);\n    });\n  }\n}\n","import { ViewCacheStatus } from '../enum/view-cache-status.enum';\nimport { TableStatus } from './table-status';\n\nexport class TableStatusViewCache extends TableStatus {\n  constructor(status: ViewCacheStatus = ViewCacheStatus.ValueOk, statusFor: string = '') {\n    super();\n\n    switch (status) {\n      case ViewCacheStatus.ValueOk:\n        this.type = 'ghost';\n        this.msg = '';\n        break;\n      case ViewCacheStatus.ValueNone:\n        this.type = 'primary';\n        this.msg =\n          (statusFor ? $localize`Retrieving data for ${statusFor}.` : $localize`Retrieving data.`) +\n          ' ' +\n          $localize`Please wait...`;\n        break;\n      case ViewCacheStatus.ValueStale:\n        this.type = 'secondary';\n        this.msg = statusFor\n          ? $localize`Displaying previously cached data for ${statusFor}.`\n          : $localize`Displaying previously cached data.`;\n        break;\n      case ViewCacheStatus.ValueException:\n        this.type = 'danger';\n        this.msg =\n          (statusFor\n            ? $localize`Could not load data for ${statusFor}.`\n            : $localize`Could not load data.`) +\n          ' ' +\n          $localize`Please check the cluster health.`;\n        break;\n    }\n  }\n}\n","export class TableStatus {\n  constructor(\n    public type: 'primary' | 'secondary' | 'danger' | 'ghost' = 'ghost',\n    public msg = ''\n  ) {}\n}\n","<cds-actionable-notification class=\"mb-1 content-theme\"\n                             [ngClass]=\"spacingClass\"\n                             [notificationObj]=\"notificationContent\"\n                             (close)=\"onClose()\"></cds-actionable-notification>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template #actionTpl>\n  <button cdsActionableButton\n          cdsButton=\"ghost\"\n          size=\"md\"\n          [title]=\"actionName\"\n          (click)=\"onAction()\"\n          *ngIf=\"actionName\"\n          i18n>{{ actionName }}\n  </button>\n</ng-template>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { NotificationContent, NotificationType } from 'carbon-components-angular';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-alert-panel',\n  templateUrl: './alert-panel.component.html',\n  styleUrls: ['./alert-panel.component.scss']\n})\nexport class AlertPanelComponent implements OnInit {\n  @ViewChild('content', { static: true })\n  alertContent: TemplateRef<any>;\n  @ViewChild('actionTpl', { static: true })\n  actionTpl: TemplateRef<any>;\n\n  @Input()\n  title = '';\n  @Input()\n  type: 'warning' | 'error' | 'info' | 'success' | 'danger';\n  @Input()\n  showTitle = true;\n  @Input()\n  size: 'slim' | 'normal' = 'normal';\n  @Input()\n  dismissible = false;\n  @Input()\n  spacingClass = '';\n  @Input()\n  actionName = '';\n  @Input()\n  lowContrast = true;\n  @Input()\n  variant: 'toast' | 'inline' = 'inline';\n\n  /**\n   * The event that is triggered when the close button (x) has been\n   * pressed.\n   */\n  @Output()\n  dismissed = new EventEmitter();\n\n  /**\n   * The event that is triggered when the action button has been\n   * pressed.\n   */\n  @Output()\n  action = new EventEmitter();\n\n  icons = Icons;\n\n  notificationContent: NotificationContent;\n\n  ngOnInit() {\n    const type: NotificationType = this.type === 'danger' ? 'error' : this.type;\n    switch (this.type) {\n      case 'warning':\n        this.title = this.title || $localize`Warning`;\n        break;\n      case 'error':\n        this.title = this.title || $localize`Error`;\n        break;\n      case 'info':\n        this.title = this.title || $localize`Information`;\n        break;\n      case 'success':\n        this.title = this.title || $localize`Success`;\n        break;\n      case 'danger':\n        this.title = this.title || $localize`Danger`;\n        break;\n    }\n\n    this.notificationContent = {\n      type: type,\n      template: this.alertContent,\n      actionsTemplate: this.actionTpl,\n      showClose: this.dismissible,\n      title: this.showTitle ? this.title : '',\n      lowContrast: this.lowContrast,\n      variant: this.variant\n    };\n  }\n\n  onClose(): void {\n    this.dismissed.emit();\n  }\n\n  onAction(): void {\n    this.action.emit();\n  }\n}\n","import { Location } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\n\n@Component({\n  selector: 'cd-back-button',\n  templateUrl: './back-button.component.html',\n  styleUrls: ['./back-button.component.scss']\n})\nexport class BackButtonComponent implements OnInit {\n  @Output() backAction = new EventEmitter();\n  @Input() name?: string;\n  @Input() disabled = false;\n  @Input() modalForm = false;\n  @Input() showSubmit = false;\n\n  hasModalOutlet = false;\n\n  constructor(\n    private location: Location,\n    private actionLabels: ActionLabelsI18n,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.name = this.name || this.actionLabels.CANCEL;\n    this.hasModalOutlet = this.route.outlet === 'modal';\n  }\n\n  back() {\n    if (!this.disabled) {\n      if (this.backAction.observers.length === 0 || this.hasModalOutlet) {\n        this.location.back();\n      } else {\n        this.backAction.emit();\n      }\n    }\n  }\n}\n","<button class=\"w-100 tc_backButton\"\n        [ngClass]=\"{'w-100': modalForm && showSubmit, 'w-50 float-end': modalForm && !showSubmit}\"\n        aria-label=\"Back\"\n        (click)=\"back()\"\n        [disabled]=\"disabled\"\n        type=\"button\"\n        size=\"lg\"\n        cdsButton=\"secondary\">\n  {{ name }}\n</button>\n","export enum HardwareNameMapping {\n  memory = 'Memory',\n  storage = 'Drive',\n  processors = 'CPU',\n  network = 'Network',\n  power = 'Power supply',\n  fans = 'Fan module'\n}\n","<hr>\n<li class=\"list-group-item\">\n  <div class=\"d-flex pl-1 pb-2 pt-2 position-relative\">\n    <div class=\"ms-4 me-auto\">\n    @if (link && data !== null || total) {\n    <a [routerLink]=\"link\"\n       *ngIf=\"link && total > 0; else noLinkTitle\"\n       [ngPlural]=\"total\"\n      i18n>\n        {{ total }}\n      <ng-template ngPluralCase=\"=0\">{{ title }}</ng-template>\n      <ng-template ngPluralCase=\"=1\">{{ title }}</ng-template>\n      <ng-template ngPluralCase=\"other\">{{ title }}s</ng-template>\n    </a>\n    } @else {\n      <a [routerLink]=\"link\"\n         *ngIf=\"link; else noLinkTitle\">{{title}}\n      </a>\n    }\n    </div>\n    <span class=\"me-4\">\n      <ng-container [ngSwitch]=\"summaryType\">\n        <ng-container *ngSwitchCase=\"'iscsi'\">\n          <ng-container *ngTemplateOutlet=\"iscsiSummary\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'osd'\">\n          <ng-container *ngTemplateOutlet=\"osdSummary\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'simplified'\">\n          <ng-container *ngTemplateOutlet=\"simplifiedSummary\"></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngTemplateOutlet=\"defaultSummary\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </span>\n    <span *ngIf=\"dropdownData && dropdownData.total.total.total > 0\"\n          class=\"position-absolute end-0 me-2\">\n      <a (click)=\"toggleDropdown()\"\n         class=\"dropdown-toggle\"\n         [attr.aria-expanded]=\"dropdownToggled\"\n         aria-controls=\"row-dropdwon\"\n         role=\"button\"></a>\n    </span>\n  </div>\n</li>\n\n<div *ngIf=\"dropdownToggled\">\n  <hr>\n  <ng-container *ngTemplateOutlet=\"dropdownTemplate\"></ng-container>\n</div>\n\n<ng-template #defaultSummary>\n  @if (data === null) {\n  <ng-container *ngTemplateOutlet=\"loadingTpl\"></ng-container>\n  } @else {\n    <span *ngIf=\"data.success || data.categoryPgAmount?.clean || (data.success === 0 && data.total === 0)\">\n    <span *ngIf=\"data.success || (data.success === 0 && data.total === 0)\">\n      {{ data.success }}\n    </span>\n    <span *ngIf=\"data.categoryPgAmount?.clean\">\n      {{ data.categoryPgAmount?.clean }}\n    </span>\n    <cd-icon\n       type=\"success\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data.info\"\n        class=\"ms-2\">\n    <span *ngIf=\"data.info\">\n      {{ data.info }}\n    </span>\n    <cd-icon\n       type=\"infoCircle\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data.warn || data.categoryPgAmount?.warning\"\n        class=\"ms-2\">\n    <span *ngIf=\"data.warn\">\n      {{ data.warn }}\n    </span>\n    <span *ngIf=\"data.categoryPgAmount?.warning\">\n      {{ data.categoryPgAmount?.warning }}\n    </span>\n    <cd-icon\n       type=\"warning\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data.error || data.categoryPgAmount?.unknown\"\n        class=\"ms-2\">\n    <span *ngIf=\"data.error\">\n      {{ data.error }}\n    </span>\n    <span *ngIf=\"data.categoryPgAmount?.unknown\">\n      {{ data.categoryPgAmount?.unknown }}\n    </span>\n    <cd-icon\n       type=\"danger\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data.categoryPgAmount?.working\"\n        class=\"ms-2\">\n    <span *ngIf=\"data.categoryPgAmount?.working\">\n      {{ data.categoryPgAmount?.working }}\n    </span>\n    <i class=\"text-warning\"\n       [ngClass]=\"[icons.spinner, icons.spin]\">\n    </i>\n  </span>\n  }\n</ng-template>\n\n<ng-template #osdSummary>\n  @if (data === null) {\n  <ng-container *ngTemplateOutlet=\"loadingTpl\"></ng-container>\n  } @else {\n  <span *ngIf=\"data.up === data.in\">\n    {{ data.up }}\n    <cd-icon\n       type=\"success\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data.up !== data.in\">\n    {{ data.up }}\n    <span class=\"fw-bold text-success\">\n        up\n    </span>\n  </span>\n  <span *ngIf=\"data.in !== data.up\"\n        class=\"ms-2\">\n    {{ data.in }}\n    <span class=\"fw-bold text-success\">\n        in\n    </span>\n  </span>\n  <span *ngIf=\"data.down\"\n        class=\"ms-2\">\n    {{ data.down }}\n    <span class=\"fw-bold text-danger me-2\">\n        down\n    </span>\n  </span>\n  <span *ngIf=\"data.out\"\n        class=\"ms-2\">\n    {{ data.out }}\n    <span class=\"fw-bold text-danger me-2\">\n        out\n    </span>\n  </span>\n  <span *ngIf=\"data.nearfull\"\n        class=\"ms-2\">\n        {{ data.nearfull }}\n    <span class=\"fw-bold text-warning me-2\">\n      nearfull</span></span>\n  <span *ngIf=\"data.full\"\n        class=\"ms-2\">\n        {{ data.full }}\n    <span class=\"fw-bold text-danger\">\n      full\n    </span>\n  </span>\n  }\n</ng-template>\n\n<ng-template #iscsiSummary>\n  @if (data === null || total === null) {\n  <ng-container *ngTemplateOutlet=\"loadingTpl\"></ng-container>\n  } @else {\n  <span>\n    {{ data?.up }}\n    <cd-icon\n       *ngIf=\"data?.up || data?.up === 0\"\n       type=\"success\">\n    </cd-icon >\n  </span>\n  <span *ngIf=\"data?.down\"\n        class=\"ms-2\">\n        {{ data?.down }}\n    <cd-icon\n       type=\"danger\">\n    </cd-icon >\n  </span>\n\n  }\n</ng-template>\n\n<ng-template #simplifiedSummary>\n  @if (data === 0 || data) {\n  <span *ngIf=\"!dropdownTotalError else showErrorNum\">\n    {{ data }}\n    <cd-icon\n      type=\"success\"></cd-icon >\n  </span>\n  } @else {\n    <ng-container *ngTemplateOutlet=\"loadingTpl\"></ng-container>\n  }\n  <ng-template #showErrorNum>\n    <span *ngIf=\"data - dropdownTotalError  > 0\">\n      {{ data - dropdownTotalError  }}\n    <cd-icon\n      type=\"success\"></cd-icon >\n    </span>\n    <span>\n      {{ dropdownTotalError  }}\n      <cd-icon\n        type=\"danger\"></cd-icon >\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <cds-inline-loading></cds-inline-loading>\n</ng-template>\n\n<ng-template #noLinkTitle>\n@if (data !== null || total) {\n<span *ngIf=\"total || total === 0\"\n      [ngPlural]=\"total\">\n  {{ total }}\n  <ng-template ngPluralCase=\"=0\">{{ title }}</ng-template>\n  <ng-template ngPluralCase=\"=1\">{{ title }}</ng-template>\n  <ng-template ngPluralCase=\"other\">{{ title }}s</ng-template>\n</span>\n} @else {\n  <span>{{ title }}</span>\n}\n</ng-template>\n\n<ng-template #dropdownTemplate>\n  <ng-container *ngFor=\"let data of dropdownData?.total.category | keyvalue\">\n    <li class=\"list-group-item\">\n      <div class=\"d-flex pb-2 pt-2\">\n        <div class=\"ms-5 me-auto\">\n          <span *ngIf=\"data.value.total\"\n                [ngPlural]=\"data.value.total\"\n                i18n>\n              {{ data.value.total }}\n            <ng-template ngPluralCase=\"=0\">{{ hwNames[data.key] }}</ng-template>\n            <ng-template ngPluralCase=\"=1\">{{ hwNames[data.key] }}</ng-template>\n            <ng-template ngPluralCase=\"other\">{{ hwNames[data.key] | pluralize }}</ng-template>\n          </span>\n        </div>\n        <span [ngClass]=\"data.value.error ? 'me-2' : 'me-4'\">\n          {{ data.value.ok }}\n          <cd-icon\n             *ngIf=\"data.value.ok\"\n             type=\"success\">\n          </cd-icon >\n        </span>\n        <span *ngIf=\"data.value.error\"\n              class=\"me-4 ms-2\">\n              {{ data.value.error }}\n          <cd-icon\n             type=\"danger\">\n          </cd-icon >\n        </span>\n      </div>\n    </li>\n  </ng-container>\n</ng-template>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { HardwareNameMapping } from '~/app/shared/enum/hardware.enum';\n\n@Component({\n  selector: 'cd-card-row',\n  templateUrl: './card-row.component.html',\n  styleUrls: ['./card-row.component.scss']\n})\nexport class CardRowComponent implements OnChanges {\n  @Input()\n  title: string;\n\n  @Input()\n  link: string;\n\n  @Input()\n  data: any = null;\n\n  @Input()\n  summaryType = 'default';\n\n  @Input()\n  dropdownData: any;\n\n  hwNames = HardwareNameMapping;\n  icons = Icons;\n  total: number = null;\n  dropdownTotalError: number = 0;\n  dropdownToggled: boolean = false;\n\n  ngOnChanges(): void {\n    if (this.data?.total || this.data?.total === 0) {\n      this.total = this.data?.total;\n    } else if (this.summaryType === 'iscsi') {\n      this.total = this.data?.up + this.data?.down;\n    } else {\n      this.total = this.data;\n    }\n\n    if (this.dropdownData) {\n      if (this.title == 'Host') {\n        this.dropdownTotalError = this.dropdownData.host.flawed;\n      }\n    }\n  }\n\n  toggleDropdown(): void {\n    this.dropdownToggled = !this.dropdownToggled;\n  }\n}\n","<div class=\"card flex-fill\"\n     [ngClass]=\"{'border-0': removeBorder, 'bg-color': cardType === 'Sync Status Card', 'shadow': shadow, 'shadow-sm': !shadow && cardType !== 'syncCards', 'h-100': fullHeight}\">\n  <h4 class=\"card-title mt-4 ms-4 mb-0\"\n      *ngIf=\"cardType !== 'zone'\">\n    <span *ngIf=\"cardType === ''\">{{ cardTitle }}</span>\n  </h4>\n  <h4 *ngIf=\"cardType === 'zone'\"\n      class=\"text-center mt-4 mb-0\">\n    <svg [cdsIcon]=\"icons.deploy\"\n         [size]=\"icons.size20\"\n         ></svg>\n    <span class=\"badge badge-info\">{{ cardTitle }}</span>\n  </h4>\n  <h5 *ngIf=\"cardType === 'syncCards'\"\n      class=\"text-center card-title\">\n      {{ cardTitle }}\n  </h5>\n  <div class=\"card-body ps-0 pe-0\"\n       [ngClass]=\"{'d-flex align-items-center': alignItemsCenter, 'justify-content-center': justifyContentCenter}\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"card-footer p-0 bg-white\"\n       *ngIf=\"cardFooter\">\n    <ng-content select=\".footer\"></ng-content>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent {\n  icons = Icons;\n\n  @Input()\n  cardTitle: string;\n  @Input()\n  cardType: string = '';\n  @Input()\n  removeBorder = false;\n  @Input()\n  shadow = false;\n  @Input()\n  cardFooter = false;\n  @Input()\n  fullHeight = false;\n  @Input()\n  alignItemsCenter = false;\n  @Input()\n  justifyContentCenter = false;\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M2 26H30V28H2zM25.4 9c.8-.8.8-2 0-2.8 0 0 0 0 0 0l-3.6-3.6c-.8-.8-2-.8-2.8 0 0 0 0 0 0 0l-15 15V24h6.4L25.4 9zM20.4 4L24 7.6l-3 3L17.4 7 20.4 4zM6 22v-3.6l10-10 3.6 3.6-10 10H6z\"\n    }\n  }],\n  \"name\": \"edit\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M31 16L24 23 22.59 21.59 28.17 16 22.59 10.41 24 9 31 16zM1 16L8 9 9.41 10.41 3.83 16 9.41 21.59 8 23 1 16z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M5.91 15H26.080000000000002V17H5.91z\",\n      \"transform\": \"rotate(-75 15.996 16)\"\n    }\n  }],\n  \"name\": \"code\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8.5 11L8.5 6.5 6.5 6.5 6.5 7.5 7.5 7.5 7.5 11 6 11 6 12 10 12 10 11zM8 3.5c-.4 0-.8.3-.8.8S7.6 5 8 5c.4 0 .8-.3.8-.8S8.4 3.5 8 3.5z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8,15c-3.9,0-7-3.1-7-7s3.1-7,7-7s7,3.1,7,7S11.9,15,8,15z M8,2C4.7,2,2,4.7,2,8s2.7,6,6,6s6-2.7,6-6S11.3,2,8,2z\"\n    }\n  }],\n  \"name\": \"information\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28,10V28H10V10H28m0-2H10a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V10a2,2,0,0,0-2-2Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M4,18H2V4A2,2,0,0,1,4,2H18V4H4Z\"\n    }\n  }],\n  \"name\": \"copy\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M13 7L12.3 6.3 8.5 10.1 8.5 1 7.5 1 7.5 10.1 3.7 6.3 3 7 8 12zM13 12v2H3v-2H2v2l0 0c0 .6.4 1 1 1h10c.6 0 1-.4 1-1l0 0v-2H13z\"\n    }\n  }],\n  \"name\": \"download\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M11 24H21V26H11zM13 28H19V30H13zM16 2A10 10 0 006 12a9.19 9.19 0 003.46 7.62c1 .93 1.54 1.46 1.54 2.38h2c0-1.84-1.11-2.87-2.19-3.86A7.2 7.2 0 018 12a8 8 0 0116 0 7.2 7.2 0 01-2.82 6.14c-1.07 1-2.18 2-2.18 3.86h2c0-.92.53-1.45 1.54-2.39A9.18 9.18 0 0026 12 10 10 0 0016 2z\"\n    }\n  }],\n  \"name\": \"idea\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  NgbAlertModule,\n  NgbDatepickerModule,\n  NgbDropdownModule,\n  NgbPopoverModule,\n  NgbProgressbarModule,\n  NgbTimepickerModule,\n  NgbTooltipModule\n} from '@ng-bootstrap/ng-bootstrap';\nimport { ClickOutsideModule } from 'ng-click-outside';\nimport { provideCharts, withDefaultRegisterables, BaseChartDirective } from 'ng2-charts';\nimport { SimplebarAngularModule } from 'simplebar-angular';\nimport {\n  UIShellModule,\n  ButtonModule,\n  NotificationModule,\n  IconModule,\n  IconService,\n  TooltipModule,\n  GridModule,\n  AccordionModule,\n  LoadingModule,\n  ModalModule,\n  InputModule,\n  CheckboxModule,\n  DatePickerModule,\n  TimePickerModule,\n  TimePickerSelectModule,\n  NumberModule,\n  DropdownModule,\n  SelectModule,\n  ComboBoxModule,\n  ProgressIndicatorModule,\n  PanelModule,\n  LayoutModule,\n  TilesModule,\n  PopoverModule,\n  InlineLoadingModule\n} from 'carbon-components-angular';\nimport EditIcon from '@carbon/icons/es/edit/20';\nimport CodeIcon from '@carbon/icons/es/code/16';\nimport { MotdComponent } from '~/app/shared/components/motd/motd.component';\nimport { DirectivesModule } from '../directives/directives.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { AlertPanelComponent } from './alert-panel/alert-panel.component';\nimport { BackButtonComponent } from './back-button/back-button.component';\nimport { CdLabelComponent } from './cd-label/cd-label.component';\nimport { ColorClassFromTextPipe } from './cd-label/color-class-from-text.pipe';\nimport { ConfigOptionComponent } from './config-option/config-option.component';\nimport { ConfirmationModalComponent } from './confirmation-modal/confirmation-modal.component';\nimport { Copy2ClipboardButtonComponent } from './copy2clipboard-button/copy2clipboard-button.component';\nimport { DeleteConfirmationModalComponent } from './delete-confirmation-modal/delete-confirmation-modal.component';\nimport { CustomLoginBannerComponent } from './custom-login-banner/custom-login-banner.component';\nimport { DateTimePickerComponent } from './date-time-picker/date-time-picker.component';\nimport { DocComponent } from './doc/doc.component';\nimport { DownloadButtonComponent } from './download-button/download-button.component';\nimport { FormButtonPanelComponent } from './form-button-panel/form-button-panel.component';\nimport { FormModalComponent } from './form-modal/form-modal.component';\nimport { GrafanaComponent } from './grafana/grafana.component';\nimport { HelperComponent } from './helper/helper.component';\nimport { LanguageSelectorComponent } from './language-selector/language-selector.component';\nimport { LoadingPanelComponent } from './loading-panel/loading-panel.component';\nimport { ModalComponent } from './modal/modal.component';\nimport { NotificationsSidebarComponent } from './notifications-sidebar/notifications-sidebar.component';\nimport { OrchestratorDocPanelComponent } from './orchestrator-doc-panel/orchestrator-doc-panel.component';\nimport { PwdExpirationNotificationComponent } from './pwd-expiration-notification/pwd-expiration-notification.component';\nimport { RefreshSelectorComponent } from './refresh-selector/refresh-selector.component';\nimport { SelectBadgesComponent } from './select-badges/select-badges.component';\nimport { SelectComponent } from './select/select.component';\nimport { SparklineComponent } from './sparkline/sparkline.component';\nimport { SubmitButtonComponent } from './submit-button/submit-button.component';\nimport { TelemetryNotificationComponent } from './telemetry-notification/telemetry-notification.component';\nimport { UsageBarComponent } from './usage-bar/usage-bar.component';\nimport { WizardComponent } from './wizard/wizard.component';\nimport { CardComponent } from './card/card.component';\nimport { CardRowComponent } from './card-row/card-row.component';\nimport { CodeBlockComponent } from './code-block/code-block.component';\nimport { VerticalNavigationComponent } from './vertical-navigation/vertical-navigation.component';\nimport { CardGroupComponent } from './card-group/card-group.component';\nimport { HelpTextComponent } from './help-text/help-text.component';\nimport { FormAdvancedFieldsetComponent } from './form-advanced-fieldset/form-advanced-fieldset.component';\nimport { UpgradableComponent } from './upgradable/upgradable.component';\nimport { ProgressComponent } from './progress/progress.component';\nimport { SidePanelComponent } from './side-panel/side-panel.component';\nimport { ChartsModule } from '@carbon/charts-angular';\nimport { InlineMessageComponent } from './inline-message/inline-message.component';\nimport { IconComponent } from './icon/icon.component';\nimport { DetailsCardComponent } from './details-card/details-card.component';\n\n// Icons\nimport InfoIcon from '@carbon/icons/es/information/16';\nimport CopyIcon from '@carbon/icons/es/copy/32';\nimport downloadIcon from '@carbon/icons/es/download/16';\nimport IdeaIcon from '@carbon/icons/es/idea/20';\nimport CloseIcon from '@carbon/icons/es/close/16';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    NgbPopoverModule,\n    NgbProgressbarModule,\n    NgbTooltipModule,\n    ReactiveFormsModule,\n    PipesModule,\n    DirectivesModule,\n    NgbDropdownModule,\n    ClickOutsideModule,\n    SimplebarAngularModule,\n    RouterModule,\n    NgbDatepickerModule,\n    NgbTimepickerModule,\n    UIShellModule,\n    ButtonModule,\n    NotificationModule,\n    IconModule,\n    TooltipModule,\n    GridModule,\n    AccordionModule,\n    LoadingModule,\n    ModalModule,\n    InputModule,\n    NumberModule,\n    CheckboxModule,\n    DatePickerModule,\n    TimePickerModule,\n    TimePickerSelectModule,\n    DropdownModule,\n    SelectModule,\n    ComboBoxModule,\n    ProgressIndicatorModule,\n    BaseChartDirective,\n    PanelModule,\n    ChartsModule,\n    LayoutModule,\n    TilesModule,\n    PopoverModule,\n    InlineLoadingModule\n  ],\n  declarations: [\n    SparklineComponent,\n    HelperComponent,\n    SelectBadgesComponent,\n    SubmitButtonComponent,\n    UsageBarComponent,\n    LoadingPanelComponent,\n    ModalComponent,\n    NotificationsSidebarComponent,\n    DeleteConfirmationModalComponent,\n    ConfirmationModalComponent,\n    LanguageSelectorComponent,\n    GrafanaComponent,\n    SelectComponent,\n    BackButtonComponent,\n    RefreshSelectorComponent,\n    ConfigOptionComponent,\n    AlertPanelComponent,\n    FormModalComponent,\n    PwdExpirationNotificationComponent,\n    TelemetryNotificationComponent,\n    OrchestratorDocPanelComponent,\n    DateTimePickerComponent,\n    DocComponent,\n    Copy2ClipboardButtonComponent,\n    DownloadButtonComponent,\n    FormButtonPanelComponent,\n    MotdComponent,\n    WizardComponent,\n    CustomLoginBannerComponent,\n    CdLabelComponent,\n    ColorClassFromTextPipe,\n    CardComponent,\n    CardRowComponent,\n    CodeBlockComponent,\n    VerticalNavigationComponent,\n    CardGroupComponent,\n    HelpTextComponent,\n    FormAdvancedFieldsetComponent,\n    UpgradableComponent,\n    ProgressComponent,\n    SidePanelComponent,\n    IconComponent,\n    InlineMessageComponent,\n    DetailsCardComponent\n  ],\n  providers: [provideCharts(withDefaultRegisterables())],\n  exports: [\n    SparklineComponent,\n    HelperComponent,\n    SelectBadgesComponent,\n    SubmitButtonComponent,\n    BackButtonComponent,\n    LoadingPanelComponent,\n    UsageBarComponent,\n    ModalComponent,\n    NotificationsSidebarComponent,\n    LanguageSelectorComponent,\n    GrafanaComponent,\n    SelectComponent,\n    RefreshSelectorComponent,\n    ConfigOptionComponent,\n    AlertPanelComponent,\n    PwdExpirationNotificationComponent,\n    TelemetryNotificationComponent,\n    OrchestratorDocPanelComponent,\n    DateTimePickerComponent,\n    DocComponent,\n    Copy2ClipboardButtonComponent,\n    DownloadButtonComponent,\n    FormButtonPanelComponent,\n    MotdComponent,\n    WizardComponent,\n    CustomLoginBannerComponent,\n    CdLabelComponent,\n    CardComponent,\n    CardRowComponent,\n    CodeBlockComponent,\n    VerticalNavigationComponent,\n    CardGroupComponent,\n    HelpTextComponent,\n    FormAdvancedFieldsetComponent,\n    UpgradableComponent,\n    ProgressComponent,\n    SidePanelComponent,\n    IconComponent,\n    InlineMessageComponent,\n    DetailsCardComponent\n  ]\n})\nexport class ComponentsModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      InfoIcon,\n      CopyIcon,\n      EditIcon,\n      CodeIcon,\n      downloadIcon,\n      IdeaIcon,\n      CloseIcon\n    ]);\n  }\n}\n","<cds-modal size=\"sm\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ titleText }}</h3>\n  </cds-modal-header>\n  <section cdsModalContent>\n    <form name=\"confirmationForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"confirmationForm\"\n          novalidate>\n      <ng-container *ngTemplateOutlet=\"bodyTpl; context: bodyContext\"></ng-container>\n      <p *ngIf=\"description\">\n        {{description}}\n      </p>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"onSubmit(confirmationForm.value)\"\n                        [form]=\"confirmationForm\"\n                        [submitText]=\"buttonText\"\n                        [showCancel]=\"showCancel\"\n                        [showSubmit]=\"showSubmit\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n\n</cds-modal>\n","import { Component, Inject, OnDestroy, OnInit, Optional, TemplateRef } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\n\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-confirmation-modal',\n  templateUrl: './confirmation-modal.component.html',\n  styleUrls: ['./confirmation-modal.component.scss'],\n  providers: [\n    { provide: 'warning', useValue: false },\n    { provide: 'showSubmit', useValue: true },\n    { provide: 'showCancel', useValue: true }\n  ]\n})\nexport class ConfirmationModalComponent extends BaseModal implements OnInit, OnDestroy {\n  // Component only\n  confirmationForm: UntypedFormGroup;\n  private canceled = false;\n\n  constructor(\n    @Optional() @Inject('titleText') public titleText: string,\n    @Optional() @Inject('buttonText') public buttonText: string,\n    @Optional() @Inject('onSubmit') public onSubmit: Function,\n\n    // One of them is needed\n    @Optional() @Inject('bodyTpl') public bodyTpl?: TemplateRef<any>,\n    @Optional() @Inject('description') public description?: TemplateRef<any>,\n\n    // Optional\n    @Optional() @Inject('warning') public warning = false,\n    @Optional() @Inject('bodyData') public bodyData?: object,\n    @Optional() @Inject('onCancel') public onCancel?: Function,\n    @Optional() @Inject('bodyContext') public bodyContext?: object,\n    @Optional() @Inject('showSubmit') public showSubmit = true,\n    @Optional() @Inject('showCancel') public showCancel = true\n  ) {\n    super();\n    this.confirmationForm = new UntypedFormGroup({});\n  }\n\n  ngOnInit() {\n    this.bodyContext = this.bodyContext || {};\n    this.bodyContext['$implicit'] = this.bodyData;\n    if (!this.onSubmit) {\n      throw new Error('No submit action defined');\n    } else if (!this.buttonText) {\n      throw new Error('No action name defined');\n    } else if (!this.titleText) {\n      throw new Error('No title defined');\n    } else if (!this.bodyTpl && !this.description) {\n      throw new Error('No description defined');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onCancel && this.canceled) {\n      this.onCancel();\n    }\n  }\n\n  stopLoadingSpinner() {\n    this.confirmationForm.setErrors({ cdSubmitButton: true });\n  }\n}\n","\n<button cdsButton=\"ghost\"\n        class=\"clipboard-btn\"\n        [ngClass]=\"{'clipboard-btn-with-text': text}\"\n        [size]=\"size\"\n        description=\"Copy to Clipboard\"\n        i18n-description\n        (click)=\"onClick()\">\n  @if(text) {\n  <span data-toggle=\"tooltip\"\n        [title]=\"text\"\n        class=\"cds--type-mono\">{{text}}</span>\n  }\n  <cd-icon type=\"copy\"></cd-icon>\n</button>\n","import { Component, HostListener, Input } from '@angular/core';\n\nimport { detect } from 'detect-browser';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-copy-2-clipboard-button',\n  templateUrl: './copy2clipboard-button.component.html',\n  styleUrls: ['./copy2clipboard-button.component.scss']\n})\nexport class Copy2ClipboardButtonComponent {\n  // The text to be copied\n  @Input()\n  private source: string;\n\n  // Optional: Extracts text to be copied by \"id\" attribute\n  @Input()\n  byId = true;\n\n  // Size of the button\n  @Input()\n  size = 'md';\n\n  // Optional: Adds text to the left of copy icon\n  @Input()\n  text?: string;\n\n  icons = Icons;\n\n  constructor(private toastr: ToastrService) {}\n\n  private getText(): string {\n    const element = document.getElementById(this.source) as HTMLInputElement;\n    return element?.value || element?.textContent;\n  }\n\n  @HostListener('click')\n  onClick() {\n    try {\n      const browser = detect();\n      const text = this.byId ? this.getText() : this.source;\n      const toastrFn = () => {\n        this.toastr.success('Copied text to the clipboard successfully.');\n      };\n      if (['firefox', 'ie', 'ios', 'safari'].includes(browser.name)) {\n        // Various browsers do not support the `Permissions API`.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#Browser_compatibility\n        navigator.clipboard.writeText(text).then(() => toastrFn());\n      } else {\n        // Checking if we have the clipboard-write permission\n        navigator.permissions\n          .query({ name: 'clipboard-write' as PermissionName })\n          .then((result: any) => {\n            if (result.state === 'granted' || result.state === 'prompt') {\n              navigator.clipboard.writeText(text).then(() => toastrFn());\n            }\n          });\n      }\n    } catch (_) {\n      this.toastr.error('Failed to copy text to the clipboard.');\n    }\n  }\n}\n","<div cdsCol>\n  <div cdsRow\n       class=\"form-item-append\">\n    <cds-text-label>{{name}}\n      <cds-date-picker  i18n-label\n                        [placeholder]=\"placeHolder\"\n                        formControlname=\"expiresAt\"\n                        dateFormat=\"Y/m/d\"\n                        [value]=\"date\"\n                        (valueChange)=\"onModelChange($event)\"\n                        [helperText]=\"helperText\"\n                        [disabled]=\"disabled\"\n                        cdsTheme=\"theme\"></cds-date-picker>\n    </cds-text-label>\n  <cds-text-label *ngIf=\"hasTime\">Select a time\n  <cds-timepicker (valueChange)=\"onModelChange($event)\"\n                  [(ngModel)]=\"time\"\n                  [disabled]=\"disabled\"\n                  pattern=\"(1[012]|[0-9]):[0-5][0-9]\"\n                  *ngIf=\"hasTime\">\n  <cds-timepicker-select [(ngModel)]=\"ampm\"\n                         [disabled]=\"disabled\"\n                         (valueChange)=\"onModelChange($event)\">\n    <option selected\n            value=\"AM\">AM</option>\n    <option value=\"PM\">PM</option>\n  </cds-timepicker-select>\n</cds-timepicker>\n</cds-text-label>\n</div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\n\nimport { NgbCalendar, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\nimport moment from 'moment';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cd-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  styleUrls: ['./date-time-picker.component.scss']\n})\nexport class DateTimePickerComponent implements OnInit {\n  @Input()\n  control: UntypedFormControl;\n\n  @Input()\n  hasSeconds = true;\n\n  @Input()\n  hasTime = true;\n\n  @Input()\n  name = '';\n\n  @Input()\n  helperText = '';\n  @Input()\n  placeHolder = '';\n  @Input()\n  disabled = false;\n\n  format: string;\n  minDate: NgbDateStruct;\n  datetime: {\n    date: any;\n    time: string;\n    ampm: string;\n  };\n  date: { [key: number]: string }[] = [];\n  time: string;\n  ampm: string;\n  sub: Subscription;\n  @Input() defaultDate: boolean = false;\n  constructor(private calendar: NgbCalendar) {}\n\n  ngOnInit() {\n    this.minDate = this.calendar.getToday();\n    if (!this.hasTime) {\n      this.format = 'YYYY-MM-DD';\n    } else if (this.hasSeconds) {\n      this.format = 'YYYY-MM-DD HH:mm:ss';\n    } else {\n      this.format = 'YYYY-MM-DD HH:mm';\n    }\n\n    let mom = moment(this.control?.value, this.format);\n\n    if (!mom.isValid() || mom.isBefore(moment())) {\n      mom = moment();\n    }\n    if (this.defaultDate) {\n      this.date.push([]);\n    } else {\n      this.date.push(mom.format('YYYY-MM-DD'));\n    }\n\n    const time = mom.format('HH:mm:ss');\n    this.time = mom.format('hh:mm');\n    this.ampm = mom.hour() >= 12 ? 'PM' : 'AM';\n\n    this.datetime = {\n      date: this.date[0],\n      time: time,\n      ampm: this.ampm\n    };\n\n    this.onModelChange();\n  }\n\n  onModelChange(event?: any) {\n    if (event) {\n      if (event.length === 0) {\n        this.datetime.date = { date: null, time: null, ampm: null };\n      } else if (Array.isArray(event)) {\n        this.datetime.date = moment(event[0]).format('YYYY-MM-DD');\n      } else if (event && ['AM', 'PM'].includes(event)) {\n        const initialMoment = moment(this.datetime.time, 'hh:mm:ss A');\n        const updatedMoment = initialMoment.set(\n          'hour',\n          (initialMoment.hour() % 12) + (event === 'PM' ? 12 : 0)\n        );\n        this.datetime.time = moment(updatedMoment).format('HH:mm:ss');\n        this.datetime.ampm = event;\n      } else {\n        const time = event;\n        this.datetime.time = moment(`${this.datetime.date} ${time} ${this.datetime.ampm}`).format(\n          'HH:mm:ss'\n        );\n      }\n    }\n    if (this.datetime) {\n      const datetime = moment(`${this.datetime.date} ${this.datetime.time}`).format(this.format);\n\n      setTimeout(() => {\n        this.control.setValue(datetime);\n      });\n    } else {\n      setTimeout(() => {\n        this.control.setValue('');\n      });\n    }\n  }\n}\n","<cds-modal size=\"sm\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <ng-container *ngTemplateOutlet=\"deletionHeading\"></ng-container>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"deletionForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"deletionForm\"\n          novalidate>\n      <cd-alert-panel *ngIf=\"infoMessage\"\n                      type=\"info\"\n                      spacingClass=\"mb-3\"\n                      i18n>\n        <p>{{ infoMessage }}</p>\n      </cd-alert-panel>\n      <ng-container *ngTemplateOutlet=\"bodyTemplate; context: bodyContext\"></ng-container>\n      <div class=\"question\">\n        <span *ngIf=\"itemNames; else noNames\">\n          <p *ngIf=\"itemNames.length === 1; else manyNames\"\n             i18n>Are you sure that you want to {{ actionDescription | lowercase }} <strong>{{ itemNames[0] }}</strong>?</p>\n          <ng-template #manyNames>\n            <p i18n>Are you sure that you want to {{ actionDescription | lowercase }} the selected items?</p>\n            <ul>\n              <li *ngFor=\"let itemName of itemNames\"><strong>{{ itemName }}</strong></li>\n            </ul>\n          </ng-template >\n        </span>\n        <ng-template #noNames>\n          <p i18n>Are you sure that you want to {{ actionDescription | lowercase }} the selected {{ itemDescription }}?</p>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"childFormGroupTemplate; context:{form:deletionForm}\"></ng-container>\n        <div class=\"form-item\">\n          <ng-container *ngIf=\"impact == impactEnum.medium; else highImpactDeletion\">\n            <cds-checkbox id=\"confirmation\"\n                          formControlName=\"confirmation\"\n                          autofocus\n                          [required]=\"true\"\n                          modal-primary-focus\n                          ariaLabel=\"confirmation\"\n                          i18n>Yes, I am sure.</cds-checkbox>\n          </ng-container>\n          <ng-template #highImpactDeletion>\n            <cds-text-label label=\"Resource Name\"\n                            labelInputID=\"resource_name\"\n                            cdRequiredField=\"Resource Name\"\n                            [invalid]=\"!deletionForm.controls.confirmInput.valid && deletionForm.controls.confirmInput.dirty\"\n                            [invalidText]=\"ResourceError\"\n                            i18n\n                            i18n-label>Resource Name\n              <input cdsText\n                     type=\"text\"\n                     placeholder=\"Enter resource name to delete\"\n                     id=\"resource_name\"\n                     formControlName=\"confirmInput\"\n                     i18n-placeholder/>\n            </cds-text-label>\n            <ng-template #ResourceError>\n              <span *ngIf=\"deletionForm.showError('confirmInput', formDir, 'required')\"\n                    class=\"invalid-feedback\">\n                <ng-container i18n>This field is required.</ng-container>\n              </span>\n              <span *ngIf=\"deletionForm.showError('confirmInput', formDir, 'matchResource')\"\n                    class=\"invalid-feedback\">\n                <ng-container i18n>Enter the correct resource name.</ng-container>\n              </span>\n            </ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </form>\n  </section>\n  <cd-form-button-panel (submitActionEvent)=\"callSubmitAction()\"\n                        (backActionEvent)=\"backAction ? callBackAction() : hideModal()\"\n                        [form]=\"deletionForm\"\n                        [submitText]=\"(actionDescription | titlecase) + ' ' + itemDescription\"\n                        [modalForm]=\"true\"\n                        [submitBtnType]=\"(actionDescription === 'delete' || actionDescription === 'remove') ? 'danger' : 'primary'\"></cd-form-button-panel>\n\n</cds-modal>\n\n<ng-template #deletionHeading>\n  <h3 cdsModalHeaderHeading\n      i18n>\n    {{ actionDescription | titlecase }} {{ itemDescription }}\n  </h3>\n</ng-template>\n","import { Component, Inject, OnInit, Optional, TemplateRef, ViewChild } from '@angular/core';\nimport { UntypedFormControl, AbstractControl, ValidationErrors, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { SubmitButtonComponent } from '../submit-button/submit-button.component';\nimport { BaseModal } from 'carbon-components-angular';\nimport { CdValidators } from '../../forms/cd-validators';\nimport { DeletionImpact } from '../../enum/delete-confirmation-modal-impact.enum';\n\n@Component({\n  selector: 'cd-deletion-modal',\n  templateUrl: './delete-confirmation-modal.component.html',\n  styleUrls: ['./delete-confirmation-modal.component.scss']\n})\nexport class DeleteConfirmationModalComponent extends BaseModal implements OnInit {\n  @ViewChild(SubmitButtonComponent, { static: true })\n  submitButton: SubmitButtonComponent;\n  deletionForm: CdFormGroup;\n  impactEnum = DeletionImpact;\n  childFormGroup: CdFormGroup;\n  childFormGroupTemplate: TemplateRef<any>;\n\n  constructor(\n    @Optional() @Inject('impact') public impact: DeletionImpact,\n    @Optional() @Inject('itemDescription') public itemDescription: 'entry',\n    @Optional() @Inject('itemNames') public itemNames: string[],\n    @Optional() @Inject('actionDescription') public actionDescription = 'delete',\n    @Optional() @Inject('submitAction') public submitAction?: Function,\n    @Optional() @Inject('backAction') public backAction?: Function,\n    @Optional() @Inject('bodyTemplate') public bodyTemplate?: TemplateRef<any>,\n    @Optional() @Inject('bodyContext') public bodyContext?: object,\n    @Optional() @Inject('infoMessage') public infoMessage?: string,\n    @Optional()\n    @Inject('submitActionObservable')\n    public submitActionObservable?: () => Observable<any>,\n    @Optional()\n    @Inject('callBackAtionObservable')\n    public callBackAtionObservable?: () => Observable<any>\n  ) {\n    super();\n    this.actionDescription = actionDescription || 'delete';\n    this.impact = this.impact || DeletionImpact.medium;\n  }\n\n  ngOnInit() {\n    const controls = {\n      impact: new UntypedFormControl(this.impact),\n      confirmation: new UntypedFormControl(false, {\n        validators: [\n          CdValidators.composeIf(\n            {\n              impact: DeletionImpact.medium\n            },\n            [Validators.requiredTrue]\n          )\n        ]\n      }),\n      confirmInput: new UntypedFormControl('', [\n        CdValidators.composeIf({ impact: this.impactEnum.high }, [\n          this.matchResourceName.bind(this),\n          Validators.required\n        ])\n      ])\n    };\n    if (this.childFormGroup) {\n      controls['child'] = this.childFormGroup;\n    }\n    this.deletionForm = new CdFormGroup(controls);\n    if (!(this.submitAction || this.submitActionObservable)) {\n      throw new Error('No submit action defined');\n    }\n  }\n\n  matchResourceName(control: AbstractControl): ValidationErrors | null {\n    if (this.itemNames && control.value !== String(this.itemNames?.[0])) {\n      return { matchResource: true };\n    }\n    return null;\n  }\n\n  callSubmitAction() {\n    if (this.submitActionObservable) {\n      this.submitActionObservable().subscribe({\n        error: this.stopLoadingSpinner.bind(this),\n        complete: this.hideModal.bind(this)\n      });\n    } else {\n      this.submitAction();\n    }\n  }\n\n  callBackAction() {\n    if (this.callBackAtionObservable) {\n      this.callBackAtionObservable().subscribe({\n        error: this.stopLoadingSpinner.bind(this),\n        complete: this.hideModal.bind(this)\n      });\n    } else {\n      this.backAction();\n    }\n  }\n\n  hideModal() {\n    this.closeModal();\n  }\n\n  stopLoadingSpinner() {\n    this.deletionForm.setErrors({ cdSubmitButton: true });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { DocService } from '~/app/shared/services/doc.service';\n\n@Component({\n  selector: 'cd-doc',\n  templateUrl: './doc.component.html',\n  styleUrls: ['./doc.component.scss']\n})\nexport class DocComponent implements OnInit {\n  @Input() section: string;\n  @Input() docText = $localize`documentation`;\n  @Input() noSubscribe: boolean;\n\n  docUrl: string;\n\n  constructor(private docService: DocService) {}\n\n  ngOnInit() {\n    if (this.noSubscribe) {\n      this.docUrl = this.docService.urlGenerator(this.section);\n    } else {\n      this.docService.subscribeOnce(this.section, (url: string) => {\n        this.docUrl = url;\n      });\n    }\n  }\n}\n","<a href=\"{{ docUrl }}\"\n   target=\"_blank\"\n   class=\"ps-1 pe-1\">{{ docText }}</a>\n","<fieldset>\n  <cds-accordion size=\"lg\"\n                 class=\"form-item\">\n    <cds-accordion-item [title]=\"titleTpl\"\n                        i18n\n                        id=\"advanced-fieldset\"\n                        (selected)=\"showAdvanced = !showAdvanced\">\n      <ng-content></ng-content>\n    </cds-accordion-item>\n  </cds-accordion>\n\n  <ng-template #titleTpl>\n    <h5 class=\"cds--accordion__title cd-header\"\n        i18n>{{title}}</h5>\n  </ng-template>\n</fieldset>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-form-advanced-fieldset',\n  templateUrl: './form-advanced-fieldset.component.html',\n  styleUrls: ['./form-advanced-fieldset.component.scss']\n})\nexport class FormAdvancedFieldsetComponent {\n  @Input()\n  title: string = 'Advanced';\n  showAdvanced: boolean = false;\n}\n","<ng-container *ngIf=\"!modalForm; else modalFooter\">\n  <div [ngClass]=\"wrappingClass\">\n    <cd-back-button *ngIf=\"showCancel\"\n                    (backAction)=\"backAction()\"\n                    [name]=\"cancelText\"></cd-back-button>\n    <cd-submit-button *ngIf=\"showSubmit\"\n                      (submitAction)=\"submitAction()\"\n                      [disabled]=\"disabled\"\n                      [form]=\"form\"\n                      [ariaLabel]=\"submitText\"\n                      data-testid=\"submitBtn\"\n                      [buttonType]=\"submitBtnType\">{{ submitText }}</cd-submit-button>\n  </div>\n</ng-container>\n\n<ng-template #modalFooter>\n  <cds-modal-footer>\n    <cd-back-button *ngIf=\"showCancel\"\n                    (backAction)=\"backAction()\"\n                    [name]=\"cancelText\"\n                    [modalForm]=\"modalForm\"\n                    [showSubmit]=\"showSubmit\"\n                    class=\"w-100\"></cd-back-button>\n    <cd-submit-button *ngIf=\"showSubmit\"\n                      (submitAction)=\"submitAction()\"\n                      [disabled]=\"disabled\"\n                      [form]=\"form\"\n                      [ariaLabel]=\"submitText\"\n                      data-testid=\"submitBtn\"\n                      [modalForm]=\"modalForm\"\n                      [buttonType]=\"submitBtnType\"\n                      class=\"w-100\">{{ submitText }}</cd-submit-button>\n  </cds-modal-footer>\n</ng-template>\n","import { Location } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { UntypedFormGroup, NgForm } from '@angular/forms';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { SubmitButtonComponent } from '../submit-button/submit-button.component';\nimport { ModalCdsService } from '../../services/modal-cds.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'cd-form-button-panel',\n  templateUrl: './form-button-panel.component.html',\n  styleUrls: ['./form-button-panel.component.scss']\n})\nexport class FormButtonPanelComponent implements OnInit {\n  @ViewChild(SubmitButtonComponent)\n  submitButton: SubmitButtonComponent;\n\n  @Output()\n  submitActionEvent = new EventEmitter();\n  @Output()\n  backActionEvent = new EventEmitter();\n\n  @Input()\n  form: UntypedFormGroup | NgForm;\n  @Input()\n  showSubmit = true;\n  @Input()\n  showCancel = true;\n  @Input()\n  wrappingClass = '';\n  @Input()\n  btnClass = '';\n  @Input()\n  submitText?: string;\n  @Input()\n  cancelText?: string;\n  @Input()\n  disabled = false;\n  @Input()\n  modalForm = false;\n  @Input()\n  submitBtnType: 'primary' | 'danger';\n\n  hasModalOutlet = false;\n\n  constructor(\n    private location: Location,\n    private actionLabels: ActionLabelsI18n,\n    private modalService: ModalService,\n    private cdsModalService: ModalCdsService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.submitText = this.submitText || this.actionLabels.CREATE;\n    this.cancelText = this.cancelText || this.actionLabels.CANCEL;\n    this.hasModalOutlet = this.route.outlet === 'modal';\n  }\n\n  submitAction() {\n    this.submitActionEvent.emit();\n  }\n\n  backAction() {\n    if (this.backActionEvent.observers.length === 0) {\n      if (this.modalForm && this.cdsModalService.hasOpenModals()) {\n        this.cdsModalService.dismissAll();\n      } else if (this.modalForm && this.hasModalOutlet) {\n        this.location.back();\n      } else if (this.modalService.hasOpenModals()) {\n        this.modalService.dismissAll();\n      } else {\n        this.location.back();\n      }\n    } else {\n      this.backActionEvent.emit();\n    }\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\"\n           [hasScrollingContent]=\"true\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        *ngIf=\"titleText\">\n      {{ titleText }}\n    </h3>\n  </cds-modal-header>\n    <div cdsModalContent\n         data-testid=\"modal-content\">\n      <form [formGroup]=\"formGroup\"\n            #formDir=\"ngForm\"\n            novalidate>\n      <p *ngIf=\"message\"\n         id=\"description\">{{ message }}</p>\n      <ng-container *ngFor=\"let field of fields\">\n        <div class=\"form-item\">\n          <cds-text-label *ngIf=\"field.type === 'text'\"\n                          [labelInputID]=\"field.name\"\n                          [invalid]=\"getError(field)\"\n                          [invalidText]=\"getError(field)\"\n                          [cdRequiredField]=\"field?.required === true ? field.label : ''\"\n                          i18n>\n            {{ field.label }}\n            <input cdsText\n                   type=\"text\"\n                   [id]=\"field.name\"\n                   [name]=\"field.name\"\n                   [formControlName]=\"field.name\"\n                   [invalid]=\"getError(field)\"\n                   autofocus>\n          </cds-text-label>\n          <cds-number *ngIf=\"field.type === 'number'\"\n                      [invalid]=\"getError(field)\"\n                      [invalidText]=\"getError(field)\"\n                      [label]=\"field.label\"\n                      [cdRequiredField]=\"field?.required === true ? field.label : ''\"\n                      [formControlName]=\"field.name\"\n                      [id]=\"field.name\"\n                      i18n></cds-number>\n          <cds-text-label *ngIf=\"field.type === 'binary'\"\n                          [labelInputID]=\"field.name\"\n                          [invalid]=\"getError(field)\"\n                          [invalidText]=\"getError(field)\"\n                          [cdRequiredField]=\"field?.required === true ? field.label : ''\"\n                          i18n>\n            {{ field.label }}\n            <input type=\"text\"\n                   [id]=\"field.name\"\n                   [name]=\"field.name\"\n                   [formControlName]=\"field.name\"\n                   cdsText\n                   cdDimlessBinary>\n          </cds-text-label>\n          <cds-select *ngIf=\"field.type === 'select'\"\n                      [label]=\"field.label\"\n                      [for]=\"field.name\"\n                      [id]=\"field.name\"\n                      [formControlName]=\"field.name\"\n                      [options]=\"field?.typeConfig?.options\"\n                      [placeholder]=\"field?.typeConfig?.placeholder\"\n                      [invalid]=\"getError(field)\"\n                      [invalidText]=\"getError(field)\"\n                      [cdRequiredField]=\"field?.required === true ? field.label : ''\"\n                      i18n>\n            <option *ngIf=\"field?.typeConfig?.placeholder\"\n                    [ngValue]=\"null\">\n              {{ field?.typeConfig?.placeholder }}\n            </option>\n            <option *ngFor=\"let option of field?.typeConfig?.options\"\n                    [value]=\"option.value\">\n              {{ option.text }}\n            </option>\n          </cds-select>\n\n          <cds-combo-box *ngIf=\"field.type === 'select-badges'\"\n                         type=\"multi\"\n                         selectionFeedback=\"top-after-reopen\"\n                         [label]=\"field.label\"\n                         [for]=\"field.name\"\n                         [formControlName]=\"field.name\"\n                         itemValueKey=\"content\"\n                         [id]=\"field.name\"\n                         [invalid]=\"getError(field)\"\n                         [invalidText]=\"getError(field)\"\n                         [appendInline]=\"false\"\n                         cdDynamicInputCombobox\n                         (updatedItems)=\"field.typeConfig.options = $event\"\n                         [items]=\"field?.typeConfig?.options\"\n                         [cdRequiredField]=\"field?.required === true ? field.label : ''\"\n                         i18n>\n            <cds-dropdown-list></cds-dropdown-list>\n          </cds-combo-box>\n        </div>\n      </ng-container>\n    </form>\n  </div>\n  <cd-form-button-panel (submitActionEvent)=\"onSubmitForm(formGroup.value)\"\n                        [form]=\"formGroup\"\n                        [submitText]=\"submitButtonText\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { AsyncValidatorFn, UntypedFormControl, ValidatorFn, Validators } from '@angular/forms';\n\nimport { BaseModal } from 'carbon-components-angular';\nimport _ from 'lodash';\n\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdFormModalFieldConfig } from '~/app/shared/models/cd-form-modal-field-config';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\n\n@Component({\n  selector: 'cd-form-modal',\n  templateUrl: './form-modal.component.html',\n  styleUrls: ['./form-modal.component.scss']\n})\nexport class FormModalComponent extends BaseModal implements OnInit {\n  // Internal\n  formGroup: CdFormGroup;\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    private formatter: FormatterService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n\n    // Inputs\n    @Optional() @Inject('titleText') public titleText: string,\n    @Optional() @Inject('fields') public fields: CdFormModalFieldConfig[],\n    @Optional() @Inject('submitButtonText') public submitButtonText: string,\n    @Optional() @Inject('onSubmit') public onSubmit: Function,\n    @Optional() @Inject('message') public message = '',\n    @Optional() @Inject('updateAsyncValidators') public updateAsyncValidators: Function\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.createForm();\n  }\n\n  createForm() {\n    const controlsConfig: Record<string, UntypedFormControl> = {};\n    this.fields.forEach((field) => {\n      controlsConfig[field.name] = this.createFormControl(field);\n    });\n    this.formGroup = this.formBuilder.group(controlsConfig);\n  }\n\n  private createFormControl(field: CdFormModalFieldConfig): UntypedFormControl {\n    let validators: ValidatorFn[] = [];\n    let asyncValidators: AsyncValidatorFn[] = [];\n    if (_.isBoolean(field.required) && field.required) {\n      validators.push(Validators.required);\n    }\n    if (field.validators) {\n      validators = validators.concat(field.validators);\n    }\n    if (field.asyncValidators) {\n      asyncValidators = asyncValidators.concat(field.asyncValidators);\n    }\n\n    const control = new UntypedFormControl(\n      _.defaultTo(\n        field.type === 'binary' ? this.dimlessBinaryPipe.transform(field.value) : field.value,\n        null\n      ),\n      { validators, asyncValidators }\n    );\n\n    if (field.type === 'select-badges' && field.value) control.setValue(field.value);\n\n    if (field.valueChangeListener) {\n      control.valueChanges.subscribe((value) => {\n        const validatorToUpdate = this.updateAsyncValidators(value);\n        this.updateValidation(field.dependsOn, validatorToUpdate);\n      });\n    }\n    return control;\n  }\n\n  getError(field: CdFormModalFieldConfig): string {\n    const formErrors = this.formGroup.get(field.name).errors;\n    if (!formErrors) {\n      return '';\n    }\n    const errors = Object.keys(formErrors)?.map((key) => {\n      return this.getErrorMessage(key, formErrors[key], field.errors);\n    });\n    return errors?.join('<br>');\n  }\n\n  private getErrorMessage(\n    error: string,\n    errorContext: any,\n    fieldErrors: { [error: string]: string }\n  ): string {\n    if (fieldErrors) {\n      const customError = fieldErrors[error];\n      if (customError) {\n        return customError;\n      }\n    }\n    if (['binaryMin', 'binaryMax'].includes(error)) {\n      // binaryMin and binaryMax return a function that take I18n to\n      // provide a translated error message.\n      return errorContext();\n    }\n    if (error === 'required') {\n      return $localize`This field is required.`;\n    }\n    if (error === 'pattern') {\n      return $localize`Size must be a number or in a valid format. eg: 5 GiB`;\n    }\n    return $localize`An error occurred.`;\n  }\n\n  onSubmitForm(values: any) {\n    const binaries = this.fields\n      .filter((field) => field.type === 'binary')\n      .map((field) => field.name);\n    binaries.forEach((key) => {\n      const value = values[key];\n      if (value) {\n        values[key] = this.formatter.toBytes(value);\n      }\n    });\n    this.closeModal();\n    if (_.isFunction(this.onSubmit)) {\n      this.onSubmit(values);\n    }\n  }\n\n  updateValidation(name?: string, validator?: AsyncValidatorFn[]) {\n    const field = this.formGroup.get(name);\n    field.setAsyncValidators(validator);\n    field.updateValueAndValidity();\n  }\n}\n","<!-- Embed dashboard -->\n<cd-loading-panel *ngIf=\"loading && grafanaExist\"\n                  i18n>Loading panel data...</cd-loading-panel>\n\n<cd-alert-panel type=\"info\"\n                *ngIf=\"!grafanaExist\"\n                i18n>Please consult the&nbsp;<cd-doc section=\"grafana\"></cd-doc>&nbsp;on\n  how to configure and enable the monitoring functionality.</cd-alert-panel>\n\n<cd-alert-panel type=\"info\"\n                *ngIf=\"!dashboardExist\"\n                i18n>Grafana Dashboard doesn't exist. Please refer to\n  &nbsp;<cd-doc section=\"grafana\"></cd-doc>&nbsp;on how to add dashboards to Grafana.</cd-alert-panel>\n\n<ng-container *ngIf=\"grafanaExist && dashboardExist\">\n  <!--Start : UI row hidden intentionally; code retained as dead code for potential future use. -->\n  <div class=\"row mb-3\"\n       *ngIf=\"showMessage\">\n    <div class=\"col-lg-5 d-flex\" >\n      <div class=\"col-sm-1\">\n        <button class=\"btn btn-light ms-3\"\n                i18n-title\n                title=\"Reset Settings\"\n                (click)=\"reset()\">\n          <i [ngClass]=\"[icons.undo]\"></i>\n        </button>\n      </div>\n      <div class=\"col-sm-1\">\n        <button class=\"btn btn-light ms-3\"\n                i18n-title\n                title=\"Show hidden information\"\n                (click)=\"showMessage = !showMessage\">\n          <i [ngClass]=\"[icons.infoCircle, icons.large]\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <!-- end -->\n\n  <div class=\"row\">\n    <div class=\"col my-2\"\n         *ngIf=\"showMessage\">\n      <cd-alert-panel type=\"info\"\n                      class=\"mb-3\"\n                      *ngIf=\"showMessage\"\n                      dismissible=\"true\"\n                      (dismissed)=\"showMessage = false\"\n                      i18n>If no embedded Grafana Dashboard appeared below, please follow&nbsp;<a [href]=\"grafanaSrc\"\n                      target=\"_blank\"\n                      noopener\n                      noreferrer>this link </a>&nbsp;to check if Grafana is reachable and there are no HTTPS certificate issues. You may need to reload this page after accepting any Browser certificate exceptions</cd-alert-panel>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <div class=\"grafana-container\">\n        <iframe #iframe\n                id=\"iframe\"\n                [src]=\"grafanaSrc\"\n                class=\"grafana\"\n                [ngClass]=\"panelStyle\"\n                frameborder=\"0\"\n                scrolling=\"no\"\n                [title]=\"title\"\n                i18n-title>\n        </iframe>\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\n\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-grafana',\n  templateUrl: './grafana.component.html',\n  styleUrls: ['./grafana.component.scss']\n})\nexport class GrafanaComponent implements OnInit, OnChanges {\n  grafanaSrc: SafeUrl;\n  url: string;\n  protocol: string;\n  host: string;\n  port: number;\n  baseUrl: any;\n  panelStyle: any;\n  grafanaExist = false;\n  mode = '&kiosk';\n  datasource: string;\n  loading = true;\n  styles: Record<string, string> = {};\n  dashboardExist = true;\n  showMessage = false;\n  time: string;\n  grafanaTimes: any;\n  icons = Icons;\n  readonly DEFAULT_TIME: string = 'from=now-1h&to=now';\n\n  @Input()\n  type: string;\n  @Input()\n  grafanaPath: string;\n  @Input()\n  grafanaStyle: string;\n  @Input()\n  uid: string;\n  @Input()\n  title: string;\n\n  constructor(private sanitizer: DomSanitizer, private settingsService: SettingsService) {\n    this.grafanaTimes = [\n      {\n        name: $localize`Last 5 minutes`,\n        value: 'from=now-5m&to=now'\n      },\n      {\n        name: $localize`Last 15 minutes`,\n        value: 'from=now-15m&to=now'\n      },\n      {\n        name: $localize`Last 30 minutes`,\n        value: 'from=now-30m&to=now'\n      },\n      {\n        name: $localize`Last 1 hour (Default)`,\n        value: 'from=now-1h&to=now'\n      },\n      {\n        name: $localize`Last 3 hours`,\n        value: 'from=now-3h&to=now'\n      },\n      {\n        name: $localize`Last 6 hours`,\n        value: 'from=now-6h&to=now'\n      },\n      {\n        name: $localize`Last 12 hours`,\n        value: 'from=now-12h&to=now'\n      },\n      {\n        name: $localize`Last 24 hours`,\n        value: 'from=now-24h&to=now'\n      },\n      {\n        name: $localize`Yesterday`,\n        value: 'from=now-1d%2Fd&to=now-1d%2Fd'\n      },\n      {\n        name: $localize`Today so far`,\n        value: 'from=now%2Fd&to=now'\n      },\n      {\n        name: $localize`Day before yesterday`,\n        value: 'from=now-2d%2Fd&to=now-2d%2Fd'\n      },\n      {\n        name: $localize`Last 2 days`,\n        value: 'from=now-2d&to=now'\n      },\n      {\n        name: $localize`This day last week`,\n        value: 'from=now-7d%2Fd&to=now-7d%2Fd'\n      },\n      {\n        name: $localize`Previous week`,\n        value: 'from=now-1w%2Fw&to=now-1w%2Fw'\n      },\n      {\n        name: $localize`This week so far`,\n        value: 'from=now%2Fw&to=now'\n      },\n      {\n        name: $localize`Last 7 days`,\n        value: 'from=now-7d&to=now'\n      },\n      {\n        name: $localize`Previous month`,\n        value: 'from=now-1M%2FM&to=now-1M%2FM'\n      },\n      {\n        name: $localize`This month so far`,\n        value: 'from=now%2FM&to=now'\n      },\n      {\n        name: $localize`Last 30 days`,\n        value: 'from=now-30d&to=now'\n      },\n      {\n        name: $localize`Last 90 days`,\n        value: 'from=now-90d&to=now'\n      },\n      {\n        name: $localize`Last 6 months`,\n        value: 'from=now-6M&to=now'\n      },\n      {\n        name: $localize`Last 1 year`,\n        value: 'from=now-1y&to=now'\n      },\n      {\n        name: $localize`Previous year`,\n        value: 'from=now-1y%2Fy&to=now-1y%2Fy'\n      },\n      {\n        name: $localize`This year so far`,\n        value: 'from=now%2Fy&to=now'\n      },\n      {\n        name: $localize`Last 2 years`,\n        value: 'from=now-2y&to=now'\n      },\n      {\n        name: $localize`Last 5 years`,\n        value: 'from=now-5y&to=now'\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.time = this.DEFAULT_TIME;\n    this.styles = {\n      one: 'grafana_one',\n      two: 'grafana_two',\n      three: 'grafana_three',\n      four: 'grafana_four'\n    };\n\n    this.datasource = this.type === 'metrics' ? 'Dashboard1' : 'Loki';\n\n    this.settingsService.ifSettingConfigured('api/grafana/url', (url) => {\n      this.grafanaExist = true;\n      this.loading = false;\n      this.baseUrl = url + '/d/';\n      this.getFrame();\n    });\n    this.panelStyle = this.styles[this.grafanaStyle];\n  }\n\n  getFrame() {\n    this.settingsService\n      .validateGrafanaDashboardUrl(this.uid)\n      .subscribe((data: any) => (this.dashboardExist = data === 200 || data === 401)); // 401 because grafana API shows unauthorized when anonymous access is disabled\n    if (this.type === 'metrics') {\n      this.url = `${this.baseUrl}${this.uid}/${this.grafanaPath}&refresh=2s&var-datasource=${this.datasource}${this.mode}&${this.time}`;\n    } else {\n      this.url = `${this.baseUrl.slice(0, -2)}${this.grafanaPath}orgId=1&left={\"datasource\": \"${\n        this.datasource\n      }\", \"queries\": [{\"refId\": \"A\"}], \"range\": {\"from\": \"now-1h\", \"to\": \"now\"}}${this.mode}`;\n    }\n    this.grafanaSrc = this.sanitizer.bypassSecurityTrustResourceUrl(this.url);\n  }\n\n  onTimepickerChange() {\n    if (this.grafanaExist) {\n      this.getFrame();\n    }\n  }\n\n  reset() {\n    this.time = this.DEFAULT_TIME;\n    if (this.grafanaExist) {\n      this.getFrame();\n    }\n  }\n\n  ngOnChanges() {\n    if (this.grafanaExist) {\n      this.getFrame();\n    }\n  }\n}\n","  <div class=\"form-text text-muted\">\n    <ng-container *ngIf=\"formAllFieldsRequired; else contentTpl\"\n                  i18n>\n      All fields are required, except where marked optional.\n    </ng-container>\n\n    <ng-template #contentTpl>\n      <ng-content></ng-content>\n    </ng-template>\n  </div>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-help-text',\n  templateUrl: './help-text.component.html',\n  styleUrls: ['./help-text.component.scss']\n})\nexport class HelpTextComponent {\n  @Input()\n  formAllFieldsRequired = false;\n}\n","export enum HelperType {\n  popover = 'popover',\n  tooltip = 'tooltip'\n}\n","<ng-template #tooltipTemplate>\n  <div class=\"cds--popover-scroll-container\">\n    <div [class]=\"class\"\n         [innerHtml]=\"html\">\n    </div>\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </div>\n</ng-template>\n@if (type === helperType.tooltip) {\n  <cds-tooltip [description]=\"tooltipTemplate\"\n               [autoAlign]=\"true\">\n    <svg [cdsIcon]=\"iconType\"\n         [size]=\"iconSize\"></svg>\n  </cds-tooltip>\n} @else {\n  <div class=\"inline-block\"\n       [ngClass]=\"class\">\n    <div\n      cdsPopover\n      [isOpen]=\"isPopoverOpen\"\n      [autoAlign]=\"true\"\n      (click)=\"togglePopover()\"\n      (keydown.enter)=\"togglePopover()\"\n      tabindex=\"0\">\n      <div class=\"popover-trigger\">\n        <svg\n          [cdsIcon]=\"iconType\"\n          [size]=\"iconSize\"></svg>\n      </div>\n      <cds-popover-content>\n        <div class=\"cds--popover-scroll-container\"\n             (click)=\"$event.stopPropagation()\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n      </cds-popover-content>\n    </div>\n  </div>\n}\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '../../enum/icons.enum';\nimport { HelperType } from '../../enum/cd-helper.enum';\n\n@Component({\n  selector: 'cd-helper',\n  templateUrl: './helper.component.html',\n  styleUrls: ['./helper.component.scss']\n})\nexport class HelperComponent {\n  icons = Icons;\n  isPopoverOpen = false;\n  helperType = HelperType;\n\n  // Tooltip: Displayed on hover or focus and contains contextual, helpful, and nonessential information.\n  // Popover: Displayed on click and can contain varying text and interactive elements\n  @Input() type: HelperType.tooltip | HelperType.popover = HelperType.tooltip; // Default to tooltip for backward compatibility\n  @Input() class: string;\n  @Input() html: any;\n  @Input() iconSize = this.icons.size16;\n  @Input() iconType = this.icons.info;\n\n  togglePopover() {\n    this.isPopoverOpen = !this.isPopoverOpen;\n  }\n\n  closePopover() {\n    if (this.type === HelperType.popover && this.isPopoverOpen) {\n      this.isPopoverOpen = false;\n    }\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ICON_TYPE, Icons, IconSize } from '../../enum/icons.enum';\n\n@Component({\n  selector: 'cd-icon',\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.scss'\n})\nexport class IconComponent implements OnInit {\n  @Input() type!: keyof typeof ICON_TYPE;\n  @Input() size: IconSize = IconSize.size16;\n\n  icon: string;\n\n  ngOnInit() {\n    this.icon = Icons[this.type];\n  }\n}\n","<svg  [cdsIcon]=\"icon\"\n      [size]=\"size\"\n      [class]=\"type+'-icon'\"></svg>\n","import { Component } from '@angular/core';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-loading-panel',\n  templateUrl: './loading-panel.component.html',\n  styleUrls: ['./loading-panel.component.scss']\n})\nexport class LoadingPanelComponent {\n  icons = Icons;\n}\n","<ngb-alert type=\"info\"\n           [dismissible]=\"false\">\n  <strong>\n    <i [ngClass]=\"[icons.spinner, icons.spin]\"\n       aria-hidden=\"true\"\n       class=\"me-2\"></i>\n  </strong>\n  <ng-content></ng-content>\n</ngb-alert>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'cd-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent {\n  @Input()\n  modalRef: NgbActiveModal;\n  @Input()\n  pageURL: string;\n\n  /**\n   * Should be a function that is triggered when the modal is hidden.\n   */\n  @Output()\n  hide = new EventEmitter();\n\n  constructor(private router: Router) {}\n\n  close() {\n    this.pageURL\n      ? this.router.navigate([this.pageURL, { outlets: { modal: null } }])\n      : this.modalRef?.close();\n    this.hide.emit();\n  }\n}\n","<div [ngClass]=\"pageURL ? 'modal' : ''\">\n  <div [ngClass]=\"pageURL ? 'modal-dialog' : ''\">\n    <div class=\"modal-content content-theme\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title float-start\">\n          <ng-content select=\".modal-title\"></ng-content>\n        </h4>\n        <button type=\"button\"\n                class=\"btn-close float-end\"\n                aria-label=\"Close\"\n                (click)=\"close()\">\n        </button>\n      </div>\n\n      <ng-content select=\".modal-content\"></ng-content>\n    </div>\n  </div>\n</div>\n","<div class=\"d-flex flex-column justify-content-center align-items-center bold\">\n  <ng-container>\n    <h3 class=\"text-center\"\n        [ngClass]=\"{ 'mt-3': status === 'in-progress' && isPaused }\"\n        *ngIf=\"!value || actionName === 'upgrading'\">\n      <i *ngIf=\"status === 'in-progress' && isPaused; else spinningIcon\"\n         [ngClass]=\"[icons.large, icons.spinner]\"></i>\n      <ng-template #spinningIcon>\n        <i [ngClass]=\"[icons.large, icons.spin, icons.spinner]\"></i>\n      </ng-template>\n    </h3>\n\n    <h3 class=\"text-center\"\n        [ngClass]=\"status === 'in-progress' && isPaused ? ['mt-3', 'mb-4'] : 'mt-2'\"\n        *ngIf=\"label\">\n      {{ label }}\n    </h3>\n\n    <h5 class=\"text-center mt-3\"\n        *ngIf=\"subLabel && status === 'in-progress' && !isPaused\">\n      {{ subLabel }}\n    </h5>\n\n    <h5 class=\"text-center mt-3\"\n        *ngIf=\"description\">\n      {{ description }}\n    </h5>\n\n    <p class=\"text-center text-muted mt-3\"\n       *ngIf=\"subDescription\">\n      {{ subDescription }}\n    </p>\n  </ng-container>\n\n  <div class=\"w-50 row h-100 d-flex justify-content-center align-items-center mt-4\">\n    <div class=\"text-center w-75\">\n      <ng-container *ngIf=\"completedItems && completedItems.length > 0\"\n                    i18n>\n        Finished {{ actionName }}:\n        <span class=\"text-success\">\n          {{ completedItems }}\n        </span>\n      </ng-container>\n\n      <!-- Progress Bar -->\n      <div class=\"mt-2\">\n        <ngb-progressbar type=\"info\"\n                         [value]=\"value\"\n                         [striped]=\"true\"\n                         [animated]=\"!isPaused\"></ngb-progressbar>\n      </div>\n      <p class=\"card-text text-muted\">\n        <span class=\"float-end\">{{ value || 0 }} %</span>\n      </p>\n    </div>\n\n    <h4 class=\"text-center m-2\"\n        *ngIf=\"helperText\">\n      {{ helperText }}\n    </h4>\n\n    <h5 class=\"text-center mt-2\"\n        *ngIf=\"footerText\">\n      {{ footerText }}\n    </h5>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '../../enum/icons.enum';\n\n@Component({\n  selector: 'cd-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent {\n  icons = Icons;\n  @Input() value: number;\n  @Input() label: string;\n  @Input() status: string;\n  @Input() description: string;\n  @Input() subLabel: string;\n  @Input() subDescription: string;\n  @Input() completedItems: string;\n  @Input() actionName: string;\n  @Input() helperText: string;\n  @Input() footerText: string;\n  @Input() isPaused: boolean;\n}\n","<cd-select #cdSelect\n           [data]=\"data\"\n           [options]=\"options\"\n           [messages]=\"messages\"\n           [selectionLimit]=\"selectionLimit\"\n           [customBadges]=\"customBadges\"\n           [customBadgeValidators]=\"customBadgeValidators\"\n           elemClass=\"me-2 select-menu-edit\"\n           (selection)=\"selection.emit($event)\">\n  <svg [cdsIcon]=\"icons.edit\"\n       [size]=\"icons.size20\"\n       class=\"cds-info-color\"></svg>\n</cd-select>\n\n<span *ngFor=\"let dataItem of data\">\n  <span class=\"badge badge-dark me-2\">\n    <span class=\"me-2\">{{ dataItem }}</span>\n      <a  class=\"badge-remove\"\n          (click)=\"cdSelect.removeItem(dataItem)\">\n      <svg [cdsIcon]=\"icons.destroy\"\n           [size]=\"icons.size20\"\n           class=\"cds-white\"></svg>\n    </a>\n  </span>\n</span>\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { SelectMessages } from '../select/select-messages.model';\nimport { SelectOption } from '../select/select-option.model';\nimport { SelectComponent } from '../select/select.component';\n\n@Component({\n  selector: 'cd-select-badges',\n  templateUrl: './select-badges.component.html',\n  styleUrls: ['./select-badges.component.scss']\n})\nexport class SelectBadgesComponent {\n  @Input()\n  data: Array<string> = [];\n  @Input()\n  options: Array<SelectOption> = [];\n  @Input()\n  messages = new SelectMessages({});\n  @Input()\n  selectionLimit: number;\n  @Input()\n  customBadges = false;\n  @Input()\n  customBadgeValidators: ValidatorFn[] = [];\n\n  @Output()\n  selection = new EventEmitter();\n\n  @ViewChild('cdSelect', { static: true })\n  cdSelect: SelectComponent;\n\n  icons = Icons;\n}\n","import _ from 'lodash';\n\nexport class SelectMessages {\n  empty: string;\n  selectionLimit: any;\n  customValidations = {};\n  filter: string;\n  add: string;\n  noOptions: string;\n\n  constructor(messages: {}) {\n    this.empty = $localize`No items selected.`;\n    this.selectionLimit = {\n      tooltip: $localize`Deselect item to select again`,\n      text: $localize`Selection limit reached`\n    };\n    this.filter = $localize`Filter tags`;\n    this.add = $localize`Add badge`; // followed by \" '{{filter.value}}'\"\n    this.noOptions = $localize`There are no items available.`;\n\n    _.merge(this, messages);\n  }\n}\n","export class SelectOption {\n  selected: boolean;\n  name: string;\n  description: string;\n  enabled: boolean;\n\n  constructor(selected: boolean, name: string, description: string, enabled = true) {\n    this.selected = selected;\n    this.name = name;\n    this.description = description;\n    this.enabled = enabled;\n  }\n}\n","<ng-template #popTemplate>\n  <form name=\"form\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"form\"\n        novalidate>\n    <div>\n      <input type=\"text\"\n             formControlName=\"filter\"\n             i18n-placeholder\n             [placeholder]=\"messages.filter\"\n             (keyup)=\"$event.keyCode === 13 ? selectOption() : updateFilter()\"\n             class=\"form-control text-center\" />\n      <ng-container *ngFor=\"let error of Object.keys(messages.customValidations)\">\n        <span class=\"invalid-feedback text-center d-block\"\n              *ngIf=\"form.showError('filter', formDir) && filter.hasError(error)\">\n          {{ messages.customValidations[error] }}\n        </span>\n      </ng-container>\n    </div>\n  </form>\n  <div *ngFor=\"let option of filteredOptions\"\n       class=\"select-menu-item\"\n       [ngClass]=\"{'help-block disabled': (data.length === selectionLimit || !option.enabled) && !option.selected}\"\n       (click)=\"triggerSelection(option)\">\n    <div class=\"select-menu-item-icon\">\n      <i [ngClass]=\"[icons.check]\"\n         aria-hidden=\"true\"\n         *ngIf=\"option.selected\"></i>\n      &nbsp;\n    </div>\n    <div class=\"select-menu-item-content\">\n      {{ option.name }}\n      <ng-container *ngIf=\"option.description\">\n        <br>\n        <small class=\"form-text text-muted\">\n          {{ option.description }}&nbsp;\n        </small>\n      </ng-container>\n    </div>\n  </div>\n  <div *ngIf=\"isCreatable()\"\n       class=\"select-menu-item\"\n       (click)=\"addCustomOption()\">\n    <div class=\"select-menu-item-icon\">\n      <i [ngClass]=\"[icons.tag]\"\n         aria-hidden=\"true\"></i>\n      &nbsp;\n    </div>\n    <div class=\"select-menu-item-content\">\n      {{ messages.add }} '{{ filter.value }}'\n    </div>\n  </div>\n  <div class=\"is-invalid\"\n       *ngIf=\"data.length === selectionLimit\">\n    <span class=\"form-text text-muted text-center text-warning\"\n          [ngbTooltip]=\"messages.selectionLimit.tooltip\"\n          *ngIf=\"data.length === selectionLimit\">\n      {{ messages.selectionLimit.text }}\n    </span>\n  </div>\n</ng-template>\n\n<a class=\"select-menu-edit float-start\"\n   [ngClass]=\"elemClass\"\n   [ngbPopover]=\"popTemplate\"\n   data-testid=\"select-menu-edit\"\n   *ngIf=\"customBadges || options.length > 0\">\n  <ng-content></ng-content>\n</a>\n\n<span class=\"form-text text-muted float-start\"\n      *ngIf=\"data.length === 0 && !(!customBadges && options.length === 0)\">\n  {{ messages.empty }}\n</span>\n\n<span class=\"form-text text-muted  float-start\"\n      *ngIf=\"!customBadges && options.length === 0\">\n  {{ messages.noOptions }}\n</span>\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { UntypedFormControl, ValidatorFn } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { SelectMessages } from './select-messages.model';\nimport { SelectOption } from './select-option.model';\n\n@Component({\n  selector: 'cd-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit, OnChanges {\n  @Input()\n  elemClass: string;\n  @Input()\n  data: Array<string> = [];\n  @Input()\n  options: Array<SelectOption> = [];\n  @Input()\n  messages = new SelectMessages({});\n  @Input()\n  selectionLimit: number;\n  @Input()\n  customBadges = false;\n  @Input()\n  customBadgeValidators: ValidatorFn[] = [];\n\n  @Output()\n  selection = new EventEmitter();\n\n  form: CdFormGroup;\n  filter: UntypedFormControl;\n  Object = Object;\n  filteredOptions: Array<SelectOption> = [];\n  icons = Icons;\n\n  ngOnInit() {\n    this.initFilter();\n    if (this.data.length > 0) {\n      this.initMissingOptions();\n    }\n    this.options = _.sortBy(this.options, ['name']);\n    this.updateOptions();\n  }\n\n  private initFilter() {\n    this.filter = new UntypedFormControl('', { validators: this.customBadgeValidators });\n    this.form = new CdFormGroup({ filter: this.filter });\n    this.filteredOptions = [...(this.options || [])];\n  }\n\n  private initMissingOptions() {\n    const options = this.options.map((option) => option.name);\n    const needToCreate = this.data.filter((option) => options.indexOf(option) === -1);\n    needToCreate.forEach((option) => this.addOption(option));\n    this.forceOptionsToReflectData();\n  }\n\n  private addOption(name: string) {\n    this.options.push(new SelectOption(false, name, ''));\n    this.options = _.sortBy(this.options, ['name']);\n    this.triggerSelection(this.options.find((option) => option.name === name));\n  }\n\n  triggerSelection(option: SelectOption) {\n    if (\n      !option ||\n      (this.selectionLimit && !option.selected && this.data.length >= this.selectionLimit)\n    ) {\n      return;\n    }\n    option.selected = !option.selected;\n    this.updateOptions();\n    this.selection.emit({ option: option });\n  }\n\n  private updateOptions() {\n    this.data.splice(0, this.data.length);\n    this.options.forEach((option: SelectOption) => {\n      if (option.selected) {\n        this.data.push(option.name);\n      }\n    });\n    this.updateFilter();\n  }\n\n  updateFilter() {\n    this.filteredOptions = this.options.filter((option) => option.name.includes(this.filter.value));\n  }\n\n  private forceOptionsToReflectData() {\n    this.options.forEach((option) => {\n      if (this.data.indexOf(option.name) !== -1) {\n        option.selected = true;\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.filter) {\n      this.updateFilter();\n    }\n    if (!this.options || !this.data || this.data.length === 0) {\n      return;\n    }\n    this.forceOptionsToReflectData();\n  }\n\n  selectOption() {\n    if (this.filteredOptions.length === 0) {\n      this.addCustomOption();\n    } else {\n      this.triggerSelection(this.filteredOptions[0]);\n      this.resetFilter();\n    }\n  }\n\n  addCustomOption() {\n    if (!this.isCreatable()) {\n      return;\n    }\n    this.addOption(this.filter.value);\n    this.resetFilter();\n  }\n\n  isCreatable() {\n    return (\n      this.customBadges &&\n      this.filter.valid &&\n      this.filter.value.length > 0 &&\n      this.filteredOptions.every((option) => option.name !== this.filter.value)\n    );\n  }\n\n  private resetFilter() {\n    this.filter.setValue('');\n    this.updateFilter();\n  }\n\n  removeItem(item: string) {\n    this.triggerSelection(\n      this.options.find((option: SelectOption) => option.name === item && option.selected)\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\n\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartTooltip } from '~/app/shared/models/chart-tooltip';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\n\n@Component({\n  selector: 'cd-sparkline',\n  templateUrl: './sparkline.component.html',\n  styleUrls: ['./sparkline.component.scss']\n})\nexport class SparklineComponent implements OnInit, OnChanges {\n  @ViewChild('sparkCanvas', { static: true })\n  chartCanvasRef: ElementRef;\n  @ViewChild('sparkTooltip', { static: true })\n  chartTooltipRef: ElementRef;\n  @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n\n  @Input()\n  data: any;\n  @Input()\n  style = {\n    height: '30px',\n    width: '100px'\n  };\n  @Input()\n  isBinary: boolean;\n\n  options: Record<string, any> = {\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: false,\n        mode: 'index',\n        intersect: false,\n        custom: undefined,\n        callbacks: {\n          label: (tooltipItem: any) => {\n            if (!tooltipItem.parsed) return;\n            if (this.isBinary) {\n              return this.dimlessBinaryPipe.transform(tooltipItem.parsed.y);\n            } else {\n              return tooltipItem.parsed.y;\n            }\n          },\n          title: () => ''\n        }\n      }\n    },\n    animation: {\n      duration: 0\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    elements: {\n      line: {\n        borderWidth: 1\n      }\n    },\n    scales: {\n      y: {\n        display: false\n      },\n      x: {\n        display: false\n      }\n    }\n  };\n\n  public datasets: Array<any> = [\n    {\n      data: [],\n      backgroundColor: 'rgba(40,140,234,0.2)',\n      borderColor: 'rgba(40,140,234,1)',\n      pointBackgroundColor: 'rgba(40,140,234,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(40,140,234,0.8)'\n    }\n  ];\n\n  public labels: Array<any> = [];\n\n  chartData: {\n    datasets: any[];\n    labels: any[];\n  } = {\n    datasets: this.datasets,\n    labels: this.labels\n  };\n\n  constructor(private dimlessBinaryPipe: DimlessBinaryPipe) {}\n\n  ngOnInit() {\n    const getStyleTop = (tooltip: any) => {\n      return tooltip.caretY - tooltip.height - 6 - 5 + 'px';\n    };\n\n    const getStyleLeft = (tooltip: any, positionX: number) => {\n      return positionX + tooltip.caretX + 'px';\n    };\n\n    const chartTooltip = new ChartTooltip(\n      this.chartCanvasRef,\n      this.chartTooltipRef,\n      getStyleLeft,\n      getStyleTop\n    );\n\n    chartTooltip.customColors = {\n      backgroundColor: this.datasets[0].pointBackgroundColor,\n      borderColor: this.datasets[0].pointBorderColor\n    };\n\n    this.options.plugins.tooltip.external = (tooltip: any) => {\n      chartTooltip.customTooltips(tooltip);\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.chartData.datasets[0].data = changes['data'].currentValue;\n    this.chartData.labels = [...Array(changes['data'].currentValue.length).fill('')];\n    if (this.chart) {\n      this.chart.chart.update();\n    }\n  }\n}\n","<div class=\"chart-container\"\n     [ngStyle]=\"style\">\n  <canvas baseChart\n          #sparkCanvas\n          [data]=\"chartData\"\n          [options]=\"options\"\n          [type]=\"'line'\">\n  </canvas>\n  <div class=\"chartjs-tooltip\"\n       #sparkTooltip>\n    <table></table>\n  </div>\n</div>\n","<button [type]=\"type\"\n        class=\"tc_submitButton\"\n        [ngClass]=\"{'w-100': modalForm}\"\n        [disabled]=\"loading || disabled\"\n        (click)=\"submit($event)\"\n        [attr.aria-label]=\"ariaLabel\"\n        size=\"lg\"\n        [cdsButton]=\"buttonType\"\n        modal-primary-focus>\n  <ng-content></ng-content>\n  <cds-loading [isActive]=\"loading\"\n               [overlay]=\"false\"\n               size=\"sm\"\n               *ngIf=\"loading\"></cds-loading>\n</button>\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, UntypedFormGroup, FormGroupDirective, NgForm } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n/**\n * This component will render a submit button with the given label.\n *\n * The button will disabled itself and show a loading icon when the user clicks\n * it, usually initiating a request to the server, and it will stay in that\n * state until the request is finished.\n *\n * To indicate that the request failed, returning the button to the enable\n * state, you need to insert an error in the form with the 'cdSubmitButton' key.\n * p.e.: this.rbdForm.setErrors({'cdSubmitButton': true});\n *\n * It will also check if the form is valid, when clicking the button, and will\n * focus on the first invalid input.\n *\n * @export\n * @class SubmitButtonComponent\n * @implements {OnInit}\n */\n@Component({\n  selector: 'cd-submit-button',\n  templateUrl: './submit-button.component.html',\n  styleUrls: ['./submit-button.component.scss']\n})\nexport class SubmitButtonComponent implements OnInit {\n  @Input()\n  form: UntypedFormGroup | NgForm;\n\n  @Input()\n  type = 'submit';\n\n  @Input()\n  disabled = false;\n\n  // A CSS class string to apply to the button's main element.\n  @Input()\n  btnClass: string;\n\n  @Input()\n  ariaLabel: string;\n\n  @Input()\n  buttonType: 'primary' | 'danger' = 'primary';\n\n  @Input()\n  modalForm = false;\n\n  @Output()\n  submitAction = new EventEmitter();\n\n  loading = false;\n  icons = Icons;\n\n  constructor(private elRef: ElementRef) {}\n\n  ngOnInit() {\n    this.form?.statusChanges.subscribe(() => {\n      if (_.has(this.form.errors, 'cdSubmitButton')) {\n        this.loading = false;\n        _.unset(this.form.errors, 'cdSubmitButton');\n        // Handle Reactive forms.\n        if (this.form instanceof AbstractControl) {\n          (<AbstractControl>this.form).updateValueAndValidity();\n        }\n      }\n    });\n  }\n\n  submit($event: any) {\n    this.focusButton();\n\n    // Special handling for Template driven forms.\n    if (this.form instanceof FormGroupDirective) {\n      (<FormGroupDirective>this.form).onSubmit($event);\n    }\n\n    if (this.form?.invalid) {\n      this.focusInvalid();\n      return;\n    }\n\n    this.loading = true;\n    this.submitAction.emit();\n  }\n\n  focusButton() {\n    this.elRef.nativeElement.offsetParent.querySelector(`button[type=\"${this.type}\"]`).focus();\n  }\n\n  focusInvalid() {\n    const target = this.elRef.nativeElement.offsetParent.querySelector(\n      'input.ng-invalid, select.ng-invalid'\n    );\n\n    if (target) {\n      target.focus();\n    }\n  }\n}\n","import { Statuses } from '@carbon/charts-angular';\n\nexport const StatusToCssMap: Record<Statuses, string> = {\n  [Statuses.SUCCESS]: 'cds-support-success',\n  [Statuses.WARNING]: 'cds-support-warning',\n  [Statuses.DANGER]: 'cds-support-error'\n};\n","<ng-container *ngIf=\"customLabel\">\n  <ng-container *ngIf=\"isCustomLabelTemplate; else stringLabel\">\n    <ng-container *ngTemplateOutlet=\"customLabel\"></ng-container>\n  </ng-container>\n  <ng-template #stringLabel>\n    <ng-container i18n>{{ customLabel }}</ng-container>\n  </ng-template>\n</ng-container>\n<ibm-meter-chart *ngIf=\"used >=0 && total > 0; else noDataFound\"\n                 [data]=\"data\"\n                 [options]=\"options\">\n</ibm-meter-chart>\n<ng-template #noDataFound>\n  <span i18n>{{noDataText}}</span>\n</ng-template>\n","import { Component, Input, ElementRef, OnInit, TemplateRef } from '@angular/core';\nimport { ChartTabularData, MeterChartOptions, Statuses } from '@carbon/charts-angular';\nimport { StatusToCssMap } from '../../enum/usage-bar-chart.enum';\nimport { CssHelper } from '../../classes/css-helper';\nimport { DimlessBinaryPipe } from '../../pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '../../pipes/dimless.pipe';\n\nconst PRIMARY_COLOR = 'primary'; // Default theme primary color variable\n\n@Component({\n  selector: 'cd-usage-bar',\n  templateUrl: './usage-bar.component.html',\n  styleUrls: ['./usage-bar.component.scss']\n})\nexport class UsageBarComponent implements OnInit {\n  // Total amount of resource (e.g., disk, memory) available, in bytes.\n  @Input({ required: true }) total: number = 0;\n\n  // Amount of resource currently used, in bytes.\n  @Input({ required: true }) used: number = 0;\n\n  // Optional label or title for the chart, used in legends and tooltips.\n  @Input() title: string = '';\n\n  // Threshold (0–1) to mark the start of the \"warning\" zone (e.g., 0.5 = 50%).\n  @Input() warningThreshold: number;\n\n  // Threshold (0–1) to mark the start of the \"danger\" zone (e.g., 0.8 = 80%).\n  @Input() errorThreshold: number;\n\n  /**\n   * If true, values are formatted using binary units (e.g., KiB, MiB).\n   * If false, decimal units are used (e.g., kB, MB).\n   */\n  @Input() isBinary: boolean = true;\n\n  // Number of decimal places to show in formatted numbers.\n  @Input() decimals: number = 2;\n\n  // Height of the chart component (CSS units like `rem`, `px`, `%`).\n  @Input() height: string = '2rem';\n\n  // Width of the chart component (CSS units like `rem`, `px`, `%`).\n  @Input() width: string = '15rem';\n\n  // Custom unit label for the total value (e.g., \"B\", \"kB\", \"requests\").\n  @Input() totalUnit: string = 'B';\n\n  // Whether chart animations are enabled (e.g., grow bars on change).\n  @Input() animations: boolean = false;\n\n  // Enables the legend section (useful for grouped charts).\n  @Input() legendEnabled: boolean = false;\n\n  // Enables the toolbar (for exporting, toggling datasets, etc., depending on chart lib).\n  @Input() toolbarEnabled: boolean = false;\n\n  // Text to display when `total` is zero or there’s no data.\n  @Input() noDataText: string = '-';\n\n  /**\n   * If true, breakdown is shown as a percentage (e.g., \"75% used\").\n   * When false, raw values like \"750 MB used\" are shown instead.\n   */\n  @Input() enablePercentageLabel: boolean = true;\n\n  // Optional custom label (e.g., <ng-template><div>Capacity</div></<ng-template>) (overrides default label).\n  @Input() customLabel: TemplateRef<any> | string = '';\n\n  // Custom tooltip options passed directly to the chart library.\n  @Input() tooltipOptions?: MeterChartOptions['tooltip'] = {};\n\n  // Optional override for the default color scale (e.g., { Memory: \"#ff0000\" }).\n  @Input() customColorScale?: { [key: string]: string };\n\n  /**\n   * Optional custom formatter for the total value (overrides default formatter).\n   * Example usage: (total) => `${total} requests`\n   */\n  @Input() customTotalFormatter?: (total: number) => string;\n\n  /**\n   * Optional custom formatter for the breakdown section (overrides default formatter).\n   * Example usage: ({ used, total }) => `${used} of ${total} used`\n   */\n  @Input() customBreakdownFormatter?: (x: { used: number; total: number }) => string;\n\n  data: ChartTabularData = [];\n  options: MeterChartOptions = {};\n\n  constructor(\n    private elementRef: ElementRef,\n    private cssHelper: CssHelper,\n    private dimlessPipe: DimlessPipe,\n    private dimlessBinaryPipe: DimlessBinaryPipe\n  ) {}\n\n  get isCustomLabelTemplate(): boolean {\n    return this.customLabel instanceof TemplateRef;\n  }\n\n  ngOnInit(): void {\n    const chartData: ChartTabularData = [{ group: this.title || '', value: this.used }];\n    let thresholds: MeterChartOptions['meter']['status']['ranges'] = [];\n    if (this.warningThreshold && this.errorThreshold) {\n      thresholds = [\n        {\n          range: [this.total * this.warningThreshold, this.total * this.errorThreshold],\n          status: Statuses.WARNING\n        },\n        { range: [this.total * this.errorThreshold, this.total], status: Statuses.DANGER }\n      ];\n    }\n    const colorScale = this.customColorScale || {\n      [this.title || '']: this.getStatusFromThresholds(this.used, thresholds)\n    };\n\n    const chartOptions: MeterChartOptions = {\n      legend: { enabled: this.legendEnabled },\n      toolbar: { enabled: this.toolbarEnabled },\n      tooltip: {\n        enabled: true,\n        ...this.tooltipOptions,\n        customHTML: this.tooltipOptions?.customHTML || (() => this.defaultTooltip())\n      },\n      animations: this.animations,\n      height: this.height,\n      width: this.width,\n      color: { scale: colorScale },\n      meter: {\n        showLabels: !this.customLabel,\n        proportional: {\n          total: this.total,\n          unit: this.totalUnit,\n          totalFormatter: () => this.getTotalFormatter(),\n          breakdownFormatter: () => this.getBreakdownFormatter()\n        }\n      }\n    };\n    if (thresholds.length > 0) {\n      chartOptions.meter = {\n        ...chartOptions.meter,\n        status: {\n          ranges: thresholds\n        }\n      };\n    }\n    this.data = chartData;\n    this.options = chartOptions;\n  }\n\n  private getStatusFromThresholds(\n    value: number,\n    thresholds: MeterChartOptions['meter']['status']['ranges']\n  ): string {\n    for (const threshold of thresholds) {\n      const [min, max] = threshold.range;\n      if (value >= min && value < max) {\n        return this.getCssVariableValue(\n          StatusToCssMap[threshold.status as keyof typeof StatusToCssMap]\n        );\n      }\n    }\n    return this.getCssVariableValue(PRIMARY_COLOR);\n  }\n\n  private getCssVariableValue(variableName: string): string {\n    return this.cssHelper.propertyValue(variableName, this.elementRef.nativeElement);\n  }\n\n  private formatValue(value: number): string {\n    return this.isBinary\n      ? this.dimlessBinaryPipe.transform(value, this.decimals)\n      : this.dimlessPipe.transform(value, this.decimals);\n  }\n\n  private defaultTooltip(): string {\n    const used = this.formatValue(this.used);\n    const available = this.formatValue(this.total - this.used);\n    const total = this.formatValue(this.total);\n    return `<div class=\"meter-tooltip\">\n      <div><strong>Used:</strong> ${used}</div>\n      <div><strong>Available:</strong> ${available}</div>\n      <div><strong>Total:</strong> ${total}</div>\n    </div>`;\n  }\n\n  private getTotalFormatter(): string {\n    if (this.customTotalFormatter) {\n      return this.customTotalFormatter!(this.total);\n    }\n    if (this.enablePercentageLabel && this.total > 0) {\n      return '';\n    }\n\n    return $localize`${this.formatValue(this.total)} total`;\n  }\n\n  private getBreakdownFormatter(): string {\n    if (this.customBreakdownFormatter) {\n      return this.customBreakdownFormatter!({ used: this.used, total: this.total });\n    }\n\n    if (this.enablePercentageLabel && this.total > 0) {\n      const percentage = (this.used / this.total) * 100;\n      if (percentage < 0.01) {\n        return '0%';\n      }\n\n      const formatted = percentage.toFixed(this.decimals);\n      return `${formatted}%`;\n    }\n\n    return $localize`${this.formatValue(this.used)} used`;\n  }\n}\n","import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { Step } from 'carbon-components-angular';\n\nimport * as _ from 'lodash';\nimport { Observable, Subscription } from 'rxjs';\n\nimport { WizardStepModel } from '~/app/shared/models/wizard-steps';\nimport { WizardStepsService } from '~/app/shared/services/wizard-steps.service';\n\n@Component({\n  selector: 'cd-wizard',\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.scss']\n})\nexport class WizardComponent implements OnInit, OnDestroy, OnChanges {\n  @Input()\n  stepsTitle: Step[];\n\n  steps: Observable<WizardStepModel[]>;\n  currentStep: WizardStepModel;\n  currentStepSub: Subscription;\n\n  constructor(private stepsService: WizardStepsService) {\n    this.stepsTitle?.forEach((steps, index) => {\n      steps.onClick = () => (this.currentStep.stepIndex = index);\n    });\n  }\n\n  ngOnInit(): void {\n    this.initializeSteps();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.stepsTitle && !changes.stepsTitle.isFirstChange()) {\n      this.initializeSteps();\n    }\n  }\n\n  private initializeSteps(): void {\n    this.stepsService.setTotalSteps(this.stepsTitle.length);\n    this.steps = this.stepsService.getSteps();\n    this.currentStepSub = this.stepsService.getCurrentStep().subscribe((step: WizardStepModel) => {\n      this.currentStep = step;\n    });\n  }\n\n  onStepClick(step: WizardStepModel) {\n    this.stepsService.setCurrentStep(step);\n  }\n\n  ngOnDestroy(): void {\n    this.currentStepSub.unsubscribe();\n  }\n}\n","<div class=\"indicator\">\n  <cds-progress-indicator\n    orientation=\"vertical\"\n    [steps]=\"stepsTitle\"\n    [current]=\"currentStep?.stepIndex\">\n  </cds-progress-indicator>\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { environment } from '~/environments/environment';\n\nexport class AppConstants {\n  public static readonly organization = 'ceph';\n  public static readonly projectName = 'Ceph Dashboard';\n  public static readonly defaultUser = 'dashboard';\n  public static readonly license = 'Free software (LGPL 2.1).';\n  public static readonly copyright = 'Copyright(c) ' + environment.year + ' Ceph contributors.';\n  public static readonly cephLogo = 'assets/Ceph_Logo.svg';\n}\n\nexport enum URLVerbs {\n  /* Create a new item */\n  CREATE = 'create',\n\n  /* Make changes to an existing item */\n  EDIT = 'edit',\n\n  /* Make changes to an existing item */\n  UPDATE = 'update',\n\n  /* Remove an item from a container WITHOUT deleting it */\n  REMOVE = 'remove',\n\n  /* Destroy an existing item */\n  DELETE = 'delete',\n\n  /* Add an existing item to a container */\n  ADD = 'add',\n\n  /* Non-standard verbs */\n  COPY = 'copy',\n  CLONE = 'clone',\n\n  /* Prometheus wording */\n  RECREATE = 'recreate',\n  EXPIRE = 'expire',\n\n  /* Daemons */\n  RESTART = 'Restart'\n}\n\nexport enum ActionLabels {\n  /* Create a new item */\n  CREATE = 'Create',\n\n  /* Destroy an existing item */\n  DELETE = 'Delete',\n\n  /* Add an existing item to a container */\n  ADD = 'Add',\n\n  /* Remove an item from a container WITHOUT deleting it */\n  REMOVE = 'Remove',\n\n  /* Make changes to an existing item */\n  EDIT = 'Edit',\n\n  /* */\n  CANCEL = 'Cancel',\n\n  /* Non-standard actions */\n  COPY = 'Copy',\n  CLONE = 'Clone',\n  UPDATE = 'Update',\n  EVICT = 'Evict',\n\n  /* Read-only */\n  SHOW = 'Show',\n\n  /* Prometheus wording */\n  RECREATE = 'Recreate',\n  EXPIRE = 'Expire',\n\n  /* Daemons */\n  START = 'Start',\n  STOP = 'Stop',\n  REDEPLOY = 'Redeploy',\n  RESTART = 'Restart'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActionLabelsI18n {\n  /* This service is required as the i18n polyfill does not provide static\n  translation\n  */\n  CREATE: string;\n  DELETE: string;\n  ADD: string;\n  REMOVE: string;\n  EDIT: string;\n  CANCEL: string;\n  PREVIEW: string;\n  MOVE: string;\n  NEXT: string;\n  BACK: string;\n  CHANGE: string;\n  COPY: string;\n  CLONE: string;\n  DEEP_SCRUB: string;\n  DESTROY: string;\n  EVICT: string;\n  EXPIRE: string;\n  FLATTEN: string;\n  MARK_DOWN: string;\n  MARK_IN: string;\n  MARK_LOST: string;\n  MARK_OUT: string;\n  PROTECT: string;\n  PURGE: string;\n  RECREATE: string;\n  RENAME: string;\n  RESTORE: string;\n  REWEIGHT: string;\n  ROLLBACK: string;\n  SCRUB: string;\n  SET: string;\n  SUBMIT: string;\n  SHOW: string;\n  TIERING: string;\n  TRASH: string;\n  UNPROTECT: string;\n  UNSET: string;\n  UPDATE: string;\n  FLAGS: string;\n  ENTER_MAINTENANCE: string;\n  EXIT_MAINTENANCE: string;\n  REMOVE_SCHEDULING: string;\n  PROMOTE: string;\n  DEMOTE: string;\n  START_DRAIN: string;\n  STOP_DRAIN: string;\n  START: string;\n  STOP: string;\n  REDEPLOY: string;\n  RESTART: string;\n  RESYNC: string;\n  EXPORT: string;\n  IMPORT: any;\n  MIGRATE: string;\n  START_UPGRADE: string;\n  ACTIVATE: string;\n  DEACTIVATE: string;\n  ATTACH: string;\n  CONNECT: string;\n  DISCONNECT: string;\n  RECONNECT: string;\n  AUTHORIZE: string;\n  EXPAND_CLUSTER: string;\n  SETUP_MULTISITE_REPLICATION: string;\n  NFS_EXPORT: string;\n\n  constructor() {\n    /* Create a new item */\n    this.CREATE = $localize`Create`;\n\n    this.EXPORT = $localize`Export`;\n\n    this.IMPORT = $localize`Import`;\n\n    this.SETUP_MULTISITE_REPLICATION = $localize`Setup Multi-site Replication`;\n\n    this.MIGRATE = $localize`Migrate`;\n\n    /* Destroy an existing item */\n    this.DELETE = $localize`Delete`;\n\n    /* Add an existing item to a container */\n    this.ADD = $localize`Add`;\n    this.SET = $localize`Set`;\n    this.SUBMIT = $localize`Submit`;\n\n    /* Remove an item from a container WITHOUT deleting it */\n    this.REMOVE = $localize`Remove`;\n    this.UNSET = $localize`Unset`;\n\n    /* Make changes to an existing item */\n    this.EDIT = $localize`Edit`;\n    this.UPDATE = $localize`Update`;\n    this.CANCEL = $localize`Cancel`;\n    this.PREVIEW = $localize`Preview`;\n    this.MOVE = $localize`Move`;\n\n    /* Wizard wording */\n    this.NEXT = $localize`Next`;\n    this.BACK = $localize`Back`;\n\n    /* Non-standard actions */\n    this.CLONE = $localize`Clone`;\n    this.COPY = $localize`Copy`;\n    this.DEEP_SCRUB = $localize`Deep Scrub`;\n    this.DESTROY = $localize`Destroy`;\n    this.EVICT = $localize`Evict`;\n    this.FLATTEN = $localize`Flatten`;\n    this.MARK_DOWN = $localize`Mark Down`;\n    this.MARK_IN = $localize`Mark In`;\n    this.MARK_LOST = $localize`Mark Lost`;\n    this.MARK_OUT = $localize`Mark Out`;\n    this.PROTECT = $localize`Protect`;\n    this.PURGE = $localize`Purge`;\n    this.RENAME = $localize`Rename`;\n    this.RESTORE = $localize`Restore`;\n    this.REWEIGHT = $localize`Reweight`;\n    this.ROLLBACK = $localize`Rollback`;\n    this.SCRUB = $localize`Scrub`;\n    this.SHOW = $localize`Show`;\n    this.TIERING = $localize`Tiering`;\n    this.TRASH = $localize`Move to Trash`;\n    this.UNPROTECT = $localize`Unprotect`;\n    this.CHANGE = $localize`Change`;\n    this.FLAGS = $localize`Flags`;\n    this.ENTER_MAINTENANCE = $localize`Enter Maintenance`;\n    this.EXIT_MAINTENANCE = $localize`Exit Maintenance`;\n    this.AUTHORIZE = $localize`Authorize`;\n\n    this.START_DRAIN = $localize`Start Drain`;\n    this.STOP_DRAIN = $localize`Stop Drain`;\n    this.RESYNC = $localize`Resync`;\n    /* Prometheus wording */\n    this.RECREATE = $localize`Recreate`;\n    this.EXPIRE = $localize`Expire`;\n\n    this.START = $localize`Start`;\n    this.STOP = $localize`Stop`;\n    this.REDEPLOY = $localize`Redeploy`;\n    this.RESTART = $localize`Restart`;\n\n    this.REMOVE_SCHEDULING = $localize`Remove Scheduling`;\n    this.PROMOTE = $localize`Promote`;\n    this.DEMOTE = $localize`Demote`;\n\n    this.START_UPGRADE = $localize`Start Upgrade`;\n\n    this.ACTIVATE = $localize`Activate`;\n    this.DEACTIVATE = $localize`Deactivate`;\n\n    this.ATTACH = $localize`Attach`;\n    this.CONNECT = $localize`Connect`;\n    this.DISCONNECT = $localize`Disconnect`;\n    this.RECONNECT = $localize`Reconnect`;\n    this.EXPAND_CLUSTER = $localize`Expand Cluster`;\n\n    this.NFS_EXPORT = $localize`Create NFS Export`;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SucceededActionLabelsI18n {\n  /* This service is required as the i18n polyfill does not provide static\n  translation\n  */\n  CREATED: string;\n  DELETED: string;\n  ADDED: string;\n  REMOVED: string;\n  EDITED: string;\n  CANCELED: string;\n  PREVIEWED: string;\n  MOVED: string;\n  EXPORT: string;\n  IMPORT: string;\n  COPIED: string;\n  CLONED: string;\n  DEEP_SCRUBBED: string;\n  DESTROYED: string;\n  FLATTENED: string;\n  MARKED_DOWN: string;\n  MARKED_IN: string;\n  MARKED_LOST: string;\n  MARKED_OUT: string;\n  PROTECTED: string;\n  PURGED: string;\n  RENAMED: string;\n  RESTORED: string;\n  REWEIGHTED: string;\n  ROLLED_BACK: string;\n  SCRUBBED: string;\n  SHOWED: string;\n  TRASHED: string;\n  UNPROTECTED: string;\n  CHANGE: string;\n  RECREATED: string;\n  EXPIRED: string;\n  MOVE: string;\n  START: string;\n  STOP: string;\n  REDEPLOY: string;\n  RESTART: string;\n\n  constructor() {\n    /* Create a new item */\n    this.CREATED = $localize`Created`;\n\n    /* Destroy an existing item */\n    this.DELETED = $localize`Deleted`;\n\n    /* Add an existing item to a container */\n    this.ADDED = $localize`Added`;\n\n    /* Remove an item from a container WITHOUT deleting it */\n    this.REMOVED = $localize`Removed`;\n\n    /* Make changes to an existing item */\n    this.EDITED = $localize`Edited`;\n    this.CANCELED = $localize`Canceled`;\n    this.PREVIEWED = $localize`Previewed`;\n    this.MOVED = $localize`Moved`;\n\n    /* Non-standard actions */\n    this.CLONED = $localize`Cloned`;\n    this.COPIED = $localize`Copied`;\n    this.DEEP_SCRUBBED = $localize`Deep Scrubbed`;\n    this.DESTROYED = $localize`Destroyed`;\n    this.FLATTENED = $localize`Flattened`;\n    this.MARKED_DOWN = $localize`Marked Down`;\n    this.MARKED_IN = $localize`Marked In`;\n    this.MARKED_LOST = $localize`Marked Lost`;\n    this.MARKED_OUT = $localize`Marked Out`;\n    this.PROTECTED = $localize`Protected`;\n    this.PURGED = $localize`Purged`;\n    this.RENAMED = $localize`Renamed`;\n    this.RESTORED = $localize`Restored`;\n    this.REWEIGHTED = $localize`Reweighted`;\n    this.ROLLED_BACK = $localize`Rolled back`;\n    this.SCRUBBED = $localize`Scrubbed`;\n    this.SHOWED = $localize`Showed`;\n    this.TRASHED = $localize`Moved to Trash`;\n    this.UNPROTECTED = $localize`Unprotected`;\n    this.CHANGE = $localize`Change`;\n\n    /* Prometheus wording */\n    this.RECREATED = $localize`Recreated`;\n    this.EXPIRED = $localize`Expired`;\n\n    this.START = $localize`Start`;\n    this.STOP = $localize`Stop`;\n    this.REDEPLOY = $localize`Redeploy`;\n    this.RESTART = $localize`Restart`;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimerServiceInterval {\n  TIMER_SERVICE_PERIOD: number;\n\n  constructor() {\n    this.TIMER_SERVICE_PERIOD = 5000;\n  }\n}\n\nexport const SSL_PROTOCOLS = ['TLSv1.2', 'TLSv1.3'];\n\nexport const SSL_CIPHERS = [\n  'ECDHE',\n  'ECDSA',\n  'AES128',\n  'GCM',\n  'SHA256',\n  'RSA',\n  'AES256',\n  'SHA384',\n  'CHACHA20',\n  'POLY1305',\n  'DHE'\n];\n\nexport const USER = 'user';\nexport const VERSION_PREFIX = 'ceph version';\n","export const DEFAULT_SUBVOLUME_GROUP = '_nogroup';\n","<cd-table [data]=\"data\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          [toolHeader]=\"false\"\n          [autoReload]=\"false\"\n          [autoSave]=\"false\"\n          [footer]=\"false\"\n          size=\"xs\"\n          [layer]=\"0\"\n          [limit]=\"0\">\n</cd-table>\n<ng-template #cellScopeCheckboxTpl\n             let-column=\"data.column\"\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <div class=\"m-2\">\n    <cds-checkbox id=\"scope_{{ row.scope }}\"\n                  [checked]=\"isRowChecked(row.scope)\"\n                  [disabled]=\"isDisabled\"\n                  (checkedChange)=\"onClickCellCheckbox(row.scope, column.prop, $event)\"\n                  i18n>\n    <span class=\"datatable-permissions-scope-cell-label custom-control-label\"\n          for=\"scope_{{ row.scope }}\">{{ value }}</span>\n    </cds-checkbox>\n  </div>\n</ng-template>\n<ng-template #cellPermissionCheckboxTpl\n             let-column=\"data.column\"\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <div class=\"m-2\">\n    <cds-checkbox [id]=\"row.scope + '-' + column.prop\"\n                  [checked]=\"value\"\n                  [disabled]=\"isDisabled\"\n                  (checkedChange)=\"onClickCellCheckbox(row.scope, column.prop, $event)\"\n                  i18n>\n    <span class=\"custom-control-label\"\n          [for]=\"row.scope + '-' + column.prop\"></span>\n    </cds-checkbox>\n  </div>\n</ng-template>\n<ng-template #headerPermissionCheckboxTpl\n             let-column=\"data\">\n  <div class=\"m-2\">\n    <cds-checkbox id=\"header_{{ column.prop }}\"\n                  [disabled]=\"isDisabled\"\n                  [checked]=\"isHeaderChecked(column.prop)\"\n                  (checkedChange)=\"onClickHeaderCheckbox(column.prop, $event)\"\n                  i18n>\n    <span class=\"datatable-permissions-header-cell-label custom-control-label\"\n          for=\"header_{{ column.prop }}\">{{ column.name }}</span>\n    </cds-checkbox>\n  </div>\n</ng-template>\n","import { Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { CdTableColumn } from '../../models/cd-table-column';\nimport { CdFormGroup } from '../../forms/cd-form-group';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'cd-checked-table-form',\n  templateUrl: './checked-table-form.component.html',\n  styleUrls: ['./checked-table-form.component.scss']\n})\nexport class CheckedTableFormComponent implements OnInit {\n  @Input() data: Array<any>;\n  @Input() columns: CdTableColumn[];\n  @Input() form: CdFormGroup;\n  @Input() inputField: string;\n  @Input() scopes: Array<string> = [];\n  @Input() isTableForOctalMode = false;\n  @Input() initialValue = {};\n  @Input() isDisabled = false;\n\n  @ViewChild('headerPermissionCheckboxTpl', { static: true })\n  headerPermissionCheckboxTpl: TemplateRef<any>;\n  @ViewChild('cellScopeCheckboxTpl', { static: true })\n  cellScopeCheckboxTpl: TemplateRef<any>;\n  @ViewChild('cellPermissionCheckboxTpl', { static: true })\n  cellPermissionCheckboxTpl: TemplateRef<any>;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.columns.forEach((column) => {\n      if (column.name === 'All') {\n        column.cellTemplate = this.cellScopeCheckboxTpl;\n        column.headerTemplate = this.headerPermissionCheckboxTpl;\n      } else {\n        column.cellTemplate = this.cellPermissionCheckboxTpl;\n        column.headerTemplate = this.headerPermissionCheckboxTpl;\n      }\n      column.sortable = false;\n    });\n    this.listenToChanges();\n    this.form.get(this.inputField).setValue(this.initialValue);\n  }\n\n  listenToChanges() {\n    // Create/Update the data which is used by the data table to display the\n    // scopes/permissions every time the form field value has been changed.\n    this.form.get(this.inputField).valueChanges.subscribe((value) => {\n      const scopesPermissions: any[] = [];\n      _.each(this.scopes, (scope) => {\n        // Set the defaults values.\n        const scopePermission: any = { read: false, write: false, execute: false };\n        scopePermission['scope'] = scope;\n        // Apply settings from the given value if they exist.\n        if (scope in value) {\n          _.each(value[scope], (permission) => {\n            scopePermission[permission] = true;\n          });\n        }\n        scopesPermissions.push(scopePermission);\n      });\n      this.data = scopesPermissions;\n    });\n  }\n\n  /**\n   * Checks if the specified row checkbox needs to be rendered as checked.\n   * @param {string} scope The scope to be checked, e.g. 'cephfs', 'grafana',\n   *   'osd', 'pool' ...\n   * @return Returns true if all permissions (read, create, update, delete)\n   *   are checked for the specified scope, otherwise false.\n   */\n  isRowChecked(scope: string) {\n    const scope_permission = _.find(this.data, (o) => {\n      return o['scope'] === scope;\n    });\n    if (_.isUndefined(scope_permission)) {\n      return false;\n    }\n    if (this.isTableForOctalMode) {\n      return scope_permission['read'] && scope_permission['write'] && scope_permission['execute'];\n    }\n    return (\n      scope_permission['read'] &&\n      scope_permission['create'] &&\n      scope_permission['update'] &&\n      scope_permission['delete']\n    );\n  }\n\n  /**\n   * Checks if the specified header checkbox needs to be rendered as checked.\n   * @param {string} property The property/permission (read, create,\n   *   update, delete) to be checked. If 'scope' is given, all permissions\n   *   are checked.\n   * @return Returns true if specified property/permission is selected\n   *   for all scopes, otherwise false.\n   */\n  isHeaderChecked(property: string) {\n    let permissions = [property];\n    if ('scope' === property && this.isTableForOctalMode) {\n      permissions = ['read', 'write', 'execute'];\n    } else if ('scope' === property) {\n      permissions = ['read', 'create', 'update', 'delete'];\n    }\n    return permissions.every((permission) => {\n      return this.data.every((scope_permission) => {\n        return scope_permission[permission];\n      });\n    });\n  }\n\n  onClickCellCheckbox(scope: string, property: string, event: any = null) {\n    // Use a copy of the form field data to do not trigger the redrawing of the\n    // data table with every change.\n    const scopes_permissions = _.cloneDeep(this.form.getValue(this.inputField));\n    let permissions = [property];\n    if ('scope' === property && this.isTableForOctalMode) {\n      permissions = ['read', 'write', 'execute'];\n    } else if ('scope' === property) {\n      permissions = ['read', 'create', 'update', 'delete'];\n    }\n    if (!(scope in scopes_permissions)) {\n      scopes_permissions[scope] = [];\n    }\n    // Add or remove the given permission(s) depending on the click event or if no\n    // click event is given then add/remove them if they are absent/exist.\n    if (\n      event ||\n      event === true ||\n      !_.isEqual(permissions.sort(), _.intersection(scopes_permissions[scope], permissions).sort())\n    ) {\n      scopes_permissions[scope] = _.union(scopes_permissions[scope], permissions);\n    } else {\n      scopes_permissions[scope] = _.difference(scopes_permissions[scope], permissions);\n      if (_.isEmpty(scopes_permissions[scope])) {\n        _.unset(scopes_permissions, scope);\n      }\n    }\n    this.form.get(this.inputField).setValue(scopes_permissions);\n  }\n\n  onClickHeaderCheckbox(property: string, event: any) {\n    // Use a copy of the form field data to do not trigger the redrawing of the\n    // data table with every change.\n    const scopes_permissions = _.cloneDeep(this.form.getValue(this.inputField));\n    let permissions = [property];\n    if ('scope' === property && this.isTableForOctalMode) {\n      permissions = ['read', 'write', 'execute'];\n    } else if ('scope' === property) {\n      permissions = ['read', 'create', 'update', 'delete'];\n    }\n    _.each(permissions, (permission) => {\n      _.each(this.scopes, (scope) => {\n        if (event === true) {\n          scopes_permissions[scope] = _.union(scopes_permissions[scope], [permission]);\n        } else {\n          scopes_permissions[scope] = _.difference(scopes_permissions[scope], [permission]);\n          if (_.isEmpty(scopes_permissions[scope])) {\n            _.unset(scopes_permissions, scope);\n          }\n        }\n      });\n    });\n    this.form.get(this.inputField).setValue(scopes_permissions);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephUserService {\n  constructor(private http: HttpClient) {}\n\n  export(entities: string[]) {\n    return this.http.post('api/cluster/user/export', { entities: entities });\n  }\n}\n","<ul class=\"nav nav-tabs\"\n    *ngIf=\"tabs\">\n  <li class=\"nav-item\"\n      *ngFor=\"let tab of tabs; keyvalue\">\n    <a class=\"nav-link\"\n       [routerLink]=\"tab.url\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>{{tab.name}}</a>\n  </li>\n</ul>\n\n<ng-container *ngIf=\"meta\">\n  <cd-table\n      [data]=\"data$ | async\"\n      [columns]=\"meta.table.columns\"\n      [columnMode]=\"meta.table.columnMode\"\n      (setExpandedRow)=\"setExpandedRow($event)\"\n      [hasDetails]=\"meta.detail_columns.length > 0\"\n      [selectionType]=\"meta.table.selectionType\"\n      (updateSelection)=\"updateSelection($event)\"\n      [toolHeader]=\"meta.table.toolHeader\">\n    <div class=\"table-actions\">\n      <cd-table-actions [permission]=\"permission\"\n                        [selection]=\"selection\"\n                        class=\"btn-group\"\n                        id=\"crud-table-actions\"\n                        [tableActions]=\"meta.actions\">\n      </cd-table-actions>\n    </div>\n    <ng-container *ngIf=\"expandedRow && meta.detail_columns.length > 0\">\n      <table *cdTableDetail\n             class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n        <tbody>\n          <tr *ngFor=\"let column of meta.detail_columns\">\n            <td i18n\n                class=\"bold\">{{ column }}</td>\n            <td><pre>{{ expandedRow[column] }}</pre></td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n\n  </cd-table>\n</ng-container>\n\n<ng-template #badgeDictTpl\n             let-value=\"data.value\">\n  <span *ngFor=\"let instance of value | keyvalue; last as isLast\">\n    <span class=\"badge badge-background-primary\" >{{ instance.key }}: {{ instance.value }}</span>\n    <ng-container *ngIf=\"!isLast\">&nbsp;</ng-container>\n  </span>\n</ng-template>\n\n<ng-template #dateTpl\n             let-value=\"data.value\">\n  <span>{{ value | cdDate }}</span>\n</ng-template>\n\n<ng-template #durationTpl\n             let-value=\"data.value\">\n  <span>{{ value | duration }}</span>\n</ng-template>\n\n<ng-template #exportDataModalTpl>\n  <div class=\"d-flex flex-column align-items-center w-100 gap-3\">\n    <textarea readonly\n              class=\"form-control w-100 bg-light height-400\"\n              id=\"authExportArea\">{{ modalState.authExportData }}</textarea>\n    <cd-copy-2-clipboard-button class=\"align-self-end\"\n                                source=\"authExportArea\">\n\n    </cd-copy-2-clipboard-button>\n  </div>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport { CrudMetadata } from '~/app/shared/models/crud-table-metadata';\nimport { DataGatewayService } from '~/app/shared/services/data-gateway.service';\nimport { TimerService } from '~/app/shared/services/timer.service';\nimport { CephUserService } from '../../api/ceph-user.service';\nimport { ConfirmationModalComponent } from '../../components/confirmation-modal/confirmation-modal.component';\nimport { CdTableSelection } from '../../models/cd-table-selection';\nimport { FinishedTask } from '../../models/finished-task';\nimport { Permission, Permissions } from '../../models/permissions';\nimport { AuthStorageService } from '../../services/auth-storage.service';\nimport { TaskWrapperService } from '../../services/task-wrapper.service';\nimport { DeleteConfirmationModalComponent } from '../../components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '../../services/modal-cds.service';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-crud-table',\n  templateUrl: './crud-table.component.html',\n  styleUrls: ['./crud-table.component.scss']\n})\nexport class CRUDTableComponent implements OnInit {\n  @ViewChild('badgeDictTpl')\n  public badgeDictTpl: TemplateRef<any>;\n  @ViewChild('dateTpl')\n  public dateTpl: TemplateRef<any>;\n  @ViewChild('durationTpl')\n  public durationTpl: TemplateRef<any>;\n  @ViewChild('exportDataModalTpl')\n  public authxEportTpl: TemplateRef<any>;\n\n  data$: Observable<any>;\n  meta$: Observable<CrudMetadata>;\n  meta: CrudMetadata;\n  permissions: Permissions;\n  permission: Permission;\n  selection = new CdTableSelection();\n  expandedRow: { [key: string]: any } = {};\n  modalRef: BaseModal;\n  tabs = {};\n  resource: string;\n  modalState = {};\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private timerService: TimerService,\n    private dataGatewayService: DataGatewayService,\n    private taskWrapper: TaskWrapperService,\n    private cephUserService: CephUserService,\n    private activatedRoute: ActivatedRoute,\n    private modalService: ModalCdsService,\n    private router: Router\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    /* The following should be simplified with a wrapper that\n    converts .data to @Input args. For example:\n    https://medium.com/@andrewcherepovskiy/passing-route-params-into-angular-components-input-properties-fc85c34c9aca\n    */\n    this.activatedRoute.data.subscribe((data: any) => {\n      const resource: string = data.resource;\n      this.tabs = data.tabs;\n      this.dataGatewayService\n        .list(`ui-${resource}`)\n        .subscribe((response: CrudMetadata) => this.processMeta(response));\n      this.data$ = this.timerService.get(() => this.dataGatewayService.list(resource));\n    });\n    this.activatedRoute.data.subscribe((data: any) => {\n      this.resource = data.resource;\n    });\n  }\n\n  processMeta(meta: CrudMetadata) {\n    const toCamelCase = (test: string) =>\n      test\n        .split('-')\n        .reduce(\n          (res: string, word: string, i: number) =>\n            i === 0\n              ? word.toLowerCase()\n              : `${res}${word.charAt(0).toUpperCase()}${word.substr(1).toLowerCase()}`,\n          ''\n        );\n    this.permission = this.permissions[toCamelCase(meta.permissions[0])];\n    const templates = {\n      badgeDict: this.badgeDictTpl,\n      date: this.dateTpl,\n      duration: this.durationTpl\n    };\n    meta.table.columns.forEach((element, index) => {\n      if (element['cellTemplate'] !== undefined) {\n        meta.table.columns[index]['cellTemplate'] = templates[element['cellTemplate'] as string];\n      }\n    });\n    // isHidden flag does not work as expected somehow so the best ways to enforce isHidden is\n    // to filter the columns manually instead of letting isHidden flag inside table.component to\n    // work.\n    meta.table.columns = meta.table.columns.filter((col: any) => {\n      return !col['isHidden'];\n    });\n\n    this.meta = meta;\n    for (let i = 0; i < this.meta.actions.length; i++) {\n      let action = this.meta.actions[i];\n      if (action.disable) {\n        action.disable = (selection) => !selection.hasSelection;\n      }\n      if (action.click.toString() !== '') {\n        action.click = this[this.meta.actions[i].click.toString()].bind(this);\n      }\n    }\n  }\n\n  delete() {\n    const selectedKey = this.selection.first()[this.meta.columnKey];\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`${this.meta.resource}`,\n      itemNames: [selectedKey],\n      submitAction: () => {\n        this.taskWrapper\n          .wrapTaskAroundCall({\n            task: new FinishedTask('crud-component/id', selectedKey),\n            call: this.dataGatewayService.delete(this.resource, selectedKey)\n          })\n          .subscribe({\n            error: () => {\n              this.modalRef.closeModal();\n            },\n            complete: () => {\n              this.modalRef.closeModal();\n            }\n          });\n      }\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  setExpandedRow(event: any) {\n    for (let i = 0; i < this.meta.detail_columns.length; i++) {\n      let column = this.meta.detail_columns[i];\n      let columnDetail = event?.[column];\n      this.expandedRow[column] = this.formatColumnDetails(columnDetail);\n    }\n  }\n\n  edit() {\n    let key = '';\n    if (this.selection.hasSelection) {\n      key = this.selection.first()[this.meta.columnKey];\n    }\n\n    const editAction = this.meta.actions.find((action) => action.name === 'Edit');\n    this.router.navigate([editAction.routerLink], { queryParams: { key: key } });\n  }\n\n  authExport() {\n    let entities: string[] = [];\n    this.selection.selected.forEach((row) => entities.push(row.entity));\n    this.cephUserService.export(entities).subscribe((data: string) => {\n      const modalVariables = {\n        titleText: $localize`Ceph user export data`,\n        buttonText: $localize`Close`,\n        bodyTpl: this.authxEportTpl,\n        showSubmit: true,\n        showCancel: false,\n        onSubmit: () => {\n          this.modalRef.closeModal();\n        }\n      };\n      this.modalState['authExportData'] = data.trim();\n      this.modalRef = this.modalService.show(ConfirmationModalComponent, modalVariables);\n    });\n  }\n\n  /**\n   * Custom string replacer function for JSON.stringify\n   *\n   * This is specifically for objects inside an array.\n   * The custom replacer recursively stringifies deep nested objects\n   **/\n  stringReplacer(_key: string, value: any) {\n    try {\n      const parsedValue = JSON.parse(value);\n      return parsedValue;\n    } catch (e) {\n      return value;\n    }\n  }\n\n  /**\n   * returns a json string for arrays and string\n   * returns the same value for the rest\n   **/\n  formatColumnDetails(details: any) {\n    if (Array.isArray(details) || typeof details === 'string') {\n      return JSON.stringify(details, this.stringReplacer, 2);\n    }\n    return details;\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"\n    }\n  }],\n  \"name\": \"add\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M18,28H14a2,2,0,0,1-2-2V18.41L4.59,11A2,2,0,0,1,4,9.59V6A2,2,0,0,1,6,4H26a2,2,0,0,1,2,2V9.59A2,2,0,0,1,27.41,11L20,18.41V26A2,2,0,0,1,18,28ZM6,6V9.59l8,8V26h4V17.59l8-8V6Z\"\n    }\n  }],\n  \"name\": \"filter\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M12 10H6.78A11 11 0 0127 16h2A13 13 0 006 7.68V4H4v8h8zM20 22h5.22A11 11 0 015 16H3a13 13 0 0023 8.32V28h2V20H20z\"\n    }\n  }],\n  \"name\": \"renew\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 18H12V20H8zM14 18H18V20H14zM8 14H12V16H8zM14 22H18V24H14zM20 14H24V16H20zM20 22H24V24H20z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M27,3H5A2.0025,2.0025,0,0,0,3,5V27a2.0025,2.0025,0,0,0,2,2H27a2.0025,2.0025,0,0,0,2-2V5A2.0025,2.0025,0,0,0,27,3Zm0,2,0,4H5V5ZM5,27V11H27l0,16Z\"\n    }\n  }],\n  \"name\": \"data-table\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z\"\n    }\n  }],\n  \"name\": \"checkmark\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M6 15L6 14 2.7 14 7 9.7 6.3 9 2 13.3 2 10 1 10 1 15zM10 1L10 2 13.3 2 9 6.3 9.7 7 14 2.7 14 6 15 6 15 1z\"\n    }\n  }],\n  \"name\": \"maximize\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M24 12L16 22 8 12z\"\n    }\n  }],\n  \"name\": \"caret--down\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\nimport { TextAreaJsonFormatterService } from '~/app/shared/services/text-area-json-formatter.service';\n\n@Component({\n  selector: 'cd-formly-textarea-type',\n  templateUrl: './formly-textarea-type.component.html',\n  styleUrls: ['./formly-textarea-type.component.scss']\n})\nexport class FormlyTextareaTypeComponent extends FieldType<FieldTypeConfig> {\n  @ViewChild('textArea')\n  public textArea: ElementRef<any>;\n\n  constructor(private textAreaJsonFormatterService: TextAreaJsonFormatterService) {\n    super();\n  }\n\n  onChange() {\n    this.textAreaJsonFormatterService.format(this.textArea);\n  }\n}\n","<textarea #textArea\n          [formControl]=\"formControl\"\n          [cols]=\"props.cols\"\n          [rows]=\"props.rows\"\n          class=\"form-control\"\n          [class.is-invalid]=\"showError\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange()\">\n</textarea>\n","<ng-template #labelTemplate>\n  <div class=\"d-flex align-items-center\">\n    <label *ngIf=\"props.label && props.hideLabel !== true\"\n           [attr.for]=\"id\"\n           class=\"form-label\">\n      {{ props.label }}\n      <span *ngIf=\"props.required && props.hideRequiredMarker !== true\"\n            aria-hidden=\"true\">*</span>\n      <cd-helper *ngIf=\"helper\">\n        <span [innerHTML]=\"helper\"></span>\n      </cd-helper>\n    </label>\n  </div>\n</ng-template>\n\n<div class=\"mb-3\"\n     [class.form-floating]=\"props.labelPosition === 'floating'\"\n     [class.has-error]=\"showError\">\n  <ng-container *ngIf=\"props.labelPosition !== 'floating'\">\n    <ng-container [ngTemplateOutlet]=\"labelTemplate\"></ng-container>\n  </ng-container>\n\n  <ng-container #fieldComponent></ng-container>\n\n  <ng-container *ngIf=\"props.labelPosition === 'floating'\">\n    <ng-container [ngTemplateOutlet]=\"labelTemplate\"></ng-container>\n  </ng-container>\n\n  <div *ngIf=\"showError\"\n       class=\"invalid-feedback\"\n       [style.display]=\"'block'\">\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n\n  <small *ngIf=\"props.description\"\n         class=\"form-text text-muted\">{{ props.description }}</small>\n</div>\n","import { Component } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nimport { getFieldState } from '../helpers';\n\n@Component({\n  selector: 'cd-formly-input-wrapper',\n  templateUrl: './formly-input-wrapper.component.html',\n  styleUrls: ['./formly-input-wrapper.component.scss']\n})\nexport class FormlyInputWrapperComponent extends FieldWrapper {\n  get helper(): string {\n    const fieldState = getFieldState(this.field);\n    return fieldState?.help || '';\n  }\n}\n","import { Directive } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n@Directive({\n  // eslint-disable-next-line\n  selector: 'input[type=file]',\n  // eslint-disable-next-line\n  host: {\n    '(change)': 'onChange($event.target.files)',\n    '(input)': 'onChange($event.target.files)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: FormlyFileValueAccessorDirective, multi: true }\n  ]\n})\n// https://github.com/angular/angular/issues/7341\nexport class FormlyFileValueAccessorDirective implements ControlValueAccessor {\n  value: any;\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(_value: any) {}\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'cd-formly-file-type',\n  templateUrl: './formly-file-type.component.html',\n  styleUrls: ['./formly-file-type.component.scss']\n})\nexport class FormlyFileTypeComponent extends FieldType {}\n","<input type=\"file\"\n       [formControl]=\"formControl\"\n       [formlyAttributes]=\"field\"\n       />\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbDropdownModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport {\n  TableModule,\n  ButtonModule,\n  IconModule,\n  IconService,\n  CheckboxModule,\n  PaginationModule,\n  ThemeModule,\n  DialogModule,\n  SelectModule,\n  TagModule,\n  LayerModule\n} from 'carbon-components-angular';\nimport AddIcon from '@carbon/icons/es/add/16';\nimport FilterIcon from '@carbon/icons/es/filter/16';\nimport ReloadIcon from '@carbon/icons/es/renew/16';\nimport DataTableIcon from '@carbon/icons/es/data-table/16';\nimport CheckIcon from '@carbon/icons/es/checkmark/16';\nimport CloseIcon from '@carbon/icons/es/close/16';\nimport MaximizeIcon from '@carbon/icons/es/maximize/16';\nimport ArrowDown from '@carbon/icons/es/caret--down/16';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { ComponentsModule } from '../components/components.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { CRUDTableComponent } from './crud-table/crud-table.component';\nimport { TableActionsComponent } from './table-actions/table-actions.component';\nimport { TableKeyValueComponent } from './table-key-value/table-key-value.component';\nimport { TablePaginationComponent } from './table-pagination/table-pagination.component';\nimport { TableComponent } from './table/table.component';\nimport { CrudFormComponent } from '../forms/crud-form/crud-form.component';\nimport { FormlyArrayTypeComponent } from '../forms/crud-form/formly-array-type/formly-array-type.component';\nimport { FormlyInputTypeComponent } from '../forms/crud-form/formly-input-type/formly-input-type.component';\nimport { FormlyObjectTypeComponent } from '../forms/crud-form/formly-object-type/formly-object-type.component';\nimport { FormlyTextareaTypeComponent } from '../forms/crud-form/formly-textarea-type/formly-textarea-type.component';\nimport { FormlyInputWrapperComponent } from '../forms/crud-form/formly-input-wrapper/formly-input-wrapper.component';\nimport { FormlyFileTypeComponent } from '../forms/crud-form/formly-file-type/formly-file-type.component';\nimport { FormlyFileValueAccessorDirective } from '../forms/crud-form/formly-file-type/formly-file-type-accessor';\nimport { CheckedTableFormComponent } from './checked-table-form/checked-table-form.component';\nimport { TableDetailDirective } from './directives/table-detail.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgbDropdownModule,\n    NgbTooltipModule,\n    PipesModule,\n    ComponentsModule,\n    RouterModule,\n    ReactiveFormsModule,\n    FormlyModule.forRoot({\n      types: [\n        { name: 'array', component: FormlyArrayTypeComponent },\n        { name: 'object', component: FormlyObjectTypeComponent },\n        { name: 'input', component: FormlyInputTypeComponent, wrappers: ['input-wrapper'] },\n        { name: 'textarea', component: FormlyTextareaTypeComponent, wrappers: ['input-wrapper'] },\n        { name: 'file', component: FormlyFileTypeComponent, wrappers: ['input-wrapper'] }\n      ],\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'json', message: 'This field is not a valid json document' },\n        {\n          name: 'rgwRoleName',\n          message:\n            'Role name must contain letters, numbers or the ' +\n            'following valid special characters \"_+=,.@-]+\" (pattern: [0-9a-zA-Z_+=,.@-]+)'\n        },\n        {\n          name: 'rgwRolePath',\n          message:\n            'Role path must start and finish with a slash \"/\".' +\n            ' (pattern: (\\u002F)|(\\u002F[\\u0021-\\u007E]+\\u002F))'\n        },\n        { name: 'file_size', message: 'File size must not exceed 4KiB' },\n        {\n          name: 'rgwRoleSessionDuration',\n          message: 'This field must be a number and should be a value from 1 hour to 12 hour'\n        }\n      ],\n      wrappers: [{ name: 'input-wrapper', component: FormlyInputWrapperComponent }]\n    }),\n    FormlyBootstrapModule,\n    TableModule,\n    ButtonModule,\n    IconModule,\n    CheckboxModule,\n    PaginationModule,\n    DialogModule,\n    ThemeModule,\n    SelectModule,\n    TagModule,\n    LayerModule\n  ],\n  declarations: [\n    TableComponent,\n    TableKeyValueComponent,\n    TableActionsComponent,\n    CRUDTableComponent,\n    TablePaginationComponent,\n    CrudFormComponent,\n    FormlyArrayTypeComponent,\n    FormlyInputTypeComponent,\n    FormlyObjectTypeComponent,\n    FormlyInputWrapperComponent,\n    FormlyFileTypeComponent,\n    FormlyFileValueAccessorDirective,\n    CheckedTableFormComponent,\n    TableDetailDirective\n  ],\n  exports: [\n    TableComponent,\n    TableKeyValueComponent,\n    TableActionsComponent,\n    CRUDTableComponent,\n    TablePaginationComponent,\n    CheckedTableFormComponent,\n    TableDetailDirective\n  ]\n})\nexport class DataTableModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      AddIcon,\n      FilterIcon,\n      ReloadIcon,\n      DataTableIcon,\n      CheckIcon,\n      CloseIcon,\n      MaximizeIcon,\n      ArrowDown\n    ]);\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[cdTableDetail]'\n})\nexport class TableDetailDirective {\n  constructor(public template?: TemplateRef<any>) {}\n}\n","<ng-container *ngIf=\"!dropDownOnly; else dropDownOnlyTpl\">\n  <button *ngIf=\"currentAction && tableActions.length > 0\"\n          type=\"button\"\n          [cdsButton]=\"currentAction.buttonKind\"\n          title=\"{{ useDisableDesc(currentAction) }}\"\n          (click)=\"useClickAction(currentAction)\"\n          [disabled]=\"disableSelectionAction(currentAction)\"\n          [routerLink]=\"useRouterLink(currentAction)\"\n          [attr.aria-label]=\"currentAction.name\"\n          [preserveFragment]=\"currentAction.preserveFragment ? '' : null\"\n          data-testid=\"primary-action\">\n    <span i18n>{{ currentAction.name }}</span>\n    <svg class=\"cds--btn__icon\"\n         cdsIcon=\"add\"\n         size=\"16\"></svg>\n  </button>\n  <ng-container *ngIf=\"primaryDropDown\">\n    <button class=\"primary-dropdown-btn\"\n            [attr.aria-label]=\"dropDownOnly\"\n            [offset]=\"{ x: -210, y: 65 }\"\n            [cdsOverflowMenu]=\"overflowMenuTpl\"\n            data-testid=\"table-action-btn\">\n      <svg\n           [cdsIcon]=\"icons.downArrow\"\n           [size]=\"icons.size16\"></svg>\n    </button>\n    <ng-template #overflowMenuTpl>\n      <ng-container *ngFor=\"let action of dropDownActions\">\n        <cds-overflow-menu-option *ngIf=\"currentAction !== action\"\n                                  class=\"{{ toClassName(action) }}\"\n                                  title=\"{{ useDisableDesc(action) }}\"\n                                  (click)=\"useClickAction(action)\"\n                                  [routerLink]=\"useRouterLink(action)\"\n                                  [preserveFragment]=\"action.preserveFragment ? '' : null\"\n                                  [disabled]=\"disableSelectionAction(action)\"\n                                  [attr.aria-label]=\"action.name\"\n                                  data-testid=\"table-action-option-btn\"\n                                  i18n>\n        {{ action.name }}\n        </cds-overflow-menu-option>\n      </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #caret>\n  <button [cdsButton]=\"currentAction.buttonKind\"\n          class=\"caret-btn\">\n    <svg class=\"cds--btn__icon\"\n         cdsIcon=\"caret--down\"\n         size=\"16\"></svg>\n  </button>\n</ng-template>\n\n<ng-template #dropDownOnlyTpl>\n  <cds-overflow-menu [customTrigger]=\"customTrigger\"\n                     [flip]=\"true\"\n                     [offset]=\"{ x: 105, y: 0 }\"\n                     data-testid=\"table-action-btn\"\n                     class=\"d-flex justify-content-end\">\n    <ng-container *ngFor=\"let action of dropDownActions\">\n      <cds-overflow-menu-option *ngIf=\"currentAction !== action\"\n                                class=\"{{ toClassName(action) }}\"\n                                title=\"{{ useDisableDesc(action) }}\"\n                                (click)=\"useClickAction(action)\"\n                                [routerLink]=\"useRouterLink(action)\"\n                                [preserveFragment]=\"action.preserveFragment ? '' : null\"\n                                [disabled]=\"disableSelectionAction(action)\"\n                                [attr.aria-label]=\"action.name\"\n                                data-testid=\"table-action-option-btn\"\n                                i18n>\n      {{ action.name }}\n      </cds-overflow-menu-option>\n    </ng-container>\n  </cds-overflow-menu>\n</ng-template>\n\n<ng-template #customTrigger>\n  <button cdsButton=\"tertiary\">\n    <span i18n>{{ dropDownOnly }}</span>\n    <svg class=\"cds--btn__icon\"\n         cdsIcon=\"caret--down\"\n         size=\"16\"></svg>\n  </button>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-table-actions',\n  templateUrl: './table-actions.component.html',\n  styleUrls: ['./table-actions.component.scss']\n})\nexport class TableActionsComponent implements OnChanges, OnInit {\n  @Input()\n  permission: Permission;\n  @Input()\n  selection: CdTableSelection;\n  @Input()\n  tableActions: CdTableAction[];\n  @Input()\n  btnColor = 'accent';\n\n  // Use this if you just want to display a drop down button,\n  // labeled with the given text, with all actions in it.\n  // This disables the main action button.\n  @Input()\n  dropDownOnly?: string;\n  @Input()\n  primaryDropDown = false;\n\n  currentAction?: CdTableAction;\n  // Array with all visible actions\n  dropDownActions: CdTableAction[] = [];\n\n  icons = Icons;\n\n  ngOnInit() {\n    this.removeActionsWithNoPermissions();\n    this.onSelectionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.selection) {\n      this.onSelectionChange();\n    }\n  }\n\n  onSelectionChange(): void {\n    this.updateDropDownActions();\n    this.updateCurrentAction();\n  }\n\n  toClassName(action: CdTableAction): string {\n    return action.name\n      .replace(/ /g, '-')\n      .replace(/[^a-z-]/gi, '')\n      .toLowerCase();\n  }\n\n  /**\n   * Removes all actions from 'tableActions' that need a permission the user doesn't have.\n   */\n  private removeActionsWithNoPermissions() {\n    if (!this.permission) {\n      this.tableActions = [];\n      return;\n    }\n    const permissions = Object.keys(this.permission).filter((key) => this.permission[key]);\n    this.tableActions = this.tableActions.filter((action) =>\n      permissions.includes(action.permission)\n    );\n  }\n\n  private updateDropDownActions(): void {\n    this.dropDownActions = this.tableActions.filter((action) =>\n      action.visible ? action.visible(this.selection) : action\n    );\n  }\n\n  /**\n   * Finds the next action that is used as main action for the button\n   *\n   * The order of the list is crucial to get the right main action.\n   *\n   * Default button conditions of actions:\n   * - 'create' actions can be used with no or multiple selections\n   * - 'update' and 'delete' actions can be used with one selection\n   */\n  private updateCurrentAction(): void {\n    if (this.dropDownOnly) {\n      this.currentAction = undefined;\n      return;\n    }\n    /**\n     * current action will always be the first action if that has a create permission\n     * otherwise if there's only a single actions that will be the current action\n     */\n    if (this.dropDownActions?.[0]?.permission === 'create') {\n      this.currentAction = this.dropDownActions[0];\n    } else if (this.dropDownActions.length === 1) {\n      this.currentAction = this.dropDownActions[0];\n    }\n  }\n\n  useRouterLink(action: CdTableAction): string {\n    if (!action.routerLink || this.disableSelectionAction(action)) {\n      return undefined;\n    }\n    return _.isString(action.routerLink) ? action.routerLink : action.routerLink();\n  }\n\n  /**\n   * Determines if an action should be disabled\n   *\n   * Default disable conditions of 'update' and 'delete' actions:\n   * - If no or multiple selections are made\n   * - If one selection is made, but a task is executed on that item\n   *\n   * @param {CdTableAction} action\n   * @returns {Boolean}\n   */\n  disableSelectionAction(action: CdTableAction): Boolean {\n    const disable = action.disable;\n    if (disable) {\n      return Boolean(disable(this.selection));\n    }\n    const permission = action.permission;\n    const selected = this.selection.hasSingleSelection && this.selection.first();\n    return Boolean(\n      ['update', 'delete'].includes(permission) && (!selected || selected.cdExecuting)\n    );\n  }\n\n  useClickAction(action: CdTableAction) {\n    /**\n     * In order to show tooltips for deactivated menu items, the class\n     * 'pointer-events: auto;' has been added to the .scss file which also\n     * re-activates the click-event.\n     * To prevent calling the click-event on deactivated elements we also have\n     * to check here if it's disabled.\n     */\n    return !this.disableSelectionAction(action) && action.click && action.click();\n  }\n\n  useDisableDesc(action: CdTableAction) {\n    if (action.disable) {\n      const result = action.disable(this.selection);\n      return _.isString(result) ? result : action.title ? action.title : undefined;\n    } else if (action.title) {\n      return action.title;\n    }\n    return undefined;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { TableComponent } from '../table/table.component';\n\ninterface KeyValueItem {\n  key: string;\n  value: any;\n}\n\n/**\n * Display the given data in a 2 column data table. The left column\n * shows the 'key' attribute, the right column the 'value' attribute.\n * The data table has the following characteristics:\n * - No header and footer is displayed\n * - The relation of the width for the columns 'key' and 'value' is 1:3\n * - The 'key' column is displayed in bold text\n */\n@Component({\n  selector: 'cd-table-key-value',\n  templateUrl: './table-key-value.component.html',\n  styleUrls: ['./table-key-value.component.scss']\n})\nexport class TableKeyValueComponent implements OnInit, OnChanges {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n\n  @Input()\n  data: any;\n  @Input()\n  autoReload: any = 5000;\n  @Input()\n  renderObjects = false;\n  // Only used if objects are rendered\n  @Input()\n  appendParentKey = true;\n  @Input()\n  hideEmpty = false;\n  @Input()\n  hideKeys: string[] = []; // Keys of pairs not to be displayed\n\n  // If set, the classAddingTpl is used to enable different css for different values\n  @Input()\n  customCss?: { [css: string]: number | string | ((any: any) => boolean) };\n\n  columns: Array<CdTableColumn> = [];\n  tableData: KeyValueItem[];\n\n  /**\n   * The function that will be called to update the input data.\n   */\n  @Output()\n  fetchData = new EventEmitter();\n\n  constructor(private datePipe: CdDatePipe) {}\n\n  ngOnInit() {\n    this.columns = [\n      {\n        prop: 'key',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.bold\n      },\n      {\n        prop: 'value',\n        flexGrow: 3\n      }\n    ];\n    if (this.customCss) {\n      this.columns[1].cellTransformation = CellTemplate.classAdding;\n    }\n    // We need to subscribe the 'fetchData' event here and not in the\n    // HTML template, otherwise the data table will display the loading\n    // indicator infinitely if data is only bound via '[data]=\"xyz\"'.\n    // See for 'loadingIndicator' in 'TableComponent::ngOnInit()'.\n    if (this.fetchData.observers.length > 0) {\n      this.table.fetchData.subscribe(() => {\n        // Forward event triggered by the 'cd-table' data table.\n        this.fetchData.emit();\n      });\n    }\n    this.useData();\n  }\n\n  ngOnChanges() {\n    this.useData();\n  }\n\n  useData() {\n    if (!this.data) {\n      return; // Wait for data\n    }\n    let pairs = this.makePairs(this.data);\n    if (this.hideKeys) {\n      pairs = pairs.filter((pair) => !this.hideKeys.includes(pair.key));\n    }\n    this.tableData = pairs;\n  }\n\n  private makePairs(data: any): KeyValueItem[] {\n    let result: KeyValueItem[] = [];\n    if (!data) {\n      return undefined; // Wait for data\n    } else if (_.isArray(data)) {\n      result = this.makePairsFromArray(data);\n    } else if (_.isObject(data)) {\n      result = this.makePairsFromObject(data);\n    } else {\n      throw new Error('Wrong data format');\n    }\n    result = result\n      .map((item) => {\n        item.value = this.convertValue(item.value);\n        return item;\n      })\n      .filter((i) => i.value !== null);\n    return _.sortBy(this.renderObjects ? this.insertFlattenObjects(result) : result, 'key');\n  }\n\n  private makePairsFromArray(data: any[]): KeyValueItem[] {\n    let temp: any[] = [];\n    const first = data[0];\n    if (_.isArray(first)) {\n      if (first.length === 2) {\n        temp = data.map((a) => ({\n          key: a[0],\n          value: a[1]\n        }));\n      } else {\n        throw new Error(\n          `Array contains too many elements (${first.length}). ` +\n            `Needs to be of type [string, any][]`\n        );\n      }\n    } else if (_.isObject(first)) {\n      if (_.has(first, 'key') && _.has(first, 'value')) {\n        temp = [...data];\n      } else {\n        temp = data.reduce(\n          (previous: any[], item) => previous.concat(this.makePairsFromObject(item)),\n          temp\n        );\n      }\n    }\n    return temp;\n  }\n\n  private makePairsFromObject(data: any): KeyValueItem[] {\n    return Object.keys(data).map((k) => ({\n      key: k,\n      value: data[k]\n    }));\n  }\n\n  private insertFlattenObjects(data: KeyValueItem[]): any[] {\n    return _.flattenDeep(\n      data.map((item) => {\n        const value = item.value;\n        const isObject = _.isObject(value);\n        if (!isObject || _.isEmpty(value)) {\n          if (isObject) {\n            item.value = '';\n          }\n          return item;\n        }\n        return this.splitItemIntoItems(item);\n      })\n    );\n  }\n\n  /**\n   * Split item into items will call _makePairs inside _makePairs (recursion), in oder to split\n   * the object item up into items as planned.\n   */\n  private splitItemIntoItems(data: { key: string; value: object }): KeyValueItem[] {\n    return this.makePairs(data.value).map((item) => {\n      if (this.appendParentKey) {\n        item.key = data.key + ' ' + item.key;\n      }\n      return item;\n    });\n  }\n\n  private convertValue(value: any): KeyValueItem {\n    if (_.isArray(value)) {\n      if (_.isEmpty(value) && this.hideEmpty) {\n        return null;\n      }\n      value = value.map((item) => (_.isObject(item) ? JSON.stringify(item) : item)).join(', ');\n    } else if (_.isObject(value)) {\n      if ((this.hideEmpty && _.isEmpty(value)) || !this.renderObjects) {\n        return null;\n      }\n    } else if (_.isString(value)) {\n      if (value === '' && this.hideEmpty) {\n        return null;\n      }\n      if (this.isDate(value)) {\n        value = this.datePipe.transform(value) || value;\n      }\n    }\n\n    return value;\n  }\n\n  private isDate(s: string) {\n    const sep = '[ -:.TZ]';\n    const n = '\\\\d{2}' + sep;\n    //                            year     -    m - d - h : m : s . someRest  Z (if UTC)\n    return s.match(new RegExp('^\\\\d{4}' + sep + n + n + n + n + n + '\\\\d*' + 'Z?$'));\n  }\n}\n","<div class=\"table-scroller\">\n  <cd-table #table\n            [data]=\"tableData || []\"\n            [columns]=\"columns\"\n            columnMode=\"flex\"\n            [toolHeader]=\"false\"\n            [autoReload]=\"autoReload\"\n            [customCss]=\"customCss\"\n            [autoSave]=\"false\"\n            [header]=\"false\"\n            [footer]=\"false\"\n            [limit]=\"0\">\n  </cd-table>\n</div>\n","<cds-table-container [cdsLayer]=\"layer\"\n                     [cdsTheme]=\"theme\"\n                     class=\"content-theme\">\n  <cds-table-header *ngIf=\"headerTitle\">\n    <h4 cdsTableHeaderTitle\n        i18n>\n      {{headerTitle}}\n    </h4>\n    <p cdsTableHeaderDescription\n       i18n\n       *ngIf=\"headerDescription\">\n      {{headerDescription}}\n    </p>\n  </cds-table-header>\n  <cds-table-toolbar #toolbar\n                     *ngIf=\"toolHeader\"\n                     (cancel)=\"onBatchActionsCancel()\"\n                     [model]=\"selectionType === 'multiClick' ? model : []\"\n                     [batchText]=\"{ SINGLE: '1 item selected', MULTIPLE: '{{count}} items selected' }\">\n    <!-- batch actions -->\n    <cds-table-toolbar-actions *ngIf=\"tableActions?.dropDownActions.length > 0\">\n      <ng-container *ngFor=\"let action of tableActions?.dropDownActions\">\n        <button *ngIf=\"tableActions.currentAction !== action\"\n                cdsButton=\"primary\"\n                [tabindex]=\"toolbar.selected ? 0 : -1\"\n                class=\"{{ tableActions.toClassName(action) }}\"\n                title=\"{{ tableActions.useDisableDesc(action) }}\"\n                (click)=\"tableActions.useClickAction(action)\"\n                [routerLink]=\"tableActions.useRouterLink(action)\"\n                [preserveFragment]=\"action.preserveFragment ? '' : null\"\n                [disabled]=\"tableActions.disableSelectionAction(action)\"\n                [attr.aria-label]=\"action.name\"\n                i18n>\n          {{ action.name }}\n        </button>\n      </ng-container>\n    </cds-table-toolbar-actions>\n    <!-- end batch actions -->\n    <cds-table-toolbar-content>\n      <!-- search -->\n      <cds-table-toolbar-search *ngIf=\"searchField\"\n                                [expandable]=\"false\"\n                                [(ngModel)]=\"search\"\n                                aria-label=\"search\"\n                                (valueChange)=\"updateFilter($event)\"\n                                (clear)=\"onClearSearch()\">\n      </cds-table-toolbar-search>\n      <!-- end search -->\n      <!-- column filters -->\n      <ng-container *ngIf=\"columnFilters.length !== 0\">\n        <div class=\"d-inline-flex position-relative\">\n        <svg [cdsIcon]=\"icons.filter\"\n             [size]=\"icons.size16\"></svg>\n        </div>\n        <cds-select (valueChange)=\"onSelectFilter($event)\"\n                    display=\"inline\"\n                    id=\"filter_name\">\n          <ng-container *ngFor=\"let filter of columnFilters\">\n            <option [value]=\"filter.column.name\"\n                    [selected]=\"filter.column.name === selectedFilter.column.name\">{{ filter.column.name }}</option>\n          </ng-container>\n        </cds-select>\n        <cds-select (valueChange)=\"onChangeFilter($event)\"\n                    display=\"inline\"\n                    id=\"filter_option\">\n          <option *ngIf=\"!selectedFilter.value\"\n                  i18n>Any</option>\n          <ng-container *ngFor=\"let option of selectedFilter.options\">\n            <option [value]=\"option.raw\"\n                    [selected]=\"option.raw === selectedFilter?.value?.raw\">{{ option.formatted }}</option>\n          </ng-container>\n        </cds-select>\n      </ng-container>\n      <!-- end column filters -->\n      <!-- refresh button -->\n      <cds-icon-button\n              [kind]=\"status.type\"\n              [disabled]=\"!fetchData?.observers?.length\"\n              (click)=\"refreshBtn()\"\n              [title]=\"status.msg\"\n              [description]=\"status.msg\"\n              i18n-title\n              i18n-description\n              class=\"toolbar-action\"\n              placement=\"bottom\"\n              *ngIf=\"fetchData?.observers?.length > 0\">\n        <svg [cdsIcon]=\"icons.refresh\"\n             [size]=\"icons.size16\"\n             [ngClass]=\"{ 'cds--toolbar-action__icon': true, 'reload': loadingIndicator }\"></svg>\n      </cds-icon-button>\n      <!-- end refresh button -->\n      <!-- show hide columns -->\n      <button cdsButton=\"ghost\"\n              class=\"toolbar-action\"\n              [cdsOverflowMenu]=\"showHideColumnsRef\"\n              placement=\"bottom\"\n              [flip]=\"true\"\n              [offset]=\"{ x: 3, y: 0 }\">\n        <svg [cdsIcon]=\"icons.dataTable\"\n             [size]=\"icons.size16\"\n             class=\"cds--toolbar-action__icon\"></svg>\n      </button>\n      <ng-template #showHideColumnsRef>\n        <div class=\"vstack gap-3 p-3\"\n             (click)=\"$event.stopPropagation()\"\n             [cdsTheme]=\"theme\">\n          <ng-container *ngFor=\"let column of localColumns\">\n            <cds-checkbox *ngIf=\"!column?.isInvisible\"\n                          id=\"{{ column.prop }}{{ tableName }}\"\n                          name=\"{{ column.prop }}{{ tableName }}\"\n                          [checked]=\"!column?.isHidden\"\n                          (checkedChange)=\"toggleColumn(column);\">{{ column.name }}\n          </cds-checkbox>\n          </ng-container>\n        </div>\n      </ng-template>\n      <!-- end show hide columns -->\n      <!-- actions -->\n      <ng-content select=\".table-actions\"></ng-content>\n      <!-- end actions -->\n    </cds-table-toolbar-content>\n  </cds-table-toolbar>\n  <!-- filter chips for column filters -->\n  <div class=\"d-flex justify-content-end align-items-center filter-tags\"\n       *ngIf=\"toolHeader && columnFiltered\">\n  <div class=\"d-flex gap-2\">\n    <ng-container *ngFor=\"let filter of columnFilters\">\n      <cds-tag *ngIf=\"filter.value\"\n               type=\"outline\"\n               class=\"align-self-center\">\n        <span class=\"me-2\">{{ filter.column.name }}: {{ filter.value.formatted }}</span>\n        <button class=\"cds--tag__close-icon\"\n                (click)=\"onChangeFilter(filter)\">\n          <svg [cdsIcon]=\"icons.destroy\"\n               [size]=\"icons.size16\"></svg>\n        </button>\n      </cds-tag>\n    </ng-container>\n    <button cdsButton=\"ghost\"\n            (click)=\"onClearFilters($event)\">\n      <ng-container i18n>Clear filters</ng-container>\n    </button>\n  </div>\n  </div>\n  <!-- end filter chips for column filters -->\n  <table cdsTable\n         [sortable]=\"sortable\"\n         [noBorder]=\"false\"\n         [size]=\"size\"\n         [striped]=\"false\"\n         [skeleton]=\"loadingIndicator\">\n    <thead cdsTableHead\n           [sortable]=\"sortable\"\n           (deselectAll)=\"onDeselectAll()\"\n           (selectAll)=\"onSelectAll()\"\n           (sort)=\"changeSorting($event)\"\n           [model]=\"model\"\n           [selectAllCheckbox]=\"selectAllCheckbox\"\n           [selectAllCheckboxSomeSelected]=\"selectAllCheckboxSomeSelected\"\n           [showSelectionColumn]=\"showSelectionColumn\"\n           [enableSingleSelect]=\"enableSingleSelect\"\n           [skeleton]=\"loadingIndicator\"\n           [stickyHeader]=\"false\">\n    </thead>\n    <tbody cdsTableBody\n           *ngIf=\"!noData; else noDataTemplate\"\n           [enableSingleSelect]=\"enableSingleSelect\"\n           [skeleton]=\"loadingIndicator\">\n      <ng-container *ngFor=\"let row of model.data; let i = index; trackBy: trackByFn.bind(this, identifier)\">\n        <tr\tcdsTableRow\n            [model]=\"model\"\n            [row]=\"row\"\n            [size]=\"size\"\n            [selected]=\"model.isRowSelected(i)\"\n            [expandable]=\"model.isRowExpandable(i)\"\n            [expanded]=\"model.isRowExpanded(i)\"\n            [showSelectionColumn]=\"showSelectionColumn\"\n            [skeleton]=\"loadingIndicator\"\n            (selectRow)=\"onSelect(i)\"\n            (deselectRow)=\"onDeselect(i)\"\n            (expandRow)=\"model.expandRow(i, !model.isRowExpanded(i))\"\n            (rowClick)=\"onSelect(i)\"\n            *ngIf=\"!model.isRowFiltered(i)\">\n        </tr>\n        <tr\tcdsTableExpandedRow\n            cdsExpandedRowHover\n            *ngIf=\"model.isRowExpandable(i) && !shouldExpandAsTable(row) && !model.isRowFiltered(i)\"\n            [row]=\"row\"\n            [expanded]=\"model.isRowExpanded(i)\"\n            [skeleton]=\"loadingIndicator\">\n        </tr>\n        <ng-container\t*ngIf=\"model.isRowExpandable(i) && shouldExpandAsTable(row) && model.isRowExpanded(i) && !model.isRowFiltered(i)\">\n          <tr\tcdsTableRow\n              *ngFor=\"let expandedDataRow of firstExpandedDataInRow(row)\"\n              [model]=\"model\"\n              [showSelectionColumnCheckbox]=\"false\"\n              [showSelectionColumn]=\"showSelectionColumn\"\n              [row]=\"expandedDataRow\"\n              [size]=\"size\"\n              [selected]=\"model.isRowSelected(i)\"\n              [skeleton]=\"loadingIndicator\">\n          </tr>\n        </ng-container>\n      </ng-container>\n    </tbody>\n  </table>\n  <cds-pagination [model]=\"model\"\n                  (selectPage)=\"onPageChange($event)\"\n                  [disabled]=\"limit === 0\"\n                  [skeleton]=\"loadingIndicator\"\n                  [pageInputDisabled]=\"limit === 0\">\n  </cds-pagination>\n</cds-table-container>\n\n<ng-template #noDataTemplate>\n  <tbody>\n    <tr cdstablerow>\n      <td *ngIf=\"!rows?.length && !loadingIndicator\"\n          class=\"no-data\"\n          cdstabledata\n          [attr.colspan]=\"visibleColumns.length + 2\">\n        <span class=\"d-flex justify-content-center align-items-center\"\n              i18n>No data to display</span>\n      </td>\n    </tr>\n  </tbody>\n</ng-template>\n\n<ng-template #rowDetailTpl\n             let-row=\"data\">\n  <div *ngIf=\"row[identifier] === expanded?.[identifier]\"\n       (mouseenter)=\"onRowDetailHover($event)\"\n       data-testid=\"datatable-row-detail\">\n    <ng-template [ngTemplateOutlet]=\"rowDetail.template\"></ng-template>\n  </div>\n</ng-template>\n\n<ng-template #defaultValueTpl\n             let-value=\"data.value\"\n             let-expanded=\"expanded\"\n             let-column=\"data.column\">\n  <span [ngClass]=\"column?.cellClass\">{{ value }}</span>\n</ng-template>\n\n<ng-template #tableActionTpl>\n  <cds-overflow-menu *ngIf=\"tableActions?.dropDownActions.length > 1 && selectionType !== 'multiClick'\"\n                     [flip]=\"true\"\n                     data-testid=\"table-action-btn\"\n                     class=\"d-flex justify-content-end\">\n    <ng-container *ngFor=\"let action of tableActions?.dropDownActions\">\n      <cds-overflow-menu-option *ngIf=\"tableActions.currentAction !== action\"\n                                class=\"{{ tableActions.toClassName(action) }}\"\n                                title=\"{{ tableActions.useDisableDesc(action) }}\"\n                                (click)=\"tableActions.useClickAction(action)\"\n                                [routerLink]=\"tableActions.useRouterLink(action)\"\n                                [preserveFragment]=\"action.preserveFragment ? '' : null\"\n                                [disabled]=\"tableActions.disableSelectionAction(action)\"\n                                [attr.aria-label]=\"action.name\"\n                                data-testid=\"table-action-option-btn\"\n                                i18n>\n        {{ action.name }}\n      </cds-overflow-menu-option>\n    </ng-container>\n  </cds-overflow-menu>\n</ng-template>\n\n\n<!-- cell templates that can be accessed from outside -->\n<ng-template #tableCellBoldTpl\n             let-value=\"data.value\">\n  <strong>{{ value }}</strong>\n</ng-template>\n\n<ng-template #sparklineTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <div class=\"position-relative\">\n    <cd-sparkline [data]=\"value\"\n                  [isBinary]=\"row.cdIsBinary\"></cd-sparkline>\n  </div>\n</ng-template>\n\n<ng-template #routerLinkTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <a [routerLink]=\"[row.cdLink]\"\n     [queryParams]=\"row.cdParams\">{{ value }}</a>\n</ng-template>\n\n<ng-template #checkIconTpl\n             let-value=\"data.value\">\n  <i [ngClass]=\"[icons.check]\"\n     [hidden]=\"!(value | boolean)\"></i>\n</ng-template>\n\n<ng-template #perSecondTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  {{ value | dimless }} /s\n</ng-template>\n\n<ng-template #executingTpl\n             let-column=\"data.column\"\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <i [ngClass]=\"[icons.spinner, icons.spin]\"\n     *ngIf=\"row.cdExecuting\"></i>\n  <span [ngClass]=\"column?.customTemplateConfig?.valueClass\">\n    {{ value }}\n  </span>\n  <span *ngIf=\"row.cdExecuting\"\n        [ngClass]=\"column?.customTemplateConfig?.executingClass ? column?.customTemplateConfig.executingClass : 'text-muted italic'\">({{ row.cdExecuting }})</span>\n</ng-template>\n\n<ng-template #classAddingTpl\n             let-value=\"data.value\">\n  <span class=\"{{ value | pipeFunction:useCustomClass:this }}\">{{ value }}</span>\n</ng-template>\n\n<ng-template #badgeTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\">\n  <span *ngFor=\"let item of (value | array); last as last\">\n    <span class=\"badge\"\n          [ngClass]=\"(column?.customTemplateConfig?.map && column?.customTemplateConfig?.map[item]?.class) ? column.customTemplateConfig.map[item].class : (column?.customTemplateConfig?.class ? column.customTemplateConfig.class : 'badge-primary')\"\n          *ngIf=\"(column?.customTemplateConfig?.map && column?.customTemplateConfig?.map[item]?.value) ? column.customTemplateConfig.map[item].value : column?.customTemplateConfig?.prefix ? column.customTemplateConfig.prefix + item : item\">\n      {{ (column?.customTemplateConfig?.map && column?.customTemplateConfig?.map[item]?.value) ? column.customTemplateConfig.map[item].value : column?.customTemplateConfig?.prefix ? column.customTemplateConfig.prefix + item : item }}\n    </span>\n    <span *ngIf=\"!last\">&nbsp;</span>\n  </span>\n</ng-template>\n\n<ng-template #mapTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\">\n  <span>{{ value | map:column?.customTemplateConfig }}</span>\n</ng-template>\n\n<ng-template #tooltipTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\">\n  <span *ngFor=\"let item of (value | array);\">\n    <span\n      i18n\n      i18n-ngbTooltip\n      class=\"{{(column?.customTemplateConfig?.map && column?.customTemplateConfig?.map[item]?.class) ? column.customTemplateConfig.map[item].class : ''}}\"\n      ngbTooltip=\"{{(column?.customTemplateConfig?.map && column?.customTemplateConfig?.map[item]?.tooltip) ? column.customTemplateConfig.map[item].tooltip : ''}}\">\n      {{value}}\n    </span>\n  </span>\n</ng-template>\n\n<ng-template #truncateTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\">\n  <span data-toggle=\"tooltip\"\n        [title]=\"value\">{{ value | truncate:column?.customTemplateConfig?.length:column?.customTemplateConfig?.omission }}</span>\n</ng-template>\n\n<ng-template #rowDetailsTpl\n             let-row=\"data.row\"\n             let-isExpanded=\"data.expanded\"\n             ngx-datatable-cell-template>\n  <a href=\"javascript:void(0)\"\n     [class.expand-collapse-icon-right]=\"!isExpanded\"\n     [class.expand-collapse-icon-down]=\"isExpanded\"\n     class=\"expand-collapse-icon tc_expand-collapse\"\n     title=\"Expand/Collapse Row\"\n     i18n-title\n     (click)=\"toggleExpandRow(row, isExpanded, $event)\">\n  </a>\n</ng-template>\n\n<ng-template #timeAgoTpl\n             let-value=\"data.value\">\n  <span data-toggle=\"tooltip\"\n        [title]=\"value | cdDate\">{{ value | relativeDate }}</span>\n</ng-template>\n\n<ng-template #pathTpl\n             let-value=\"data.value\">\n  <cd-copy-2-clipboard-button *ngIf=\"value\"\n                              [source]=\"value\"\n                              [byId]=\"false\"\n                              size=\"lg\"\n                              text=\"{{ value | path }}\">\n  </cd-copy-2-clipboard-button>\n</ng-template>\n\n<ng-template #copyTpl\n             let-value=\"data.value\">\n  <cd-copy-2-clipboard-button *ngIf=\"value\"\n                              [source]=\"value\"\n                              [byId]=\"false\"\n                              [size]=\"lg\"\n                              [text]=\"value\">\n  </cd-copy-2-clipboard-button>\n</ng-template>\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PipeTransform,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\n\nimport { TableHeaderItem, TableItem, TableModel, TableRowSize } from 'carbon-components-angular';\nimport _ from 'lodash';\nimport { BehaviorSubject, Observable, of, Subject, Subscription } from 'rxjs';\n\nimport { TableStatus } from '~/app/shared/classes/table-status';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableColumnFilter } from '~/app/shared/models/cd-table-column-filter';\nimport { CdTableColumnFiltersChange } from '~/app/shared/models/cd-table-column-filters-change';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { CdUserConfig } from '~/app/shared/models/cd-user-config';\nimport { TimerService } from '~/app/shared/services/timer.service';\nimport { TableActionsComponent } from '../table-actions/table-actions.component';\nimport { TableDetailDirective } from '../directives/table-detail.directive';\nimport { filter, map } from 'rxjs/operators';\nimport { CdSortDirection } from '../../enum/cd-sort-direction';\nimport { CdSortPropDir } from '../../models/cd-sort-prop-dir';\n\nconst TABLE_LIST_LIMIT = 10;\ntype TPaginationInput = { page: number; size: number; filteredData: any[] };\ntype TPaginationOutput = { start: number; end: number };\n\n@Component({\n  selector: 'cd-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n  @ViewChild('tableCellBoldTpl', { static: true })\n  tableCellBoldTpl: TemplateRef<any>;\n  @ViewChild('sparklineTpl', { static: true })\n  sparklineTpl: TemplateRef<any>;\n  @ViewChild('routerLinkTpl', { static: true })\n  routerLinkTpl: TemplateRef<any>;\n  @ViewChild('checkIconTpl', { static: true })\n  checkIconTpl: TemplateRef<any>;\n  @ViewChild('perSecondTpl', { static: true })\n  perSecondTpl: TemplateRef<any>;\n  @ViewChild('executingTpl', { static: true })\n  executingTpl: TemplateRef<any>;\n  @ViewChild('classAddingTpl', { static: true })\n  classAddingTpl: TemplateRef<any>;\n  @ViewChild('badgeTpl', { static: true })\n  badgeTpl: TemplateRef<any>;\n  @ViewChild('mapTpl', { static: true })\n  mapTpl: TemplateRef<any>;\n  @ViewChild('truncateTpl', { static: true })\n  truncateTpl: TemplateRef<any>;\n  @ViewChild('timeAgoTpl', { static: true })\n  timeAgoTpl: TemplateRef<any>;\n  @ViewChild('rowDetailsTpl', { static: true })\n  rowDetailsTpl: TemplateRef<any>;\n  @ViewChild('rowSelectionTpl', { static: true })\n  rowSelectionTpl: TemplateRef<any>;\n  @ViewChild('pathTpl', { static: true })\n  pathTpl: TemplateRef<any>;\n  @ViewChild('tooltipTpl', { static: true })\n  tooltipTpl: TemplateRef<any>;\n  @ViewChild('copyTpl', { static: true })\n  copyTpl: TemplateRef<any>;\n  @ViewChild('defaultValueTpl', { static: true })\n  defaultValueTpl: TemplateRef<any>;\n  @ViewChild('rowDetailTpl', { static: true })\n  rowDetailTpl: TemplateRef<any>;\n  @ViewChild('tableActionTpl', { static: true })\n  tableActionTpl: TemplateRef<any>;\n\n  @ContentChild(TableDetailDirective) rowDetail!: TableDetailDirective;\n  @ContentChild(TableActionsComponent) tableActions!: TableActionsComponent;\n\n  @Input()\n  headerTitle: string;\n  @Input()\n  headerDescription: string;\n  // This is the array with the items to be shown.\n  @Input()\n  data: any[];\n  // Each item -> { prop: 'attribute name', name: 'display name' }\n  @Input()\n  columns: CdTableColumn[];\n  // Each item -> { prop: 'attribute name', dir: 'asc'||'desc'}\n  @Input()\n  sorts?: CdSortPropDir[];\n  // Method used for setting column widths.\n  @Input()\n  columnMode? = 'flex';\n  // Display only actions in header (make sure to disable toolHeader) and use \".only-table-actions\"\n  @Input()\n  onlyActionHeader? = false;\n  // Display the tool header, including reload button, pagination and search fields?\n  @Input()\n  toolHeader? = true;\n  // Display search field inside tool header?\n  @Input()\n  searchField? = true;\n  // Display the table header?\n  @Input()\n  header? = true;\n  // Display the table footer?\n  @Input()\n  footer? = true;\n  // Page size to show. Set to 0 to show unlimited number of rows.\n  @Input()\n  limit? = TABLE_LIST_LIMIT;\n  @Input()\n  maxLimit? = 9999;\n  // Has the row details?\n  @Input()\n  hasDetails = false;\n\n  @Input()\n  showInlineActions = true;\n\n  /**\n   * Auto reload time in ms - per default every 5s\n   * You can set it to 0, undefined or false to disable the auto reload feature in order to\n   * trigger 'fetchData' if the reload button is clicked.\n   * You can set it to a negative number to, on top of disabling the auto reload,\n   * prevent triggering fetchData when initializing the table.\n   */\n  @Input()\n  autoReload = 5000;\n\n  // Which row property is unique for a row. If the identifier is not specified in any\n  // column, then the property name of the first column is used. Defaults to 'id'.\n  @Input()\n  identifier = 'id';\n  // If 'true', then the specified identifier is used anyway, although it is not specified\n  // in any column. Defaults to 'false'.\n  @Input()\n  forceIdentifier = false;\n  // Allows other components to specify which type of selection they want,\n  // e.g. 'single' or 'multi'.\n  @Input()\n  selectionType: string = undefined;\n  // By default selected item details will be updated on table refresh, if data has changed\n  @Input()\n  updateSelectionOnRefresh: 'always' | 'never' | 'onChange' = 'onChange';\n  // By default expanded item details will be updated on table refresh, if data has changed\n  @Input()\n  updateExpandedOnRefresh: 'always' | 'never' | 'onChange' = 'onChange';\n\n  @Input()\n  autoSave = true;\n\n  // Enable this in order to search through the JSON of any used object.\n  @Input()\n  searchableObjects = false;\n\n  // Only needed to set if the classAddingTpl is used\n  @Input()\n  customCss?: { [css: string]: number | string | ((any: any) => boolean) };\n\n  // Columns that aren't displayed but can be used as filters\n  @Input()\n  extraFilterableColumns: CdTableColumn[] = [];\n\n  @Input()\n  status = new TableStatus();\n\n  // Support server-side pagination/sorting/etc.\n  @Input()\n  serverSide = false;\n\n  @Input()\n  size: TableRowSize = 'md';\n\n  /*\n  Only required when serverSide is enabled.\n  It should be provided by the server via \"X-Total-Count\" HTTP Header\n  */\n  @Input()\n  count = 0;\n\n  /**\n   * Use to change the colour layer you want to render the table at\n   */\n  @Input()\n  layer: number;\n\n  /**\n   * Use to render table with a different theme than default one\n   */\n  @Input()\n  theme: string;\n\n  /**\n   * Should be a function to update the input data if undefined nothing will be triggered\n   *\n   * Sometimes it's useful to only define fetchData once.\n   * Example:\n   * Usage of multiple tables with data which is updated by the same function\n   * What happens:\n   * The function is triggered through one table and all tables will update\n   */\n  @Output()\n  fetchData = new EventEmitter<CdTableFetchDataContext>();\n\n  /**\n   * This should be defined if you need access to the selection object.\n   *\n   * Each time the table selection changes, this will be triggered and\n   * the new selection object will be sent.\n   *\n   * @memberof TableComponent\n   */\n  @Output()\n  updateSelection = new EventEmitter();\n\n  @Output()\n  setExpandedRow = new EventEmitter();\n\n  /**\n   * This should be defined if you need access to the applied column filters.\n   *\n   * Each time the column filters changes, this will be triggered and\n   * the column filters change event will be sent.\n   *\n   * @memberof TableComponent\n   */\n  @Output() columnFiltersChanged = new EventEmitter<CdTableColumnFiltersChange>();\n\n  /**\n   * Use this variable to access the selected row(s).\n   */\n  selection = new CdTableSelection();\n\n  /**\n   * Use this variable to access the expanded row\n   */\n  set expanded(value: any) {\n    this._expanded = value;\n    this.setExpandedRow.emit(value);\n  }\n\n  get expanded() {\n    return this._expanded;\n  }\n\n  private _expanded: any = undefined;\n\n  get sortable() {\n    return !!this.userConfig?.sorts;\n  }\n\n  get noData() {\n    return !this.rows?.length && !this.loadingIndicator;\n  }\n\n  get showSelectionColumn() {\n    return this.selectionType === 'multiClick';\n  }\n\n  get enableSingleSelect() {\n    return this.selectionType === 'single';\n  }\n\n  /**\n   * Controls if all checkboxes are viewed as selected.\n   */\n  selectAllCheckbox = false;\n\n  /**\n   * Controls the indeterminate state of the header checkbox.\n   */\n  selectAllCheckboxSomeSelected = false;\n\n  /**\n   * To prevent making changes to the original columns list, that might change\n   * how the table is renderer a second time, we now clone that list into a\n   * local variable and only use the clone.\n   */\n  set localColumns(value: CdTableColumn[]) {\n    this._localColumns = this.getTableColumnsWithNames(value);\n  }\n\n  get localColumns(): CdTableColumn[] {\n    return this._localColumns;\n  }\n\n  private _localColumns: CdTableColumn[];\n\n  model: TableModel = new TableModel();\n\n  set tableColumns(value: CdTableColumn[]) {\n    // In case a name is not provided set it to the prop name if present or an empty string\n    const valuesWithNames = this.getTableColumnsWithNames(value);\n    this._tableColumns = valuesWithNames;\n    this._tableHeaders.next(valuesWithNames);\n  }\n\n  get tableColumns() {\n    return this._tableColumns;\n  }\n\n  private _tableColumns: CdTableColumn[];\n\n  get visibleColumns() {\n    return this.localColumns?.filter?.((x) => !x.isHidden);\n  }\n\n  getTableColumnsWithNames(value: CdTableColumn[]): CdTableColumn[] {\n    return value.map((col: CdTableColumn) =>\n      col?.name ? col : { ...col, name: col?.prop ? this.deCamelCase(String(col?.prop)) : '' }\n    );\n  }\n\n  deCamelCase(str: string): string {\n    return str\n      .replace(/([A-Z])/g, (match) => ` ${match}`)\n      .replace(/^./, (match) => match.toUpperCase());\n  }\n\n  icons = Icons;\n  cellTemplates: {\n    [key: string]: TemplateRef<any>;\n  } = {};\n  search = '';\n\n  set rows(value: any[]) {\n    this._rows = value;\n    this.doPagination({\n      page: this.model.currentPage,\n      size: this.model.pageLength,\n      filteredData: value\n    });\n    this.model.totalDataLength = this.serverSide ? this.count : value?.length || 0;\n  }\n\n  get rows() {\n    return this._rows;\n  }\n\n  private _rows: any[] = [];\n\n  private _dataset = new BehaviorSubject<any[]>([]);\n\n  private _tableHeaders = new BehaviorSubject<CdTableColumn[]>([]);\n\n  private _subscriptions: Subscription = new Subscription();\n\n  loadingIndicator = true;\n\n  userConfig: CdUserConfig = {};\n  tableName: string;\n  localStorage = window.localStorage;\n  private saveSubscriber: Subscription;\n  private reloadSubscriber: Subscription;\n  private updating = false;\n\n  columnFilters: CdTableColumnFilter[] = [];\n  selectedFilter: CdTableColumnFilter;\n  get columnFiltered(): boolean {\n    return _.some(this.columnFilters, (filter: any) => {\n      return filter.value !== undefined;\n    });\n  }\n  private previousRows = new Map<string | number, TableItem[]>();\n\n  constructor(\n    // private ngZone: NgZone,\n    private cdRef: ChangeDetectorRef,\n    private timerService: TimerService\n  ) {}\n\n  static prepareSearch(search: string) {\n    search = search.toLowerCase().replace(/,/g, '');\n    if (search.match(/['\"][^'\"]+['\"]/)) {\n      search = search.replace(/['\"][^'\"]+['\"]/g, (match: string) => {\n        return match.replace(/(['\"])([^'\"]+)(['\"])/g, '$2').replace(/ /g, '+');\n      });\n    }\n    return search.split(' ').filter((word) => word);\n  }\n\n  ngAfterViewInit(): void {\n    if (this.showInlineActions && this.tableActions?.dropDownActions?.length) {\n      this.tableColumns = [\n        ...this.tableColumns,\n        {\n          name: '',\n          prop: '',\n          className: 'w25',\n          sortable: false,\n          cellTemplate: this.tableActionTpl\n        }\n      ];\n    }\n\n    const tableHeadersSubscription = this._tableHeaders\n      .pipe(\n        map((values: CdTableColumn[]) =>\n          values.map(\n            (col: CdTableColumn) =>\n              new TableHeaderItem({\n                data: col?.headerTemplate ? { ...col } : col.name,\n                title: col.name,\n                template: col?.headerTemplate,\n                // if cellClass is a function it cannot be called here as it requires table data to execute\n                // instead if cellClass is a function it will be called and applied while parsing the data\n                className: _.isString(col?.cellClass) ? `${col?.cellClass}` : `${col?.className}`,\n                visible: !col.isHidden,\n                sortable: _.isNil(col.sortable) ? true : col.sortable\n              })\n          )\n        )\n      )\n      .subscribe({\n        next: (values: TableHeaderItem[]) => (this.model.header = values)\n      });\n\n    const datasetSubscription = this._dataset\n      .pipe(\n        filter((values: any[]) => {\n          if (!values?.length) {\n            this.model.data = [];\n            return false;\n          }\n          return true;\n        })\n      )\n      .subscribe({\n        next: (values) => {\n          const datasets: TableItem[][] = values.map((val) => {\n            const rowId = val?.id ?? val?.[this.identifier];\n            const prevRow = this.previousRows.get(rowId);\n\n            const newRow: TableItem[] = this.tableColumns.map((column, colIndex) => {\n              const rowValue = _.get(val, column?.prop);\n\n              const pipeTransform = () =>\n                column?.prop ? column.pipe.transform(rowValue) : column.pipe.transform(val);\n\n              let existingCell: TableItem | undefined = prevRow?.[colIndex];\n              const oldValue = existingCell?.data?.value;\n\n              const newValue = column.pipe ? pipeTransform() : rowValue;\n\n              if (existingCell && !_.isEqual(oldValue, newValue)) {\n                // here i am updating value in place\n                existingCell.data.value = newValue;\n                existingCell.data.row = val;\n                existingCell.data.column = { ...column, ...val };\n\n                if (colIndex === 0 && this.hasDetails) {\n                  existingCell.expandedData = val;\n                  existingCell.expandedTemplate = this.rowDetailTpl;\n                }\n              }\n\n              return (\n                existingCell ??\n                new TableItem({\n                  selected: val,\n                  data: {\n                    value: newValue,\n                    row: val,\n                    column: { ...column, ...val }\n                  },\n                  template: column.cellTemplate || this.defaultValueTpl,\n                  ...(colIndex === 0 && this.hasDetails\n                    ? { expandedData: val, expandedTemplate: this.rowDetailTpl }\n                    : {})\n                })\n              );\n            });\n\n            this.previousRows.set(rowId, newRow);\n            return newRow;\n          });\n          // Only update  the data if actual row content changed\n          const prevRaw = this.model.data.map((row) => row?.[0]?.data?.row);\n          const newRaw = values;\n\n          const dataChanged = !_.isEqual(prevRaw, newRaw);\n\n          if (dataChanged || this.model.data.length !== datasets.length) {\n            this.model.data = datasets;\n          }\n        }\n      });\n\n    const rowsExpandedSubscription = this.model.rowsExpandedChange.subscribe({\n      next: (index: number) => {\n        if (this.model.rowsExpanded.every((x) => !x)) {\n          this.expanded = undefined;\n        } else {\n          this.expanded = _.get(this.model.data?.[index], [0, 'selected']);\n          this.model.rowsExpanded = this.model.rowsExpanded.map(\n            (_, rowIndex: number) => rowIndex === index\n          );\n        }\n      }\n    });\n\n    const rowsChangeSubscription = this.model.rowsSelectedChange.subscribe(() =>\n      this.updateSelectAllCheckbox()\n    );\n    const dataChangeSubscription = this.model.dataChange.subscribe(() => {\n      this.updateSelectAllCheckbox();\n    });\n\n    this._subscriptions.add(tableHeadersSubscription);\n    this._subscriptions.add(datasetSubscription);\n    this._subscriptions.add(rowsExpandedSubscription);\n    this._subscriptions.add(rowsChangeSubscription);\n    this._subscriptions.add(dataChangeSubscription);\n  }\n\n  ngOnInit() {\n    this.localColumns = _.clone(this.columns);\n    // debounce reloadData method so that search doesn't run api requests\n    // for every keystroke\n    if (this.serverSide) {\n      this.reloadData = _.debounce(this.reloadData, 1000);\n    }\n\n    // ngx-datatable triggers calculations each time mouse enters a row,\n    // this will prevent that.\n    // this.table.element.addEventListener('mouseenter', (e) => e.stopPropagation());\n    this._addTemplates();\n    if (!this.sorts) {\n      // Check whether the specified identifier exists.\n      const exists = _.findIndex(this.localColumns, ['prop', this.identifier]) !== -1;\n      // Auto-build the sorting configuration. If the specified identifier doesn't exist,\n      // then use the property of the first column.\n      this.sorts = this.createSortingDefinition(\n        exists ? this.identifier : this.localColumns[0].prop + ''\n      );\n      // If the specified identifier doesn't exist and it is not forced to use it anyway,\n      // then use the property of the first column.\n      if (!exists && !this.forceIdentifier) {\n        this.identifier = this.localColumns[0].prop + '';\n      }\n    }\n\n    this.initUserConfig();\n    this.localColumns.forEach((c) => {\n      if (c.cellTransformation) {\n        c.cellTemplate = this.cellTemplates[c.cellTransformation];\n      }\n      if (!c.flexGrow) {\n        c.flexGrow = c.prop + '' === this.identifier ? 1 : 2;\n      }\n      if (!c.resizeable) {\n        c.resizeable = false;\n      }\n    });\n\n    this.filterHiddenColumns();\n    this.initColumnFilters();\n    this.updateColumnFilterOptions();\n    // Notify all subscribers to reset their current selection.\n    this.updateSelection.emit(new CdTableSelection());\n    // Load the data table content every N ms or at least once.\n    // Force showing the loading indicator if there are subscribers to the fetchData\n    // event. This is necessary because it has been set to False in useData() when\n    // this method was triggered by ngOnChanges().\n    if (this.fetchData.observers.length > 0) {\n      this.loadingIndicator = true;\n      const loadingSubscription = this.fetchData.subscribe({\n        next: () => this.cdRef.detectChanges(),\n        complete: () => (this.loadingIndicator = false)\n      });\n      this._subscriptions.add(loadingSubscription);\n    }\n\n    if (_.isInteger(this.autoReload) && this.autoReload > 0) {\n      this.reloadSubscriber = this.timerService\n        .get(() => of(0), this.autoReload)\n        .subscribe(() => {\n          this.reloadData();\n        });\n    } else if (!this.autoReload) {\n      this.reloadData();\n    } else {\n      this.useData();\n    }\n  }\n  onRowDetailHover(event: any) {\n    event.target\n      .closest('tr')\n      .previousElementSibling.classList.remove('cds--expandable-row--hover');\n    event.target.closest('tr').previousElementSibling.classList.remove('cds--data-table--selected');\n  }\n  initUserConfig() {\n    if (this.autoSave) {\n      this.tableName = this._calculateUniqueTableName(this.localColumns);\n      this._loadUserConfig();\n      this._initUserConfigAutoSave();\n    }\n    if (this.limit !== TABLE_LIST_LIMIT || !this.userConfig.limit) {\n      this.userConfig.limit = this.limit;\n    }\n    if (!(this.userConfig.offset >= 0)) {\n      this.userConfig.offset = this.model.currentPage - 1;\n    }\n    if (!this.userConfig.search) {\n      this.userConfig.search = this.search;\n    }\n    if (!this.userConfig.sorts) {\n      this.userConfig.sorts = this.sorts;\n    }\n    if (!this.userConfig.columns) {\n      this.updateUserColumns();\n    } else {\n      this.userConfig.columns.forEach((col) => {\n        for (let i = 0; i < this.localColumns.length; i++) {\n          if (this.localColumns[i].prop === col.prop) {\n            this.localColumns[i].isHidden = col.isHidden;\n          }\n        }\n      });\n    }\n  }\n\n  _calculateUniqueTableName(columns: any[]) {\n    const stringToNumber = (s: string) => {\n      if (!_.isString(s)) {\n        return 0;\n      }\n      let result = 0;\n      for (let i = 0; i < s.length; i++) {\n        result += s.charCodeAt(i) * i;\n      }\n      return result;\n    };\n    return columns\n      .reduce(\n        (result, value, index) =>\n          (stringToNumber(value.prop) + stringToNumber(value.name)) * (index + 1) + result,\n        0\n      )\n      .toString();\n  }\n\n  _loadUserConfig() {\n    const loaded = this.localStorage.getItem(this.tableName);\n    if (loaded) {\n      this.userConfig = JSON.parse(loaded);\n    }\n  }\n\n  _initUserConfigAutoSave() {\n    const source: Observable<any> = new Observable(this._initUserConfigProxy.bind(this));\n    this.saveSubscriber = source.subscribe(this._saveUserConfig.bind(this));\n  }\n\n  _initUserConfigProxy(observer: Subject<any>) {\n    this.userConfig = new Proxy(this.userConfig, {\n      set(config, prop: string, value) {\n        config[prop] = value;\n        observer.next(config);\n        return true;\n      }\n    });\n  }\n\n  _saveUserConfig(config: any) {\n    this.localStorage.setItem(this.tableName, JSON.stringify(config));\n  }\n  updateUserColumns() {\n    this.userConfig.columns = this.localColumns.map((c) => ({\n      prop: c.prop,\n      name: c.name,\n      isHidden: !!c.isHidden\n    }));\n  }\n\n  filterHiddenColumns() {\n    this.tableColumns = this.localColumns;\n  }\n\n  initColumnFilters() {\n    let filterableColumns = _.filter(this.localColumns, { filterable: true });\n    filterableColumns = [...filterableColumns, ...this.extraFilterableColumns];\n    this.columnFilters = filterableColumns.map((col: CdTableColumn) => {\n      return {\n        column: col,\n        options: [],\n        value: col.filterInitValue\n          ? this.createColumnFilterOption(col.filterInitValue, col.pipe)\n          : undefined\n      };\n    });\n    this.selectedFilter = _.first(this.columnFilters);\n  }\n\n  private createColumnFilterOption(\n    value: any,\n    pipe?: PipeTransform\n  ): { raw: string; formatted: string } {\n    return {\n      raw: _.toString(value),\n      formatted: pipe ? pipe.transform(value) : _.toString(value)\n    };\n  }\n\n  updateColumnFilterOptions() {\n    // update all possible values in a column\n    this.columnFilters.forEach((filter) => {\n      let values: any[] = [];\n\n      if (_.isUndefined(filter.column.filterOptions)) {\n        // only allow types that can be easily converted into string\n        const pre = _.filter(_.map(this.data, filter.column.prop), (v) => {\n          return (_.isString(v) && v !== '') || _.isBoolean(v) || _.isFinite(v) || _.isDate(v);\n        });\n        values = _.sortedUniq(pre.sort());\n      } else {\n        values = filter.column.filterOptions;\n      }\n\n      const options = values.map((v) => this.createColumnFilterOption(v, filter.column.pipe));\n\n      // In case a previous value is not available anymore\n      if (filter.value && _.isUndefined(_.find(options, { raw: filter.value.raw }))) {\n        filter.value = undefined;\n      }\n\n      filter.options = options;\n    });\n  }\n\n  onSelectFilter(filter: string) {\n    const value = this.columnFilters.find((x) => x.column.name === filter);\n    this.selectedFilter = value;\n  }\n\n  onChangeFilter(filter: string) {\n    const option = this.selectedFilter.options.find((x) => x.raw === filter);\n    this.selectedFilter.value = _.isEqual(this.selectedFilter.value, option) ? undefined : option;\n    this.updateFilter();\n  }\n\n  doColumnFiltering() {\n    const appliedFilters: CdTableColumnFiltersChange['filters'] = [];\n    let data = _.isArray(this.data) ? [...this.data] : [];\n    let dataOut: any[] = [];\n    this.columnFilters.forEach((filter) => {\n      if (filter.value === undefined) {\n        return;\n      }\n      appliedFilters.push({\n        name: filter.column.name,\n        prop: filter.column.prop,\n        value: filter.value\n      });\n      // Separate data to filtered and filtered-out parts.\n      const parts = _.partition(data, (row) => {\n        const value = _.get(row, filter.column.prop);\n        if (_.isUndefined(filter.column.filterPredicate)) {\n          // By default, test string equal\n          return `${value}` === filter.value.raw;\n        } else {\n          // Use custom function to filter\n          return filter.column.filterPredicate(row, filter.value.raw);\n        }\n      });\n      data = parts[0];\n      dataOut = [...dataOut, ...parts[1]];\n    });\n\n    this.columnFiltersChanged.emit({\n      filters: appliedFilters,\n      data: data,\n      dataOut: dataOut\n    });\n\n    // Remove the selection if previously-selected rows are filtered out.\n    _.forEach(this.selection.selected, (selectedItem) => {\n      if (_.find(data, { [this.identifier]: selectedItem[this.identifier] }) === undefined) {\n        this.selection = new CdTableSelection();\n        this.updateSelection.emit(_.clone(this.selection));\n      }\n    });\n    return data;\n  }\n\n  ngOnDestroy() {\n    if (this.reloadSubscriber) {\n      this.reloadSubscriber.unsubscribe();\n    }\n    if (this.saveSubscriber) {\n      this.saveSubscriber.unsubscribe();\n    }\n    this._subscriptions.unsubscribe();\n  }\n\n  _addTemplates() {\n    this.cellTemplates.bold = this.tableCellBoldTpl;\n    this.cellTemplates.checkIcon = this.checkIconTpl;\n    this.cellTemplates.sparkline = this.sparklineTpl;\n    this.cellTemplates.routerLink = this.routerLinkTpl;\n    this.cellTemplates.perSecond = this.perSecondTpl;\n    this.cellTemplates.executing = this.executingTpl;\n    this.cellTemplates.classAdding = this.classAddingTpl;\n    this.cellTemplates.badge = this.badgeTpl;\n    this.cellTemplates.map = this.mapTpl;\n    this.cellTemplates.truncate = this.truncateTpl;\n    this.cellTemplates.timeAgo = this.timeAgoTpl;\n    this.cellTemplates.path = this.pathTpl;\n    this.cellTemplates.tooltip = this.tooltipTpl;\n    this.cellTemplates.copy = this.copyTpl;\n  }\n\n  useCustomClass(value: any): string {\n    if (!this.customCss) {\n      throw new Error('Custom classes are not set!');\n    }\n    const classes = Object.keys(this.customCss);\n    const css = Object.values(this.customCss)\n      .map((v, i) => ((_.isFunction(v) && v(value)) || v === value) && classes[i])\n      .filter((x) => x)\n      .join(' ');\n    return _.isEmpty(css) ? undefined : css;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes?.data?.currentValue) {\n      this.useData();\n    }\n  }\n\n  setLimit(e: any) {\n    const value = Number(e.target.value);\n    if (value > 0) {\n      if (this.maxLimit && value > this.maxLimit) {\n        this.userConfig.limit = this.maxLimit;\n        // change input field to maxLimit\n        e.srcElement.value = this.maxLimit;\n      } else {\n        this.userConfig.limit = value;\n      }\n    }\n    if (this.serverSide) {\n      this.reloadData();\n    }\n  }\n\n  reloadData() {\n    if (!this.updating) {\n      this.status = new TableStatus();\n      const context = new CdTableFetchDataContext(() => {\n        // Do we have to display the error panel?\n        if (!!context.errorConfig.displayError) {\n          this.status = new TableStatus('danger', $localize`Failed to load data.`);\n        }\n        // Force data table to show no data?\n        if (context.errorConfig.resetData) {\n          this.data = [];\n        }\n        // Stop the loading indicator and reset the data table\n        // to the correct state.\n        this.useData();\n      });\n      context.pageInfo.offset = this.userConfig.offset;\n      context.pageInfo.limit = this.userConfig.limit;\n      context.search = this.userConfig.search;\n      if (this.userConfig.sorts?.length) {\n        const sort = this.userConfig.sorts[0];\n        context.sort = `${sort.dir === 'desc' ? '-' : '+'}${sort.prop}`;\n      }\n      this.fetchData.emit(context);\n      this.updating = true;\n    }\n  }\n\n  refreshBtn() {\n    this.loadingIndicator = true;\n    this.reloadData();\n  }\n\n  onPageChange(page: number) {\n    this.model.currentPage = page;\n\n    this.userConfig.offset = this.model.currentPage - 1;\n    this.userConfig.limit = this.model.pageLength;\n\n    if (this.serverSide) {\n      this.reloadData();\n      return;\n    }\n\n    this.doPagination({});\n  }\n\n  doPagination({\n    page = this.model.currentPage,\n    size = this.model.pageLength,\n    filteredData = this.rows\n  }): void {\n    if (this.serverSide) {\n      this._dataset.next(filteredData);\n      return;\n    }\n\n    if (this.limit === 0) {\n      this.model.currentPage = 1;\n      this.model.pageLength = filteredData.length || 1;\n      this._dataset.next(filteredData);\n      return;\n    }\n    const { start, end } = this.paginate({ page, size, filteredData });\n\n    const paginated = filteredData?.slice?.(start, end);\n\n    this._dataset.next(paginated);\n  }\n\n  /**\n   * Pagination function\n   */\n  paginate = _.cond<TPaginationInput, TPaginationOutput>([\n    [(x) => x.page <= 1, (x) => ({ start: 0, end: x.size })],\n    [(x) => x.page >= x.filteredData.length, (x) => ({ start: 0, end: x.filteredData.length })],\n    [\n      (x) => x.page >= x.filteredData.length && x.page * x.size > x.filteredData.length,\n      (x) => ({ start: 0, end: x.filteredData.length })\n    ],\n    [\n      (x) => x.page * x.size > x.filteredData.length,\n      (x) => ({ start: (x.page - 1) * x.size, end: x.filteredData.length })\n    ],\n    [_.stubTrue, (x) => ({ start: (x.page - 1) * x.size, end: x.page * x.size })]\n  ]);\n\n  rowIdentity() {\n    return (row: any) => {\n      const id = row[this.identifier];\n      if (_.isUndefined(id)) {\n        throw new Error(`Wrong identifier \"${this.identifier}\" -> \"${id}\"`);\n      }\n      return id;\n    };\n  }\n\n  useData() {\n    if (!this.data) {\n      return; // Wait for data\n    }\n    this.updateColumnFilterOptions();\n    this.updateFilter();\n    this.reset();\n    this.doSorting();\n    this.updateSelected();\n    this.updateExpanded();\n    this.toggleExpandRow();\n  }\n\n  /**\n   * Reset the data table to correct state. This includes:\n   * - Disable loading indicator\n   * - Reset 'Updating' flag\n   */\n  reset() {\n    this.loadingIndicator = false;\n    this.updating = false;\n  }\n\n  /**\n   * After updating the data, we have to update the selected items\n   * because details may have changed,\n   * or some selected items may have been removed.\n   */\n  updateSelected() {\n    if (!this.selection?.selected?.length) return;\n\n    const newSelected = new Set();\n    this.selection.selected.forEach((selectedItem) => {\n      for (const row of this.data) {\n        if (selectedItem[this.identifier] === row[this.identifier]) {\n          newSelected.add(row);\n        }\n      }\n    });\n    if (newSelected.size === 0) return;\n    const newSelectedArray = Array.from(newSelected.values());\n\n    newSelectedArray?.forEach?.((selection: any) => {\n      const rowIndex = this.model.data.findIndex(\n        (row: TableItem[]) =>\n          _.get(row, [0, 'selected', this.identifier]) === selection[this.identifier]\n      );\n      rowIndex > -1 && this.model.selectRow(rowIndex, true);\n    });\n\n    if (\n      this.updateSelectionOnRefresh === 'onChange' &&\n      _.isEqual(this.selection.selected, newSelectedArray)\n    ) {\n      return;\n    }\n\n    this.selection.selected = newSelectedArray;\n\n    if (this.updateSelectionOnRefresh === 'never') {\n      return;\n    }\n\n    this.updateSelection.emit(_.clone(this.selection));\n  }\n\n  updateExpanded() {\n    if (_.isUndefined(this.expanded) || this.updateExpandedOnRefresh === 'never') {\n      return;\n    }\n\n    const expandedId = this.expanded[this.identifier];\n    const newExpanded = _.find(this.data, (row) => expandedId === row[this.identifier]);\n\n    if (this.updateExpandedOnRefresh === 'onChange' && _.isEqual(this.expanded, newExpanded)) {\n      return;\n    }\n\n    this.expanded = newExpanded;\n  }\n\n  _toggleSelection(rowIndex: number, isSelected: boolean) {\n    const selectedData = _.get(this.model.data?.[rowIndex], [0, 'selected']);\n    if (isSelected) {\n      this.selection.selected = [...this.selection.selected, selectedData];\n    } else {\n      this.selection.selected = this.selection.selected.filter(\n        (s) => s[this.identifier] !== selectedData[this.identifier]\n      );\n    }\n  }\n\n  onSelect(selectedRowIndex: number) {\n    const selectedData = _.get(this.model.data?.[selectedRowIndex], [0, 'selected']);\n    if (this.selectionType === 'single') {\n      this.model.selectAll(false);\n      this.selection.selected = [selectedData];\n    } else {\n      this.selection.selected = [...this.selection.selected, selectedData];\n    }\n    this.model.selectRow(selectedRowIndex, true);\n    this.updateSelection.emit(this.selection);\n  }\n\n  onSelectAll() {\n    this.model.selectAll(!this.selectAllCheckbox && !this.selectAllCheckboxSomeSelected);\n    this.model.rowsSelected.forEach((isSelected: boolean, rowIndex: number) =>\n      this._toggleSelection(rowIndex, isSelected)\n    );\n    this.updateSelection.emit(this.selection);\n    this.cdRef.detectChanges();\n  }\n\n  onDeselect(deselectedRowIndex: number) {\n    this.model.selectRow(deselectedRowIndex, false);\n    if (this.selectionType === 'single') {\n      return;\n    }\n    this._toggleSelection(deselectedRowIndex, false);\n    this.updateSelection.emit(this.selection);\n  }\n\n  onDeselectAll() {\n    this.model.selectAll(false);\n    this.model.rowsSelected.forEach((isSelected: boolean, rowIndex: number) =>\n      this._toggleSelection(rowIndex, isSelected)\n    );\n    this.updateSelection.emit(this.selection);\n  }\n\n  onBatchActionsCancel() {\n    this.model.selectAll(false);\n    this.model.rowsSelected.forEach((_isSelected: boolean, rowIndex: number) =>\n      this._toggleSelection(rowIndex, false)\n    );\n  }\n\n  toggleColumn(column: CdTableColumn) {\n    const prop: string | number = column.prop;\n    const hide = !column.isHidden;\n    if (hide && this.visibleColumns.length === 1) {\n      column.isHidden = true;\n      return;\n    }\n    _.find(this.localColumns, (c: CdTableColumn) => c.prop === prop).isHidden = hide;\n    this.updateColumns();\n  }\n\n  updateColumns() {\n    this.updateUserColumns();\n    this.filterHiddenColumns();\n    const sortProp = this.userConfig.sorts[0].prop;\n    if (!_.find(this.visibleColumns, (c: CdTableColumn) => c.prop === sortProp)) {\n      this.userConfig.sorts = this.createSortingDefinition(this.visibleColumns[0].prop);\n    }\n    if (this.showInlineActions && this.tableActions?.dropDownActions?.length) {\n      this.tableColumns = [\n        ...this.tableColumns,\n        {\n          name: '',\n          prop: '',\n          className: 'w25',\n          sortable: false,\n          cellTemplate: this.tableActionTpl\n        }\n      ];\n    }\n    this.cdRef.detectChanges();\n  }\n\n  createSortingDefinition(prop: string | number): CdSortPropDir[] {\n    return [\n      {\n        prop: prop,\n        dir: CdSortDirection.asc\n      }\n    ];\n  }\n\n  changeSorting(columnIndex: number) {\n    if (!this.model?.header?.[columnIndex]) {\n      return;\n    }\n\n    const prop = this.tableColumns?.[columnIndex]?.prop;\n\n    if (this.model.header[columnIndex].sorted) {\n      this.model.header[columnIndex].descending = this.model.header[columnIndex].ascending;\n    } else {\n      const configDir = this.userConfig?.sorts?.find?.((x) => x.prop === prop)?.dir;\n      this.model.header[columnIndex].ascending = configDir === 'asc';\n      this.model.header[columnIndex].descending = configDir === 'desc';\n    }\n\n    const dir = this.model.header[columnIndex].ascending\n      ? CdSortDirection.asc\n      : CdSortDirection.desc;\n    const sorts = [{ dir, prop }];\n\n    this.userConfig.sorts = sorts;\n    if (this.serverSide) {\n      this.userConfig.offset = 0;\n      this.reloadData();\n    }\n\n    this.doSorting(columnIndex);\n  }\n\n  doSorting(columnIndex?: number) {\n    const index =\n      columnIndex ||\n      this.visibleColumns?.findIndex?.((x) => x.prop === this.userConfig?.sorts?.[0]?.prop);\n\n    if (_.isNil(index) || index < 0 || !this.model?.header?.[index]) {\n      return;\n    }\n\n    const prop = this.tableColumns?.[index]?.prop;\n\n    const configDir = this.userConfig?.sorts?.find?.((x) => x.prop === prop)?.dir;\n    this.model.header[index].ascending = configDir === 'asc';\n    this.model.header[index].descending = configDir === 'desc';\n\n    const tmp = this.rows.slice();\n\n    tmp.sort((a, b) => {\n      const rowA = _.get(a, prop);\n      const rowB = _.get(b, prop);\n      if (rowA > rowB) {\n        return this.model.header[index].descending ? -1 : 1;\n      }\n      if (rowB > rowA) {\n        return this.model.header[index].descending ? 1 : -1;\n      }\n      return 0;\n    });\n\n    this.model.header[index].sorted = true;\n    this.rows = tmp.slice();\n  }\n\n  onClearSearch() {\n    this.search = '';\n    this.expanded = undefined;\n    this.updateFilter();\n  }\n\n  onClearFilters() {\n    this.columnFilters.forEach((filter) => {\n      filter.value = undefined;\n    });\n    this.selectedFilter = _.first(this.columnFilters);\n    this.updateFilter();\n  }\n\n  updateFilter() {\n    if (this.serverSide) {\n      if (this.userConfig.search !== this.search) {\n        // if we don't go back to the first page it will try load\n        // a page which could not exists with an especific search\n        this.userConfig.offset = 0;\n        this.userConfig.limit = this.limit;\n        this.userConfig.search = this.search;\n        this.updating = false;\n        this.reloadData();\n      }\n      this.rows = this.data;\n    } else {\n      let rows = this.columnFilters.length !== 0 ? this.doColumnFiltering() : this.data;\n\n      if (this.search.length > 0 && rows?.length) {\n        const columns = this.localColumns.filter(\n          (c) => c.cellTransformation !== CellTemplate.sparkline\n        );\n        // update the rows\n        rows = this.subSearch(rows, TableComponent.prepareSearch(this.search), columns);\n      }\n\n      this.rows = rows;\n    }\n  }\n\n  subSearch(data: any[], currentSearch: string[], columns: CdTableColumn[]): any[] {\n    if (currentSearch.length === 0 || data.length === 0) {\n      return data;\n    }\n    const searchTerms: string[] = currentSearch.pop().replace(/\\+/g, ' ').split(':');\n    const columnsClone = [...columns];\n    if (searchTerms.length === 2) {\n      columns = columnsClone.filter((c) => c.name.toLowerCase().indexOf(searchTerms[0]) !== -1);\n    }\n    data = this.basicDataSearch(_.last(searchTerms), data, columns);\n    // Checks if user searches for column but he is still typing\n    return this.subSearch(data, currentSearch, columnsClone);\n  }\n\n  basicDataSearch(searchTerm: string, rows: any[], columns: CdTableColumn[]) {\n    if (searchTerm.length === 0) {\n      return rows;\n    }\n    return rows.filter((row) => {\n      return (\n        columns.filter((col) => {\n          let cellValue: any = _.get(row, col.prop);\n\n          if (!_.isUndefined(col.pipe)) {\n            cellValue = col.pipe.transform(cellValue);\n          }\n          if (_.isUndefined(cellValue) || _.isNull(cellValue)) {\n            return false;\n          }\n\n          if (_.isArray(cellValue)) {\n            cellValue = cellValue.join(' ');\n          } else if (_.isNumber(cellValue) || _.isBoolean(cellValue)) {\n            cellValue = cellValue.toString();\n          }\n\n          if (_.isObjectLike(cellValue)) {\n            if (this.searchableObjects) {\n              cellValue = JSON.stringify(cellValue);\n            } else {\n              return false;\n            }\n          }\n\n          return cellValue.toLowerCase().indexOf(searchTerm) !== -1;\n        }).length > 0\n      );\n    });\n  }\n\n  getRowClass() {\n    // Return the function used to populate a row's CSS classes.\n    return () => {\n      return {\n        clickable: !_.isUndefined(this.selectionType)\n      };\n    };\n  }\n\n  toggleExpandRow() {\n    if (_.isNil(this.expanded)) {\n      return;\n    }\n\n    const expandedRowIndex = this.model.data.findIndex((row: TableItem[]) => {\n      const rowSelectedId = _.get(row, [0, 'selected', this.identifier]);\n      const expandedId = this.expanded?.[this.identifier];\n      return _.isEqual(rowSelectedId, expandedId);\n    });\n\n    if (expandedRowIndex < 0) {\n      return;\n    }\n\n    this.model.rowsExpanded = this.model.rowsExpanded.map(\n      (_, rowIndex: number) => rowIndex === expandedRowIndex\n    );\n  }\n\n  firstExpandedDataInRow(row: TableItem[]) {\n    const found = row.find((d) => d.expandedData);\n    if (found) {\n      return found.expandedData;\n    }\n    return found;\n  }\n\n  shouldExpandAsTable(row: TableItem[]) {\n    return row.some((d) => d.expandAsTable);\n  }\n\n  isRowExpandable(index: number) {\n    return this.model.data[index].some((d) => d && d.expandedData);\n  }\n\n  trackByFn(id: string, _index: number, row: TableItem[]) {\n    const uniqueIdentifier = _.get(row, [0, 'data', 'row', id])?.toString?.();\n    return uniqueIdentifier || row;\n  }\n\n  updateSelectAllCheckbox() {\n    const selectedRowsCount = this.model.selectedRowsCount();\n\n    if (selectedRowsCount <= 0) {\n      // reset select all checkbox if nothing selected\n      this.selectAllCheckbox = false;\n      this.selectAllCheckboxSomeSelected = false;\n    } else if (selectedRowsCount < this.model.data.length) {\n      this.selectAllCheckbox = true;\n      this.selectAllCheckboxSomeSelected = true;\n    } else {\n      this.selectAllCheckbox = true;\n      this.selectAllCheckboxSomeSelected = false;\n    }\n  }\n}\n","import _ from 'lodash';\n\n/**\n * This decorator can be used in a class or method.\n * It will encode all the string parameters of all the methods of a class\n * or, if applied on a method, the specified method.\n *\n * @export\n * @param {Function} [target=null]\n * @returns {*}\n */\nexport function cdEncode(...args: any[]): any {\n  switch (args.length) {\n    case 1:\n      return encodeClass.apply(undefined, args);\n    case 3:\n      return encodeMethod.apply(undefined, args);\n    default:\n      throw new Error();\n  }\n}\n\n/**\n * This decorator can be used in parameters only.\n * It will exclude the parameter from being encode.\n * This should be used in parameters that are going\n * to be sent in the request's body.\n *\n * @export\n * @param {Object} target\n * @param {string} propertyKey\n * @param {number} index\n */\nexport function cdEncodeNot(target: object, propertyKey: string, index: number) {\n  const metadataKey = `__ignore_${propertyKey}`;\n  if (Array.isArray(target[metadataKey])) {\n    target[metadataKey].push(index);\n  } else {\n    target[metadataKey] = [index];\n  }\n}\n\nfunction encodeClass(target: Function) {\n  for (const propertyName of Object.getOwnPropertyNames(target.prototype)) {\n    const descriptor = Object.getOwnPropertyDescriptor(target.prototype, propertyName);\n\n    const isMethod = descriptor.value instanceof Function;\n    const isConstructor = propertyName === 'constructor';\n    if (!isMethod || isConstructor) {\n      continue;\n    }\n\n    encodeMethod(target.prototype, propertyName, descriptor);\n    Object.defineProperty(target.prototype, propertyName, descriptor);\n  }\n}\n\nfunction encodeMethod(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  if (descriptor === undefined) {\n    descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\n  }\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function () {\n    const metadataKey = `__ignore_${propertyKey}`;\n    const indices: number[] = target[metadataKey] || [];\n    const args = [];\n\n    for (let i = 0; i < arguments.length; i++) {\n      if (_.isString(arguments[i]) && indices.indexOf(i) === -1) {\n        args[i] = encodeURIComponent(arguments[i]);\n      } else {\n        args[i] = arguments[i];\n      }\n    }\n\n    const result = originalMethod.apply(this, args);\n    return result;\n  };\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { Permission, Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\ntype Condition = string | string[] | Partial<{ [Property in keyof Permissions]: keyof Permission }>;\n\n@Directive({\n  selector: '[cdScope]'\n})\nexport class AuthStorageDirective {\n  permissions: Permissions;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private authStorageService: AuthStorageService\n  ) {}\n\n  @Input() set cdScope(condition: Condition) {\n    this.permissions = this.authStorageService.getPermissions();\n    if (this.isAuthorized(condition)) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n\n  @Input() cdScopeMatchAll = true;\n\n  private isAuthorized(condition: Condition): boolean {\n    const everyOrSome = this.cdScopeMatchAll ? _.every : _.some;\n\n    if (_.isString(condition)) {\n      return _.get(this.permissions, [condition, 'read'], false);\n    } else if (_.isArray(condition)) {\n      return everyOrSome(condition, (permission) => this.permissions[permission]['read']);\n    } else if (_.isObject(condition)) {\n      return everyOrSome(condition, (value, key) => {\n        return everyOrSome(value, (val) => this.permissions[key][val]);\n      });\n    }\n\n    return false;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Directive({\n  selector: '[autofocus]' // eslint-disable-line\n})\nexport class AutofocusDirective implements AfterViewInit {\n  private focus = true;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngAfterViewInit() {\n    const el: HTMLInputElement = this.elementRef.nativeElement;\n    if (this.focus && _.isFunction(el.focus)) {\n      el.focus();\n    }\n  }\n\n  @Input()\n  public set autofocus(condition: any) {\n    if (_.isBoolean(condition)) {\n      this.focus = condition;\n    } else if (_.isFunction(condition)) {\n      this.focus = condition();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport { NgControl, Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { DimlessBinaryPipe } from '../pipes/dimless-binary.pipe';\nimport { FormatterService } from '../services/formatter.service';\n\n@Directive({\n  selector: '[cdDimlessBinary]'\n})\nexport class DimlessBinaryDirective implements OnInit {\n  @Output()\n  ngModelChange: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Minimum size in bytes.\n   * If user enter a value lower than <minBytes>,\n   * the model will automatically be update to <minBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given minBytes=4096 (4KiB), if user type 1KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  minBytes: number;\n\n  /**\n   * Maximum size in bytes.\n   * If user enter a value greater than <maxBytes>,\n   * the model will automatically be update to <maxBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given maxBytes=3145728 (3MiB), if user type 4MiB, then model will be updated to 3MiB\n   */\n  @Input()\n  maxBytes: number;\n\n  /**\n   * Value will be rounded up the nearest power of <roundPower>\n   *\n   * Example:\n   *   Given roundPower=2, if user type 7KiB, then model will be updated to 8KiB\n   *   Given roundPower=2, if user type 5KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  roundPower: number;\n\n  /**\n   * Default unit that should be used when user do not type a unit.\n   * By default, \"MiB\" will be used.\n   *\n   * Example:\n   *   Given defaultUnit=null, if user type 7, then model will be updated to 7MiB\n   *   Given defaultUnit=k, if user type 7, then model will be updated to 7KiB\n   */\n  @Input()\n  defaultUnit: string;\n\n  private el: HTMLInputElement;\n\n  constructor(\n    private elementRef: ElementRef,\n    private control: NgControl,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private formatter: FormatterService\n  ) {\n    this.el = this.elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    this.setValue(this.el.value);\n  }\n\n  setValue(value: string) {\n    if (/^[\\d.]+$/.test(value)) {\n      value += this.defaultUnit || 'm';\n    } else {\n      if (value) {\n        this.control.control.setValue(value);\n        this.control.control.addValidators(Validators.pattern(/^[a-zA-Z\\d. ]+$/));\n        this.control.control.updateValueAndValidity();\n      }\n    }\n    const size = this.formatter.toBytes(value);\n    const roundedSize = this.round(size);\n    this.el.value = this.dimlessBinaryPipe.transform(roundedSize);\n    if (size !== null) {\n      this.ngModelChange.emit(this.el.value);\n      this.control.control.setValue(this.el.value);\n    } else {\n      this.ngModelChange.emit(null);\n      this.control.control.setValue(null);\n    }\n  }\n\n  round(size: number) {\n    if (size !== null && size !== 0) {\n      if (!_.isUndefined(this.minBytes) && size < this.minBytes) {\n        return this.minBytes;\n      }\n      if (!_.isUndefined(this.maxBytes) && size > this.maxBytes) {\n        return this.maxBytes;\n      }\n      if (!_.isUndefined(this.roundPower)) {\n        const power = Math.round(Math.log(size) / Math.log(this.roundPower));\n        return Math.pow(this.roundPower, power);\n      }\n    }\n    return size;\n  }\n\n  @HostListener('blur', ['$event.target.value'])\n  onBlur(value: string) {\n    this.setValue(value);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { AuthStorageDirective } from './auth-storage.directive';\nimport { AutofocusDirective } from './autofocus.directive';\nimport { DimlessBinaryPerSecondDirective } from './dimless-binary-per-second.directive';\nimport { DimlessBinaryDirective } from './dimless-binary.directive';\nimport { FormInputDisableDirective } from './form-input-disable.directive';\nimport { FormLoadingDirective } from './form-loading.directive';\nimport { FormScopeDirective } from './form-scope.directive';\nimport { IopsDirective } from './iops.directive';\nimport { MillisecondsDirective } from './milliseconds.directive';\nimport { CdFormControlDirective } from './ng-bootstrap-form-validation/cd-form-control.directive';\nimport { CdFormGroupDirective } from './ng-bootstrap-form-validation/cd-form-group.directive';\nimport { CdFormValidationDirective } from './ng-bootstrap-form-validation/cd-form-validation.directive';\nimport { PasswordButtonDirective } from './password-button.directive';\nimport { StatefulTabDirective } from './stateful-tab.directive';\nimport { TrimDirective } from './trim.directive';\nimport { RequiredFieldDirective } from './required-field.directive';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { OptionalFieldDirective } from './optional-field.directive';\nimport { DimlessBinaryPerMinuteDirective } from './dimless-binary-per-minute.directive';\nimport { DynamicInputComboboxDirective } from './dynamic-input-combobox.directive';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n  declarations: [\n    AutofocusDirective,\n    DimlessBinaryDirective,\n    DimlessBinaryPerSecondDirective,\n    PasswordButtonDirective,\n    TrimDirective,\n    MillisecondsDirective,\n    IopsDirective,\n    FormLoadingDirective,\n    StatefulTabDirective,\n    FormInputDisableDirective,\n    FormScopeDirective,\n    CdFormControlDirective,\n    CdFormGroupDirective,\n    CdFormValidationDirective,\n    AuthStorageDirective,\n    RequiredFieldDirective,\n    OptionalFieldDirective,\n    DimlessBinaryPerMinuteDirective,\n    DynamicInputComboboxDirective\n  ],\n  exports: [\n    AutofocusDirective,\n    DimlessBinaryDirective,\n    DimlessBinaryPerSecondDirective,\n    PasswordButtonDirective,\n    TrimDirective,\n    MillisecondsDirective,\n    IopsDirective,\n    FormLoadingDirective,\n    StatefulTabDirective,\n    FormInputDisableDirective,\n    FormScopeDirective,\n    CdFormControlDirective,\n    CdFormGroupDirective,\n    CdFormValidationDirective,\n    AuthStorageDirective,\n    RequiredFieldDirective,\n    OptionalFieldDirective,\n    DimlessBinaryPerMinuteDirective,\n    DynamicInputComboboxDirective\n  ]\n})\nexport class DirectivesModule {}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComboBoxService {\n  private searchSubject = new Subject<{ searchString: string }>();\n\n  constructor() {}\n\n  emit(value: { searchString: string }) {\n    this.searchSubject.next(value);\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  EventEmitter,\n  HostListener\n} from '@angular/core';\nimport { ComboBoxItem } from '../models/combo-box.model';\nimport { ComboBoxService } from '../services/combo-box.service';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nexport const DEBOUNCE_TIMER = 300;\n\n/**\n * Directive to introduce adding custom items to the carbon combo-box component\n * It takes the inputs of the combo-box and then append it with the searched item.\n * Then it emits the updatedItems back to the <cds-combobox> element\n */\n@Directive({\n  selector: '[cdDynamicInputCombobox]'\n})\nexport class DynamicInputComboboxDirective implements OnInit, OnDestroy {\n  @Input() items: ComboBoxItem[];\n\n  /**\n   * This will hold the items of the combo-box appended with the searched items.\n   */\n  @Output() updatedItems: EventEmitter<ComboBoxItem[]> = new EventEmitter();\n\n  private searchSubscription: Subscription;\n  private searchSubject: Subject<string> = new Subject();\n  private selectedItems: ComboBoxItem[] = [];\n\n  constructor(private combBoxService: ComboBoxService) {}\n\n  ngOnInit() {\n    this.searchSubscription = this.searchSubject\n      .pipe(debounceTime(DEBOUNCE_TIMER), distinctUntilChanged())\n      .subscribe((searchString) => {\n        // Already selected items should be selected in the dropdown\n        // even if the items are updated again\n        this.items = this.items.map((item: ComboBoxItem) => {\n          const selected = this.selectedItems.some(\n            (selectedItem: ComboBoxItem) => selectedItem.content === item.content\n          );\n          return { ...item, selected };\n        });\n\n        const exists = this.items.some((item: ComboBoxItem) => item.content === searchString);\n\n        if (!exists) {\n          this.items = this.items.concat({ content: searchString, name: searchString });\n        }\n        this.updatedItems.emit(this.items);\n        this.combBoxService.emit({ searchString });\n      });\n  }\n\n  @HostListener('search', ['$event'])\n  onInput(event: string) {\n    if (event.length > 1) this.searchSubject.next(event);\n  }\n\n  @HostListener('selected', ['$event'])\n  onSelected(event: ComboBoxItem[]) {\n    this.selectedItems = event;\n  }\n\n  ngOnDestroy() {\n    this.searchSubscription.unsubscribe();\n    this.searchSubject.complete();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Optional } from '@angular/core';\n\nimport { Permissions } from '../models/permissions';\nimport { AuthStorageService } from '../services/auth-storage.service';\nimport { FormScopeDirective } from './form-scope.directive';\n\n@Directive({\n  selector:\n    'input:not([cdNoFormInputDisable]), select:not([cdNoFormInputDisable]), button:not([cdNoFormInputDisable]), [cdFormInputDisable]'\n})\nexport class FormInputDisableDirective implements AfterViewInit {\n  permissions: Permissions;\n\n  constructor(\n    @Optional() private formScope: FormScopeDirective,\n    private authStorageService: AuthStorageService,\n    private elementRef: ElementRef\n  ) {}\n\n  ngAfterViewInit() {\n    this.permissions = this.authStorageService.getPermissions();\n    const service_name = this.formScope?.cdFormScope;\n    if (service_name && !this.permissions?.[service_name]?.update) {\n      this.elementRef.nativeElement.disabled = true;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { AlertPanelComponent } from '../components/alert-panel/alert-panel.component';\nimport { LoadingPanelComponent } from '../components/loading-panel/loading-panel.component';\nimport { LoadingStatus } from '../forms/cd-form';\n\n@Directive({\n  selector: '[cdFormLoading]'\n})\nexport class FormLoadingDirective {\n  constructor(private templateRef: TemplateRef<any>, private viewContainer: ViewContainerRef) {}\n\n  @Input() set cdFormLoading(condition: LoadingStatus) {\n    let content: any;\n\n    this.viewContainer.clear();\n\n    switch (condition) {\n      case LoadingStatus.Loading:\n        content = this.resolveNgContent($localize`Loading form data...`);\n        this.viewContainer.createComponent(LoadingPanelComponent, { projectableNodes: content });\n        break;\n      case LoadingStatus.Ready:\n        this.viewContainer.createEmbeddedView(this.templateRef);\n        break;\n      case LoadingStatus.Error:\n        content = this.resolveNgContent($localize`Form data could not be loaded.`);\n        const componentRef = this.viewContainer.createComponent(AlertPanelComponent, {\n          projectableNodes: content\n        });\n        (<AlertPanelComponent>componentRef.instance).type = 'error';\n        break;\n    }\n  }\n\n  resolveNgContent(content: string) {\n    const element = document.createTextNode(content);\n    return [[element]];\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\n@Directive({\n  selector: '[cdFormScope]'\n})\nexport class FormScopeDirective {\n  @Input() cdFormScope: any;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2017 Kevin Kipp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * Based on https://github.com/third774/ng-bootstrap-form-validation\n */\n\nimport { Directive, Host, HostBinding, Input, Optional, SkipSelf } from '@angular/core';\nimport { ControlContainer, UntypedFormControl } from '@angular/forms';\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  // tslint:disable-next-line:no-non-null-assertion\n  return [...parent.path!, name];\n}\n\n@Directive({\n  // eslint-disable-next-line\n  selector: '.form-control,.form-check-input,.custom-control-input'\n})\nexport class CdFormControlDirective {\n  @Input()\n  formControlName: string;\n  @Input()\n  formControl: string;\n\n  @HostBinding('class.is-valid')\n  get validClass() {\n    if (!this.control) {\n      return false;\n    }\n    return this.control.valid && (this.control.touched || this.control.dirty);\n  }\n\n  @HostBinding('class.is-invalid')\n  get invalidClass() {\n    if (!this.control) {\n      return false;\n    }\n    return this.control.invalid && this.control.touched && this.control.dirty;\n  }\n\n  get path() {\n    return controlPath(this.formControlName, this.parent);\n  }\n\n  get control(): UntypedFormControl {\n    return this.formDirective && this.formDirective.getControl(this);\n  }\n\n  get formDirective(): any {\n    return this.parent ? this.parent.formDirective : null;\n  }\n\n  constructor(\n    // this value might be null, but we union type it as such until\n    // this issue is resolved: https://github.com/angular/angular/issues/25544\n    @Optional()\n    @Host()\n    @SkipSelf()\n    private parent: ControlContainer\n  ) {}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2017 Kevin Kipp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * Based on https://github.com/third774/ng-bootstrap-form-validation\n */\n\nimport {\n  ContentChildren,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList\n} from '@angular/core';\nimport { FormControlName } from '@angular/forms';\n\n@Directive({\n  // eslint-disable-next-line\n  selector: '.form-group'\n})\nexport class CdFormGroupDirective {\n  @ContentChildren(FormControlName)\n  formControlNames: QueryList<FormControlName>;\n\n  @Input()\n  validationDisabled = false;\n\n  @HostBinding('class.has-error')\n  get hasErrors() {\n    return (\n      this.formControlNames.some((c) => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding('class.has-success')\n  get hasSuccess() {\n    return (\n      !this.formControlNames.some((c) => !c.valid) &&\n      this.formControlNames.some((c) => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  constructor(private elRef: ElementRef) {}\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector('label');\n    return label && label.textContent ? label.textContent.trim() : 'This field';\n  }\n\n  get isDirtyAndTouched() {\n    return this.formControlNames.some((c) => c.dirty && c.touched);\n  }\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2017 Kevin Kipp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * Based on https://github.com/third774/ng-bootstrap-form-validation\n */\n\nimport { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  UntypedFormArray,\n  UntypedFormControl,\n  UntypedFormGroup\n} from '@angular/forms';\n\n@Directive({\n  // eslint-disable-next-line\n  selector: '[formGroup]'\n})\nexport class CdFormValidationDirective {\n  @Input()\n  formGroup: UntypedFormGroup;\n  @Output()\n  validSubmit = new EventEmitter<any>();\n\n  @HostListener('submit')\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(control: AbstractControl) {\n    if (control instanceof UntypedFormGroup) {\n      Object.keys(control.controls).forEach((key) =>\n        this.markAsTouchedAndDirty(control.controls[key])\n      );\n    } else if (control instanceof UntypedFormArray) {\n      control.controls.forEach((c) => this.markAsTouchedAndDirty(c));\n    } else if (control instanceof UntypedFormControl && control.enabled) {\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cdOptionalField]'\n})\nexport class OptionalFieldDirective implements AfterViewInit {\n  @Input('cdOptionalField') label: string;\n  @Input() skeleton: boolean;\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit() {\n    if (!this.label || this.skeleton) return;\n    const labelElement = this.elementRef.nativeElement.querySelector('.cds--label');\n\n    if (labelElement) {\n      this.renderer.setProperty(labelElement, 'textContent', `${this.label} (optional)`);\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Input, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cdPasswordButton]'\n})\nexport class PasswordButtonDirective implements OnInit {\n  private iElement: HTMLElement;\n\n  @Input()\n  private cdPasswordButton: string;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit() {\n    this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', '-1');\n    this.iElement = this.renderer.createElement('i');\n    this.renderer.addClass(this.iElement, 'fa');\n    this.renderer.appendChild(this.elementRef.nativeElement, this.iElement);\n    this.update();\n  }\n\n  private getInputElement() {\n    return document.getElementById(this.cdPasswordButton) as HTMLInputElement;\n  }\n\n  private update() {\n    const inputElement = this.getInputElement();\n    if (inputElement && inputElement.type === 'text') {\n      this.renderer.removeClass(this.iElement, 'fa-eye');\n      this.renderer.addClass(this.iElement, 'fa-eye-slash');\n    } else {\n      this.renderer.removeClass(this.iElement, 'fa-eye-slash');\n      this.renderer.addClass(this.iElement, 'fa-eye');\n    }\n  }\n\n  @HostListener('click')\n  onClick() {\n    const inputElement = this.getInputElement();\n    // Modify the type of the input field.\n    inputElement.type = inputElement.type === 'password' ? 'text' : 'password';\n    // Update the button icon/tooltip.\n    this.update();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cdRequiredField]'\n})\nexport class RequiredFieldDirective implements AfterViewInit {\n  @Input('cdRequiredField') label: string;\n  @Input() skeleton: boolean;\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit() {\n    if (!this.label || this.skeleton) return;\n    const labelElement = this.elementRef.nativeElement.querySelector('.cds--label');\n\n    if (labelElement) {\n      this.renderer.setProperty(labelElement, 'textContent', `${this.label} (required)`);\n    }\n  }\n}\n","import { Directive, Host, HostListener, Input, OnInit, Optional } from '@angular/core';\n\nimport { NgbNav, NgbNavChangeEvent } from '@ng-bootstrap/ng-bootstrap';\n\n@Directive({\n  selector: '[cdStatefulTab]'\n})\nexport class StatefulTabDirective implements OnInit {\n  @Input()\n  cdStatefulTab: string;\n  @Input()\n  cdStatefulTabDefault = '';\n\n  private localStorage = window.localStorage;\n\n  constructor(@Optional() @Host() private nav: NgbNav) {}\n\n  ngOnInit() {\n    // Is an activate tab identifier stored in the local storage?\n    const activeId =\n      this.cdStatefulTabDefault || this.localStorage.getItem(`tabset_${this.cdStatefulTab}`);\n    if (activeId) {\n      this.nav.select(activeId);\n    }\n  }\n\n  @HostListener('navChange', ['$event'])\n  onNavChange(event: NgbNavChangeEvent) {\n    // Store the current active tab identifier in the local storage.\n    if (this.cdStatefulTab && event.nextId) {\n      this.localStorage.setItem(`tabset_${this.cdStatefulTab}`, event.nextId);\n    }\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport _ from 'lodash';\n\n@Directive({\n  selector: '[cdTrim]'\n})\nexport class TrimDirective {\n  constructor(private ngControl: NgControl) {}\n\n  @HostListener('input', ['$event.target.value'])\n  onInput(value: string) {\n    this.setValue(value);\n  }\n\n  setValue(value: string): void {\n    value = _.isString(value) ? value.trim() : value;\n    this.ngControl.control.setValue(value);\n  }\n}\n","export enum CdSortDirection {\n  asc = 'asc',\n  desc = 'desc'\n}\n","export enum CellTemplate {\n  bold = 'bold',\n  sparkline = 'sparkline',\n  perSecond = 'perSecond',\n  checkIcon = 'checkIcon',\n  routerLink = 'routerLink',\n  // Display the cell with an executing state. The state can be set to the `cdExecuting`\n  // attribute of table rows.\n  // It supports an optional custom configuration:\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.executing,\n  //   customTemplateConfig: {\n  //     valueClass?: string;       // Cell value classes.\n  //     executingClass?: string;   // Executing state classes.\n  // }\n  executing = 'executing',\n  classAdding = 'classAdding',\n  // Display the cell value as a badge. The template\n  // supports an optional custom configuration:\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.badge,\n  //   customTemplateConfig: {\n  //     class?: string; // Additional class name.\n  //     prefix?: any;   // Prefix of the value to be displayed.\n  //                     // 'map' and 'prefix' exclude each other.\n  //     map?: {\n  //       [key: any]: { value: any, class?: string }\n  //     }\n  //   }\n  // }\n  badge = 'badge',\n  // Maps the value using the given dictionary.\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.map,\n  //   customTemplateConfig: {\n  //     [key: any]: any\n  //   }\n  // }\n  map = 'map',\n  // Truncates string if it's longer than the given maximum\n  // string length.\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.truncate,\n  //   customTemplateConfig: {\n  //     length?: number;   // Defaults to 30.\n  //     omission?: string; // Defaults to empty string.\n  //   }\n  // }\n  truncate = 'truncate',\n  /*\n  This templace replaces a time, datetime or timestamp with a user-friendly \"X {seconds,minutes,hours,days,...} ago\",\n  but the tooltip still displays the absolute timestamp\n  */\n  timeAgo = 'timeAgo',\n  /*\n  This template truncates a path to a shorter format and shows the whole path in a tooltip\n  eg: /var/lib/ceph/osd/ceph-0 -> /var/.../ceph-0\n  */\n  path = 'path',\n  /*\n  This template is used to attach tooltip to the given column value\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.tooltip,\n  //   customTemplateConfig: {\n  //     map?: {\n  //       [key: any]: { class?: string, tooltip: string }\n  //     }\n  //  }\n  */\n  tooltip = 'tooltip',\n  /*\n  This template is used to attach copy to clipboard functionality to the given column value\n  // {\n  //   ...\n  //   cellTransformation: CellTemplate.copy,\n  */\n  copy = 'copy'\n}\n","export enum UtilizationCardQueries {\n  USEDCAPACITY = 'ceph_cluster_total_used_bytes',\n  WRITEIOPS = 'sum(rate(ceph_pool_wr[1m]))',\n  READIOPS = 'sum(rate(ceph_pool_rd[1m]))',\n  READLATENCY = 'avg_over_time(ceph_osd_apply_latency_ms[1m])',\n  WRITELATENCY = 'avg_over_time(ceph_osd_commit_latency_ms[1m])',\n  READCLIENTTHROUGHPUT = 'sum(rate(ceph_pool_rd_bytes[1m]))',\n  WRITECLIENTTHROUGHPUT = 'sum(rate(ceph_pool_wr_bytes[1m]))',\n  RECOVERYBYTES = 'sum(rate(ceph_osd_recovery_bytes[1m]))'\n}\n\nexport enum CapacityCardQueries {\n  OSD_NEARFULL = 'ceph_osd_nearfull_ratio',\n  OSD_FULL = 'ceph_osd_full_ratio'\n}\n\nexport enum RgwPromqls {\n  RGW_REQUEST_PER_SECOND = 'sum(rate(ceph_rgw_req[1m]))',\n  AVG_GET_LATENCY = '(sum(rate(ceph_rgw_op_get_obj_lat_sum[1m])) / sum(rate(ceph_rgw_op_get_obj_lat_count[1m]))) * 1000',\n  AVG_PUT_LATENCY = '(sum(rate(ceph_rgw_op_put_obj_lat_sum[1m])) / sum(rate(ceph_rgw_op_put_obj_lat_count[1m]))) * 1000',\n  GET_BANDWIDTH = 'sum(rate(ceph_rgw_op_get_obj_bytes[1m]))',\n  PUT_BANDWIDTH = 'sum(rate(ceph_rgw_op_put_obj_bytes[1m]))'\n}\n\nexport enum MultiClusterPromqls {\n  ALERTS_COUNT = 'count(ALERTS{alertstate=\"firing\"}) or vector(0)',\n  CLUSTER_COUNT = 'count(ceph_health_status) or vector(0)',\n  HEALTH_OK_COUNT = 'count(ceph_health_status==0) or vector(0)',\n  HEALTH_WARNING_COUNT = 'count(ceph_health_status==1) or vector(0)',\n  HEALTH_ERROR_COUNT = 'count(ceph_health_status==2) or vector(0)',\n  TOTAL_CLUSTERS_CAPACITY = 'sum(ceph_cluster_total_bytes) or vector(0)',\n  TOTAL_USED_CAPACITY = 'sum(ceph_cluster_by_class_total_used_bytes) or vector(0)',\n  HEALTH_STATUS = 'ceph_health_status',\n  MGR_METADATA = 'ceph_mgr_metadata',\n  TOTAL_CAPACITY = 'ceph_cluster_total_bytes',\n  USED_CAPACITY = 'ceph_cluster_total_used_bytes',\n  POOLS = 'count by (cluster) (ceph_pool_metadata) or vector(0)',\n  OSDS = 'count by (cluster) (ceph_osd_metadata) or vector(0)',\n  CRITICAL_ALERTS_COUNT = 'count(ALERTS{alertstate=\"firing\",severity=\"critical\"}) or vector(0)',\n  WARNING_ALERTS_COUNT = 'count(ALERTS{alertstate=\"firing\",severity=\"warning\"}) or vector(0)',\n  ALERTS = 'ALERTS{alertstate=\"firing\"}',\n  HOSTS = 'sum by (hostname, cluster) (group by (hostname, cluster) (ceph_osd_metadata)) or vector(0)',\n  TOTAL_HOSTS = 'count by (cluster) (ceph_osd_metadata) or vector(0)',\n  CLUSTER_ALERTS = 'count by (cluster) (ALERTS{alertstate=\"firing\"}) or vector(0)',\n  FEDERATE_UP_METRIC = 'up'\n}\n\nexport enum MultiClusterPromqlsForClusterUtilization {\n  CLUSTER_CAPACITY_UTILIZATION = 'topk(5, ceph_cluster_total_used_bytes)',\n  CLUSTER_IOPS_UTILIZATION = 'topk(5, sum by (cluster) (rate(ceph_pool_wr[1m])) + sum by (cluster) (rate(ceph_pool_rd[1m])) )',\n  CLUSTER_THROUGHPUT_UTILIZATION = 'topk(5, sum by (cluster) (rate(ceph_pool_wr_bytes[1m])) + sum by (cluster) (rate(ceph_pool_rd_bytes[1m])) )'\n}\n\nexport enum MultiClusterPromqlsForPoolUtilization {\n  POOL_CAPACITY_UTILIZATION = 'topk(5, ceph_pool_bytes_used/ceph_pool_max_avail * on(pool_id, cluster) group_left(instance, name) ceph_pool_metadata)',\n  POOL_IOPS_UTILIZATION = 'topk(5, (rate(ceph_pool_rd[1m]) + rate(ceph_pool_wr[1m])) * on(pool_id, cluster) group_left(instance, name) ceph_pool_metadata )',\n  POOL_THROUGHPUT_UTILIZATION = 'topk(5, (irate(ceph_pool_rd_bytes[1m]) + irate(ceph_pool_wr_bytes[1m])) * on(pool_id, cluster) group_left(instance, name) ceph_pool_metadata )'\n}\n","export enum DeletionImpact {\n  medium = 'medium',\n  high = 'high' // NOTE: User should be able to select only single resource while deleting\n}\n","export enum HealthIcon {\n  HEALTH_ERR = 'fa fa-exclamation-circle',\n  HEALTH_WARN = 'fa fa-exclamation-triangle',\n  HEALTH_OK = 'fa fa-check-circle'\n}\n\nexport enum AlertClass {\n  critical = 'danger',\n  warning = 'warning',\n  info = 'info'\n}\n","export enum Icons {\n  /* Icons for Symbol */\n  add = 'add', // Create, Add\n  addCircle = 'add--filled', // Plus with Circle\n  minusCircle = 'subtract--alt', // Minus with Circle\n  edit = 'edit', // Edit, Edit Mode, Rename\n  destroy = 'close', // Destroy, Remove, Delete\n  exchange = 'arrows--horizontal', // Edit-Peer\n  copy = 'copy', // Copy\n  clipboard = 'copy--file', // Clipboard\n  flatten = 'unlink', // Flatten, Link broken, Mark Lost\n  trash = 'trash-can', // Move to trash\n  lock = 'locked', // Protect\n  unlock = 'unlocked', // Unprotect\n  clone = 'fa fa-clone', // clone\n  undo = 'fa fa-undo', // Rollback, Restore\n  search = 'search', // Search\n  start = 'fa fa-play', // Enable\n  stop = 'fa fa-stop', // Disable\n  analyse = 'fa fa-stethoscope', // Scrub\n  deepCheck = 'settings', // Deep Scrub, Setting, Configuration\n  cogs = 'fa fa-cogs', // Multiple Settings, Configurations\n  reweight = 'scales', // Reweight\n  up = 'arrow--up', // Up\n  left = 'arrow--left', // Mark out\n  right = 'arrow--right', // Mark in\n  down = 'arrow--down', // Mark Down\n  erase = 'fa fa-eraser', // Purge  color: bd.$white;\n  expand = 'maximize', // Expand cluster\n  user = 'user', // User, Initiators\n  users = 'user--multiple', // Users, Groups\n  share = 'share', // share\n  key = 'password', // S3 Keys, Swift Keys, Authentication\n  warning = 'warning--alt--filled', // Notification warning\n  info = 'information', // Notification information\n  infoCircle = 'information--filled', // Info on landing page\n  questionCircle = 'help',\n  danger = 'warning--filled',\n  success = 'checkmark--filled',\n  check = 'checkmark', // Notification check\n  show = 'view', // Show\n  paragraph = 'fa fa-paragraph', // Silence Matcher - Attribute name\n  terminal = 'fa fa-terminal', // Silence Matcher - Value\n  magic = 'fa fa-magic', // Silence Matcher - Regex checkbox\n  hourglass = 'fa fa-hourglass-o', // Task\n  filledHourglass = 'fa fa-hourglass', // Task\n  table = 'fa fa-table', // Table,\n  spinner = 'fa fa-spinner',\n  refresh = 'renew', // Refresh\n  bullseye = 'fa fa-bullseye', // Target\n  disk = 'fa fa-hdd-o', // Hard disk, disks\n  server = 'fa fa-server', // Server, Portal\n  filter = 'filter', // Filter\n  lineChart = 'analytics', // Line chart\n  signOut = 'fa fa-sign-out', // Sign Out\n  circle = 'dot-mark', // Circle\n  bell = 'notification', // Notification\n  mute = 'notification--off', // Mute or silence\n  leftArrow = 'caret--left', // Left facing angle\n  rightArrow = 'caret--right', // Right facing angle\n  downArrow = 'caret--down',\n  flag = 'fa fa-flag', // OSD configuration\n  clearFilters = 'close--filled', // Clear filters, solid x\n  download = 'download', // Download\n  upload = 'fa fa-upload', // Upload\n  code = 'code', // JSON file\n  document = 'document', // Text file\n  wrench = 'tools', // Configuration Error\n  enter = 'fa fa-sign-in', // Enter\n  exit = 'fa fa-sign-out', // Exit\n  restart = 'fa fa-history', // Restart\n  deploy = 'cube', // Deploy, Redeploy\n  cubes = 'fa fa-cubes', // Object storage\n  sitemap = 'fa fa-sitemap', // Cluster, network, connections\n  database = 'fa fa-database', // Database, Block storage\n  bars = 'fa fa-bars', // Stack, bars\n  navicon = 'fa fa-navicon', // Navigation\n  areaChart = 'fa fa-area-chart', // Area Chart, dashboard\n  eye = 'fa fa-eye', // Observability\n  calendar = 'fa fa-calendar',\n  externalUrl = 'fa fa-external-link', // links to external page\n  nfsExport = 'fa fa-server', // NFS export\n  launch = 'launch',\n  parentChild = 'parent-child',\n  dataTable = 'data-table',\n  idea = 'idea',\n  userAccessLocked = 'user--access-locked', // User access locked\n  /* Icons for special effect */\n  size16 = '16',\n  size20 = '20',\n  size24 = '24',\n  size32 = '32',\n  large = 'fa fa-lg', // icon becomes 33% larger\n  large2x = 'fa fa-2x', // icon becomes 50% larger\n  large3x = 'fa fa-3x', // icon becomes 3 times larger\n  stack = 'fa fa-stack', // To stack multiple icons\n  stack1x = 'fa fa-stack-1x', // To stack regularly sized icon\n  stack2x = 'fa fa-stack-2x', // To stack regularly sized icon\n  pulse = 'fa fa-pulse', // To have spinner rotate with 8 steps\n  spin = 'fa fa-spin', //  To get any icon to rotate\n  inverse = 'fa fa-inverse' // To get an alternative icon color\n}\n\nexport enum IconSize {\n  size16 = '16',\n  size20 = '20',\n  size24 = '24',\n  size32 = '32'\n}\n\nexport const ICON_TYPE = {\n  copy: 'copy',\n  danger: 'danger',\n  infoCircle: 'info-circle',\n  success: 'success',\n  warning: 'warning'\n} as const;\n","export enum NotificationType {\n  error,\n  info,\n  success\n}\n","export enum ViewCacheStatus {\n  ValueOk = 0,\n  ValueStale = 1,\n  ValueNone = 2,\n  ValueException = 3\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControlOptions, UntypedFormBuilder } from '@angular/forms';\n\nimport { CdFormGroup } from './cd-form-group';\n\n/**\n * CdFormBuilder extends FormBuilder to create a CdFormGroup based form.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CdFormBuilder extends UntypedFormBuilder {\n  group(\n    controlsConfig: { [key: string]: any },\n    extra: AbstractControlOptions | null = null\n  ): CdFormGroup {\n    const form = super.group(controlsConfig, extra);\n    return new CdFormGroup(form.controls, form.validator, form.asyncValidator);\n  }\n}\n","import {\n  AbstractControl,\n  AbstractControlOptions,\n  AsyncValidatorFn,\n  UntypedFormGroup,\n  NgForm,\n  ValidatorFn\n} from '@angular/forms';\n\n/**\n * CdFormGroup extends FormGroup with a few new methods that will help form development.\n */\nexport class CdFormGroup extends UntypedFormGroup {\n  constructor(\n    public controls: { [key: string]: AbstractControl },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n  }\n\n  /**\n   * Get a control out of any control even if its nested in other CdFormGroups or a FormGroup\n   */\n  get(controlName: string): AbstractControl {\n    const control = this._get(controlName);\n    if (!control) {\n      throw new Error(`Control '${controlName}' could not be found!`);\n    }\n    return control;\n  }\n\n  _get(controlName: string): AbstractControl {\n    return (\n      super.get(controlName) ||\n      Object.values(this.controls)\n        .filter((c) => c.get)\n        .map((form) => {\n          if (form instanceof CdFormGroup) {\n            return form._get(controlName);\n          }\n          return form.get(controlName);\n        })\n        .find((c) => Boolean(c))\n    );\n  }\n\n  /**\n   * Get the value of a control\n   */\n  getValue(controlName: string): any {\n    return this.get(controlName).value;\n  }\n\n  /**\n   * Sets a control without triggering a value changes event\n   *\n   * Very useful if a function is called through a value changes event but the value\n   * should be changed within the call.\n   */\n  silentSet(controlName: string, value: any) {\n    this.get(controlName).setValue(value, { emitEvent: false });\n  }\n\n  /**\n   * Indicates errors of the control in templates\n   */\n  showError(controlName: string, form: NgForm, errorName?: string): boolean {\n    const control = this.get(controlName);\n    return (\n      (form?.submitted || control.dirty) &&\n      (errorName ? control.hasError(errorName) : control.invalid)\n    );\n  }\n}\n","import { BaseModal } from 'carbon-components-angular';\n\nexport enum LoadingStatus {\n  Loading,\n  Ready,\n  Error,\n  None\n}\n\nexport class CdForm extends BaseModal {\n  constructor() {\n    super();\n  }\n\n  loading = LoadingStatus.Loading;\n\n  loadingStart() {\n    this.loading = LoadingStatus.Loading;\n  }\n\n  loadingReady() {\n    this.loading = LoadingStatus.Ready;\n  }\n\n  loadingError() {\n    this.loading = LoadingStatus.Error;\n  }\n\n  loadingNone() {\n    this.loading = LoadingStatus.None;\n  }\n}\n","import {\n  AbstractControl,\n  AsyncValidatorFn,\n  ValidationErrors,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\n\nimport _ from 'lodash';\nimport { Observable, of as observableOf, timer as observableTimer } from 'rxjs';\nimport { map, switchMapTo, take } from 'rxjs/operators';\n\nimport { RgwBucketService } from '~/app/shared/api/rgw-bucket.service';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport validator from 'validator';\n\nexport function isEmptyInputValue(value: any): boolean {\n  return value == null || value.length === 0;\n}\n\nexport type existsServiceFn = (value: any, ...args: any[]) => Observable<boolean>;\n\nexport const DUE_TIMER = 500;\n\nexport class CdValidators {\n  /**\n   * Validator that performs email validation. In contrast to the Angular\n   * email validator an empty email will not be handled as invalid.\n   */\n  static email(control: AbstractControl): ValidationErrors | null {\n    // Exit immediately if value is empty.\n    if (isEmptyInputValue(control.value)) {\n      return null;\n    }\n    return Validators.email(control);\n  }\n\n  /**\n   * Validator function in order to validate IP addresses.\n   * @param {number} version determines the protocol version. It needs to be set to 4 for IPv4 and\n   *   to 6 for IPv6 validation. For any other number (it's also the default case) it will return a\n   *   function to validate the input string against IPv4 OR IPv6.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static ip(version: number = 0): ValidatorFn {\n    // prettier-ignore\n    const ipv4Rgx =\n      /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i;\n    const ipv6Rgx = /^(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4}$/i;\n\n    if (version === 4) {\n      return Validators.pattern(ipv4Rgx);\n    } else if (version === 6) {\n      return Validators.pattern(ipv6Rgx);\n    } else {\n      return Validators.pattern(new RegExp(ipv4Rgx.source + '|' + ipv6Rgx.source));\n    }\n  }\n\n  /**\n   * Validator function in order to validate numbers.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static number(allowsNegative: boolean = true): ValidatorFn {\n    if (allowsNegative) {\n      return Validators.pattern(/^-?[0-9]+$/i);\n    } else {\n      return Validators.pattern(/^[0-9]+$/i);\n    }\n  }\n\n  /**\n   * Validator function in order to validate decimal numbers.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static decimalNumber(allowsNegative: boolean = true): ValidatorFn {\n    if (allowsNegative) {\n      return Validators.pattern(/^-?[0-9]+(.[0-9]+)?$/i);\n    } else {\n      return Validators.pattern(/^[0-9]+(.[0-9]+)?$/i);\n    }\n  }\n\n  /**\n   * Validator that performs SSL certificate validation.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static sslCert(): ValidatorFn {\n    return Validators.pattern(\n      /^-----BEGIN CERTIFICATE-----(\\n|\\r|\\f)((.+)?((\\n|\\r|\\f).+)*)(\\n|\\r|\\f)-----END CERTIFICATE-----[\\n\\r\\f]*$/\n    );\n  }\n\n  /**\n   * Validator that performs SSL private key validation.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static sslPrivKey(): ValidatorFn {\n    return Validators.pattern(\n      /^-----BEGIN RSA PRIVATE KEY-----(\\n|\\r|\\f)((.+)?((\\n|\\r|\\f).+)*)(\\n|\\r|\\f)-----END RSA PRIVATE KEY-----[\\n\\r\\f]*$/\n    );\n  }\n\n  /**\n   * Validator that performs SSL certificate validation of pem format.\n   * @returns {ValidatorFn} A validator function that returns an error map containing `pattern`\n   *   if the validation check fails, otherwise `null`.\n   */\n  static pemCert(): ValidatorFn {\n    return Validators.pattern(/^-----BEGIN .+-----$.+^-----END .+-----$/ms);\n  }\n\n  /**\n   * Validator that requires controls to fulfill the specified condition if\n   * the specified prerequisites matches. If the prerequisites are fulfilled,\n   * then the given function is executed and if it succeeds, the 'required'\n   * validation error will be returned, otherwise null.\n   * @param {Object} prerequisites An object containing the prerequisites.\n   *   To do additional checks rather than checking for equality you can\n   *   use the extended prerequisite syntax:\n   *     'field_name': { 'op': '<OPERATOR>', arg1: '<OPERATOR_ARGUMENT>' }\n   *   The following operators are supported:\n   *   * empty\n   *   * !empty\n   *   * equal\n   *   * !equal\n   *   * minLength\n   *   ### Example\n   *   ```typescript\n   *   {\n   *     'generate_key': true,\n   *     'username': 'Max Mustermann'\n   *   }\n   *   ```\n   *   ### Example - Extended prerequisites\n   *   ```typescript\n   *   {\n   *     'generate_key': { 'op': 'equal', 'arg1': true },\n   *     'username': { 'op': 'minLength', 'arg1': 5 }\n   *   }\n   *   ```\n   *   Only if all prerequisites are fulfilled, then the validation of the\n   *   control will be triggered.\n   * @param {Function | undefined} condition The function to be executed when all\n   *   prerequisites are fulfilled. If not set, then the {@link isEmptyInputValue}\n   *   function will be used by default. The control's value is used as function\n   *   argument. The function must return true to set the validation error.\n   * @return {ValidatorFn} Returns the validator function.\n   */\n  static requiredIf(prerequisites: object, condition?: Function | undefined): ValidatorFn {\n    let isWatched = false;\n\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!isWatched && control.parent) {\n        Object.keys(prerequisites).forEach((key) => {\n          control.parent.get(key).valueChanges.subscribe(() => {\n            control.updateValueAndValidity({ emitEvent: false });\n          });\n        });\n\n        isWatched = true;\n      }\n\n      // Check if all prerequisites met.\n      if (\n        !Object.keys(prerequisites).every((key) => {\n          if (!control.parent) {\n            return false;\n          }\n          const value = control.parent.get(key).value;\n          const prerequisite = prerequisites[key];\n          if (_.isObjectLike(prerequisite)) {\n            let result = false;\n            switch (prerequisite['op']) {\n              case 'empty':\n                result = _.isEmpty(value);\n                break;\n              case '!empty':\n                result = !_.isEmpty(value);\n                break;\n              case 'equal':\n                result = value === prerequisite['arg1'];\n                break;\n              case '!equal':\n                result = value !== prerequisite['arg1'];\n                break;\n              case 'minLength':\n                if (_.isString(value)) {\n                  result = value.length >= prerequisite['arg1'];\n                }\n                break;\n              case 'minValue':\n                if (_.isNumber(value)) {\n                  result = value >= prerequisite['arg1'];\n                }\n            }\n            return result;\n          }\n          return value === prerequisite;\n        })\n      ) {\n        return null;\n      }\n      const success = _.isFunction(condition)\n        ? condition.call(condition, control.value)\n        : isEmptyInputValue(control.value);\n      return success ? { required: true } : null;\n    };\n  }\n\n  /**\n   * Compose multiple validators into a single function that returns the union of\n   * the individual error maps for the provided control when the given prerequisites\n   * are fulfilled.\n   *\n   * @param {Object} prerequisites An object containing the prerequisites as\n   *   key/value pairs.\n   *   ### Example\n   *   ```typescript\n   *   {\n   *     'generate_key': true,\n   *     'username': 'Max Mustermann'\n   *   }\n   *   ```\n   * @param {ValidatorFn[]} validators List of validators that should be taken\n   *   into action when the prerequisites are met.\n   * @return {ValidatorFn} Returns the validator function.\n   */\n  static composeIf(prerequisites: object, validators: ValidatorFn[]): ValidatorFn {\n    let isWatched = false;\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!isWatched && control.parent) {\n        Object.keys(prerequisites).forEach((key) => {\n          control.parent.get(key).valueChanges.subscribe(() => {\n            control.updateValueAndValidity({ emitEvent: false });\n          });\n        });\n        isWatched = true;\n      }\n      // Check if all prerequisites are met.\n      if (\n        !Object.keys(prerequisites).every((key) => {\n          return control.parent && control.parent.get(key).value === prerequisites[key];\n        })\n      ) {\n        return null;\n      }\n      return Validators.compose(validators)(control);\n    };\n  }\n\n  /**\n   * Custom validation by passing a name for the error and a function as error condition.\n   *\n   * @param {string} error\n   * @param {Function} condition - a truthy return value will trigger the error\n   * @returns {ValidatorFn}\n   */\n  static custom(error: string, condition: Function): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      const value = condition.call(this, control.value);\n      if (value) {\n        return { [error]: value };\n      }\n      return null;\n    };\n  }\n\n  /**\n   * Validate form control if condition is true with validators.\n   *\n   * @param {AbstractControl} formControl\n   * @param {Function} condition\n   * @param {ValidatorFn[]} conditionalValidators List of validators that should only be tested\n   * when the condition is met\n   * @param {ValidatorFn[]} permanentValidators List of validators that should always be tested\n   * @param {AbstractControl[]} watchControls List of controls that the condition depend on.\n   * Every time one of this controls value is updated, the validation will be triggered\n   */\n  static validateIf(\n    formControl: AbstractControl,\n    condition: Function,\n    conditionalValidators: ValidatorFn[],\n    permanentValidators: ValidatorFn[] = [],\n    watchControls: AbstractControl[] = []\n  ) {\n    conditionalValidators = conditionalValidators.concat(permanentValidators);\n\n    formControl.setValidators((control: AbstractControl): {\n      [key: string]: any;\n    } => {\n      const value = condition.call(this);\n      if (value) {\n        return Validators.compose(conditionalValidators)(control);\n      }\n      if (permanentValidators.length > 0) {\n        return Validators.compose(permanentValidators)(control);\n      }\n      return null;\n    });\n\n    watchControls.forEach((control: AbstractControl) => {\n      control.valueChanges.subscribe(() => {\n        formControl.updateValueAndValidity({ emitEvent: false });\n      });\n    });\n  }\n\n  /**\n   * Validator that requires that both specified controls have the same value.\n   * Error will be added to the `path2` control.\n   * @param {string} path1 A dot-delimited string that define the path to the control.\n   * @param {string} path2 A dot-delimited string that define the path to the control.\n   * @return {ValidatorFn} Returns a validator function that always returns `null`.\n   *   If the validation fails an error map with the `match` property will be set\n   *   on the `path2` control.\n   */\n  static match(path1: string, path2: string): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      const ctrl1 = control.get(path1);\n      const ctrl2 = control.get(path2);\n      if (!ctrl1 || !ctrl2) {\n        return null;\n      }\n      if (ctrl1.value !== ctrl2.value) {\n        ctrl2.setErrors({ match: true });\n      } else {\n        const hasError = ctrl2.hasError('match');\n        if (hasError) {\n          // Remove the 'match' error. If no more errors exists, then set\n          // the error value to 'null', otherwise the field is still marked\n          // as invalid.\n          const errors = ctrl2.errors;\n          _.unset(errors, 'match');\n          ctrl2.setErrors(_.isEmpty(_.keys(errors)) ? null : errors);\n        }\n      }\n      return null;\n    };\n  }\n\n  /**\n   * Asynchronous validator that requires the control's value to be unique.\n   * The validation is only executed after the specified delay. Every\n   * keystroke during this delay will restart the timer.\n   * @param serviceFn {existsServiceFn} The service function that is\n   *   called to check whether the given value exists. It must return\n   *   boolean 'true' if the given value exists, otherwise 'false'.\n   * @param serviceFnThis {any} The object to be used as the 'this' object\n   *   when calling the serviceFn function. Defaults to null.\n   * @param usernameFn {Function} Specifically used in rgw user form to\n   *   validate the tenant$username format\n   * @param uidField {boolean} Specifically used in rgw user form to\n   *   validate the tenant$username format\n   * @param extraArgs {...any} Any extra arguments that need to be passed\n   *   to the serviceFn function.\n   * @return {AsyncValidatorFn} Returns an asynchronous validator function\n   *   that returns an error map with the `notUnique` property if the\n   *   validation check succeeds, otherwise `null`.\n   */\n  static unique(\n    serviceFn: existsServiceFn,\n    serviceFnThis: any = null,\n    usernameFn?: Function,\n    uidField = false,\n    ...extraArgs: any[]\n  ): AsyncValidatorFn {\n    let uName: string;\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      // Exit immediately if user has not interacted with the control yet\n      // or the control value is empty.\n      if (control.pristine || isEmptyInputValue(control.value)) {\n        return observableOf(null);\n      }\n      uName = control.value;\n      if (_.isFunction(usernameFn) && usernameFn() !== null && usernameFn() !== '') {\n        if (uidField) {\n          uName = `${control.value}$${usernameFn()}`;\n        } else {\n          uName = `${usernameFn()}$${control.value}`;\n        }\n      }\n\n      return observableTimer(DUE_TIMER).pipe(\n        switchMapTo(serviceFn.call(serviceFnThis, uName, ...extraArgs)),\n        map((resp: boolean) => {\n          if (!resp) {\n            return null;\n          } else {\n            return { notUnique: true };\n          }\n        }),\n        take(1)\n      );\n    };\n  }\n\n  /**\n   * Validator function for UUIDs.\n   * @param required - Defines if it is mandatory to fill in the UUID\n   * @return Validator function that returns an error object containing `invalidUuid` if the\n   * validation failed, `null` otherwise.\n   */\n  static uuid(required = false): ValidatorFn {\n    const uuidRe = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.pristine && control.untouched) {\n        return null;\n      } else if (!required && !control.value) {\n        return null;\n      } else if (uuidRe.test(control.value)) {\n        return null;\n      }\n      return { invalidUuid: 'This is not a valid UUID' };\n    };\n  }\n\n  /**\n   * A simple minimum validator vor cd-binary inputs.\n   *\n   * To use the validation message pass I18n into the function as it cannot\n   * be called in a static one.\n   */\n  static binaryMin(bytes: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: () => string } | null => {\n      const formatterService = new FormatterService();\n      const currentBytes = new FormatterService().toBytes(control.value);\n      if (bytes <= currentBytes) {\n        return null;\n      }\n      const value = new DimlessBinaryPipe(formatterService).transform(bytes);\n      return {\n        binaryMin: () => $localize`Size has to be at least ${value} or more`\n      };\n    };\n  }\n\n  /**\n   * A simple maximum validator vor cd-binary inputs.\n   *\n   * To use the validation message pass I18n into the function as it cannot\n   * be called in a static one.\n   */\n  static binaryMax(bytes: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: () => string } | null => {\n      const formatterService = new FormatterService();\n      const currentBytes = formatterService.toBytes(control.value);\n      if (bytes >= currentBytes) {\n        return null;\n      }\n      const value = new DimlessBinaryPipe(formatterService).transform(bytes);\n      return {\n        binaryMax: () => $localize`Size has to be at most ${value} or less`\n      };\n    };\n  }\n\n  /**\n   * Asynchronous validator that checks if the password meets the password\n   * policy.\n   * @param userServiceThis The object to be used as the 'this' object\n   *   when calling the 'validatePassword' method of the 'UserService'.\n   * @param usernameFn Function to get the username that should be\n   *   taken into account.\n   * @param callback Callback function that is called after the validation\n   *   has been done.\n   * @return {AsyncValidatorFn} Returns an asynchronous validator function\n   *   that returns an error map with the `passwordPolicy` property if the\n   *   validation check fails, otherwise `null`.\n   */\n  static passwordPolicy(\n    userServiceThis: any,\n    usernameFn?: Function,\n    callback?: (valid: boolean, credits?: number, valuation?: string) => void\n  ): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (control.pristine || control.value === '') {\n        if (_.isFunction(callback)) {\n          callback(true, 0);\n        }\n        return observableOf(null);\n      }\n      let username;\n      if (_.isFunction(usernameFn)) {\n        username = usernameFn();\n      }\n      return observableTimer(DUE_TIMER).pipe(\n        switchMapTo(_.invoke(userServiceThis, 'validatePassword', control.value, username)),\n        map((resp: { valid: boolean; credits: number; valuation: string }) => {\n          if (_.isFunction(callback)) {\n            callback(resp.valid, resp.credits, resp.valuation);\n          }\n          if (resp.valid) {\n            return null;\n          } else {\n            return { passwordPolicy: true };\n          }\n        }),\n        take(1)\n      );\n    };\n  }\n\n  /**\n   * Validate the bucket name. In general, bucket names should follow domain\n   * name constraints:\n   * - Bucket names must be unique.\n   * - Bucket names cannot be formatted as IP address.\n   * - Bucket names can be between 3 and 63 characters long.\n   * - Bucket names must not contain uppercase characters or underscores.\n   * - Bucket names must start with a lowercase letter or number.\n   * - Bucket names must be a series of one or more labels. Adjacent\n   *   labels are separated by a single period (.). Bucket names can\n   *   contain lowercase letters, numbers, and hyphens. Each label must\n   *   start and end with a lowercase letter or a number.\n   */\n  static bucketName(): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (control.pristine || !control.value) {\n        return observableOf({ required: true });\n      }\n      const constraints = [];\n      let errorName: string;\n      // - Bucket names cannot be formatted as IP address.\n      constraints.push(() => {\n        const ipv4Rgx = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i;\n        const ipv6Rgx = /^(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4}$/i;\n        const name = control.value;\n        let notIP = true;\n        if (ipv4Rgx.test(name) || ipv6Rgx.test(name)) {\n          errorName = 'ipAddress';\n          notIP = false;\n        }\n        return notIP;\n      });\n      // - Bucket names can be between 3 and 63 characters long.\n      constraints.push((name: string) => {\n        if (!_.inRange(name.length, 3, 64)) {\n          errorName = 'shouldBeInRange';\n          return false;\n        }\n        // Bucket names can only contain lowercase letters, numbers, periods and hyphens.\n        if (!/^[0-9a-z.-]+$/.test(control.value)) {\n          errorName = 'bucketNameInvalid';\n          return false;\n        }\n        return true;\n      });\n      // - Bucket names must not contain uppercase characters or underscores.\n      // - Bucket names must start with a lowercase letter or number.\n      // - Bucket names must be a series of one or more labels. Adjacent\n      //   labels are separated by a single period (.). Bucket names can\n      //   contain lowercase letters, numbers, and hyphens. Each label must\n      //   start and end with a lowercase letter or a number.\n      constraints.push((name: string) => {\n        const labels = _.split(name, '.');\n        return _.every(labels, (label) => {\n          // Bucket names must not contain uppercase characters or underscores.\n          if (label !== _.toLower(label) || label.includes('_')) {\n            errorName = 'containsUpperCase';\n            return false;\n          }\n          // Bucket labels can contain lowercase letters, numbers, and hyphens.\n          if (!/^[0-9a-z-]+$/.test(label)) {\n            errorName = 'onlyLowerCaseAndNumbers';\n            return false;\n          }\n          // Each label must start and end with a lowercase letter or a number.\n          return _.every([0, label.length - 1], (index) => {\n            errorName = 'lowerCaseOrNumber';\n            return /[a-z]/.test(label[index]) || _.isInteger(_.parseInt(label[index]));\n          });\n        });\n      });\n      if (!_.every(constraints, (func: Function) => func(control.value))) {\n        return observableOf(\n          (() => {\n            switch (errorName) {\n              case 'onlyLowerCaseAndNumbers':\n                return { onlyLowerCaseAndNumbers: true };\n              case 'shouldBeInRange':\n                return { shouldBeInRange: true };\n              case 'ipAddress':\n                return { ipAddress: true };\n              case 'containsUpperCase':\n                return { containsUpperCase: true };\n              case 'lowerCaseOrNumber':\n                return { lowerCaseOrNumber: true };\n              default:\n                return { bucketNameInvalid: true };\n            }\n          })()\n        );\n      }\n\n      return observableOf(null);\n    };\n  }\n\n  static bucketExistence(\n    requiredExistenceResult: boolean,\n    rgwBucketService: RgwBucketService\n  ): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (control.pristine || !control.value) {\n        return observableOf({ required: true });\n      }\n      return observableTimer(DUE_TIMER).pipe(\n        switchMapTo(rgwBucketService.exists(control.value)),\n        map((existenceResult: boolean) =>\n          existenceResult === requiredExistenceResult ? null : { bucketNameNotAllowed: true }\n        )\n      );\n    };\n  }\n\n  static json(): ValidatorFn {\n    return (control: AbstractControl): Record<string, any> | null => {\n      if (!control.value) return null;\n      try {\n        JSON.parse(control.value);\n        return null;\n      } catch (e) {\n        return { invalidJson: true };\n      }\n    };\n  }\n\n  static xml(): ValidatorFn {\n    return (control: AbstractControl): Record<string, boolean> | null => {\n      if (!control.value) return null;\n      const parser = new DOMParser();\n      const xml = parser.parseFromString(control.value, 'application/xml');\n      const errorNode = xml.querySelector('parsererror');\n      if (errorNode) {\n        return { invalidXml: true };\n      }\n      return null;\n    };\n  }\n\n  static jsonOrXml(): ValidatorFn {\n    return (control: AbstractControl): Record<string, boolean> | null => {\n      if (!control.value) return null;\n\n      if (control.value.trim().startsWith('<')) {\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(control.value, 'application/xml');\n        const errorNode = xml.querySelector('parsererror');\n        if (errorNode) {\n          return { invalidXml: true };\n        }\n        return null;\n      } else {\n        try {\n          JSON.parse(control.value);\n          return null;\n        } catch (e) {\n          return { invalidJson: true };\n        }\n      }\n    };\n  }\n\n  static oauthAddressTest(): ValidatorFn {\n    const OAUTH2_HTTPS_ADDRESS_PATTERN = /^((\\d{1,3}\\.){3}\\d{1,3}|([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9-_]+)/;\n    return (control: AbstractControl): Record<string, boolean> | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      if (!control.value.includes(':')) {\n        return { invalidAddress: true };\n      }\n      const [address, port] = control.value.split(':');\n      const addressTest = OAUTH2_HTTPS_ADDRESS_PATTERN.test(address);\n      const portTest = Number(port) >= 0 && Number(port) <= 65535;\n      return { invalidAddress: !(addressTest && portTest) };\n    };\n  }\n\n  /**\n   * Validator function to validate endpoints, allowing FQDN, IPv4, and IPv6 addresses with ports.\n   * Accepts multiple endpoints separated by commas.\n   */\n  static url(control: AbstractControl): ValidationErrors | null {\n    const value = control.value;\n\n    if (_.isEmpty(value)) {\n      return null;\n    }\n\n    const urls = value.includes(',') ? value.split(',') : [value];\n\n    const invalidUrls = urls.filter(\n      (url: string) =>\n        !validator.isURL(url, {\n          require_protocol: true,\n          allow_underscores: true,\n          require_tld: false\n        }) && !validator.isIP(url)\n    );\n\n    return invalidUrls.length > 0 ? { invalidURL: true } : null;\n  }\n}\n","<div class=\"cd-col-form\">\n  <div class=\"card pb-0\"\n       *ngIf=\"formUISchema$ | async as formUISchema\">\n    <div i18n=\"form title\"\n         class=\"card-header\">{{ formUISchema.title }}</div>\n    <form *ngIf=\"formUISchema.uiSchema\"\n          [formGroup]=\"form\"\n          (ngSubmit)=\"submit(model, formUISchema.taskInfo)\">\n\n      <div class=\"card-body position-relative\">\n        <formly-form [form]=\"form\"\n                     [fields]=\"formUISchema.controlSchema\"\n                     [model]=\"model\"\n                     [options]=\"{formState: formUISchema.uiSchema}\"></formly-form>\n      </div>\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit(model, formUISchema.taskInfo)\"\n                              [form]=\"formDir\"\n                              [submitText]=\"formUISchema.title\"\n                              [disabled]=\"!form.valid\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataGatewayService } from '~/app/shared/services/data-gateway.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Location } from '@angular/common';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { mergeMap } from 'rxjs/operators';\nimport { CrudTaskInfo, JsonFormUISchema } from './crud-form.model';\nimport { Observable } from 'rxjs';\nimport _ from 'lodash';\nimport { CdTableSelection } from '../../models/cd-table-selection';\n\n@Component({\n  selector: 'cd-crud-form',\n  templateUrl: './crud-form.component.html',\n  styleUrls: ['./crud-form.component.scss']\n})\nexport class CrudFormComponent implements OnInit {\n  model: any = {};\n  resource: string;\n  task: { message: string; id: string } = { message: '', id: '' };\n  form = new UntypedFormGroup({});\n  formUISchema$: Observable<JsonFormUISchema>;\n  methodType: string;\n  urlFormName: string;\n  key: string = '';\n  selected: CdTableSelection;\n\n  constructor(\n    private dataGatewayService: DataGatewayService,\n    private activatedRoute: ActivatedRoute,\n    private taskWrapper: TaskWrapperService,\n    private location: Location,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParamMap.subscribe((paramMap) => {\n      this.formUISchema$ = this.activatedRoute.data.pipe(\n        mergeMap((data: any) => {\n          this.resource = data.resource || this.resource;\n          const url = '/' + this.activatedRoute.snapshot.url.join('/');\n          const key = paramMap.get('key') || '';\n          return this.dataGatewayService.form(`ui-${this.resource}`, url, key);\n        })\n      );\n      this.formUISchema$.subscribe((data: any) => {\n        this.methodType = data.methodType;\n        this.model = data.model;\n      });\n      this.urlFormName = this.router.url.split('/').pop();\n      // remove optional arguments\n      const paramIndex = this.urlFormName.indexOf('?');\n      if (paramIndex > 0) {\n        this.urlFormName = this.urlFormName.substring(0, paramIndex);\n      }\n    });\n  }\n\n  async readFileAsText(file: File): Promise<string> {\n    let fileReader = new FileReader();\n    let text: string = '';\n    await new Promise((resolve) => {\n      fileReader.onload = (_) => {\n        text = fileReader.result.toString();\n        resolve(true);\n      };\n      fileReader.readAsText(file);\n    });\n    return text;\n  }\n\n  async preSubmit(data: { [name: string]: any }) {\n    for (const [key, value] of Object.entries(data)) {\n      if (value instanceof FileList) {\n        let file = value[0];\n        let text = await this.readFileAsText(file);\n        data[key] = text;\n      }\n    }\n  }\n\n  async submit(data: { [name: string]: any }, taskInfo: CrudTaskInfo) {\n    if (data) {\n      let taskMetadata = {};\n      _.forEach(taskInfo.metadataFields, (field) => {\n        taskMetadata[field] = data[field];\n      });\n      taskMetadata['__message'] = taskInfo.message;\n      await this.preSubmit(data);\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask(`crud-component/${this.urlFormName}`, taskMetadata),\n          call: this.dataGatewayService.submit(this.resource, data, this.methodType)\n        })\n        .subscribe({\n          complete: () => {\n            this.location.back();\n          }\n        });\n    }\n  }\n}\n","<div class=\"mb-3\">\n  <legend *ngIf=\"props.label\"\n          class=\"cd-header mt-1\"\n          i18n>{{ props.label }}</legend>\n  <p *ngIf=\"props.description\"\n     i18n>{{ props.description }}</p>\n\n  <div *ngFor=\"let field of field.fieldGroup; let i = index\"\n       class=\"d-flex\">\n    <formly-field class=\"col\"\n                  [field]=\"field\"></formly-field>\n    <div class=\"action-btn\">\n      <button class=\"btn btn-light ms-1\"\n              type=\"button\"\n              (click)=\"addWrapper()\">\n        <i [ngClass]=\"icons.add\"></i>\n      </button>\n      <button class=\"btn btn-light ms-1\"\n              type=\"button\"\n              (click)=\"remove(i)\"\n              *ngIf=\"field.props.removable !== false\">\n        <i [ngClass]=\"icons.trash\"></i>\n      </button>\n    </div>\n  </div>\n  <div *ngIf=\"field.fieldGroup.length === 0\"\n       class=\"text-right\">\n    <button class=\"btn btn-light\"\n            type=\"button\"\n            (click)=\"addWrapper()\"\n            i18n>\n      <i [ngClass]=\"icons.add\"></i>\n      Add {{ props.label }}\n    </button>\n  </div>\n\n  <span class=\"invalid-feedback\"\n        role=\"alert\"\n        *ngIf=\"showError && formControl.errors\">\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </span>\n</div>\n","/**  Copyright 2021 Formly. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at https://github.com/ngx-formly/ngx-formly/blob/main/LICENSE */\n\nimport { Component, OnInit } from '@angular/core';\nimport { FieldArrayType } from '@ngx-formly/core';\nimport { forEach } from 'lodash';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-formly-array-type',\n  templateUrl: './formly-array-type.component.html',\n  styleUrls: ['./formly-array-type.component.scss']\n})\nexport class FormlyArrayTypeComponent extends FieldArrayType implements OnInit {\n  icons = Icons;\n\n  ngOnInit(): void {\n    this.propagateTemplateOptions();\n  }\n\n  addWrapper() {\n    this.add();\n    this.propagateTemplateOptions();\n  }\n\n  propagateTemplateOptions() {\n    forEach(this.field.fieldGroup, (field) => {\n      if (field.type == 'object') {\n        field.props.templateOptions = this.props.templateOptions.objectTemplateOptions;\n      }\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\n\n@Component({\n  selector: 'cd-formly-input-type',\n  templateUrl: './formly-input-type.component.html',\n  styleUrls: ['./formly-input-type.component.scss']\n})\nexport class FormlyInputTypeComponent extends FieldType<FieldTypeConfig> {}\n","<input [formControl]=\"formControl\"\n       [formlyAttributes]=\"field\"\n       class=\"form-control col-form-input\"/>\n","<div class=\"mb-3\">\n  <legend *ngIf=\"props.label\"\n          class=\"cd-col-form-label\"\n          i18n>{{ props.label }}</legend>\n  <p *ngIf=\"props.description\"\n     i18n>{{ props.description }}</p>\n  <div class=\"alert alert-danger\"\n       role=\"alert\"\n       *ngIf=\"showError && formControl.errors\">\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n  <div [ngClass]=\"inputClass\">\n    <formly-field *ngFor=\"let f of field.fieldGroup\"\n                  [field]=\"f\"\n                  class=\"flex-grow-1\"></formly-field>\n  </div>\n</div>\n","/**  Copyright 2021 Formly. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at https://github.com/ngx-formly/ngx-formly/blob/main/LICENSE */\n\nimport { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'cd-formly-object-type',\n  templateUrl: './formly-object-type.component.html',\n  styleUrls: ['./formly-object-type.component.scss']\n})\nexport class FormlyObjectTypeComponent extends FieldType {\n  get inputClass(): string {\n    const layoutType = this.props.templateOptions?.layoutType;\n    const defaultFlexClasses = 'd-flex justify-content-center align-content-stretch gap-3';\n    if (layoutType == 'row') {\n      return defaultFlexClasses + ' flex-row';\n    }\n    return defaultFlexClasses + ' flex-column';\n  }\n}\n","import { AbstractControl } from '@angular/forms';\n\nexport function formlyAsyncFileValidator(control: AbstractControl): Promise<any> {\n  return new Promise((resolve, _reject) => {\n    if (control.value instanceof FileList) {\n      control.value;\n      let file = control.value[0];\n      if (file.size > 4096) {\n        resolve({ file_size: true });\n      }\n      resolve(null);\n    }\n    resolve({ not_a_file: true });\n  });\n}\n","import { AbstractControl } from '@angular/forms';\n\nexport function formlyAsyncJsonValidator(control: AbstractControl): Promise<any> {\n  return new Promise((resolve, _reject) => {\n    try {\n      JSON.parse(control.value);\n      resolve(null);\n    } catch (e) {\n      resolve({ json: true });\n    }\n  });\n}\n","import { AbstractControl } from '@angular/forms';\n\nexport function formlyRgwRolePath(control: AbstractControl): Promise<any> {\n  return new Promise((resolve, _reject) => {\n    if (control.value.match('^((\\u002F)|(\\u002F[\\u0021-\\u007E]+\\u002F))$')) {\n      resolve(null);\n    }\n    resolve({ rgwRolePath: true });\n  });\n}\n\nexport function formlyRgwRoleNameValidator(control: AbstractControl): Promise<any> {\n  return new Promise((resolve, _reject) => {\n    if (control.value.match('^[0-9a-zA-Z_+=,.@-]+$')) {\n      resolve(null);\n    }\n    resolve({ rgwRoleName: true });\n  });\n}\n\nexport function formlyFormNumberValidator(control: AbstractControl): Promise<any> {\n  return new Promise((resolve, _reject) => {\n    if (control.value.match('^[0-9.]+$')) {\n      if (control.value <= 12 && control.value >= 1) resolve(null);\n    }\n    resolve({ rgwRoleSessionDuration: true });\n  });\n}\n","import { ValidatorFn } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { forEach } from 'lodash';\nimport { formlyAsyncFileValidator } from './validators/file-validator';\nimport { formlyAsyncJsonValidator } from './validators/json-validator';\nimport {\n  formlyFormNumberValidator,\n  formlyRgwRoleNameValidator,\n  formlyRgwRolePath\n} from './validators/rgw-role-validator';\n\nexport function getFieldState(field: FormlyFieldConfig, uiSchema: any[] = undefined) {\n  const formState: any[] = uiSchema || field.options?.formState;\n  if (formState) {\n    return formState.find((element) => element.key == field.key);\n  }\n  return {};\n}\n\nexport function setupValidators(field: FormlyFieldConfig, uiSchema: any[]) {\n  const fieldState = getFieldState(field, uiSchema);\n  let validators: ValidatorFn[] = [];\n  forEach(fieldState.validators, (validatorStr) => {\n    switch (validatorStr) {\n      case 'json': {\n        validators.push(formlyAsyncJsonValidator);\n        break;\n      }\n      case 'rgwRoleName': {\n        validators.push(formlyRgwRoleNameValidator);\n        break;\n      }\n      case 'rgwRolePath': {\n        validators.push(formlyRgwRolePath);\n        break;\n      }\n      case 'file': {\n        validators.push(formlyAsyncFileValidator);\n        break;\n      }\n      case 'rgwRoleSessionDuration': {\n        validators.push(formlyFormNumberValidator);\n        break;\n      }\n    }\n  });\n  field.asyncValidators = { validation: validators };\n}\n","import { IndividualConfig } from 'ngx-toastr';\n\nimport { Icons } from '../enum/icons.enum';\nimport { NotificationType } from '../enum/notification-type.enum';\n\nexport class CdNotificationConfig {\n  applicationClass: string;\n  isFinishedTask = false;\n\n  private classes = {\n    Ceph: 'ceph-icon',\n    Prometheus: 'prometheus-icon'\n  };\n\n  constructor(\n    public type: NotificationType = NotificationType.info,\n    public title?: string,\n    public message?: string, // Use this for additional information only\n    public options?: any | IndividualConfig,\n    public application: string = 'Ceph'\n  ) {\n    this.applicationClass = this.classes[this.application];\n  }\n}\n\nexport class CdNotification extends CdNotificationConfig {\n  timestamp: string;\n  textClass: string;\n  iconClass: string;\n  duration: number;\n  borderClass: string;\n  alertSilenced = false;\n  silenceId?: string;\n\n  private textClasses = ['text-danger', 'text-info', 'text-success'];\n  private iconClasses = [Icons.warning, Icons.info, Icons.check];\n  private borderClasses = ['border-danger', 'border-info', 'border-success'];\n\n  constructor(private config: CdNotificationConfig = new CdNotificationConfig()) {\n    super(config.type, config.title, config.message, config.options, config.application);\n    delete this.config;\n    /* string representation of the Date object so it can be directly compared\n    with the timestamps parsed from localStorage */\n    this.timestamp = new Date().toJSON();\n    this.iconClass = this.iconClasses[this.type];\n    this.textClass = this.textClasses[this.type];\n    this.borderClass = this.borderClasses[this.type];\n    this.isFinishedTask = config.isFinishedTask;\n  }\n}\n","export class CdPwdExpirationSettings {\n  pwdExpirationSpan = 0;\n  pwdExpirationWarning1: number;\n  pwdExpirationWarning2: number;\n\n  constructor(settings: { [key: string]: any }) {\n    this.pwdExpirationSpan = settings.user_pwd_expiration_span;\n    this.pwdExpirationWarning1 = settings.user_pwd_expiration_warning_1;\n    this.pwdExpirationWarning2 = settings.user_pwd_expiration_warning_2;\n  }\n}\n","export const PAGE_LIMIT = 10;\n\nexport class PageInfo {\n  // Total number of rows in a table\n  count: number;\n\n  // Current page (current row = offset x limit or pageSize)\n  offset = 0;\n\n  // Max. number of rows fetched from the server\n  limit: number = PAGE_LIMIT;\n\n  /*\n  pageSize and limit can be decoupled if hybrid server-side and client-side\n  are used. A use-case would be to reduce the amount of queries: that is,\n  the pageSize (client-side paging) might be 10, but the back-end queries\n  could have a limit of 100. That would avoid triggering requests\n  */\n  pageSize: number = PAGE_LIMIT;\n}\n","import { HttpParams } from '@angular/common/http';\n\nimport { PageInfo } from './cd-table-paging';\n\nexport class CdTableFetchDataContext {\n  errorConfig = {\n    resetData: true, // Force data table to show no data\n    displayError: true // Show an error panel above the data table\n  };\n\n  /**\n   * The function that should be called from within the error handler\n   * of the 'fetchData' function to display the error panel and to\n   * reset the data table to the correct state.\n   */\n  error: Function;\n  pageInfo: PageInfo = new PageInfo();\n  search = '';\n  sort = '+name';\n\n  constructor(error?: () => void) {\n    this.error = error;\n  }\n\n  toParams(): HttpParams {\n    if (Number.isNaN(this.pageInfo.offset)) {\n      this.pageInfo.offset = 0;\n    }\n\n    if (this.pageInfo.limit === null) {\n      this.pageInfo.limit = 0;\n    }\n\n    if (!this.search) {\n      this.search = '';\n    }\n\n    if (!this.sort || this.sort.length < 2) {\n      this.sort = '+name';\n    }\n\n    return new HttpParams({\n      fromObject: {\n        offset: String(this.pageInfo.offset * this.pageInfo.limit),\n        limit: String(this.pageInfo.limit),\n        search: this.search,\n        sort: this.sort\n      }\n    });\n  }\n}\n","export class CdTableSelection {\n  private _selected: any[] = [];\n  hasMultiSelection: boolean;\n  hasSingleSelection: boolean;\n  hasSelection: boolean;\n\n  constructor(rows?: any[]) {\n    if (rows) {\n      this._selected = rows;\n    }\n    this.update();\n  }\n\n  /**\n   * Recalculate the variables based on the current number\n   * of selected rows.\n   */\n  private update() {\n    this.hasSelection = this._selected.length > 0;\n    this.hasSingleSelection = this._selected.length === 1;\n    this.hasMultiSelection = this._selected.length > 1;\n  }\n\n  set selected(selection: any[]) {\n    this._selected = selection;\n    this.update();\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  add(row: any) {\n    this._selected.push(row);\n    this.update();\n  }\n\n  /**\n   * Get the first selected row.\n   * @return {any | null}\n   */\n  first() {\n    return this.hasSelection ? this._selected[0] : null;\n  }\n}\n","import { ElementRef } from '@angular/core';\n\nexport class ChartTooltip {\n  tooltipEl: any;\n  chartEl: any;\n  getStyleLeft: Function;\n  getStyleTop: Function;\n  customColors: Record<string, any> = {\n    backgroundColor: undefined,\n    borderColor: undefined\n  };\n  checkOffset = false;\n\n  /**\n   * Creates an instance of ChartTooltip.\n   * @param {ElementRef} chartCanvas Canvas Element\n   * @param {ElementRef} chartTooltip Tooltip Element\n   * @param {Function} getStyleLeft Function that calculates the value of Left\n   * @param {Function} getStyleTop Function that calculates the value of Top\n   * @memberof ChartTooltip\n   */\n  constructor(\n    chartCanvas: ElementRef,\n    chartTooltip: ElementRef,\n    getStyleLeft: Function,\n    getStyleTop: Function\n  ) {\n    this.chartEl = chartCanvas.nativeElement;\n    this.getStyleLeft = getStyleLeft;\n    this.getStyleTop = getStyleTop;\n    this.tooltipEl = chartTooltip.nativeElement;\n  }\n\n  /**\n   * Implementation of a ChartJS custom tooltip function.\n   *\n   * @param {any} tooltip\n   * @memberof ChartTooltip\n   */\n  customTooltips(context: any) {\n    const tooltip = context.tooltip;\n    // Hide if no tooltip\n    if (tooltip.opacity === 0) {\n      this.tooltipEl.style.opacity = 0;\n      return;\n    }\n\n    // Set caret Position\n    this.tooltipEl.classList.remove('above', 'below', 'no-transform');\n    if (tooltip.yAlign) {\n      this.tooltipEl.classList.add(tooltip.yAlign);\n    } else {\n      this.tooltipEl.classList.add('no-transform');\n    }\n\n    // Set Text\n    if (tooltip.body) {\n      const titleLines = tooltip.title || [];\n      const bodyLines = tooltip.body.map((bodyItem: any) => {\n        return bodyItem.lines;\n      });\n\n      let innerHtml = '<thead>';\n\n      titleLines.forEach((title: string) => {\n        innerHtml += '<tr><th>' + this.getTitle(title) + '</th></tr>';\n      });\n      innerHtml += '</thead><tbody>';\n\n      bodyLines.forEach((body: string, i: number) => {\n        const colors = tooltip.labelColors[i];\n        let style = 'background:' + (this.customColors.backgroundColor || colors.backgroundColor);\n        style += '; border-color:' + (this.customColors.borderColor || colors.borderColor);\n        style += '; border-width: 2px';\n        const span = '<span class=\"chartjs-tooltip-key\" style=\"' + style + '\"></span>';\n        innerHtml += '<tr><td nowrap>' + span + this.getBody(body) + '</td></tr>';\n      });\n      innerHtml += '</tbody>';\n\n      const tableRoot = this.tooltipEl.querySelector('table');\n      tableRoot.innerHTML = innerHtml;\n    }\n\n    const positionY = this.chartEl.offsetTop;\n    const positionX = this.chartEl.offsetLeft;\n\n    // Display, position, and set styles for font\n    if (this.checkOffset) {\n      const halfWidth = tooltip.width / 2;\n      this.tooltipEl.classList.remove('transform-left');\n      this.tooltipEl.classList.remove('transform-right');\n      if (tooltip.caretX - halfWidth < 0) {\n        this.tooltipEl.classList.add('transform-left');\n      } else if (tooltip.caretX + halfWidth > this.chartEl.width) {\n        this.tooltipEl.classList.add('transform-right');\n      }\n    }\n\n    this.tooltipEl.style.left = this.getStyleLeft(tooltip, positionX);\n    this.tooltipEl.style.top = this.getStyleTop(tooltip, positionY);\n\n    this.tooltipEl.style.opacity = 1;\n    this.tooltipEl.style.fontFamily = tooltip._fontFamily;\n    this.tooltipEl.style.fontSize = tooltip.fontSize;\n    this.tooltipEl.style.fontStyle = tooltip._fontStyle;\n    this.tooltipEl.style.padding = 6 + 'px ' + 6 + 'px';\n  }\n\n  getBody(body: string) {\n    return body;\n  }\n\n  getTitle(title: string) {\n    return title;\n  }\n}\n","export enum RbdConfigurationSourceField {\n  global = 0,\n  pool = 1,\n  image = 2\n}\n\nexport enum RbdConfigurationType {\n  bps,\n  iops,\n  milliseconds\n}\n\n/**\n * This configuration can also be set on a pool level.\n */\nexport interface RbdConfigurationEntry {\n  name: string;\n  source: RbdConfigurationSourceField;\n  value: any;\n  type?: RbdConfigurationType; // Non-external field.\n  description?: string; // Non-external field.\n  displayName?: string; // Non-external field. Nice name for the UI which is added in the UI.\n}\n\n/**\n * This object contains additional information injected into the elements retrieved by the service.\n */\nexport interface RbdConfigurationExtraField {\n  name: string;\n  displayName: string;\n  description: string;\n  type: RbdConfigurationType;\n  readOnly?: boolean;\n}\n\n/**\n * Represents a set of data to be used for editing or creating configuration options\n */\nexport interface RbdConfigurationSection {\n  heading: string;\n  class: string;\n  options: RbdConfigurationExtraField[];\n}\n","import { Task } from './task';\n\nexport class ExecutingTask extends Task {\n  begin_time: number;\n  progress: number;\n}\n","import { Task } from './task';\nimport { TaskException } from './task-exception';\n\nexport class FinishedTask extends Task {\n  begin_time: string;\n  end_time: string;\n  exception: TaskException;\n  latency: number;\n  progress: number;\n  ret_value: any;\n  success: boolean;\n  duration: number;\n\n  errorMessage: string;\n}\n","export class ImageSpec {\n  static fromString(imageSpec: string) {\n    const imageSpecSplit = imageSpec.split('/');\n\n    const poolName = imageSpecSplit[0];\n    const namespace = imageSpecSplit.length >= 3 ? imageSpecSplit[1] : null;\n    const imageName = imageSpecSplit.length >= 3 ? imageSpecSplit[2] : imageSpecSplit[1];\n\n    return new this(poolName, namespace, imageName);\n  }\n\n  constructor(public poolName: string, public namespace: string, public imageName: string) {}\n\n  private getNameSpace() {\n    return this.namespace ? `${this.namespace}/` : '';\n  }\n\n  toString() {\n    return `${this.poolName}/${this.getNameSpace()}${this.imageName}`;\n  }\n\n  toStringEncoded() {\n    return encodeURIComponent(`${this.poolName}/${this.getNameSpace()}${this.imageName}`);\n  }\n}\n","export class Task {\n  constructor(name?: string, metadata?: object) {\n    this.name = name;\n    this.metadata = metadata;\n  }\n  name: string;\n  metadata: object;\n\n  description: string;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n/**\n * Convert the given value to an array.\n */\n@Pipe({\n  name: 'array'\n})\nexport class ArrayPipe implements PipeTransform {\n  /**\n   * Convert the given value into an array. If the value is already an\n   * array, then nothing happens, except the `force` flag is set.\n   * @param value The value to process.\n   * @param force Convert the specified value to an array, either it is\n   *              already an array.\n   */\n  transform(value: any, force = false): any[] {\n    let result = value;\n    if (!_.isArray(value) || (_.isArray(value) && force)) {\n      result = [value];\n    }\n    return result;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'booleanText'\n})\nexport class BooleanTextPipe implements PipeTransform {\n  transform(\n    value: any,\n    truthyText: string = $localize`Yes`,\n    falsyText: string = $localize`No`\n  ): string {\n    return Boolean(value) ? truthyText : falsyText;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Convert the given value to a boolean value.\n */\n@Pipe({\n  name: 'boolean'\n})\nexport class BooleanPipe implements PipeTransform {\n  transform(value: any): boolean {\n    let result = false;\n    switch (value) {\n      case true:\n      case 1:\n      case 'y':\n      case 'yes':\n      case 't':\n      case 'true':\n      case 'on':\n      case '1':\n        result = true;\n        break;\n    }\n    return result;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport _ from 'lodash';\nimport moment from 'moment';\n\n@Pipe({\n  name: 'cdDate'\n})\nexport class CdDatePipe implements PipeTransform {\n  constructor() {}\n\n  transform(value: any): any {\n    if (value === null || value === '') {\n      return '';\n    }\n    let date: string;\n    const offset = moment().utcOffset();\n    if (_.isNumber(value)) {\n      date = moment\n        .parseZone(moment.unix(value))\n        .utc()\n        .utcOffset(offset)\n        .local()\n        .format('D/M/YY hh:mm A');\n    } else {\n      value = value?.replace?.('Z', '');\n      date = moment.parseZone(value).utc().utcOffset(offset).local().format('D/M/YY hh:mm A');\n    }\n    return date;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cephReleaseName'\n})\nexport class CephReleaseNamePipe implements PipeTransform {\n  transform(value: any): any {\n    // Expect \"ceph version 13.1.0-419-g251e2515b5\n    //         (251e2515b563856349498c6caf34e7a282f62937) nautilus (dev)\"\n    const result = /ceph version\\s+[^ ]+\\s+\\(.+\\)\\s+(.+)\\s+\\((.+)\\)/.exec(value);\n    if (result) {\n      if (result[2] === 'dev') {\n        // Assume this is actually main\n        return 'main';\n      } else {\n        // Return the \"nautilus\" part\n        return result[1];\n      }\n    } else {\n      // Unexpected format, pass it through\n      return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cephShortVersion'\n})\nexport class CephShortVersionPipe implements PipeTransform {\n  transform(value: any): any {\n    // Expect \"ceph version 1.2.3-g9asdasd (as98d7a0s8d7)\"\n    const result = /ceph version\\s+([^ ]+)\\s+\\(.+\\)/.exec(value);\n    if (result) {\n      // Return the \"1.2.3-g9asdasd\" part\n      return result[1];\n    } else {\n      // Unexpected format, pass it through\n      return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Pipe({\n  name: 'dimlessBinaryPerMinute'\n})\nexport class DimlessBinaryPerMinutePipe implements PipeTransform {\n  constructor(private formatter: FormatterService) {}\n\n  transform(value: any, decimals: number = 1): any {\n    return this.formatter.format_number(\n      value,\n      1024,\n      ['B/m', 'KiB/m', 'MiB/m', 'GiB/m', 'TiB/m', 'PiB/m', 'EiB/m', 'ZiB/m', 'YiB/m'],\n      decimals\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Pipe({\n  name: 'dimlessBinaryPerSecond'\n})\nexport class DimlessBinaryPerSecondPipe implements PipeTransform {\n  constructor(private formatter: FormatterService) {}\n\n  transform(value: any, decimals: number = 1): any {\n    return this.formatter.format_number(\n      value,\n      1024,\n      ['B/s', 'KiB/s', 'MiB/s', 'GiB/s', 'TiB/s', 'PiB/s', 'EiB/s', 'ZiB/s', 'YiB/s'],\n      decimals\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Pipe({\n  name: 'dimlessBinary'\n})\nexport class DimlessBinaryPipe implements PipeTransform {\n  constructor(private formatter: FormatterService) {}\n\n  transform(value: any, decimals: number = 1): any {\n    return this.formatter.format_number(\n      value,\n      1024,\n      ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n      decimals\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Pipe({\n  name: 'dimless'\n})\nexport class DimlessPipe implements PipeTransform {\n  constructor(private formatter: FormatterService) {}\n\n  transform(value: any, decimals: number = 1): any {\n    return this.formatter.format_number(\n      value,\n      1000,\n      ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'],\n      decimals\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'duration',\n  pure: false\n})\nexport class DurationPipe implements PipeTransform {\n  /**\n   * Translates seconds into human readable format of seconds, minutes, hours, days, and years\n   * source: https://stackoverflow.com/a/34270811\n   *\n   * @param  {number} seconds The number of seconds to be processed\n   * @return {string}         The phrase describing the amount of time\n   */\n  transform(seconds: number): string {\n    if (seconds === null || seconds <= 0) {\n      return '';\n    }\n    const levels = [\n      [`${Math.floor(seconds / 31536000)}`, 'years'],\n      [`${Math.floor((seconds % 31536000) / 86400)}`, 'days'],\n      [`${Math.floor((seconds % 86400) / 3600)}`, 'hours'],\n      [`${Math.floor((seconds % 3600) / 60)}`, 'minutes'],\n      [`${Math.floor(seconds % 60)}`, 'seconds']\n    ];\n    let returntext = '';\n\n    for (let i = 0, max = levels.length; i < max; i++) {\n      if (levels[i][0] === '0') {\n        continue;\n      }\n      returntext +=\n        ' ' +\n        levels[i][0] +\n        ' ' +\n        (levels[i][0] === '1' ? levels[i][1].substr(0, levels[i][1].length - 1) : levels[i][1]);\n    }\n    return returntext.trim() || '1 second';\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'empty'\n})\nexport class EmptyPipe implements PipeTransform {\n  transform(value: any): any {\n    if (_.isUndefined(value) || _.isNull(value)) {\n      return '-';\n    } else if (_.isNaN(value)) {\n      return 'N/A';\n    }\n    return value;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HealthIcon } from '../enum/health-icon.enum';\n\n@Pipe({\n  name: 'healthIcon'\n})\nexport class HealthIconPipe implements PipeTransform {\n  transform(value: string): string {\n    return Object.keys(HealthIcon).includes(value as HealthIcon) ? HealthIcon[value] : '';\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'iops'\n})\nexport class IopsPipe implements PipeTransform {\n  transform(value: any): any {\n    return `${value} IOPS`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'iscsiBackstore'\n})\nexport class IscsiBackstorePipe implements PipeTransform {\n  transform(value: any): any {\n    switch (value) {\n      case 'user:rbd':\n        return 'user:rbd (tcmu-runner)';\n      default:\n        return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'join'\n})\nexport class JoinPipe implements PipeTransform {\n  transform(value: Array<any>): string {\n    return value.join(', ');\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'logPriority'\n})\nexport class LogPriorityPipe implements PipeTransform {\n  transform(value: any): any {\n    if (value === '[DBG]') {\n      return 'debug';\n    } else if (value === '[INF]') {\n      return 'info';\n    } else if (value === '[WRN]') {\n      return 'warn';\n    } else if (value === '[ERR]') {\n      return 'err';\n    } else {\n      return ''; // Inherit\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'map'\n})\nexport class MapPipe implements PipeTransform {\n  transform(value: string | number, map?: object): any {\n    if (!_.isPlainObject(map)) {\n      return value;\n    }\n    return _.get(map, value, value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'mbpersecond'\n})\nexport class MbpersecondPipe implements PipeTransform {\n  transform(value: any): any {\n    return `${value} MB/s`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'mdsSummary'\n})\nexport class MdsSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return null;\n    }\n\n    let activeCount = 0;\n    let standbyCount = 0;\n    let standbys = 0;\n    let active = 0;\n    let standbyReplay = 0;\n    _.each(value.standbys, () => {\n      standbys += 1;\n    });\n\n    if (value.standbys && !value.filesystems) {\n      standbyCount = standbys;\n      activeCount = 0;\n    } else if (value.filesystems.length === 0) {\n      activeCount = 0;\n    } else {\n      _.each(value.filesystems, (fs) => {\n        _.each(fs.mdsmap.info, (mds) => {\n          if (mds.state === 'up:standby-replay') {\n            standbyReplay += 1;\n          } else {\n            active += 1;\n          }\n        });\n      });\n\n      activeCount = active;\n      standbyCount = standbys + standbyReplay;\n    }\n    const totalCount = activeCount + standbyCount;\n    const mdsSummary = {\n      success: activeCount,\n      info: standbyCount,\n      total: totalCount\n    };\n\n    return mdsSummary;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'mgrSummary'\n})\nexport class MgrSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return null;\n    }\n\n    let activeCount: number;\n    const activeTitleText = _.isUndefined(value.active_name)\n      ? ''\n      : `${$localize`active daemon`}: ${value.active_name}`;\n    // There is always one standbyreplay to replace active daemon, if active one is down\n    if (activeTitleText.length > 0) {\n      activeCount = 1;\n    }\n    const standbyCount = value.standbys.length;\n    const totalCount = activeCount + standbyCount;\n\n    const mgrSummary = {\n      success: activeCount,\n      info: standbyCount,\n      total: totalCount\n    };\n\n    return mgrSummary;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'milliseconds'\n})\nexport class MillisecondsPipe implements PipeTransform {\n  transform(value: any): any {\n    return `${value} ms`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'notAvailable'\n})\nexport class NotAvailablePipe implements PipeTransform {\n  transform(value: any, text?: string): any {\n    if (value === '') {\n      return _.defaultTo(text, $localize`n/a`);\n    }\n    return value;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'octalToHumanReadable'\n})\nexport class OctalToHumanReadablePipe implements PipeTransform {\n  transform(value: number, toTableArray = false): any {\n    if (!value) {\n      return [];\n    }\n    const permissionSummary = [];\n    const permissions = ['---', '--x', '-w-', '-wx', 'r--', 'r-x', 'rw-', 'rwx'];\n    const octal = value.toString(8).padStart(7, '0');\n    const digits = octal.split('');\n\n    const fileType = this.getFileTypeSymbol(parseInt(digits[1] + digits[2]));\n    const owner = permissions[parseInt(digits[4])];\n    const group = permissions[parseInt(digits[5])];\n    const others = permissions[parseInt(digits[6])];\n\n    if (toTableArray) {\n      return {\n        owner: this.getItem(owner),\n        group: this.getItem(group),\n        others: this.getItem(others)\n      };\n    }\n\n    if (fileType !== 'directory') {\n      permissionSummary.push({\n        content: fileType,\n        class: 'badge-primary me-1'\n      });\n    }\n\n    if (owner !== '---') {\n      permissionSummary.push({\n        content: `owner: ${owner}`,\n        class: 'badge-primary me-1'\n      });\n    }\n\n    if (group !== '---') {\n      permissionSummary.push({\n        content: `group: ${group}`,\n        class: 'badge-primary me-1'\n      });\n    }\n\n    if (others !== '---') {\n      permissionSummary.push({\n        content: `others: ${others}`,\n        class: 'badge-primary me-1'\n      });\n    }\n\n    if (permissionSummary.length === 0) {\n      return [\n        {\n          content: 'no permissions',\n          class: 'badge-warning me-1',\n          toolTip: `owner: ${owner}, group: ${group}, others: ${others}`\n        }\n      ];\n    }\n\n    return permissionSummary;\n  }\n\n  private getFileTypeSymbol(fileType: number): string {\n    switch (fileType) {\n      case 1:\n        return 'fifo';\n      case 2:\n        return 'character';\n      case 4:\n        return 'directory';\n      case 6:\n        return 'block';\n      case 10:\n        return 'regular';\n      case 12:\n        return 'symbolic-link';\n      default:\n        return '-';\n    }\n  }\n\n  private getItem(item: string) {\n    const returnlist = [];\n    if (item.includes('r')) returnlist.push('read');\n    if (item.includes('w')) returnlist.push('write');\n    if (item.includes('x')) returnlist.push('execute');\n    return returnlist;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'ordinal'\n})\nexport class OrdinalPipe implements PipeTransform {\n  transform(value: any): any {\n    const num = parseInt(value, 10);\n    if (isNaN(num)) {\n      return value;\n    }\n    return (\n      value +\n      (Math.floor(num / 10) === 1\n        ? 'th'\n        : num % 10 === 1\n        ? 'st'\n        : num % 10 === 2\n        ? 'nd'\n        : num % 10 === 3\n        ? 'rd'\n        : 'th')\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'osdSummary'\n})\nexport class OsdSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return null;\n    }\n\n    let inCount = 0;\n    let upCount = 0;\n    let nearFullCount = 0;\n    let fullCount = 0;\n    _.each(value.osds, (osd) => {\n      if (osd.in) {\n        inCount++;\n      }\n      if (osd.up) {\n        upCount++;\n      }\n      if (osd.state.includes('nearfull')) {\n        nearFullCount++;\n      }\n      if (osd.state.includes('full')) {\n        fullCount++;\n      }\n    });\n\n    const downCount = value.osds.length - upCount;\n    const outCount = value.osds.length - inCount;\n    const osdSummary = {\n      total: value.osds.length,\n      down: downCount,\n      out: outCount,\n      up: upCount,\n      in: inCount,\n      nearfull: nearFullCount,\n      full: fullCount\n    };\n    return osdSummary;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'path'\n})\nexport class PathPipe implements PipeTransform {\n  transform(value: unknown): string {\n    if (!value) return '';\n    const splittedPath = value.toString().split('/');\n\n    if (splittedPath[0] === '') {\n      splittedPath.shift();\n      return `/${splittedPath[0]}/.../${splittedPath[splittedPath.length - 1]}`;\n    }\n    return `${splittedPath[0]}/.../${splittedPath[splittedPath.length - 1]}`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pipeFunction'\n})\nexport class PipeFunctionPipe implements PipeTransform {\n  public transform(value: any, handler: (value: any) => any, context?: any): any {\n    if (context) {\n      return handler.call(context, value);\n    }\n\n    return handler(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'encodeUri'\n})\nexport class EncodeUriPipe implements PipeTransform {\n  transform(value: any): any {\n    return encodeURIComponent(value);\n  }\n}\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ArrayPipe } from './array.pipe';\nimport { BooleanTextPipe } from './boolean-text.pipe';\nimport { BooleanPipe } from './boolean.pipe';\nimport { CdDatePipe } from './cd-date.pipe';\nimport { CephReleaseNamePipe } from './ceph-release-name.pipe';\nimport { CephShortVersionPipe } from './ceph-short-version.pipe';\nimport { DimlessBinaryPerSecondPipe } from './dimless-binary-per-second.pipe';\nimport { DimlessBinaryPipe } from './dimless-binary.pipe';\nimport { DimlessPipe } from './dimless.pipe';\nimport { DurationPipe } from './duration.pipe';\nimport { EmptyPipe } from './empty.pipe';\nimport { EncodeUriPipe } from './encode-uri.pipe';\nimport { FilterPipe } from './filter.pipe';\nimport { HealthColorPipe } from './health-color.pipe';\nimport { HealthIconPipe } from './health-icon.pipe';\nimport { HealthLabelPipe } from './health-label.pipe';\nimport { IopsPipe } from './iops.pipe';\nimport { IscsiBackstorePipe } from './iscsi-backstore.pipe';\nimport { JoinPipe } from './join.pipe';\nimport { LogPriorityPipe } from './log-priority.pipe';\nimport { MapPipe } from './map.pipe';\nimport { MdsSummaryPipe } from './mds-summary.pipe';\nimport { MgrSummaryPipe } from './mgr-summary.pipe';\nimport { MillisecondsPipe } from './milliseconds.pipe';\nimport { NotAvailablePipe } from './not-available.pipe';\nimport { OrdinalPipe } from './ordinal.pipe';\nimport { OsdSummaryPipe } from './osd-summary.pipe';\nimport { RbdConfigurationSourcePipe } from './rbd-configuration-source.pipe';\nimport { RelativeDatePipe } from './relative-date.pipe';\nimport { RoundPipe } from './round.pipe';\nimport { SanitizeHtmlPipe } from './sanitize-html.pipe';\nimport { SearchHighlightPipe } from './search-highlight.pipe';\nimport { TruncatePipe } from './truncate.pipe';\nimport { UpperFirstPipe } from './upper-first.pipe';\nimport { OctalToHumanReadablePipe } from './octal-to-human-readable.pipe';\nimport { PathPipe } from './path.pipe';\nimport { PluralizePipe } from './pluralize.pipe';\nimport { XmlPipe } from './xml.pipe';\nimport { MbpersecondPipe } from './mbpersecond.pipe';\nimport { PipeFunctionPipe } from './pipe-function.pipe';\nimport { DimlessBinaryPerMinutePipe } from './dimless-binary-per-minute.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    ArrayPipe,\n    BooleanPipe,\n    BooleanTextPipe,\n    DimlessBinaryPipe,\n    DimlessBinaryPerSecondPipe,\n    HealthColorPipe,\n    HealthLabelPipe,\n    DimlessPipe,\n    CephShortVersionPipe,\n    CephReleaseNamePipe,\n    RelativeDatePipe,\n    IscsiBackstorePipe,\n    JoinPipe,\n    LogPriorityPipe,\n    FilterPipe,\n    CdDatePipe,\n    EmptyPipe,\n    EncodeUriPipe,\n    RoundPipe,\n    OrdinalPipe,\n    MillisecondsPipe,\n    NotAvailablePipe,\n    IopsPipe,\n    UpperFirstPipe,\n    RbdConfigurationSourcePipe,\n    DurationPipe,\n    MapPipe,\n    TruncatePipe,\n    SanitizeHtmlPipe,\n    SearchHighlightPipe,\n    HealthIconPipe,\n    MgrSummaryPipe,\n    MdsSummaryPipe,\n    OsdSummaryPipe,\n    OctalToHumanReadablePipe,\n    PathPipe,\n    PluralizePipe,\n    XmlPipe,\n    MbpersecondPipe,\n    PipeFunctionPipe,\n    DimlessBinaryPerMinutePipe\n  ],\n  exports: [\n    ArrayPipe,\n    BooleanPipe,\n    BooleanTextPipe,\n    DimlessBinaryPipe,\n    DimlessBinaryPerSecondPipe,\n    HealthColorPipe,\n    HealthLabelPipe,\n    DimlessPipe,\n    CephShortVersionPipe,\n    CephReleaseNamePipe,\n    RelativeDatePipe,\n    IscsiBackstorePipe,\n    JoinPipe,\n    LogPriorityPipe,\n    FilterPipe,\n    CdDatePipe,\n    EmptyPipe,\n    EncodeUriPipe,\n    RoundPipe,\n    OrdinalPipe,\n    MillisecondsPipe,\n    NotAvailablePipe,\n    IopsPipe,\n    UpperFirstPipe,\n    RbdConfigurationSourcePipe,\n    DurationPipe,\n    MapPipe,\n    TruncatePipe,\n    SanitizeHtmlPipe,\n    SearchHighlightPipe,\n    HealthIconPipe,\n    MgrSummaryPipe,\n    MdsSummaryPipe,\n    OsdSummaryPipe,\n    OctalToHumanReadablePipe,\n    PathPipe,\n    PluralizePipe,\n    XmlPipe,\n    MbpersecondPipe,\n    PipeFunctionPipe,\n    DimlessBinaryPerMinutePipe\n  ],\n  providers: [\n    ArrayPipe,\n    BooleanPipe,\n    BooleanTextPipe,\n    DatePipe,\n    CephShortVersionPipe,\n    CephReleaseNamePipe,\n    DimlessBinaryPipe,\n    DimlessBinaryPerSecondPipe,\n    DimlessPipe,\n    RelativeDatePipe,\n    IscsiBackstorePipe,\n    JoinPipe,\n    LogPriorityPipe,\n    CdDatePipe,\n    EmptyPipe,\n    EncodeUriPipe,\n    OrdinalPipe,\n    IopsPipe,\n    MillisecondsPipe,\n    NotAvailablePipe,\n    UpperFirstPipe,\n    DurationPipe,\n    MapPipe,\n    TruncatePipe,\n    SanitizeHtmlPipe,\n    HealthIconPipe,\n    MgrSummaryPipe,\n    MdsSummaryPipe,\n    OsdSummaryPipe,\n    OctalToHumanReadablePipe,\n    MbpersecondPipe,\n    DimlessBinaryPerMinutePipe\n  ]\n})\nexport class PipesModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pluralize'\n})\nexport class PluralizePipe implements PipeTransform {\n  transform(value: string, count?: number): string {\n    if (count <= 1) {\n      return value;\n    }\n    if (value.endsWith('y')) {\n      return value.slice(0, -1) + 'ies';\n    } else {\n      return value + 's';\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nmoment.updateLocale('en', {\n  relativeTime: {\n    future: $localize`in %s`,\n    past: $localize`%s ago`,\n    s: $localize`a few seconds`,\n    ss: $localize`%d seconds`,\n    m: $localize`a minute`,\n    mm: $localize`%d minutes`,\n    h: $localize`an hour`,\n    hh: $localize`%d hours`,\n    d: $localize`a day`,\n    dd: $localize`%d days`,\n    w: $localize`a week`,\n    ww: $localize`%d weeks`,\n    M: $localize`a month`,\n    MM: $localize`%d months`,\n    y: $localize`a year`,\n    yy: $localize`%d years`\n  }\n});\n\n@Pipe({\n  name: 'relativeDate',\n  pure: false\n})\nexport class RelativeDatePipe implements PipeTransform {\n  /**\n   * Convert a time into a human readable form, e.g. '2 minutes ago'.\n   * @param {Date | string | number} value The date to convert, should be\n   *   an ISO8601 string, an Unix timestamp (seconds) or Date object.\n   * @param {boolean} upperFirst Set to `true` to start the sentence\n   *   upper case. Defaults to `true`.\n   * @return {string} The time in human readable form or an empty string\n   *   on failure (e.g. invalid input).\n   */\n  transform(value: Date | string | number, upperFirst = true): string {\n    let date: moment.Moment;\n    const offset = moment().utcOffset();\n    if (_.isNumber(value)) {\n      date = moment.parseZone(moment.unix(value)).utc().utcOffset(offset).local();\n    } else {\n      date = moment.parseZone(value).utc().utcOffset(offset).local();\n    }\n    if (!date.isValid()) {\n      return '';\n    }\n    let relativeDate: string = date.fromNow();\n    if (upperFirst) {\n      relativeDate = _.upperFirst(relativeDate);\n    }\n    return relativeDate;\n  }\n}\n","import { Pipe, PipeTransform, SecurityContext } from '@angular/core';\nimport { DomSanitizer, SafeValue } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'sanitizeHtml'\n})\nexport class SanitizeHtmlPipe implements PipeTransform {\n  constructor(private domSanitizer: DomSanitizer) {}\n\n  transform(value: SafeValue | string | null): string | null {\n    return this.domSanitizer.sanitize(SecurityContext.HTML, value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'truncate'\n})\nexport class TruncatePipe implements PipeTransform {\n  transform(value: any, length: number, omission?: string): any {\n    if (!_.isString(value)) {\n      return value;\n    }\n    omission = _.defaultTo(omission, '');\n    return _.truncate(value, { length, omission });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'upperFirst'\n})\nexport class UpperFirstPipe implements PipeTransform {\n  transform(value: string): string {\n    return _.upperFirst(value);\n  }\n}\n","import { fromEvent, Observable, partition } from 'rxjs';\nimport { repeatWhen, shareReplay, takeUntil } from 'rxjs/operators';\n\nexport function whenPageVisible() {\n  const visibilitychange$ = fromEvent(document, 'visibilitychange').pipe(\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  const [pageVisible$, pageHidden$] = partition(\n    visibilitychange$,\n    () => document.visibilityState === 'visible'\n  );\n\n  return function <T>(source: Observable<T>) {\n    return source.pipe(\n      takeUntil(pageHidden$),\n      repeatWhen(() => pageVisible$)\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthStorageService } from './auth-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService {\n  constructor(private router: Router, private authStorageService: AuthStorageService) {}\n\n  canActivate(_route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authStorageService.isLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.canActivate(childRoute, state);\n  }\n}\n","export class Permission {\n  read: boolean;\n  create: boolean;\n  update: boolean;\n  delete: boolean;\n\n  constructor(serverPermission: Array<string> = []) {\n    ['read', 'create', 'update', 'delete'].forEach(\n      (permission) => (this[permission] = serverPermission.includes(permission))\n    );\n  }\n}\n\nexport class Permissions {\n  hosts: Permission;\n  configOpt: Permission;\n  pool: Permission;\n  osd: Permission;\n  monitor: Permission;\n  rbdImage: Permission;\n  iscsi: Permission;\n  nvmeof: Permission;\n  rbdMirroring: Permission;\n  rgw: Permission;\n  cephfs: Permission;\n  manager: Permission;\n  log: Permission;\n  user: Permission;\n  grafana: Permission;\n  prometheus: Permission;\n  nfs: Permission;\n  smb: Permission;\n\n  constructor(serverPermissions: any) {\n    this.hosts = new Permission(serverPermissions['hosts']);\n    this.configOpt = new Permission(serverPermissions['config-opt']);\n    this.pool = new Permission(serverPermissions['pool']);\n    this.osd = new Permission(serverPermissions['osd']);\n    this.monitor = new Permission(serverPermissions['monitor']);\n    this.rbdImage = new Permission(serverPermissions['rbd-image']);\n    this.iscsi = new Permission(serverPermissions['iscsi']);\n    this.nvmeof = new Permission(serverPermissions['nvme-of']);\n    this.rbdMirroring = new Permission(serverPermissions['rbd-mirroring']);\n    this.rgw = new Permission(serverPermissions['rgw']);\n    this.cephfs = new Permission(serverPermissions['cephfs']);\n    this.manager = new Permission(serverPermissions['manager']);\n    this.log = new Permission(serverPermissions['log']);\n    this.user = new Permission(serverPermissions['user']);\n    this.grafana = new Permission(serverPermissions['grafana']);\n    this.prometheus = new Permission(serverPermissions['prometheus']);\n    this.nfs = new Permission(serverPermissions['nfs-ganesha']);\n    this.smb = new Permission(serverPermissions['smb']);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Permissions } from '../models/permissions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthStorageService {\n  isPwdDisplayedSource = new BehaviorSubject(false);\n  isPwdDisplayed$ = this.isPwdDisplayedSource.asObservable();\n\n  set(\n    username: string,\n    permissions = {},\n    sso = false,\n    pwdExpirationDate: number = null,\n    pwdUpdateRequired: boolean = false\n  ) {\n    localStorage.setItem('dashboard_username', username);\n    localStorage.setItem('dashboard_permissions', JSON.stringify(new Permissions(permissions)));\n    localStorage.setItem('user_pwd_expiration_date', String(pwdExpirationDate));\n    localStorage.setItem('user_pwd_update_required', String(pwdUpdateRequired));\n    localStorage.setItem('sso', String(sso));\n  }\n\n  remove() {\n    localStorage.removeItem('dashboard_username');\n    localStorage.removeItem('user_pwd_expiration_data');\n    localStorage.removeItem('user_pwd_update_required');\n  }\n\n  isLoggedIn() {\n    return localStorage.getItem('dashboard_username') !== null;\n  }\n\n  getUsername() {\n    return localStorage.getItem('dashboard_username');\n  }\n\n  getPermissions(): Permissions {\n    return JSON.parse(\n      localStorage.getItem('dashboard_permissions') || JSON.stringify(new Permissions({}))\n    );\n  }\n\n  getPwdExpirationDate(): number {\n    return Number(localStorage.getItem('user_pwd_expiration_date'));\n  }\n\n  getPwdUpdateRequired(): boolean {\n    return localStorage.getItem('user_pwd_update_required') === 'true';\n  }\n\n  isSSO() {\n    return localStorage.getItem('sso') === 'true';\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CdTableServerSideService {\n  /* tslint:disable:no-empty */\n  constructor() {}\n\n  static getCount(resp: HttpResponse<any>): number {\n    return Number(resp.headers?.get('X-Total-Count'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\nimport { CrudTaskInfo, JsonFormUISchema } from '../forms/crud-form/crud-form.model';\nimport { setupValidators } from '../forms/crud-form/helpers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudFormAdapterService {\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  processJsonSchemaForm(response: any, path: string): JsonFormUISchema {\n    let form = 0;\n    while (form < response.forms.length) {\n      if (response.forms[form].path == path) {\n        break;\n      }\n      form++;\n    }\n    form %= response.forms.length;\n    const title = response.forms[form].control_schema.title;\n    const uiSchema = response.forms[form].ui_schema;\n    const cSchema = response.forms[form].control_schema;\n    let controlSchema = this.formlyJsonschema.toFieldConfig(cSchema).fieldGroup;\n    for (let i = 0; i < controlSchema.length; i++) {\n      for (let j = 0; j < uiSchema.length; j++) {\n        if (controlSchema[i].key == uiSchema[j].key) {\n          controlSchema[i].props.templateOptions = uiSchema[j].templateOptions;\n          controlSchema[i].props.readonly = uiSchema[j].readonly;\n          setupValidators(controlSchema[i], uiSchema);\n        }\n      }\n    }\n    let taskInfo: CrudTaskInfo = {\n      metadataFields: response.forms[form].task_info.metadataFields,\n      message: response.forms[form].task_info.message\n    };\n    const methodType = response.forms[form].method_type;\n    const model = response.forms[form].model || {};\n    return { title, uiSchema, controlSchema, taskInfo, methodType, model };\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JsonFormUISchema } from '../forms/crud-form/crud-form.model';\nimport { CrudFormAdapterService } from './crud-form-adapter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataGatewayService {\n  cache: { [keys: string]: Observable<any> } = {};\n  selected: any;\n\n  constructor(private http: HttpClient, private crudFormAdapater: CrudFormAdapterService) {}\n\n  list(dataPath: string): Observable<any> {\n    const cacheable = this.getCacheable(dataPath, 'get');\n    if (this.cache[cacheable] === undefined) {\n      const { url, version } = this.getUrlAndVersion(dataPath);\n\n      this.cache[cacheable] = this.http.get<any>(url, {\n        headers: { Accept: `application/vnd.ceph.api.v${version}+json` }\n      });\n    }\n\n    return this.cache[cacheable];\n  }\n\n  submit(dataPath: string, data: any, methodType: string): Observable<any> {\n    const { url, version } = this.getUrlAndVersion(dataPath);\n\n    return this.http[methodType]<any>(url, data, {\n      headers: { Accept: `application/vnd.ceph.api.v${version}+json` }\n    });\n  }\n\n  delete(dataPath: string, key: string): Observable<any> {\n    const { url, version } = this.getUrlAndVersion(dataPath);\n\n    return this.http.delete<any>(`${url}/${key}`, {\n      headers: { Accept: `application/vnd.ceph.api.v${version}+json` },\n      observe: 'response'\n    });\n  }\n\n  form(dataPath: string, formPath: string, modelKey: string = ''): Observable<JsonFormUISchema> {\n    const cacheable = this.getCacheable(dataPath, 'get', modelKey);\n    const params = { model_key: modelKey };\n    if (this.cache[cacheable] === undefined) {\n      const { url, version } = this.getUrlAndVersion(dataPath);\n\n      this.cache[cacheable] = this.http.get<any>(url, {\n        headers: { Accept: `application/vnd.ceph.api.v${version}+json` },\n        params: params\n      });\n    }\n    return this.cache[cacheable].pipe(\n      map((response) => {\n        return this.crudFormAdapater.processJsonSchemaForm(response, formPath);\n      })\n    );\n  }\n\n  model(dataPath: string, params: HttpParams): Observable<any> {\n    const cacheable = this.getCacheable(dataPath, 'get');\n    if (this.cache[cacheable] === undefined) {\n      const { url, version } = this.getUrlAndVersion(dataPath);\n\n      this.cache[cacheable] = this.http.get<any>(`${url}/model`, {\n        headers: { Accept: `application/vnd.ceph.api.v${version}+json` },\n        params: params\n      });\n    }\n    return this.cache[cacheable];\n  }\n\n  getCacheable(dataPath: string, method: string, key: string = '') {\n    return dataPath + method + key;\n  }\n\n  getUrlAndVersion(dataPath: string) {\n    const match = dataPath.match(/(?<url>[^@]+)(?:@(?<version>.+))?/);\n    const url = match.groups.url.split('.').join('/');\n    const version = match.groups.version || '1.0';\n\n    return { url: url, version: version };\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport moment from 'moment';\n\nimport { CdDevice } from '../models/devices';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n  /**\n   * Calculates additional data and appends them as new attributes to the given device.\n   */\n  calculateAdditionalData(device: CdDevice): CdDevice {\n    if (!device.life_expectancy_min || !device.life_expectancy_max) {\n      device.state = 'unknown';\n      return device;\n    }\n    const hasDate = (float: string): boolean => !!Number.parseFloat(float);\n    const weeks = (isoDate1: string, isoDate2: string): number =>\n      !isoDate1 || !isoDate2 || !hasDate(isoDate1) || !hasDate(isoDate2)\n        ? null\n        : moment.duration(moment(isoDate1).diff(moment(isoDate2))).asWeeks();\n\n    const ageOfStamp = moment\n      .duration(moment(moment.now()).diff(moment(device.life_expectancy_stamp)))\n      .asWeeks();\n    const max = weeks(device.life_expectancy_max, device.life_expectancy_stamp);\n    const min = weeks(device.life_expectancy_min, device.life_expectancy_stamp);\n\n    if (ageOfStamp > 1) {\n      device.state = 'stale';\n    } else if (max !== null && max <= 2) {\n      device.state = 'bad';\n    } else if (min !== null && min <= 4) {\n      device.state = 'warning';\n    } else {\n      device.state = 'good';\n    }\n\n    device.life_expectancy_weeks = {\n      max: max !== null ? Math.round(max) : null,\n      min: min !== null ? Math.round(min) : null\n    };\n\n    return device;\n  }\n\n  readable(device: CdDevice): CdDevice {\n    device.readableDaemons = device.daemons.join(' ');\n    return device;\n  }\n\n  prepareDevice(device: CdDevice): CdDevice {\n    return this.readable(this.calculateAdditionalData(device));\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\n\nimport { CephReleaseNamePipe } from '../pipes/ceph-release-name.pipe';\nimport { SummaryService } from './summary.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocService {\n  private releaseDataSource = new BehaviorSubject<string>(null);\n  releaseData$ = this.releaseDataSource.asObservable();\n\n  constructor(\n    private summaryservice: SummaryService,\n    private cephReleaseNamePipe: CephReleaseNamePipe\n  ) {\n    this.summaryservice.subscribeOnce((summary) => {\n      const releaseName = this.cephReleaseNamePipe.transform(summary.version);\n      this.releaseDataSource.next(releaseName);\n    });\n  }\n\n  urlGenerator(section: string, release = 'main'): string {\n    const docVersion = release === 'main' ? 'latest' : release;\n    const domain = `https://docs.ceph.com/en/${docVersion}/`;\n    const domainCeph = `https://ceph.io`;\n    const domainCephOld = `https://old.ceph.com`;\n\n    const sections = {\n      iscsi: `${domain}mgr/dashboard/#enabling-iscsi-management`,\n      prometheus: `${domain}mgr/dashboard/#enabling-prometheus-alerting`,\n      'nfs-ganesha': `${domain}mgr/dashboard/#configuring-nfs-ganesha-in-the-dashboard`,\n      'rgw-nfs': `${domain}radosgw/nfs`,\n      rgw: `${domain}mgr/dashboard/#enabling-the-object-gateway-management-frontend`,\n      'rgw-multisite': `${domain}/radosgw/multisite/#failover-and-disaster-recovery`,\n      multisite: `${domain}/radosgw/multisite`,\n      dashboard: `${domain}mgr/dashboard`,\n      grafana: `${domain}mgr/dashboard/#enabling-the-embedding-of-grafana-dashboards`,\n      orch: `${domain}mgr/orchestrator`,\n      pgs: `${domainCephOld}/pgcalc`,\n      help: `${domainCeph}/en/users/`,\n      security: `${domainCeph}/en/security/`,\n      trademarks: `${domainCeph}/en/trademarks/`,\n      'dashboard-landing-page-status': `${domain}mgr/dashboard/#dashboard-landing-page-status`,\n      'dashboard-landing-page-performance': `${domain}mgr/dashboard/#dashboard-landing-page-performance`,\n      'dashboard-landing-page-capacity': `${domain}mgr/dashboard/#dashboard-landing-page-capacity`\n    };\n\n    return sections[section];\n  }\n\n  subscribeOnce(\n    section: string,\n    next: (release: string) => void,\n    error?: (error: any) => void\n  ): Subscription {\n    return this.releaseData$\n      .pipe(\n        filter((value) => !!value),\n        map((release) => this.urlGenerator(section, release)),\n        first()\n      )\n      .subscribe(next, error);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\nimport { DashboardNotFoundError } from '~/app/core/error/error';\nimport { FeatureTogglesMap, FeatureTogglesService } from './feature-toggles.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeatureTogglesGuardService {\n  constructor(private featureToggles: FeatureTogglesService) {}\n\n  canActivate(route: ActivatedRouteSnapshot) {\n    return this.featureToggles.get().pipe(\n      map((enabledFeatures: FeatureTogglesMap) => {\n        if (enabledFeatures[route.routeConfig.path] === false) {\n          throw new DashboardNotFoundError();\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot) {\n    return this.canActivate(route.parent);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { TimerService } from './timer.service';\n\nexport class FeatureTogglesMap {\n  rbd = true;\n  mirroring = true;\n  iscsi = true;\n  cephfs = true;\n  rgw = true;\n  nfs = true;\n  dashboardV3 = true;\n}\nexport type Features = keyof FeatureTogglesMap;\nexport type FeatureTogglesMap$ = Observable<FeatureTogglesMap>;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeatureTogglesService {\n  readonly API_URL: string = 'api/feature_toggles';\n  readonly REFRESH_INTERVAL: number = 30000;\n  private featureToggleMap$: FeatureTogglesMap$;\n\n  constructor(private http: HttpClient, private timerService: TimerService) {\n    this.featureToggleMap$ = this.timerService.get(\n      () => this.http.get<FeatureTogglesMap>(this.API_URL),\n      this.REFRESH_INTERVAL\n    );\n  }\n\n  get(): FeatureTogglesMap$ {\n    return this.featureToggleMap$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport _ from 'lodash';\nimport { isEmptyInputValue } from '../forms/cd-validators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormatterService {\n  format_number(n: any, divisor: number, units: string[], decimals: number = 1): string {\n    if (_.isString(n)) {\n      n = Number(n);\n    }\n    if (!_.isNumber(n)) {\n      return '-';\n    }\n    if (_.isNaN(n)) {\n      return 'N/A';\n    }\n    let unit = n < 1 ? 0 : Math.floor(Math.log(n) / Math.log(divisor));\n    unit = unit >= units.length ? units.length - 1 : unit;\n    let result = _.round(n / Math.pow(divisor, unit), decimals).toString();\n    if (result === '') {\n      return '-';\n    }\n    if (units[unit] !== '') {\n      result = `${result} ${units[unit]}`;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a value from one set of units to another using a conversion factor\n   * @param n The value to be converted\n   * @param units The data units of the value\n   * @param targetedUnits The wanted data units to convert to\n   * @param conversionFactor The factor of convesion\n   * @param unitsArray An ordered array containing the data units\n   * @param decimals The number of decimals on the returned value\n   * @returns Returns a string of the given value formated to the targeted data units.\n   */\n  formatNumberFromTo(\n    n: any,\n    units: string = '',\n    targetedUnits: string = '',\n    conversionFactor: number,\n    unitsArray: string[],\n    decimals: number = 1\n  ): string {\n    if (_.isString(n)) {\n      n = Number(n);\n    }\n    if (!_.isNumber(n)) {\n      return '-';\n    }\n    if (!unitsArray) {\n      return '-';\n    }\n    const unitsArrayLowerCase = unitsArray.map((str) => str.toLowerCase());\n    if (\n      !unitsArrayLowerCase.includes(units.toLowerCase()) ||\n      !unitsArrayLowerCase.includes(targetedUnits.toLowerCase())\n    ) {\n      return `${n} ${units}`;\n    }\n    const index =\n      unitsArrayLowerCase.indexOf(units.toLowerCase()) -\n      unitsArrayLowerCase.indexOf(targetedUnits.toLocaleLowerCase());\n    const convertedN =\n      index > 0\n        ? n * Math.pow(conversionFactor, index)\n        : n / Math.pow(conversionFactor, Math.abs(index));\n    let result = _.round(convertedN, decimals).toString();\n    result = `${result} ${targetedUnits}`;\n    return result;\n  }\n\n  /**\n   * Convert the given value into bytes.\n   * @param {string} value The value to be converted, e.g. 1024B, 10M, 300KiB or 1ZB.\n   * @param error_value The value returned in case the regular expression did not match. Defaults to\n   *                    null.\n   * @returns Returns the given value in bytes without any unit appended or the defined error value\n   *          in case xof an error.\n   */\n  toBytes(value: string, error_value: number = null): number | null {\n    const base = 1024;\n    const units = ['b', 'k', 'm', 'g', 't', 'p', 'e', 'z', 'y'];\n    const bytesRegexMatch = RegExp(\n      '^(\\\\d+(.\\\\d+)?) ?([' + units.join('') + ']?(b|ib|B/s|B/m|iB/m)?)?$',\n      'i'\n    ).exec(value);\n    if (bytesRegexMatch === null) {\n      return error_value;\n    }\n    let bytes = parseFloat(bytesRegexMatch[1]);\n    if (_.isString(bytesRegexMatch[3])) {\n      bytes = bytes * Math.pow(base, units.indexOf(bytesRegexMatch[3].toLowerCase()[0]));\n    }\n    return Math.round(bytes);\n  }\n\n  /**\n   * Converts `x ms` to `x` (currently) or `0` if the conversion fails\n   */\n  toMilliseconds(value: string): number {\n    const pattern = /^\\s*(\\d+)\\s*(ms)?\\s*$/i;\n    const testResult = pattern.exec(value);\n\n    if (testResult !== null) {\n      return +testResult[1];\n    }\n\n    return 0;\n  }\n\n  /**\n   * Converts `x IOPS` to `x` (currently) or `0` if the conversion fails\n   */\n  toIops(value: string): number {\n    const pattern = /^\\s*(\\d+)\\s*(IOPS)?\\s*$/i;\n    const testResult = pattern.exec(value);\n\n    if (testResult !== null) {\n      return +testResult[1];\n    }\n\n    return 0;\n  }\n\n  toOctalPermission(modes: any) {\n    const scopes = ['owner', 'group', 'others'];\n    let octalMode = '';\n    for (const scope of scopes) {\n      let scopeValue = 0;\n      const mode = modes[scope];\n\n      if (mode) {\n        if (mode.includes('read')) scopeValue += 4;\n        if (mode.includes('write')) scopeValue += 2;\n        if (mode.includes('execute')) scopeValue += 1;\n      }\n\n      octalMode += scopeValue.toString();\n    }\n    return octalMode;\n  }\n  /**\n   * Validate the input maximum size as per regrex passed.\n   */\n  performValidation(\n    control: AbstractControl,\n    regex: string,\n    errorObject: object,\n    type?: string\n  ): ValidationErrors | null {\n    if (isEmptyInputValue(control.value)) {\n      return null;\n    }\n    const matchResult = RegExp(regex, 'i').exec(control.value);\n    if (matchResult === null) {\n      return errorObject;\n    }\n    if (type == 'quota') {\n      const bytes = new FormatterService().toBytes(control.value);\n      return bytes < 1024 ? errorObject : null;\n    }\n    return null;\n  }\n\n  iopmMaxSizeValidator(control: AbstractControl): ValidationErrors | null {\n    const pattern = /^\\s*(\\d+)$/i;\n    const testResult = pattern.exec(control.value);\n    if (isEmptyInputValue(control.value)) {\n      return null;\n    }\n    if (testResult == null) {\n      return { rateOpsMaxSize: true };\n    }\n    return control.value.toString()?.length > 18 ? { rateOpsMaxSize: true } : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ModalService } from 'carbon-components-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalCdsService {\n  modalRef: any;\n\n  constructor(private modalService: ModalService) {}\n\n  show(component: any, inputs = {}) {\n    const createModal = this.modalService.create({\n      component: component,\n      inputs: inputs\n    });\n    this.modalRef = createModal.injector.get<any>(component);\n    return this.modalRef;\n  }\n\n  hasOpenModals() {\n    return this.modalService.placeholderService.hasComponentRef;\n  }\n\n  dismissAll() {\n    this.modalService.destroy();\n  }\n\n  stopLoadingSpinner(form: any) {\n    this.modalRef[form].setErrors({ cdSubmitButton: true });\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { NgbModal, NgbModalOptions, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  constructor(private modal: NgbModal) {}\n\n  show(component: any, initialState?: any, options?: NgbModalOptions): NgbModalRef {\n    const modalRef = this.modal.open(component, options);\n\n    if (initialState) {\n      Object.assign(modalRef.componentInstance, initialState);\n    }\n\n    return modalRef;\n  }\n\n  dismissAll() {\n    this.modal.dismissAll();\n  }\n\n  hasOpenModals() {\n    return this.modal.hasOpenModals();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\n\nimport { of as observableOf } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n/**\n * This service checks if a route can be activated by executing a\n * REST API call to '/ui-api/<uiApiPath>/status'. If the returned response\n * states that the module is not available, then the user is redirected\n * to the specified <redirectTo> URL path.\n *\n * A controller implementing this endpoint should return an object of\n * the following form:\n * {'available': true|false, 'message': null|string}.\n *\n * The configuration of this guard should look like this:\n * const routes: Routes = [\n * {\n *   path: 'rgw/bucket',\n *   component: RgwBucketListComponent,\n *   canActivate: [AuthGuardService, ModuleStatusGuardService],\n *   data: {\n *     moduleStatusGuardConfig: {\n *       uiApiPath: 'rgw',\n *       redirectTo: 'rgw/501'\n *     }\n *   }\n * },\n * ...\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModuleStatusGuardService {\n  // TODO: Hotfix - remove ALLOWLIST'ing when a generic ErrorComponent is implemented\n  static readonly ALLOWLIST: string[] = ['501'];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private mgrModuleService: MgrModuleService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot) {\n    return this.doCheck(route);\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot) {\n    return this.doCheck(childRoute);\n  }\n\n  private doCheck(route: ActivatedRouteSnapshot) {\n    if (route.url.length > 0 && ModuleStatusGuardService.ALLOWLIST.includes(route.url[0].path)) {\n      return observableOf(true);\n    }\n    const config = route.data['moduleStatusGuardConfig'];\n    let backendCheck = false;\n    if (config.backend) {\n      this.mgrModuleService.getConfig('orchestrator').subscribe(\n        (resp) => {\n          backendCheck = config.backend === resp['orchestrator'];\n        },\n        () => {\n          this.router.navigate([config.redirectTo]);\n          return observableOf(false);\n        }\n      );\n    }\n    return this.http.get(`ui-api/${config.uiApiPath}/status`).pipe(\n      map((resp: any) => {\n        if (!resp.available && !backendCheck) {\n          this.router.navigate([config.redirectTo || ''], {\n            state: {\n              header: config.header,\n              message: resp.message,\n              section: config.section,\n              section_info: config.section_info,\n              button_name: config.button_name,\n              button_route: config.button_route,\n              button_title: config.button_title,\n              secondary_button_name: config.secondary_button_name,\n              secondary_button_route: config.secondary_button_route,\n              secondary_button_title: config.secondary_button_title,\n              module_name: config.module_name,\n              navigate_to: config.navigate_to,\n              uiConfig: config.uiConfig,\n              uiApiPath: config.uiApiPath,\n              icon: Icons.wrench,\n              component: config.component\n            }\n          });\n        }\n        return resp.available;\n      }),\n      catchError(() => {\n        this.router.navigate([config.redirectTo]);\n        return observableOf(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { IndividualConfig, ToastrService } from 'ngx-toastr';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { NotificationType } from '../enum/notification-type.enum';\nimport { CdNotification, CdNotificationConfig } from '../models/cd-notification';\nimport { FinishedTask } from '../models/finished-task';\nimport { CdDatePipe } from '../pipes/cd-date.pipe';\nimport { TaskMessageService } from './task-message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private hideToasties = false;\n\n  // Data observable\n  private dataSource = new BehaviorSubject<CdNotification[]>([]);\n  data$ = this.dataSource.asObservable();\n\n  // Sidebar observable\n  sidebarSubject = new Subject();\n\n  private queued: CdNotificationConfig[] = [];\n  private queuedTimeoutId: number;\n  KEY = 'cdNotifications';\n\n  constructor(\n    public toastr: ToastrService,\n    private taskMessageService: TaskMessageService,\n    private cdDatePipe: CdDatePipe\n  ) {\n    const stringNotifications = localStorage.getItem(this.KEY);\n    let notifications: CdNotification[] = [];\n\n    if (_.isString(stringNotifications)) {\n      notifications = JSON.parse(stringNotifications, (_key, value) => {\n        if (_.isPlainObject(value)) {\n          return _.assign(new CdNotification(), value);\n        }\n        return value;\n      });\n    }\n\n    this.dataSource.next(notifications);\n  }\n\n  /**\n   * Removes all current saved notifications\n   */\n  removeAll() {\n    localStorage.removeItem(this.KEY);\n    this.dataSource.next([]);\n  }\n\n  /**\n   * Removes a single saved notifications\n   */\n  remove(index: number) {\n    const recent = this.dataSource.getValue();\n    recent.splice(index, 1);\n    this.dataSource.next(recent);\n    localStorage.setItem(this.KEY, JSON.stringify(recent));\n  }\n\n  /**\n   * Method used for saving a shown notification (check show() method).\n   */\n  save(notification: CdNotification) {\n    const recent = this.dataSource.getValue();\n    recent.push(notification);\n    recent.sort((a, b) => (a.timestamp > b.timestamp ? -1 : 1));\n    while (recent.length > 10) {\n      recent.pop();\n    }\n    this.dataSource.next(recent);\n    localStorage.setItem(this.KEY, JSON.stringify(recent));\n  }\n\n  /**\n   * Method for showing a notification.\n   * @param {NotificationType} type toastr type\n   * @param {string} title\n   * @param {string} [message] The message to be displayed. Note, use this field\n   *   for error notifications only.\n   * @param {*} [options] toastr compatible options, used when creating a toastr\n   * @param {string} [application] Only needed if notification comes from an external application\n   * @returns The timeout ID that is set to be able to cancel the notification.\n   */\n  show(\n    type: NotificationType,\n    title: string,\n    message?: string,\n    options?: any | IndividualConfig,\n    application?: string\n  ): number;\n  show(config: CdNotificationConfig | (() => CdNotificationConfig)): number;\n  show(\n    arg: NotificationType | CdNotificationConfig | (() => CdNotificationConfig),\n    title?: string,\n    message?: string,\n    options?: any | IndividualConfig,\n    application?: string\n  ): number {\n    return window.setTimeout(() => {\n      let config: CdNotificationConfig;\n      if (_.isFunction(arg)) {\n        config = arg() as CdNotificationConfig;\n      } else if (_.isObject(arg)) {\n        config = arg as CdNotificationConfig;\n      } else {\n        config = new CdNotificationConfig(\n          arg as NotificationType,\n          title,\n          message,\n          options,\n          application\n        );\n      }\n      this.queueToShow(config);\n    }, 10);\n  }\n\n  private queueToShow(config: CdNotificationConfig) {\n    this.cancel(this.queuedTimeoutId);\n    if (!this.queued.find((c) => _.isEqual(c, config))) {\n      this.queued.push(config);\n    }\n    this.queuedTimeoutId = window.setTimeout(() => {\n      this.showQueued();\n    }, 500);\n  }\n\n  private showQueued() {\n    this.getUnifiedTitleQueue().forEach((config) => {\n      const notification = new CdNotification(config);\n\n      if (!notification.isFinishedTask) {\n        this.save(notification);\n      }\n      this.showToasty(notification);\n    });\n  }\n\n  private getUnifiedTitleQueue(): CdNotificationConfig[] {\n    return Object.values(this.queueShiftByTitle()).map((configs) => {\n      const config = configs[0];\n      if (configs.length > 1) {\n        config.message = '<ul>' + configs.map((c) => `<li>${c.message}</li>`).join('') + '</ul>';\n      }\n      return config;\n    });\n  }\n\n  private queueShiftByTitle(): { [key: string]: CdNotificationConfig[] } {\n    const byTitle: { [key: string]: CdNotificationConfig[] } = {};\n    let config: CdNotificationConfig;\n    while ((config = this.queued.shift())) {\n      if (!byTitle[config.title]) {\n        byTitle[config.title] = [];\n      }\n      byTitle[config.title].push(config);\n    }\n    return byTitle;\n  }\n\n  private showToasty(notification: CdNotification) {\n    // Exit immediately if no toasty should be displayed.\n    if (this.hideToasties) {\n      return;\n    }\n    this.toastr[['error', 'info', 'success'][notification.type]](\n      (notification.message ? notification.message + '<br>' : '') +\n        this.renderTimeAndApplicationHtml(notification),\n      notification.title,\n      notification.options\n    );\n  }\n\n  renderTimeAndApplicationHtml(notification: CdNotification): string {\n    return `<small class=\"date\">${this.cdDatePipe.transform(\n      notification.timestamp\n    )}</small><i class=\"float-end custom-icon ${notification.applicationClass}\" title=\"${\n      notification.application\n    }\"></i>`;\n  }\n\n  notifyTask(finishedTask: FinishedTask, success: boolean = true): number {\n    const notification = this.finishedTaskToNotification(finishedTask, success);\n    notification.isFinishedTask = true;\n    return this.show(notification);\n  }\n\n  finishedTaskToNotification(\n    finishedTask: FinishedTask,\n    success: boolean = true\n  ): CdNotificationConfig {\n    let notification: CdNotificationConfig;\n    if (finishedTask.success && success) {\n      notification = new CdNotificationConfig(\n        NotificationType.success,\n        this.taskMessageService.getSuccessTitle(finishedTask)\n      );\n    } else {\n      notification = new CdNotificationConfig(\n        NotificationType.error,\n        this.taskMessageService.getErrorTitle(finishedTask),\n        this.taskMessageService.getErrorMessage(finishedTask)\n      );\n    }\n    notification.isFinishedTask = true;\n\n    return notification;\n  }\n\n  /**\n   * Prevent the notification from being shown.\n   * @param {number} timeoutId A number representing the ID of the timeout to be canceled.\n   */\n  cancel(timeoutId: number) {\n    window.clearTimeout(timeoutId);\n  }\n\n  /**\n   * Suspend showing the notification toasties.\n   * @param {boolean} suspend Set to ``true`` to disable/hide toasties.\n   */\n  suspendToasties(suspend: boolean) {\n    this.hideToasties = suspend;\n  }\n\n  toggleSidebar(forceClose = false) {\n    this.sidebarSubject.next(forceClose);\n  }\n}\n","export class CdPwdPolicySettings {\n  pwdPolicyEnabled: boolean;\n  pwdPolicyMinLength: number;\n  pwdPolicyCheckLengthEnabled: boolean;\n  pwdPolicyCheckOldpwdEnabled: boolean;\n  pwdPolicyCheckUsernameEnabled: boolean;\n  pwdPolicyCheckExclusionListEnabled: boolean;\n  pwdPolicyCheckRepetitiveCharsEnabled: boolean;\n  pwdPolicyCheckSequentialCharsEnabled: boolean;\n  pwdPolicyCheckComplexityEnabled: boolean;\n\n  constructor(settings: { [key: string]: any }) {\n    this.pwdPolicyEnabled = settings.pwd_policy_enabled;\n    this.pwdPolicyMinLength = settings.pwd_policy_min_length;\n    this.pwdPolicyCheckLengthEnabled = settings.pwd_policy_check_length_enabled;\n    this.pwdPolicyCheckOldpwdEnabled = settings.pwd_policy_check_oldpwd_enabled;\n    this.pwdPolicyCheckUsernameEnabled = settings.pwd_policy_check_username_enabled;\n    this.pwdPolicyCheckExclusionListEnabled = settings.pwd_policy_check_exclusion_list_enabled;\n    this.pwdPolicyCheckRepetitiveCharsEnabled = settings.pwd_policy_check_repetitive_chars_enabled;\n    this.pwdPolicyCheckSequentialCharsEnabled = settings.pwd_policy_check_sequential_chars_enabled;\n    this.pwdPolicyCheckComplexityEnabled = settings.pwd_policy_check_complexity_enabled;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SettingsService } from '../api/settings.service';\nimport { CdPwdPolicySettings } from '../models/cd-pwd-policy-settings';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PasswordPolicyService {\n  constructor(private settingsService: SettingsService) {}\n\n  getHelpText(): Observable<string> {\n    return this.settingsService.getStandardSettings().pipe(\n      map((resp: { [key: string]: any }) => {\n        const settings = new CdPwdPolicySettings(resp);\n        let helpText: string[] = [];\n        if (settings.pwdPolicyEnabled) {\n          helpText.push($localize`Required rules for passwords:`);\n          const i18nHelp: { [key: string]: string } = {\n            pwdPolicyCheckLengthEnabled: $localize`Must contain at least ${settings.pwdPolicyMinLength} characters`,\n            pwdPolicyCheckOldpwdEnabled: $localize`Must not be the same as the previous one`,\n            pwdPolicyCheckUsernameEnabled: $localize`Cannot contain the username`,\n            pwdPolicyCheckExclusionListEnabled: $localize`Cannot contain any configured keyword`,\n            pwdPolicyCheckRepetitiveCharsEnabled: $localize`Cannot contain any repetitive characters e.g. \"aaa\"`,\n            pwdPolicyCheckSequentialCharsEnabled: $localize`Cannot contain any sequential characters e.g. \"abc\"`,\n            pwdPolicyCheckComplexityEnabled: $localize`Must consist of characters from the following groups:\n  * Alphabetic a-z, A-Z\n  * Numbers 0-9\n  * Special chars: !\"#$%& '()*+,-./:;<=>?@[\\\\]^_\\`{{|}}~\n  * Any other characters (signs)`\n          };\n          helpText = helpText.concat(\n            _.keys(i18nHelp)\n              .filter((key) => _.get(settings, key))\n              .map((key) => '- ' + _.get(i18nHelp, key))\n          );\n        }\n        return helpText.join('\\n');\n      })\n    );\n  }\n\n  /**\n   * Helper function to map password policy credits to a CSS class.\n   * @param credits The password policy credits.\n   * @return The name of the CSS class.\n   */\n  mapCreditsToCssClass(credits: number): string {\n    let result = 'very-strong';\n    if (credits < 10) {\n      result = 'too-weak';\n    } else if (credits < 15) {\n      result = 'weak';\n    } else if (credits < 20) {\n      result = 'ok';\n    } else if (credits < 25) {\n      result = 'strong';\n    }\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport {\n  RbdConfigurationExtraField,\n  RbdConfigurationSection,\n  RbdConfigurationType\n} from '../models/configuration';\n\n/**\n * Define here which options should be made available under which section heading.\n * The display name and description needs to be added manually as long as Ceph does not provide\n * this information.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RbdConfigurationService {\n  readonly sections: RbdConfigurationSection[];\n\n  constructor() {\n    this.sections = [\n      {\n        heading: $localize`Quality of Service`,\n        class: 'quality-of-service',\n        options: [\n          {\n            name: 'rbd_qos_bps_limit',\n            displayName: $localize`BPS Limit`,\n            description: $localize`The desired limit of IO bytes per second.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_iops_limit',\n            displayName: $localize`IOPS Limit`,\n            description: $localize`The desired limit of IO operations per second.`,\n            type: RbdConfigurationType.iops\n          },\n          {\n            name: 'rbd_qos_read_bps_limit',\n            displayName: $localize`Read BPS Limit`,\n            description: $localize`The desired limit of read bytes per second.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_read_iops_limit',\n            displayName: $localize`Read IOPS Limit`,\n            description: $localize`The desired limit of read operations per second.`,\n            type: RbdConfigurationType.iops\n          },\n          {\n            name: 'rbd_qos_write_bps_limit',\n            displayName: $localize`Write BPS Limit`,\n            description: $localize`The desired limit of write bytes per second.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_write_iops_limit',\n            displayName: $localize`Write IOPS Limit`,\n            description: $localize`The desired limit of write operations per second.`,\n            type: RbdConfigurationType.iops\n          },\n          {\n            name: 'rbd_qos_bps_burst',\n            displayName: $localize`BPS Burst`,\n            description: $localize`The desired burst limit of IO bytes.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_iops_burst',\n            displayName: $localize`IOPS Burst`,\n            description: $localize`The desired burst limit of IO operations.`,\n            type: RbdConfigurationType.iops\n          },\n          {\n            name: 'rbd_qos_read_bps_burst',\n            displayName: $localize`Read BPS Burst`,\n            description: $localize`The desired burst limit of read bytes.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_read_iops_burst',\n            displayName: $localize`Read IOPS Burst`,\n            description: $localize`The desired burst limit of read operations.`,\n            type: RbdConfigurationType.iops\n          },\n          {\n            name: 'rbd_qos_write_bps_burst',\n            displayName: $localize`Write BPS Burst`,\n            description: $localize`The desired burst limit of write bytes.`,\n            type: RbdConfigurationType.bps\n          },\n          {\n            name: 'rbd_qos_write_iops_burst',\n            displayName: $localize`Write IOPS Burst`,\n            description: $localize`The desired burst limit of write operations.`,\n            type: RbdConfigurationType.iops\n          }\n        ] as RbdConfigurationExtraField[]\n      }\n    ];\n  }\n\n  private static getOptionsFromSections(sections: RbdConfigurationSection[]) {\n    return sections.map((section) => section.options).reduce((a, b) => a.concat(b));\n  }\n\n  private filterConfigOptionsByName(configName: string) {\n    return RbdConfigurationService.getOptionsFromSections(this.sections).filter(\n      (option) => option.name === configName\n    );\n  }\n\n  private getOptionValueByName(configName: string, fieldName: string, defaultValue = '') {\n    const configOptions = this.filterConfigOptionsByName(configName);\n    return configOptions.length === 1 ? configOptions.pop()[fieldName] : defaultValue;\n  }\n\n  getWritableSections() {\n    return this.sections.map((section) => {\n      section.options = section.options.filter((o) => !o.readOnly);\n      return section;\n    });\n  }\n\n  getOptionFields() {\n    return RbdConfigurationService.getOptionsFromSections(this.sections);\n  }\n\n  getWritableOptionFields() {\n    return RbdConfigurationService.getOptionsFromSections(this.getWritableSections());\n  }\n\n  getOptionByName(optionName: string): RbdConfigurationExtraField {\n    return this.filterConfigOptionsByName(optionName).pop();\n  }\n\n  getDisplayName(configName: string): string {\n    return this.getOptionValueByName(configName, 'displayName');\n  }\n\n  getDescription(configName: string): string {\n    return this.getOptionValueByName(configName, 'description');\n  }\n}\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\n\nimport { BehaviorSubject, interval, Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RefreshIntervalService implements OnDestroy {\n  private intervalTime: number;\n  // Observable sources\n  private intervalDataSource = new BehaviorSubject(null);\n  private intervalSubscription: Subscription;\n  // Observable streams\n  intervalData$ = this.intervalDataSource.asObservable();\n\n  constructor(private ngZone: NgZone) {\n    const initialInterval = parseInt(sessionStorage.getItem('dashboard_interval'), 10) || 5000;\n    this.setRefreshInterval(initialInterval);\n  }\n\n  setRefreshInterval(newInterval: number) {\n    this.intervalTime = newInterval;\n    sessionStorage.setItem('dashboard_interval', newInterval.toString());\n\n    if (this.intervalSubscription) {\n      this.intervalSubscription.unsubscribe();\n    }\n    this.ngZone.runOutsideAngular(() => {\n      this.intervalSubscription = interval(this.intervalTime).subscribe(() =>\n        this.ngZone.run(() => {\n          this.intervalDataSource.next(this.intervalTime);\n        })\n      );\n    });\n  }\n\n  getRefreshInterval() {\n    return this.intervalTime;\n  }\n\n  ngOnDestroy() {\n    if (this.intervalSubscription) {\n      this.intervalSubscription.unsubscribe();\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { filter, first } from 'rxjs/operators';\n\nimport { ExecutingTask } from '../models/executing-task';\nimport { Summary } from '../models/summary.model';\nimport { TimerService } from './timer.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SummaryService {\n  readonly REFRESH_INTERVAL = 5000;\n  // Observable sources\n  private summaryDataSource = new BehaviorSubject<Summary>(null);\n  // Observable streams\n  summaryData$ = this.summaryDataSource.asObservable();\n\n  constructor(private http: HttpClient, private timerService: TimerService) {}\n\n  startPolling(): Subscription {\n    return this.timerService\n      .get(() => this.retrieveSummaryObservable(), this.REFRESH_INTERVAL)\n      .subscribe(this.retrieveSummaryObserver());\n  }\n\n  refresh(): Subscription {\n    return this.retrieveSummaryObservable().subscribe(this.retrieveSummaryObserver());\n  }\n\n  private retrieveSummaryObservable(): Observable<Summary> {\n    return this.http.get<Summary>('api/summary');\n  }\n\n  private retrieveSummaryObserver(): (data: Summary) => void {\n    return (data: Summary) => {\n      this.summaryDataSource.next(data);\n    };\n  }\n\n  /**\n   * Subscribes to the summaryData and receive only the first, non undefined, value.\n   */\n  subscribeOnce(next: (summary: Summary) => void, error?: (error: any) => void): Subscription {\n    return this.summaryData$\n      .pipe(\n        filter((value) => !!value),\n        first()\n      )\n      .subscribe(next, error);\n  }\n\n  /**\n   * Subscribes to the summaryData,\n   * which is updated periodically or when a new task is created.\n   * Will receive only non undefined values.\n   */\n  subscribe(next: (summary: Summary) => void, error?: (error: any) => void): Subscription {\n    return this.summaryData$.pipe(filter((value) => !!value)).subscribe(next, error);\n  }\n\n  /**\n   * Inserts a newly created task to the local list of executing tasks.\n   * After that, it will automatically push that new information\n   * to all subscribers.\n   */\n  addRunningTask(task: ExecutingTask) {\n    const current = this.summaryDataSource.getValue();\n    if (!current) {\n      return;\n    }\n\n    if (_.isArray(current.executing_tasks)) {\n      const exists = current.executing_tasks.find((element: any) => {\n        return element.name === task.name && _.isEqual(element.metadata, task.metadata);\n      });\n      if (!exists) {\n        current.executing_tasks.push(task);\n      }\n    } else {\n      current.executing_tasks = [task];\n    }\n\n    this.summaryDataSource.next(current);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\n\nimport { ExecutingTask } from '../models/executing-task';\nimport { Summary } from '../models/summary.model';\nimport { SummaryService } from './summary.service';\nimport { TaskMessageService } from './task-message.service';\n\n@Injectable()\nexport class TaskListService implements OnDestroy {\n  summaryDataSubscription: Subscription;\n\n  getUpdate: (context?: any) => Observable<object>;\n  preProcessing: (_: any) => any[];\n  setList: (_: any[]) => void;\n  onFetchError: (error: any) => void;\n  taskFilter: (task: ExecutingTask) => boolean;\n  itemFilter: (item: any, task: ExecutingTask) => boolean;\n  builders: object;\n  summary: Summary;\n\n  constructor(\n    private taskMessageService: TaskMessageService,\n    private summaryService: SummaryService\n  ) {}\n\n  /**\n   * @param {() => Observable<object>} getUpdate Method that calls the api and\n   * returns that without subscribing.\n   * @param {(_: any) => any[]} preProcessing Method executed before merging\n   * Tasks with Items\n   * @param {(_: any[]) => void} setList  Method used to update array of item in the component.\n   * @param {(error: any) => void} onFetchError Method called when there were\n   * problems while fetching data.\n   * @param {(task: ExecutingTask) => boolean} taskFilter callback used in tasks_array.filter()\n   * @param {(item, task: ExecutingTask) => boolean} itemFilter callback used in\n   * items_array.filter()\n   * @param {object} builders\n   * object with builders for each type of task.\n   * You can also use a 'default' one.\n   * @memberof TaskListService\n   */\n  init(\n    getUpdate: (context?: any) => Observable<object>,\n    preProcessing: (_: any) => any[],\n    setList: (_: any[]) => void,\n    onFetchError: (error: any) => void,\n    taskFilter: (task: ExecutingTask) => boolean,\n    itemFilter: (item: any, task: ExecutingTask) => boolean,\n    builders: object\n  ) {\n    this.getUpdate = getUpdate;\n    this.preProcessing = preProcessing;\n    this.setList = setList;\n    this.onFetchError = onFetchError;\n    this.taskFilter = taskFilter;\n    this.itemFilter = itemFilter;\n    this.builders = builders || {};\n\n    this.summaryDataSubscription = this.summaryService.subscribe((summary) => {\n      this.summary = summary;\n      this.fetch();\n    }, this.onFetchError);\n  }\n\n  fetch(context: any = null) {\n    this.getUpdate(context).subscribe((resp: any) => {\n      this.updateData(resp, this.summary?.['executing_tasks'].filter(this.taskFilter));\n    }, this.onFetchError);\n  }\n\n  private updateData(resp: any, tasks: ExecutingTask[]) {\n    const data: any[] = this.preProcessing ? this.preProcessing(resp) : resp;\n    this.addMissing(data, tasks);\n    data.forEach((item) => {\n      const executingTasks = tasks.filter((task) => this.itemFilter(item, task));\n      item.cdExecuting = this.getTaskAction(executingTasks);\n    });\n    this.setList(data);\n  }\n\n  private addMissing(data: any[], tasks: ExecutingTask[]) {\n    const defaultBuilder = this.builders['default'];\n    tasks?.forEach((task) => {\n      const existing = data.find((item) => this.itemFilter(item, task));\n      const builder = this.builders[task.name];\n      if (!existing && (builder || defaultBuilder)) {\n        data.push(builder ? builder(task.metadata) : defaultBuilder(task.metadata));\n      }\n    });\n  }\n\n  private getTaskAction(tasks: ExecutingTask[]): string {\n    if (tasks.length === 0) {\n      return undefined;\n    }\n    return tasks\n      .map((task) => {\n        const progress = task.progress ? ` ${task.progress}%` : '';\n        return this.taskMessageService.getRunningText(task) + '...' + progress;\n      })\n      .join(', ');\n  }\n\n  ngOnDestroy() {\n    if (this.summaryDataSubscription) {\n      this.summaryDataSubscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { ExecutingTask } from '../models/executing-task';\nimport { FinishedTask } from '../models/finished-task';\nimport { Task } from '../models/task';\nimport { SummaryService } from './summary.service';\n\nclass TaskSubscription {\n  name: string;\n  metadata: object;\n  onTaskFinished: (finishedTask: FinishedTask) => any;\n\n  constructor(name: string, metadata: object, onTaskFinished: any) {\n    this.name = name;\n    this.metadata = metadata;\n    this.onTaskFinished = onTaskFinished;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskManagerService {\n  subscriptions: Array<TaskSubscription> = [];\n\n  init(summaryService: SummaryService) {\n    return summaryService.subscribe((summary) => {\n      const executingTasks = summary.executing_tasks;\n      const finishedTasks = summary.finished_tasks;\n      const newSubscriptions: Array<TaskSubscription> = [];\n      for (const subscription of this.subscriptions) {\n        const finishedTask = <FinishedTask>this._getTask(subscription, finishedTasks);\n        const executingTask = <ExecutingTask>this._getTask(subscription, executingTasks);\n        if (finishedTask !== null && executingTask === null) {\n          subscription.onTaskFinished(finishedTask);\n        }\n        if (executingTask !== null) {\n          newSubscriptions.push(subscription);\n        }\n        this.subscriptions = newSubscriptions;\n      }\n    });\n  }\n\n  subscribe(name: string, metadata: object, onTaskFinished: (finishedTask: FinishedTask) => any) {\n    this.subscriptions.push(new TaskSubscription(name, metadata, onTaskFinished));\n  }\n\n  private _getTask(subscription: TaskSubscription, tasks: Array<Task>): Task {\n    for (const task of tasks) {\n      if (task.name === subscription.name && _.isEqual(task.metadata, subscription.metadata)) {\n        return task;\n      }\n    }\n    return null;\n  }\n}\n","export enum Components {\n  auth = 'Login',\n  cephfs = 'CephFS',\n  rbd = 'RBD',\n  pool = 'Pool',\n  osd = 'OSD',\n  role = 'Role',\n  user = 'User'\n}\n","import { Injectable } from '@angular/core';\nimport _ from 'lodash';\n\nimport { Components } from '../enum/components.enum';\nimport { FinishedTask } from '../models/finished-task';\nimport { ImageSpec } from '../models/image-spec';\nimport { Task } from '../models/task';\nimport { PluralizePipe } from '../pipes/pluralize.pipe';\n\nexport class TaskMessageOperation {\n  running: string;\n  failure: string;\n  success: string;\n\n  constructor(running: string, failure: string, success: string) {\n    this.running = running;\n    this.failure = failure;\n    this.success = success;\n  }\n}\n\nclass TaskMessage {\n  operation: TaskMessageOperation;\n  involves: (object: any) => string;\n  errors: (metadata: any) => object;\n\n  failure(metadata: any): string {\n    return $localize`Failed to ${this.operation.failure} ${this.involves(metadata)}`;\n  }\n\n  running(metadata: any): string {\n    return `${this.operation.running} ${this.involves(metadata)}`;\n  }\n\n  success(metadata: any): string {\n    return `${this.operation.success} ${this.involves(metadata)}`;\n  }\n\n  constructor(\n    operation: TaskMessageOperation,\n    involves: (metadata: any) => string,\n    errors?: (metadata: any) => object\n  ) {\n    this.operation = operation;\n    this.involves = involves;\n    this.errors = errors || (() => ({}));\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskMessageService {\n  defaultMessage = this.newTaskMessage(\n    new TaskMessageOperation($localize`Executing`, $localize`execute`, $localize`Executed`),\n    (metadata) => {\n      return (\n        (metadata && (Components[metadata.component] || metadata.component)) ||\n        $localize`unknown task`\n      );\n    },\n    () => {\n      return {};\n    }\n  );\n\n  pluralize = new PluralizePipe().transform;\n\n  commonOperations = {\n    create: new TaskMessageOperation($localize`Creating`, $localize`create`, $localize`Created`),\n    update: new TaskMessageOperation($localize`Updating`, $localize`update`, $localize`Updated`),\n    delete: new TaskMessageOperation($localize`Deleting`, $localize`delete`, $localize`Deleted`),\n    add: new TaskMessageOperation($localize`Adding`, $localize`add`, $localize`Added`),\n    remove: new TaskMessageOperation($localize`Removing`, $localize`remove`, $localize`Removed`),\n    import: new TaskMessageOperation($localize`Importing`, $localize`import`, $localize`Imported`),\n    activate: new TaskMessageOperation(\n      $localize`Importing`,\n      $localize`activate`,\n      $localize`Activated`\n    ),\n    deactivate: new TaskMessageOperation(\n      $localize`Importing`,\n      $localize`deactivate`,\n      $localize`Deactivated`\n    )\n  };\n\n  rbd = {\n    default: (metadata: any) => $localize`RBD '${metadata.image_spec}'`,\n    create: (metadata: any) => {\n      const id = new ImageSpec(\n        metadata.pool_name,\n        metadata.namespace,\n        metadata.image_name\n      ).toString();\n      return $localize`RBD '${id}'`;\n    },\n    child: (metadata: any) => {\n      const id = new ImageSpec(\n        metadata.child_pool_name,\n        metadata.child_namespace,\n        metadata.child_image_name\n      ).toString();\n      return $localize`RBD '${id}'`;\n    },\n    destination: (metadata: any) => {\n      const id = new ImageSpec(\n        metadata.dest_pool_name,\n        metadata.dest_namespace,\n        metadata.dest_image_name\n      ).toString();\n      return $localize`RBD '${id}'`;\n    },\n    snapshot: (metadata: any) =>\n      $localize`RBD snapshot '${metadata.image_spec}@${metadata.snapshot_name}'`\n  };\n\n  rbd_mirroring = {\n    site_name: () => $localize`mirroring site name`,\n    bootstrap: () => $localize`bootstrap token`,\n    pool: (metadata: any) => $localize`mirror mode for pool '${metadata.pool_name}'`,\n    pool_peer: (metadata: any) => $localize`mirror peer for pool '${metadata.pool_name}'`\n  };\n\n  grafana = {\n    update_dashboards: () => $localize`all dashboards`\n  };\n\n  messages = {\n    // Host tasks\n    'host/add': this.newTaskMessage(this.commonOperations.add, (metadata) => this.host(metadata)),\n    'host/remove': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.host(metadata)\n    ),\n    'host/identify_device': this.newTaskMessage(\n      new TaskMessageOperation($localize`Identifying`, $localize`identify`, $localize`Identified`),\n      (metadata) => $localize`device '${metadata.device}' on host '${metadata.hostname}'`\n    ),\n    // OSD tasks\n    'osd/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata) => $localize`OSDs (DriveGroups: ${metadata.tracking_id})`\n    ),\n    'osd/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.osd(metadata)\n    ),\n    // Pool tasks\n    'pool/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata) => this.pool(metadata),\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.pool(metadata)}.`\n      })\n    ),\n    'pool/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      (metadata) => this.pool(metadata),\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.pool(metadata)}.`\n      })\n    ),\n    'pool/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.pool(metadata)\n    ),\n    // Erasure code profile tasks\n    'ecp/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata) => this.ecp(metadata),\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.ecp(metadata)}.`\n      })\n    ),\n    'ecp/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.ecp(metadata)\n    ),\n    // Crush rule tasks\n    'crushRule/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata) => this.crushRule(metadata),\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.crushRule(metadata)}.`\n      })\n    ),\n    'crushRule/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.crushRule(metadata)\n    ),\n    // RBD tasks\n    'rbd/create': this.newTaskMessage(\n      this.commonOperations.create,\n      this.rbd.create,\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.rbd.create(metadata)}.`\n      })\n    ),\n    'rbd/edit': this.newTaskMessage(this.commonOperations.update, this.rbd.default, (metadata) => ({\n      '17': $localize`Name is already used by ${this.rbd.default(metadata)}.`\n    })),\n    'rbd/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      this.rbd.default,\n      (metadata) => ({\n        '16': $localize`${this.rbd.default(metadata)} is busy.`,\n        '39': $localize`${this.rbd.default(metadata)} contains snapshots.`\n      })\n    ),\n    'rbd/clone': this.newTaskMessage(\n      new TaskMessageOperation($localize`Cloning`, $localize`clone`, $localize`Cloned`),\n      this.rbd.child,\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.rbd.child(metadata)}.`,\n        '22': $localize`Snapshot of ${this.rbd.child(metadata)} must be protected.`\n      })\n    ),\n    'rbd/copy': this.newTaskMessage(\n      new TaskMessageOperation($localize`Copying`, $localize`copy`, $localize`Copied`),\n      this.rbd.destination,\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.rbd.destination(metadata)}.`\n      })\n    ),\n    'rbd/flatten': this.newTaskMessage(\n      new TaskMessageOperation($localize`Flattening`, $localize`flatten`, $localize`Flattened`),\n      this.rbd.default\n    ),\n    // RBD snapshot tasks\n    'rbd/snap/create': this.newTaskMessage(\n      this.commonOperations.create,\n      this.rbd.snapshot,\n      (metadata) => ({\n        '17': $localize`Name is already used by ${this.rbd.snapshot(metadata)}.`\n      })\n    ),\n    'rbd/snap/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      this.rbd.snapshot,\n      (metadata) => ({\n        '16': $localize`Cannot unprotect ${this.rbd.snapshot(\n          metadata\n        )} because it contains child images.`\n      })\n    ),\n    'rbd/snap/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      this.rbd.snapshot,\n      (metadata) => ({\n        '16': $localize`Cannot delete ${this.rbd.snapshot(metadata)} because it's protected.`\n      })\n    ),\n    'rbd/snap/rollback': this.newTaskMessage(\n      new TaskMessageOperation(\n        $localize`Rolling back`,\n        $localize`rollback`,\n        $localize`Rolled back`\n      ),\n      this.rbd.snapshot\n    ),\n    // RBD trash tasks\n    'rbd/trash/move': this.newTaskMessage(\n      new TaskMessageOperation($localize`Moving`, $localize`move`, $localize`Moved`),\n      (metadata) => $localize`image '${metadata.image_spec}' to trash`,\n      () => ({\n        2: $localize`Could not find image.`\n      })\n    ),\n    'rbd/trash/restore': this.newTaskMessage(\n      new TaskMessageOperation($localize`Restoring`, $localize`restore`, $localize`Restored`),\n      (metadata) => $localize`image '${metadata.image_id_spec}' into '${metadata.new_image_name}'`,\n      (metadata) => ({\n        17: $localize`Image name '${metadata.new_image_name}' is already in use.`\n      })\n    ),\n    'rbd/trash/remove': this.newTaskMessage(\n      new TaskMessageOperation($localize`Deleting`, $localize`delete`, $localize`Deleted`),\n      (metadata) => $localize`image '${metadata.image_id_spec}'`\n    ),\n    'rbd/trash/purge': this.newTaskMessage(\n      new TaskMessageOperation($localize`Purging`, $localize`purge`, $localize`Purged`),\n      (metadata) => {\n        let message = $localize`all pools`;\n        if (metadata.pool_name) {\n          message = `'${metadata.pool_name}'`;\n        }\n        return $localize`images from ${message}`;\n      }\n    ),\n    // RBD mirroring tasks\n    'rbd/mirroring/site_name/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      this.rbd_mirroring.site_name,\n      () => ({})\n    ),\n    'rbd/mirroring/bootstrap/create': this.newTaskMessage(\n      this.commonOperations.create,\n      this.rbd_mirroring.bootstrap,\n      () => ({})\n    ),\n    'rbd/mirroring/bootstrap/import': this.newTaskMessage(\n      this.commonOperations.import,\n      this.rbd_mirroring.bootstrap,\n      () => ({})\n    ),\n    'rbd/mirroring/pool/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      this.rbd_mirroring.pool,\n      () => ({\n        16: $localize`Cannot disable mirroring because it contains a peer.`\n      })\n    ),\n    'rbd/mirroring/peer/add': this.newTaskMessage(\n      this.commonOperations.create,\n      this.rbd_mirroring.pool_peer,\n      () => ({})\n    ),\n    'rbd/mirroring/peer/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      this.rbd_mirroring.pool_peer,\n      () => ({})\n    ),\n    'rbd/mirroring/peer/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      this.rbd_mirroring.pool_peer,\n      () => ({})\n    ),\n    // RGW operations\n    'rgw/bucket/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) => {\n      return $localize`${metadata.bucket_names[0]}`;\n    }),\n    'rgw/bucket/notification/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => {\n        return $localize`${metadata.notification_id[0]}`;\n      }\n    ),\n    'rgw/accounts': this.newTaskMessage(this.commonOperations.delete, (metadata) => {\n      return $localize`${`account '${metadata.account_names[0]}'`}`;\n    }),\n    'rgw/multisite/sync-policy/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => {\n        return $localize`${\n          metadata.group_names.length > 1\n            ? 'selected policy groups'\n            : `policy group '${metadata.group_names[0]}'`\n        }`;\n      }\n    ),\n    'rgw/multisite/sync-flow/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => {\n        return $localize`${\n          metadata.flow_ids.length > 1 ? 'selected Flow' : `Flow '${metadata.flow_ids[0]}'`\n        }`;\n      }\n    ),\n    'rgw/multisite/sync-pipe/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => {\n        return $localize`${\n          metadata.pipe_ids.length > 1 ? 'selected pipe' : `Pipe '${metadata.pipe_ids[0]}'`\n        }`;\n      }\n    ),\n    // storage-class\n    'rgw/zonegroup/storage-class': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.rgwStorageClass(metadata)\n    ),\n    // iSCSI target tasks\n    'iscsi/target/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.iscsiTarget(metadata)\n    ),\n    'iscsi/target/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.iscsiTarget(metadata)\n    ),\n    'iscsi/target/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.iscsiTarget(metadata)\n    ),\n    // nvmeof\n    'nvmeof/subsystem/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.nvmeofSubsystem(metadata)\n    ),\n    'nvmeof/subsystem/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.nvmeofSubsystem(metadata)\n    ),\n    'nvmeof/listener/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.nvmeofListener(metadata)\n    ),\n    'nvmeof/listener/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.nvmeofListener(metadata)\n    ),\n    'nvmeof/namespace/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.nvmeofNamespace(metadata)\n    ),\n    'nvmeof/namespace/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.nvmeofNamespace(metadata)\n    ),\n    'nvmeof/namespace/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.nvmeofNamespace(metadata)\n    ),\n    'nvmeof/initiator/add': this.newTaskMessage(this.commonOperations.add, (metadata) =>\n      this.nvmeofInitiator(metadata)\n    ),\n    'nvmeof/initiator/remove': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.nvmeofInitiator(metadata)\n    ),\n    // nfs\n    'nfs/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.nfs(metadata)\n    ),\n    'nfs/edit': this.newTaskMessage(this.commonOperations.update, (metadata) => this.nfs(metadata)),\n    'nfs/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.nfs(metadata)\n    ),\n    'rgw/topic/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.topic(metadata)\n    ),\n    // Grafana tasks\n    'grafana/dashboards/update': this.newTaskMessage(\n      this.commonOperations.update,\n      this.grafana.update_dashboards,\n      () => ({})\n    ),\n    // Service tasks\n    'service/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.service(metadata)\n    ),\n    'service/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.service(metadata)\n    ),\n    'service/delete': this.newTaskMessage(this.commonOperations.delete, (metadata) =>\n      this.service(metadata)\n    ),\n    'crud-component/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.crudMessage(metadata)\n    ),\n    'crud-component/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.crudMessage(metadata)\n    ),\n    'crud-component/import': this.newTaskMessage(this.commonOperations.import, (metadata) =>\n      this.crudMessage(metadata)\n    ),\n    'crud-component/id': this.newTaskMessage(this.commonOperations.delete, (id) =>\n      this.crudMessageId(id)\n    ),\n    'cephfs/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.volume(metadata)\n    ),\n    'cephfs/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.volume(metadata)\n    ),\n    'cephfs/auth': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.auth(metadata)\n    ),\n    'cephfs/remove': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.volume(metadata)\n    ),\n    'cephfs/subvolume/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.subvolume(metadata)\n    ),\n    'cephfs/subvolume/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.subvolume(metadata)\n    ),\n    'cephfs/subvolume/remove': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.subvolume(metadata)\n    ),\n    'cephfs/subvolume/group/create': this.newTaskMessage(this.commonOperations.create, (metadata) =>\n      this.subvolumegroup(metadata)\n    ),\n    'cephfs/subvolume/group/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.subvolumegroup(metadata)\n    ),\n    'cephfs/subvolume/group/remove': this.newTaskMessage(this.commonOperations.remove, (metadata) =>\n      this.subvolumegroup(metadata)\n    ),\n    'cephfs/subvolume/snapshot/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata) => this.snapshot(metadata)\n    ),\n    'cephfs/subvolume/snapshot/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => this.snapshot(metadata)\n    ),\n    'cephfs/snapshot/schedule/create': this.newTaskMessage(this.commonOperations.add, (metadata) =>\n      this.snapshotSchedule(metadata)\n    ),\n    'cephfs/snapshot/schedule/edit': this.newTaskMessage(this.commonOperations.update, (metadata) =>\n      this.snapshotSchedule(metadata)\n    ),\n    'cephfs/snapshot/schedule/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata) => this.snapshotSchedule(metadata)\n    ),\n    'cephfs/snapshot/schedule/activate': this.newTaskMessage(\n      this.commonOperations.activate,\n      (metadata) => this.snapshotSchedule(metadata)\n    ),\n    'cephfs/snapshot/schedule/deactivate': this.newTaskMessage(\n      this.commonOperations.deactivate,\n      (metadata) => this.snapshotSchedule(metadata)\n    ),\n    // smb\n    'cephfs/smb/cluster/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata: { cluster_id: string }) => this.smbCluster(metadata)\n    ),\n    'cephfs/smb/cluster/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      (metadata: { cluster_id: string }) => this.smbCluster(metadata)\n    ),\n    'cephfs/smb/cluster/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata: { cluster_id: string }) => this.smbCluster(metadata)\n    ),\n    'cephfs/smb/share/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata: Record<'share_id', string>) => this.smbShare(metadata)\n    ),\n    'cephfs/smb/share/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      (metadata: Record<'share_id', string>) => this.smbShare(metadata)\n    ),\n    'cephfs/smb/share/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata: Record<'share_id', string>) => this.smbShare(metadata)\n    ),\n    'cephfs/smb/active-directory/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata: { authId: string }) => this.smbJoinAuth(metadata)\n    ),\n    'cephfs/smb/active-directory/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      (metadata: { authId: string }) => this.smbJoinAuth(metadata)\n    ),\n    'cephfs/smb/active-directory/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata: { authId: string }) => this.smbJoinAuth(metadata)\n    ),\n    'cephfs/smb/standalone/create': this.newTaskMessage(\n      this.commonOperations.create,\n      (metadata: { usersGroupsId: string }) => this.smbUsersgroups(metadata)\n    ),\n    'cephfs/smb/standalone/edit': this.newTaskMessage(\n      this.commonOperations.update,\n      (metadata: { usersGroupsId: string }) => this.smbUsersgroups(metadata)\n    ),\n    'cephfs/smb/standalone/delete': this.newTaskMessage(\n      this.commonOperations.delete,\n      (metadata: { usersGroupsId: string }) => this.smbUsersgroups(metadata)\n    )\n  };\n\n  newTaskMessage(\n    operation: TaskMessageOperation,\n    involves: (metadata: any) => string,\n    errors?: (metadata: any) => object\n  ) {\n    return new TaskMessage(operation, involves, errors);\n  }\n\n  host(metadata: any) {\n    return $localize`host '${metadata.hostname}'`;\n  }\n\n  osd(metadata: any) {\n    return $localize`OSD '${metadata.svc_id}'`;\n  }\n\n  pool(metadata: any) {\n    return $localize`pool '${metadata.pool_name}'`;\n  }\n\n  ecp(metadata: any) {\n    return $localize`erasure code profile '${metadata.name}'`;\n  }\n\n  crushRule(metadata: any) {\n    return $localize`crush rule '${metadata.name}'`;\n  }\n\n  iscsiTarget(metadata: any) {\n    return $localize`target '${metadata.target_iqn}'`;\n  }\n\n  nvmeofSubsystem(metadata: any) {\n    return $localize`subsystem '${metadata.nqn}'`;\n  }\n\n  nvmeofListener(metadata: any) {\n    return $localize`listener '${metadata.host_name} for subsystem ${metadata.nqn}`;\n  }\n\n  nvmeofNamespace(metadata: { nqn: string; nsCount?: number; nsid?: string }) {\n    if (metadata?.nsid) {\n      return $localize`namespace ${metadata.nsid} for subsystem '${metadata.nqn}'`;\n    }\n    return $localize`${metadata.nsCount} ${this.pluralize(\n      'namespace',\n      metadata.nsCount\n    )} for subsystem '${metadata.nqn}'`;\n  }\n\n  nvmeofInitiator(metadata: { plural: number; nqn: string }) {\n    return $localize`${this.pluralize('initiator', metadata.plural)} for subsystem ${metadata.nqn}`;\n  }\n\n  nfs(metadata: any) {\n    return $localize`NFS '${metadata.cluster_id}\\:${\n      metadata.export_id ? metadata.export_id : metadata.path\n    }'`;\n  }\n\n  smbCluster(metadata: { cluster_id: string }) {\n    return $localize`SMB cluster  '${metadata.cluster_id}'`;\n  }\n\n  smbShare(metadata: Record<'share_id', string>) {\n    return $localize`SMB share '${metadata?.share_id}'`;\n  }\n\n  smbJoinAuth(metadata: { authId: string }) {\n    return $localize`SMB active directory access resource '${metadata.authId}'`;\n  }\n\n  smbUsersgroups(metadata: { usersGroupsId: string }) {\n    return $localize`SMB users and groups access resource '${metadata.usersGroupsId}'`;\n  }\n\n  topic(metadata: any) {\n    return $localize`Topic  '${metadata.name}'`;\n  }\n  notification(metadata: any) {\n    return $localize`Notification  '${metadata.name}'`;\n  }\n  service(metadata: any) {\n    return $localize`service '${metadata.service_name}'`;\n  }\n\n  rgwStorageClass(metadata: any) {\n    return $localize`Tiering Storage Class  '${metadata.storage_class}'`;\n  }\n\n  crudMessage(metadata: any) {\n    let message = metadata.__message;\n    _.forEach(metadata, (value, key) => {\n      if (key != '__message') {\n        let regex = '{' + key + '}';\n        message = message.replace(regex, value);\n      }\n    });\n    return $localize`${message}`;\n  }\n\n  volume(metadata: any) {\n    return $localize`'${metadata.volumeName}'`;\n  }\n\n  auth(metadata: any) {\n    return $localize`client.${metadata.clientId} authorization successfully`;\n  }\n\n  subvolume(metadata: any) {\n    return $localize`subvolume '${metadata.subVolumeName}'`;\n  }\n\n  subvolumegroup(metadata: any) {\n    return $localize`subvolume group '${metadata.subvolumegroupName}'`;\n  }\n\n  snapshot(metadata: any) {\n    return $localize`snapshot '${metadata.snapshotName}'`;\n  }\n\n  snapshotSchedule(metadata: any) {\n    return $localize`snapshot schedule for path '${metadata?.path}'`;\n  }\n\n  crudMessageId(id: string) {\n    return $localize`${id}`;\n  }\n\n  _getTaskTitle(task: Task) {\n    if (task.name && task.name.startsWith('progress/')) {\n      // we don't fill the failure string because, at least for now, all\n      // progress module tasks will be considered successful\n      return this.newTaskMessage(\n        new TaskMessageOperation(\n          task.name.replace('progress/', ''),\n          '',\n          task.name.replace('progress/', '')\n        ),\n        (_metadata) => ''\n      );\n    }\n    return this.messages[task.name] || this.defaultMessage;\n  }\n\n  getSuccessTitle(task: FinishedTask) {\n    return this._getTaskTitle(task).success(task.metadata);\n  }\n\n  getErrorMessage(task: FinishedTask) {\n    return (\n      this._getTaskTitle(task).errors(task.metadata)[task.exception.code] || task.exception.detail\n    );\n  }\n\n  getErrorTitle(task: Task) {\n    return this._getTaskTitle(task).failure(task.metadata);\n  }\n\n  getRunningTitle(task: Task) {\n    return this._getTaskTitle(task).running(task.metadata);\n  }\n\n  getRunningText(task: Task) {\n    return this._getTaskTitle(task).operation.running;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { NotificationType } from '../enum/notification-type.enum';\nimport { CdNotificationConfig } from '../models/cd-notification';\nimport { ExecutingTask } from '../models/executing-task';\nimport { FinishedTask } from '../models/finished-task';\nimport { NotificationService } from './notification.service';\nimport { SummaryService } from './summary.service';\nimport { TaskManagerService } from './task-manager.service';\nimport { TaskMessageService } from './task-message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskWrapperService {\n  constructor(\n    private notificationService: NotificationService,\n    private summaryService: SummaryService,\n    private taskMessageService: TaskMessageService,\n    private taskManagerService: TaskManagerService\n  ) {}\n\n  wrapTaskAroundCall({ task, call }: { task: FinishedTask; call: Observable<any> }) {\n    return new Observable((observer: Subscriber<any>) => {\n      call.subscribe(\n        (resp) => {\n          if (resp.status === 202) {\n            this._handleExecutingTasks(task);\n          } else {\n            this.summaryService.refresh();\n            task.success = true;\n            this.notificationService.notifyTask(task);\n          }\n        },\n        (resp) => {\n          task.success = false;\n          task.exception = resp.error;\n          observer.error(resp);\n        },\n        () => {\n          observer.complete();\n        }\n      );\n    });\n  }\n\n  _handleExecutingTasks(task: FinishedTask) {\n    const notification = new CdNotificationConfig(\n      NotificationType.info,\n      this.taskMessageService.getRunningTitle(task)\n    );\n    notification.isFinishedTask = true;\n    this.notificationService.show(notification);\n\n    const executingTask = new ExecutingTask(task.name, task.metadata);\n    this.summaryService.addRunningTask(executingTask);\n\n    this.taskManagerService.subscribe(\n      executingTask.name,\n      executingTask.metadata,\n      (asyncTask: FinishedTask) => {\n        this.notificationService.notifyTask(asyncTask);\n      }\n    );\n  }\n}\n","import { ElementRef, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TextAreaJsonFormatterService {\n  constructor() {}\n\n  format(textArea: ElementRef<any>): void {\n    const value = textArea?.nativeElement?.value;\n    try {\n      const formatted = JSON.stringify(JSON.parse(value), null, 2);\n      textArea.nativeElement.value = formatted;\n      textArea.nativeElement.style.height = 'auto';\n      const lineNumber = formatted.split('\\n').length;\n      const pixelPerLine = 20;\n      const pixels = lineNumber * pixelPerLine;\n      textArea.nativeElement.style.height = pixels + 'px';\n    } catch (e) {}\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { asyncScheduler, SchedulerLike, Subscription } from 'rxjs';\n\nabstract class NgZoneScheduler implements SchedulerLike {\n  protected scheduler = asyncScheduler;\n\n  constructor(protected zone: NgZone) {}\n\n  abstract schedule(...args: any[]): Subscription;\n\n  now(): number {\n    return this.scheduler.now();\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeaveNgZoneScheduler extends NgZoneScheduler {\n  constructor(zone: NgZone) {\n    super(zone);\n  }\n\n  schedule(...args: any[]): Subscription {\n    return this.zone.runOutsideAngular(() => this.scheduler.schedule.apply(this.scheduler, args));\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterNgZoneScheduler extends NgZoneScheduler {\n  constructor(zone: NgZone) {\n    super(zone);\n  }\n\n  schedule(...args: any[]): Subscription {\n    return this.zone.run(() => this.scheduler.schedule.apply(this.scheduler, args));\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgZoneSchedulerService {\n  constructor(public leave: LeaveNgZoneScheduler, public enter: EnterNgZoneScheduler) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, timer } from 'rxjs';\nimport { observeOn, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { whenPageVisible } from '../rxjs/operators/page-visibility.operator';\nimport { NgZoneSchedulerService } from './ngzone-scheduler.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimerService {\n  readonly DEFAULT_REFRESH_INTERVAL = 5000;\n  readonly DEFAULT_DUE_TIME = 0;\n  constructor(private ngZone: NgZoneSchedulerService) {}\n\n  get(\n    next: () => Observable<any>,\n    refreshInterval: number = this.DEFAULT_REFRESH_INTERVAL,\n    dueTime: number = this.DEFAULT_DUE_TIME\n  ): Observable<any> {\n    return timer(dueTime, refreshInterval, this.ngZone.leave).pipe(\n      observeOn(this.ngZone.enter),\n      switchMap(next),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n      whenPageVisible()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport _ from 'lodash';\nimport { Node } from 'carbon-components-angular/treeview/tree-node.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeViewService {\n  constructor() {}\n\n  /**\n   * Finds a node in a given nodes array\n   * @param value Value you want to match against\n   * @param nodes The Node[] array to search into\n   * @param property Property to match value against. default is 'id'\n   * @returns Node object if is found or null otherwise\n   */\n  findNode<T>(value: T, nodes: Node[], property = 'id'): Node | null {\n    let result: Node | null = null;\n    nodes.some(\n      (node: Node) =>\n        (result =\n          _.get(node, property) === value\n            ? node\n            : this.findNode(value, node.children || [], property))\n    );\n    return result;\n  }\n\n  /**\n   * Expands node and its ancestors\n   * @param nodeCopy Nodes that make up the tree component\n   * @param nodeToExpand Node to be expanded\n   * @returns New list of nodes with expand persisted\n   */\n  expandNode(nodes: Node[], nodeToExpand: Node): Node[] {\n    const nodesCopy = _.cloneDeep(nodes);\n    const expand = (tree: Node[], nodeToExpand: Node) =>\n      tree.map((node) => {\n        if (node.id === nodeToExpand.id) {\n          return { ...node, expanded: true };\n        } else if (node.children) {\n          node.children = expand(node.children, nodeToExpand);\n        }\n        return node;\n      });\n\n    let expandedNodes = expand(nodesCopy, nodeToExpand);\n    let parent = this.findNode(nodeToExpand?.value?.parent, nodesCopy);\n\n    while (parent) {\n      expandedNodes = expand(expandedNodes, parent);\n      parent = this.findNode(parent?.value?.parent, nodesCopy);\n    }\n\n    return expandedNodes;\n  }\n}\n","import { Location } from '@angular/common';\n\nimport { URLVerbs } from '../constants/app.constants';\n\nexport class URLBuilderService {\n  constructor(readonly base: string) {}\n\n  private static concatURLSegments(segments: string[]): string {\n    return segments.reduce(Location.joinWithSlash);\n  }\n\n  static buildURL(absolute: boolean, ...segments: string[]): string {\n    return URLBuilderService.concatURLSegments([...(absolute ? ['/'] : []), ...segments]);\n  }\n\n  private getURL(verb: URLVerbs, absolute = true, ...segments: string[]): string {\n    return URLBuilderService.buildURL(absolute, this.base, verb, ...segments);\n  }\n\n  getCreate(absolute = true): string {\n    return this.getURL(URLVerbs.CREATE, absolute);\n  }\n\n  getCreateFrom(item: string, absolute = true): string {\n    return this.getURL(URLVerbs.CREATE, absolute, item);\n  }\n\n  getDelete(absolute = true): string {\n    return this.getURL(URLVerbs.DELETE, absolute);\n  }\n\n  getEdit(item: string, absolute = true): string {\n    return this.getURL(URLVerbs.EDIT, absolute, item);\n  }\n  getUpdate(item: string, absolute = true): string {\n    return this.getURL(URLVerbs.UPDATE, absolute, item);\n  }\n\n  getAdd(absolute = true): string {\n    return this.getURL(URLVerbs.ADD, absolute);\n  }\n  getRemove(absolute = true): string {\n    return this.getURL(URLVerbs.REMOVE, absolute);\n  }\n\n  // Prometheus wording\n  getRecreate(item: string, absolute = true): string {\n    return this.getURL(URLVerbs.RECREATE, absolute, item);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { WizardStepModel } from '~/app/shared/models/wizard-steps';\n\nconst initialStep = [{ stepIndex: 0, isComplete: false }];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WizardStepsService {\n  steps$: BehaviorSubject<WizardStepModel[]>;\n  currentStep$: BehaviorSubject<WizardStepModel> = new BehaviorSubject<WizardStepModel>(null);\n\n  constructor() {\n    this.steps$ = new BehaviorSubject<WizardStepModel[]>(initialStep);\n    this.currentStep$.next(this.steps$.value[0]);\n  }\n\n  setTotalSteps(step: number) {\n    const steps: WizardStepModel[] = [];\n    for (let i = 0; i < step; i++) {\n      steps.push({ stepIndex: i, isComplete: false });\n    }\n    this.steps$ = new BehaviorSubject<WizardStepModel[]>(steps);\n  }\n\n  setCurrentStep(step: WizardStepModel): void {\n    this.currentStep$.next(step);\n  }\n\n  getCurrentStep(): Observable<WizardStepModel> {\n    return this.currentStep$.asObservable();\n  }\n\n  getSteps(): Observable<WizardStepModel[]> {\n    return this.steps$.asObservable();\n  }\n\n  moveToNextStep(): void {\n    const index = this.currentStep$.value.stepIndex;\n    this.currentStep$.next(this.steps$.value[index + 1]);\n  }\n\n  moveToPreviousStep(): void {\n    const index = this.currentStep$.value.stepIndex;\n    this.currentStep$.next(this.steps$.value[index - 1]);\n  }\n\n  isLastStep(): boolean {\n    return this.currentStep$.value?.stepIndex === this.steps$.value.length - 1;\n  }\n\n  isFirstStep(): boolean {\n    return this.currentStep$.value?.stepIndex === 0;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { ComponentsModule } from './components/components.module';\nimport { DataTableModule } from './datatable/datatable.module';\nimport { DirectivesModule } from './directives/directives.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { AuthGuardService } from './services/auth-guard.service';\nimport { AuthStorageService } from './services/auth-storage.service';\nimport { FormatterService } from './services/formatter.service';\nimport { FormlyArrayTypeComponent } from './forms/crud-form/formly-array-type/formly-array-type.component';\nimport { FormlyObjectTypeComponent } from './forms/crud-form/formly-object-type/formly-object-type.component';\nimport { FormlyInputTypeComponent } from './forms/crud-form/formly-input-type/formly-input-type.component';\nimport { FormlyTextareaTypeComponent } from './forms/crud-form/formly-textarea-type/formly-textarea-type.component';\nimport { BlockUIModule, BlockUIService } from 'ng-block-ui';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PipesModule,\n    ComponentsModule,\n    DataTableModule,\n    DirectivesModule,\n\n    ReactiveFormsModule,\n    FormlyModule.forRoot({\n      types: [\n        { name: 'array', component: FormlyArrayTypeComponent },\n        { name: 'object', component: FormlyObjectTypeComponent },\n        { name: 'input', component: FormlyInputTypeComponent }\n      ],\n      validationMessages: [{ name: 'required', message: 'This field is required' }]\n    }),\n    FormlyBootstrapModule,\n    BlockUIModule.forRoot()\n  ],\n  declarations: [FormlyTextareaTypeComponent],\n  exports: [ComponentsModule, PipesModule, DataTableModule, DirectivesModule],\n  providers: [AuthStorageService, AuthGuardService, FormatterService, CssHelper, BlockUIService]\n})\nexport class SharedModule {}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport { cdEncode } from '../decorators/cd-encode';\nimport { CephfsDir, CephfsQuotas } from '../models/cephfs-directory-models';\nimport { shareReplay } from 'rxjs/operators';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephfsService {\n  baseURL = 'api/cephfs';\n  baseUiURL = 'ui-api/cephfs';\n\n  constructor(private http: HttpClient) {}\n\n  list() {\n    return this.http.get(`${this.baseURL}`);\n  }\n\n  lsDir(id: number, path?: string, depth: number = 2): Observable<CephfsDir[]> {\n    let apiPath = `${this.baseUiURL}/${id}/ls_dir?depth=${depth}`;\n    if (path) {\n      apiPath += `&path=${encodeURIComponent(path)}`;\n    }\n    return this.http.get<CephfsDir[]>(apiPath).pipe(shareReplay());\n  }\n\n  getCephfs(id: number) {\n    return this.http.get(`${this.baseURL}/${id}`);\n  }\n\n  getTabs(id: number) {\n    return this.http.get(`ui-api/cephfs/${id}/tabs`);\n  }\n\n  getClients(id: number) {\n    return this.http.get(`${this.baseURL}/${id}/clients`);\n  }\n\n  evictClient(fsId: number, clientId: number) {\n    return this.http.delete(`${this.baseURL}/${fsId}/client/${clientId}`);\n  }\n\n  getMdsCounters(id: string) {\n    return this.http.get(`${this.baseURL}/${id}/mds_counters`);\n  }\n\n  getFsRootDirectory(id: string) {\n    return this.http.get(`${this.baseURL}/${id}/get_root_directory`);\n  }\n\n  mkSnapshot(id: number, path: string, name?: string) {\n    let params = new HttpParams();\n    params = params.append('path', path);\n    if (!_.isUndefined(name)) {\n      params = params.append('name', name);\n    }\n    return this.http.post(`${this.baseURL}/${id}/snapshot`, null, { params });\n  }\n\n  rmSnapshot(id: number, path: string, name: string) {\n    let params = new HttpParams();\n    params = params.append('path', path);\n    params = params.append('name', name);\n    return this.http.delete(`${this.baseURL}/${id}/snapshot`, { params });\n  }\n\n  quota(id: number, path: string, quotas: CephfsQuotas) {\n    let params = new HttpParams();\n    params = params.append('path', path);\n    return this.http.put(`${this.baseURL}/${id}/quota`, quotas, {\n      observe: 'response',\n      params\n    });\n  }\n\n  create(name: string, serviceSpec: object, dataPool = '', metadataPool = '') {\n    return this.http.post(\n      this.baseURL,\n      {\n        name: name,\n        service_spec: serviceSpec,\n        data_pool: dataPool,\n        metadata_pool: metadataPool\n      },\n      {\n        observe: 'response'\n      }\n    );\n  }\n\n  isCephFsPool(pool: any) {\n    return _.indexOf(pool.application_metadata, 'cephfs') !== -1 && !pool.pool_name.includes('/');\n  }\n\n  remove(name: string) {\n    return this.http.delete(`${this.baseURL}/remove/${name}`, {\n      observe: 'response'\n    });\n  }\n\n  rename(vol_name: string, new_vol_name: string) {\n    let requestBody = {\n      name: vol_name,\n      new_name: new_vol_name\n    };\n    return this.http.put(`${this.baseURL}/rename`, requestBody, {\n      observe: 'response'\n    });\n  }\n\n  setAuth(fsName: string, clientId: number, caps: string[], rootSquash: boolean) {\n    return this.http.put(`${this.baseURL}/auth`, {\n      fs_name: fsName,\n      client_id: `client.${clientId}`,\n      caps: caps,\n      root_squash: rootSquash\n    });\n  }\n\n  getUsedPools(): Observable<number[]> {\n    return this.http.get<number[]>(`${this.baseUiURL}/used-pools`);\n  }\n}\n","<ng-container *ngIf=\"codes.length > 1; else singleCodeBlock\">\n  <pre id=\"bigCodeBlock\">\n    <span *ngFor=\"let code of codes\"\n          class=\"d-flex px-2 py-3 align-items-center justify-content-between text-dark\">\n      <span [ngClass]=\"{'text-wrap': textWrap}\">{{code}}</span>\n      <cd-copy-2-clipboard-button\n          [source]=\"code\"\n          [byId]=\"false\"></cd-copy-2-clipboard-button>\n    </span>\n  </pre>\n</ng-container>\n\n<ng-template #singleCodeBlock>\n  <pre class=\"d-flex px-2 py-3 align-items-center justify-content-between text-dark\"\n       id=\"singleCodeBlock\">\n    <span [ngClass]=\"{'text-wrap': textWrap}\">{{codes}}</span>\n    <cd-copy-2-clipboard-button\n      [source]=\"codes\"\n      [byId]=\"false\"></cd-copy-2-clipboard-button>\n  </pre>\n</ng-template>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-code-block',\n  templateUrl: './code-block.component.html',\n  styleUrls: ['./code-block.component.scss']\n})\nexport class CodeBlockComponent {\n  @Input()\n  codes: string[];\n\n  @Input()\n  textWrap: boolean = false;\n\n  @Input()\n  grayBg: boolean = false;\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-cephfs-mount-details',\n  templateUrl: './cephfs-mount-details.component.html',\n  styleUrls: ['./cephfs-mount-details.component.scss']\n})\nexport class CephfsMountDetailsComponent extends BaseModal implements OnInit {\n  @ViewChild('mountDetailsTpl', { static: true })\n  mountDetailsTpl: any;\n  onCancel?: Function;\n  private MOUNT_DIRECTORY = '<MOUNT_DIRECTORY>';\n  mountData!: Record<string, any>;\n  constructor(public activeModal: NgbActiveModal) {\n    super();\n  }\n  mount!: string;\n  fuse!: string;\n  nfs!: string;\n\n  ngOnInit(): void {\n    this.mount = `sudo mount -t ceph <CLIENT_USER>@${this.mountData?.fsId}.${this.mountData?.fsName}=${this.mountData?.rootPath} ${this.MOUNT_DIRECTORY}`;\n    this.fuse = `sudo ceph-fuse  ${this.MOUNT_DIRECTORY} -r ${this.mountData?.rootPath} --client_mds_namespace=${this.mountData?.fsName}`;\n    this.nfs = `sudo mount -t nfs -o port=<PORT> <IP of active_nfs daemon>:<export_name> ${this.MOUNT_DIRECTORY}`;\n  }\n\n  cancel() {\n    this.closeModal();\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>\n      Attach commands\n    </h3>\n  </cds-modal-header>\n\n  <div class=\"cds--modal-content\">\n    <h5 class=\"fw-bold\"\n        i18n>\n      Using Mount command\n    </h5>\n    <cd-code-block textWrap=\"true\"\n                   [codes]=\"[mount]\"></cd-code-block>\n\n    <h5 class=\"fw-bold\"\n        i18n>\n      Using FUSE command\n    </h5>\n    <cd-code-block textWrap=\"true\"\n                   [codes]=\"[fuse]\"></cd-code-block>\n\n    <h5 class=\"fw-bold\"\n        i18n>\n        Using NFS Command\n    </h5>\n    <cd-code-block textWrap=\"true\"\n                   [codes]=\"[nfs]\"></cd-code-block>\n  </div>\n  <cd-form-button-panel [modalForm]=\"true\"\n                        [showSubmit]=\"false\"\n                        (backAction)=\"cancel()\"\n                        i18n></cd-form-button-panel>\n</cds-modal>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HealthService {\n  constructor(private http: HttpClient) {}\n\n  getFullHealth() {\n    return this.http.get('api/health/full');\n  }\n\n  getMinimalHealth() {\n    return this.http.get('api/health/minimal');\n  }\n\n  getClusterCapacity() {\n    return this.http.get('api/health/get_cluster_capacity');\n  }\n\n  getClusterFsid() {\n    return this.http.get('api/health/get_cluster_fsid');\n  }\n\n  getOrchestratorName() {\n    return this.http.get('api/health/get_orchestrator_name');\n  }\n\n  getTelemetryStatus() {\n    return this.http.get('api/health/get_telemetry_status');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CephfsService } from './cephfs.service';\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\nimport { CephfsDir } from '../models/cephfs-directory-models';\nimport { filter, map, retry, share, switchMap, takeUntil, tap } from 'rxjs/operators';\n\ntype DirectoryStore = Record<number, CephfsDir[]>;\n\nconst POLLING_INTERVAL = 600 * 1000;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DirectoryStoreService {\n  private _directoryStoreSubject = new BehaviorSubject<DirectoryStore>({});\n\n  readonly directoryStore$: Observable<DirectoryStore> = this._directoryStoreSubject.asObservable();\n\n  stopDirectoryPolling = new Subject();\n\n  isLoading = true;\n\n  constructor(private cephFsService: CephfsService) {}\n\n  loadDirectories(id: number, path = '/', depth = 3) {\n    this.directoryStore$\n      .pipe(\n        filter((store: DirectoryStore) => !Boolean(store[id])),\n        switchMap(() =>\n          timer(0, POLLING_INTERVAL).pipe(\n            switchMap(() =>\n              this.cephFsService.lsDir(id, path, depth).pipe(\n                tap((response) => {\n                  this.isLoading = false;\n                  this._directoryStoreSubject.next({ [id]: response });\n                })\n              )\n            ),\n            retry(),\n            share(),\n            takeUntil(this.stopDirectoryPolling)\n          )\n        )\n      )\n      .subscribe();\n  }\n\n  search(term: string, id: number, limit = 5) {\n    return this.directoryStore$.pipe(\n      map((store: DirectoryStore) => {\n        const regEx = new RegExp(term, 'gi');\n        const results = store[id]\n          .filter((x) => regEx.test(x.path))\n          .map((x) => x.path)\n          .slice(0, limit);\n        return results;\n      })\n    );\n  }\n\n  stopPollingDictories() {\n    this.stopDirectoryPolling.next();\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n  <ng-container *cdFormLoading=\"loading\">\n    <section class=\"cds--modal-content\">\n      <form name=\"form\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"form\">\n\n      <!-- FsName -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"fsName\"\n                        i18n\n                        cdRequiredField=\"FS name\"\n                        [invalid]=\"!form.controls['fsName'].valid && (form.controls['fsName'].dirty)\"\n                        [invalidText]=\"fsNameError\"\n                        i18n-invalidText>FS name\n          <input cdsText\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"fsName\"\n                 name=\"fsName\"\n                 formControlName=\"fsName\"\n                 size=\"sm\"\n                 [invalid]=\"!form.controls['fsName'].valid && (form.controls['fsName'].dirty)\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #fsNameError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('fsName', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- UserId -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"userId\"\n                        i18n\n                        cdRequiredField=\"User ID\"\n                        [helperText]=\"userIdHelperText\"\n                        [invalid]=\"!form.controls['userId'].valid && (form.controls['userId'].dirty)\"\n                        [invalidText]=\"userIdError\"\n                        i18n-invalidText>User ID\n          <input cdsText\n                 value=\"client.\"\n                 readonly>\n\n          <input cdsText\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"userId\"\n                 name=\"userId\"\n                 formControlName=\"userId\"\n                 [invalid]=\"!form.controls['userId'].valid && (form.controls['userId'].dirty)\">\n        </cds-text-label>\n        <ng-template #userIdHelperText>\n          You can manage users from\n          <a routerLink=\"/ceph-users\"\n             (click)=\"closeModal()\">Ceph Users</a>\n          page\n        </ng-template>\n        <ng-template #userIdError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('userId', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Directory -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"directory\"\n                        i18n\n                        cdRequiredField=\"Directory\"\n                        [invalid]=\"!form.controls['directory'].valid && (form.controls['directory'].dirty)\"\n                        [invalidText]=\"directoryError\"\n                        helperText=\"Path to restrict access to\"\n                        [skeleton]=\"directoryStore.isLoading\"\n                        i18n-invalidText\n                        i18n-helperText>Directory\n          <input cdsText\n                 type=\"text\"\n                 [placeholder]=\"directoryStore.isLoading ? '' : 'Directory path'\"\n                 i18n-placeholder\n                 id=\"directory\"\n                 name=\"directory\"\n                 formControlName=\"directory\"\n                 [skeleton]=\"directoryStore.isLoading\"\n                 [invalid]=\"!form.controls['directory'].valid && (form.controls['directory'].dirty)\"\n                 [ngbTypeahead]=\"search\">\n        </cds-text-label>\n        <ng-template #directoryError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"form.showError('directory', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Permissions -->\n      <div class=\"form-item\">\n        <fieldset>\n          <label class=\"cds--label\"\n                 i18n>Permissions</label>\n            <ng-container *ngFor=\"let permission of clientPermissions\">\n              <cds-checkbox i18n-label\n                            [id]=\"permission.name\"\n                            [name]=\"permission.name\"\n                            [formControlName]=\"permission.name\">\n              {{ permission.name | titlecase }}\n              <cd-help-text *ngIf=\"permission.description\">\n                {{ permission.description }}\n              </cd-help-text>\n            </cds-checkbox>\n          </ng-container>\n        </fieldset>\n        </div>\n      </form>\n    </section>\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          [form]=\"form\"\n                          [submitText]=\"(action | titlecase)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n  </ng-container>\n</cds-modal>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnInit,\n  Optional\n} from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { OperatorFunction, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { DirectoryStoreService } from '~/app/shared/api/directory-store.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst DEBOUNCE_TIMER = 300;\n\n@Component({\n  selector: 'cd-cephfs-auth-modal',\n  templateUrl: './cephfs-auth-modal.component.html',\n  styleUrls: ['./cephfs-auth-modal.component.scss']\n})\nexport class CephfsAuthModalComponent extends CdForm implements OnInit, AfterViewInit {\n  subvolumeGroup: string;\n  subvolume: string;\n  isDefaultSubvolumeGroup = false;\n  isSubvolume = false;\n  form: CdFormGroup;\n  action: string;\n  resource: string;\n  icons = Icons;\n\n  clientPermissions = [\n    {\n      name: 'read',\n      description: $localize`Read permission is the minimum givable access`\n    },\n    {\n      name: 'write',\n      description: $localize`Permission to set layouts or quotas, write access needed`\n    },\n    {\n      name: 'quota',\n      description: $localize`Permission to set layouts or quotas, write access needed`\n    },\n    {\n      name: 'snapshot',\n      description: $localize`Permission to create or delete snapshots, write access needed`\n    },\n    {\n      name: 'rootSquash',\n      description: $localize`Safety measure to prevent scenarios such as accidental sudo rm -rf /path`\n    }\n  ];\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    public directoryStore: DirectoryStoreService,\n    private cephfsService: CephfsService,\n    private taskWrapper: TaskWrapperService,\n    private modalService: ModalCdsService,\n    private changeDetectorRef: ChangeDetectorRef,\n\n    @Optional() @Inject('fsName') public fsName: string,\n    @Optional() @Inject('id') public id: number\n  ) {\n    super();\n    this.action = this.actionLabels.UPDATE;\n    this.resource = $localize`access`;\n  }\n\n  ngAfterViewInit(): void {\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnInit() {\n    this.directoryStore.loadDirectories(this.id, '/', 3);\n    this.createForm();\n    this.loadingReady();\n    if (this.directoryStore?.isLoading) {\n      this.form.get('directory').disable();\n    } else {\n      this.form.get('directory').disable();\n    }\n  }\n\n  createForm() {\n    this.form = new CdFormGroup({\n      fsName: new FormControl(\n        { value: this.fsName, disabled: true },\n        {\n          validators: [Validators.required]\n        }\n      ),\n      directory: new FormControl(undefined, {\n        updateOn: 'blur',\n        validators: [Validators.required]\n      }),\n      userId: new FormControl(undefined, {\n        validators: [Validators.required]\n      }),\n      read: new FormControl(\n        { value: true, disabled: true },\n        {\n          validators: [Validators.required]\n        }\n      ),\n      write: new FormControl(undefined),\n      snapshot: new FormControl({ value: false, disabled: true }),\n      quota: new FormControl({ value: false, disabled: true }),\n      rootSquash: new FormControl(undefined)\n    });\n  }\n\n  search: OperatorFunction<string, readonly string[]> = (input: Observable<string>) =>\n    input.pipe(\n      debounceTime(DEBOUNCE_TIMER),\n      distinctUntilChanged(),\n      switchMap((term) =>\n        this.directoryStore.search(term, this.id).pipe(\n          catchError(() => {\n            return of([]);\n          })\n        )\n      )\n    );\n\n  onSubmit() {\n    const clientId: number = this.form.getValue('userId');\n    const caps: string[] = [this.form.getValue('directory'), this.transformPermissions()];\n    const rootSquash: boolean = this.form.getValue('rootSquash');\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('cephfs/auth', {\n          clientId: clientId\n        }),\n        call: this.cephfsService.setAuth(this.fsName, clientId, caps, rootSquash)\n      })\n      .subscribe({\n        error: () => this.form.setErrors({ cdSubmitButton: true }),\n        complete: () => {\n          this.modalService.dismissAll();\n        }\n      });\n  }\n\n  transformPermissions(): string {\n    const write = this.form.getValue('write');\n    const snapshot = this.form.getValue('snapshot');\n    const quota = this.form.getValue('quota');\n    return `r${write ? 'w' : ''}${quota ? 'p' : ''}${snapshot ? 's' : ''}`;\n  }\n\n  toggleFormControl() {\n    const snapshot = this.form.get('snapshot');\n    const quota = this.form.get('quota');\n    snapshot.disabled ? snapshot.enable() : snapshot.disable();\n    quota.disabled ? quota.enable() : quota.disable();\n  }\n}\n","import { Component, ElementRef, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport 'chartjs-adapter-moment';\nimport { Chart, registerables } from 'chart.js';\n\nimport { ChartTooltip } from '~/app/shared/models/chart-tooltip';\n\n@Component({\n  selector: 'cd-cephfs-chart',\n  templateUrl: './cephfs-chart.component.html',\n  styleUrls: ['./cephfs-chart.component.scss']\n})\nexport class CephfsChartComponent implements OnChanges, OnInit {\n  @ViewChild('chartCanvas', { static: true })\n  chartCanvas: ElementRef;\n  @ViewChild('chartTooltip', { static: true })\n  chartTooltip: ElementRef;\n\n  @Input()\n  mdsCounter: any;\n\n  lhsCounter = 'mds_mem.ino';\n  rhsCounter = 'mds_server.handle_client_request';\n\n  chart: {\n    datasets: any[];\n    options: any;\n    chartType: any;\n  } = {\n    datasets: [\n      {\n        label: this.lhsCounter,\n        yAxisID: 'LHS',\n        data: [],\n        tension: 0.1,\n        fill: {\n          target: 'origin'\n        }\n      },\n      {\n        label: this.rhsCounter,\n        yAxisID: 'RHS',\n        data: [],\n        tension: 0.1,\n        fill: {\n          target: 'origin'\n        }\n      }\n    ],\n    options: {\n      plugins: {\n        title: {\n          text: '',\n          display: true\n        },\n        tooltip: {\n          enabled: false,\n          mode: 'index',\n          intersect: false,\n          position: 'nearest',\n          callbacks: {\n            // Pick the Unix timestamp of the first tooltip item.\n            title: (context: any): string => {\n              let ts = '';\n              if (context.length > 0) {\n                ts = context[0].label;\n              }\n              return moment(ts).format('LTS');\n            }\n          }\n        },\n        legend: {\n          position: 'top'\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          position: 'top',\n          type: 'time',\n          time: {\n            displayFormats: {\n              quarter: 'MMM YYYY'\n            }\n          },\n          ticks: {\n            maxRotation: 0\n          }\n        },\n        LHS: {\n          type: 'linear',\n          position: 'left'\n        },\n        RHS: {\n          type: 'linear',\n          position: 'right'\n        }\n      }\n    },\n    chartType: 'line'\n  };\n\n  constructor() {\n    Chart.register(...registerables);\n  }\n\n  ngOnInit() {\n    if (_.isUndefined(this.mdsCounter)) {\n      return;\n    }\n    this.setChartTooltip();\n    this.updateChart();\n  }\n\n  ngOnChanges() {\n    if (_.isUndefined(this.mdsCounter)) {\n      return;\n    }\n    this.updateChart();\n  }\n\n  private setChartTooltip() {\n    const chartTooltip = new ChartTooltip(\n      this.chartCanvas,\n      this.chartTooltip,\n      (tooltip: any) => tooltip.caretX + 'px',\n      (tooltip: any) => tooltip.caretY - tooltip.height - 23 + 'px'\n    );\n    chartTooltip.checkOffset = true;\n    const chartOptions: any = {\n      title: {\n        text: this.mdsCounter.name\n      },\n      tooltip: {\n        external: (context: any) => chartTooltip.customTooltips(context)\n      }\n    };\n    _.merge(this.chart, { options: { plugins: chartOptions } });\n  }\n\n  private updateChart() {\n    const chartDataset: any[] = [\n      {\n        data: this.convertTimeSeries(this.mdsCounter[this.lhsCounter])\n      },\n      {\n        data: this.deltaTimeSeries(this.mdsCounter[this.rhsCounter])\n      }\n    ];\n    _.merge(this.chart, {\n      datasets: chartDataset\n    });\n    this.chart.datasets = [...this.chart.datasets]; // Force angular to update\n  }\n\n  /**\n   * Convert ceph-mgr's time series format (list of 2-tuples\n   * with seconds-since-epoch timestamps) into what chart.js\n   * can handle (list of objects with millisecs-since-epoch\n   * timestamps)\n   */\n  private convertTimeSeries(sourceSeries: any) {\n    const data: any[] = [];\n    _.each(sourceSeries, (dp) => {\n      data.push({\n        x: dp[0] * 1000,\n        y: dp[1]\n      });\n    });\n\n    /**\n     * MDS performance counters chart is expecting the same number of items\n     * from each data series. Since in deltaTimeSeries we are ignoring the first\n     * element, we will do the same here.\n     */\n    data.shift();\n\n    return data;\n  }\n\n  private deltaTimeSeries(sourceSeries: any) {\n    let i;\n    let prev = sourceSeries[0];\n    const result = [];\n    for (i = 1; i < sourceSeries.length; i++) {\n      const cur = sourceSeries[i];\n\n      result.push({\n        x: cur[0] * 1000,\n        y: cur[1] - prev[1]\n      });\n\n      prev = cur;\n    }\n    return result;\n  }\n}\n","<div class=\"chart-container\">\n  <canvas baseChart\n          #chartCanvas\n          [datasets]=\"chart.datasets\"\n          [options]=\"chart.options\"\n          [type]=\"chart.chartType\">\n  </canvas>\n  <div class=\"chartjs-tooltip\"\n       #chartTooltip>\n    <table></table>\n  </div>\n</div>\n","<div class=\"row\">\n  <div class=\"col-sm-8\">\n    <legend i18n>Ranks</legend>\n    <cd-table [data]=\"data.ranks\"\n              [columns]=\"columns.ranks\"\n              [toolHeader]=\"false\">\n    </cd-table>\n\n    <legend i18n>Pools</legend>\n    <cd-table [data]=\"data.pools\"\n              [columns]=\"columns.pools\"\n              [toolHeader]=\"false\">\n    </cd-table>\n  </div>\n\n  <div class=\"col-sm-4\">\n    <legend i18n>Standbys</legend>\n    <cd-table-key-value [data]=\"standbys\">\n    </cd-table-key-value>\n  </div>\n</div>\n\n<legend i18n>MDS performance counters</legend>\n<div class=\"row\"\n     *ngFor=\"let mdsCounter of objectValues(data.mdsCounters); trackBy: trackByFn\">\n  <div class=\"col-md-12\">\n    <cd-cephfs-chart [mdsCounter]=\"mdsCounter\"></cd-cephfs-chart>\n  </div>\n</div>\n\n<!-- templates -->\n<ng-template #poolUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar [total]=\"row.size\"\n                [used]=\"row.used\"\n                [title]=\"row.pool_name\"></cd-usage-bar>\n</ng-template>\n\n<ng-template #activityTmpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  {{ row.state === 'standby-replay' ? 'Evts' : 'Reqs' }}: {{ value | dimless }} /s\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\n\n@Component({\n  selector: 'cd-cephfs-detail',\n  templateUrl: './cephfs-detail.component.html',\n  styleUrls: ['./cephfs-detail.component.scss']\n})\nexport class CephfsDetailComponent implements OnChanges, OnInit {\n  @ViewChild('poolUsageTpl', { static: true })\n  poolUsageTpl: TemplateRef<any>;\n  @ViewChild('activityTmpl', { static: true })\n  activityTmpl: TemplateRef<any>;\n\n  @Input()\n  data: {\n    standbys: string;\n    pools: any[];\n    ranks: any[];\n    mdsCounters: object;\n    name: string;\n  };\n\n  columns: {\n    ranks: CdTableColumn[];\n    pools: CdTableColumn[];\n  };\n  standbys: any[] = [];\n\n  objectValues = Object.values;\n\n  constructor(private dimlessBinary: DimlessBinaryPipe, private dimless: DimlessPipe) {}\n\n  ngOnChanges() {\n    this.setStandbys();\n  }\n\n  private setStandbys() {\n    this.standbys = [\n      {\n        key: $localize`Standby daemons`,\n        value: this.data.standbys\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.columns = {\n      ranks: [\n        { prop: 'rank', name: $localize`Rank` },\n        { prop: 'state', name: $localize`State` },\n        { prop: 'mds', name: $localize`Daemon` },\n        { prop: 'activity', name: $localize`Activity`, cellTemplate: this.activityTmpl },\n        { prop: 'dns', name: $localize`Dentries`, pipe: this.dimless },\n        { prop: 'inos', name: $localize`Inodes`, pipe: this.dimless },\n        { prop: 'dirs', name: $localize`Dirs`, pipe: this.dimless },\n        { prop: 'caps', name: $localize`Caps`, pipe: this.dimless }\n      ],\n      pools: [\n        { prop: 'pool', name: $localize`Pool` },\n        { prop: 'type', name: $localize`Type` },\n        { prop: 'size', name: $localize`Size`, pipe: this.dimlessBinary },\n        {\n          name: $localize`Usage`,\n          cellTemplate: this.poolUsageTpl,\n          comparator: (_valueA: any, _valueB: any, rowA: any, rowB: any) => {\n            const valA = rowA.used / rowA.avail;\n            const valB = rowB.used / rowB.avail;\n\n            if (valA === valB) {\n              return 0;\n            }\n\n            if (valA > valB) {\n              return 1;\n            } else {\n              return -1;\n            }\n          }\n        } as CdTableColumn\n      ]\n    };\n  }\n\n  trackByFn(_index: any, item: any) {\n    return item.name;\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { BaseModal } from 'carbon-components-angular';\n\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-cephfs-clients',\n  templateUrl: './cephfs-clients.component.html',\n  styleUrls: ['./cephfs-clients.component.scss']\n})\nexport class CephfsClientsComponent extends BaseModal implements OnInit {\n  @Input()\n  id: number;\n\n  @Input()\n  clients: {\n    data: any[];\n    status: TableStatusViewCache;\n  };\n\n  @Output()\n  triggerApiUpdate = new EventEmitter();\n\n  columns: CdTableColumn[];\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  modalRef: NgbModalRef;\n\n  selection = new CdTableSelection();\n\n  constructor(\n    private cephfsService: CephfsService,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    private authStorageService: AuthStorageService,\n    private actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().cephfs;\n    const evictAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.signOut,\n      click: () => this.evictClientModal(),\n      name: this.actionLabels.EVICT\n    };\n    this.tableActions = [evictAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      { prop: 'id', name: $localize`id` },\n      { prop: 'type', name: $localize`type` },\n      { prop: 'state', name: $localize`state` },\n      { prop: 'version', name: $localize`version` },\n      { prop: 'hostname', name: $localize`Host` },\n      { prop: 'root', name: $localize`root` }\n    ];\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  evictClient(clientId: number) {\n    this.cephfsService.evictClient(this.id, clientId).subscribe(\n      () => {\n        this.triggerApiUpdate.emit();\n        this.closeModal();\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Evicted client '${clientId}'`\n        );\n      },\n      () => {\n        this.modalRef.componentInstance.stopLoadingSpinner();\n      }\n    );\n  }\n\n  evictClientModal() {\n    const clientId = this.selection.first().id;\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'client',\n      itemNames: [clientId],\n      actionDescription: 'evict',\n      submitAction: () => this.evictClient(clientId)\n    });\n  }\n}\n","<cd-table [data]=\"clients.data\"\n          [columns]=\"columns\"\n          [status]=\"clients.status\"\n          [autoReload]=\"-1\"\n          (fetchData)=\"triggerApiUpdate.emit()\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n","<div class=\"row\">\n  <div class=\"col-sm-4 pe-0\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <button type=\"button\"\n                [class.disabled]=\"loadingIndicator\"\n                class=\"btn btn-light pull-right\"\n                (click)=\"refreshAllDirectories()\">\n          <i [ngClass]=\"[icons.large, icons.refresh]\"\n             [class.fa-spin]=\"loadingIndicator\"></i>\n        </button>\n      </div>\n      <div class=\"card-body card-tree\">\n        <cds-tree-view [tree]=\"nodes\"\n                       (select)=\"selectNode($event)\">\n        </cds-tree-view>\n        <div *ngIf=\"loadingIndicator\">\n          <i [ngClass]=\"[icons.spinner, icons.spin]\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Selection details -->\n  <div class=\"col-sm-8 metadata\"\n       *ngIf=\"selectedDir\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        {{ selectedDir.path }}\n      </div>\n      <div class=\"card-body\">\n        <ng-container *ngIf=\"selectedDir.path !== '/'\">\n          <legend i18n>Quotas</legend>\n          <cd-table [data]=\"settings\"\n                    [columns]=\"quota.columns\"\n                    [limit]=\"0\"\n                    [footer]=\"false\"\n                    selectionType=\"single\"\n                    (updateSelection)=\"quota.updateSelection($event)\"\n                    [onlyActionHeader]=\"true\"\n                    identifier=\"quotaKey\"\n                    [forceIdentifier]=\"true\"\n                    [toolHeader]=\"false\">\n            <cd-table-actions class=\"only-table-actions\"\n                              [permission]=\"permission\"\n                              [selection]=\"quota.selection\"\n                              [tableActions]=\"quota.tableActions\">\n            </cd-table-actions>\n          </cd-table>\n        </ng-container>\n\n        <legend i18n>Snapshots</legend>\n        <cd-table [data]=\"selectedDir.snapshots\"\n                  [columns]=\"snapshot.columns\"\n                  identifier=\"name\"\n                  forceIdentifier=\"true\"\n                  selectionType=\"single\"\n                  (updateSelection)=\"snapshot.updateSelection($event)\">\n          <cd-table-actions class=\"table-actions\"\n                            [permission]=\"permission\"\n                            [selection]=\"snapshot.selection\"\n                            [tableActions]=\"snapshot.tableActions\">\n          </cd-table-actions>\n        </cd-table>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #origin\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span class=\"quota-origin\"\n        (click)=\"selectOrigin(value)\">{{value}}</span>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\n\nimport { TreeViewComponent } from 'carbon-components-angular';\nimport { Node } from 'carbon-components-angular/treeview/tree-node.types';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdFormModalFieldConfig } from '~/app/shared/models/cd-form-modal-field-config';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport {\n  CephfsDir,\n  CephfsQuotas,\n  CephfsSnapshot\n} from '~/app/shared/models/cephfs-directory-models';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TreeViewService } from '~/app/shared/services/tree-view.service';\n\nclass QuotaSetting {\n  row: {\n    // Used in quota table\n    name: string;\n    value: number | string;\n    originPath: string;\n  };\n  quotaKey: string;\n  dirValue: number;\n  nextTreeMaximum: {\n    value: number;\n    path: string;\n  };\n}\n\ntype TQuotaSettings = 'max_bytes' | 'max_files';\n\n@Component({\n  selector: 'cd-cephfs-directories',\n  templateUrl: './cephfs-directories.component.html',\n  styleUrls: ['./cephfs-directories.component.scss']\n})\nexport class CephfsDirectoriesComponent implements OnInit, OnChanges {\n  @ViewChild(TreeViewComponent)\n  treeComponent: TreeViewComponent;\n  @ViewChild('origin', { static: true })\n  originTmpl: TemplateRef<any>;\n\n  @Input()\n  id: number;\n\n  private dirs: CephfsDir[];\n  private nodeIds: { [path: string]: CephfsDir };\n  private requestedPaths: string[];\n  private loadingTimeout: any;\n\n  icons = Icons;\n  loadingIndicator = false;\n  loading: Record<string, boolean> = {};\n  permission: Permission;\n  selectedDir: CephfsDir;\n  settings: QuotaSetting[];\n  quota: {\n    columns: CdTableColumn[];\n    selection: CdTableSelection;\n    tableActions: CdTableAction[];\n    updateSelection: Function;\n  };\n  snapshot: {\n    columns: CdTableColumn[];\n    selection: CdTableSelection;\n    tableActions: CdTableAction[];\n    updateSelection: Function;\n  };\n  nodes: Node[] = [];\n  alreadyExists: boolean;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private modalService: ModalCdsService,\n    private cephfsService: CephfsService,\n    private cdDatePipe: CdDatePipe,\n    private actionLabels: ActionLabelsI18n,\n    private notificationService: NotificationService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private treeViewService: TreeViewService\n  ) {}\n\n  async selectNode(node: Node) {\n    this.selectedDir = this.getDirectory(node);\n    if (node.id === '/') {\n      return;\n    }\n    this.setSettings(node);\n    await this.updateDirectory(node.id);\n    this.nodes = this.treeViewService.expandNode(this.nodes, node);\n  }\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().cephfs;\n    this.setUpQuotaTable();\n    this.setUpSnapshotTable();\n  }\n\n  private setUpQuotaTable() {\n    this.quota = {\n      columns: [\n        {\n          prop: 'row.name',\n          name: $localize`Name`,\n          flexGrow: 1\n        },\n        {\n          prop: 'row.value',\n          name: $localize`Value`,\n          sortable: false,\n          flexGrow: 1\n        },\n        {\n          prop: 'row.originPath',\n          name: $localize`Origin`,\n          sortable: false,\n          cellTemplate: this.originTmpl,\n          flexGrow: 1\n        }\n      ],\n      selection: new CdTableSelection(),\n      updateSelection: (selection: CdTableSelection) => {\n        this.quota.selection = selection;\n      },\n      tableActions: [\n        {\n          name: this.actionLabels.SET,\n          icon: Icons.edit,\n          permission: 'update',\n          visible: (selection) =>\n            !selection.hasSelection || (selection.first() && selection.first().dirValue === 0),\n          click: () => this.updateQuotaModal()\n        },\n        {\n          name: this.actionLabels.UPDATE,\n          icon: Icons.edit,\n          permission: 'update',\n          visible: (selection) => selection.first() && selection.first().dirValue > 0,\n          click: () => this.updateQuotaModal()\n        },\n        {\n          name: this.actionLabels.UNSET,\n          icon: Icons.destroy,\n          permission: 'update',\n          disable: (selection) =>\n            !selection.hasSelection || (selection.first() && selection.first().dirValue === 0),\n          click: () => this.unsetQuotaModal()\n        }\n      ]\n    };\n  }\n\n  private setUpSnapshotTable() {\n    this.snapshot = {\n      columns: [\n        {\n          prop: 'name',\n          name: $localize`Name`,\n          flexGrow: 1\n        },\n        {\n          prop: 'path',\n          name: $localize`Path`,\n          flexGrow: 1.5,\n          cellTransformation: CellTemplate.path\n        },\n        {\n          prop: 'created',\n          name: $localize`Created`,\n          flexGrow: 1,\n          pipe: this.cdDatePipe\n        }\n      ],\n      selection: new CdTableSelection(),\n      updateSelection: (selection: CdTableSelection) => {\n        this.snapshot.selection = selection;\n      },\n      tableActions: [\n        {\n          name: this.actionLabels.CREATE,\n          icon: Icons.add,\n          permission: 'create',\n          canBePrimary: (selection) => !selection.hasSelection,\n          click: () => this.createSnapshot(),\n          disable: () => this.disableCreateSnapshot()\n        },\n        {\n          name: this.actionLabels.DELETE,\n          icon: Icons.destroy,\n          permission: 'delete',\n          click: () => this.deleteSnapshotModal()\n        }\n      ]\n    };\n  }\n\n  private disableCreateSnapshot(): string | boolean {\n    const folders = this.selectedDir.path.split('/').slice(1);\n    // With depth of 4 or more we have the subvolume files/folders for which we cannot create\n    // a snapshot. Somehow, you can create a snapshot of the subvolume but not its files.\n    if (folders.length >= 4 && folders[0] === 'volumes') {\n      return $localize`Cannot create snapshots for files/folders in the subvolume ${folders[2]}`;\n    }\n    return false;\n  }\n\n  ngOnChanges() {\n    this.selectedDir = undefined;\n    this.dirs = [];\n    this.requestedPaths = [];\n    this.nodeIds = {};\n    if (this.id) {\n      this.setRootNode();\n      this.firstCall();\n    }\n  }\n\n  private setRootNode() {\n    this.nodes = [\n      {\n        name: '/',\n        label: '/',\n        id: '/',\n        expanded: true\n      }\n    ];\n  }\n\n  private firstCall() {\n    const path = '/';\n    setTimeout(async () => {\n      await this.updateDirectory(path);\n    }, 10);\n  }\n\n  updateDirectory(path: string): Promise<Node[]> {\n    this.unsetLoadingIndicator();\n    if (!this.requestedPaths.includes(path)) {\n      this.requestedPaths.push(path);\n    } else if (this.loading[path] === true) {\n      return undefined; // Path is currently fetched.\n    }\n    return new Promise((resolve) => {\n      this.setLoadingIndicator(path, true);\n      this.cephfsService.lsDir(this.id, path).subscribe((dirs) => {\n        this.updateTreeStructure(dirs);\n        this.updateQuotaTable();\n        this.updateTree();\n        resolve(this.getChildren(path));\n        this.setLoadingIndicator(path, false);\n\n        const hasActiveNodes = !!this.treeViewService.findNode(true, this.nodes, 'active');\n        if (path === '/' && !hasActiveNodes) {\n          this.treeComponent.select.emit(this.getNode('/'));\n        }\n      });\n    });\n  }\n\n  private setLoadingIndicator(path: string, loading: boolean) {\n    this.loading[path] = loading;\n    this.unsetLoadingIndicator();\n  }\n\n  private getSubDirectories(path: string, tree: CephfsDir[] = this.dirs): CephfsDir[] {\n    return tree.filter((d) => d.parent === path);\n  }\n\n  private getChildren(path: string): Node[] {\n    const subTree = this.getSubTree(path);\n    return _.sortBy(this.getSubDirectories(path), 'path').map((dir) =>\n      this.createNode(dir, subTree)\n    );\n  }\n\n  private createNode(dir: CephfsDir, subTree?: CephfsDir[]): Node {\n    this.nodeIds[dir.path] = dir;\n    if (!subTree) {\n      this.getSubTree(dir.parent);\n    }\n\n    if (dir.path === '/volumes') {\n      const innerNode = this.treeViewService.findNode('/volumes', this.nodes);\n      if (innerNode) {\n        this.treeComponent.select.emit(innerNode);\n      }\n    }\n    return {\n      label: dir.name,\n      name: dir.name,\n      id: dir.path,\n      expanded: dir.path === '/volumes',\n      children: this.getSubDirectories(dir.path, subTree).map(this.toNode),\n      value: {\n        parent: dir?.parent\n      }\n    };\n  }\n\n  private getSubTree(path: string): CephfsDir[] {\n    return this.dirs.filter((d) => d.parent && d.parent.startsWith(path));\n  }\n\n  private setSettings(node: Node) {\n    const readable = (value: number, fn?: (arg0: number) => number | string): number | string =>\n      value ? (fn ? fn(value) : value) : '';\n\n    this.settings = [\n      this.getQuota(node, 'max_files', readable),\n      this.getQuota(node, 'max_bytes', (value) =>\n        readable(value, (v) => this.dimlessBinaryPipe.transform(v))\n      )\n    ];\n  }\n\n  private getQuota(\n    tree: Node,\n    quotaKey: TQuotaSettings,\n    valueConvertFn: (number: number) => number | string\n  ): QuotaSetting {\n    // Get current maximum\n    const currentPath = tree.id;\n    tree = this.getOrigin(tree, quotaKey);\n    const dir = this.getDirectory(tree);\n    const value = dir.quotas[quotaKey];\n    // Get next tree maximum\n    // => The value that isn't changeable through a change of the current directories quota value\n    let nextMaxValue = value;\n    let nextMaxPath = dir.path;\n    if (tree.id === currentPath) {\n      if (tree.value?.parent === '/') {\n        // The value will never inherit any other value, so it has no maximum.\n        nextMaxValue = 0;\n      } else {\n        const parent = this.getParent(this.dirs, tree.value?.parent);\n        if (parent) {\n          const nextMaxDir = this.getDirectory(this.getOrigin(parent, quotaKey));\n          nextMaxValue = nextMaxDir.quotas[quotaKey];\n          nextMaxPath = nextMaxDir.path;\n        }\n      }\n    }\n    return {\n      row: {\n        name: quotaKey === 'max_bytes' ? $localize`Max size` : $localize`Max files`,\n        value: valueConvertFn(value),\n        originPath: value ? dir.path : ''\n      },\n      quotaKey,\n      dirValue: this.nodeIds[currentPath].quotas[quotaKey],\n      nextTreeMaximum: {\n        value: nextMaxValue,\n        path: nextMaxValue ? nextMaxPath : ''\n      }\n    };\n  }\n\n  /**\n   * Get the node where the quota limit originates from in the current node\n   *\n   * Example as it's a recursive method:\n   *\n   * |  Path + Value | Call depth |       useOrigin?      | Output |\n   * |:-------------:|:----------:|:---------------------:|:------:|\n   * | /a/b/c/d (15) |     1st    | 2nd (5) < 15 => false |  /a/b  |\n   * | /a/b/c (20)   |     2nd    | 3rd (5) < 20 => false |  /a/b  |\n   * | /a/b (5)      |     3rd    |  4th (10) < 5 => true |  /a/b  |\n   * | /a (10)       |     4th    |       10 => true      |   /a   |\n   *\n   */\n  private getOrigin(tree: Node, quotaSetting: TQuotaSettings): Node {\n    const parent = this.getParent(this.dirs, tree.value?.parent);\n    if (parent && parent?.id !== '/') {\n      const current = this.getQuotaFromTree(tree, quotaSetting);\n\n      // Get the next used quota and node above the current one (until it hits the root directory)\n      const originTree = this.getOrigin(parent, quotaSetting);\n      const inherited = this.getQuotaFromTree(originTree, quotaSetting);\n\n      // Select if the current quota is in use or the above\n      const useOrigin = current === 0 || (inherited !== 0 && inherited < current);\n      return useOrigin ? originTree : tree;\n    }\n    return tree;\n  }\n\n  private getQuotaFromTree(tree: Node, quotaSetting: TQuotaSettings): number {\n    return this.getDirectory(tree).quotas[quotaSetting];\n  }\n\n  private getDirectory(node: Node): CephfsDir {\n    const path = node.id as string;\n    return this.nodeIds[path];\n  }\n\n  selectOrigin(path: string) {\n    this.treeComponent.select.emit(this.getNode(path));\n  }\n\n  private getNode(path: string): Node {\n    return this.treeViewService.findNode(path, this.nodes);\n  }\n\n  updateQuotaModal() {\n    const path = this.selectedDir.path;\n    const selection: QuotaSetting = this.quota.selection.first();\n    const nextMax = selection.nextTreeMaximum;\n    const key = selection.quotaKey;\n    const value = selection.dirValue;\n    this.modalService.show(FormModalComponent, {\n      titleText: this.getModalQuotaTitle(\n        value === 0 ? this.actionLabels.SET : this.actionLabels.UPDATE,\n        path\n      ),\n      message: nextMax.value\n        ? $localize`The inherited ${this.getQuotaValueFromPathMsg(\n            nextMax.value,\n            nextMax.path\n          )} is the maximum value to be used.`\n        : undefined,\n      fields: [this.getQuotaFormField(selection.row.name, key, value, nextMax.value)],\n      submitButtonText: $localize`Save`,\n      onSubmit: (values: CephfsQuotas) => this.updateQuota(values)\n    });\n  }\n\n  private getModalQuotaTitle(action: string, path: string): string {\n    return $localize`${action} CephFS ${this.getQuotaName()} quota for '${path}'`;\n  }\n\n  private getQuotaName(): string {\n    return this.isBytesQuotaSelected() ? $localize`size` : $localize`files`;\n  }\n\n  private isBytesQuotaSelected(): boolean {\n    return this.quota.selection.first().quotaKey === 'max_bytes';\n  }\n\n  private getQuotaValueFromPathMsg(value: number, path: string): string {\n    value = this.isBytesQuotaSelected() ? this.dimlessBinaryPipe.transform(value) : value;\n\n    return $localize`${this.getQuotaName()} quota ${value} from '${path}'`;\n  }\n\n  private getQuotaFormField(\n    label: string,\n    name: string,\n    value: number,\n    maxValue: number\n  ): CdFormModalFieldConfig {\n    const isBinary = name === 'max_bytes';\n    const formValidators = [isBinary ? CdValidators.binaryMin(0) : Validators.min(0)];\n    if (maxValue) {\n      formValidators.push(isBinary ? CdValidators.binaryMax(maxValue) : Validators.max(maxValue));\n    }\n    const field: CdFormModalFieldConfig = {\n      type: isBinary ? 'binary' : 'number',\n      label,\n      name,\n      value,\n      validators: formValidators,\n      required: true\n    };\n    if (!isBinary) {\n      field.errors = {\n        min: $localize`Value has to be at least 0 or more`,\n        max: $localize`Value has to be at most ${maxValue} or less`\n      };\n    }\n    return field;\n  }\n\n  private updateQuota(values: CephfsQuotas, onSuccess?: Function) {\n    const path = this.selectedDir.path;\n    const key: TQuotaSettings = this.quota.selection.first().quotaKey;\n    const action =\n      this.selectedDir.quotas[key] === 0\n        ? this.actionLabels.SET\n        : values[key] === 0\n        ? this.actionLabels.UNSET\n        : $localize`Updated`;\n    this.cephfsService.quota(this.id, path, values).subscribe(() => {\n      if (onSuccess) {\n        onSuccess();\n      }\n      this.notificationService.show(\n        NotificationType.success,\n        this.getModalQuotaTitle(action, path)\n      );\n      this.forceDirRefresh();\n    });\n  }\n\n  unsetQuotaModal() {\n    const path = this.selectedDir.path;\n    const selection: QuotaSetting = this.quota.selection.first();\n    const key = selection.quotaKey;\n    const nextMax = selection.nextTreeMaximum;\n    const dirValue = selection.dirValue;\n\n    const quotaValue = this.getQuotaValueFromPathMsg(nextMax.value, nextMax.path);\n    const conclusion =\n      nextMax.value > 0\n        ? nextMax.value > dirValue\n          ? $localize`in order to inherit ${quotaValue}`\n          : $localize`which isn't used because of the inheritance of ${quotaValue}`\n        : $localize`in order to have no quota on the directory`;\n\n    this.modalService.show(ConfirmationModalComponent, {\n      titleText: this.getModalQuotaTitle(this.actionLabels.UNSET, path),\n      buttonText: this.actionLabels.UNSET,\n      description: $localize`${this.actionLabels.UNSET} ${this.getQuotaValueFromPathMsg(\n        dirValue,\n        path\n      )} ${conclusion}.`,\n      onSubmit: () => this.updateQuota({ [key]: 0 }, () => this.modalService.dismissAll())\n    });\n  }\n\n  createSnapshot() {\n    // Create a snapshot. Auto-generate a snapshot name by default.\n    const path = this.selectedDir.path;\n    this.modalService.show(FormModalComponent, {\n      titleText: $localize`Create Snapshot`,\n      message: $localize`Please enter the name of the snapshot.`,\n      fields: [\n        {\n          type: 'text',\n          name: 'name',\n          value: `${moment().toISOString(true)}`,\n          required: true,\n          validators: [this.validateValue.bind(this)]\n        }\n      ],\n      submitButtonText: $localize`Create Snapshot`,\n      onSubmit: (values: CephfsSnapshot) => {\n        if (!this.alreadyExists) {\n          this.cephfsService.mkSnapshot(this.id, path, values.name).subscribe((name) => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Created snapshot '${name}' for '${path}'`\n            );\n            this.forceDirRefresh();\n          });\n        } else {\n          this.notificationService.show(\n            NotificationType.error,\n            $localize`Snapshot name '${values.name}' is already in use. Please use another name.`\n          );\n        }\n      }\n    });\n  }\n\n  validateValue(control: AbstractControl) {\n    this.alreadyExists = this.selectedDir.snapshots.some((s) => s.name === control.value);\n  }\n\n  /**\n   * Forces an update of the current selected directory\n   *\n   * As all nodes point by their path on an directory object, the easiest way is to update\n   * the objects by merge with their latest change.\n   */\n  private forceDirRefresh(path?: string) {\n    if (!path) {\n      const dir = this.selectedDir;\n      if (!dir) {\n        throw new Error('This function can only be called without path if an selection was made');\n      }\n      // Parent has to be called in order to update the object referring\n      // to the current selected directory\n      path = dir.parent ? dir.parent : dir.path;\n      const node = this.getNode(path);\n      this.treeComponent.select.emit(node);\n      const selectedNode = this.getNode(dir.path);\n      this.treeComponent.select.emit(selectedNode);\n      return;\n    }\n    const node = this.getNode(path);\n    this.treeComponent.select.emit(node);\n  }\n\n  private updateTreeStructure(dirs: CephfsDir[]) {\n    const getChildrenAndPaths = (\n      directories: CephfsDir[],\n      parent: string\n    ): { children: CephfsDir[]; paths: string[] } => {\n      const children = directories.filter((d) => d.parent === parent);\n      const paths = children.map((d) => d.path);\n      return { children, paths };\n    };\n\n    const parents = _.uniq(dirs.map((d) => d.parent).sort());\n    parents.forEach((p) => {\n      const received = getChildrenAndPaths(dirs, p);\n      const cached = getChildrenAndPaths(this.dirs, p);\n\n      cached.children.forEach((d) => {\n        if (!received.paths.includes(d.path)) {\n          this.removeOldDirectory(d);\n        }\n      });\n      received.children.forEach((d) => {\n        if (cached.paths.includes(d.path)) {\n          this.updateExistingDirectory(cached.children, d);\n        } else {\n          this.addNewDirectory(d);\n        }\n      });\n    });\n  }\n\n  private removeOldDirectory(rmDir: CephfsDir) {\n    const path = rmDir.path;\n    // Remove directory from local variables\n    _.remove(this.dirs, (d) => d.path === path);\n    delete this.nodeIds[path];\n    this.updateDirectoriesParentNode(rmDir);\n  }\n\n  private updateDirectoriesParentNode(dir: CephfsDir) {\n    const parent = dir.parent;\n    if (!parent) {\n      return;\n    }\n    const node = this.getNode(parent);\n    if (!node) {\n      // Node will not be found for new sub directories - this is the intended behaviour\n      return;\n    }\n    const children = this.getChildren(parent);\n    node.children = children;\n  }\n\n  private addNewDirectory(newDir: CephfsDir) {\n    this.dirs.push(newDir);\n    this.nodeIds[newDir.path] = newDir;\n    this.updateDirectoriesParentNode(newDir);\n  }\n\n  private updateExistingDirectory(source: CephfsDir[], updatedDir: CephfsDir) {\n    const currentDirObject = source.find((sub) => sub.path === updatedDir.path);\n    Object.assign(currentDirObject, updatedDir);\n  }\n\n  private updateQuotaTable() {\n    const node = this.selectedDir ? this.getNode(this.selectedDir.path) : undefined;\n    if (node && node.id !== '/') {\n      this.setSettings(node);\n    }\n  }\n\n  private updateTree(force: boolean = false) {\n    if (this.loadingIndicator && !force) {\n      // In order to make the page scrollable during load, the render cycle for each node\n      // is omitted and only be called if all updates were loaded.\n      return;\n    }\n    this.nodes = [...this.nodes];\n  }\n\n  deleteSnapshotModal() {\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: $localize`CephFs Snapshot`,\n      itemNames: this.snapshot.selection.selected.map((snapshot: CephfsSnapshot) => snapshot.name),\n      submitAction: () => this.deleteSnapshot()\n    });\n  }\n\n  deleteSnapshot() {\n    const path = this.selectedDir.path;\n    this.snapshot.selection.selected.forEach((snapshot: CephfsSnapshot) => {\n      const name = snapshot.name;\n      this.cephfsService.rmSnapshot(this.id, path, name).subscribe(() => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Deleted snapshot '${name}' for '${path}'`\n        );\n      });\n    });\n    this.modalService.dismissAll();\n    this.forceDirRefresh();\n  }\n\n  refreshAllDirectories() {\n    // In order to make the page scrollable during load, the render cycle for each node\n    // is omitted and only be called if all updates were loaded.\n    this.loadingIndicator = true;\n    this.requestedPaths.map((path) => this.forceDirRefresh(path));\n    const interval = setInterval(() => {\n      this.updateTree(true);\n      if (!this.loadingIndicator) {\n        clearInterval(interval);\n      }\n    }, 3000);\n  }\n\n  unsetLoadingIndicator() {\n    if (!this.loadingIndicator) {\n      return;\n    }\n    clearTimeout(this.loadingTimeout);\n    this.loadingTimeout = setTimeout(() => {\n      const loading = Object.values(this.loading).some((l) => l);\n      if (loading) {\n        return this.unsetLoadingIndicator();\n      }\n      this.loadingIndicator = false;\n      this.updateTree();\n      // The problem is that we can't subscribe to an useful updated tree event and the time\n      // between fetching all calls and rebuilding the tree can take some time\n    }, 3000);\n  }\n\n  /**\n   * Converts a CephfsDir object to Node type\n   * @param directory CephfsDir object\n   * @returns Converted Node object\n   */\n  toNode(directory: CephfsDir): Node {\n    return {\n      id: directory.path,\n      label: directory.name,\n      children: [],\n      expanded: false,\n      value: { parent: directory?.parent }\n    };\n  }\n\n  /**\n   * Get parent node for a given CephfsDir directory\n   * @param dirs CephfsDir directories array\n   * @param path Parent path\n   * @returns Parent node\n   */\n  getParent(dirs: CephfsDir[], path: string): Node {\n    const parentNode = dirs?.find?.((dir: CephfsDir) => dir.path === path);\n    return parentNode ? this.toNode(parentNode) : null;\n  }\n}\n","<cds-modal size=\"lg\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <ng-container *cdFormLoading=\"loading\">\n    <div cdsModalContent>\n      <form name=\"subvolumeForm\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"subvolumeForm\"\n            novalidate>\n        <div class=\"form-item\">\n          <cds-text-label label=\"Name\"\n                          for=\"subvolumeName\"\n                          [invalid]=\"subvolumeForm.controls.subvolumeName.invalid && (subvolumeForm.controls.subvolumeName.dirty)\"\n                          [invalidText]=\"subvolumeNameError\"\n                          cdRequiredField=\"Name\"\n                          i18n>Name\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Subvolume name...\"\n                   id=\"subvolumeName\"\n                   name=\"subvolumeName\"\n                   formControlName=\"subvolumeName\"\n                   [invalid]=\"subvolumeForm.controls.subvolumeName.invalid && (subvolumeForm.controls.subvolumeName.dirty)\"\n                   [autofocus]=\"true\"\n                   modal-primary-focus>\n          </cds-text-label>\n          <ng-template #subvolumeNameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subvolumeForm.showError('subvolumeName', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subvolumeForm.showError('subvolumeName', formDir, 'notUnique')\"\n                  i18n>The subvolume already exists.</span>\n            <span *ngIf=\"subvolumeForm.showError('subvolumeName', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>Subvolume name can only contain letters, numbers, '.', '-' or '_'</span>\n          </ng-template>\n        </div>\n\n        <!-- Volume name -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"Volume name\"\n                          for=\"volumeName\"\n                          i18n>Volume name\n            <input cdsText\n                   type=\"text\"\n                   id=\"volumeName\"\n                   name=\"volumeName\"\n                   formControlName=\"volumeName\">\n            </cds-text-label>\n          </div>\n\n          <!--Subvolume Group name -->\n          <div class=\"form-item\">\n            <cds-select label=\"Subvolume group\"\n                        for=\"subvolumeGroupName\"\n                        formControlName=\"subvolumeGroupName\"\n                        name=\"subvolumeGroupName\"\n                        id=\"subvolumeGroupName\"\n                        *ngIf=\"subVolumeGroups$ | async as subvolumeGroups\">\n              <option value=\"\"\n                      i18n>Default</option>\n              <option *ngFor=\"let subvolumegroup of subvolumeGroups\"\n                      [value]=\"subvolumegroup.name\">{{ subvolumegroup.name }}</option>\n            </cds-select>\n          </div>\n\n        <!-- Size -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"Size\"\n                          for=\"size\"\n                          helperText=\"The size of the subvolume is specified by setting a quota on it.\n                          If left blank or put 0, then quota will be infinite\"\n                          i18n-helperText\n                          [invalid]=\"subvolumeForm.controls.size.invalid && (subvolumeForm.controls.size.dirty)\"\n                          [invalidText]=\"sizeError\"\n                          i18n>Size\n            <input cdsText\n                   type=\"text\"\n                   id=\"size\"\n                   name=\"size\"\n                   formControlName=\"size\"\n                   i18n-placeholder\n                   placeholder=\"e.g., 10GiB\"\n                   defaultUnit=\"GiB\"\n                   [invalid]=\"subvolumeForm.controls.size.invalid && (subvolumeForm.controls.size.dirty)\"\n                   cdDimlessBinary>\n          </cds-text-label>\n          <ng-template #sizeError>\n            <span *ngIf=\"subvolumeForm.showError('size', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n          </ng-template>\n        </div>\n\n        <!-- CephFS Pools -->\n        <div class=\"form-item\">\n          <cds-select label=\"CephFS Pools\"\n                      for=\"pool\"\n                      formControlName=\"pool\"\n                      name=\"pool\"\n                      id=\"pool\"\n                      helperText=\"By default, the data_pool_layout of the parent directory is selected.\"\n                      i18n-helperText>\n            <option *ngFor=\"let pool of dataPools\"\n                    [value]=\"pool.pool\">{{ pool.pool }}</option>\n          </cds-select>\n        </div>\n\n        <!-- UID -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"UID\"\n                          for=\"uid\"\n                          i18n>UID\n            <input cdsText\n                   type=\"number\"\n                   placeholder=\"Subvolume UID...\"\n                   id=\"uid\"\n                   name=\"uid\"\n                   formControlName=\"uid\">\n          </cds-text-label>\n        </div>\n\n        <!-- GID -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"GID\"\n                          for=\"gid\"\n                          i18n>GID\n            <input cdsText\n                   type=\"number\"\n                   placeholder=\"Subvolume GID...\"\n                   id=\"gid\"\n                   name=\"gid\"\n                   formControlName=\"gid\">\n          </cds-text-label>\n        </div>\n\n        <!-- Mode -->\n        <div class=\"form-item\">\n          <label class=\"cds--label\"\n                 for=\"mode\"\n                 i18n>Mode\n          </label>\n          <cd-help-text>Permissions for the directory. Default mode is 755 which is rwxr-xr-x</cd-help-text>\n          <cd-checked-table-form [data]=\"scopePermissions\"\n                                 [columns]=\"columns\"\n                                 [form]=\"subvolumeForm\"\n                                 inputField=\"mode\"\n                                 [isTableForOctalMode]=\"true\"\n                                 [initialValue]=\"initialMode\"\n                                 [scopes]=\"scopes\"\n                                 [isDisabled]=\"isEdit\">\n          </cd-checked-table-form>\n        </div>\n\n        <!-- Is namespace-isolated -->\n        <div class=\"form-item\">\n          <cds-checkbox id=\"isolatedNamespace\"\n                        name=\"isolatedNamespace\"\n                        formControlName=\"isolatedNamespace\"\n                        i18n>Isolated Namespace\n            <cd-help-text>To create subvolume in a separate RADOS namespace.</cd-help-text>\n          </cds-checkbox>\n        </div>\n      </form>\n    </div>\n\n    <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                          [form]=\"subvolumeForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n\n  </ng-container>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { Pool } from '../../pool/pool';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CephfsSubvolumeInfo } from '~/app/shared/models/cephfs-subvolume.model';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { OctalToHumanReadablePipe } from '~/app/shared/pipes/octal-to-human-readable.pipe';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { CephfsSubvolumeGroup } from '~/app/shared/models/cephfs-subvolume-group.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cd-cephfs-subvolume-form',\n  templateUrl: './cephfs-subvolume-form.component.html',\n  styleUrls: ['./cephfs-subvolume-form.component.scss']\n})\nexport class CephfsSubvolumeFormComponent extends CdForm implements OnInit {\n  subvolumeForm: CdFormGroup;\n\n  action: string;\n  resource: string;\n\n  subVolumeGroups$: Observable<CephfsSubvolumeGroup[]>;\n  subVolumeGroups: CephfsSubvolumeGroup[];\n  dataPools: Pool[];\n\n  columns: CdTableColumn[];\n  scopePermissions: Array<any> = [];\n  initialMode = {\n    owner: ['read', 'write', 'execute'],\n    group: ['read', 'execute'],\n    others: ['read', 'execute']\n  };\n  scopes: string[] = ['owner', 'group', 'others'];\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapper: TaskWrapperService,\n    private cephFsSubvolumeService: CephfsSubvolumeService,\n    private cephFsSubvolumeGroupService: CephfsSubvolumeGroupService,\n    private formatter: FormatterService,\n    private dimlessBinary: DimlessBinaryPipe,\n    private octalToHumanReadable: OctalToHumanReadablePipe,\n\n    @Optional() @Inject('fsName') public fsName: string,\n    @Optional() @Inject('subVolumeName') public subVolumeName: string,\n    @Optional() @Inject('subVolumeGroupName') public subVolumeGroupName: string,\n    @Optional() @Inject('pools') public pools: Pool[],\n    @Optional() @Inject('isEdit') public isEdit = false\n  ) {\n    super();\n    this.resource = $localize`Subvolume`;\n  }\n\n  ngOnInit(): void {\n    this.action = this.actionLabels.CREATE;\n    this.columns = [\n      {\n        prop: 'scope',\n        name: $localize`All`,\n        flexGrow: 0.5\n      },\n      {\n        prop: 'read',\n        name: $localize`Read`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'write',\n        name: $localize`Write`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'execute',\n        name: $localize`Execute`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      }\n    ];\n\n    this.subVolumeGroups$ = this.cephFsSubvolumeGroupService.get(this.fsName);\n    this.dataPools = this.pools.filter((pool) => pool.type === 'data');\n    this.createForm();\n\n    this.isEdit ? this.populateForm() : this.loadingReady();\n  }\n\n  createForm() {\n    this.subvolumeForm = new CdFormGroup({\n      volumeName: new FormControl({ value: this.fsName, disabled: true }),\n      subvolumeName: new FormControl('', {\n        validators: [Validators.required, Validators.pattern(/^[.A-Za-z0-9_-]+$/)],\n        asyncValidators: [\n          CdValidators.unique(\n            this.cephFsSubvolumeService.exists,\n            this.cephFsSubvolumeService,\n            null,\n            null,\n            this.fsName,\n            this.subVolumeGroupName\n          )\n        ]\n      }),\n      subvolumeGroupName: new FormControl(this.subVolumeGroupName),\n      pool: new FormControl(this.dataPools[0]?.pool, {\n        validators: [Validators.required]\n      }),\n      size: new FormControl(null, {\n        updateOn: 'blur'\n      }),\n      uid: new FormControl(null),\n      gid: new FormControl(null),\n      mode: new FormControl({}),\n      isolatedNamespace: new FormControl(false)\n    });\n  }\n\n  populateForm() {\n    this.action = this.actionLabels.EDIT;\n    this.cephFsSubvolumeService\n      .info(this.fsName, this.subVolumeName, this.subVolumeGroupName)\n      .subscribe((resp: CephfsSubvolumeInfo) => {\n        // Disabled these fields since its not editable\n        this.subvolumeForm.get('subvolumeName').disable();\n        this.subvolumeForm.get('subvolumeGroupName').disable();\n        this.subvolumeForm.get('pool').disable();\n        this.subvolumeForm.get('uid').disable();\n        this.subvolumeForm.get('gid').disable();\n\n        this.subvolumeForm.get('isolatedNamespace').disable();\n        this.subvolumeForm.get('subvolumeName').setValue(this.subVolumeName);\n        this.subvolumeForm.get('subvolumeGroupName').setValue(this.subVolumeGroupName);\n        if (resp.bytes_quota !== 'infinite') {\n          this.subvolumeForm.get('size').setValue(this.dimlessBinary.transform(resp.bytes_quota));\n        }\n        this.subvolumeForm.get('uid').setValue(resp.uid);\n        this.subvolumeForm.get('gid').setValue(resp.gid);\n        this.subvolumeForm.get('isolatedNamespace').setValue(resp.pool_namespace);\n        this.initialMode = this.octalToHumanReadable.transform(resp.mode, true);\n\n        this.loadingReady();\n      });\n  }\n\n  submit() {\n    const subVolumeName = this.subvolumeForm.getValue('subvolumeName');\n    const subVolumeGroupName = this.subvolumeForm.getValue('subvolumeGroupName');\n    const pool = this.subvolumeForm.getValue('pool');\n    const size = this.formatter.toBytes(this.subvolumeForm.getValue('size')) || 0;\n    const uid = this.subvolumeForm.getValue('uid');\n    const gid = this.subvolumeForm.getValue('gid');\n    const mode = this.formatter.toOctalPermission(this.subvolumeForm.getValue('mode'));\n    const isolatedNamespace = this.subvolumeForm.getValue('isolatedNamespace');\n\n    if (this.isEdit) {\n      const editSize = size === 0 ? 'infinite' : size;\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/subvolume/' + URLVerbs.EDIT, {\n            subVolumeName: subVolumeName\n          }),\n          call: this.cephFsSubvolumeService.update(\n            this.fsName,\n            subVolumeName,\n            String(editSize),\n            subVolumeGroupName\n          )\n        })\n        .subscribe({\n          error: () => {\n            this.subvolumeForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    } else {\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/subvolume/' + URLVerbs.CREATE, {\n            subVolumeName: subVolumeName\n          }),\n          call: this.cephFsSubvolumeService.create(\n            this.fsName,\n            subVolumeName,\n            subVolumeGroupName,\n            pool,\n            String(size),\n            uid,\n            gid,\n            mode,\n            isolatedNamespace\n          )\n        })\n        .subscribe({\n          error: () => {\n            this.subvolumeForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'colorClassFromText'\n})\nexport class ColorClassFromTextPipe implements PipeTransform {\n  readonly cssClasses: string[] = [\n    'badge-cd-label-green',\n    'badge-cd-label-cyan',\n    'badge-cd-label-purple',\n    'badge-cd-label-light-blue',\n    'badge-cd-label-gold',\n    'badge-cd-label-light-green'\n  ];\n\n  transform(text: string): string {\n    let hash = 0;\n    let charCode = 0;\n    if (text) {\n      for (let i = 0; i < text.length; i++) {\n        charCode = text.charCodeAt(i);\n        // eslint-disable-next-line no-bitwise\n        hash = Math.abs((hash << 5) - hash + charCode);\n      }\n    }\n    return this.cssClasses[hash % this.cssClasses.length];\n  }\n}\n","<span *ngIf=\"!key; else key_value\"\n      class=\"badge badge-{{value}}\"\n      ngClass=\"{{value | colorClassFromText}}\"\n      [ngbTooltip]=\"tooltipText\">\n  {{ value }}\n</span>\n\n<ng-template #key_value>\n  <span class=\"badge badge-background-primary badge-{{key}}-{{value}}\">\n        {{ key }}: {{ value }}\n  </span>\n</ng-template>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-label',\n  templateUrl: './cd-label.component.html',\n  styleUrls: ['./cd-label.component.scss']\n})\nexport class CdLabelComponent {\n  @Input() key?: string;\n  @Input() value?: string;\n  @Input() tooltipText?: string;\n}\n","<ng-container *ngIf=\"items.length\">\n  <h3 i18n\n      *ngIf=\"title\">{{title}}</h3>\n  <input type=\"text\"\n         placeholder=\"Filter by name...\"\n         (keyup)=\"updateFilter()\"\n         [id]=\"inputIdentifier\"\n         class=\"form-control text-center mb-2\">\n  <div class=\"overflow-auto\">\n    <ul class=\"nav flex-column nav-pills\">\n      <li class=\"nav-item\"\n          *ngFor=\"let item of filteredItems; trackBy: trackByFn\">\n        <a class=\"nav-link\"\n           [class.active]=\"!activeItem\"\n           (click)=\"selectItem()\"\n           *ngIf=\"item === ''\">_nogroup</a>\n        <a class=\"nav-link text-decoration-none text-break\"\n           [class.active]=\"item === activeItem\"\n           (click)=\"selectItem(item)\"\n           *ngIf=\"item !== ''\">{{item}}</a>\n      </li>\n    </ul>\n  </div>\n</ng-container>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'cd-vertical-navigation',\n  templateUrl: './vertical-navigation.component.html',\n  styleUrls: ['./vertical-navigation.component.scss']\n})\nexport class VerticalNavigationComponent implements OnInit {\n  @Input() items: string[];\n  @Input() title: string;\n  @Input() inputIdentifier: string;\n\n  @Output() emitFilteredItems: EventEmitter<string[]> = new EventEmitter();\n  @Output() emitActiveItem: EventEmitter<string> = new EventEmitter();\n\n  activeItem = '';\n  filteredItems: string[];\n\n  ngOnInit(): void {\n    this.filteredItems = this.items;\n    if (!this.activeItem && this.items.length) this.selectItem(this.items[0]);\n  }\n\n  updateFilter() {\n    const filterInput = document.getElementById(this.inputIdentifier) as HTMLInputElement;\n    this.filteredItems = this.items.filter((item) => item.includes(filterInput.value));\n  }\n\n  selectItem(item = '') {\n    this.activeItem = item;\n    this.emitActiveItem.emit(item);\n  }\n\n  trackByFn(item: number) {\n    return item;\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-sm-2\"\n       *ngIf=\"subVolumeGroups$ | async as subVolumeGroups\">\n    <cd-vertical-navigation title=\"Groups\"\n                            [items]=\"subvolumeGroupList\"\n                            inputIdentifier=\"group-filter\"\n                            (emitActiveItem)=\"selectSubVolumeGroup($event)\"></cd-vertical-navigation>\n  </div>\n  <div class=\"col-10 vertical-line\">\n    <cd-table [data]=\"subVolumes$ | async\"\n              columnMode=\"flex\"\n              [columns]=\"columns\"\n              selectionType=\"single\"\n              [hasDetails]=\"false\"\n              (fetchData)=\"fetchData()\"\n              (updateSelection)=\"updateSelection($event)\">\n\n      <div class=\"table-actions\">\n        <cd-table-actions [permission]=\"permissions.cephfs\"\n                          [selection]=\"selection\"\n                          class=\"btn-group\"\n                          id=\"cephfs-subvolume-actions\"\n                          [tableActions]=\"tableActions\">\n        </cd-table-actions>\n      </div>\n    </cd-table>\n  </div>\n</div>\n\n<ng-template #quotaUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.info.bytes_pcent && row.info.bytes_pcent !== 'undefined'; else noLimitTpl\"\n                [total]=\"row.info.bytes_quota\"\n                [used]=\"row.info.bytes_used\"\n                [title]=\"row.name\"\n                decimals=\"2\"></cd-usage-bar>\n\n  <ng-template #noLimitTpl>\n    <span ngbTooltip=\"Quota limit is not set\"\n          *ngIf=\"row.info.bytes_pcent === 'undefined'\"\n          i18n-ngbTooltip>\n      {{row.info.bytes_used | dimlessBinary}}</span>\n  </ng-template>\n</ng-template>\n\n<ng-template #typeTpl\n             let-value=\"data.value\">\n  <cd-label [value]=\"value\"></cd-label>\n</ng-template>\n\n<ng-template #modeToHumanReadableTpl\n             let-value=\"data.value\">\n  <span *ngFor=\"let result of (value | octalToHumanReadable)\"\n        [ngClass]=\"result.class\"\n        [ngbTooltip]=\"result.toolTip\">\n    {{ result.content }}\n  </span>\n</ng-template>\n\n<ng-template #nameTpl\n             let-row=\"data.row\">\n  <span class=\"fw-bold\">{{row.name}}</span>\n\n  <span *ngIf=\"row?.info?.state === 'complete'; else snapshotRetainedTpl\">\n    <i [ngClass]=\"[icons.success, icons.large]\"\n       ngbTooltip=\"{{row.name}} is ready to use\"\n       class=\"text-success\"></i>\n  </span>\n\n  <ng-template #snapshotRetainedTpl>\n    <i [ngClass]=\"[icons.warning, icons.large]\"\n       class=\"text-warning\"\n       ngbTooltip=\"{{row.name}} is removed after retaining the snapshots\"></i>\n  </ng-template>\n\n  <cd-label [value]=\"row?.info?.type\"\n            *ngIf=\"row?.info?.type !== 'subvolume'\"></cd-label>\n\n  <cd-label value=\"namespaced\"\n            *ngIf=\"row?.info?.pool_namespace\"\n            [tooltipText]=\"row?.info?.pool_namespace\"></cd-label>\n</ng-template>\n\n<ng-template #removeTmpl\n             let-form=\"form\">\n  <ng-container [formGroup]=\"form\">\n    <ng-container formGroupName=\"child\">\n      <cd-alert-panel *ngIf=\"errorMessage.length > 1\"\n                      type=\"error\">\n              {{errorMessage}}\n      </cd-alert-panel>\n      <div class=\"form-group\">\n        <div class=\"custom-control custom-checkbox\">\n          <input type=\"checkbox\"\n                 class=\"custom-control-input\"\n                 name=\"retainSnapshots\"\n                 id=\"retainSnapshots\"\n                 formControlName=\"retainSnapshots\">\n          <label class=\"custom-control-label\"\n                 for=\"retainSnapshots\"\n                 i18n>Retain snapshots <cd-helper>The subvolume can be removed retaining\n                  existing snapshots using this option.\n                   If snapshots are retained, the subvolume is considered empty for all\n                    operations not involving the retained snapshots.</cd-helper></label>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-template>\n","import {\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { CephfsSubvolume } from '~/app/shared/models/cephfs-subvolume.model';\nimport { CephfsSubvolumeFormComponent } from '../cephfs-subvolume-form/cephfs-subvolume-form.component';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { FormControl } from '@angular/forms';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { CephfsSubvolumeGroup } from '~/app/shared/models/cephfs-subvolume-group.model';\nimport { CephfsMountDetailsComponent } from '../cephfs-mount-details/cephfs-mount-details.component';\nimport { HealthService } from '~/app/shared/api/health.service';\nimport _ from 'lodash';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DEFAULT_SUBVOLUME_GROUP } from '~/app/shared/constants/cephfs.constant';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\n@Component({\n  selector: 'cd-cephfs-subvolume-list',\n  templateUrl: './cephfs-subvolume-list.component.html',\n  styleUrls: ['./cephfs-subvolume-list.component.scss']\n})\nexport class CephfsSubvolumeListComponent extends CdForm implements OnInit, OnChanges {\n  @ViewChild('quotaUsageTpl', { static: true })\n  quotaUsageTpl: any;\n\n  @ViewChild('typeTpl', { static: true })\n  typeTpl: any;\n\n  @ViewChild('modeToHumanReadableTpl', { static: true })\n  modeToHumanReadableTpl: any;\n\n  @ViewChild('nameTpl', { static: true })\n  nameTpl: any;\n\n  @ViewChild('quotaSizeTpl', { static: true })\n  quotaSizeTpl: any;\n\n  @ViewChild('removeTmpl', { static: true })\n  removeTmpl: TemplateRef<any>;\n\n  @Input() fsName: string;\n  @Input() pools: any[];\n\n  columns: CdTableColumn[] = [];\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n  selection = new CdTableSelection();\n  removeForm: CdFormGroup;\n  icons = Icons;\n  permissions: Permissions;\n  modalRef: NgbModalRef;\n  errorMessage: string = '';\n  selectedName: string = '';\n\n  subVolumes$: Observable<CephfsSubvolume[]>;\n  subVolumeGroups$: Observable<CephfsSubvolumeGroup[]>;\n  subject = new BehaviorSubject<CephfsSubvolume[]>([]);\n  groupsSubject = new BehaviorSubject<CephfsSubvolume[]>([]);\n\n  subvolumeGroupList: string[] = [];\n  subVolumesList: CephfsSubvolume[] = [];\n\n  activeGroupName: string = '';\n\n  constructor(\n    private cephfsSubVolumeService: CephfsSubvolumeService,\n    private actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private authStorageService: AuthStorageService,\n    private taskWrapper: TaskWrapperService,\n    private cephfsSubvolumeGroupService: CephfsSubvolumeGroupService,\n    private healthService: HealthService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1,\n        cellTemplate: this.nameTpl\n      },\n      {\n        name: $localize`Data Pool`,\n        prop: 'info.data_pool',\n        flexGrow: 0.7,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-background-primary'\n        }\n      },\n      {\n        name: $localize`Usage`,\n        prop: 'info.bytes_pcent',\n        flexGrow: 0.7,\n        cellTemplate: this.quotaUsageTpl,\n        cellClass: 'text-right'\n      },\n      {\n        name: $localize`Path`,\n        prop: 'info.path',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.path\n      },\n      {\n        name: $localize`Mode`,\n        prop: 'info.mode',\n        flexGrow: 0.5,\n        cellTemplate: this.modeToHumanReadableTpl\n      },\n      {\n        name: $localize`Created`,\n        prop: 'info.created_at',\n        flexGrow: 0.5,\n        cellTransformation: CellTemplate.timeAgo\n      }\n    ];\n\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.openModal()\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.openModal(true)\n      },\n      {\n        name: this.actionLabels.ATTACH,\n        permission: 'read',\n        icon: Icons.bars,\n        disable: () => !this.selection?.hasSelection,\n        click: () => this.showAttachInfo()\n      },\n      {\n        name: this.actionLabels.NFS_EXPORT,\n        permission: 'create',\n        icon: Icons.nfsExport,\n        routerLink: () => [\n          '/cephfs/nfs/create',\n          this.fsName,\n          _.isEmpty(this.activeGroupName) ? DEFAULT_SUBVOLUME_GROUP : this.activeGroupName,\n          { subvolume: this.selection?.first()?.name }\n        ],\n        disable: () => !this.selection?.hasSingleSelection\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeSubVolumeModal()\n      }\n    ];\n\n    this.subVolumeGroups$ = this.groupsSubject.pipe(\n      switchMap(() =>\n        this.cephfsSubvolumeGroupService.get(this.fsName, false).pipe(\n          tap((groups) => {\n            this.subvolumeGroupList = groups.map((group) => group.name);\n            this.subvolumeGroupList.unshift('');\n          }),\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n\n  fetchData() {\n    this.subject.next([]);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fsName) {\n      this.subject.next([]);\n      this.groupsSubject.next([]);\n    }\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  showAttachInfo() {\n    const selectedSubVolume = this.selection?.selected?.[0];\n\n    this.healthService.getClusterFsid().subscribe({\n      next: (clusterId: string) => {\n        this.modalRef = this.modalService.show(CephfsMountDetailsComponent, {\n          onSubmit: () => this.modalRef.close(),\n          mountData: {\n            fsId: clusterId,\n            fsName: this.fsName,\n            rootPath: selectedSubVolume.info.path\n          }\n        });\n      }\n    });\n  }\n\n  openModal(edit = false) {\n    this.modalService.show(CephfsSubvolumeFormComponent, {\n      fsName: this.fsName,\n      subVolumeName: this.selection?.first()?.name,\n      subVolumeGroupName: this.activeGroupName,\n      pools: this.pools,\n      isEdit: edit\n    });\n  }\n\n  removeSubVolumeModal() {\n    this.removeForm = new CdFormGroup({\n      retainSnapshots: new FormControl(false)\n    });\n    this.errorMessage = '';\n    this.selectedName = this.selection.first().name;\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      actionDescription: 'remove',\n      itemNames: [this.selectedName],\n      itemDescription: 'Subvolume',\n      childFormGroup: this.removeForm,\n      childFormGroupTemplate: this.removeTmpl,\n      submitAction: () =>\n        this.taskWrapper\n          .wrapTaskAroundCall({\n            task: new FinishedTask('cephfs/subvolume/remove', { subVolumeName: this.selectedName }),\n            call: this.cephfsSubVolumeService.remove(\n              this.fsName,\n              this.selectedName,\n              this.activeGroupName,\n              this.removeForm.getValue('retainSnapshots')\n            )\n          })\n          .subscribe({\n            complete: () => this.modalService.dismissAll(),\n            error: (error) => {\n              this.modalRef.componentInstance.stopLoadingSpinner();\n              this.errorMessage = error.error.detail;\n            }\n          })\n    });\n  }\n\n  selectSubVolumeGroup(subVolumeGroupName: string) {\n    this.activeGroupName = subVolumeGroupName;\n    this.getSubVolumes();\n  }\n\n  getSubVolumes() {\n    this.subVolumes$ = this.subject.pipe(\n      switchMap(() =>\n        this.cephfsSubVolumeService.get(this.fsName, this.activeGroupName).pipe(\n          catchError(() => {\n            this.context?.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n}\n","<cds-modal size=\"lg\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <ng-container *cdFormLoading=\"loading\">\n    <div cdsModalContent>\n      <form name=\"subvolumegroupForm\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"subvolumegroupForm\"\n            novalidate>\n        <div class=\"form-item\">\n          <cds-text-label label=\"Name\"\n                          for=\"subvolumegroupName\"\n                          [invalid]=\"subvolumegroupForm.controls.subvolumegroupName.invalid && (subvolumegroupForm.controls.subvolumegroupName.dirty)\"\n                          [invalidText]=\"subvolumegroupNameError\"\n                          cdRequiredField=\"Name\"\n                          i18n>Name\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Subvolume group name...\"\n                   i18n-placeholder\n                   id=\"subvolumegroupName\"\n                   name=\"subvolumegroupName\"\n                   [invalid]=\"subvolumegroupForm.controls.subvolumegroupName.invalid && (subvolumegroupForm.controls.subvolumegroupName.dirty)\"\n                   formControlName=\"subvolumegroupName\"\n                   modal-primary-focus>\n          </cds-text-label>\n          <ng-template #subvolumegroupNameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subvolumegroupForm.showError('subvolumegroupName', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subvolumegroupForm.showError('subvolumegroupName', formDir, 'notUnique')\"\n                  i18n>The subvolume group already exists.</span>\n            <span *ngIf=\"subvolumegroupForm.showError('subvolumegroupName', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>Subvolume name can only contain letters, numbers, '.', '-' or '_'</span>\n          </ng-template>\n        </div>\n\n        <!-- Volume name -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"Volume name\"\n                          for=\"volumeName\"\n                          i18n>Volume name\n            <input cdsText\n                   type=\"text\"\n                   id=\"volumeName\"\n                   name=\"volumeName\"\n                   formControlName=\"volumeName\">\n          </cds-text-label>\n        </div>\n\n        <!-- Size -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"Size\"\n                          for=\"size\"\n                          helperText=\"The size of the subvolume is specified by setting a quota on it.\n                          If left blank or put 0, then quota will be infinite\"\n                          i18n-helperText\n                          [invalid]=\"subvolumegroupForm.controls.size.invalid && (subvolumegroupForm.controls.size.dirty)\"\n                          [invalidText]=\"sizeError\"\n                          i18n>Size\n            <input cdsText\n                   type=\"text\"\n                   id=\"size\"\n                   name=\"size\"\n                   formControlName=\"size\"\n                   i18n-placeholder\n                   placeholder=\"e.g., 10GiB\"\n                   defaultUnit=\"GiB\"\n                   [invalid]=\"subvolumegroupForm.controls.size.invalid && (subvolumegroupForm.controls.size.dirty)\"\n                   cdDimlessBinary>\n          </cds-text-label>\n          <ng-template #sizeError>\n            <span *ngIf=\"subvolumegroupForm.showError('size', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n          </ng-template>\n        </div>\n\n        <!-- CephFS Pools -->\n        <div class=\"form-item\">\n          <cds-select label=\"CephFS Pools\"\n                      for=\"pool\"\n                      formControlName=\"pool\"\n                      name=\"pool\"\n                      id=\"pool\"\n                      helperText=\"By default, the data_pool_layout of the parent directory is selected.\"\n                      i18n-helperText>\n            <option *ngFor=\"let pool of dataPools\"\n                    [value]=\"pool.pool\">{{ pool.pool }}</option>\n          </cds-select>\n        </div>\n\n        <!-- UID -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"UID\"\n                          for=\"uid\"\n                          i18n>UID\n            <input cdsText\n                   type=\"number\"\n                   placeholder=\"Subvolume UID...\"\n                   id=\"uid\"\n                   name=\"uid\"\n                   formControlName=\"uid\">\n          </cds-text-label>\n        </div>\n\n        <!-- GID -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"GID\"\n                          for=\"gid\"\n                          i18n>GID\n            <input cdsText\n                   type=\"number\"\n                   placeholder=\"Subvolume group GID...\"\n                   id=\"gid\"\n                   name=\"gid\"\n                   formControlName=\"gid\">\n          </cds-text-label>\n        </div>\n\n        <!-- Mode -->\n        <div class=\"form-item\">\n          <label class=\"cds--label\"\n                 for=\"mode\"\n                 i18n>Mode\n          </label>\n          <cd-help-text>Permissions for the directory. Default mode is 755 which is rwxr-xr-x</cd-help-text>\n\n          <cd-checked-table-form [data]=\"scopePermissions\"\n                                 [columns]=\"columns\"\n                                 [form]=\"subvolumegroupForm\"\n                                 inputField=\"mode\"\n                                 [isTableForOctalMode]=\"true\"\n                                 [initialValue]=\"initialMode\"\n                                 [scopes]=\"scopes\"\n                                 [isDisabled]=\"isEdit\"></cd-checked-table-form>\n        </div>\n      </form>\n    </div>\n\n    <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                          [form]=\"subvolumegroupForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n\n  </ng-container>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { Pool } from '../../pool/pool';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport _ from 'lodash';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { OctalToHumanReadablePipe } from '~/app/shared/pipes/octal-to-human-readable.pipe';\n\n@Component({\n  selector: 'cd-cephfs-subvolumegroup-form',\n  templateUrl: './cephfs-subvolumegroup-form.component.html',\n  styleUrls: ['./cephfs-subvolumegroup-form.component.scss']\n})\nexport class CephfsSubvolumegroupFormComponent extends CdForm implements OnInit {\n  subvolumegroupForm: CdFormGroup;\n\n  action: string;\n  resource: string;\n\n  dataPools: Pool[];\n\n  columns: CdTableColumn[];\n  scopePermissions: Array<any> = [];\n  initialMode = {\n    owner: ['read', 'write', 'execute'],\n    group: ['read', 'execute'],\n    others: ['read', 'execute']\n  };\n  scopes: string[] = ['owner', 'group', 'others'];\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapper: TaskWrapperService,\n    private cephfsSubvolumeGroupService: CephfsSubvolumeGroupService,\n    private formatter: FormatterService,\n    private dimlessBinary: DimlessBinaryPipe,\n    private octalToHumanReadable: OctalToHumanReadablePipe,\n\n    @Optional() @Inject('fsName') public fsName: string,\n    @Optional() @Inject('subvolumegroupName') public subvolumegroupName: string,\n    @Optional() @Inject('pools') public pools: Pool[],\n    @Optional() @Inject('isEdit') public isEdit = false\n  ) {\n    super();\n    this.resource = $localize`subvolume group`;\n  }\n\n  ngOnInit(): void {\n    this.action = this.actionLabels.CREATE;\n    this.columns = [\n      {\n        prop: 'scope',\n        name: $localize`All`,\n        flexGrow: 0.5\n      },\n      {\n        prop: 'read',\n        name: $localize`Read`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'write',\n        name: $localize`Write`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      },\n      {\n        prop: 'execute',\n        name: $localize`Execute`,\n        flexGrow: 0.5,\n        cellClass: 'text-center'\n      }\n    ];\n\n    this.dataPools = this.pools.filter((pool) => pool.type === 'data');\n    this.createForm();\n\n    this.isEdit ? this.populateForm() : this.loadingReady();\n  }\n\n  createForm() {\n    this.subvolumegroupForm = new CdFormGroup({\n      volumeName: new FormControl({ value: this.fsName, disabled: true }),\n      subvolumegroupName: new FormControl('', {\n        validators: [Validators.required, Validators.pattern(/^[.A-Za-z0-9_-]+$/)],\n        asyncValidators: [\n          CdValidators.unique(\n            this.cephfsSubvolumeGroupService.exists,\n            this.cephfsSubvolumeGroupService,\n            null,\n            null,\n            this.fsName\n          )\n        ]\n      }),\n      pool: new FormControl(this.dataPools[0]?.pool, {\n        validators: [Validators.required]\n      }),\n      size: new FormControl(null, {\n        updateOn: 'blur'\n      }),\n      uid: new FormControl(null),\n      gid: new FormControl(null),\n      mode: new FormControl({})\n    });\n  }\n\n  populateForm() {\n    this.action = this.actionLabels.EDIT;\n    this.cephfsSubvolumeGroupService\n      .info(this.fsName, this.subvolumegroupName)\n      .subscribe((resp: any) => {\n        // Disabled these fields since its not editable\n        this.subvolumegroupForm.get('subvolumegroupName').disable();\n\n        this.subvolumegroupForm.get('subvolumegroupName').setValue(this.subvolumegroupName);\n        if (resp.bytes_quota !== 'infinite') {\n          this.subvolumegroupForm\n            .get('size')\n            .setValue(this.dimlessBinary.transform(resp.bytes_quota));\n        }\n        this.subvolumegroupForm.get('uid').setValue(resp.uid);\n        this.subvolumegroupForm.get('gid').setValue(resp.gid);\n        this.initialMode = this.octalToHumanReadable.transform(resp.mode, true);\n\n        this.loadingReady();\n      });\n  }\n\n  submit() {\n    const subvolumegroupName = this.subvolumegroupForm.getValue('subvolumegroupName');\n    const pool = this.subvolumegroupForm.getValue('pool');\n    const size = this.formatter.toBytes(this.subvolumegroupForm.getValue('size')) || 0;\n    const uid = this.subvolumegroupForm.getValue('uid');\n    const gid = this.subvolumegroupForm.getValue('gid');\n    const mode = this.formatter.toOctalPermission(this.subvolumegroupForm.getValue('mode'));\n    if (this.isEdit) {\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/subvolume/group/' + URLVerbs.EDIT, {\n            subvolumegroupName: subvolumegroupName\n          }),\n          call: this.cephfsSubvolumeGroupService.create(\n            this.fsName,\n            subvolumegroupName,\n            pool,\n            String(size),\n            uid,\n            gid,\n            mode\n          )\n        })\n        .subscribe({\n          error: () => {\n            this.subvolumegroupForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    } else {\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/subvolume/group/' + URLVerbs.CREATE, {\n            subvolumegroupName: subvolumegroupName\n          }),\n          call: this.cephfsSubvolumeGroupService.create(\n            this.fsName,\n            subvolumegroupName,\n            pool,\n            String(size),\n            uid,\n            gid,\n            mode\n          )\n        })\n        .subscribe({\n          error: () => {\n            this.subvolumegroupForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    }\n  }\n}\n","\n<ng-container *ngIf=\"subvolumeGroup$ | async as subvolumeGroup\">\n  <cd-table *ngIf=\"subvolumeGroup\"\n            [data]=\"subvolumeGroup\"\n            columnMode=\"flex\"\n            [columns]=\"columns\"\n            selectionType=\"single\"\n            [hasDetails]=\"false\"\n            (fetchData)=\"fetchData()\"\n            (updateSelection)=\"updateSelection($event)\">\n\n    <div class=\"table-actions\">\n      <cd-table-actions [permission]=\"permissions.cephfs\"\n                        [selection]=\"selection\"\n                        class=\"btn-group\"\n                        id=\"cephfs-subvolumegropup-actions\"\n                        [tableActions]=\"tableActions\">\n      </cd-table-actions>\n    </div>\n  </cd-table>\n</ng-container>\n\n<ng-template #quotaUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar *ngIf=\"row.info.bytes_pcent && row.info.bytes_pcent !== 'undefined'; else noLimitTpl\"\n                [total]=\"row.info.bytes_quota\"\n                [used]=\"row.info.bytes_used\"\n                [title]=\"row.name\"\n                decimals=\"2\"></cd-usage-bar>\n  <ng-template #noLimitTpl>\n    <span ngbTooltip=\"Quota limit is not set\"\n          *ngIf=\"row.info.bytes_pcent === 'undefined'\"\n          i18n-ngbTooltip>\n      {{row.info.bytes_used | dimlessBinary}}</span>\n  </ng-template>\n</ng-template>\n\n<ng-template #typeTpl\n             let-value=\"data.value\">\n  <cd-label [value]=\"value\"></cd-label>\n</ng-template>\n\n<ng-template #modeToHumanReadableTpl\n             let-value=\"data.value\">\n  <span *ngFor=\"let result of (value | octalToHumanReadable)\"\n        [ngClass]=\"result.class\"\n        [ngbTooltip]=\"result.toolTip\">\n    {{ result.content }}\n  </span>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { CephfsSubvolumegroupFormComponent } from '../cephfs-subvolumegroup-form/cephfs-subvolumegroup-form.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { CephfsSubvolumeGroup } from '~/app/shared/models/cephfs-subvolume-group.model';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\n@Component({\n  selector: 'cd-cephfs-subvolume-group',\n  templateUrl: './cephfs-subvolume-group.component.html',\n  styleUrls: ['./cephfs-subvolume-group.component.scss']\n})\nexport class CephfsSubvolumeGroupComponent implements OnInit, OnChanges {\n  @ViewChild('quotaUsageTpl', { static: true })\n  quotaUsageTpl: any;\n\n  @ViewChild('typeTpl', { static: true })\n  typeTpl: any;\n\n  @ViewChild('modeToHumanReadableTpl', { static: true })\n  modeToHumanReadableTpl: any;\n\n  @ViewChild('nameTpl', { static: true })\n  nameTpl: any;\n\n  @ViewChild('quotaSizeTpl', { static: true })\n  quotaSizeTpl: any;\n\n  @Input()\n  fsName: any;\n  @Input() pools: any[];\n\n  columns: CdTableColumn[];\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n  selection = new CdTableSelection();\n  icons = Icons;\n  permissions: Permissions;\n\n  subvolumeGroup$: Observable<CephfsSubvolumeGroup[]>;\n  subject = new BehaviorSubject<CephfsSubvolumeGroup[]>([]);\n\n  modalRef: NgbModalRef;\n\n  constructor(\n    private cephfsSubvolumeGroup: CephfsSubvolumeGroupService,\n    private actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private authStorageService: AuthStorageService,\n    private taskWrapper: TaskWrapperService,\n    private cdsModalService: ModalCdsService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 0.6,\n        cellTransformation: CellTemplate.bold\n      },\n      {\n        name: $localize`Data Pool`,\n        prop: 'info.data_pool',\n        flexGrow: 0.7,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-background-primary'\n        }\n      },\n      {\n        name: $localize`Usage`,\n        prop: 'info.bytes_pcent',\n        flexGrow: 0.7,\n        cellTemplate: this.quotaUsageTpl,\n        cellClass: 'text-right'\n      },\n      {\n        name: $localize`Mode`,\n        prop: 'info.mode',\n        flexGrow: 0.5,\n        cellTemplate: this.modeToHumanReadableTpl\n      },\n      {\n        name: $localize`Created`,\n        prop: 'info.created_at',\n        flexGrow: 0.5,\n        cellTransformation: CellTemplate.timeAgo\n      }\n    ];\n\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.openModal(),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.openModal(true)\n      },\n      {\n        name: this.actionLabels.NFS_EXPORT,\n        permission: 'create',\n        icon: Icons.nfsExport,\n        routerLink: () => ['/cephfs/nfs/create', this.fsName, this.selection?.first()?.name],\n        disable: () => !this.selection.hasSingleSelection\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeSubVolumeModal()\n      }\n    ];\n\n    this.subvolumeGroup$ = this.subject.pipe(\n      switchMap(() =>\n        this.cephfsSubvolumeGroup.get(this.fsName).pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n  }\n\n  fetchData() {\n    this.subject.next([]);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fsName) {\n      this.subject.next([]);\n    }\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  openModal(edit = false) {\n    this.modalService.show(CephfsSubvolumegroupFormComponent, {\n      fsName: this.fsName,\n      subvolumegroupName: this.selection?.first()?.name,\n      pools: this.pools,\n      isEdit: edit\n    });\n  }\n\n  removeSubVolumeModal() {\n    const name = this.selection.first().name;\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'subvolume group',\n      itemNames: [name],\n      actionDescription: 'remove',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/subvolume/group/remove', { subvolumegroupName: name }),\n          call: this.cephfsSubvolumeGroup.remove(this.fsName, name)\n        })\n    });\n  }\n}\n","<cds-modal size=\"lg\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"snapshotForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"snapshotForm\"\n          novalidate>\n      <div cdsModalContent>\n        <div class=\"form-item\">\n          <cds-text-label label=\"Name\"\n                          for=\"snapshotName\"\n                          cdRequiredField=\"Name\"\n                          [invalid]=\"snapshotForm.controls.snapshotName.invalid && (snapshotForm.controls.snapshotName.dirty)\"\n                          [invalidText]=\"snapshotNameError\"\n                          i18n>\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Snapshot name...\"\n                   id=\"snapshotName\"\n                   name=\"snapshotName\"\n                   formControlName=\"snapshotName\"\n                   [invalid]=\"snapshotForm.controls.snapshotName.invalid && (snapshotForm.controls.snapshotName.dirty)\"\n                   autofocus\n                   modal-primary-focus>\n          </cds-text-label>\n          <ng-template #snapshotNameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"snapshotForm.showError('snapshotName', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"snapshotForm.showError('snapshotName', formDir, 'notUnique')\"\n                  i18n>The snapshot already exists.</span>\n          </ng-template>\n        </div>\n\n        <!-- Volume name -->\n        <div class=\"form-item\">\n          <cds-text-label label=\"Volume name\"\n                          for=\"volumeName\"\n                          i18n>Volume name\n            <input cdsText\n                   type=\"text\"\n                   id=\"volumeName\"\n                   name=\"volumeName\"\n                   formControlName=\"volumeName\">\n          </cds-text-label>\n        </div>\n\n        <!--Subvolume Group name -->\n        <div class=\"form-item\">\n          <cds-select label=\"Subvolume group\"\n                      for=\"subvolumeGroupName\"\n                      formControlName=\"subvolumeGroupName\"\n                      name=\"subvolumeGroupName\"\n                      id=\"subvolumeGroupName\"\n                      *ngIf=\"subVolumeGroups\">\n            <ng-container *ngFor=\"let subvolumegroup of subVolumeGroups\">\n              <option *ngIf=\"subvolumegroup == ''\"\n                      value=\"\">Default</option>\n              <option [value]=\"subvolumegroup\"\n                      *ngIf=\"subvolumegroup !== ''\">{{ subvolumegroup }}</option>\n            </ng-container>\n          </cds-select>\n        </div>\n\n        <!--Subvolume name -->\n        <div class=\"form-item\"\n             *ngIf=\"subVolumes$ | async as subVolumes\">\n          <cds-select label=\"Subvolume\"\n                      id=\"subVolumeName\"\n                      name=\"subVolumeName\"\n                      formControlName=\"subVolumeName\"\n                      (registerOnChange)=\"resetValidators(selection.value)\">\n            <option *ngFor=\"let subVolume of subVolumes\"\n                    [value]=\"subVolume.name\">{{ subVolume.name }}</option>\n          </cds-select>\n        </div>\n      </div>\n\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"snapshotForm\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            [modalForm]=\"true\"></cd-form-button-panel>\n\n    </form>\n  </ng-container>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport moment from 'moment';\nimport { Observable } from 'rxjs';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CephfsSubvolume } from '~/app/shared/models/cephfs-subvolume.model';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-cephfs-subvolume-snapshots-form',\n  templateUrl: './cephfs-subvolume-snapshots-form.component.html',\n  styleUrls: ['./cephfs-subvolume-snapshots-form.component.scss']\n})\nexport class CephfsSubvolumeSnapshotsFormComponent extends CdForm implements OnInit {\n  subVolumeGroups: string[];\n\n  snapshotForm: CdFormGroup;\n\n  action: string;\n  resource: string;\n\n  subVolumes$: Observable<CephfsSubvolume[]>;\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapper: TaskWrapperService,\n    private cephFsSubvolumeService: CephfsSubvolumeService,\n\n    @Optional() @Inject('fsName') public fsName: string,\n    @Optional() @Inject('subVolumeName') public subVolumeName: string,\n    @Optional() @Inject('subVolumeGroupName') public subVolumeGroupName: string,\n    @Optional() @Inject('isEdit') public isEdit = false\n  ) {\n    super();\n    this.resource = $localize`snapshot`;\n    this.action = this.actionLabels.CREATE;\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n\n    this.subVolumes$ = this.cephFsSubvolumeService.get(this.fsName, this.subVolumeGroupName, false);\n    this.loadingReady();\n  }\n\n  createForm() {\n    this.snapshotForm = new CdFormGroup({\n      snapshotName: new FormControl(moment().toISOString(true), {\n        validators: [Validators.required],\n        asyncValidators: [\n          CdValidators.unique(\n            this.cephFsSubvolumeService.snapshotExists,\n            this.cephFsSubvolumeService,\n            null,\n            null,\n            this.fsName,\n            this.subVolumeName,\n            this.subVolumeGroupName\n          )\n        ]\n      }),\n      volumeName: new FormControl({ value: this.fsName, disabled: true }),\n      subVolumeName: new FormControl(this.subVolumeName),\n      subvolumeGroupName: new FormControl(this.subVolumeGroupName)\n    });\n  }\n\n  onSelectionChange(groupName: string) {\n    this.subVolumeGroupName = groupName;\n    this.subVolumes$ = this.cephFsSubvolumeService.get(this.fsName, this.subVolumeGroupName, false);\n    this.subVolumes$.subscribe((subVolumes) => {\n      this.subVolumeName = subVolumes[0].name;\n      this.snapshotForm.get('subVolumeName').setValue(this.subVolumeName);\n\n      this.resetValidators();\n    });\n  }\n\n  resetValidators(subVolumeName?: string) {\n    this.subVolumeName = subVolumeName;\n    this.snapshotForm\n      .get('snapshotName')\n      .setAsyncValidators(\n        CdValidators.unique(\n          this.cephFsSubvolumeService.snapshotExists,\n          this.cephFsSubvolumeService,\n          null,\n          null,\n          this.fsName,\n          this.subVolumeName,\n          this.subVolumeGroupName\n        )\n      );\n    this.snapshotForm.get('snapshotName').updateValueAndValidity();\n  }\n\n  submit() {\n    const snapshotName = this.snapshotForm.getValue('snapshotName');\n    const subVolumeName = this.snapshotForm.getValue('subVolumeName');\n    const subVolumeGroupName = this.snapshotForm.getValue('subvolumeGroupName');\n    const volumeName = this.snapshotForm.getValue('volumeName');\n\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('cephfs/subvolume/snapshot/' + URLVerbs.CREATE, {\n          snapshotName: snapshotName\n        }),\n        call: this.cephFsSubvolumeService.createSnapshot(\n          volumeName,\n          snapshotName,\n          subVolumeName,\n          subVolumeGroupName\n        )\n      })\n      .subscribe({\n        error: () => this.snapshotForm.setErrors({ cdSubmitButton: true }),\n        complete: () => this.closeModal()\n      });\n  }\n}\n","export enum RepeatFrequency {\n  Hourly = 'h',\n  Daily = 'd',\n  Weekly = 'w',\n  Monthly = 'M',\n  Yearly = 'Y'\n}\n\nexport enum RepeaFrequencySingular {\n  h = 'hour',\n  d = 'day',\n  w = 'week',\n  M = 'month',\n  Y = 'year'\n}\n\nexport enum RepeaFrequencyPlural {\n  h = 'hours',\n  d = 'days',\n  w = 'weeks',\n  M = 'months',\n  Y = 'years'\n}\n","export enum RetentionFrequency {\n  Hourly = 'h',\n  Daily = 'd',\n  Weekly = 'w',\n  Monthly = 'M',\n  Yearly = 'y',\n  'lastest snapshots' = 'n'\n}\n\nexport enum RetentionFrequencyCopy {\n  h = 'Hourly',\n  d = 'Daily',\n  w = 'Weekly',\n  M = 'Monthly',\n  m = 'Minutely',\n  y = 'Yearly',\n  n = 'lastest snapshots'\n}\n","<ng-container *ngIf=\"isLoading\">\n  <cd-loading-panel>\n    <span i18n>Loading snapshots...</span>\n  </cd-loading-panel>\n</ng-container>\n\n<div class=\"row\"\n     *ngIf=\"isSubVolumesAvailable; else noGroupsTpl\">\n  <div class=\"col-sm-2\">\n    <cd-vertical-navigation title=\"Groups\"\n                            [items]=\"subvolumeGroupList\"\n                            inputIdentifier=\"group-filter\"\n                            (emitActiveItem)=\"selectSubVolumeGroup($event)\"></cd-vertical-navigation>\n  </div>\n  <div class=\"col-sm-2 vertical-line\"\n       *ngIf=\"subVolumes$ | async\">\n    <cd-vertical-navigation title=\"Subvolumes\"\n                            [items]=\"subVolumesList\"\n                            (emitActiveItem)=\"selectSubVolume($event)\"\n                            inputIdentifier=\"subvol-filter\"></cd-vertical-navigation>\n  </div>\n  <div class=\"col-8 vertical-line\"\n       *ngIf=\"isSubVolumesAvailable\">\n    <cd-table [data]=\"snapshots$ | async\"\n              columnMode=\"flex\"\n              [columns]=\"columns\"\n              selectionType=\"single\"\n              [hasDetails]=\"false\"\n              (fetchData)=\"fetchData()\"\n              (updateSelection)=\"updateSelection($event)\">\n\n      <div class=\"table-actions\">\n        <cd-table-actions [permission]=\"permissions.cephfs\"\n                          [selection]=\"selection\"\n                          class=\"btn-group\"\n                          id=\"cephfs-snapshot-actions\"\n                          [tableActions]=\"tableActions\">\n        </cd-table-actions>\n      </div>\n    </cd-table>\n  </div>\n</div>\n<ng-template #noGroupsTpl>\n  <cd-alert-panel type=\"info\"\n                  i18n\n                  *ngIf=\"!isLoading\">No subvolumes are present. Please create subvolumes to manage snapshots.</cd-alert-panel>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject, Observable, forkJoin, of } from 'rxjs';\nimport { catchError, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CephfsSubvolume, SubvolumeSnapshot } from '~/app/shared/models/cephfs-subvolume.model';\nimport { CephfsSubvolumeSnapshotsFormComponent } from './cephfs-subvolume-snapshots-form/cephfs-subvolume-snapshots-form.component';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport moment from 'moment';\nimport { Validators } from '@angular/forms';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DEFAULT_SUBVOLUME_GROUP } from '~/app/shared/constants/cephfs.constant';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\n@Component({\n  selector: 'cd-cephfs-subvolume-snapshots-list',\n  templateUrl: './cephfs-subvolume-snapshots-list.component.html',\n  styleUrls: ['./cephfs-subvolume-snapshots-list.component.scss']\n})\nexport class CephfsSubvolumeSnapshotsListComponent implements OnInit, OnChanges {\n  @Input() fsName: string;\n\n  context: CdTableFetchDataContext;\n  columns: CdTableColumn[] = [];\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permissions: Permissions;\n  modalRef: NgbModalRef;\n\n  subVolumes$: Observable<CephfsSubvolume[]>;\n  snapshots$: Observable<any[]>;\n  snapshotSubject = new BehaviorSubject<SubvolumeSnapshot[]>([]);\n  subVolumeSubject = new BehaviorSubject<CephfsSubvolume[]>([]);\n\n  subvolumeGroupList: string[] = [];\n  subVolumesList: string[];\n\n  activeGroupName = '';\n  activeSubVolumeName = '';\n\n  isSubVolumesAvailable = false;\n  isLoading = true;\n\n  observables: any = [];\n  allGroups: any = [];\n\n  constructor(\n    private cephfsSubvolumeGroupService: CephfsSubvolumeGroupService,\n    private cephfsSubvolumeService: CephfsSubvolumeService,\n    private actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private authStorageService: AuthStorageService,\n    private cdDatePipe: CdDatePipe,\n    private taskWrapper: TaskWrapperService,\n    private notificationService: NotificationService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Created`,\n        prop: 'info.created_at',\n        flexGrow: 1,\n        pipe: this.cdDatePipe\n      },\n      {\n        name: $localize`Pending Clones`,\n        prop: 'info.has_pending_clones',\n        flexGrow: 0.5,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            no: { class: 'badge-success' },\n            yes: { class: 'badge-info' }\n          }\n        }\n      }\n    ];\n\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.openModal()\n      },\n      {\n        name: this.actionLabels.CLONE,\n        permission: 'create',\n        icon: Icons.clone,\n        disable: () => !this.selection.hasSingleSelection,\n        click: () => this.cloneModal()\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        disable: () => !this.selection.hasSingleSelection,\n        click: () => this.deleteSnapshot()\n      }\n    ];\n\n    this.cephfsSubvolumeGroupService\n      .get(this.fsName)\n      .pipe(\n        switchMap((groups) => {\n          // manually adding the group '_nogroup' to the list.\n\n          groups.unshift({ name: '' });\n          this.allGroups = Array.from(groups).map((group) => {\n            return {\n              value: group.name,\n              text: group.name === '' ? DEFAULT_SUBVOLUME_GROUP : group.name\n            };\n          });\n          const observables = groups.map((group) =>\n            this.cephfsSubvolumeService.existsInFs(this.fsName, group.name).pipe(\n              switchMap((resp) => {\n                if (resp) {\n                  this.subvolumeGroupList.push(group.name);\n                }\n                return of(resp); // Emit the response\n              })\n            )\n          );\n\n          return forkJoin(observables);\n        })\n      )\n      .subscribe(() => {\n        if (this.subvolumeGroupList.length) {\n          this.isSubVolumesAvailable = true;\n        }\n        this.isLoading = false;\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.fsName) {\n      this.subVolumeSubject.next([]);\n    }\n  }\n\n  selectSubVolumeGroup(subVolumeGroupName: string) {\n    this.activeGroupName = subVolumeGroupName;\n    this.getSubVolumes();\n  }\n\n  selectSubVolume(subVolumeName: string) {\n    this.activeSubVolumeName = subVolumeName;\n    this.getSubVolumesSnapshot();\n  }\n\n  getSubVolumes() {\n    this.subVolumes$ = this.subVolumeSubject.pipe(\n      switchMap(() =>\n        this.cephfsSubvolumeService.get(this.fsName, this.activeGroupName, false).pipe(\n          tap((resp) => {\n            this.subVolumesList = resp.map((subVolume) => subVolume.name);\n            this.activeSubVolumeName = resp[0].name;\n            this.getSubVolumesSnapshot();\n          })\n        )\n      )\n    );\n  }\n\n  getSubVolumesSnapshot() {\n    this.snapshots$ = this.snapshotSubject.pipe(\n      switchMap(() =>\n        this.cephfsSubvolumeService\n          .getSnapshots(this.fsName, this.activeSubVolumeName, this.activeGroupName)\n          .pipe(\n            catchError(() => {\n              this.context.error();\n              return of(null);\n            })\n          )\n      ),\n      shareReplay(1)\n    );\n  }\n\n  fetchData() {\n    this.snapshotSubject.next([]);\n  }\n\n  openModal(edit = false) {\n    this.modalService.show(CephfsSubvolumeSnapshotsFormComponent, {\n      fsName: this.fsName,\n      subVolumeName: this.activeSubVolumeName,\n      subVolumeGroupName: this.activeGroupName,\n      subVolumeGroups: this.subvolumeGroupList,\n      isEdit: edit\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteSnapshot() {\n    const snapshotName = this.selection.first().name;\n    const subVolumeName = this.activeSubVolumeName;\n    const subVolumeGroupName = this.activeGroupName;\n    const fsName = this.fsName;\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      actionDescription: 'remove',\n      itemNames: [snapshotName],\n      itemDescription: 'Snapshot',\n      submitAction: () =>\n        this.taskWrapper\n          .wrapTaskAroundCall({\n            task: new FinishedTask('cephfs/subvolume/snapshot/delete', {\n              fsName: fsName,\n              subVolumeName: subVolumeName,\n              subVolumeGroupName: subVolumeGroupName,\n              snapshotName: snapshotName\n            }),\n            call: this.cephfsSubvolumeService.deleteSnapshot(\n              fsName,\n              subVolumeName,\n              snapshotName,\n              subVolumeGroupName\n            )\n          })\n          .subscribe({\n            complete: () => this.modalService.dismissAll(),\n            error: () => this.modalRef.componentInstance.stopLoadingSpinner()\n          })\n    });\n  }\n\n  cloneModal() {\n    const cloneName = `clone_${moment().toISOString(true)}`;\n    this.modalService.show(FormModalComponent, {\n      titleText: $localize`Create clone`,\n      fields: [\n        {\n          type: 'text',\n          name: 'cloneName',\n          value: cloneName,\n          label: $localize`Name`,\n          validators: [Validators.required, Validators.pattern(/^[.A-Za-z0-9_+:-]+$/)],\n          asyncValidators: [\n            CdValidators.unique(\n              this.cephfsSubvolumeService.exists,\n              this.cephfsSubvolumeService,\n              null,\n              null,\n              this.fsName,\n              this.activeGroupName\n            )\n          ],\n          required: true,\n          errors: {\n            pattern: $localize`Allowed characters are letters, numbers, '.', '-', '+', ':' or '_'`,\n            notUnique: $localize`A subvolume or clone with this name already exists.`\n          }\n        },\n        {\n          type: 'select',\n          name: 'groupName',\n          value: this.activeGroupName,\n          label: $localize`Group name`,\n          valueChangeListener: true,\n          dependsOn: 'cloneName',\n          typeConfig: {\n            options: this.allGroups\n          }\n        }\n      ],\n      submitButtonText: $localize`Create Clone`,\n      updateAsyncValidators: (value: any) =>\n        CdValidators.unique(\n          this.cephfsSubvolumeService.exists,\n          this.cephfsSubvolumeService,\n          null,\n          null,\n          this.fsName,\n          value\n        ),\n      onSubmit: (value: any) => {\n        this.cephfsSubvolumeService\n          .createSnapshotClone(\n            this.fsName,\n            this.activeSubVolumeName,\n            this.selection.first().name,\n            value.cloneName,\n            this.activeGroupName,\n            value.groupName\n          )\n          .subscribe(() =>\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Created Clone \"${value.cloneName}\" successfully.`\n            )\n          );\n      }\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { catchError, map } from 'rxjs/operators';\nimport { intersection, isEqual, uniqWith } from 'lodash';\nimport { SnapshotSchedule } from '../models/snapshot-schedule';\nimport { of } from 'rxjs';\nimport {\n  RepeaFrequencyPlural,\n  RepeaFrequencySingular,\n  RepeatFrequency\n} from '../enum/repeat-frequency.enum';\nimport { RetentionFrequencyCopy } from '../enum/retention-frequency.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CephfsSnapshotScheduleService {\n  baseURL = 'api/cephfs';\n\n  constructor(private http: HttpClient) {}\n\n  create(data: Record<string, any>): Observable<any> {\n    return this.http.post(`${this.baseURL}/snapshot/schedule`, data, { observe: 'response' });\n  }\n\n  update({ fs, path, ...rest }: Record<string, any>): Observable<any> {\n    return this.http.put(\n      `${this.baseURL}/snapshot/schedule/${fs}/${encodeURIComponent(path)}`,\n      rest,\n      { observe: 'response' }\n    );\n  }\n\n  activate({ fs, path, ...rest }: Record<string, any>): Observable<any> {\n    return this.http.post(\n      `${this.baseURL}/snapshot/schedule/${fs}/${encodeURIComponent(path)}/activate`,\n      rest,\n      { observe: 'response' }\n    );\n  }\n\n  deactivate({ fs, path, ...rest }: Record<string, any>): Observable<any> {\n    return this.http.post(\n      `${this.baseURL}/snapshot/schedule/${fs}/${encodeURIComponent(path)}/deactivate`,\n      rest,\n      { observe: 'response' }\n    );\n  }\n\n  delete({\n    fs,\n    path,\n    schedule,\n    start,\n    retentionPolicy,\n    subvol,\n    group\n  }: Record<string, any>): Observable<any> {\n    let deleteUrl = `${this.baseURL}/snapshot/schedule/${fs}/${encodeURIComponent(\n      path\n    )}/delete_snapshot?schedule=${schedule}&start=${encodeURIComponent(start)}`;\n    if (retentionPolicy) {\n      deleteUrl += `&retention_policy=${retentionPolicy}`;\n    }\n    if (subvol && group) {\n      deleteUrl += `&subvol=${encodeURIComponent(subvol)}&group=${encodeURIComponent(group)}`;\n    }\n    return this.http.delete(deleteUrl);\n  }\n\n  checkScheduleExists(\n    path: string,\n    fs: string,\n    interval: number,\n    frequency: RepeatFrequency,\n    isSubvolume = false\n  ): Observable<boolean> {\n    return this.getSnapshotScheduleList(path, fs, false).pipe(\n      map((response) => {\n        const index = response\n          .filter((x) => (isSubvolume ? x.path.startsWith(path) : x.path === path))\n          .findIndex((x) => x.schedule === `${interval}${frequency}`);\n        return index > -1;\n      }),\n      catchError(() => {\n        return of(false);\n      })\n    );\n  }\n\n  checkRetentionPolicyExists(\n    path: string,\n    fs: string,\n    retentionFrequencies: string[],\n    retentionFrequenciesRemoved: string[] = [],\n    isSubvolume = false\n  ): Observable<{ exists: boolean; errorIndex: number }> {\n    return this.getSnapshotSchedule(path, fs, false).pipe(\n      map((response) => {\n        let errorIndex = -1;\n        let exists = false;\n        const index = response.findIndex((x) =>\n          isSubvolume ? x.path.startsWith(path) : x.path === path\n        );\n        const result = retentionFrequencies?.length\n          ? intersection(\n              Object.keys(response?.[index]?.retention).filter(\n                (v) => !retentionFrequenciesRemoved.includes(v)\n              ),\n              retentionFrequencies\n            )\n          : [];\n        exists = !!result?.length;\n        result?.forEach((r) => (errorIndex = retentionFrequencies.indexOf(r)));\n\n        return { exists, errorIndex };\n      }),\n      catchError(() => {\n        return of({ exists: false, errorIndex: -1 });\n      })\n    );\n  }\n\n  getSnapshotSchedule(path: string, fs: string, recursive = true): Observable<SnapshotSchedule[]> {\n    return this.http\n      .get<SnapshotSchedule[]>(\n        `${this.baseURL}/snapshot/schedule/${fs}?path=${path}&recursive=${recursive}`\n      )\n      .pipe(\n        catchError(() => {\n          return of([]);\n        })\n      );\n  }\n\n  getSnapshotScheduleList(\n    path: string,\n    fs: string,\n    recursive = true\n  ): Observable<SnapshotSchedule[]> {\n    return this.getSnapshotSchedule(path, fs, recursive).pipe(\n      map((snapList: SnapshotSchedule[]) =>\n        uniqWith(\n          snapList.map((snapItem: SnapshotSchedule) => ({\n            ...snapItem,\n            scheduleCopy: this.parseScheduleCopy(snapItem.schedule),\n            status: snapItem.active ? 'Active' : 'Inactive',\n            subvol: snapItem?.subvol,\n            retentionCopy: this.parseRetentionCopy(snapItem?.retention),\n            retention: Object.values(snapItem?.retention || [])?.length\n              ? Object.entries(snapItem.retention)\n                  ?.map?.(([frequency, interval]) => `${interval}${frequency}`)\n                  .join(' ')\n              : '-'\n          })),\n          isEqual\n        )\n      )\n    );\n  }\n\n  parseScheduleCopy(schedule: string): string {\n    const scheduleArr = schedule.split('');\n    const interval = Number(scheduleArr.filter((x) => !isNaN(Number(x))).join(''));\n    const frequencyUnit = scheduleArr[scheduleArr.length - 1];\n    const frequency =\n      interval > 1 ? RepeaFrequencyPlural[frequencyUnit] : RepeaFrequencySingular[frequencyUnit];\n    return $localize`Every ${interval > 1 ? interval + ' ' : ''}${frequency}`;\n  }\n\n  parseRetentionCopy(retention: string | Record<string, number>): string[] {\n    if (!retention) return ['-'];\n    return Object.entries(retention).map(([frequency, interval]) =>\n      $localize`${interval} ${RetentionFrequencyCopy[frequency]}`.toLocaleLowerCase()\n    );\n  }\n}\n","<cds-modal size=\"lg\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>\n    {{ action | titlecase }} {{ resource | upperFirst }}\n    </h3>\n  </cds-modal-header>\n\n  <ng-container *cdFormLoading=\"loading\">\n    <div cdsModalContent>\n      <form name=\"snapScheduleForm\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"snapScheduleForm\"\n            novalidate>\n        <!-- Directory -->\n        <div class=\"form-item\">\n          <cds-text-label for=\"directory\"\n                          i18n\n                          cdRequiredField=\"Directory\"\n                          [invalid]=\"snapScheduleForm.controls.directory.invalid && (snapScheduleForm.controls.directory.dirty)\"\n                          [invalidText]=\"directoryError\"\n                          [skeleton]=\"directoryStore.isLoading\"\n                          modal-primary-focus>\n            <ng-container *ngIf=\"!directoryStore.isLoading\">Directory (required)</ng-container>\n            <input cdsText\n                   type=\"text\"\n                   formControlName=\"directory\"\n                   name=\"directory\"\n                   [ngbTypeahead]=\"search\"\n                   [invalid]=\"snapScheduleForm.controls.directory.invalid && (snapScheduleForm.controls.directory.dirty)\"\n                   [placeholder]=\"directoryStore.isLoading ? '' : 'Directory path'\"\n                   [skeleton]=\"directoryStore.isLoading\"/>\n          </cds-text-label>\n          <ng-template #directoryError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"snapScheduleForm.showError('directory', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"snapScheduleForm.showError('directory', formDir, 'notUnique')\"\n                  i18n>A snapshot schedule for this path already exists.</span>\n          </ng-template>\n        </div>\n\n        <!--Start date -->\n        <cd-date-time-picker\n          name=\"Start Date\"\n          helperText=\"The time zone is assumed to be UTC\"\n          [control]=\"snapScheduleForm.get('startDate')\"\n          [disabled]=\"isEdit\"></cd-date-time-picker>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"snapScheduleForm.showError('startDate', formDir, 'required')\"\n                i18n>This field is required.</span>\n\n        <!-- Repeat interval -->\n        <div class=\"form-item form-item-append\"\n             cdsRow>\n          <div cdsCol>\n            <cds-number [id]=\"'repeatInterval'\"\n                        [name]=\"'repeatInterval'\"\n                        [formControlName]=\"'repeatInterval'\"\n                        [label]=\"'Schedule'\"\n                        [min]=\"1\"\n                        [invalid]=\"!snapScheduleForm.controls.repeatInterval.valid && (snapScheduleForm.controls.repeatInterval.dirty)\"\n                        [invalidText]=\"repeatIntervalError\"\n                        cdRequiredField=\"Schedule\"></cds-number>\n          </div>\n          <div cdsCol>\n            <cds-select id=\"repeatFrequency\"\n                        name=\"repeatFrequency\"\n                        formControlName=\"repeatFrequency\"\n                        label=\"Frequency\"\n                        [invalid]=\"!snapScheduleForm.controls.repeatFrequency.valid && (snapScheduleForm.controls.repeatFrequency.dirty)\"\n                        [invalidText]=\"repeatFrequencyError\"\n                        *ngIf=\"repeatFrequencies\">\n              <option *ngFor=\"let freq of repeatFrequencies\"\n                      [value]=\"freq[1]\">{{ freq[0] }}\n              </option>\n            </cds-select>\n            <ng-template #repeatFrequencyError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"snapScheduleForm.showError('repeatFrequency', formDir, 'notUnique')\"\n                    i18n>This schedule already exists for the selected directory.</span>\n            </ng-template>\n            <ng-template #repeatIntervalError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"snapScheduleForm.showError('repeatInterval', formDir, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"snapScheduleForm.showError('repeatInterval', formDir, 'min')\"\n                    i18n>Choose a value greater than 0.</span>\n            </ng-template>\n          </div>\n        </div>\n\n        <!-- Retention policies -->\n        <ng-container formArrayName=\"retentionPolicies\"\n                      *ngFor=\"let retentionPolicy of retentionPolicies.controls; index as i\">\n          <ng-container [formGroupName]=\"i\">\n            <div cdsRow\n                 class=\"form-item form-item-append\">\n              <div cdsCol\n                   [columnNumbers]=\"{lg: 8}\">\n                <cds-number [id]=\"'retentionInterval' + i\"\n                            [name]=\"'retentionInterval' + i\"\n                            [formControlName]=\"'retentionInterval'\"\n                            [label]=\"'Retention policy'\"\n                            [min]=\"1\"\n                            [invalid]=\"snapScheduleForm.controls['retentionPolicies'].controls[i].invalid && snapScheduleForm.controls['retentionPolicies'].dirty\"\n                            [invalidText]=\"retentionPolicyError\"></cds-number>\n              </div>\n              <div cdsCol\n                   [columnNumbers]=\"{lg: 7}\">\n                <cds-select id=\"retentionFrequency\"\n                            name=\"retentionFrequency\"\n                            formControlName=\"retentionFrequency\"\n                            label=\"Frequency\"\n                            *ngIf=\"retentionFrequencies\">\n                  <option *ngFor=\"let freq of retentionFrequencies\"\n                          [value]=\"freq[1]\">{{ freq[0] }}</option>\n\n                </cds-select>\n              </div>\n              <div cdsCol\n                   [columnNumbers]=\"{lg: 1}\"\n                   class=\"item-action-btn\">\n                <cds-icon-button kind=\"danger\"\n                                 size=\"sm\"\n                                 (click)=\"removeRetentionPolicy(i)\">\n                  <svg cdsIcon=\"trash-can\"\n                       size=\"32\"\n                       class=\"cds--btn__icon\"></svg>\n                </cds-icon-button>\n              </div>\n            </div>\n            <ng-template #retentionPolicyError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"snapScheduleForm.controls['retentionPolicies'].controls[i].invalid\"\n                    i18n>This retention policy already exists for the selected directory.</span>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n\n        <div class=\"form-item\">\n          <button cdsButton=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"addRetentionPolicy()\"\n                  i18n>\n            Add retention policy\n            <svg cdsIcon=\"add\"\n                 size=\"32\"\n                 class=\"cds--btn__icon\"\n                 icon></svg>\n          </button>\n        </div>\n      </form>\n    </div>\n    <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                          [form]=\"snapScheduleForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\"></cd-form-button-panel>\n  </ng-container>\n</cds-modal>\n","import { ChangeDetectorRef, Component, Inject, OnInit, Optional } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { NgbDateStruct, NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { padStart, uniq } from 'lodash';\nimport moment from 'moment';\nimport { Observable, OperatorFunction, of, timer } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  pluck,\n  switchMap,\n  tap\n} from 'rxjs/operators';\nimport { CephfsSnapshotScheduleService } from '~/app/shared/api/cephfs-snapshot-schedule.service';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { DirectoryStoreService } from '~/app/shared/api/directory-store.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { DEFAULT_SUBVOLUME_GROUP } from '~/app/shared/constants/cephfs.constant';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { RepeatFrequency } from '~/app/shared/enum/repeat-frequency.enum';\nimport { RetentionFrequency } from '~/app/shared/enum/retention-frequency.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport {\n  RetentionPolicy,\n  SnapshotSchedule,\n  SnapshotScheduleFormValue\n} from '~/app/shared/models/snapshot-schedule';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst VALIDATON_TIMER = 300;\nconst DEBOUNCE_TIMER = 300;\n\n@Component({\n  selector: 'cd-cephfs-snapshotschedule-form',\n  templateUrl: './cephfs-snapshotschedule-form.component.html',\n  styleUrls: ['./cephfs-snapshotschedule-form.component.scss']\n})\nexport class CephfsSnapshotscheduleFormComponent extends CdForm implements OnInit {\n  subvol!: string;\n  group!: string;\n  icons = Icons;\n  repeatFrequencies = Object.entries(RepeatFrequency);\n  retentionFrequencies = Object.entries(RetentionFrequency);\n  retentionPoliciesToRemove: RetentionPolicy[] = [];\n  isDefaultSubvolumeGroup = false;\n  subvolumeGroup!: string;\n  subvolume!: string;\n  isSubvolume = false;\n\n  minDate!: string;\n\n  snapScheduleForm!: CdFormGroup;\n\n  action!: string;\n  resource!: string;\n\n  columns!: CdTableColumn[];\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private snapScheduleService: CephfsSnapshotScheduleService,\n    private taskWrapper: TaskWrapperService,\n    private cd: ChangeDetectorRef,\n    public directoryStore: DirectoryStoreService,\n    private subvolumeService: CephfsSubvolumeService,\n\n    @Optional() @Inject('fsName') public fsName: string,\n    @Optional() @Inject('id') public id: number,\n    @Optional() @Inject('path') public path: string,\n    @Optional() @Inject('schedule') public schedule: string,\n    @Optional() @Inject('retention') public retention: string,\n    @Optional() @Inject('start') public start: string,\n    @Optional() @Inject('status') public status: string,\n    @Optional() @Inject('isEdit') public isEdit = false\n  ) {\n    super();\n    this.resource = $localize`Snapshot schedule`;\n\n    const currentDatetime = new Date();\n    this.minDate = `${currentDatetime.getUTCFullYear()}-${\n      currentDatetime.getUTCMonth() + 1\n    }-${currentDatetime.getUTCDate()}`;\n  }\n\n  ngOnInit(): void {\n    this.action = this.actionLabels.CREATE;\n    this.directoryStore.loadDirectories(this.id, '/', 3);\n    this.createForm();\n    this.isEdit ? this.populateForm() : this.loadingReady();\n\n    this.snapScheduleForm\n      .get('directory')\n      .valueChanges.pipe(\n        filter(() => !this.isEdit),\n        debounceTime(DEBOUNCE_TIMER),\n        tap(() => {\n          this.isSubvolume = false;\n        }),\n        tap((value: string) => {\n          this.subvolumeGroup = value?.split?.('/')?.[2];\n          this.subvolume = value?.split?.('/')?.[3];\n        }),\n        filter(() => !!this.subvolume && !!this.subvolumeGroup),\n        tap(() => {\n          this.isSubvolume = !!this.subvolume && !!this.subvolumeGroup;\n          this.snapScheduleForm.get('repeatFrequency').setErrors(null);\n        }),\n        mergeMap(() =>\n          this.subvolumeService\n            .exists(\n              this.subvolume,\n              this.fsName,\n              this.subvolumeGroup === DEFAULT_SUBVOLUME_GROUP ? '' : this.subvolumeGroup\n            )\n            .pipe(\n              tap((exists: boolean) => (this.isSubvolume = exists)),\n              tap(\n                (exists: boolean) =>\n                  (this.isDefaultSubvolumeGroup =\n                    exists && this.subvolumeGroup === DEFAULT_SUBVOLUME_GROUP)\n              )\n            )\n        ),\n        filter((exists: boolean) => exists),\n        mergeMap(() =>\n          this.subvolumeService\n            .info(\n              this.fsName,\n              this.subvolume,\n              this.subvolumeGroup === DEFAULT_SUBVOLUME_GROUP ? '' : this.subvolumeGroup\n            )\n            .pipe(pluck('path'))\n        ),\n        filter((path: string) => path !== this.snapScheduleForm.get('directory').value)\n      )\n      .subscribe({\n        next: (path: string) => this.snapScheduleForm.get('directory').setValue(path)\n      });\n  }\n\n  get retentionPolicies() {\n    return this.snapScheduleForm.get('retentionPolicies') as FormArray;\n  }\n\n  search: OperatorFunction<string, readonly string[]> = (input: Observable<string>) =>\n    input.pipe(\n      debounceTime(DEBOUNCE_TIMER),\n      distinctUntilChanged(),\n      switchMap((term) =>\n        this.directoryStore.search(term, this.id).pipe(\n          catchError(() => {\n            return of([]);\n          })\n        )\n      )\n    );\n\n  populateForm() {\n    this.action = this.actionLabels.EDIT;\n    this.snapScheduleService.getSnapshotSchedule(this.path, this.fsName, false).subscribe({\n      next: (response: SnapshotSchedule[]) => {\n        const schedule = response.find((x) => x.path === this.path);\n        const offset = moment().utcOffset();\n        const startDate = moment\n          .parseZone(schedule.start)\n          .utc()\n          .utcOffset(offset)\n          .local()\n          .format('YYYY-MM-DD HH:mm:ss');\n        this.snapScheduleForm.get('directory').disable();\n        this.snapScheduleForm.get('directory').setValue(schedule.path);\n        this.snapScheduleForm.get('startDate').disable();\n        this.snapScheduleForm.get('startDate').setValue(startDate);\n        this.snapScheduleForm.get('repeatInterval').disable();\n        this.snapScheduleForm.get('repeatInterval').setValue(schedule.schedule.split('')?.[0]);\n        this.snapScheduleForm.get('repeatFrequency').disable();\n        this.snapScheduleForm.get('repeatFrequency').setValue(schedule.schedule.split('')?.[1]);\n\n        // retention policies\n        schedule.retention &&\n          Object.entries(schedule.retention).forEach(([frequency, interval], idx) => {\n            const freqKey = Object.keys(RetentionFrequency)[\n              Object.values(RetentionFrequency).indexOf(frequency as any)\n            ];\n            this.retentionPolicies.push(\n              new FormGroup({\n                retentionInterval: new FormControl(interval),\n                retentionFrequency: new FormControl(RetentionFrequency[freqKey])\n              })\n            );\n            this.retentionPolicies.controls[idx].get('retentionInterval').disable();\n            this.retentionPolicies.controls[idx].get('retentionFrequency').disable();\n          });\n        this.loadingReady();\n      }\n    });\n  }\n\n  createForm() {\n    this.snapScheduleForm = new CdFormGroup(\n      {\n        directory: new FormControl(undefined, {\n          updateOn: 'blur',\n          validators: [Validators.required]\n        }),\n        startDate: new FormControl(this.minDate, {\n          validators: [Validators.required]\n        }),\n        repeatInterval: new FormControl(1, {\n          validators: [Validators.required, Validators.min(1)]\n        }),\n        repeatFrequency: new FormControl(RepeatFrequency.Daily, {\n          validators: [Validators.required]\n        }),\n        retentionPolicies: new FormArray([])\n      },\n      {\n        asyncValidators: [this.validateSchedule(), this.validateRetention()]\n      }\n    );\n  }\n\n  addRetentionPolicy() {\n    this.retentionPolicies.push(\n      new FormGroup({\n        retentionInterval: new FormControl(1),\n        retentionFrequency: new FormControl(RetentionFrequency.Daily)\n      })\n    );\n    this.cd.detectChanges();\n  }\n\n  removeRetentionPolicy(idx: number) {\n    if (this.isEdit && this.retentionPolicies.at(idx).disabled) {\n      const values = this.retentionPolicies.at(idx).value as RetentionPolicy;\n      this.retentionPoliciesToRemove.push(values);\n    }\n    this.retentionPolicies.removeAt(idx);\n    this.retentionPolicies.controls.forEach((x) =>\n      x.get('retentionFrequency').updateValueAndValidity()\n    );\n    this.cd.detectChanges();\n  }\n\n  convertNumberToString(input: number, length = 2, format = '0'): string {\n    return padStart(input.toString(), length, format);\n  }\n\n  parseDatetime(date: NgbDateStruct, time?: NgbTimeStruct): string {\n    if (!date || !time) return null;\n    return `${date.year}-${this.convertNumberToString(date.month)}-${this.convertNumberToString(\n      date.day\n    )}T${this.convertNumberToString(time.hour)}:${this.convertNumberToString(\n      time.minute\n    )}:${this.convertNumberToString(time.second)}`;\n  }\n  parseSchedule(interval: number, frequency: string): string {\n    return `${interval}${frequency}`;\n  }\n\n  parseRetentionPolicies(retentionPolicies: RetentionPolicy[]) {\n    return retentionPolicies\n      ?.filter((r) => r?.retentionInterval !== null && r?.retentionFrequency !== null)\n      ?.map?.((r) => `${r.retentionInterval}-${r.retentionFrequency}`)\n      .join('|');\n  }\n\n  submit() {\n    this.validateSchedule()(this.snapScheduleForm).subscribe({\n      next: () => {\n        if (this.snapScheduleForm.invalid) {\n          this.snapScheduleForm.setErrors({ cdSubmitButton: true });\n          return;\n        }\n\n        const values = this.snapScheduleForm.value as SnapshotScheduleFormValue;\n\n        if (this.isEdit) {\n          const retentionPoliciesToAdd = (this.snapScheduleForm.get(\n            'retentionPolicies'\n          ) as FormArray).controls\n            ?.filter(\n              (ctrl) =>\n                !ctrl.get('retentionInterval').disabled && !ctrl.get('retentionFrequency').disabled\n            )\n            .map((ctrl) => ({\n              retentionInterval: ctrl.get('retentionInterval').value,\n              retentionFrequency: ctrl.get('retentionFrequency').value\n            }));\n\n          const updateObj = {\n            fs: this.fsName,\n            path: this.path,\n            subvol: this.subvol,\n            group: this.group,\n            retention_to_add: this.parseRetentionPolicies(retentionPoliciesToAdd) || null,\n            retention_to_remove: this.parseRetentionPolicies(this.retentionPoliciesToRemove) || null\n          };\n\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('cephfs/snapshot/schedule/' + URLVerbs.EDIT, {\n                path: this.path\n              }),\n              call: this.snapScheduleService.update(updateObj)\n            })\n            .subscribe({\n              error: () => {\n                this.snapScheduleForm.setErrors({ cdSubmitButton: true });\n              },\n              complete: () => {\n                this.closeModal();\n              }\n            });\n        } else {\n          const snapScheduleObj = {\n            fs: this.fsName,\n            path: values.directory,\n            snap_schedule: this.parseSchedule(values?.repeatInterval, values?.repeatFrequency),\n            start: new Date(values?.startDate.replace(/\\//g, '-').replace(' ', 'T'))\n              .toISOString()\n              .slice(0, 19)\n          };\n\n          const retentionPoliciesValues = this.parseRetentionPolicies(values?.retentionPolicies);\n\n          if (retentionPoliciesValues) {\n            snapScheduleObj['retention_policy'] = retentionPoliciesValues;\n          }\n\n          if (this.isSubvolume) {\n            snapScheduleObj['subvol'] = this.subvolume;\n          }\n\n          if (this.isSubvolume && !this.isDefaultSubvolumeGroup) {\n            snapScheduleObj['group'] = this.subvolumeGroup;\n          }\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('cephfs/snapshot/schedule/' + URLVerbs.CREATE, {\n                path: snapScheduleObj.path\n              }),\n              call: this.snapScheduleService.create(snapScheduleObj)\n            })\n            .subscribe({\n              error: () => {\n                this.snapScheduleForm.setErrors({ cdSubmitButton: true });\n              },\n              complete: () => {\n                this.closeModal();\n              }\n            });\n        }\n      }\n    });\n  }\n\n  validateSchedule() {\n    return (frm: AbstractControl) => {\n      const directory = frm.get('directory');\n      const repeatFrequency = frm.get('repeatFrequency');\n      const repeatInterval = frm.get('repeatInterval');\n\n      if (this.isEdit) {\n        return of(null);\n      }\n\n      return timer(VALIDATON_TIMER).pipe(\n        switchMap(() =>\n          this.snapScheduleService\n            .checkScheduleExists(\n              directory?.value,\n              this.fsName,\n              repeatInterval?.value,\n              repeatFrequency?.value,\n              this.isSubvolume\n            )\n            .pipe(\n              map((exists: boolean) => {\n                if (exists) {\n                  repeatFrequency?.markAsDirty();\n                  repeatFrequency?.setErrors({ notUnique: true }, { emitEvent: true });\n                } else {\n                  repeatFrequency?.setErrors(null);\n                }\n                return null;\n              })\n            )\n        )\n      );\n    };\n  }\n\n  getFormArrayItem(frm: FormGroup, frmArrayName: string, ctrl: string, idx: number) {\n    return (frm.get(frmArrayName) as FormArray)?.controls?.[idx]?.get?.(ctrl);\n  }\n\n  validateRetention() {\n    return (frm: FormGroup) => {\n      return timer(VALIDATON_TIMER).pipe(\n        switchMap(() => {\n          const retentionList = (frm.get('retentionPolicies') as FormArray).controls?.map(\n            (ctrl) => {\n              return ctrl.get('retentionFrequency').value;\n            }\n          );\n          if (uniq(retentionList)?.length !== retentionList?.length) {\n            this.getFormArrayItem(\n              frm,\n              'retentionPolicies',\n              'retentionFrequency',\n              retentionList.length - 1\n            )?.setErrors?.({\n              notUnique: true\n            });\n            return null;\n          }\n          return this.snapScheduleService\n            .checkRetentionPolicyExists(\n              frm.get('directory').value,\n              this.fsName,\n              retentionList,\n              this.retentionPoliciesToRemove?.map?.((rp) => rp.retentionFrequency) || [],\n              !!this.subvolume\n            )\n            .pipe(\n              map(({ exists, errorIndex }) => {\n                if (exists) {\n                  this.getFormArrayItem(\n                    frm,\n                    'retentionPolicies',\n                    'retentionFrequency',\n                    errorIndex\n                  )?.setErrors?.({ notUnique: true });\n                } else {\n                  (frm.get('retentionPolicies') as FormArray).controls?.forEach?.((_, i) => {\n                    this.getFormArrayItem(\n                      frm,\n                      'retentionPolicies',\n                      'retentionFrequency',\n                      i\n                    )?.setErrors?.(null);\n                  });\n                }\n                return null;\n              })\n            );\n        })\n      );\n    };\n  }\n}\n","<cd-alert-panel\n  *ngIf=\"(snapScheduleModuleStatus$ | async) === false\"\n  type=\"info\"\n  spacingClass=\"mb-3\"\n  i18n\n  class=\"align-items-center\"\n  actionName=\"Enable\"\n  (action)=\"enableSnapshotSchedule()\"\n>\n  In order to access the snapshot scheduler feature, the snap_scheduler module must be enabled\n</cd-alert-panel>\n\n<ng-template\n  #pathTpl\n  let-row=\"data.row\">\n  <span\n    class=\"fw-bold\"\n    [ngbTooltip]=\"fullpathTpl\"\n    triggers=\"click:blur\">\n    {{ row.pathForSelection?.split?.(\"@\")?.[0] | path }}\n  </span>\n\n  <span\n  *ngIf=\"row.active; else inactiveStatusTpl\">\n    <i\n      [ngClass]=\"[icons.success, icons.large]\"\n      ngbTooltip=\"{{ row.pathForSelection?.split?.('@')?.[0] }} is active\"\n      class=\"text-success\"\n    ></i>\n  </span>\n\n  <ng-template #inactiveStatusTpl>\n    <i\n      [ngClass]=\"[icons.warning, icons.large]\"\n      class=\"text-warning\"\n      ngbTooltip=\"{{ row.pathForSelection?.split?.('@')?.[0] }} has been deactivated\"\n    ></i>\n  </ng-template>\n\n  <ng-template #fullpathForSelectionTpl>\n    <cd-copy-2-clipboard-button\n      *ngIf=\"row.pathForSelection\"\n      [source]=\"row.pathForSelection?.split?.('@')?.[0]\"\n      [byId]=\"false\"\n      [size]=\"lg\"\n      [text]=\"row.pathForSelection?.split?.('@')?.[0]\"\n    >\n    </cd-copy-2-clipboard-button>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  #retentionTpl\n  let-row=\"data.row\">\n  <ul *ngIf=\"row.retentionCopy.length; else noDataTpl\">\n    <li *ngFor=\"let ret of row.retentionCopy\">{{ ret }}</li>\n  </ul>\n</ng-template>\n\n<ng-template\n  #subvolTpl\n  let-row=\"data.row\">\n  <span *ngIf=\"row.subvol; else noDataTpl\">\n    {{row.subvol}}\n  </span>\n</ng-template>\n\n\n\n<ng-template #noDataTpl>-</ng-template>\n\n<cd-table\n  [data]=\"snapshotSchedules$ | async\"\n  *ngIf=\"snapScheduleModuleStatus$ | async\"\n  columnMode=\"flex\"\n  [columns]=\"columns\"\n  selectionType=\"single\"\n  [hasDetails]=\"false\"\n  (fetchData)=\"fetchData()\"\n  (updateSelection)=\"updateSelection($event)\"\n>\n  <div class=\"table-actions\">\n    <cd-table-actions\n      [permission]=\"permissions.cephfs\"\n      [selection]=\"selection\"\n      class=\"btn-group\"\n      [tableActions]=\"tableActions$ | async\"\n    >\n    </cd-table-actions>\n  </div>\n</cd-table>\n","import {\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { BehaviorSubject, Observable, Subscription, of } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { CephfsSnapshotScheduleService } from '~/app/shared/api/cephfs-snapshot-schedule.service';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { SnapshotSchedule } from '~/app/shared/models/snapshot-schedule';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CephfsSnapshotscheduleFormComponent } from '../cephfs-snapshotschedule-form/cephfs-snapshotschedule-form.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-cephfs-snapshotschedule-list',\n  templateUrl: './cephfs-snapshotschedule-list.component.html',\n  styleUrls: ['./cephfs-snapshotschedule-list.component.scss']\n})\nexport class CephfsSnapshotscheduleListComponent\n  extends CdForm\n  implements OnInit, OnChanges, OnDestroy {\n  @Input() fsName!: string;\n  @Input() id!: number;\n\n  @ViewChild('pathTpl', { static: true })\n  pathTpl: any;\n\n  @ViewChild('retentionTpl', { static: true })\n  retentionTpl: any;\n\n  @ViewChild('subvolTpl', { static: true })\n  subvolTpl: any;\n\n  snapshotSchedules$!: Observable<SnapshotSchedule[]>;\n  subject$ = new BehaviorSubject<SnapshotSchedule[]>([]);\n  snapScheduleModuleStatus$ = new BehaviorSubject<boolean>(false);\n  moduleServiceListSub!: Subscription;\n  columns: CdTableColumn[] = [];\n  tableActions$ = new BehaviorSubject<CdTableAction[]>([]);\n  context!: CdTableFetchDataContext;\n  selection = new CdTableSelection();\n  permissions!: Permissions;\n  modalRef!: NgbModalRef;\n  errorMessage: string = '';\n  selectedName: string = '';\n  icons = Icons;\n  tableActions!: CdTableAction[];\n\n  MODULE_NAME = 'snap_schedule';\n  ENABLE_MODULE_TIMER = 2 * 1000;\n\n  constructor(\n    private snapshotScheduleService: CephfsSnapshotScheduleService,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalCdsService,\n    private mgrModuleService: MgrModuleService,\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapper: TaskWrapperService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.fsName) {\n      this.subject$.next([]);\n    }\n  }\n\n  ngOnInit(): void {\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.openModal(false)\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.openModal(true)\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        icon: Icons.trash,\n        click: () => this.deleteSnapshotSchedule()\n      }\n    ];\n\n    this.moduleServiceListSub = this.mgrModuleService\n      .list()\n      .pipe(\n        map((modules: any[]) => modules.find((module) => module?.['name'] === this.MODULE_NAME))\n      )\n      .subscribe({\n        next: (module: any) => this.snapScheduleModuleStatus$.next(module?.enabled)\n      });\n\n    this.snapshotSchedules$ = this.subject$.pipe(\n      switchMap(() =>\n        this.snapScheduleModuleStatus$.pipe(\n          switchMap((status) => {\n            if (!status) {\n              return of([]);\n            }\n            return this.snapshotScheduleService\n              .getSnapshotScheduleList('/', this.fsName)\n              .pipe(\n                map((list) =>\n                  list.map((l) => ({ ...l, pathForSelection: `${l.path}@${l.schedule}` }))\n                )\n              );\n          }),\n          shareReplay(1)\n        )\n      )\n    );\n\n    this.columns = [\n      { prop: 'pathForSelection', name: $localize`Path`, flexGrow: 3, cellTemplate: this.pathTpl },\n      { prop: 'path', isHidden: true, isInvisible: true },\n      { prop: 'subvol', name: $localize`Subvolume`, cellTemplate: this.subvolTpl },\n      { prop: 'scheduleCopy', name: $localize`Repeat interval` },\n      { prop: 'schedule', isHidden: true, isInvisible: true },\n      { prop: 'retentionCopy', name: $localize`Retention policy`, cellTemplate: this.retentionTpl },\n      { prop: 'retention', isHidden: true, isInvisible: true },\n      { prop: 'created_count', name: $localize`Created Count` },\n      { prop: 'pruned_count', name: $localize`Deleted Count` },\n      { prop: 'start', name: $localize`Start time`, cellTransformation: CellTemplate.timeAgo },\n      { prop: 'created', name: $localize`Created`, cellTransformation: CellTemplate.timeAgo }\n    ];\n\n    this.tableActions$.next(this.tableActions);\n  }\n\n  ngOnDestroy(): void {\n    this.moduleServiceListSub.unsubscribe();\n  }\n\n  fetchData() {\n    this.subject$.next([]);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n    if (!this.selection.hasSelection) return;\n    const isActive = this.selection.first()?.active;\n\n    this.tableActions$.next([\n      ...this.tableActions,\n      {\n        name: isActive ? this.actionLabels.DEACTIVATE : this.actionLabels.ACTIVATE,\n        permission: 'update',\n        icon: isActive ? Icons.warning : Icons.success,\n        click: () =>\n          isActive ? this.deactivateSnapshotSchedule() : this.activateSnapshotSchedule()\n      }\n    ]);\n  }\n\n  openModal(edit = false) {\n    this.modalService.show(CephfsSnapshotscheduleFormComponent, {\n      fsName: this.fsName,\n      id: this.id,\n      path: this.selection?.first()?.path,\n      schedule: this.selection?.first()?.schedule,\n      retention: this.selection?.first()?.retention,\n      start: this.selection?.first()?.start,\n      status: this.selection?.first()?.status,\n      isEdit: edit\n    });\n  }\n\n  enableSnapshotSchedule() {\n    this.mgrModuleService.updateModuleState(\n      this.MODULE_NAME,\n      false,\n      null,\n      '',\n      'Enabled Snapshot Schedule Module'\n    );\n  }\n\n  deactivateSnapshotSchedule() {\n    const { path, start, fs, schedule, subvol, group } = this.selection.first();\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`snapshot schedule`,\n      actionDescription: this.actionLabels.DEACTIVATE,\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/snapshot/schedule/deactivate', {\n            path\n          }),\n          call: this.snapshotScheduleService.deactivate({\n            path,\n            schedule,\n            start,\n            fs,\n            subvol,\n            group\n          })\n        })\n    });\n  }\n\n  activateSnapshotSchedule() {\n    const { path, start, fs, schedule, subvol, group } = this.selection.first();\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`snapshot schedule`,\n      actionDescription: this.actionLabels.ACTIVATE,\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/snapshot/schedule/activate', {\n            path\n          }),\n          call: this.snapshotScheduleService.activate({\n            path,\n            schedule,\n            start,\n            fs,\n            subvol,\n            group\n          })\n        })\n    });\n  }\n\n  deleteSnapshotSchedule() {\n    const { path, start, fs, schedule, subvol, group, retention } = this.selection.first();\n    const retentionPolicy = retention\n      ?.split(/\\s/gi)\n      ?.filter((r: string) => !!r)\n      ?.map((r: string) => {\n        const frequency = r.substring(r.length - 1);\n        const interval = r.substring(0, r.length - 1);\n        return `${interval}-${frequency}`;\n      })\n      ?.join('|');\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`snapshot schedule`,\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/snapshot/schedule/' + URLVerbs.DELETE, {\n            path\n          }),\n          call: this.snapshotScheduleService.delete({\n            path,\n            schedule,\n            start,\n            fs,\n            retentionPolicy,\n            subvol,\n            group\n          })\n        })\n    });\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav\n    ngbNav\n    #nav=\"ngbNav\"\n    (navChange)=\"softRefresh()\"\n    class=\"nav-tabs\"\n    cdStatefulTab=\"cephfs-tabs\"\n  >\n    <ng-container ngbNavItem=\"details\">\n      <a\n        ngbNavLink\n        i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-detail [data]=\"details\"> </cd-cephfs-detail>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"directories\">\n      <a ngbNavLink\n         i18n>Directories</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-directories [id]=\"id\"></cd-cephfs-directories>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"subvolumes\">\n      <a\n      ngbNavLink\n      i18n>Subvolumes</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-subvolume-list\n          [fsName]=\"selection.mdsmap.fs_name\"\n          [pools]=\"details.pools\"\n          [id]=\"id\"\n        ></cd-cephfs-subvolume-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"subvolume-groups\">\n      <a\n      ngbNavLink\n      i18n>Subvolume groups</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-subvolume-group\n        [fsName]=\"selection.mdsmap.fs_name\"\n        [pools]=\"details.pools\">\n        </cd-cephfs-subvolume-group>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"snapshots\">\n      <a\n      ngbNavLink\n      i18n>Snapshots</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-subvolume-snapshots-list [fsName]=\"selection.mdsmap.fs_name\">\n        </cd-cephfs-subvolume-snapshots-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"snapshot-schedules\">\n      <a\n      ngbNavLink\n      i18n>Snapshot schedules</a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-snapshotschedule-list\n          [fsName]=\"selection.mdsmap.fs_name\"\n          [id]=\"id\"\n        ></cd-cephfs-snapshotschedule-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"clients\">\n      <a ngbNavLink>\n        <ng-container i18n>Clients</ng-container>\n        <span class=\"badge badge-pill badge-tab ms-1\">{{ clients.data.length }}</span>\n      </a>\n      <ng-template ngbNavContent>\n        <cd-cephfs-clients\n        [id]=\"id\"\n        [clients]=\"clients\"\n        (triggerApiUpdate)=\"refresh()\">\n        </cd-cephfs-clients>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\">\n      <a\n      ngbNavLink\n      i18n>Overview</a>\n      <ng-template ngbNavContent>\n        <cd-grafana\n          i18n-title\n          title=\"CephFS performance\"\n          [grafanaPath]=\"'ceph-filesystem-overview?var-name=' + details.name\"\n          [type]=\"'metrics'\"\n          uid=\"718Bruins\"\n          grafanaStyle=\"one\"\n        >\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, NgZone, OnChanges, OnDestroy } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Subscription, timer } from 'rxjs';\n\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { ViewCacheStatus } from '~/app/shared/enum/view-cache-status.enum';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-cephfs-tabs',\n  templateUrl: './cephfs-tabs.component.html',\n  styleUrls: ['./cephfs-tabs.component.scss']\n})\nexport class CephfsTabsComponent implements OnChanges, OnDestroy {\n  @Input()\n  selection: any;\n\n  // Grafana tab\n  grafanaId: any;\n  grafanaPermission: Permission;\n\n  // Client tab\n  id: number;\n  clients: Record<string, any> = {\n    data: [],\n    status: new TableStatusViewCache(ViewCacheStatus.ValueNone)\n  };\n\n  // Details tab\n  details: Record<string, any> = {\n    standbys: '',\n    pools: [],\n    ranks: [],\n    mdsCounters: {},\n    name: ''\n  };\n\n  private data: any;\n  private reloadSubscriber: Subscription;\n\n  constructor(\n    private ngZone: NgZone,\n    private authStorageService: AuthStorageService,\n    private cephfsService: CephfsService\n  ) {\n    this.grafanaPermission = this.authStorageService.getPermissions().grafana;\n  }\n\n  ngOnChanges() {\n    if (!this.selection) {\n      this.unsubscribeInterval();\n      return;\n    }\n    if (this.selection.id !== this.id) {\n      this.setupSelected(this.selection.id, this.selection.mdsmap.info);\n    }\n  }\n\n  private setupSelected(id: number, mdsInfo: any) {\n    this.id = id;\n    const firstMds: any = _.first(Object.values(mdsInfo));\n    this.grafanaId = firstMds && firstMds['name'];\n    this.details = {\n      standbys: '',\n      pools: [],\n      ranks: [],\n      mdsCounters: {},\n      name: ''\n    };\n    this.clients = {\n      data: [],\n      status: new TableStatusViewCache(ViewCacheStatus.ValueNone)\n    };\n    this.updateInterval();\n  }\n\n  private updateInterval() {\n    this.unsubscribeInterval();\n    this.subscribeInterval();\n  }\n\n  private unsubscribeInterval() {\n    if (this.reloadSubscriber) {\n      this.reloadSubscriber.unsubscribe();\n    }\n  }\n\n  private subscribeInterval() {\n    this.ngZone.runOutsideAngular(\n      () =>\n        (this.reloadSubscriber = timer(0, 5000).subscribe(() =>\n          this.ngZone.run(() => this.refresh())\n        ))\n    );\n  }\n\n  refresh() {\n    this.cephfsService.getTabs(this.id).subscribe(\n      (data: any) => {\n        this.data = data;\n        this.softRefresh();\n      },\n      () => {\n        this.clients.status = new TableStatusViewCache(ViewCacheStatus.ValueException);\n      }\n    );\n  }\n\n  softRefresh() {\n    const data = _.cloneDeep(this.data); // Forces update of tab tables on tab switch\n    // Clients tab\n    this.clients = data?.clients;\n    this.clients.status = new TableStatusViewCache(this.clients?.status);\n    // Details tab\n    this.details = {\n      standbys: data.standbys,\n      pools: data.pools,\n      ranks: data.ranks,\n      mdsCounters: data.mds_counters,\n      name: data.name\n    };\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeInterval();\n  }\n}\n","<cds-tabs\n  [type]=\"'contained'\"\n  [followFocus]=\"true\"\n  [isNavigation]=\"false\"\n  [cacheActive]=\"true\"\n  >\n  <cds-tab\n    heading=\"File systems\"\n    i18n-heading\n    [tabContent]=\"fileSystemListContent\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Overview\"\n    i18n-heading\n    [tabContent]=\"grafanaContent\">\n  </cds-tab>\n</cds-tabs>\n\n<ng-template #fileSystemListContent>\n  <cd-table\n    [data]=\"filesystems\"\n    columnMode=\"flex\"\n    [columns]=\"columns\"\n    (fetchData)=\"loadFilesystems($event)\"\n    identifier=\"id\"\n    forceIdentifier=\"true\"\n    selectionType=\"single\"\n    [hasDetails]=\"true\"\n    (setExpandedRow)=\"setExpandedRow($event)\"\n    (updateSelection)=\"updateSelection($event)\"\n  >\n    <cd-cephfs-tabs\n      *cdTableDetail\n      [selection]=\"expandedRow\">\n    </cd-cephfs-tabs>\n    <div class=\"table-actions\">\n      <cd-table-actions\n        [permission]=\"permissions.cephfs\"\n        [selection]=\"selection\"\n        class=\"btn-group\"\n        id=\"cephfs-actions\"\n        [tableActions]=\"tableActions\"\n      >\n      </cd-table-actions>\n    </div>\n  </cd-table>\n</ng-template>\n\n<ng-template #deleteTpl>\n  <cd-alert-panel type=\"danger\"\n                  i18n>\n    This will remove its data and metadata pools. It'll also remove the MDS daemon associated with the volume.\n  </cd-alert-panel>\n</ng-template>\n\n<ng-template #grafanaContent>\n  <cd-grafana\n    i18n-title\n    title=\"CephFS Overview\"\n    [grafanaPath]=\"'ceph-filesystem-overview?'\"\n    [type]=\"'metrics'\"\n    uid=\"718Bruins\"\n    *ngIf=\"permissions.grafana.read\"\n    grafanaStyle=\"two\"\n  >\n  </cd-grafana>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { CephfsMountDetailsComponent } from '../cephfs-mount-details/cephfs-mount-details.component';\nimport { map, switchMap } from 'rxjs/operators';\nimport { HealthService } from '~/app/shared/api/health.service';\nimport { CephfsAuthModalComponent } from '~/app/ceph/cephfs/cephfs-auth-modal/cephfs-auth-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nconst BASE_URL = 'cephfs/fs';\n\n@Component({\n  selector: 'cd-cephfs-list',\n  templateUrl: './cephfs-list.component.html',\n  styleUrls: ['./cephfs-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class CephfsListComponent extends ListWithDetails implements OnInit {\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n\n  columns: CdTableColumn[];\n  filesystems: any = [];\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n  permissions: Permissions;\n  icons = Icons;\n  monAllowPoolDelete = false;\n  modalRef!: NgbModalRef;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private cephfsService: CephfsService,\n    public actionLabels: ActionLabelsI18n,\n    private router: Router,\n    private urlBuilder: URLBuilderService,\n    private configurationService: ConfigurationService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    public notificationService: NotificationService,\n    private healthService: HealthService,\n    private cdsModalService: ModalCdsService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'mdsmap.fs_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Enabled`,\n        prop: 'mdsmap.enabled',\n        flexGrow: 2,\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        name: $localize`Created`,\n        prop: 'mdsmap.created',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.timeAgo\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.router.navigate([this.urlBuilder.getCreate()]),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () =>\n          this.router.navigate([this.urlBuilder.getEdit(String(this.selection.first().id))])\n      },\n      {\n        name: this.actionLabels.AUTHORIZE,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.authorizeModal()\n      },\n      {\n        name: this.actionLabels.ATTACH,\n        permission: 'read',\n        icon: Icons.bars,\n        disable: () => !this.selection?.hasSelection,\n        click: () => this.showAttachInfo()\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeVolumeModal(),\n        name: this.actionLabels.REMOVE,\n        disable: this.getDisableDesc.bind(this)\n      }\n    ];\n\n    if (this.permissions.configOpt.read) {\n      this.configurationService.get('mon_allow_pool_delete').subscribe((data: any) => {\n        if (_.has(data, 'value')) {\n          const monSection = _.find(data.value, (v) => {\n            return v.section === 'mon';\n          }) || { value: false };\n          this.monAllowPoolDelete = monSection.value === 'true' ? true : false;\n        }\n      });\n    }\n  }\n\n  loadFilesystems(context: CdTableFetchDataContext) {\n    this.cephfsService.list().subscribe(\n      (resp: any[]) => {\n        this.filesystems = resp;\n      },\n      () => {\n        context.error();\n      }\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  showAttachInfo() {\n    const selectedFileSystem = this.selection?.selected?.[0];\n\n    this.cephfsService\n      .getFsRootDirectory(selectedFileSystem.id)\n      .pipe(\n        switchMap((fsData) =>\n          this.healthService.getClusterFsid().pipe(map((data) => ({ clusterId: data, fs: fsData })))\n        )\n      )\n      .subscribe({\n        next: (val) => {\n          this.modalRef = this.modalService.show(CephfsMountDetailsComponent, {\n            onSubmit: () => this.modalRef.close(),\n            mountData: {\n              fsId: val.clusterId,\n              fsName: selectedFileSystem?.mdsmap?.fs_name,\n              rootPath: val.fs['path']\n            }\n          });\n        }\n      });\n  }\n\n  removeVolumeModal() {\n    const volName = this.selection.first().mdsmap['fs_name'];\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'File System',\n      itemNames: [volName],\n      actionDescription: 'remove',\n      bodyTemplate: this.deleteTpl,\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('cephfs/remove', { volumeName: volName }),\n          call: this.cephfsService.remove(volName)\n        })\n    });\n  }\n\n  getDisableDesc(): boolean | string {\n    if (this.selection?.hasSelection) {\n      if (!this.monAllowPoolDelete) {\n        return $localize`File System deletion is disabled by the mon_allow_pool_delete configuration setting.`;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  authorizeModal() {\n    const selectedFileSystem = this.selection?.selected?.[0];\n    this.modalService.show(CephfsAuthModalComponent, {\n      fsName: selectedFileSystem.mdsmap['fs_name'],\n      id: selectedFileSystem.id\n    });\n  }\n}\n","import { Validators } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { ConfigFormModel } from './config-option.model';\n\nexport class ConfigOptionTypes {\n  // TODO: I18N\n  private static knownTypes: Array<any> = [\n    {\n      name: 'uint',\n      inputType: 'number',\n      humanReadable: 'Unsigned integer value',\n      defaultMin: 0,\n      patternHelpText: 'The entered value needs to be an unsigned number.',\n      isNumberType: true,\n      allowsNegative: false\n    },\n    {\n      name: 'int',\n      inputType: 'number',\n      humanReadable: 'Integer value',\n      patternHelpText: 'The entered value needs to be a number.',\n      isNumberType: true,\n      allowsNegative: true\n    },\n    {\n      name: 'size',\n      inputType: 'number',\n      humanReadable: 'Unsigned integer value (>=16bit)',\n      defaultMin: 0,\n      patternHelpText: 'The entered value needs to be a unsigned number.',\n      isNumberType: true,\n      allowsNegative: false\n    },\n    {\n      name: 'secs',\n      inputType: 'number',\n      humanReadable: 'Number of seconds',\n      defaultMin: 1,\n      patternHelpText: 'The entered value needs to be a number >= 1.',\n      isNumberType: true,\n      allowsNegative: false\n    },\n    {\n      name: 'float',\n      inputType: 'number',\n      humanReadable: 'Double value',\n      patternHelpText: 'The entered value needs to be a number or decimal.',\n      isNumberType: true,\n      allowsNegative: true\n    },\n    { name: 'str', inputType: 'text', humanReadable: 'Text', isNumberType: false },\n    {\n      name: 'addr',\n      inputType: 'text',\n      humanReadable: 'IPv4 or IPv6 address',\n      patternHelpText: 'The entered value needs to be a valid IP address.',\n      isNumberType: false\n    },\n    {\n      name: 'uuid',\n      inputType: 'text',\n      humanReadable: 'UUID',\n      patternHelpText:\n        'The entered value is not a valid UUID, e.g.: 67dcac9f-2c03-4d6c-b7bd-1210b3a259a8',\n      isNumberType: false\n    },\n    { name: 'bool', inputType: 'checkbox', humanReadable: 'Boolean value', isNumberType: false }\n  ];\n\n  public static getType(type: string): any {\n    const currentType = _.find(this.knownTypes, (t) => {\n      return t.name === type;\n    });\n\n    if (currentType !== undefined) {\n      return currentType;\n    }\n\n    throw new Error('Found unknown type \"' + type + '\" for config option.');\n  }\n\n  public static getTypeValidators(configOption: ConfigFormModel): any {\n    const typeParams = ConfigOptionTypes.getType(configOption.type);\n\n    if (typeParams.name === 'bool' || typeParams.name === 'str') {\n      return;\n    }\n\n    const typeValidators: Record<string, any> = {\n      validators: [],\n      patternHelpText: typeParams.patternHelpText\n    };\n\n    if (typeParams.isNumberType) {\n      if (configOption.max && configOption.max !== '') {\n        typeValidators['max'] = configOption.max;\n        typeValidators.validators.push(Validators.max(configOption.max));\n      }\n\n      if (configOption.min && configOption.min !== '') {\n        typeValidators['min'] = configOption.min;\n        typeValidators.validators.push(Validators.min(configOption.min));\n      } else if ('defaultMin' in typeParams) {\n        typeValidators['min'] = typeParams.defaultMin;\n        typeValidators.validators.push(Validators.min(typeParams.defaultMin));\n      }\n\n      if (configOption.type === 'float') {\n        typeValidators.validators.push(CdValidators.decimalNumber());\n      } else {\n        typeValidators.validators.push(CdValidators.number(typeParams.allowsNegative));\n      }\n    } else if (configOption.type === 'addr') {\n      typeValidators.validators = [CdValidators.ip()];\n    } else if (configOption.type === 'uuid') {\n      typeValidators.validators = [CdValidators.uuid()];\n    }\n\n    return typeValidators;\n  }\n\n  public static getTypeStep(type: string, value: number): number | undefined {\n    const numberTypes = ['uint', 'int', 'size', 'secs'];\n\n    if (numberTypes.includes(type)) {\n      return 1;\n    }\n\n    if (type === 'float') {\n      if (value !== null) {\n        const stringVal = value.toString();\n        if (stringVal.indexOf('.') !== -1) {\n          // Value type float and contains decimal characters\n          const decimal = value.toString().split('.');\n          return Math.pow(10, -decimal[1].length);\n        }\n      }\n\n      return 0.1;\n    }\n\n    return undefined;\n  }\n}\n","export class ConfigFormCreateRequestModel {\n  name: string;\n  value: Array<any> = [];\n  force_update: boolean = false;\n}\n","<div class=\"cd-col-form\"\n     *cdFormLoading=\"loading\">\n  <form name=\"configForm\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"configForm\"\n        novalidate>\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <ng-container i18>Edit</ng-container> {{ configForm.getValue('name') }}\n      </div>\n\n      <div class=\"card-body\">\n        <!-- Name -->\n        <div class=\"form-group row\">\n          <label i18n\n                 class=\"cd-col-form-label\">Name</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   id=\"name\"\n                   formControlName=\"name\"\n                   readonly>\n          </div>\n        </div>\n\n        <!-- Description -->\n        <div class=\"form-group row\"\n             *ngIf=\"configForm.getValue('desc')\">\n          <label i18n\n                 class=\"cd-col-form-label\">Description</label>\n          <div class=\"cd-col-form-input\">\n            <textarea class=\"form-control resize-vertical\"\n                      id=\"desc\"\n                      formControlName=\"desc\"\n                      readonly>\n            </textarea>\n          </div>\n        </div>\n\n        <!-- Long description -->\n        <div class=\"form-group row\"\n             *ngIf=\"configForm.getValue('long_desc')\">\n          <label i18n\n                 class=\"cd-col-form-label\">Long description</label>\n          <div class=\"cd-col-form-input\">\n            <textarea class=\"form-control resize-vertical\"\n                      id=\"long_desc\"\n                      formControlName=\"long_desc\"\n                      readonly>\n            </textarea>\n          </div>\n        </div>\n\n        <!-- Default -->\n        <div class=\"form-group row\"\n             *ngIf=\"configForm.getValue('default') !== ''\">\n          <label i18n\n                 class=\"cd-col-form-label\">Default</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   id=\"default\"\n                   formControlName=\"default\"\n                   readonly>\n          </div>\n        </div>\n\n        <!-- Daemon default -->\n        <div class=\"form-group row\"\n             *ngIf=\"configForm.getValue('daemon_default') !== ''\">\n          <label i18n\n                 class=\"cd-col-form-label\">Daemon default</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   id=\"daemon_default\"\n                   formControlName=\"daemon_default\"\n                   readonly>\n          </div>\n        </div>\n\n        <!-- Services -->\n        <div class=\"form-group row\"\n             *ngIf=\"configForm.getValue('services').length > 0\">\n          <label i18n\n                 class=\"cd-col-form-label\">Services</label>\n          <div class=\"cd-col-form-input\">\n            <span *ngFor=\"let service of configForm.getValue('services')\"\n                  class=\"form-component-badge\">\n              <span class=\"badge badge-dark\">{{ service }}</span>\n            </span>\n          </div>\n        </div>\n\n        <!-- Values -->\n        <div formGroupName=\"values\">\n          <h3 i18n\n              class=\"cd-header\">Values</h3>\n          <ng-container *ngFor=\"let section of availSections\">\n            <div class=\"form-group row\"\n                 *ngIf=\"type === 'bool'\">\n              <label class=\"cd-col-form-label\"\n                     [for]=\"section\">{{ section }}\n              </label>\n              <div class=\"cd-col-form-input\">\n                <select id=\"pool\"\n                        name=\"pool\"\n                        class=\"form-select\"\n                        [formControlName]=\"section\">\n                  <option [ngValue]=\"null\"\n                          i18n>-- Default --</option>\n                  <option [ngValue]=\"true\"\n                          i18n>true</option>\n                  <option [ngValue]=\"false\"\n                          i18n>false</option>\n                </select>\n              </div>\n            </div>\n\n            <div class=\"form-group row\"\n                 *ngIf=\"type !== 'bool'\">\n              <label class=\"cd-col-form-label\"\n                     [for]=\"section\">{{ section }}\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input class=\"form-control\"\n                       [type]=\"inputType\"\n                       [id]=\"section\"\n                       [placeholder]=\"humanReadableType\"\n                       [formControlName]=\"section\"\n                       [step]=\"getStep(type, this.configForm.getValue(section))\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"configForm.showError(section, formDir, 'pattern')\">\n                  {{ patternHelpText }}\n                </span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"configForm.showError(section, formDir, 'invalidUuid')\">\n                  {{ patternHelpText }}\n                </span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"configForm.showError(section, formDir, 'max')\"\n                      i18n>The entered value is too high! It must not be greater than {{ maxValue }}.</span>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"configForm.showError(section, formDir, 'min')\"\n                      i18n>The entered value is too low! It must not be lower than {{ minValue }}.</span>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Footer -->\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"forceUpdate ? openCriticalConfirmModal() : submit()\"\n                              [form]=\"configForm\"\n                              [submitText]=\"actionLabels.UPDATE\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n    </div>\n  </form>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, ValidatorFn } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { ConfigFormModel } from '~/app/shared/components/config-option/config-option.model';\nimport { ConfigOptionTypes } from '~/app/shared/components/config-option/config-option.types';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { ConfigFormCreateRequestModel } from './configuration-form-create-request.model';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\nconst RGW = 'rgw';\n\n@Component({\n  selector: 'cd-configuration-form',\n  templateUrl: './configuration-form.component.html',\n  styleUrls: ['./configuration-form.component.scss']\n})\nexport class ConfigurationFormComponent extends CdForm implements OnInit {\n  configForm: CdFormGroup;\n  response: ConfigFormModel;\n  type: string;\n  inputType: string;\n  humanReadableType: string;\n  minValue: number;\n  maxValue: number;\n  patternHelpText: string;\n  availSections = ['global', 'mon', 'mgr', 'osd', 'mds', 'client'];\n  forceUpdate: boolean;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private route: ActivatedRoute,\n    private router: Router,\n    private configService: ConfigurationService,\n    private notificationService: NotificationService,\n    private modalService: ModalCdsService\n  ) {\n    super();\n    this.createForm();\n  }\n\n  createForm() {\n    const formControls = {\n      name: new UntypedFormControl({ value: null }),\n      desc: new UntypedFormControl({ value: null }),\n      long_desc: new UntypedFormControl({ value: null }),\n      values: new UntypedFormGroup({}),\n      default: new UntypedFormControl({ value: null }),\n      daemon_default: new UntypedFormControl({ value: null }),\n      services: new UntypedFormControl([])\n    };\n\n    this.availSections.forEach((section) => {\n      formControls.values.addControl(section, new UntypedFormControl(null));\n    });\n\n    this.configForm = new CdFormGroup(formControls);\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe((params: { name: string }) => {\n      const configName = params.name;\n      this.configService.get(configName).subscribe((resp: ConfigFormModel) => {\n        this.setResponse(resp);\n        this.loadingReady();\n      });\n    });\n  }\n\n  getValidators(configOption: any): ValidatorFn[] {\n    const typeValidators = ConfigOptionTypes.getTypeValidators(configOption);\n    if (typeValidators) {\n      this.patternHelpText = typeValidators.patternHelpText;\n\n      if ('max' in typeValidators && typeValidators.max !== '') {\n        this.maxValue = typeValidators.max;\n      }\n\n      if ('min' in typeValidators && typeValidators.min !== '') {\n        this.minValue = typeValidators.min;\n      }\n\n      return typeValidators.validators;\n    }\n\n    return undefined;\n  }\n\n  getStep(type: string, value: number): number | undefined {\n    return ConfigOptionTypes.getTypeStep(type, value);\n  }\n\n  setResponse(response: ConfigFormModel) {\n    this.response = response;\n    const validators = this.getValidators(response);\n    this.configForm.get('name').setValue(response.name);\n    this.configForm.get('desc').setValue(response.desc);\n    this.configForm.get('long_desc').setValue(response.long_desc);\n    this.configForm.get('default').setValue(response.default);\n    this.configForm.get('daemon_default').setValue(response.daemon_default);\n    this.configForm.get('services').setValue(response.services);\n\n    if (this.response.value) {\n      this.response.value.forEach((value) => {\n        // Check value type. If it's a boolean value we need to convert it because otherwise we\n        // would use the string representation. That would cause issues for e.g. checkboxes.\n        let sectionValue = null;\n        if (value.value === 'true') {\n          sectionValue = true;\n        } else if (value.value === 'false') {\n          sectionValue = false;\n        } else {\n          sectionValue = value.value;\n        }\n        this.configForm.get('values').get(value.section).setValue(sectionValue);\n      });\n    }\n    this.forceUpdate = !this.response.can_update_at_runtime && response.name.includes(RGW);\n    this.availSections.forEach((section) => {\n      this.configForm.get('values').get(section).setValidators(validators);\n    });\n\n    const currentType = ConfigOptionTypes.getType(response.type);\n    this.type = currentType.name;\n    this.inputType = currentType.inputType;\n    this.humanReadableType = currentType.humanReadable;\n  }\n\n  createRequest(): ConfigFormCreateRequestModel | null {\n    const values: any[] = [];\n\n    this.availSections.forEach((section) => {\n      const sectionValue = this.configForm.getValue(section);\n      if (sectionValue !== null) {\n        values.push({ section: section, value: sectionValue });\n      }\n    });\n\n    if (!_.isEqual(this.response.value, values)) {\n      const request = new ConfigFormCreateRequestModel();\n      request.name = this.configForm.getValue('name');\n      request.value = values;\n      if (this.forceUpdate) {\n        request.force_update = this.forceUpdate;\n      }\n      return request;\n    }\n\n    return null;\n  }\n\n  openCriticalConfirmModal() {\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      buttonText: $localize`Force Edit`,\n      actionDescription: $localize`force edit`,\n      itemDescription: $localize`configuration`,\n      infoMessage: 'Updating this configuration might require restarting the client',\n      submitAction: () => {\n        this.modalService.dismissAll();\n        this.submit();\n      }\n    });\n  }\n\n  submit() {\n    const request = this.createRequest();\n\n    if (request) {\n      this.configService.create(request).subscribe(\n        () => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Updated config option ${request.name}`\n          );\n          this.router.navigate(['/configuration']);\n        },\n        () => {\n          this.configForm.setErrors({ cdSubmitButton: true });\n        }\n      );\n    }\n\n    this.router.navigate(['/configuration']);\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n         data-testid=\"config-details-table\">\n    <tbody>\n      <tr>\n        <td i18n\n            class=\"bold w-25\">Name</td>\n        <td class=\"w-75\">{{ selection.name }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Description</td>\n        <td>{{ selection.desc }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Long description</td>\n        <td>{{ selection.long_desc }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Current values</td>\n        <td>\n          <span *ngFor=\"let conf of selection.value; last as isLast\">\n            {{ conf.section }}: {{ conf.value }}{{ !isLast ? \",\" : \"\" }}<br />\n          </span>\n        </td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Default</td>\n        <td>{{ selection.default }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Daemon default</td>\n        <td>{{ selection.daemon_default }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Type</td>\n        <td>{{ selection.type }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Min</td>\n        <td>{{ selection.min }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Max</td>\n        <td>{{ selection.max }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Flags</td>\n        <td>\n          <span *ngFor=\"let flag of selection.flags\">\n            <span title=\"{{ flags[flag] }}\">\n              <span class=\"badge badge-dark me-2\">{{ flag | uppercase }}</span>\n            </span>\n          </span>\n        </td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Services</td>\n        <td>\n          <span *ngFor=\"let service of selection.services\">\n            <span class=\"badge badge-dark me-2\">{{ service }}</span>\n          </span>\n        </td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Source</td>\n        <td>{{ selection.source }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Level</td>\n        <td>{{ selection.level }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Can be updated at runtime (editable)</td>\n        <td>{{ selection.can_update_at_runtime | booleanText }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Tags</td>\n        <td>{{ selection.tags }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">Enum values</td>\n        <td>{{ selection.enum_values }}</td>\n      </tr>\n      <tr>\n        <td i18n\n            class=\"bold\">See also</td>\n        <td>{{ selection.see_also }}</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Component({\n  selector: 'cd-configuration-details',\n  templateUrl: './configuration-details.component.html',\n  styleUrls: ['./configuration-details.component.scss']\n})\nexport class ConfigurationDetailsComponent implements OnChanges {\n  @Input()\n  selection: any;\n  flags = {\n    runtime: $localize`The value can be updated at runtime.`,\n    no_mon_update: $localize`Daemons/clients do not pull this value from the\n      monitor config database. We disallow setting this option via 'ceph config\n      set ...'. This option should be configured via ceph.conf or via the\n      command line.`,\n    startup: $localize`Option takes effect only during daemon startup.`,\n    cluster_create: $localize`Option only affects cluster creation.`,\n    create: $localize`Option only affects daemon creation.`\n  };\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.selection.services = _.split(this.selection.services, ',');\n    }\n  }\n}\n","<cd-table [data]=\"data\"\n          (fetchData)=\"getConfigurationList($event)\"\n          [columns]=\"columns\"\n          [extraFilterableColumns]=\"filters\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-configuration-details *cdTableDetail\n                            [selection]=\"expandedRow\">\n  </cd-configuration-details>\n</cd-table>\n\n<ng-template #confValTpl\n             let-value=\"data.value\">\n  <span *ngIf=\"value\">\n    <span *ngFor=\"let conf of value; last as isLast\">\n      {{ conf.section }}: {{ conf.value }}{{ !isLast ? \",\" : \"\" }}<br />\n    </span>\n  </span>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\nconst RGW = 'rgw';\n\n@Component({\n  selector: 'cd-configuration',\n  templateUrl: './configuration.component.html',\n  styleUrls: ['./configuration.component.scss']\n})\nexport class ConfigurationComponent extends ListWithDetails implements OnInit {\n  permission: Permission;\n  tableActions: CdTableAction[];\n  data: any[] = [];\n  icons = Icons;\n  columns: CdTableColumn[];\n  selection = new CdTableSelection();\n  filters: CdTableColumn[] = [\n    {\n      name: $localize`Modified`,\n      prop: 'modified',\n      filterOptions: [$localize`yes`, $localize`no`],\n      filterInitValue: $localize`yes`,\n      filterPredicate: (row, value) => {\n        if (value === 'yes' && row.hasOwnProperty('value')) {\n          return true;\n        }\n\n        if (value === 'no' && !row.hasOwnProperty('value')) {\n          return true;\n        }\n\n        return false;\n      }\n    },\n    {\n      name: $localize`Level`,\n      prop: 'level',\n      filterOptions: ['basic', 'advanced', 'dev'],\n      filterPredicate: (row, value) => {\n        enum Level {\n          basic = 0,\n          advanced = 1,\n          dev = 2\n        }\n\n        const levelVal = Level[value];\n\n        return Level[row.level] <= levelVal;\n      }\n    },\n    {\n      name: $localize`Service`,\n      prop: 'services',\n      filterOptions: ['mon', 'mgr', 'osd', 'mds', 'common', 'mds_client', 'rgw'],\n      filterPredicate: (row, value) => {\n        return row.services.includes(value);\n      }\n    },\n    {\n      name: $localize`Source`,\n      prop: 'source',\n      filterOptions: ['mon'],\n      filterPredicate: (row, value) => {\n        if (!row.hasOwnProperty('source')) {\n          return false;\n        }\n        return row.source.includes(value);\n      }\n    }\n  ];\n\n  @ViewChild('confValTpl', { static: true })\n  public confValTpl: TemplateRef<any>;\n  @ViewChild('confFlagTpl')\n  public confFlagTpl: TemplateRef<any>;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private configurationService: ConfigurationService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().configOpt;\n    const getConfigOptUri = () =>\n      this.selection.first() && `${encodeURIComponent(this.selection.first().name)}`;\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => `/configuration/edit/${getConfigOptUri()}`,\n      name: this.actionLabels.EDIT,\n      disable: () => !this.isEditable(this.selection)\n    };\n    this.tableActions = [editAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      { canAutoResize: true, prop: 'name', name: $localize`Name` },\n      { prop: 'desc', name: $localize`Description`, cellClass: 'wrap' },\n      {\n        prop: 'value',\n        name: $localize`Current value`,\n        cellClass: 'wrap',\n        cellTemplate: this.confValTpl\n      },\n      { prop: 'default', name: $localize`Default`, cellClass: 'wrap' },\n      {\n        prop: 'can_update_at_runtime',\n        name: $localize`Editable`,\n        cellTransformation: CellTemplate.checkIcon,\n        flexGrow: 0.4,\n        cellClass: 'text-center'\n      }\n    ];\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  getConfigurationList(context: CdTableFetchDataContext) {\n    this.configurationService.getConfigData().subscribe(\n      (data: any) => {\n        this.data = data;\n      },\n      () => {\n        context.error();\n      }\n    );\n  }\n\n  isEditable(selection: CdTableSelection): boolean {\n    if (selection.selected.length !== 1) {\n      return false;\n    }\n    if ((this.selection.selected[0].name as string).includes(RGW)) {\n      return true;\n    }\n    return this.selection.selected[0].can_update_at_runtime;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClusterService {\n  baseURL = 'api/cluster';\n\n  constructor(private http: HttpClient) {}\n\n  getStatus(): Observable<string> {\n    return this.http.get<string>(`${this.baseURL}`, {\n      headers: { Accept: 'application/vnd.ceph.api.v0.1+json' }\n    });\n  }\n\n  updateStatus(status: string) {\n    return this.http.put(\n      `${this.baseURL}`,\n      { status: status },\n      { headers: { Accept: 'application/vnd.ceph.api.v0.1+json' } }\n    );\n  }\n}\n","import { HttpParams } from '@angular/common/http';\n\nexport class PaginateParams {\n  constructor(params: HttpParams, majorVersion = 1, minorVersion = 0) {\n    const options = {\n      params: params,\n      headers: {\n        Accept: `application/vnd.ceph.api.v${majorVersion}.${minorVersion}+json`\n      }\n    };\n\n    options['observe'] = 'response';\n    return options;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CdDevice } from '../models/devices';\nimport { InventoryDeviceType } from '../models/inventory-device-type.model';\nimport { DeploymentOptions } from '../models/osd-deployment-options';\nimport { OsdSettings } from '../models/osd-settings';\nimport { SmartDataResponseV1 } from '../models/smart';\nimport { DeviceService } from '../services/device.service';\nimport { CdFormGroup } from '../forms/cd-form-group';\nimport { PaginateObservable } from './paginate.model';\nimport { PaginateParams } from '../classes/paginate-params.class';\nimport { Osd } from '../models/osd.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OsdService {\n  private path = 'api/osd';\n  private uiPath = 'ui-api/osd';\n\n  osdDevices: InventoryDeviceType[] = [];\n  selectedFormValues: CdFormGroup;\n  isDeployementModeSimple: boolean = true;\n\n  osdRecvSpeedModalPriorities = {\n    KNOWN_PRIORITIES: [\n      {\n        name: null,\n        text: $localize`-- Select the priority --`,\n        values: {\n          osd_max_backfills: null,\n          osd_recovery_max_active: null,\n          osd_recovery_max_single_start: null,\n          osd_recovery_sleep: null\n        }\n      },\n      {\n        name: 'low',\n        text: $localize`Low`,\n        values: {\n          osd_max_backfills: 1,\n          osd_recovery_max_active: 1,\n          osd_recovery_max_single_start: 1,\n          osd_recovery_sleep: 0.5\n        }\n      },\n      {\n        name: 'default',\n        text: $localize`Default`,\n        values: {\n          osd_max_backfills: 1,\n          osd_recovery_max_active: 3,\n          osd_recovery_max_single_start: 1,\n          osd_recovery_sleep: 0\n        }\n      },\n      {\n        name: 'high',\n        text: $localize`High`,\n        values: {\n          osd_max_backfills: 4,\n          osd_recovery_max_active: 4,\n          osd_recovery_max_single_start: 4,\n          osd_recovery_sleep: 0\n        }\n      }\n    ]\n  };\n\n  constructor(private http: HttpClient, private deviceService: DeviceService) {}\n\n  create(driveGroups: Object[], trackingId: string, method = 'drive_groups') {\n    const request = {\n      method: method,\n      data: driveGroups,\n      tracking_id: trackingId\n    };\n    return this.http.post(this.path, request, { observe: 'response' });\n  }\n\n  getList(params: HttpParams): PaginateObservable<Osd[]> {\n    return new PaginateObservable<Osd[]>(\n      this.http.get<Osd[]>(this.path, new PaginateParams(params, 1, 1))\n    );\n  }\n\n  getOsdSettings(): Observable<OsdSettings> {\n    return this.http.get<OsdSettings>(`${this.path}/settings`, {\n      headers: { Accept: 'application/vnd.ceph.api.v0.1+json' }\n    });\n  }\n\n  getDetails(id: number) {\n    interface OsdData {\n      osd_map: { [key: string]: any };\n      osd_metadata: { [key: string]: any };\n      smart: { [device_identifier: string]: any };\n    }\n    return this.http.get<OsdData>(`${this.path}/${id}`);\n  }\n\n  /**\n   * @param id OSD ID\n   */\n  getSmartData(id: number) {\n    return this.http.get<SmartDataResponseV1>(`${this.path}/${id}/smart`);\n  }\n\n  scrub(id: string, deep: boolean) {\n    return this.http.post(`${this.path}/${id}/scrub?deep=${deep}`, null);\n  }\n\n  getDeploymentOptions() {\n    return this.http.get<DeploymentOptions>(`${this.uiPath}/deployment_options`);\n  }\n\n  getFlags() {\n    return this.http.get(`${this.path}/flags`);\n  }\n\n  updateFlags(flags: string[]) {\n    return this.http.put(`${this.path}/flags`, { flags: flags });\n  }\n\n  updateIndividualFlags(flags: { [flag: string]: boolean }, ids: number[]) {\n    return this.http.put(`${this.path}/flags/individual`, { flags: flags, ids: ids });\n  }\n\n  markOut(id: number) {\n    return this.http.put(`${this.path}/${id}/mark`, { action: 'out' });\n  }\n\n  markIn(id: number) {\n    return this.http.put(`${this.path}/${id}/mark`, { action: 'in' });\n  }\n\n  markDown(id: number) {\n    return this.http.put(`${this.path}/${id}/mark`, { action: 'down' });\n  }\n\n  reweight(id: number, weight: number) {\n    return this.http.post(`${this.path}/${id}/reweight`, { weight: weight });\n  }\n\n  update(id: number, deviceClass: string) {\n    return this.http.put(`${this.path}/${id}`, { device_class: deviceClass });\n  }\n\n  markLost(id: number) {\n    return this.http.put(`${this.path}/${id}/mark`, { action: 'lost' });\n  }\n\n  purge(id: number) {\n    return this.http.post(`${this.path}/${id}/purge`, null);\n  }\n\n  destroy(id: number) {\n    return this.http.post(`${this.path}/${id}/destroy`, null);\n  }\n\n  delete(id: number, preserveId?: boolean, force?: boolean) {\n    const params = {\n      preserve_id: preserveId ? 'true' : 'false',\n      force: force ? 'true' : 'false'\n    };\n    return this.http.delete(`${this.path}/${id}`, { observe: 'response', params: params });\n  }\n\n  safeToDestroy(ids: string) {\n    interface SafeToDestroyResponse {\n      active: number[];\n      missing_stats: number[];\n      stored_pgs: number[];\n      is_safe_to_destroy: boolean;\n      message?: string;\n    }\n    return this.http.get<SafeToDestroyResponse>(`${this.path}/safe_to_destroy?ids=${ids}`);\n  }\n\n  safeToDelete(ids: string) {\n    interface SafeToDeleteResponse {\n      is_safe_to_delete: boolean;\n      message?: string;\n    }\n    return this.http.get<SafeToDeleteResponse>(`${this.path}/safe_to_delete?svc_ids=${ids}`);\n  }\n\n  getDevices(osdId: number) {\n    return this.http\n      .get<CdDevice[]>(`${this.path}/${osdId}/devices`)\n      .pipe(map((devices) => devices.map((device) => this.deviceService.prepareDevice(device))));\n  }\n}\n","import _ from 'lodash';\n\nimport { CdTableColumnFiltersChange } from '~/app/shared/models/cd-table-column-filters-change';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\n\nexport class DriveGroup {\n  spec: Object;\n\n  // Map from filter column prop to device selection attribute name\n  private deviceSelectionAttrs: {\n    [key: string]: {\n      name: string;\n      formatter?: Function;\n    };\n  };\n\n  private formatterService: FormatterService;\n\n  constructor() {\n    this.reset();\n    this.formatterService = new FormatterService();\n    this.deviceSelectionAttrs = {\n      'sys_api.vendor': {\n        name: 'vendor'\n      },\n      'sys_api.model': {\n        name: 'model'\n      },\n      device_id: {\n        name: 'device_id'\n      },\n      human_readable_type: {\n        name: 'rotational',\n        formatter: (value: string) => {\n          return value.toLowerCase() === 'hdd';\n        }\n      },\n      'sys_api.size': {\n        name: 'size',\n        formatter: (value: string) => {\n          return this.formatterService\n            .format_number(value, 1024, ['B', 'KB', 'MB', 'GB', 'TB', 'PB'])\n            .replace(' ', '');\n        }\n      }\n    };\n  }\n\n  reset() {\n    this.spec = {\n      service_type: 'osd',\n      service_id: `dashboard-${_.now()}`\n    };\n  }\n\n  setName(name: string) {\n    this.spec['service_id'] = name;\n  }\n\n  setHostPattern(pattern: string) {\n    this.spec['host_pattern'] = pattern;\n  }\n\n  setDeviceSelection(type: string, appliedFilters: CdTableColumnFiltersChange['filters']) {\n    const key = `${type}_devices`;\n    this.spec[key] = {};\n    appliedFilters.forEach((filter) => {\n      const attr = this.deviceSelectionAttrs[filter.prop];\n      if (attr) {\n        const name = attr.name;\n        this.spec[key][name] = attr.formatter ? attr.formatter(filter.value.raw) : filter.value.raw;\n      }\n    });\n  }\n\n  clearDeviceSelection(type: string) {\n    const key = `${type}_devices`;\n    delete this.spec[key];\n  }\n\n  setSlots(type: string, slots: number) {\n    const key = `${type}_slots`;\n    if (slots === 0) {\n      delete this.spec[key];\n    } else {\n      this.spec[key] = slots;\n    }\n  }\n\n  setFeature(feature: string, enabled: boolean) {\n    if (enabled) {\n      this.spec[feature] = true;\n    } else {\n      delete this.spec[feature];\n    }\n  }\n}\n","export enum OrchestratorFeature {\n  HOST_LIST = 'get_hosts',\n  HOST_ADD = 'add_host',\n  HOST_REMOVE = 'remove_host',\n  HOST_LABEL_ADD = 'add_host_label',\n  HOST_LABEL_REMOVE = 'remove_host_label',\n  HOST_MAINTENANCE_ENTER = 'enter_host_maintenance',\n  HOST_MAINTENANCE_EXIT = 'exit_host_maintenance',\n  HOST_FACTS = 'get_facts',\n  HOST_DRAIN = 'drain_host',\n\n  SERVICE_LIST = 'describe_service',\n  SERVICE_CREATE = 'apply',\n  SERVICE_EDIT = 'apply',\n  SERVICE_DELETE = 'remove_service',\n  SERVICE_RELOAD = 'service_action',\n  DAEMON_LIST = 'list_daemons',\n\n  OSD_GET_REMOVE_STATUS = 'remove_osds_status',\n  OSD_CREATE = 'apply_drivegroups',\n  OSD_DELETE = 'remove_osds',\n\n  DEVICE_LIST = 'get_inventory',\n  DEVICE_BLINK_LIGHT = 'blink_device_light'\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'placement'\n})\nexport class PlacementPipe implements PipeTransform {\n  /**\n   * Convert the placement configuration into human readable form.\n   * The output is equal to the column 'PLACEMENT' in 'ceph orch ls'.\n   * @param serviceSpec The service specification to process.\n   * @return The placement configuration as human readable string.\n   */\n  transform(serviceSpec: object | undefined): string {\n    if (_.isUndefined(serviceSpec)) {\n      return $localize`no spec`;\n    }\n    if (_.get(serviceSpec, 'unmanaged', false)) {\n      return $localize`unmanaged`;\n    }\n    const kv: Array<any> = [];\n    const hosts: Array<string> = _.get(serviceSpec, 'placement.hosts');\n    const count: number = _.get(serviceSpec, 'placement.count');\n    const label: string = _.get(serviceSpec, 'placement.label');\n    const hostPattern: string = _.get(serviceSpec, 'placement.host_pattern');\n    if (_.isArray(hosts)) {\n      kv.push(...hosts);\n    }\n    if (_.isNumber(count)) {\n      kv.push($localize`count:${count}`);\n    }\n    if (_.isString(label)) {\n      kv.push($localize`label:${label}`);\n    }\n    if (_.isString(hostPattern)) {\n      kv.push(hostPattern);\n    }\n    return kv.join(';');\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">Create Realm/Zone Group/Zone\n  </ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"createMultisiteEntitiesForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"createMultisiteEntitiesForm\"\n          novalidate>\n    <div class=\"modal-body\">\n      <cd-alert-panel type=\"info\"\n                      spacingClass=\"mb-3\">The realm/zone group/zone created will be set as default and master.\n      </cd-alert-panel>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"realmName\"\n               i18n>Realm Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Realm name...\"\n                 id=\"realmName\"\n                 name=\"realmName\"\n                 formControlName=\"realmName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"createMultisiteEntitiesForm.showError('realmName', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zonegroupName\"\n               i18n>Zone Group Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone group name...\"\n                 id=\"zonegroupName\"\n                 name=\"zonegroupName\"\n                 formControlName=\"zonegroupName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"createMultisiteEntitiesForm.showError('zonegroupName', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label class=\"cd-col-form-label required\"\n               for=\"zoneName\"\n               i18n>Zone Name</label>\n        <div class=\"cd-col-form-input\">\n          <input class=\"form-control\"\n                 type=\"text\"\n                 placeholder=\"Zone name...\"\n                 id=\"zoneName\"\n                 name=\"zoneName\"\n                 formControlName=\"zoneName\">\n          <span class=\"invalid-feedback\"\n                *ngIf=\"createMultisiteEntitiesForm.showError('zoneName', formDir, 'required')\"\n                i18n>This field is required.</span>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"createMultisiteEntitiesForm\"></cd-form-button-panel>\n    </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealm, RgwZonegroup, RgwZone, SystemKey } from '../models/rgw-multisite';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cd-create-rgw-service-entities',\n  templateUrl: './create-rgw-service-entities.component.html',\n  styleUrls: ['./create-rgw-service-entities.component.scss']\n})\nexport class CreateRgwServiceEntitiesComponent {\n  public sub = new Subscription();\n  createMultisiteEntitiesForm: CdFormGroup;\n  realm: RgwRealm;\n  zonegroup: RgwZonegroup;\n  zone: RgwZone;\n\n  @Output()\n  submitAction = new EventEmitter();\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwMultisiteService: RgwMultisiteService,\n    public rgwZoneService: RgwZoneService,\n    public notificationService: NotificationService,\n    public rgwZonegroupService: RgwZonegroupService,\n    public rgwRealmService: RgwRealmService,\n    public modalService: ModalService\n  ) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.createMultisiteEntitiesForm = new CdFormGroup({\n      realmName: new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      zonegroupName: new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      zoneName: new FormControl(null, {\n        validators: [Validators.required]\n      })\n    });\n  }\n\n  submit() {\n    const values = this.createMultisiteEntitiesForm.value;\n    this.realm = new RgwRealm();\n    this.realm.name = values['realmName'];\n    this.zonegroup = new RgwZonegroup();\n    this.zonegroup.name = values['zonegroupName'];\n    this.zonegroup.endpoints = '';\n    this.zone = new RgwZone();\n    this.zone.name = values['zoneName'];\n    this.zone.endpoints = '';\n    this.zone.system_key = new SystemKey();\n    this.zone.system_key.access_key = '';\n    this.zone.system_key.secret_key = '';\n    this.rgwRealmService\n      .create(this.realm, true)\n      .toPromise()\n      .then(() => {\n        this.rgwZonegroupService\n          .create(this.realm, this.zonegroup, true, true)\n          .toPromise()\n          .then(() => {\n            this.rgwZoneService\n              .create(this.zone, this.zonegroup, true, true, this.zone.endpoints)\n              .toPromise()\n              .then(() => {\n                this.notificationService.show(\n                  NotificationType.success,\n                  $localize`Realm/Zonegroup/Zone created successfully`\n                );\n                this.submitAction.emit();\n                this.activeModal.close();\n              })\n              .catch(() => {\n                this.notificationService.show(\n                  NotificationType.error,\n                  $localize`Realm/Zonegroup/Zone creation failed`\n                );\n              });\n          });\n      });\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\"\n          [modalRef]=\"activeModal\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form #frm=\"ngForm\"\n          [formGroup]=\"serviceForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <cd-alert-panel *ngIf=\"serviceForm.controls.service_type.value === 'rgw' && showRealmCreationForm\"\n                        type=\"info\"\n                        spacingClass=\"mb-3\"\n                        i18n>\n          <a class=\"text-decoration-underline\"\n             (click)=\"createMultisiteSetup()\">\n             Click here</a> to create a new Realm/Zone Group/Zone\n        </cd-alert-panel>\n\n        <cd-alert-panel *ngIf=\"serviceForm.controls.service_type.value === 'oauth2-proxy'\"\n                        type=\"info\"\n                        spacingClass=\"mb-3\"\n                        i18n>\n          Authentication must be enabled in an active `mgtm-gateway` service to enable Single Sign-On(SSO) with `oauth2-proxy`\n        </cd-alert-panel>\n        <cd-alert-panel *ngIf=\"serviceForm.controls.service_type.value === 'mgmt-gateway'\"\n                        type=\"info\"\n                        spacingClass=\"mb-3\"\n                        i18n>\n          With an active mgmt-gateway service, the dashboard will continue to be served on {{currentURL}}:{{port}} and all other services will be accessible from {{currentURL}}:{{port}}/service_name\n        </cd-alert-panel>\n\n        <cd-alert-panel *ngIf=\"serviceForm.controls.service_type.value === 'smb'\"\n                        type=\"warning\"\n                        spacingClass=\"mb-3\"\n                        i18n>\n          SMB service management is intended for advanced users only.\n          For most scenarios, it is  recommended to use the SMB module instead.\n          To manage SMB clusters and shares, please visit the <a routerLink=\"/cephfs/smb\">SMB page</a>.\n        </cd-alert-panel>\n\n        <!-- Service type -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"service_type\"\n                 i18n>Type</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"service_type\"\n                    name=\"service_type\"\n                    class=\"form-select\"\n                    formControlName=\"service_type\"\n                    (change)=\"onServiceTypeChange($event.target.value)\">\n              <option i18n\n                      [ngValue]=\"null\">-- Select a service type --</option>\n              <option *ngFor=\"let serviceType of serviceTypes\"\n                      [value]=\"serviceType\">\n                {{ serviceType }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('service_type', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- backend_service -->\n        <div *ngIf=\"serviceForm.controls.service_type.value === 'ingress'\"\n             class=\"form-group row\">\n          <label i18n\n                 class=\"cd-col-form-label\"\n                 [ngClass]=\"{'required': ['ingress'].includes(serviceForm.controls.service_type.value)}\"\n                 for=\"backend_service\">Backend Service</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"backend_service\"\n                    name=\"backend_service\"\n                    class=\"form-select\"\n                    formControlName=\"backend_service\"\n                    (change)=\"prePopulateId()\">\n              <option *ngIf=\"services === null\"\n                      [ngValue]=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"services !== null && services.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No service available --</option>\n              <option *ngIf=\"services !== null && services.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select an existing service --</option>\n              <option *ngFor=\"let service of services\"\n                      [value]=\"service.service_name\">{{ service.service_name }}</option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('backend_service', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- NVMe/TCP -->\n        <!-- Block Pool -->\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'nvmeof'\">\n          <label i18n\n                 class=\"cd-col-form-label required\"\n                 for=\"pool\">Block Pool</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"pool\"\n                    name=\"pool\"\n                    class=\"form-select\"\n                    formControlName=\"pool\"\n                    (change)=\"setNvmeServiceId()\">\n              <option *ngIf=\"rbdPools === null\"\n                      [ngValue]=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"rbdPools && rbdPools.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No block pools available --</option>\n              <option *ngIf=\"rbdPools && rbdPools.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select a pool --</option>\n              <option *ngFor=\"let pool of rbdPools\"\n                      [value]=\"pool.pool_name\">{{ pool.pool_name }}</option>\n            </select>\n            <cd-help-text i18n>\n              An RBD application-enabled pool in which the gateway configuration can be managed.\n            </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('pool', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- Group Name -->\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'nvmeof'\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"group\">\n            <span i18n>Group Name</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"group\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"group\"\n                     (change)=\"setNvmeServiceId()\">\n            </div>\n            <cd-help-text i18n>\n              The name of the gateway group.\n            </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('service_id', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- Service id -->\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value !== 'snmp-gateway'\">\n          <label class=\"cd-col-form-label\"\n                 [ngClass]=\"{'required': ['mds', 'rgw', 'nfs', 'iscsi', 'nvmeof', 'smb', 'ingress'].includes(serviceForm.controls.service_type.value)}\"\n                 for=\"service_id\">\n            <span i18n>Service Name</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <span class=\"input-group-text\"\n                    *ngIf=\"serviceForm.controls.service_type.value && ['mds', 'rgw', 'nfs', 'iscsi', 'nvmeof', 'smb', 'ingress'].includes(serviceForm.controls.service_type.value)\"\n                    for=\"userId\"\n                    i18n>{{serviceForm.controls.service_type.value}}.\n              </span>\n              <input id=\"service_id\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"service_id\">\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('service_id', frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('service_id', frm, 'uniqueName')\"\n                  i18n>This service id is already in use.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('service_id', frm, 'mdsPattern')\"\n                  i18n>MDS service id must start with a letter and contain alphanumeric characters or '.', '-', and '_'</span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'rgw'\">\n          <label class=\"cd-col-form-label\"\n                 for=\"realm_name\"\n                 i18n>Realm</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"realm_name\"\n                    formControlName=\"realm_name\"\n                    name=\"realm_name\"\n                    [attr.disabled]=\"realmList.length === 0  || editing ? true : null\">\n            <option *ngIf=\"realmList.length === 0\"\n                    i18n\n                    selected>-- No realm available --</option>\n            <option *ngFor=\"let realm of realmList\"\n                    [value]=\"realm.name\">\n                  {{ realm.name }}\n            </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'rgw'\">\n          <label class=\"cd-col-form-label\"\n                 for=\"zonegroup_name\"\n                 i18n>Zone Group</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"zonegroup_name\"\n                    formControlName=\"zonegroup_name\"\n                    name=\"zonegroup_name\"\n                    [attr.disabled]=\"zonegroupList.length === 0  || editing ? true : null\">\n              <option *ngFor=\"let zonegroup of zonegroupList\"\n                      [value]=\"zonegroup.name\">\n              {{ zonegroup.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'rgw'\">\n          <label class=\"cd-col-form-label\"\n                 for=\"zone_name\"\n                 i18n>Zone</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"zone_name\"\n                    formControlName=\"zone_name\"\n                    name=\"zone_name\"\n                    [attr.disabled]=\"zoneList.length === 0  || editing ? true : null\">\n              <option *ngFor=\"let zone of zoneList\"\n                      [value]=\"zone.name\">\n              {{ zone.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <!-- unmanaged -->\n        <div class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input class=\"custom-control-input\"\n                     id=\"unmanaged\"\n                     type=\"checkbox\"\n                     formControlName=\"unmanaged\">\n              <label class=\"custom-control-label m-0\"\n                     for=\"unmanaged\"\n                     i18n>Unmanaged</label>\n              <cd-help-text i18n>If Unmanaged is selected, the orchestrator will not start or stop any daemons associated with this service. Placement and all other properties will be ignored.</cd-help-text>\n            </div>\n          </div>\n        </div>\n\n        <!-- Placement -->\n        <div *ngIf=\"!serviceForm.controls.unmanaged.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"placement\"\n                 i18n>Placement</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"placement\"\n                    class=\"form-select\"\n                    formControlName=\"placement\"\n                    (change)=\"onPlacementChange($event.target.value)\">\n              <option i18n\n                      value=\"hosts\">Hosts</option>\n              <option i18n\n                      value=\"label\">Label</option>\n            </select>\n          </div>\n        </div>\n\n        <!-- Label -->\n        <div *ngIf=\"!serviceForm.controls.unmanaged.value && serviceForm.controls.placement.value === 'label'\"\n             class=\"form-group row\">\n          <label i18n\n                 class=\"cd-col-form-label\"\n                 for=\"label\">Label</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"label\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   formControlName=\"label\"\n                   [ngbTypeahead]=\"searchLabels\"\n                   (focus)=\"labelFocus.next($any($event).target.value)\"\n                   (click)=\"labelClick.next($any($event).target.value)\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('label', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- Hosts -->\n        <div *ngIf=\"!serviceForm.controls.unmanaged.value && serviceForm.controls.placement.value === 'hosts'\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"hosts\"\n                 i18n>Hosts</label>\n          <div class=\"cd-col-form-input\">\n            <cd-select-badges id=\"hosts\"\n                              [data]=\"serviceForm.controls.hosts.value\"\n                              [options]=\"hosts.options\"\n                              [messages]=\"hosts.messages\">\n            </cd-select-badges>\n          </div>\n        </div>\n\n        <!-- Count -->\n        <div *ngIf=\"!serviceForm.controls.unmanaged.value && serviceForm.controls.service_type.value !== 'nvmeof'\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"count\">\n            <span i18n>Count</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"count\"\n                   class=\"form-control\"\n                   type=\"number\"\n                   formControlName=\"count\"\n                   min=\"1\">\n            <cd-help-text i18n>Number of deamons that will be deployed</cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('count', frm, 'min')\"\n                  i18n>The value must be at least 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('count', frm, 'pattern')\"\n                  i18n>The entered value needs to be a number.</span>\n          </div>\n        </div>\n\n        <!-- RGW -->\n        <ng-container *ngIf=\"!serviceForm.controls.unmanaged.value && serviceForm.controls.service_type.value === 'rgw'\">\n          <!-- rgw_frontend_port -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"rgw_frontend_port\">Port</label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"rgw_frontend_port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"rgw_frontend_port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('rgw_frontend_port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('rgw_frontend_port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('rgw_frontend_port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n            </div>\n          </div>\n        </ng-container>\n\n        <!-- iSCSI -->\n        <!-- pool -->\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'iscsi'\">\n          <label i18n\n                 class=\"cd-col-form-label required\"\n                 for=\"pool\">Pool</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"pool\"\n                    name=\"pool\"\n                    class=\"form-select\"\n                    formControlName=\"pool\">\n              <option *ngIf=\"pools === null\"\n                      [ngValue]=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"pools && pools.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No pools available --</option>\n              <option *ngIf=\"pools && pools.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select a pool --</option>\n              <option *ngFor=\"let pool of pools\"\n                      [value]=\"pool.pool_name\">{{ pool.pool_name }}</option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('pool', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- fields in iSCSI which are hidden when unmanaged is true -->\n        <ng-container *ngIf=\"!serviceForm.controls.unmanaged.value && serviceForm.controls.service_type.value === 'iscsi'\">\n          <!-- trusted_ip_list -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"trusted_ip_list\">\n              <span i18n>Trusted IPs</span>\n              <cd-helper>\n                <span i18n>Comma separated list of IP addresses.</span>\n                <br>\n                <span i18n>Please add the <b>Ceph Manager</b> IP addresses here, otherwise the iSCSI gateways can't be reached.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"trusted_ip_list\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"trusted_ip_list\">\n            </div>\n          </div>\n\n          <!-- api_port -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"api_port\">Port</label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"api_port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"api_port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('api_port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('api_port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('api_port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n            </div>\n          </div>\n\n          <!-- api_user -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   [ngClass]=\"{'required': ['iscsi'].includes(serviceForm.controls.service_type.value)}\"\n                   for=\"api_user\">User</label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"api_user\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"api_user\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('api_user', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n\n          <!-- api_password -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   [ngClass]=\"{'required': ['iscsi'].includes(serviceForm.controls.service_type.value)}\"\n                   for=\"api_password\">Password</label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group\">\n                <input id=\"api_password\"\n                       class=\"form-control\"\n                       type=\"password\"\n                       autocomplete=\"new-password\"\n                       formControlName=\"api_password\">\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"api_password\">\n                </button>\n                <cd-copy-2-clipboard-button source=\"api_password\">\n                </cd-copy-2-clipboard-button>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"serviceForm.showError('api_password', frm, 'required')\"\n                      i18n>This field is required.</span>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n\n        <!-- smb -->\n        <ng-container *ngIf=\"serviceForm.controls.service_type.value === 'smb'\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"cluster_id\"\n                   i18n>\n              Cluster id\n              <cd-helper>\n                <span>A short name identifying the SMB “cluster”. In this case a cluster is simply a management unit of one or more Samba services sharing a common configuration,\n                   and may not provide actual clustering or availability mechanisms.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"cluster_id\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"cluster_id\"\n                     placeholder=\"foo\"\n                     i18n-placeholder>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('cluster_id', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"config_uri\">\n              <span i18n>Config URI</span>\n              <cd-helper i18n>\n                Configuration source that should be loaded by the samba-container as the primary configuration file.\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"config_uri\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"config_uri\"\n                     placeholder=\"rados://.smb/foo/scc.toml\"\n                     i18n-placeholder>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('config_uri', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('config_uri', frm, 'configUriPattern')\"\n                    i18n>The value must start with either 'http:', 'https:', 'rados:' or 'rados:mon-config-key:'</span>\n            </div>\n          </div>\n\n          <div class=\"form-group row\"\n               formGroupName=\"features\">\n            <label class=\"cd-col-form-label\"\n                   for=\"features\"\n                   i18n>Features\n              <cd-helper>\n                <span>Pre-defined terms enabling specific deployment characteristics.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"custom-control custom-checkbox\"\n                   *ngFor=\"let feature of smbFeaturesList\">\n                <input class=\"custom-control-input\"\n                       type=\"checkbox\"\n                       name=\"{{feature}}\"\n                       id=\"{{feature}}\"\n                       formControlName=\"{{feature}}\">\n                <label class=\"custom-control-label\"\n                       for=\"{{feature}}\"\n                       i18n>{{feature}}\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"custom_dns\">\n              <span i18n>Custom DNS</span>\n              <cd-helper i18n>\n                <span>Comma separated list of DNSs.</span>\n                <br>\n                <span>A list of IP addresses that will be used as the DNS servers for a Samba container.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"custom_dns\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"custom_dns\"\n                     placeholder=\"192.168.76.204\"\n                     i18n-placeholder>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"join_sources\">\n              <span i18n>Join sources</span>\n              <cd-helper i18n>\n                <span>Comma separated list of URIs.</span>\n                <br>\n                <span>A list of values that will be used to identify where authentication data that will be used to perform domain joins are located.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"join_sources\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"join_sources\"\n                     placeholder=\"rados:mon-config-key:smb/config/foo/join1.json\"\n                     i18n-placeholder>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"user_sources\">\n              <span i18n>User sources</span>\n              <cd-helper i18n>\n                <span>Comma separated list of URIs.</span>\n                <br>\n                <span>A list of pseudo-uris containing data the samba-container can use to create users (and/or\n                  groups). A ceph based samba container may typically use a rados uri\n                  or a mon config-key store uri </span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"user_sources\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"user_sources\"\n                     placeholder=\"rados:mon-config-key:smb/config/foo/join2.json\"\n                     i18n-placeholder>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"include_ceph_users\">\n              <span i18n>Ceph users</span>\n              <cd-helper i18n>\n                <span>Comma separated list of Ceph users.</span>\n                <br>\n                <span>A list of cephx user names that the Samba Containers may use.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"include_ceph_users\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"include_ceph_users\"\n                     placeholder=\"client.smb.fs.cluster.foo\"\n                     i18n-placeholder>\n            </div>\n          </div>\n\n        </ng-container>\n\n        <!-- Ingress -->\n        <ng-container *ngIf=\"serviceForm.controls.service_type.value === 'ingress'\">\n          <!-- virtual_ip -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   [ngClass]=\"{'required': ['ingress'].includes(serviceForm.controls.service_type.value)}\"\n                   for=\"virtual_ip\">\n              <span i18n>Virtual IP</span>\n              <cd-helper>\n                <span i18n>The virtual IP address and subnet (in CIDR notation) where the ingress service will be available.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"virtual_ip\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"virtual_ip\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('virtual_ip', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n\n          <!-- frontend_port -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   [ngClass]=\"{'required': ['ingress'].includes(serviceForm.controls.service_type.value)}\"\n                   for=\"frontend_port\">\n              <span i18n>Frontend Port</span>\n              <cd-helper>\n                <span i18n>The port used to access the ingress service.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"frontend_port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"frontend_port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('frontend_port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('frontend_port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('frontend_port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('frontend_port', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n\n          <!-- monitor_port -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   [ngClass]=\"{'required': ['ingress'].includes(serviceForm.controls.service_type.value)}\"\n                   for=\"monitor_port\">\n              <span i18n>Monitor Port</span>\n              <cd-helper>\n                <span i18n>The port used by haproxy for load balancer status.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"monitor_port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"monitor_port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('monitor_port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('monitor_port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('monitor_port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('monitor_port', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- virtual_interface_networks -->\n          <div class=\"form-group row\"\n               *ngIf=\"!serviceForm.controls.unmanaged.value\">\n            <label class=\"cd-col-form-label\"\n                   for=\"virtual_interface_networks\">\n              <span i18n>CIDR Networks</span>\n              <cd-helper>\n                <span i18n>A list of networks to identify which network interface to use for the virtual IP address.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"virtual_interface_networks\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"virtual_interface_networks\">\n            </div>\n          </div>\n        </ng-container>\n\n        <!-- SNMP-Gateway -->\n        <ng-container *ngIf=\"serviceForm.controls.service_type.value === 'snmp-gateway'\">\n          <!-- snmp-version -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"snmp_version\"\n                   i18n>Version</label>\n            <div class=\"cd-col-form-input\">\n              <select id=\"snmp_version\"\n                      name=\"snmp_version\"\n                      class=\"form-select\"\n                      formControlName=\"snmp_version\"\n                      (change)=\"clearValidations()\">\n                <option i18n\n                        [ngValue]=\"null\">-- Select SNMP version --</option>\n                <option *ngFor=\"let snmpVersion of ['V2c', 'V3']\"\n                        [value]=\"snmpVersion\">{{ snmpVersion }}</option>\n              </select>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('snmp_version', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- Destination -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"snmp_destination\">\n              <span i18n>Destination</span>\n              <cd-helper>\n                <span i18n>Must be of the format hostname:port.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"snmp_destination\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"snmp_destination\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('snmp_destination', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('snmp_destination', frm, 'snmpDestinationPattern')\"\n                    i18n>The value does not match the pattern: <strong>hostname:port</strong></span>\n            </div>\n          </div>\n          <!-- Engine id for snmp V3 -->\n          <div class=\"form-group row\"\n               *ngIf=\"serviceForm.controls.snmp_version.value === 'V3'\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"engine_id\">\n              <span i18n>Engine Id</span>\n              <cd-helper>\n                <span i18n>Unique identifier for the device (in hex).</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"engine_id\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"engine_id\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('engine_id', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('engine_id', frm, 'snmpEngineIdPattern')\"\n                    i18n>The value does not match the pattern: <strong>Must be in hexadecimal and length must be multiple of 2 with min value = 10 amd max value = 64.</strong></span>\n            </div>\n          </div>\n          <!-- Auth protocol for snmp V3 -->\n          <div class=\"form-group row\"\n               *ngIf=\"serviceForm.controls.snmp_version.value === 'V3'\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"auth_protocol\"\n                   i18n>Auth Protocol</label>\n            <div class=\"cd-col-form-input\">\n              <select id=\"auth_protocol\"\n                      name=\"auth_protocol\"\n                      class=\"form-select\"\n                      formControlName=\"auth_protocol\">\n                <option i18n\n                        [ngValue]=\"null\">-- Select auth protocol --</option>\n                <option *ngFor=\"let authProtocol of ['SHA', 'MD5']\"\n                        [value]=\"authProtocol\">\n                  {{ authProtocol }}\n                </option>\n              </select>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('auth_protocol', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- Privacy protocol for snmp V3 -->\n          <div class=\"form-group row\"\n               *ngIf=\"serviceForm.controls.snmp_version.value === 'V3'\">\n            <label class=\"cd-col-form-label\"\n                   for=\"privacy_protocol\"\n                   i18n>Privacy Protocol</label>\n            <div class=\"cd-col-form-input\">\n              <select id=\"privacy_protocol\"\n                      name=\"privacy_protocol\"\n                      class=\"form-select\"\n                      formControlName=\"privacy_protocol\">\n                <option i18n\n                        [ngValue]=\"null\">-- Select privacy protocol --</option>\n                <option *ngFor=\"let privacyProtocol of ['DES', 'AES']\"\n                        [value]=\"privacyProtocol\">\n                  {{ privacyProtocol }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <!-- Credentials -->\n          <fieldset>\n            <legend i18n>Credentials</legend>\n            <!-- snmp v2c snmp_community -->\n            <div class=\"form-group row\"\n                 *ngIf=\"serviceForm.controls.snmp_version.value === 'V2c'\">\n              <label class=\"cd-col-form-label required\"\n                     for=\"snmp_community\">\n                <span i18n>SNMP Community</span>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"snmp_community\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"snmp_community\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"serviceForm.showError('snmp_community', frm, 'required')\"\n                      i18n>This field is required.</span>\n              </div>\n            </div>\n            <!-- snmp v3 auth username -->\n            <div class=\"form-group row\"\n                 *ngIf=\"serviceForm.controls.snmp_version.value === 'V3'\">\n              <label class=\"cd-col-form-label required\"\n                     for=\"snmp_v3_auth_username\">\n                <span i18n>Username</span>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"snmp_v3_auth_username\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"snmp_v3_auth_username\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"serviceForm.showError('snmp_v3_auth_username', frm, 'required')\"\n                      i18n>This field is required.</span>\n              </div>\n            </div>\n            <!-- snmp v3 auth password -->\n            <div class=\"form-group row\"\n                 *ngIf=\"serviceForm.controls.snmp_version.value === 'V3'\">\n              <label class=\"cd-col-form-label required\"\n                     for=\"snmp_v3_auth_password\">\n                <span i18n>Password</span>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"snmp_v3_auth_password\"\n                       class=\"form-control\"\n                       type=\"password\"\n                       formControlName=\"snmp_v3_auth_password\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"serviceForm.showError('snmp_v3_auth_password', frm, 'required')\"\n                      i18n>This field is required.</span>\n              </div>\n            </div>\n            <!-- snmp v3 priv password -->\n            <div class=\"form-group row\"\n                 *ngIf=\"serviceForm.controls.snmp_version.value === 'V3' && serviceForm.controls.privacy_protocol.value !== null && serviceForm.controls.privacy_protocol.value !== undefined\">\n              <label class=\"cd-col-form-label required\"\n                     for=\"snmp_v3_priv_password\">\n                <span i18n>Encryption</span>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"snmp_v3_priv_password\"\n                       class=\"form-control\"\n                       type=\"password\"\n                       formControlName=\"snmp_v3_priv_password\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"serviceForm.showError('snmp_v3_priv_password', frm, 'required')\"\n                      i18n>This field is required.</span>\n              </div>\n            </div>\n          </fieldset>\n        </ng-container>\n\n        <!-- oauth2-proxy -->\n        <ng-container *ngIf=\"serviceForm.controls.service_type.value === 'oauth2-proxy'\">\n          <!-- provider_display_name -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"provider_display_name\">\n              <span i18n>Provider display name</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"provider_display_name\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"provider_display_name\"\n                     placeholder=\"My OIDC Provider\"\n                     i18n-placeholder>\n              <cd-help-text i18n>The display name for the identity provider (IdP) in the UI.</cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('provider_display_name', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- client_id -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"client_id\">\n              <span i18n>Client ID</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"client_id\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"client_id\"\n                     placeholder=\"oauth2-client\">\n              <cd-help-text i18n>The client ID for authenticating with the IdP.</cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('client_id', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- client_secret -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"client_secret\">\n              <span i18n>Client secret</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group\">\n                <input id=\"client_secret\"\n                       class=\"form-control\"\n                       type=\"password\"\n                       formControlName=\"client_secret\">\n                <span class=\"input-group-append\">\n                  <button type=\"button\"\n                          class=\"btn btn-light\"\n                          cdPasswordButton=\"client_secret\">\n                  </button>\n                  <cd-copy-2-clipboard-button source=\"client_secret\">\n                  </cd-copy-2-clipboard-button>\n                </span>\n              </div>\n              <cd-help-text i18n>The client secret for authenticating with the IdP.</cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('client_secret', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- oidc_issuer_url -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label required\"\n                   for=\"oidc_issuer_url\">\n              <span i18n>OIDC Issuer URL</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"oidc_issuer_url\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"oidc_issuer_url\"\n                     placeholder=\"https://<IdPs-domain>/realms/<realm-name>\">\n              <cd-help-text i18n>The URL of the OpenID Connect (OIDC) issuer.</cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('oidc_issuer_url', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('oidc_issuer_url', frm, 'validUrl')\"\n                    i18n>Invalid url.</span>\n            </div>\n          </div>\n          <!-- https_address -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"https_address\">\n              <span i18n>Https address</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"https_address\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"https_address\"\n                     placeholder=\"0.0.0.0:4180\">\n              <cd-help-text i18n>The address for HTTPS connections as [IP|Hostname]:port.</cd-help-text>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('https_address', frm, 'invalidAddress')\"\n                    i18n>Format must be [IP|Hostname]:port and the port between 0 and 65535</span>\n            </div>\n          </div>\n          <!-- redirect_url -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"redirect_url\">\n              <span i18n>Redirect URL</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"redirect_url\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"redirect_url\"\n                     placeholder=\"https://<IP|Hostname>:4180/oauth2/callback\">\n              <cd-help-text i18n>The URL the oauth2-proxy service will redirect to after a successful login.</cd-help-text>\n            </div>\n          </div>\n          <!-- Allowlist_domains -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"allowlist_domains\">\n              <span i18n>Allowlist domains</span>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"allowlist_domains\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"allowlist_domains\"\n                     placeholder=\"domain1.com,192.168.100.1:8080\">\n              <cd-help-text i18n>Comma separated list of domains to be allowed to redirect to, used for login or logout.</cd-help-text>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!serviceForm.controls.unmanaged.value && ['mgmt-gateway'].includes(serviceForm.controls.service_type.value)\">\n          <!-- port -->\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"port\">Port</label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n            </div>\n          </div>\n          <!-- enable_auth -->\n          <div class=\"form-item\">\n            <fieldset>\n              <label class=\"cds--label\"\n                     for=\"pools\"\n                     i18n>Authentication</label>\n                <cds-checkbox i18n-label\n                              id=\"enable_auth\"\n                              name=\"enable_auth\"\n                              formControlName=\"enable_auth\">\n                Enable\n                <cd-help-text i18n>\n                  Allows to enable authentication through an external Identity Provider (IdP) using Single Sign-On (SSO)\n                </cd-help-text>\n              </cds-checkbox>\n            </fieldset>\n          </div>\n          <!-- ssl_protocols -->\n          <div class=\"form-item\">\n            <cds-combo-box type=\"multi\"\n                           label=\"SSL protocols\"\n                           selectionFeedback=\"top-after-reopen\"\n                           for=\"ssl_protocols\"\n                           name=\"ssl_protocols\"\n                           formControlName=\"ssl_protocols\"\n                           id=\"ssl_protocols\"\n                           placeholder=\"Select protocols...\"\n                           [appendInline]=\"true\"\n                           [items]=\"sslProtocolsItems\"\n                           i18n-placeholder\n                           i18n>\n              <cds-dropdown-list></cds-dropdown-list>\n            </cds-combo-box>\n          </div>\n          <!-- ssl_ciphers -->\n          <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"ssl_ciphers\">\n            <span i18n>SSL ciphers</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"ssl_ciphers\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"ssl_ciphers\"\n                     placeholder=\"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\">\n            </div>\n            <cd-help-text i18n>Default cipher list used: <a href=\"https://ssl-config.mozilla.org/#server=nginx\"\n                                                            target=\"_blank\">https://ssl-config.mozilla.org/#server=nginx</a></cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('ssl_ciphers', frm, 'invalidPattern')\"\n                  i18n>Invalid cipher suite. Each cipher must be separated by '-' and each cipher suite must be separated by ':'</span>\n          </div>\n        </div>\n        </ng-container>\n        <!-- RGW, Ingress, iSCSI, Oauth2-proxy & mgmt-gateway -->\n        <ng-container *ngIf=\"!serviceForm.controls.unmanaged.value && ['rgw', 'iscsi', 'ingress', 'oauth2-proxy', 'mgmt-gateway'].includes(serviceForm.controls.service_type.value)\">\n          <!-- ssl -->\n          <ng-container *ngIf=\"!['mgmt-gateway'].includes(serviceForm.controls.service_type.value)\">\n            <div class=\"form-group row\">\n              <div class=\"cd-col-form-offset\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input class=\"custom-control-input\"\n                         id=\"ssl\"\n                         type=\"checkbox\"\n                         formControlName=\"ssl\">\n                  <label class=\"custom-control-label\"\n                         for=\"ssl\"\n                         i18n>SSL</label>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n          <!-- ssl_cert -->\n          <div *ngIf=\"serviceForm.controls.ssl.value || ['mgmt-gateway'].includes(serviceForm.controls.service_type.value)\"\n               class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"ssl_cert\">\n              <span i18n>Certificate</span>\n              <cd-helper i18n>The SSL certificate in PEM format.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <textarea id=\"ssl_cert\"\n                        class=\"form-control resize-vertical text-monospace text-pre\"\n                        formControlName=\"ssl_cert\"\n                        rows=\"5\">\n              </textarea>\n              <input type=\"file\"\n                     (change)=\"fileUpload($event.target.files, 'ssl_cert')\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('ssl_cert', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('ssl_cert', frm, 'pattern')\"\n                    i18n>Invalid SSL certificate.</span>\n            </div>\n          </div>\n\n          <!-- ssl_key -->\n          <div *ngIf=\"(serviceForm.controls.ssl.value && !(['rgw', 'ingress'].includes(serviceForm.controls.service_type.value))) || ['mgmt-gateway'].includes(serviceForm.controls.service_type.value)\"\n               class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"ssl_key\">\n              <span i18n>Private key</span>\n              <cd-helper i18n>The SSL private key in PEM format.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <textarea id=\"ssl_key\"\n                        class=\"form-control resize-vertical text-monospace text-pre\"\n                        formControlName=\"ssl_key\"\n                        rows=\"5\">\n              </textarea>\n              <input type=\"file\"\n                     (change)=\"fileUpload($event.target.files,'ssl_key')\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('ssl_key', frm, 'required')\"\n                    i18n>This field is required.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('ssl_key', frm, 'pattern')\"\n                    i18n>Invalid SSL private key.</span>\n            </div>\n          </div>\n        </ng-container>\n        <!-- Grafana -->\n        <ng-container *ngIf=\"serviceForm.controls.service_type.value === 'grafana'\">\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"grafana_port\">\n              <span i18n>Grafana Port</span>\n              <cd-helper>\n                <span i18n>The default port used by grafana.</span>\n              </cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input id=\"grafana_port\"\n                     class=\"form-control\"\n                     type=\"number\"\n                     formControlName=\"grafana_port\"\n                     min=\"1\"\n                     max=\"65535\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('grafana_port', frm, 'pattern')\"\n                    i18n>The entered value needs to be a number.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('grafana_port', frm, 'min')\"\n                    i18n>The value must be at least 1.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('grafana_port', frm, 'max')\"\n                    i18n>The value cannot exceed 65535.</span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"serviceForm.showError('grafana_port', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n\n          <div class=\"form-group row\">\n            <label i18n\n                   class=\"cd-col-form-label\"\n                   for=\"grafana_admin_password\">\n              <span>Grafana Password</span>\n              <cd-helper>The password of the default Grafana Admin. Set once on first-run.</cd-helper>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group\">\n                <input id=\"grafana_admin_password\"\n                       class=\"form-control\"\n                       type=\"password\"\n                       autocomplete=\"new-password\"\n                       [attr.disabled]=\"editing ? true:null\"\n                       formControlName=\"grafana_admin_password\">\n                <span class=\"input-group-append\">\n                  <button type=\"button\"\n                          class=\"btn btn-light\"\n                          cdPasswordButton=\"grafana_admin_password\">\n                  </button>\n                  <cd-copy-2-clipboard-button source=\"grafana_admin_password\">\n                  </cd-copy-2-clipboard-button>\n                </span>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n\n      <cd-alert-panel *ngIf=\"serviceForm.controls.service_type.value === 'mgmt-gateway' && showMgmtGatewayMessage\"\n                      type=\"warning\"\n                      spacingClass=\"mb-3\"\n                      i18n>\n        Modifying the default settings could lead to a weaker security configuration\n      </cd-alert-panel>\n\n        <!-- NVMe/TCP -->\n        <!-- mTLS -->\n        <div class=\"form-group row\"\n             *ngIf=\"serviceForm.controls.service_type.value === 'nvmeof'\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input class=\"custom-control-input\"\n                     id=\"enable_mtls\"\n                     type=\"checkbox\"\n                     formControlName=\"enable_mtls\">\n              <label class=\"custom-control-label\"\n                     for=\"enable_mtls\"\n                     i18n>Encryption</label>\n              <cd-help-text i18n>Enables mutual TLS (mTLS) between the client and the gateway server.</cd-help-text>\n            </div>\n          </div>\n        </div>\n\n        <!-- root_ca_cert -->\n        <div *ngIf=\"serviceForm.controls.enable_mtls.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"root_ca_cert\">\n            <span i18n>Root CA certificate</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"root_ca_cert\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"root_ca_cert\"\n                      rows=\"5\"></textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'root_ca_cert')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('root_ca_cert', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- client_cert -->\n        <div *ngIf=\"serviceForm.controls.enable_mtls.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"client_cert\">\n            <span i18n>Client CA certificate</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"client_cert\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"client_cert\"\n                      rows=\"5\"></textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'client_cert')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('client_cert', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- client_key -->\n        <div *ngIf=\"serviceForm.controls.enable_mtls.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"client_key\">\n            <span i18n>Client key</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"client_key\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"client_key\"\n                      rows=\"5\"></textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'client_key')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('client_key', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- server_cert -->\n        <div *ngIf=\"serviceForm.controls.enable_mtls.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"server_cert\">\n            <span i18n>Gateway server certificate</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"server_cert\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"server_cert\"\n                      rows=\"5\"></textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'server_cert')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('server_cert', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- server_key -->\n        <div *ngIf=\"serviceForm.controls.enable_mtls.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"server_key\">\n            <span i18n>Gateway server key</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"server_key\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"server_key\"\n                      rows=\"5\"></textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'server_key')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"serviceForm.showError('server_key', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                [form]=\"serviceForm\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { AbstractControl, UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { NgbActiveModal, NgbModalRef, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\nimport { ListItem } from 'carbon-components-angular';\nimport _ from 'lodash';\nimport { forkJoin, merge, Observable, Subject, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { CreateRgwServiceEntitiesComponent } from '~/app/ceph/rgw/create-rgw-service-entities/create-rgw-service-entities.component';\nimport { RgwRealm, RgwZonegroup, RgwZone } from '~/app/ceph/rgw/models/rgw-multisite';\n\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { RgwMultisiteService } from '~/app/shared/api/rgw-multisite.service';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { RgwZoneService } from '~/app/shared/api/rgw-zone.service';\nimport { RgwZonegroupService } from '~/app/shared/api/rgw-zonegroup.service';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport {\n  ActionLabelsI18n,\n  TimerServiceInterval,\n  URLVerbs,\n  SSL_PROTOCOLS,\n  SSL_CIPHERS\n} from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Host } from '~/app/shared/models/host.interface';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { TimerService } from '~/app/shared/services/timer.service';\n\n@Component({\n  selector: 'cd-service-form',\n  templateUrl: './service-form.component.html',\n  styleUrls: ['./service-form.component.scss']\n})\nexport class ServiceFormComponent extends CdForm implements OnInit {\n  public sub = new Subscription();\n\n  readonly MDS_SVC_ID_PATTERN = /^[a-zA-Z_.-][a-zA-Z0-9_.-]*$/;\n  readonly SNMP_DESTINATION_PATTERN = /^[^\\:]+:[0-9]/;\n  readonly SNMP_ENGINE_ID_PATTERN = /^[0-9A-Fa-f]{10,64}/g;\n  readonly INGRESS_SUPPORTED_SERVICE_TYPES = ['rgw', 'nfs'];\n  readonly SMB_CONFIG_URI_PATTERN = /^(http:|https:|rados:|rados:mon-config-key:)/;\n  readonly OAUTH2_ISSUER_URL_PATTERN = /^(https?:\\/\\/)?([a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+)(:[0-9]{1,5})?(\\/.*)?$/;\n  readonly SSL_CIPHERS_PATTERN = /^[a-zA-Z0-9\\-:]+$/;\n  readonly DEFAULT_SSL_PROTOCOL_ITEM = [{ content: 'TLSv1.3', selected: true }];\n  @ViewChild(NgbTypeahead, { static: false })\n  typeahead: NgbTypeahead;\n\n  @Input() hiddenServices: string[] = [];\n\n  @Input() editing = false;\n\n  @Input() serviceName: string;\n\n  @Input() serviceType: string;\n\n  serviceForm: CdFormGroup;\n  action: string;\n  resource: string;\n  serviceTypes: string[] = [];\n  serviceIds: string[] = [];\n  hosts: any;\n  labels: string[];\n  labelClick = new Subject<string>();\n  labelFocus = new Subject<string>();\n  pools: Array<Pool>;\n  rbdPools: Array<Pool>;\n  services: Array<CephServiceSpec> = [];\n  pageURL: string;\n  serviceList: CephServiceSpec[];\n  multisiteInfo: object[] = [];\n  defaultRealmId = '';\n  defaultZonegroupId = '';\n  defaultZoneId = '';\n  realmList: RgwRealm[] = [];\n  zonegroupList: RgwZonegroup[] = [];\n  zoneList: RgwZone[] = [];\n  bsModalRef: NgbModalRef;\n  defaultZonegroup: RgwZonegroup;\n  showRealmCreationForm = false;\n  defaultsInfo: { defaultRealmName: string; defaultZonegroupName: string; defaultZoneName: string };\n  realmNames: string[];\n  zonegroupNames: string[];\n  zoneNames: string[];\n  smbFeaturesList = ['domain'];\n  currentURL: string;\n  port: number = 443;\n  sslProtocolsItems: Array<ListItem> = Object.values(SSL_PROTOCOLS).map((protocol) => ({\n    content: protocol,\n    selected: true\n  }));\n  sslCiphersItems: Array<ListItem> = Object.values(SSL_CIPHERS).map((cipher) => ({\n    content: cipher,\n    selected: false\n  }));\n  showMgmtGatewayMessage: boolean = false;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private cephServiceService: CephServiceService,\n    private formBuilder: CdFormBuilder,\n    private hostService: HostService,\n    private poolService: PoolService,\n    private rbdService: RbdService,\n    private router: Router,\n    private taskWrapperService: TaskWrapperService,\n    public timerService: TimerService,\n    public timerServiceVariable: TimerServiceInterval,\n    public rgwRealmService: RgwRealmService,\n    public rgwZonegroupService: RgwZonegroupService,\n    public rgwZoneService: RgwZoneService,\n    public rgwMultisiteService: RgwMultisiteService,\n    private route: ActivatedRoute,\n    public activeModal: NgbActiveModal,\n    public modalService: ModalService\n  ) {\n    super();\n    this.resource = $localize`service`;\n    this.hosts = {\n      options: [],\n      messages: new SelectMessages({\n        empty: $localize`There are no hosts.`,\n        filter: $localize`Filter hosts`\n      })\n    };\n    this.createForm();\n  }\n\n  createForm() {\n    this.serviceForm = this.formBuilder.group({\n      // Global\n      service_type: [null, [Validators.required]],\n      service_id: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'mds'\n            },\n            [\n              Validators.required,\n              CdValidators.custom('mdsPattern', (value: string) => {\n                if (_.isEmpty(value)) {\n                  return false;\n                }\n                return !this.MDS_SVC_ID_PATTERN.test(value);\n              })\n            ]\n          ),\n          CdValidators.requiredIf({\n            service_type: 'nfs'\n          }),\n          CdValidators.requiredIf({\n            service_type: 'iscsi'\n          }),\n          CdValidators.requiredIf({\n            service_type: 'nvmeof'\n          }),\n          CdValidators.requiredIf({\n            service_type: 'ingress'\n          }),\n          CdValidators.requiredIf({\n            service_type: 'smb'\n          }),\n          CdValidators.composeIf(\n            {\n              service_type: 'rgw'\n            },\n            [Validators.required]\n          ),\n          CdValidators.custom('uniqueName', (service_id: string) => {\n            return this.serviceIds && this.serviceIds.includes(service_id);\n          })\n        ]\n      ],\n      placement: ['hosts'],\n      label: [\n        null,\n        [\n          CdValidators.requiredIf({\n            placement: 'label',\n            unmanaged: false\n          })\n        ]\n      ],\n      hosts: [[]],\n      count: [null, [CdValidators.number(false)]],\n      unmanaged: [false],\n      // iSCSI\n      // NVMe/TCP\n      pool: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'iscsi'\n          }),\n          CdValidators.requiredIf({\n            service_type: 'nvmeof'\n          })\n        ]\n      ],\n      group: [\n        'default',\n        CdValidators.requiredIf({\n          service_type: 'nvmeof'\n        })\n      ],\n      enable_mtls: [false],\n      root_ca_cert: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'nvmeof',\n              enable_mtls: true\n            },\n            [Validators.required]\n          )\n        ]\n      ],\n      client_cert: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'nvmeof',\n              enable_mtls: true\n            },\n            [Validators.required]\n          )\n        ]\n      ],\n      client_key: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'nvmeof',\n              enable_mtls: true\n            },\n            [Validators.required]\n          )\n        ]\n      ],\n      server_cert: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'nvmeof',\n              enable_mtls: true\n            },\n            [Validators.required]\n          )\n        ]\n      ],\n      server_key: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'nvmeof',\n              enable_mtls: true\n            },\n            [Validators.required]\n          )\n        ]\n      ],\n      // RGW\n      rgw_frontend_port: [null, [CdValidators.number(false)]],\n      realm_name: [null],\n      zonegroup_name: [null],\n      zone_name: [null],\n      // iSCSI\n      trusted_ip_list: [null],\n      api_port: [null, [CdValidators.number(false)]],\n      api_user: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'iscsi',\n            unmanaged: false\n          })\n        ]\n      ],\n      api_password: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'iscsi',\n            unmanaged: false\n          })\n        ]\n      ],\n      // smb\n      cluster_id: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'smb'\n          })\n        ]\n      ],\n      features: new CdFormGroup(\n        this.smbFeaturesList.reduce((acc: object, e) => {\n          acc[e] = new UntypedFormControl(false);\n          return acc;\n        }, {})\n      ),\n      config_uri: [\n        null,\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'smb'\n            },\n            [\n              Validators.required,\n              CdValidators.custom('configUriPattern', (value: string) => {\n                if (_.isEmpty(value)) {\n                  return false;\n                }\n                return !this.SMB_CONFIG_URI_PATTERN.test(value);\n              })\n            ]\n          )\n        ]\n      ],\n      custom_dns: [null],\n      join_sources: [null],\n      user_sources: [null],\n      include_ceph_users: [null],\n      // Ingress\n      backend_service: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'ingress'\n          })\n        ]\n      ],\n      virtual_ip: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'ingress'\n          })\n        ]\n      ],\n      frontend_port: [\n        null,\n        [\n          CdValidators.number(false),\n          CdValidators.requiredIf({\n            service_type: 'ingress'\n          })\n        ]\n      ],\n      monitor_port: [\n        null,\n        [\n          CdValidators.number(false),\n          CdValidators.requiredIf({\n            service_type: 'ingress'\n          })\n        ]\n      ],\n      virtual_interface_networks: [null],\n      ssl_protocols: [this.DEFAULT_SSL_PROTOCOL_ITEM],\n      ssl_ciphers: [\n        null,\n        [\n          CdValidators.custom('invalidPattern', (ciphers: string) => {\n            if (_.isEmpty(ciphers)) {\n              return false;\n            }\n            return !this.SSL_CIPHERS_PATTERN.test(ciphers);\n          })\n        ]\n      ],\n      // RGW, Ingress & iSCSI\n      ssl: [false],\n      ssl_cert: [\n        '',\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'rgw',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.pemCert()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'iscsi',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.sslCert()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'ingress',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.pemCert()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'oauth2-proxy',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.sslCert()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'mgmt-gateway',\n              unmanaged: false,\n              ssl: false\n            },\n            [CdValidators.sslCert()]\n          )\n        ]\n      ],\n      ssl_key: [\n        '',\n        [\n          CdValidators.composeIf(\n            {\n              service_type: 'iscsi',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.sslPrivKey()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'oauth2-proxy',\n              unmanaged: false,\n              ssl: true\n            },\n            [Validators.required, CdValidators.sslPrivKey()]\n          ),\n          CdValidators.composeIf(\n            {\n              service_type: 'mgmt-gateway',\n              unmanaged: false,\n              ssl: false\n            },\n            [CdValidators.sslPrivKey()]\n          )\n        ]\n      ],\n      // mgmt-gateway\n      enable_auth: [null],\n      port: [443, [CdValidators.number(false)]],\n      // snmp-gateway\n      snmp_version: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'snmp-gateway'\n          })\n        ]\n      ],\n      snmp_destination: [\n        null,\n        {\n          validators: [\n            CdValidators.requiredIf({\n              service_type: 'snmp-gateway'\n            }),\n            CdValidators.custom('snmpDestinationPattern', (value: string) => {\n              if (_.isEmpty(value)) {\n                return false;\n              }\n              return !this.SNMP_DESTINATION_PATTERN.test(value);\n            })\n          ]\n        }\n      ],\n      engine_id: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'snmp-gateway'\n          }),\n          CdValidators.custom('snmpEngineIdPattern', (value: string) => {\n            if (_.isEmpty(value)) {\n              return false;\n            }\n            return !this.SNMP_ENGINE_ID_PATTERN.test(value);\n          })\n        ]\n      ],\n      auth_protocol: [\n        'SHA',\n        [\n          CdValidators.requiredIf({\n            service_type: 'snmp-gateway'\n          })\n        ]\n      ],\n      privacy_protocol: [null],\n      snmp_community: [\n        null,\n        [\n          CdValidators.requiredIf({\n            snmp_version: 'V2c'\n          })\n        ]\n      ],\n      snmp_v3_auth_username: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'snmp-gateway'\n          })\n        ]\n      ],\n      snmp_v3_auth_password: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'snmp-gateway'\n          })\n        ]\n      ],\n      snmp_v3_priv_password: [\n        null,\n        [\n          CdValidators.requiredIf({\n            privacy_protocol: { op: '!empty' }\n          })\n        ]\n      ],\n      grafana_port: [null, [CdValidators.number(false)]],\n      grafana_admin_password: [null],\n      // oauth2-proxy\n      provider_display_name: [\n        'My OIDC provider',\n        [\n          CdValidators.requiredIf({\n            service_type: 'oauth2-proxy'\n          })\n        ]\n      ],\n      client_id: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'oauth2-proxy'\n          })\n        ]\n      ],\n      client_secret: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'oauth2-proxy'\n          })\n        ]\n      ],\n      oidc_issuer_url: [\n        null,\n        [\n          CdValidators.requiredIf({\n            service_type: 'oauth2-proxy'\n          }),\n          CdValidators.custom('validUrl', (url: string) => {\n            if (_.isEmpty(url)) {\n              return false;\n            }\n            return !this.OAUTH2_ISSUER_URL_PATTERN.test(url);\n          })\n        ]\n      ],\n      https_address: [null, [CdValidators.oauthAddressTest()]],\n      redirect_url: [null],\n      allowlist_domains: [null]\n    });\n  }\n\n  resolveRoute() {\n    if (this.router.url.includes('services/(modal:create')) {\n      this.pageURL = 'services';\n      this.route.params.subscribe((params: { type: string }) => {\n        if (params?.type) {\n          this.serviceType = params.type;\n          this.serviceForm.get('service_type').setValue(this.serviceType);\n        }\n      });\n    } else if (this.router.url.includes('services/(modal:edit')) {\n      this.editing = true;\n      this.pageURL = 'services';\n      this.route.params.subscribe((params: { type: string; name: string }) => {\n        this.serviceName = params.name;\n        this.serviceType = params.type;\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    this.action = this.actionLabels.CREATE;\n    this.resolveRoute();\n\n    this.cephServiceService\n      .list(new HttpParams({ fromObject: { limit: -1, offset: 0 } }))\n      .observable.subscribe((services: CephServiceSpec[]) => {\n        this.serviceList = services;\n        this.services = services.filter((service: any) =>\n          this.INGRESS_SUPPORTED_SERVICE_TYPES.includes(service.service_type)\n        );\n      });\n\n    this.cephServiceService.getKnownTypes().subscribe((resp: Array<string>) => {\n      // Remove service types:\n      // osd       - This is deployed a different way.\n      // container - This should only be used in the CLI.\n      this.hiddenServices.push('osd', 'container');\n\n      this.serviceTypes = _.difference(resp, this.hiddenServices).sort();\n    });\n    this.hostService.getAllHosts().subscribe((resp: Host[]) => {\n      const options: SelectOption[] = [];\n      _.forEach(resp, (host: Host) => {\n        if (_.get(host, 'sources.orchestrator', false)) {\n          const option = new SelectOption(false, _.get(host, 'hostname'), '');\n          options.push(option);\n        }\n      });\n      this.hosts.options = [...options];\n    });\n    this.hostService.getLabels().subscribe((resp: string[]) => {\n      this.labels = resp;\n    });\n    this.poolService.getList().subscribe((resp: Pool[]) => {\n      this.pools = resp;\n      this.rbdPools = this.pools.filter(this.rbdService.isRBDPool);\n      if (!this.editing && this.serviceType) {\n        this.onServiceTypeChange(this.serviceType);\n      }\n    });\n\n    if (this.editing) {\n      this.action = this.actionLabels.EDIT;\n      this.disableForEditing(this.serviceType);\n      this.cephServiceService\n        .list(new HttpParams({ fromObject: { limit: -1, offset: 0 } }), this.serviceName)\n        .observable.subscribe((response: CephServiceSpec[]) => {\n          const formKeys = ['service_type', 'service_id', 'unmanaged'];\n          formKeys.forEach((keys) => {\n            this.serviceForm.get(keys).setValue(response[0][keys]);\n          });\n          if (!response[0]['unmanaged']) {\n            const placementKey = Object.keys(response[0]['placement'])[0];\n            let placementValue: string;\n            ['hosts', 'label'].indexOf(placementKey) >= 0\n              ? (placementValue = placementKey)\n              : (placementValue = 'hosts');\n            this.serviceForm.get('placement').setValue(placementValue);\n            this.serviceForm.get('count').setValue(response[0]['placement']['count']);\n            if (response[0]?.placement[placementValue]) {\n              this.serviceForm.get(placementValue).setValue(response[0]?.placement[placementValue]);\n            }\n          }\n          switch (this.serviceType) {\n            case 'iscsi':\n              const specKeys = ['pool', 'api_password', 'api_user', 'trusted_ip_list', 'api_port'];\n              specKeys.forEach((key) => {\n                this.serviceForm.get(key).setValue(response[0].spec[key]);\n              });\n              this.serviceForm.get('ssl').setValue(response[0].spec?.api_secure);\n              if (response[0].spec?.api_secure) {\n                this.serviceForm.get('ssl_cert').setValue(response[0].spec?.ssl_cert);\n                this.serviceForm.get('ssl_key').setValue(response[0].spec?.ssl_key);\n              }\n              break;\n            case 'nvmeof':\n              this.serviceForm.get('pool').setValue(response[0].spec.pool);\n              this.serviceForm.get('group').setValue(response[0].spec.group);\n              this.serviceForm.get('enable_mtls').setValue(response[0].spec?.enable_auth);\n              this.serviceForm.get('root_ca_cert').setValue(response[0].spec?.root_ca_cert);\n              this.serviceForm.get('client_cert').setValue(response[0].spec?.client_cert);\n              this.serviceForm.get('client_key').setValue(response[0].spec?.client_key);\n              this.serviceForm.get('server_cert').setValue(response[0].spec?.server_cert);\n              this.serviceForm.get('server_key').setValue(response[0].spec?.server_key);\n              break;\n            case 'rgw':\n              this.serviceForm\n                .get('rgw_frontend_port')\n                .setValue(response[0].spec?.rgw_frontend_port);\n              this.setRgwFields(\n                response[0].spec?.rgw_realm,\n                response[0].spec?.rgw_zonegroup,\n                response[0].spec?.rgw_zone\n              );\n              this.serviceForm.get('ssl').setValue(response[0].spec?.ssl);\n              if (response[0].spec?.ssl) {\n                this.serviceForm\n                  .get('ssl_cert')\n                  .setValue(response[0].spec?.rgw_frontend_ssl_certificate);\n              }\n              break;\n            case 'ingress':\n              const ingressSpecKeys = [\n                'backend_service',\n                'virtual_ip',\n                'frontend_port',\n                'monitor_port',\n                'virtual_interface_networks',\n                'ssl'\n              ];\n              ingressSpecKeys.forEach((key) => {\n                this.serviceForm.get(key).setValue(response[0].spec[key]);\n              });\n              if (response[0].spec?.ssl) {\n                this.serviceForm.get('ssl_cert').setValue(response[0].spec?.ssl_cert);\n                this.serviceForm.get('ssl_key').setValue(response[0].spec?.ssl_key);\n              }\n              break;\n            case 'mgmt-gateway':\n              let hrefSplitted = window.location.href.split(':');\n              this.currentURL = hrefSplitted[0] + hrefSplitted[1];\n              this.port = response[0].spec?.port;\n\n              if (response[0].spec?.ssl_protocols) {\n                let selectedValues: Array<ListItem> = [];\n                for (const value of response[0].spec.ssl_protocols) {\n                  selectedValues.push({ content: value, selected: true });\n                }\n                this.serviceForm.get('ssl_protocols').setValue(selectedValues);\n              }\n              if (response[0].spec?.ssl_ciphers) {\n                this.serviceForm\n                  .get('ssl_ciphers')\n                  .setValue(response[0].spec?.ssl_ciphers.join(':'));\n              }\n              if (response[0].spec?.ssl_cert) {\n                this.serviceForm.get('ssl_cert').setValue(response[0].spec.ssl_cert);\n              }\n              if (response[0].spec?.ssl_key) {\n                this.serviceForm.get('ssl_key').setValue(response[0].spec.ssl_key);\n              }\n              if (response[0].spec?.enable_auth) {\n                this.serviceForm.get('enable_auth').setValue(response[0].spec.enable_auth);\n              }\n              if (response[0].spec?.port) {\n                this.serviceForm.get('port').setValue(response[0].spec.port);\n              }\n              break;\n            case 'smb':\n              const smbSpecKeys = [\n                'cluster_id',\n                'config_uri',\n                'features',\n                'join_sources',\n                'user_sources',\n                'custom_dns',\n                'include_ceph_users'\n              ];\n              smbSpecKeys.forEach((key) => {\n                if (key === 'features') {\n                  if (response[0].spec?.features) {\n                    response[0].spec.features.forEach((feature) => {\n                      this.serviceForm.get(`features.${feature}`).setValue(true);\n                    });\n                  }\n                } else {\n                  this.serviceForm.get(key).setValue(response[0].spec[key]);\n                }\n              });\n              break;\n            case 'snmp-gateway':\n              const snmpCommonSpecKeys = ['snmp_version', 'snmp_destination'];\n              snmpCommonSpecKeys.forEach((key) => {\n                this.serviceForm.get(key).setValue(response[0].spec[key]);\n              });\n              if (this.serviceForm.getValue('snmp_version') === 'V3') {\n                const snmpV3SpecKeys = [\n                  'engine_id',\n                  'auth_protocol',\n                  'privacy_protocol',\n                  'snmp_v3_auth_username',\n                  'snmp_v3_auth_password',\n                  'snmp_v3_priv_password'\n                ];\n                snmpV3SpecKeys.forEach((key) => {\n                  if (key !== null) {\n                    if (\n                      key === 'snmp_v3_auth_username' ||\n                      key === 'snmp_v3_auth_password' ||\n                      key === 'snmp_v3_priv_password'\n                    ) {\n                      this.serviceForm.get(key).setValue(response[0].spec['credentials'][key]);\n                    } else {\n                      this.serviceForm.get(key).setValue(response[0].spec[key]);\n                    }\n                  }\n                });\n              } else {\n                this.serviceForm\n                  .get('snmp_community')\n                  .setValue(response[0].spec['credentials']['snmp_community']);\n              }\n              break;\n            case 'grafana':\n              this.serviceForm.get('grafana_port').setValue(response[0].spec.port);\n              this.serviceForm\n                .get('grafana_admin_password')\n                .setValue(response[0].spec.initial_admin_password);\n              break;\n            case 'oauth2-proxy':\n              const oauth2SpecKeys = [\n                'https_address',\n                'provider_display_name',\n                'client_id',\n                'client_secret',\n                'oidc_issuer_url',\n                'redirect_url',\n                'allowlist_domains'\n              ];\n              oauth2SpecKeys.forEach((key) => {\n                this.serviceForm.get(key).setValue(response[0].spec[key]);\n              });\n              if (response[0].spec?.ssl) {\n                this.serviceForm.get('ssl_cert').setValue(response[0].spec?.ssl_cert);\n                this.serviceForm.get('ssl_key').setValue(response[0].spec?.ssl_key);\n              }\n          }\n        });\n    }\n    this.detectChanges();\n  }\n\n  detectChanges(): void {\n    const service_type = this.serviceForm.get('service_type');\n    if (service_type) {\n      service_type.valueChanges.subscribe((value) => {\n        if (value === 'mgmt-gateway') {\n          const port = this.serviceForm.get('port');\n          if (port) {\n            port.valueChanges.subscribe((_) => {\n              this.showMgmtGatewayMessage = true;\n            });\n          }\n          const ssl_protocols = this.serviceForm.get('ssl_protocols');\n          if (ssl_protocols) {\n            ssl_protocols.valueChanges.subscribe((_) => {\n              this.showMgmtGatewayMessage = true;\n            });\n          }\n          const ssl_ciphers = this.serviceForm.get('ssl_ciphers');\n          if (ssl_ciphers) {\n            ssl_ciphers.valueChanges.subscribe((_) => {\n              this.showMgmtGatewayMessage = true;\n            });\n          }\n        }\n      });\n    }\n  }\n\n  getDefaultsEntitiesForRgw(\n    defaultRealmId: string,\n    defaultZonegroupId: string,\n    defaultZoneId: string\n  ): { defaultRealmName: string; defaultZonegroupName: string; defaultZoneName: string } {\n    const defaultRealm = this.realmList.find((x: { id: string }) => x.id === defaultRealmId);\n    const defaultZonegroup = this.zonegroupList.find(\n      (x: { id: string }) => x.id === defaultZonegroupId\n    );\n    const defaultZone = this.zoneList.find((x: { id: string }) => x.id === defaultZoneId);\n    const defaultRealmName = defaultRealm !== undefined ? defaultRealm.name : null;\n    const defaultZonegroupName = defaultZonegroup !== undefined ? defaultZonegroup.name : 'default';\n    const defaultZoneName = defaultZone !== undefined ? defaultZone.name : 'default';\n    if (defaultZonegroupName === 'default' && !this.zonegroupNames.includes(defaultZonegroupName)) {\n      const defaultZonegroup = new RgwZonegroup();\n      defaultZonegroup.name = 'default';\n      this.zonegroupList.push(defaultZonegroup);\n    }\n    if (defaultZoneName === 'default' && !this.zoneNames.includes(defaultZoneName)) {\n      const defaultZone = new RgwZone();\n      defaultZone.name = 'default';\n      this.zoneList.push(defaultZone);\n    }\n    return {\n      defaultRealmName: defaultRealmName,\n      defaultZonegroupName: defaultZonegroupName,\n      defaultZoneName: defaultZoneName\n    };\n  }\n\n  getDefaultPlacementCount(serviceType: string) {\n    /**\n     * `defaults` from src/pybind/mgr/cephadm/module.py\n     */\n    switch (serviceType) {\n      case 'mon':\n        this.serviceForm.get('count').setValue(5);\n        break;\n      case 'mgr':\n      case 'mds':\n      case 'rgw':\n      case 'ingress':\n      case 'rbd-mirror':\n        this.serviceForm.get('count').setValue(2);\n        break;\n      case 'iscsi':\n      case 'cephfs-mirror':\n      case 'nfs':\n      case 'grafana':\n      case 'alertmanager':\n      case 'prometheus':\n      case 'loki':\n      case 'container':\n      case 'snmp-gateway':\n      case 'elastic-serach':\n      case 'jaeger-collector':\n      case 'jaeger-query':\n      case 'smb':\n      case 'oauth2-proxy':\n      case 'mgmt-gateway':\n        this.serviceForm.get('count').setValue(1);\n        break;\n      default:\n        this.serviceForm.get('count').setValue(null);\n    }\n  }\n\n  setRgwFields(realm_name?: string, zonegroup_name?: string, zone_name?: string) {\n    const observables = [\n      this.rgwRealmService.getAllRealmsInfo(),\n      this.rgwZonegroupService.getAllZonegroupsInfo(),\n      this.rgwZoneService.getAllZonesInfo()\n    ];\n    this.sub = forkJoin(observables).subscribe(\n      (multisiteInfo: [object, object, object]) => {\n        this.multisiteInfo = multisiteInfo;\n        this.realmList =\n          this.multisiteInfo[0] !== undefined && this.multisiteInfo[0].hasOwnProperty('realms')\n            ? this.multisiteInfo[0]['realms']\n            : [];\n        this.zonegroupList =\n          this.multisiteInfo[1] !== undefined && this.multisiteInfo[1].hasOwnProperty('zonegroups')\n            ? this.multisiteInfo[1]['zonegroups']\n            : [];\n        this.zoneList =\n          this.multisiteInfo[2] !== undefined && this.multisiteInfo[2].hasOwnProperty('zones')\n            ? this.multisiteInfo[2]['zones']\n            : [];\n        this.realmNames = this.realmList.map((realm) => {\n          return realm['name'];\n        });\n        this.zonegroupNames = this.zonegroupList.map((zonegroup) => {\n          return zonegroup['name'];\n        });\n        this.zoneNames = this.zoneList.map((zone) => {\n          return zone['name'];\n        });\n        this.defaultRealmId = multisiteInfo[0]['default_realm'];\n        this.defaultZonegroupId = multisiteInfo[1]['default_zonegroup'];\n        this.defaultZoneId = multisiteInfo[2]['default_zone'];\n        this.defaultsInfo = this.getDefaultsEntitiesForRgw(\n          this.defaultRealmId,\n          this.defaultZonegroupId,\n          this.defaultZoneId\n        );\n        if (!this.editing) {\n          this.serviceForm.get('realm_name').setValue(this.defaultsInfo['defaultRealmName']);\n          this.serviceForm\n            .get('zonegroup_name')\n            .setValue(this.defaultsInfo['defaultZonegroupName']);\n          this.serviceForm.get('zone_name').setValue(this.defaultsInfo['defaultZoneName']);\n        } else {\n          if (realm_name && !this.realmNames.includes(realm_name)) {\n            const realm = new RgwRealm();\n            realm.name = realm_name;\n            this.realmList.push(realm);\n          }\n          if (zonegroup_name && !this.zonegroupNames.includes(zonegroup_name)) {\n            const zonegroup = new RgwZonegroup();\n            zonegroup.name = zonegroup_name;\n            this.zonegroupList.push(zonegroup);\n          }\n          if (zone_name && !this.zoneNames.includes(zone_name)) {\n            const zone = new RgwZone();\n            zone.name = zone_name;\n            this.zoneList.push(zone);\n          }\n          if (zonegroup_name === undefined && zone_name === undefined) {\n            zonegroup_name = 'default';\n            zone_name = 'default';\n          }\n          this.serviceForm.get('realm_name').setValue(realm_name);\n          this.serviceForm.get('zonegroup_name').setValue(zonegroup_name);\n          this.serviceForm.get('zone_name').setValue(zone_name);\n        }\n        if (this.realmList.length === 0) {\n          this.showRealmCreationForm = true;\n        } else {\n          this.showRealmCreationForm = false;\n        }\n      },\n      (_error) => {\n        const defaultZone = new RgwZone();\n        defaultZone.name = 'default';\n        const defaultZonegroup = new RgwZonegroup();\n        defaultZonegroup.name = 'default';\n        this.zoneList.push(defaultZone);\n        this.zonegroupList.push(defaultZonegroup);\n      }\n    );\n  }\n\n  setNvmeServiceId() {\n    const pool = this.serviceForm.get('pool').value;\n    const group = this.serviceForm.get('group').value;\n    if (pool && group) {\n      this.serviceForm.get('service_id').setValue(`${pool}.${group}`);\n    } else if (pool) {\n      this.serviceForm.get('service_id').setValue(pool);\n    } else if (group) {\n      this.serviceForm.get('service_id').setValue(group);\n    } else {\n      this.serviceForm.get('service_id').setValue(null);\n    }\n  }\n\n  setNvmeDefaultPool() {\n    const defaultPool =\n      this.rbdPools?.find((p: Pool) => p.pool_name === 'rbd')?.pool_name ||\n      this.rbdPools?.[0].pool_name;\n    this.serviceForm.get('pool').setValue(defaultPool);\n  }\n\n  requiresServiceId(serviceType: string) {\n    return ['mds', 'rgw', 'nfs', 'iscsi', 'nvmeof', 'smb', 'ingress'].includes(serviceType);\n  }\n\n  setServiceId(serviceId: string): void {\n    const requiresServiceId: boolean = this.requiresServiceId(serviceId);\n    if (requiresServiceId && serviceId === 'nvmeof') {\n      this.setNvmeDefaultPool();\n      this.setNvmeServiceId();\n    } else if (requiresServiceId) {\n      this.serviceForm.get('service_id').setValue(null);\n    } else {\n      this.serviceForm.get('service_id').setValue(serviceId);\n    }\n  }\n\n  onServiceTypeChange(selectedServiceType: string) {\n    this.setServiceId(selectedServiceType);\n\n    this.serviceIds = this.serviceList\n      ?.filter((service) => service['service_type'] === selectedServiceType)\n      .map((service) => service['service_id']);\n\n    this.getDefaultPlacementCount(selectedServiceType);\n\n    if (selectedServiceType === 'rgw') {\n      this.setRgwFields();\n    }\n    if (selectedServiceType === 'mgmt-gateway') {\n      let hrefSplitted = window.location.href.split(':');\n      this.currentURL = hrefSplitted[0] + hrefSplitted[1];\n      // mgmt-gateway lacks HA for now\n      this.serviceForm.get('count').disable();\n    } else {\n      this.serviceForm.get('count').enable();\n    }\n  }\n\n  onPlacementChange(selected: string) {\n    if (selected === 'label') {\n      this.serviceForm.get('count').setValue(null);\n    }\n  }\n\n  disableForEditing(serviceType: string) {\n    const disableForEditKeys = ['service_type', 'service_id'];\n    disableForEditKeys.forEach((key) => {\n      this.serviceForm.get(key).disable();\n    });\n    switch (serviceType) {\n      case 'ingress':\n        this.serviceForm.get('backend_service').disable();\n        break;\n      case 'nvmeof':\n        this.serviceForm.get('pool').disable();\n        this.serviceForm.get('group').disable();\n        break;\n    }\n  }\n\n  searchLabels = (text$: Observable<string>) => {\n    return merge(\n      text$.pipe(debounceTime(200), distinctUntilChanged()),\n      this.labelFocus,\n      this.labelClick.pipe(filter(() => !this.typeahead.isPopupOpen()))\n    ).pipe(\n      map((value) =>\n        this.labels\n          .filter((label: string) => label.toLowerCase().indexOf(value.toLowerCase()) > -1)\n          .slice(0, 10)\n      )\n    );\n  };\n\n  fileUpload(files: FileList, controlName: string) {\n    const file: File = files[0];\n    const reader = new FileReader();\n    reader.addEventListener('load', (event: ProgressEvent<FileReader>) => {\n      const control: AbstractControl = this.serviceForm.get(controlName);\n      control.setValue(event.target.result);\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n    reader.readAsText(file, 'utf8');\n  }\n\n  prePopulateId() {\n    const control: AbstractControl = this.serviceForm.get('service_id');\n    const backendService = this.serviceForm.getValue('backend_service');\n    // Set Id as read-only\n    control.reset({ value: backendService, disabled: true });\n  }\n\n  onSubmit() {\n    const self = this;\n    const values: object = this.serviceForm.getRawValue();\n    const serviceType: string = values['service_type'];\n    let taskUrl = `service/${URLVerbs.CREATE}`;\n    if (this.editing) {\n      taskUrl = `service/${URLVerbs.EDIT}`;\n    }\n    const serviceSpec: object = {\n      service_type: serviceType,\n      placement: {},\n      unmanaged: values['unmanaged']\n    };\n    if (serviceType === 'rgw') {\n      serviceSpec['rgw_realm'] = values['realm_name'] ? values['realm_name'] : null;\n      serviceSpec['rgw_zonegroup'] =\n        values['zonegroup_name'] !== 'default' ? values['zonegroup_name'] : null;\n      serviceSpec['rgw_zone'] = values['zone_name'] !== 'default' ? values['zone_name'] : null;\n    }\n\n    const serviceId: string = values['service_id'];\n    let serviceName: string = serviceType;\n    if (_.isString(serviceId) && !_.isEmpty(serviceId) && serviceId !== serviceType) {\n      serviceName = `${serviceType}.${serviceId}`;\n      serviceSpec['service_id'] = serviceId;\n    }\n\n    // These services has some fields to be\n    // filled out even if unmanaged is true\n    switch (serviceType) {\n      case 'ingress':\n        serviceSpec['backend_service'] = values['backend_service'];\n        serviceSpec['service_id'] = values['backend_service'];\n        if (_.isNumber(values['frontend_port']) && values['frontend_port'] > 0) {\n          serviceSpec['frontend_port'] = values['frontend_port'];\n        }\n        if (_.isString(values['virtual_ip']) && !_.isEmpty(values['virtual_ip'])) {\n          serviceSpec['virtual_ip'] = values['virtual_ip'].trim();\n        }\n        if (_.isNumber(values['monitor_port']) && values['monitor_port'] > 0) {\n          serviceSpec['monitor_port'] = values['monitor_port'];\n        }\n        break;\n\n      case 'nvmeof':\n        serviceSpec['pool'] = values['pool'];\n        serviceSpec['group'] = values['group'];\n        serviceSpec['enable_auth'] = values['enable_mtls'];\n        if (values['enable_mtls']) {\n          serviceSpec['root_ca_cert'] = values['root_ca_cert'];\n          serviceSpec['client_cert'] = values['client_cert'];\n          serviceSpec['client_key'] = values['client_key'];\n          serviceSpec['server_cert'] = values['server_cert'];\n          serviceSpec['server_key'] = values['server_key'];\n        }\n        break;\n      case 'iscsi':\n        serviceSpec['pool'] = values['pool'];\n        break;\n\n      case 'smb':\n        serviceSpec['cluster_id'] = values['cluster_id']?.trim();\n        serviceSpec['config_uri'] = values['config_uri']?.trim();\n        for (const feature in values['features']) {\n          if (values['features'][feature]) {\n            (serviceSpec['features'] = serviceSpec['features'] || []).push(feature);\n          }\n        }\n        serviceSpec['custom_dns'] = values['custom_dns']?.trim();\n        serviceSpec['join_sources'] = values['join_sources']?.trim();\n        serviceSpec['user_sources'] = values['user_sources']?.trim();\n        serviceSpec['include_ceph_users'] = values['include_ceph_users']?.trim();\n        break;\n\n      case 'snmp-gateway':\n        serviceSpec['credentials'] = {};\n        serviceSpec['snmp_version'] = values['snmp_version'];\n        serviceSpec['snmp_destination'] = values['snmp_destination'];\n        if (values['snmp_version'] === 'V3') {\n          serviceSpec['engine_id'] = values['engine_id'];\n          serviceSpec['auth_protocol'] = values['auth_protocol'];\n          serviceSpec['credentials']['snmp_v3_auth_username'] = values['snmp_v3_auth_username'];\n          serviceSpec['credentials']['snmp_v3_auth_password'] = values['snmp_v3_auth_password'];\n          if (values['privacy_protocol'] !== null) {\n            serviceSpec['privacy_protocol'] = values['privacy_protocol'];\n            serviceSpec['credentials']['snmp_v3_priv_password'] = values['snmp_v3_priv_password'];\n          }\n        } else {\n          serviceSpec['credentials']['snmp_community'] = values['snmp_community'];\n        }\n        break;\n    }\n\n    if (!values['unmanaged']) {\n      switch (values['placement']) {\n        case 'hosts':\n          if (values['hosts'].length > 0) {\n            serviceSpec['placement']['hosts'] = values['hosts'];\n          }\n          break;\n        case 'label':\n          serviceSpec['placement']['label'] = values['label'];\n          break;\n      }\n      if (_.isNumber(values['count']) && values['count'] > 0) {\n        serviceSpec['placement']['count'] = values['count'];\n      }\n      switch (serviceType) {\n        case 'rgw':\n          if (_.isNumber(values['rgw_frontend_port']) && values['rgw_frontend_port'] > 0) {\n            serviceSpec['rgw_frontend_port'] = values['rgw_frontend_port'];\n          }\n          serviceSpec['ssl'] = values['ssl'];\n          if (values['ssl']) {\n            serviceSpec['rgw_frontend_ssl_certificate'] = values['ssl_cert']?.trim();\n          }\n          break;\n        case 'iscsi':\n          if (_.isString(values['trusted_ip_list']) && !_.isEmpty(values['trusted_ip_list'])) {\n            serviceSpec['trusted_ip_list'] = values['trusted_ip_list'].trim();\n          }\n          if (_.isNumber(values['api_port']) && values['api_port'] > 0) {\n            serviceSpec['api_port'] = values['api_port'];\n          }\n          serviceSpec['api_user'] = values['api_user'];\n          serviceSpec['api_password'] = values['api_password'];\n          serviceSpec['api_secure'] = values['ssl'];\n          if (values['ssl']) {\n            serviceSpec['ssl_cert'] = values['ssl_cert']?.trim();\n            serviceSpec['ssl_key'] = values['ssl_key']?.trim();\n          }\n          break;\n        case 'ingress':\n          serviceSpec['ssl'] = values['ssl'];\n          if (values['ssl']) {\n            serviceSpec['ssl_cert'] = values['ssl_cert']?.trim();\n            serviceSpec['ssl_key'] = values['ssl_key']?.trim();\n          }\n          serviceSpec['virtual_interface_networks'] = values['virtual_interface_networks'];\n          break;\n        case 'mgmt-gateway':\n          serviceSpec['ssl_cert'] = values['ssl_cert']?.trim();\n          serviceSpec['ssl_key'] = values['ssl_key']?.trim();\n          serviceSpec['enable_auth'] = values['enable_auth'];\n          serviceSpec['port'] = values['port'];\n          if (serviceSpec['port'] === (443 || 80)) {\n            // omit port default values due to issues with redirect_url on the backend\n            delete serviceSpec['port'];\n          }\n          serviceSpec['ssl_protocols'] = [];\n          if (values['ssl_protocols'] != this.DEFAULT_SSL_PROTOCOL_ITEM) {\n            for (const key of Object.keys(values['ssl_protocols'])) {\n              serviceSpec['ssl_protocols'].push(values['ssl_protocols'][key]['content']);\n            }\n          }\n          serviceSpec['ssl_ciphers'] = values['ssl_ciphers']?.trim().split(':');\n          break;\n        case 'grafana':\n          serviceSpec['port'] = values['grafana_port'];\n          serviceSpec['initial_admin_password'] = values['grafana_admin_password'];\n          break;\n        case 'oauth2-proxy':\n          serviceSpec['provider_display_name'] = values['provider_display_name']?.trim();\n          serviceSpec['client_id'] = values['client_id']?.trim();\n          serviceSpec['client_secret'] = values['client_secret']?.trim();\n          serviceSpec['oidc_issuer_url'] = values['oidc_issuer_url']?.trim();\n          serviceSpec['https_address'] = values['https_address']?.trim();\n          serviceSpec['redirect_url'] = values['redirect_url']?.trim();\n          serviceSpec['allowlist_domains'] = values['allowlist_domains']\n            .split(',')\n            .map((domain: string) => {\n              return domain.trim();\n            });\n          if (values['ssl']) {\n            serviceSpec['ssl_cert'] = values['ssl_cert']?.trim();\n            serviceSpec['ssl_key'] = values['ssl_key']?.trim();\n          }\n          break;\n      }\n    }\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          service_name: serviceName\n        }),\n        call: this.editing\n          ? this.cephServiceService.update(serviceSpec)\n          : this.cephServiceService.create(serviceSpec)\n      })\n      .subscribe({\n        error() {\n          self.serviceForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.pageURL === 'services'\n            ? this.router.navigate([this.pageURL, { outlets: { modal: null } }])\n            : this.activeModal.close();\n        }\n      });\n  }\n\n  clearValidations() {\n    const snmpVersion = this.serviceForm.getValue('snmp_version');\n    const privacyProtocol = this.serviceForm.getValue('privacy_protocol');\n    if (snmpVersion === 'V3') {\n      this.serviceForm.get('snmp_community').clearValidators();\n    } else {\n      this.serviceForm.get('engine_id').clearValidators();\n      this.serviceForm.get('auth_protocol').clearValidators();\n      this.serviceForm.get('privacy_protocol').clearValidators();\n      this.serviceForm.get('snmp_v3_auth_username').clearValidators();\n      this.serviceForm.get('snmp_v3_auth_password').clearValidators();\n    }\n    if (privacyProtocol === null) {\n      this.serviceForm.get('snmp_v3_priv_password').clearValidators();\n    }\n  }\n\n  createMultisiteSetup() {\n    this.bsModalRef = this.modalService.show(CreateRgwServiceEntitiesComponent, {\n      size: 'lg'\n    });\n    this.bsModalRef.componentInstance.submitAction.subscribe(() => {\n      this.setRgwFields();\n    });\n  }\n}\n","<cd-alert-panel *ngIf=\"missingFeatures; else elseBlock\"\n                type=\"info\"\n                i18n>The feature is not supported in the current Orchestrator.</cd-alert-panel>\n\n<ng-template #elseBlock>\n  <cd-alert-panel type=\"info\"\n                  i18n>Orchestrator is not available.\n    Please consult the&nbsp;<cd-doc section=\"orch\"></cd-doc>&nbsp;on how to configure and\n    enable the functionality.</cd-alert-panel>\n</ng-template>\n","import { Component, Input } from '@angular/core';\n\nimport { OrchestratorFeature } from '~/app/shared/models/orchestrator.enum';\n\n@Component({\n  selector: 'cd-orchestrator-doc-panel',\n  templateUrl: './orchestrator-doc-panel.component.html',\n  styleUrls: ['./orchestrator-doc-panel.component.scss']\n})\nexport class OrchestratorDocPanelComponent {\n  @Input()\n  missingFeatures: OrchestratorFeature[];\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { cdEncode } from '~/app/shared/decorators/cd-encode';\nimport { Daemon } from '../models/daemon.interface';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaemonService {\n  private url = 'api/daemon';\n\n  constructor(private http: HttpClient) {}\n\n  action(daemonName: string, actionType: string) {\n    return this.http.put(\n      `${this.url}/${daemonName}`,\n      {\n        action: actionType,\n        container_image: null\n      },\n      {\n        headers: { Accept: 'application/vnd.ceph.api.v0.1+json' },\n        observe: 'response'\n      }\n    );\n  }\n\n  list(daemonTypes: string[]): Observable<Daemon[]> {\n    return this.http.get<Daemon[]>(this.url, {\n      params: { daemon_types: daemonTypes }\n    });\n  }\n}\n","<cd-orchestrator-doc-panel *ngIf=\"showDocPanel\"></cd-orchestrator-doc-panel>\n\n<div *ngIf=\"flag === 'hostDetails'; else serviceDetailsTpl\">\n  <ng-container *ngTemplateOutlet=\"serviceDaemonDetailsTpl\"></ng-container>\n</div>\n\n<ng-template #serviceDetailsTpl>\n  <ng-container>\n    <nav ngbNav\n         #nav=\"ngbNav\"\n         class=\"nav-tabs\"\n         cdStatefulTab=\"service-details\">\n      <ng-container ngbNavItem=\"details\">\n        <a ngbNavLink\n           i18n>Daemons</a>\n        <ng-template ngbNavContent>\n          <ng-container *ngTemplateOutlet=\"serviceDaemonDetailsTpl\"></ng-container>\n        </ng-template>\n      </ng-container>\n      <ng-container ngbNavItem=\"service_events\">\n        <a ngbNavLink\n           i18n>Service Events</a>\n        <ng-template ngbNavContent>\n          <cd-table *ngIf=\"hasOrchestrator\"\n                    #serviceTable\n                    [data]=\"services\"\n                    [columns]=\"serviceColumns\"\n                    columnMode=\"flex\"\n                    (fetchData)=\"getServices($event)\">\n          </cd-table>\n        </ng-template>\n      </ng-container>\n    </nav>\n    <div [ngbNavOutlet]=\"nav\"></div>\n  </ng-container>\n</ng-template>\n\n<ng-template #statusTpl\n             let-row=\"data.row\">\n  <span class=\"badge\"\n        [ngClass]=\"row | pipeFunction:getStatusClass\">\n    {{ row.status_desc }}\n  </span>\n</ng-template>\n\n<ng-template #listTpl\n             let-events=\"data.value\">\n  <ul class=\"list-group list-group-flush\"\n      *ngIf=\"events?.length else noEventsAvailable\">\n    <li class=\"list-group-item\"\n        *ngFor=\"let event of events; trackBy:trackByFn\">\n      <b>{{ event.created | relativeDate }} - </b>\n      <span class=\"badge badge-info\">{{ event.subject }}</span><br>\n      <span *ngIf=\"event.level === 'INFO'\">\n        <svg [cdsIcon]=\"icons.infoCircle\"\n             [size]=\"icons.size16\"\n             class=\"cds-info-color\"></svg>\n      </span>\n      <span *ngIf=\"event.level === 'ERROR'\">\n        <svg [cdsIcon]=\"icons.warning\"\n             [size]=\"icons.size16\"\n             class=\"cds-warning-color\"></svg>\n      </span>\n      {{ event.message }}\n    </li>\n  </ul>\n  <ng-template #noEventsAvailable>\n    <div class=\"list-group-item\">\n      <span>No data available</span>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #serviceDaemonDetailsTpl>\n  <cd-table *ngIf=\"hasOrchestrator\"\n            #daemonsTable\n            [data]=\"daemons\"\n            selectionType=\"single\"\n            [columns]=\"columns\"\n            columnMode=\"flex\"\n            identifier=\"daemon_name\"\n            (fetchData)=\"getDaemons($event)\"\n            (updateSelection)=\"updateSelection($event)\">\n    <cd-table-actions id=\"service-daemon-list-actions\"\n                      class=\"table-actions\"\n                      [selection]=\"selection\"\n                      [permission]=\"permissions.hosts\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </cd-table>\n</ng-template>\n\n<ng-template #cpuTpl\n             let-row=\"data.row\">\n  <cd-usage-bar [total]=\"total\"\n                [calculatePerc]=\"false\"\n                [used]=\"row.cpu_percentage\"\n                [isBinary]=\"false\">\n  </cd-usage-bar>\n</ng-template>\n","import { HttpParams } from '@angular/common/http';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { DaemonService } from '~/app/shared/api/daemon.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Daemon } from '~/app/shared/models/daemon.interface';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { RelativeDatePipe } from '~/app/shared/pipes/relative-date.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-service-daemon-list',\n  templateUrl: './service-daemon-list.component.html',\n  styleUrls: ['./service-daemon-list.component.scss']\n})\nexport class ServiceDaemonListComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @ViewChild('statusTpl', { static: true })\n  statusTpl: TemplateRef<any>;\n\n  @ViewChild('listTpl', { static: true })\n  listTpl: TemplateRef<any>;\n\n  @ViewChild('cpuTpl', { static: true })\n  cpuTpl: TemplateRef<any>;\n\n  @ViewChildren('daemonsTable')\n  daemonsTableTpls: QueryList<TemplateRef<TableComponent>>;\n\n  @Input()\n  serviceName?: string;\n\n  @Input()\n  hostname?: string;\n\n  @Input()\n  hiddenColumns: string[] = [];\n\n  @Input()\n  flag?: string;\n\n  total = 100;\n\n  warningThreshold = 0.8;\n\n  errorThreshold = 0.9;\n\n  icons = Icons;\n\n  daemons: Daemon[] = [];\n  services: Array<CephServiceSpec> = [];\n  columns: CdTableColumn[] = [];\n  serviceColumns: CdTableColumn[] = [];\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permissions: Permissions;\n\n  hasOrchestrator = false;\n  showDocPanel = false;\n\n  private daemonsTable: TableComponent;\n  private daemonsTableTplsSub: Subscription;\n  private serviceSub: Subscription;\n\n  constructor(\n    private hostService: HostService,\n    private cephServiceService: CephServiceService,\n    private orchService: OrchestratorService,\n    private relativeDatePipe: RelativeDatePipe,\n    private dimlessBinary: DimlessBinaryPipe,\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private daemonService: DaemonService,\n    private notificationService: NotificationService,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.permissions = this.authStorageService.getPermissions();\n    this.tableActions = [\n      {\n        permission: 'update',\n        icon: Icons.start,\n        click: () => this.daemonAction('start'),\n        name: this.actionLabels.START,\n        disable: () => this.actionDisabled('start')\n      },\n      {\n        permission: 'update',\n        icon: Icons.stop,\n        click: () => this.daemonAction('stop'),\n        name: this.actionLabels.STOP,\n        disable: () => this.actionDisabled('stop')\n      },\n      {\n        permission: 'update',\n        icon: Icons.restart,\n        click: () => this.daemonAction('restart'),\n        name: this.actionLabels.RESTART,\n        disable: () => this.actionDisabled('restart')\n      },\n      {\n        permission: 'update',\n        icon: Icons.deploy,\n        click: () => this.daemonAction('redeploy'),\n        name: this.actionLabels.REDEPLOY,\n        disable: () => this.actionDisabled('redeploy')\n      }\n    ];\n    this.columns = [\n      {\n        name: $localize`Hostname`,\n        prop: 'hostname',\n        flexGrow: 2,\n        filterable: true\n      },\n      {\n        name: $localize`Daemon name`,\n        prop: 'daemon_name',\n        flexGrow: 1,\n        filterable: true\n      },\n      {\n        name: $localize`Version`,\n        prop: 'version',\n        flexGrow: 1,\n        filterable: true\n      },\n      {\n        name: $localize`Status`,\n        prop: 'status_desc',\n        flexGrow: 1,\n        filterable: true,\n        cellTemplate: this.statusTpl\n      },\n      {\n        name: $localize`Last Refreshed`,\n        prop: 'last_refresh',\n        pipe: this.relativeDatePipe,\n        flexGrow: 1\n      },\n      {\n        name: $localize`CPU Usage`,\n        prop: 'cpu_percentage',\n        flexGrow: 1,\n        cellTemplate: this.cpuTpl\n      },\n      {\n        name: $localize`Memory Usage`,\n        prop: 'memory_usage',\n        flexGrow: 1,\n        pipe: this.dimlessBinary,\n        cellClass: 'text-right'\n      },\n      {\n        name: $localize`Daemon Events`,\n        prop: 'events',\n        flexGrow: 2,\n        cellTemplate: this.listTpl\n      }\n    ];\n\n    this.serviceColumns = [\n      {\n        name: $localize`Service Events`,\n        prop: 'events',\n        flexGrow: 5,\n        cellTemplate: this.listTpl\n      }\n    ];\n\n    this.orchService.status().subscribe((data: { available: boolean }) => {\n      this.hasOrchestrator = data.available;\n      this.showDocPanel = !data.available;\n    });\n\n    this.columns = this.columns.filter((col: any) => {\n      return !this.hiddenColumns.includes(col.prop);\n    });\n\n    setTimeout(() => {\n      this.cdRef.detectChanges();\n    }, 1000);\n  }\n\n  ngOnChanges() {\n    if (!_.isUndefined(this.daemonsTable)) {\n      this.daemonsTable.reloadData();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.daemonsTableTplsSub = this.daemonsTableTpls.changes.subscribe(\n      (tableRefs: QueryList<TableComponent>) => {\n        this.daemonsTable = tableRefs.first;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.daemonsTableTplsSub) {\n      this.daemonsTableTplsSub.unsubscribe();\n    }\n    if (this.serviceSub) {\n      this.serviceSub.unsubscribe();\n    }\n  }\n\n  getStatusClass(row: Daemon): string {\n    return _.get(\n      {\n        '-1': 'badge-danger',\n        '0': 'badge-warning',\n        '1': 'badge-success'\n      },\n      row.status,\n      'badge-dark'\n    );\n  }\n\n  getDaemons(context: CdTableFetchDataContext) {\n    let observable: Observable<Daemon[]>;\n    if (this.hostname) {\n      observable = this.hostService.getDaemons(this.hostname);\n    } else if (this.serviceName) {\n      observable = this.cephServiceService.getDaemons(this.serviceName);\n    } else {\n      this.daemons = [];\n      return;\n    }\n    observable.subscribe(\n      (daemons: Daemon[]) => {\n        this.daemons = daemons;\n        this.sortDaemonEvents();\n      },\n      () => {\n        this.daemons = [];\n        context.error();\n      }\n    );\n  }\n\n  sortDaemonEvents() {\n    this.daemons.forEach((daemon: any) => {\n      daemon.events?.sort((event1: any, event2: any) => {\n        return new Date(event2.created).getTime() - new Date(event1.created).getTime();\n      });\n    });\n  }\n  getServices(context: CdTableFetchDataContext) {\n    this.serviceSub = this.cephServiceService\n      .list(new HttpParams({ fromObject: { limit: -1, offset: 0 } }), this.serviceName)\n      .observable.subscribe(\n        (services: CephServiceSpec[]) => {\n          this.services = services;\n        },\n        () => {\n          this.services = [];\n          context.error();\n        }\n      );\n  }\n\n  trackByFn(_index: any, item: any) {\n    return item.created;\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  daemonAction(actionType: string) {\n    this.daemonService\n      .action(this.selection.first()?.daemon_name, actionType)\n      .pipe(take(1))\n      .subscribe({\n        next: (resp) => {\n          this.notificationService.show(\n            NotificationType.success,\n            `Daemon ${actionType} scheduled`,\n            resp.body.toString()\n          );\n        },\n        error: (resp) => {\n          this.notificationService.show(\n            NotificationType.error,\n            'Daemon action failed',\n            resp.body.toString()\n          );\n        }\n      });\n  }\n\n  actionDisabled(actionType: string) {\n    if (this.selection?.hasSelection) {\n      const daemon = this.selection.selected[0];\n      if (daemon.daemon_type === 'mon' || daemon.daemon_type === 'mgr') {\n        return true; // don't allow actions on mon and mgr, dashboard requires them.\n      }\n      switch (actionType) {\n        case 'start':\n          if (daemon.status_desc === 'running') {\n            return true;\n          }\n          break;\n        case 'stop':\n          if (daemon.status_desc === 'stopped') {\n            return true;\n          }\n          break;\n      }\n      return false;\n    }\n    return true; // if no selection then disable everything\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <cd-service-daemon-list [serviceName]=\"selection['service_name']\">\n  </cd-service-daemon-list>\n</ng-container>\n","import { Component, Input } from '@angular/core';\n\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permissions } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-service-details',\n  templateUrl: './service-details.component.html',\n  styleUrls: ['./service-details.component.scss']\n})\nexport class ServiceDetailsComponent {\n  @Input()\n  permissions: Permissions;\n\n  @Input()\n  selection: CdTableSelection;\n}\n","<cd-orchestrator-doc-panel *ngIf=\"showDocPanel\"></cd-orchestrator-doc-panel>\n<ng-container *ngIf=\"orchStatus?.available\">\n  <cd-table [data]=\"services\"\n            [columns]=\"columns\"\n            identifier=\"service_name\"\n            forceIdentifier=\"true\"\n            columnMode=\"flex\"\n            selectionType=\"single\"\n            [autoReload]=\"5000\"\n            (fetchData)=\"getServices($event)\"\n            [hasDetails]=\"hasDetails\"\n            [serverSide]=\"true\"\n            [count]=\"count\"\n            (setExpandedRow)=\"setExpandedRow($event)\"\n            (updateSelection)=\"updateSelection($event)\">\n    <cd-table-actions class=\"table-actions\"\n                      [permission]=\"permissions.hosts\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n    <cd-service-details *cdTableDetail\n                        [permissions]=\"permissions\"\n                        [selection]=\"expandedRow\">\n    </cd-service-details>\n  </cd-table>\n</ng-container>\n<router-outlet name=\"modal\"></router-outlet>\n\n\n<ng-template #runningTpl\n             let-value=\"data.value\">\n  <span ngbTooltip=\"Service instances running out of the total number of services requested.\">\n    {{ value.running }} / {{ value.size }}\n  </span>\n  <svg  *ngIf=\"value.running == 0 || value.size == 0\"\n        [cdsIcon]=\"icons.warning\"\n        [size]=\"icons.size16\"\n        class=\"cds-warning-color\"></svg>\n</ng-template>\n\n<ng-template #urlTpl\n             let-row=\"data.row\">\n  <ng-container *ngIf=\"serviceUrls[row.service_type] else noUrl\">\n    <a *ngIf=\"!isMgmtGateway else mgmtGateway\"\n       target=\"_blank\"\n       [href]=\"serviceUrls[row.service_type]\">\n      {{ row.service_name }}\n      <svg [cdsIcon]=\"icons.launch\"\n           [size]=\"icons.size16\"\n           class=\"cds-info-color\"></svg>\n    </a>\n\n    <ng-template #mgmtGateway>\n      <a target=\"_blank\"\n         [href]=\"row.service_type\">\n        {{ row.service_name }}\n        <svg [cdsIcon]=\"icons.launch\"\n             [size]=\"icons.size16\"\n             class=\"cds-info-color\"></svg>\n      </a>\n    </ng-template>\n  </ng-container>\n  <ng-template #noUrl>{{row.service_name}}</ng-template>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { delay } from 'rxjs/operators';\n\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { OrchestratorFeature } from '~/app/shared/models/orchestrator.enum';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\nimport { RelativeDatePipe } from '~/app/shared/pipes/relative-date.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { PlacementPipe } from './placement.pipe';\nimport { ServiceFormComponent } from './service-form/service-form.component';\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\n\nconst BASE_URL = 'services';\n\n@Component({\n  selector: 'cd-services',\n  templateUrl: './services.component.html',\n  styleUrls: ['./services.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class ServicesComponent extends ListWithDetails implements OnChanges, OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('runningTpl', { static: true })\n  public runningTpl: TemplateRef<any>;\n  @ViewChild('urlTpl', { static: true })\n  public urlTpl: TemplateRef<any>;\n\n  @Input() hostname: string;\n\n  // Do not display these columns\n  @Input() hiddenColumns: string[] = [];\n\n  @Input() hiddenServices: string[] = [];\n\n  @Input() hasDetails = true;\n\n  @Input() routedModal = true;\n\n  permissions: Permissions;\n  tableActions: CdTableAction[];\n  showDocPanel = false;\n  count = 0;\n  bsModalRef: NgbModalRef;\n\n  orchStatus: OrchestratorStatus;\n  actionOrchFeatures = {\n    create: [OrchestratorFeature.SERVICE_CREATE],\n    update: [OrchestratorFeature.SERVICE_EDIT],\n    delete: [OrchestratorFeature.SERVICE_DELETE]\n  };\n\n  columns: Array<CdTableColumn> = [];\n  services: Array<CephServiceSpec> = [];\n  isLoadingServices = false;\n  selection: CdTableSelection = new CdTableSelection();\n  icons = Icons;\n  serviceUrls = { grafana: '', prometheus: '', alertmanager: '' };\n  isMgmtGateway: boolean = false;\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalService,\n    private orchService: OrchestratorService,\n    private cephServiceService: CephServiceService,\n    private relativeDatePipe: RelativeDatePipe,\n    private taskWrapperService: TaskWrapperService,\n    private router: Router,\n    private settingsService: SettingsService,\n    private cdsModalService: ModalCdsService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.openModal(),\n        name: this.actionLabels.CREATE,\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n        // disable: (selection: CdTableSelection) => this.getDisable('create', selection)\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.openModal(true),\n        name: this.actionLabels.EDIT,\n        disable: (selection: CdTableSelection) => this.getDisable('update', selection)\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteAction(),\n        name: this.actionLabels.DELETE,\n        disable: (selection: CdTableSelection) => this.getDisable('delete', selection)\n      }\n    ];\n  }\n\n  openModal(edit = false) {\n    if (this.routedModal) {\n      edit\n        ? this.router.navigate([\n            BASE_URL,\n            {\n              outlets: {\n                modal: [\n                  URLVerbs.EDIT,\n                  this.selection.first().service_type,\n                  this.selection.first().service_name\n                ]\n              }\n            }\n          ])\n        : this.router.navigate([BASE_URL, { outlets: { modal: [URLVerbs.CREATE] } }]);\n    } else {\n      let initialState = {};\n      edit\n        ? (initialState = {\n            serviceName: this.selection.first()?.service_name,\n            serviceType: this.selection?.first()?.service_type,\n            hiddenServices: this.hiddenServices,\n            editing: edit\n          })\n        : (initialState = {\n            hiddenServices: this.hiddenServices,\n            editing: edit\n          });\n      this.bsModalRef = this.modalService.show(ServiceFormComponent, initialState, { size: 'lg' });\n    }\n  }\n\n  ngOnInit() {\n    const columns = [\n      {\n        name: $localize`Service`,\n        prop: 'service_name',\n        flexGrow: 1,\n        cellTemplate: this.urlTpl\n      },\n      {\n        name: $localize`Placement`,\n        prop: '',\n        pipe: new PlacementPipe(),\n        flexGrow: 2\n      },\n      {\n        name: $localize`Running`,\n        prop: 'status',\n        flexGrow: 1,\n        cellTemplate: this.runningTpl\n      },\n      {\n        name: $localize`Last Refreshed`,\n        prop: 'status.last_refresh',\n        pipe: this.relativeDatePipe,\n        flexGrow: 1\n      },\n      {\n        name: $localize`Ports`,\n        prop: 'status.ports',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.map,\n        customTemplateConfig: {\n          undefined: '-',\n          '': '-'\n        }\n      }\n    ];\n\n    this.columns = columns.filter((col: any) => {\n      return !this.hiddenColumns.includes(col.prop);\n    });\n\n    this.orchService.status().subscribe((status: OrchestratorStatus) => {\n      this.orchStatus = status;\n      this.showDocPanel = !status.available;\n    });\n\n    if (!this.isMgmtGateway) {\n      this.configureServiceUrl('api/grafana/url', 'grafana');\n      this.configureServiceUrl('ui-api/prometheus/prometheus-api-host', 'prometheus');\n      this.configureServiceUrl('ui-api/prometheus/alertmanager-api-host', 'alertmanager');\n    }\n  }\n\n  ngOnChanges() {\n    if (this.orchStatus?.available) {\n      this.services = [];\n      this.table.reloadData();\n    }\n  }\n\n  getDisable(\n    action: 'create' | 'update' | 'delete',\n    selection: CdTableSelection\n  ): boolean | string {\n    if (action === 'delete') {\n      if (!selection?.hasSingleSelection) {\n        return true;\n      }\n    }\n    if (action === 'update') {\n      const disableEditServices = ['osd', 'container'];\n      if (disableEditServices.indexOf(this.selection.first()?.service_type) >= 0) {\n        return true;\n      }\n    }\n    return this.orchService.getTableActionDisableDesc(\n      this.orchStatus,\n      this.actionOrchFeatures[action]\n    );\n  }\n\n  getServices(context: CdTableFetchDataContext) {\n    if (this.isLoadingServices) {\n      return;\n    }\n    this.isLoadingServices = true;\n    const pagination_obs = this.cephServiceService.list(context.toParams());\n    pagination_obs.observable.subscribe(\n      (services: CephServiceSpec[]) => {\n        this.services = services;\n        this.count = pagination_obs.count;\n        this.services = this.services.filter((col: any) => {\n          if (col.service_type === 'mgmt-gateway' && col.status.running) {\n            this.isMgmtGateway = true;\n          }\n          return !this.hiddenServices.includes(col.service_name);\n        });\n        this.isLoadingServices = false;\n      },\n      () => {\n        this.isLoadingServices = false;\n        this.services = [];\n        context.error();\n      }\n    );\n    if (\n      this.isMgmtGateway &&\n      !this.services.find(\n        (service: CephServiceSpec) =>\n          service.service_type !== 'mgmt-gateway' && service.status.running > 0\n      )\n    ) {\n      this.isMgmtGateway = false;\n    }\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteAction() {\n    const service = this.selection.first();\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Service`,\n      itemNames: [service.service_name],\n      actionDescription: 'delete',\n      submitActionObservable: () =>\n        this.taskWrapperService\n          .wrapTaskAroundCall({\n            task: new FinishedTask(`service/${URLVerbs.DELETE}`, {\n              service_name: service.service_name\n            }),\n            call: this.cephServiceService.delete(service.service_name)\n          })\n          .pipe(\n            // Delay closing the dialog, otherwise the datatable still\n            // shows the deleted service after an auto-reload.\n            // Showing the dialog while delaying is done to increase\n            // the user experience.\n            delay(5000)\n          )\n    });\n  }\n\n  private configureServiceUrl(url: string, serviceType: string) {\n    this.settingsService.ifSettingConfigured(url, (url) => {\n      this.serviceUrls[serviceType] = url;\n    });\n  }\n}\n","export enum OsdDeploymentOptions {\n  COST_CAPACITY = 'cost_capacity',\n  THROUGHPUT = 'throughput_optimized',\n  IOPS = 'iops_optimized'\n}\n\nexport interface DeploymentOption {\n  name: OsdDeploymentOptions;\n  title: string;\n  desc: string;\n  capacity: number;\n  available: boolean;\n  hdd_used: number;\n  used: number;\n  nvme_used: number;\n  ssd_used: number;\n}\n\nexport interface DeploymentOptions {\n  options: {\n    [key in OsdDeploymentOptions]: DeploymentOption;\n  };\n  recommended_option: OsdDeploymentOptions;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-osd-creation-preview-modal',\n  templateUrl: './osd-creation-preview-modal.component.html',\n  styleUrls: ['./osd-creation-preview-modal.component.scss']\n})\nexport class OsdCreationPreviewModalComponent {\n  @Input()\n  driveGroups: Object[] = [];\n\n  @Output()\n  submitAction = new EventEmitter();\n\n  action: string;\n  formGroup: CdFormGroup;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private formBuilder: CdFormBuilder,\n    private osdService: OsdService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    this.action = actionLabels.CREATE;\n    this.createForm();\n  }\n\n  createForm() {\n    this.formGroup = this.formBuilder.group({});\n  }\n\n  onSubmit() {\n    const trackingId = _.join(_.map(this.driveGroups, 'service_id'), ', ');\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('osd/' + URLVerbs.CREATE, {\n          tracking_id: trackingId\n        }),\n        call: this.osdService.create(this.driveGroups, trackingId)\n      })\n      .subscribe({\n        error: () => {\n          this.formGroup.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.submitAction.emit();\n          this.activeModal.close();\n        }\n      });\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>OSD creation preview</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #frm=\"ngForm\"\n          [formGroup]=\"formGroup\"\n          novalidate>\n      <div class=\"modal-body\">\n        <h4 i18n>DriveGroups</h4>\n        <pre>{{ driveGroups | json}}</pre>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"formGroup\"\n                              [submitText]=\"action | titlecase\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\n\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableColumnFiltersChange } from '~/app/shared/models/cd-table-column-filters-change';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { OrchestratorFeature } from '~/app/shared/models/orchestrator.enum';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { InventoryDevice } from './inventory-device.model';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-inventory-devices',\n  templateUrl: './inventory-devices.component.html',\n  styleUrls: ['./inventory-devices.component.scss']\n})\nexport class InventoryDevicesComponent implements OnInit, OnDestroy {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n\n  // Devices\n  @Input() devices: InventoryDevice[] = [];\n\n  @Input() showAvailDeviceOnly = false;\n  // Do not display these columns\n  @Input() hiddenColumns: string[] = [];\n\n  @Input() hostname = '';\n\n  @Input() diskType = '';\n\n  // Show filters for these columns, specify empty array to disable\n  @Input() filterColumns = [\n    'hostname',\n    'human_readable_type',\n    'available',\n    'sys_api.vendor',\n    'sys_api.model',\n    'sys_api.size'\n  ];\n\n  // Device table row selection type\n  @Input() selectionType: string = undefined;\n\n  @Output() filterChange = new EventEmitter<CdTableColumnFiltersChange>();\n\n  @Output() fetchInventory = new EventEmitter();\n\n  icons = Icons;\n  columns: Array<CdTableColumn> = [];\n  selection: CdTableSelection = new CdTableSelection();\n  permission: Permission;\n  tableActions: CdTableAction[];\n  fetchInventorySub: Subscription;\n\n  @Input() orchStatus: OrchestratorStatus = undefined;\n\n  actionOrchFeatures = {\n    identify: [OrchestratorFeature.DEVICE_BLINK_LIGHT]\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private dimlessBinary: DimlessBinaryPipe,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    private orchService: OrchestratorService,\n    private hostService: HostService\n  ) {}\n\n  ngOnInit() {\n    this.permission = this.authStorageService.getPermissions().osd;\n    this.tableActions = [\n      {\n        permission: 'update',\n        icon: Icons.show,\n        click: () => this.identifyDevice(),\n        name: $localize`Identify`,\n        disable: (selection: CdTableSelection) => this.getDisable('identify', selection),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection,\n        visible: () => _.isString(this.selectionType)\n      }\n    ];\n    const columns = [\n      {\n        name: $localize`Hostname`,\n        prop: 'hostname',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Device path`,\n        prop: 'path',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Type`,\n        prop: 'human_readable_type',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            hdd: { value: 'HDD', class: 'badge-hdd' },\n            ssd: { value: 'SSD', class: 'badge-ssd' }\n          }\n        }\n      },\n      {\n        name: $localize`Available`,\n        prop: 'available',\n        flexGrow: 1,\n        cellClass: 'text-center',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        name: $localize`Vendor`,\n        prop: 'sys_api.vendor',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Model`,\n        prop: 'sys_api.model',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Size`,\n        prop: 'sys_api.size',\n        flexGrow: 1,\n        pipe: this.dimlessBinary\n      },\n      {\n        name: $localize`OSDs`,\n        prop: 'osd_ids',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-dark',\n          prefix: 'osd.'\n        }\n      }\n    ];\n\n    this.columns = columns.filter((col: any) => {\n      return !this.hiddenColumns.includes(col.prop);\n    });\n\n    // init column filters\n    _.forEach(this.filterColumns, (prop) => {\n      const col = _.find(this.columns, { prop: prop });\n      if (col) {\n        col.filterable = true;\n      }\n\n      if (col?.prop === 'human_readable_type' && this.diskType === 'ssd') {\n        col.filterInitValue = this.diskType;\n      }\n\n      if (col?.prop === 'hostname' && this.hostname) {\n        col.filterInitValue = this.hostname;\n      }\n    });\n\n    if (this.fetchInventory.observers.length > 0) {\n      this.fetchInventorySub = this.table.fetchData.subscribe(() => {\n        this.fetchInventory.emit();\n      });\n    }\n  }\n\n  getDevices() {\n    if (this.showAvailDeviceOnly) {\n      this.hostService.inventoryDeviceList().subscribe(\n        (devices: InventoryDevice[]) => {\n          this.devices = _.filter(devices, 'available');\n          this.devices = [...this.devices];\n        },\n        () => {\n          this.devices = [];\n        }\n      );\n    } else {\n      this.devices = [...this.devices];\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.fetchInventorySub) {\n      this.fetchInventorySub.unsubscribe();\n    }\n  }\n\n  onColumnFiltersChanged(event: CdTableColumnFiltersChange) {\n    this.filterChange.emit(event);\n  }\n\n  getDisable(action: 'identify', selection: CdTableSelection): boolean | string {\n    if (!selection.hasSingleSelection) {\n      return true;\n    }\n    return this.orchService.getTableActionDisableDesc(\n      this.orchStatus,\n      this.actionOrchFeatures[action]\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  identifyDevice() {\n    const selected = this.selection.first();\n    const hostname = selected.hostname;\n    const device = selected.path || selected.device_id;\n    this.modalService.show(FormModalComponent, {\n      titleText: $localize`Identify device ${device}`,\n      message: $localize`Please enter the duration how long to blink the LED.`,\n      fields: [\n        {\n          type: 'select',\n          name: 'duration',\n          value: 300,\n          required: true,\n          typeConfig: {\n            options: [\n              { text: $localize`1 minute`, value: 60 },\n              { text: $localize`2 minutes`, value: 120 },\n              { text: $localize`5 minutes`, value: 300 },\n              { text: $localize`10 minutes`, value: 600 },\n              { text: $localize`15 minutes`, value: 900 }\n            ]\n          }\n        }\n      ],\n      submitButtonText: $localize`Execute`,\n      onSubmit: (values: any) => {\n        this.hostService.identifyDevice(hostname, device, values.duration).subscribe(() => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Identifying '${device}' started on host '${hostname}'`\n          );\n        });\n      }\n    });\n  }\n}\n","<cd-table [data]=\"devices\"\n          [columns]=\"columns\"\n          identifier=\"uid\"\n          [forceIdentifier]=\"true\"\n          [selectionType]=\"selectionType\"\n          columnMode=\"flex\"\n          (fetchData)=\"getDevices()\"\n          [searchField]=\"false\"\n          (updateSelection)=\"updateSelection($event)\"\n          (columnFiltersChanged)=\"onColumnFiltersChanged($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>{{ deviceType }} devices</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #frm=\"ngForm\"\n          [formGroup]=\"formGroup\"\n          novalidate>\n      <div class=\"modal-body\">\n        <cd-alert-panel *ngIf=\"!canSubmit\"\n                        type=\"warning\"\n                        size=\"slim\"\n                        [showTitle]=\"false\">\n          <ng-container i18n>At least one of these filters must be applied in order to proceed:</ng-container>\n          <span *ngFor=\"let filter of requiredFilters\"\n                class=\"badge badge-dark ms-2\">\n            {{ filter }}\n          </span>\n        </cd-alert-panel>\n        <cd-inventory-devices #inventoryDevices\n                              [devices]=\"devices\"\n                              [filterColumns]=\"filterColumns\"\n                              [hostname]=\"hostname\"\n                              [diskType]=\"diskType\"\n                              [hiddenColumns]=\"['available', 'osd_ids']\"\n                              (filterChange)=\"onFilterChange($event)\">\n        </cd-inventory-devices>\n        <div *ngIf=\"canSubmit\">\n          <p class=\"text-center\">\n            <span i18n>Number of devices: {{ filteredDevices.length }}. Raw capacity:\n              {{ capacity | dimlessBinary }}.</span>\n          </p>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"formGroup\"\n                              [disabled]=\"!canSubmit || filteredDevices.length === 0\"\n                              [submitText]=\"action | titlecase\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Output,\n  ViewChild\n} from '@angular/core';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { InventoryDevice } from '~/app/ceph/cluster/inventory/inventory-devices/inventory-device.model';\nimport { InventoryDevicesComponent } from '~/app/ceph/cluster/inventory/inventory-devices/inventory-devices.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableColumnFiltersChange } from '~/app/shared/models/cd-table-column-filters-change';\nimport { WizardStepsService } from '~/app/shared/services/wizard-steps.service';\n\n@Component({\n  selector: 'cd-osd-devices-selection-modal',\n  templateUrl: './osd-devices-selection-modal.component.html',\n  styleUrls: ['./osd-devices-selection-modal.component.scss']\n})\nexport class OsdDevicesSelectionModalComponent implements AfterViewInit {\n  @ViewChild('inventoryDevices')\n  inventoryDevices: InventoryDevicesComponent;\n\n  @Output()\n  submitAction = new EventEmitter<CdTableColumnFiltersChange>();\n\n  icons = Icons;\n  filterColumns: (string | number)[] = [];\n\n  hostname: string;\n  deviceType: string;\n  diskType: string;\n  formGroup: CdFormGroup;\n  action: string;\n\n  devices: InventoryDevice[] = [];\n  filteredDevices: InventoryDevice[] = [];\n  capacity = 0;\n  event: CdTableColumnFiltersChange;\n  canSubmit = false;\n  requiredFilters: string[] = [];\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    private cdRef: ChangeDetectorRef,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public wizardStepService: WizardStepsService\n  ) {\n    this.action = actionLabels.ADD;\n    this.createForm();\n  }\n\n  ngAfterViewInit() {\n    // At least one filter other than hostname is required\n    // Extract the name from table columns for i18n strings\n    const cols = _.filter(this.inventoryDevices.columns, (col) => {\n      return this.filterColumns.includes(col.prop) && col.prop !== 'hostname';\n    });\n    // Fixes 'ExpressionChangedAfterItHasBeenCheckedError'\n    setTimeout(() => {\n      this.requiredFilters = _.map(cols, 'name');\n    }, 0);\n  }\n\n  createForm() {\n    this.formGroup = this.formBuilder.group({});\n  }\n\n  onFilterChange(event: CdTableColumnFiltersChange) {\n    this.capacity = 0;\n    this.canSubmit = false;\n    if (_.isEmpty(event.filters)) {\n      // filters are cleared\n      this.filteredDevices = [];\n      this.event = undefined;\n    } else {\n      // at least one filter is required (except hostname)\n      const filters = event.filters.filter((filter) => {\n        return filter.prop !== 'hostname';\n      });\n      this.canSubmit = !_.isEmpty(filters);\n      this.filteredDevices = event.data;\n      this.capacity = _.sumBy(this.filteredDevices, 'sys_api.size');\n      this.event = event;\n    }\n    this.cdRef.detectChanges();\n  }\n\n  onSubmit() {\n    this.submitAction.emit(this.event);\n    this.activeModal.close();\n  }\n}\n","<!-- button -->\n<div class=\"form-group row\">\n  <label class=\"cd-col-form-label\"\n         for=\"createDeleteButton\">\n    <ng-container i18n>{{ name }} devices</ng-container>\n    <cd-helper>\n      <span i18n\n            *ngIf=\"type === 'data'\">The primary storage devices. These devices contain all OSD data.</span>\n      <span i18n\n            *ngIf=\"type === 'wal'\">Write-Ahead-Log devices. These devices are used for BlueStore’s internal journal. It is only useful to use a WAL device if the device is faster than the primary device (e.g. NVME devices or SSDs). If there is only a small amount of fast storage available (e.g., less than a gigabyte), we recommend using it as a WAL device.</span>\n      <span i18n\n            *ngIf=\"type === 'db'\">DB devices can be used for storing BlueStore’s internal metadata.  It is only helpful to provision a DB device if it is faster than the primary device (e.g. NVME devices or SSD).</span>\n    </cd-helper>\n  </label>\n  <div class=\"cd-col-form-input\">\n    <ng-container *ngIf=\"devices.length === 0; else blockClearDevices\">\n      <button type=\"button\"\n              class=\"btn btn-light\"\n              (click)=\"showSelectionModal()\"\n              data-toggle=\"tooltip\"\n              [title]=\"addButtonTooltip\"\n              [disabled]=\"availDevices.length === 0 || !canSelect || expansionCanSelect\">\n        <svg [cdsIcon]=\"icons.add\"\n             [size]=\"icons.size16\"\n             ></svg>\n        <ng-container i18n>Add</ng-container>\n      </button>\n    </ng-container>\n    <ng-template #blockClearDevices>\n      <div class=\"pb-2 my-2 border-bottom\">\n        <span *ngFor=\"let filter of appliedFilters\">\n          <span class=\"badge badge-dark me-2\">{{ filter.name }}: {{ filter.value.formatted }}</span>\n        </span>\n        <a class=\"tc_clearSelections\"\n           href=\"\"\n           (click)=\"clearDevices(); false\">\n          <svg [cdsIcon]=\"icons.clearFilters\"\n               [size]=\"icons.size16\"\n               ></svg>\n          <ng-container i18n>Clear</ng-container>\n        </a>\n      </div>\n      <div>\n        <cd-inventory-devices [devices]=\"devices\"\n                              [hiddenColumns]=\"['available', 'osd_ids']\"\n                              [filterColumns]=\"[]\">\n        </cd-inventory-devices>\n      </div>\n      <div *ngIf=\"type === 'data'\"\n           class=\"float-end\">\n        <span i18n>Raw capacity: {{ capacity | dimlessBinary }}</span>\n      </div>\n    </ng-template>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { InventoryDevice } from '~/app/ceph/cluster/inventory/inventory-devices/inventory-device.model';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableColumnFiltersChange } from '~/app/shared/models/cd-table-column-filters-change';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { OsdDevicesSelectionModalComponent } from '../osd-devices-selection-modal/osd-devices-selection-modal.component';\nimport { DevicesSelectionChangeEvent } from './devices-selection-change-event.interface';\nimport { DevicesSelectionClearEvent } from './devices-selection-clear-event.interface';\n\n@Component({\n  selector: 'cd-osd-devices-selection-groups',\n  templateUrl: './osd-devices-selection-groups.component.html',\n  styleUrls: ['./osd-devices-selection-groups.component.scss']\n})\nexport class OsdDevicesSelectionGroupsComponent implements OnInit, OnChanges {\n  // data, wal, db\n  @Input() type: string;\n\n  // Data, WAL, DB\n  @Input() name: string;\n\n  @Input() hostname: string;\n\n  @Input() availDevices: InventoryDevice[];\n\n  @Input() canSelect: boolean;\n\n  @Output()\n  selected = new EventEmitter<DevicesSelectionChangeEvent>();\n\n  @Output()\n  cleared = new EventEmitter<DevicesSelectionClearEvent>();\n\n  icons = Icons;\n  devices: InventoryDevice[] = [];\n  capacity = 0;\n  appliedFilters = new Array();\n  expansionCanSelect = false;\n  isOsdPage: boolean;\n\n  addButtonTooltip: String;\n  tooltips = {\n    noAvailDevices: $localize`No available devices`,\n    addPrimaryFirst: $localize`Please add primary devices first`,\n    addByFilters: $localize`Add devices by using filters`\n  };\n\n  constructor(\n    private modalService: ModalService,\n    public osdService: OsdService,\n    private router: Router\n  ) {\n    this.isOsdPage = this.router.url.includes('/osd');\n  }\n\n  ngOnInit() {\n    if (!this.isOsdPage) {\n      this.osdService?.osdDevices[this.type]\n        ? (this.devices = this.osdService.osdDevices[this.type])\n        : (this.devices = []);\n      this.capacity = _.sumBy(this.devices, 'sys_api.size');\n      this.osdService?.osdDevices\n        ? (this.expansionCanSelect = this.osdService?.osdDevices['disableSelect'])\n        : (this.expansionCanSelect = false);\n    }\n    this.updateAddButtonTooltip();\n  }\n\n  ngOnChanges() {\n    this.updateAddButtonTooltip();\n  }\n\n  showSelectionModal() {\n    const filterColumns = [\n      'hostname',\n      'human_readable_type',\n      'sys_api.vendor',\n      'sys_api.model',\n      'sys_api.size'\n    ];\n    const diskType = this.name === 'Primary' ? 'hdd' : 'ssd';\n    const initialState = {\n      hostname: this.hostname,\n      deviceType: this.name,\n      diskType: diskType,\n      devices: this.availDevices,\n      filterColumns: filterColumns\n    };\n    const modalRef = this.modalService.show(OsdDevicesSelectionModalComponent, initialState, {\n      size: 'xl'\n    });\n    modalRef.componentInstance.submitAction.subscribe((result: CdTableColumnFiltersChange) => {\n      this.devices = result.data;\n      this.capacity = _.sumBy(this.devices, 'sys_api.size');\n      this.appliedFilters = result.filters;\n      const event = _.assign({ type: this.type }, result);\n      if (!this.isOsdPage) {\n        this.osdService.osdDevices[this.type] = this.devices;\n        this.osdService.osdDevices['disableSelect'] =\n          this.canSelect || this.devices.length === this.availDevices.length;\n        this.osdService.osdDevices[this.type]['capacity'] = this.capacity;\n      }\n      this.selected.emit(event);\n    });\n  }\n\n  private updateAddButtonTooltip() {\n    if (this.type === 'data' && this.availDevices.length === 0) {\n      this.addButtonTooltip = this.tooltips.noAvailDevices;\n    } else {\n      if (!this.canSelect) {\n        // No primary devices added yet.\n        this.addButtonTooltip = this.tooltips.addPrimaryFirst;\n      } else if (this.availDevices.length === 0) {\n        this.addButtonTooltip = this.tooltips.noAvailDevices;\n      } else {\n        this.addButtonTooltip = this.tooltips.addByFilters;\n      }\n    }\n  }\n\n  clearDevices() {\n    if (!this.isOsdPage) {\n      this.expansionCanSelect = false;\n      this.osdService.osdDevices['disableSelect'] = false;\n      this.osdService.osdDevices = [];\n    }\n    const event = {\n      type: this.type,\n      clearedDevices: [...this.devices]\n    };\n    this.devices = [];\n    this.cleared.emit(event);\n  }\n}\n","<cd-orchestrator-doc-panel *ngIf=\"!hasOrchestrator\"></cd-orchestrator-doc-panel>\n\n<div class=\"card\"\n     *cdFormLoading=\"loading\">\n  <div i18n=\"form title|Example: Create Pool@@formTitle\"\n       class=\"card-header\"\n       *ngIf=\"!hideTitle\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n  <div class=\"card-body ms-2\">\n    <form name=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"form\"\n          novalidate>\n      <cd-alert-panel *ngIf=\"!deploymentOptions?.recommended_option\"\n                      type=\"warning\"\n                      class=\"mx-3\"\n                      i18n>\n        No devices(HDD, SSD or NVME) were found. Creation of OSDs will remain\n        disabled until devices are added.\n      </cd-alert-panel>\n      <div class=\"accordion\">\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\">\n            <button class=\"accordion-button\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    aria-label=\"toggle deployment options\"\n                    [ngClass]=\"{collapsed: !simpleDeployment}\"\n                    (click)=\"emitDeploymentMode()\"\n                    i18n>Deployment Options</button>\n          </h2>\n        </div>\n        <div class=\"accordion-collapse collapse\"\n             [ngClass]=\"{show: simpleDeployment}\">\n          <div class=\"accordion-body\">\n            <div class=\"pt-3 pb-3\"\n                 *ngFor=\"let optionName of optionNames\">\n              <div class=\"custom-control form-check custom-control-inline\">\n                <input class=\"form-check-input\"\n                       type=\"radio\"\n                       name=\"deploymentOption\"\n                       [id]=\"optionName\"\n                       [value]=\"optionName\"\n                       formControlName=\"deploymentOption\"\n                       (change)=\"emitDeploymentSelection()\"\n                       [attr.disabled]=\"!deploymentOptions?.options[optionName].available ? true : null\">\n                <label class=\"form-check-label\"\n                       [id]=\"'label_' + optionName\"\n                       [for]=\"optionName\"\n                       i18n>{{ deploymentOptions?.options[optionName].title }}\n                       {{ deploymentOptions?.recommended_option === optionName ? \"(Recommended)\" : \"\" }}\n                  <cd-helper>\n                    <span>{{ deploymentOptions?.options[optionName].desc }}</span>\n                  </cd-helper>\n                </label>\n              </div>\n            </div>\n            <!-- @TODO: Visualize the storage used on a chart -->\n            <!-- <div class=\"pie-chart\">\n              <h4 class=\"text-center\">Selected Capacity</h4>\n              <h5 class=\"margin text-center\">10 Hosts | 30 NVMes </h5>\n              <div class=\"char-i-contain\">\n                <cd-health-pie [data]=\"data\"\n                               [config]=\"rawCapacityChartConfig\"\n                               [isBytesData]=\"true\"\n                               (prepareFn)=\"prepareRawUsage($event[0], $event[1])\">\n                </cd-health-pie>\n              </div>\n            </div> -->\n          </div>\n        </div>\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\">\n            <button class=\"accordion-button\"\n                    type=\"button\"\n                    aria-label=\"toggle advanced mode\"\n                    [ngClass]=\"{collapsed: simpleDeployment}\"\n                    (click)=\"emitDeploymentMode()\"\n                    i18n>Advanced Mode</button>\n          </h2>\n        </div>\n        <div class=\"accordion-collapse collapse\"\n             [ngClass]=\"{show: !simpleDeployment}\">\n          <div class=\"accordion-body\">\n            <div class=\"card-body\">\n              <fieldset>\n                <cd-osd-devices-selection-groups #dataDeviceSelectionGroups\n                                                 name=\"Primary\"\n                                                 type=\"data\"\n                                                 [availDevices]=\"availDevices\"\n                                                 [canSelect]=\"availDevices.length !== 0\"\n                                                 (selected)=\"onDevicesSelected($event)\"\n                                                 (cleared)=\"onDevicesCleared($event)\">\n                </cd-osd-devices-selection-groups>\n              </fieldset>\n\n              <!-- Shared devices -->\n              <fieldset>\n                <legend i18n>Shared devices</legend>\n\n                <!-- WAL devices button and table -->\n                <cd-osd-devices-selection-groups #walDeviceSelectionGroups\n                                                 name=\"WAL\"\n                                                 type=\"wal\"\n                                                 [availDevices]=\"availDevices\"\n                                                 [canSelect]=\"dataDeviceSelectionGroups.devices.length !== 0\"\n                                                 (selected)=\"onDevicesSelected($event)\"\n                                                 (cleared)=\"onDevicesCleared($event)\"\n                                                 [hostname]=\"hostname\">\n                </cd-osd-devices-selection-groups>\n\n                <!-- WAL slots -->\n                <div class=\"form-group row\"\n                     *ngIf=\"walDeviceSelectionGroups.devices.length !== 0\">\n                  <label class=\"cd-col-form-label\"\n                         for=\"walSlots\">\n                    <ng-container i18n>WAL slots</ng-container>\n                    <cd-helper>\n                      <span i18n>How many OSDs per WAL device.</span>\n                      <br>\n                      <span i18n>Specify 0 to let Orchestrator backend decide it.</span>\n                    </cd-helper>\n                  </label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           id=\"walSlots\"\n                           name=\"walSlots\"\n                           type=\"number\"\n                           min=\"0\"\n                           formControlName=\"walSlots\">\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"form.showError('walSlots', formDir, 'min')\"\n                          i18n>Value should be greater than or equal to 0</span>\n                  </div>\n                </div>\n\n                <!-- DB devices button and table -->\n                <cd-osd-devices-selection-groups #dbDeviceSelectionGroups\n                                                 name=\"DB\"\n                                                 type=\"db\"\n                                                 [availDevices]=\"availDevices\"\n                                                 [canSelect]=\"dataDeviceSelectionGroups.devices.length !== 0\"\n                                                 (selected)=\"onDevicesSelected($event)\"\n                                                 (cleared)=\"onDevicesCleared($event)\"\n                                                 [hostname]=\"hostname\">\n                </cd-osd-devices-selection-groups>\n\n                <!-- DB slots -->\n                <div class=\"form-group row\"\n                     *ngIf=\"dbDeviceSelectionGroups.devices.length !== 0\">\n                  <label class=\"cd-col-form-label\"\n                         for=\"dbSlots\">\n                    <ng-container i18n>DB slots</ng-container>\n                    <cd-helper>\n                      <span i18n>How many OSDs per DB device.</span>\n                      <br>\n                      <span i18n>Specify 0 to let Orchestrator backend decide it.</span>\n                    </cd-helper>\n                  </label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           id=\"dbSlots\"\n                           name=\"dbSlots\"\n                           type=\"number\"\n                           min=\"0\"\n                           formControlName=\"dbSlots\">\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"form.showError('dbSlots', formDir, 'min')\"\n                          i18n>Value should be greater than or equal to 0</span>\n                  </div>\n                </div>\n              </fieldset>\n            </div>\n          </div>\n        </div>\n\n        <!-- Features -->\n        <div class=\"accordion-item\">\n          <h2 class=\"accordion-header\">\n            <button class=\"accordion-button\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    aria-label=\"features\"\n                    aria-expanded=\"true\"\n                    i18n>Features</button>\n          </h2>\n        </div>\n        <div class=\"accordion-collapse collapse show\">\n          <div class=\"accordion-body\">\n            <div class=\"pt-3 pb-3\"\n                 formGroupName=\"features\">\n              <div class=\"custom-control custom-checkbox\"\n                   *ngFor=\"let feature of featureList\">\n                <input type=\"checkbox\"\n                       class=\"custom-control-input\"\n                       id=\"{{ feature.key }}\"\n                       name=\"{{ feature.key }}\"\n                       formControlName=\"{{ feature.key }}\"\n                       (change)=\"emitDeploymentSelection()\">\n                <label class=\"custom-control-label\"\n                       for=\"{{ feature.key }}\">{{ feature.desc }}</label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <div class=\"card-footer\"\n       *ngIf=\"!hideSubmitBtn\">\n    <cd-form-button-panel #previewButtonPanel\n                          (submitActionEvent)=\"submit()\"\n                          [form]=\"form\"\n                          [disabled]=\"dataDeviceSelectionGroups.devices.length === 0 && !simpleDeployment\"\n                          [submitText]=\"simpleDeployment ? 'Create OSDs' : actionLabels.PREVIEW\"\n                          wrappingClass=\"text-right\"></cd-form-button-panel>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { InventoryDevice } from '~/app/ceph/cluster/inventory/inventory-devices/inventory-device.model';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { FormButtonPanelComponent } from '~/app/shared/components/form-button-panel/form-button-panel.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport {\n  DeploymentOptions,\n  OsdDeploymentOptions\n} from '~/app/shared/models/osd-deployment-options';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { OsdCreationPreviewModalComponent } from '../osd-creation-preview-modal/osd-creation-preview-modal.component';\nimport { DevicesSelectionChangeEvent } from '../osd-devices-selection-groups/devices-selection-change-event.interface';\nimport { DevicesSelectionClearEvent } from '../osd-devices-selection-groups/devices-selection-clear-event.interface';\nimport { OsdDevicesSelectionGroupsComponent } from '../osd-devices-selection-groups/osd-devices-selection-groups.component';\nimport { DriveGroup } from './drive-group.model';\nimport { OsdFeature } from './osd-feature.interface';\n\n@Component({\n  selector: 'cd-osd-form',\n  templateUrl: './osd-form.component.html',\n  styleUrls: ['./osd-form.component.scss']\n})\nexport class OsdFormComponent extends CdForm implements OnInit, OnDestroy {\n  @ViewChild('dataDeviceSelectionGroups')\n  dataDeviceSelectionGroups: OsdDevicesSelectionGroupsComponent;\n\n  @ViewChild('walDeviceSelectionGroups')\n  walDeviceSelectionGroups: OsdDevicesSelectionGroupsComponent;\n\n  @ViewChild('dbDeviceSelectionGroups')\n  dbDeviceSelectionGroups: OsdDevicesSelectionGroupsComponent;\n\n  @ViewChild('previewButtonPanel')\n  previewButtonPanel: FormButtonPanelComponent;\n\n  @Input()\n  hideTitle = false;\n\n  @Input()\n  hideSubmitBtn = false;\n\n  @Output() emitDriveGroup: EventEmitter<DriveGroup> = new EventEmitter();\n\n  @Output() emitDeploymentOption: EventEmitter<object> = new EventEmitter();\n\n  @Output() emitMode: EventEmitter<boolean> = new EventEmitter();\n\n  icons = Icons;\n\n  form: CdFormGroup;\n  columns: Array<CdTableColumn> = [];\n\n  allDevices: InventoryDevice[] = [];\n\n  availDevices: InventoryDevice[] = [];\n  dataDeviceFilters: any[] = [];\n  dbDeviceFilters: any[] = [];\n  walDeviceFilters: any[] = [];\n  hostname = '';\n  driveGroup = new DriveGroup();\n\n  action: string;\n  resource: string;\n\n  features: { [key: string]: OsdFeature };\n  featureList: OsdFeature[] = [];\n\n  hasOrchestrator = true;\n\n  simpleDeployment = true;\n\n  deploymentOptions: DeploymentOptions;\n  optionNames = Object.values(OsdDeploymentOptions);\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private orchService: OrchestratorService,\n    private hostService: HostService,\n    private router: Router,\n    private modalService: ModalService,\n    private osdService: OsdService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    super();\n    this.resource = $localize`OSDs`;\n    this.action = this.actionLabels.CREATE;\n    this.features = {\n      encrypted: {\n        key: 'encrypted',\n        desc: $localize`Encryption`\n      }\n    };\n    this.featureList = _.map(this.features, (o, key) => Object.assign(o, { key: key }));\n    this.createForm();\n  }\n\n  ngOnInit() {\n    this.orchService.status().subscribe((status) => {\n      this.hasOrchestrator = status.available;\n      if (status.available) {\n        this.getDataDevices();\n      } else {\n        this.loadingNone();\n      }\n    });\n\n    this.osdService.getDeploymentOptions().subscribe((options) => {\n      this.deploymentOptions = options;\n      if (!this.osdService.selectedFormValues) {\n        this.form.get('deploymentOption').setValue(this.deploymentOptions?.recommended_option);\n      }\n\n      if (this.deploymentOptions?.recommended_option) {\n        this.enableFeatures();\n      }\n    });\n\n    // restoring form value on back/next\n    if (this.osdService.selectedFormValues) {\n      this.form = _.cloneDeep(this.osdService.selectedFormValues);\n      this.form\n        .get('deploymentOption')\n        .setValue(this.osdService.selectedFormValues.value?.deploymentOption);\n    }\n    this.simpleDeployment = this.osdService.isDeployementModeSimple;\n    this.form.get('walSlots').valueChanges.subscribe((value) => this.setSlots('wal', value));\n    this.form.get('dbSlots').valueChanges.subscribe((value) => this.setSlots('db', value));\n    _.each(this.features, (feature) => {\n      this.form\n        .get('features')\n        .get(feature.key)\n        .valueChanges.subscribe((value) => this.featureFormUpdate(feature.key, value));\n    });\n  }\n\n  createForm() {\n    this.form = new CdFormGroup({\n      walSlots: new UntypedFormControl(0),\n      dbSlots: new UntypedFormControl(0),\n      features: new CdFormGroup(\n        this.featureList.reduce((acc: object, e) => {\n          // disable initially because no data devices are selected\n          acc[e.key] = new UntypedFormControl({ value: false, disabled: true });\n          return acc;\n        }, {})\n      ),\n      deploymentOption: new UntypedFormControl(0)\n    });\n  }\n\n  getDataDevices() {\n    this.hostService.inventoryDeviceList().subscribe(\n      (devices: InventoryDevice[]) => {\n        this.allDevices = _.filter(devices, 'available');\n        this.availDevices = [...this.allDevices];\n        this.loadingReady();\n      },\n      () => {\n        this.allDevices = [];\n        this.availDevices = [];\n        this.loadingError();\n      }\n    );\n  }\n\n  setSlots(type: string, slots: number) {\n    if (typeof slots !== 'number') {\n      return;\n    }\n    if (slots >= 0) {\n      this.driveGroup.setSlots(type, slots);\n    }\n  }\n\n  featureFormUpdate(key: string, checked: boolean) {\n    this.driveGroup.setFeature(key, checked);\n  }\n\n  enableFeatures() {\n    this.featureList.forEach((feature) => {\n      this.form.get(feature.key).enable({ emitEvent: false });\n    });\n  }\n\n  disableFeatures() {\n    this.featureList.forEach((feature) => {\n      const control = this.form.get(feature.key);\n      control.disable({ emitEvent: false });\n      control.setValue(false, { emitEvent: false });\n    });\n  }\n\n  onDevicesSelected(event: DevicesSelectionChangeEvent) {\n    this.availDevices = event.dataOut;\n\n    if (event.type === 'data') {\n      // If user selects data devices for a single host, make only remaining devices on\n      // that host as available.\n      const hostnameFilter = _.find(event.filters, { prop: 'hostname' });\n      if (hostnameFilter) {\n        this.hostname = hostnameFilter.value.raw;\n        this.availDevices = event.dataOut.filter((device: InventoryDevice) => {\n          return device.hostname === this.hostname;\n        });\n        this.driveGroup.setHostPattern(this.hostname);\n      } else {\n        this.driveGroup.setHostPattern('*');\n      }\n      this.enableFeatures();\n    }\n    this.driveGroup.setDeviceSelection(event.type, event.filters);\n\n    this.emitDriveGroup.emit(this.driveGroup);\n  }\n\n  onDevicesCleared(event: DevicesSelectionClearEvent) {\n    if (event.type === 'data') {\n      this.hostname = '';\n      this.availDevices = [...this.allDevices];\n      this.walDeviceSelectionGroups.devices = [];\n      this.dbDeviceSelectionGroups.devices = [];\n      this.disableFeatures();\n      this.driveGroup.reset();\n      this.form.get('walSlots').setValue(0, { emitEvent: false });\n      this.form.get('dbSlots').setValue(0, { emitEvent: false });\n    } else {\n      this.availDevices = [...this.availDevices, ...event.clearedDevices];\n      this.driveGroup.clearDeviceSelection(event.type);\n      const slotControlName = `${event.type}Slots`;\n      this.form.get(slotControlName).setValue(0, { emitEvent: false });\n    }\n  }\n\n  emitDeploymentSelection() {\n    const option = this.form.get('deploymentOption').value;\n    const encrypted = this.form.get('encrypted').value;\n    this.emitDeploymentOption.emit({ option: option, encrypted: encrypted });\n  }\n\n  emitDeploymentMode() {\n    this.simpleDeployment = !this.simpleDeployment;\n    if (!this.simpleDeployment && this.dataDeviceSelectionGroups.devices.length === 0) {\n      this.disableFeatures();\n    } else {\n      this.enableFeatures();\n    }\n    this.emitMode.emit(this.simpleDeployment);\n  }\n\n  submit() {\n    if (this.simpleDeployment) {\n      const option = this.form.get('deploymentOption').value;\n      const encrypted = this.form.get('encrypted').value;\n      const deploymentSpec = { option: option, encrypted: encrypted };\n      const title = this.deploymentOptions.options[deploymentSpec.option].title;\n      const trackingId = `${title} deployment`;\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('osd/' + URLVerbs.CREATE, {\n            tracking_id: trackingId\n          }),\n          call: this.osdService.create([deploymentSpec], trackingId, 'predefined')\n        })\n        .subscribe({\n          complete: () => {\n            this.router.navigate(['/osd']);\n          }\n        });\n    } else {\n      // use user name and timestamp for drive group name\n      const user = this.authStorageService.getUsername();\n      this.driveGroup.setName(`dashboard-${user}-${_.now()}`);\n      const modalRef = this.modalService.show(OsdCreationPreviewModalComponent, {\n        driveGroups: [this.driveGroup.spec]\n      });\n      modalRef.componentInstance.submitAction.subscribe(() => {\n        this.router.navigate(['/osd']);\n      });\n      this.previewButtonPanel.submitButton.loading = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this.osdService.selectedFormValues = _.cloneDeep(this.form);\n    this.osdService.isDeployementModeSimple = this.dataDeviceSelectionGroups?.devices?.length === 0;\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n  <ng-container *cdFormLoading=\"loading\">\n  <form name=\"hostForm\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"hostForm\"\n        novalidate>\n    <div cdsModalContent>\n      <!-- Hostname -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"hostname\"\n                        [invalid]=\"!hostForm.controls.hostname.valid && hostForm.controls.hostname.dirty\"\n                        [invalidText]=\"hostnameError\">\n          <ng-container i18n>Hostname (required)</ng-container>\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"mon-123\"\n                 id=\"hostname\"\n                 name=\"hostname\"\n                 formControlName=\"hostname\"\n                 autofocus\n                 [invalid]=\"!hostForm.controls.hostname.valid && hostForm.controls.hostname.dirty\"\n                 (keyup)=\"checkHostNameValue()\">\n        </cds-text-label>\n        <ng-template #hostnameError>\n          <span *ngIf=\"hostForm.showError('hostname', formDir, 'required')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n> This field is required. </ng-container>\n          </span>\n          <span *ngIf=\"hostForm.showError('hostname', formDir, 'uniqueName')\"\n                class=\"invalid-feedback\">\n            <ng-container i18n> The chosen hostname is already in use. </ng-container>\n          </span>\n        </ng-template>\n        <cd-help-text>\n          To add multiple hosts at once, you can enter:\n          <ul cdsList>\n            <li cdsListItem\n                i18n>a comma-separated list of hostnames <b>(e.g.: example-01,example-02,example-03)</b>,</li>\n            <li cdsListItem\n                i18n>a range expression <b>(e.g.: example-[01-03].ceph)</b>,</li>\n            <li cdsListItem\n                i18n>a comma separated range expression <b>(e.g.: example-[01-05].lab.com,example2-[1-4].lab.com,example3-[001-006].lab.com)</b></li>\n          </ul>\n        </cd-help-text>\n      </div>\n      <!-- Address -->\n      <div class=\"form-item\"\n           *ngIf=\"!hostPattern\">\n        <cds-text-label label=\"Network address\"\n                        for=\"addr\"\n                        i18n>Network address\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"192.168.0.1\"\n                 id=\"addr\"\n                 name=\"addr\"\n                 formControlName=\"addr\"/>\n        </cds-text-label>\n        <ng-template #hostaddrError>\n          <span *ngIf=\"hostForm.showError('addr', formDir, 'pattern')\">\n            <ng-container i18n> The value is not a valid IP address. </ng-container>\n          </span>\n        </ng-template>\n      </div>\n      <!-- Labels -->\n      <div class=\"form-item\">\n        <cds-combo-box label=\"Labels\"\n                       type=\"multi\"\n                       selectionFeedback=\"top-after-reopen\"\n                       for=\"labels\"\n                       name=\"labels\"\n                       formControlName=\"labels\"\n                       placeholder=\"Select Labels...\"\n                       i18n-placeholder\n                       [appendInline]=\"true\"\n                       [items]=\"labelsOption\"\n                       itemValueKey=\"content\"\n                       id=\"labels\"\n                       cdDynamicInputCombobox\n                       (updatedItems)=\"labelsOption = $event\"\n                       i18n>\n          <cds-dropdown-list></cds-dropdown-list>\n        </cds-combo-box>\n      </div>\n      <!-- Maintenance Mode -->\n      <div *ngIf=\"!hideMaintenance\">\n        <cds-checkbox id=\"maintenance\"\n                      type=\"checkbox\"\n                      formControlName=\"maintenance\"\n                      i18n>Maintenance Mode\n        </cds-checkbox>\n      </div>\n    </div>\n    <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                          [form]=\"hostForm\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          [modalForm]=\"true\">\n    </cd-form-button-panel>\n  </form>\n</ng-container>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport expand from 'brace-expansion';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { ComboBoxItem } from '~/app/shared/models/combo-box.model';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst HOSTS = 'hosts';\n@Component({\n  selector: 'cd-host-form',\n  templateUrl: './host-form.component.html',\n  styleUrls: ['./host-form.component.scss']\n})\nexport class HostFormComponent extends CdForm implements OnInit {\n  open: boolean = false;\n  hostForm: CdFormGroup;\n  action: string;\n  resource: string;\n  hostnames: string[];\n  hostnameArray: string[] = [];\n  addr: string;\n  status: string;\n  allLabels: string[];\n  pageURL: string;\n  hostPattern = false;\n  labelsOption: ComboBoxItem[] = [];\n\n  messages = new SelectMessages({\n    empty: $localize`There are no labels.`,\n    filter: $localize`Filter or add labels`,\n    add: $localize`Add label`\n  });\n\n  constructor(\n    private router: Router,\n    private actionLabels: ActionLabelsI18n,\n    private hostService: HostService,\n    private taskWrapper: TaskWrapperService,\n    private route: ActivatedRoute,\n\n    @Inject('hideMaintenance') @Optional() public hideMaintenance?: boolean\n  ) {\n    super();\n    this.resource = $localize`host`;\n    this.action = this.actionLabels.ADD;\n  }\n\n  ngOnInit() {\n    if (this.router.url.includes(HOSTS)) {\n      this.pageURL = HOSTS;\n    }\n    this.open = this.route.outlet === 'modal';\n    this.createForm();\n    const hostContext = new CdTableFetchDataContext(() => undefined);\n    this.hostService.list(hostContext.toParams(), 'false').subscribe((resp: any[]) => {\n      this.hostnames = resp.map((host) => {\n        return host['hostname'];\n      });\n      this.loadingReady();\n    });\n\n    this.hostService.getLabels().subscribe((resp: string[]) => {\n      const uniqueLabels = new Set(resp.concat(this.hostService.predefinedLabels));\n      this.labelsOption = Array.from(uniqueLabels).map((label) => {\n        return { name: label, content: label };\n      });\n    });\n  }\n\n  // check if hostname is a single value or pattern to hide network address field\n  checkHostNameValue() {\n    const hostNames = this.hostForm.get('hostname').value;\n    hostNames.match(/[()\\[\\]{},]/g) ? (this.hostPattern = true) : (this.hostPattern = false);\n  }\n\n  private createForm() {\n    this.hostForm = new CdFormGroup({\n      hostname: new UntypedFormControl('', {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (hostname: string) => {\n            return this.hostnames && this.hostnames.indexOf(hostname) !== -1;\n          })\n        ]\n      }),\n      addr: new UntypedFormControl('', {\n        validators: [CdValidators.ip()]\n      }),\n      labels: new UntypedFormControl([]),\n      maintenance: new UntypedFormControl()\n    });\n  }\n\n  private isCommaSeparatedPattern(hostname: string) {\n    // eg. ceph-node-01.cephlab.com,ceph-node-02.cephlab.com\n    return hostname.includes(',');\n  }\n\n  private isRangeTypePattern(hostname: string) {\n    // check if it is a range expression or comma separated range expression\n    // eg. ceph-mon-[01-05].lab.com,ceph-osd-[02-08].lab.com,ceph-rgw-[01-09]\n    return hostname.includes('[') && hostname.includes(']') && !hostname.match(/(?![^(]*\\)),/g);\n  }\n\n  private replaceBraces(hostname: string) {\n    // pattern to replace range [0-5] to [0..5](valid expression for brace expansion)\n    // replace any kind of brackets with curly braces\n    return hostname\n      .replace(/(\\d)\\s*-\\s*(\\d)/g, '$1..$2')\n      .replace(/\\(/g, '{')\n      .replace(/\\)/g, '}')\n      .replace(/\\[/g, '{')\n      .replace(/]/g, '}');\n  }\n\n  // expand hostnames in case hostname is a pattern\n  private checkHostNamePattern(hostname: string) {\n    if (this.isRangeTypePattern(hostname)) {\n      const hostnameRange = this.replaceBraces(hostname);\n      this.hostnameArray = expand(hostnameRange);\n    } else if (this.isCommaSeparatedPattern(hostname)) {\n      let hostArray = [];\n      hostArray = hostname.split(',');\n      hostArray.forEach((host: string) => {\n        if (this.isRangeTypePattern(host)) {\n          const hostnameRange = this.replaceBraces(host);\n          this.hostnameArray = this.hostnameArray.concat(expand(hostnameRange));\n        } else {\n          this.hostnameArray.push(host);\n        }\n      });\n    } else {\n      // single hostname\n      this.hostnameArray.push(hostname);\n    }\n  }\n\n  submit() {\n    const hostname = this.hostForm.get('hostname').value;\n    this.checkHostNamePattern(hostname);\n    this.addr = this.hostForm.get('addr').value;\n    this.status = this.hostForm.get('maintenance').value ? 'maintenance' : '';\n    this.allLabels = this.hostForm.get('labels').value;\n    if (this.pageURL !== HOSTS && !this.allLabels.includes('_no_schedule')) {\n      this.allLabels.push('_no_schedule');\n    }\n    this.hostnameArray.forEach((hostName: string) => {\n      this.taskWrapper\n        .wrapTaskAroundCall({\n          task: new FinishedTask('host/' + URLVerbs.ADD, {\n            hostname: hostName\n          }),\n          call: this.hostService.create(hostName, this.addr, this.allLabels, this.status)\n        })\n        .subscribe({\n          error: () => {\n            this.hostForm.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.closeModal();\n          }\n        });\n    });\n  }\n\n  closeModal(): void {\n    this.pageURL === HOSTS\n      ? this.router.navigate([this.pageURL, { outlets: { modal: null } }])\n      : (this.open = false);\n  }\n}\n","<cd-table *ngIf=\"hostname || osdId !== null\"\n          [data]=\"devices\"\n          [columns]=\"columns\"></cd-table>\n\n<cd-alert-panel type=\"warning\"\n                *ngIf=\"hostname === '' && osdId === null\"\n                i18n>Neither hostname nor OSD ID given</cd-alert-panel>\n\n<ng-template #deviceLocation\n             let-value=\"data.value\">\n  <ng-container *ngFor=\"let location of value\">\n    <cd-label *ngIf=\"location.host === hostname\"\n              [value]=\"location.dev\"></cd-label>\n  </ng-container>\n</ng-template>\n\n<ng-template #daemonName\n             let-value=\"data.value\">\n  <ng-container [ngTemplateOutlet]=\"osdId !== null ? osdIdDaemon : readableDaemons\"\n                [ngTemplateOutletContext]=\"{daemons: value}\">\n  </ng-container>\n</ng-template>\n\n<ng-template #osdIdDaemon\n             let-daemons=\"daemons\">\n  <ng-container *ngFor=\"let daemon of daemons\">\n    <cd-label *ngIf=\"daemon.includes(osdId)\"\n              [value]=\"daemon\"></cd-label>\n  </ng-container>\n</ng-template>\n\n<ng-template #readableDaemons\n             let-daemons=\"daemons\">\n  <ng-container *ngFor=\"let daemon of daemons\">\n    <cd-label class=\"me-1\"\n              [value]=\"daemon\"></cd-label>\n  </ng-container>\n</ng-template>\n\n\n<ng-template #lifeExpectancy\n             let-value=\"data.value\">\n  <span *ngIf=\"!value?.life_expectancy_enabled\"\n        i18n>{{ \"\" | notAvailable }}</span>\n  <span *ngIf=\"value?.min && !value?.max\">&gt; {{value.min | i18nPlural: translationMapping}}</span>\n  <span *ngIf=\"value?.max && !value?.min\">&lt; {{value.max | i18nPlural: translationMapping}}</span>\n  <span *ngIf=\"value?.max && value?.min\">{{value.min}} to {{value.max | i18nPlural: translationMapping}}</span>\n</ng-template>\n\n<ng-template #lifeExpectancyTimestamp\n             let-value=\"data.value\">\n  {{value}}\n</ng-template>\n","import { DatePipe } from '@angular/common';\nimport { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdDevice } from '~/app/shared/models/devices';\n\n@Component({\n  selector: 'cd-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnChanges, OnInit {\n  @Input()\n  hostname = '';\n  @Input()\n  osdId: number = null;\n\n  @Input()\n  osdList = false;\n\n  @ViewChild('deviceLocation', { static: true })\n  locationTemplate: TemplateRef<any>;\n  @ViewChild('daemonName', { static: true })\n  daemonNameTemplate: TemplateRef<any>;\n  @ViewChild('lifeExpectancy', { static: true })\n  lifeExpectancyTemplate: TemplateRef<any>;\n  @ViewChild('lifeExpectancyTimestamp', { static: true })\n  lifeExpectancyTimestampTemplate: TemplateRef<any>;\n\n  devices: CdDevice[] = null;\n  columns: CdTableColumn[] = [];\n  translationMapping = {\n    '=1': '# week',\n    other: '# weeks'\n  };\n\n  constructor(\n    private hostService: HostService,\n    private datePipe: DatePipe,\n    private osdService: OsdService\n  ) {}\n\n  ngOnInit() {\n    this.columns = [\n      { prop: 'devid', name: $localize`Device ID`, minWidth: 200 },\n      {\n        prop: 'state',\n        name: $localize`State of Health`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            good: { value: $localize`Good`, class: 'badge-success' },\n            warning: { value: $localize`Warning`, class: 'badge-warning' },\n            bad: { value: $localize`Bad`, class: 'badge-danger' },\n            stale: { value: $localize`Stale`, class: 'badge-info' },\n            unknown: { value: $localize`Unknown`, class: 'badge-dark' }\n          }\n        }\n      },\n      {\n        prop: 'life_expectancy_weeks',\n        name: $localize`Life Expectancy`,\n        cellTemplate: this.lifeExpectancyTemplate\n      },\n      {\n        prop: 'life_expectancy_stamp',\n        name: $localize`Prediction Creation Date`,\n        cellTemplate: this.lifeExpectancyTimestampTemplate,\n        pipe: this.datePipe,\n        isHidden: true\n      },\n      { prop: 'location', name: $localize`Device Name`, cellTemplate: this.locationTemplate },\n      { prop: 'daemons', name: $localize`Daemons`, cellTemplate: this.daemonNameTemplate }\n    ];\n  }\n\n  ngOnChanges() {\n    const updateDevicesFn = (devices: CdDevice[]) => (this.devices = devices);\n    if (this.osdList && this.osdId !== null) {\n      this.osdService.getDevices(this.osdId).subscribe(updateDevicesFn);\n    } else if (this.hostname) {\n      this.hostService.getDevices(this.hostname).subscribe(updateDevicesFn);\n    }\n  }\n}\n","<ng-container *ngIf=\"!loading; else isLoading\">\n  <cd-alert-panel *ngIf=\"error\"\n                  type=\"error\"\n                  i18n>Failed to retrieve SMART data.</cd-alert-panel>\n  <cd-alert-panel *ngIf=\"incompatible\"\n                  type=\"warning\"\n                  i18n>The data received has the JSON format version 2.x and is currently incompatible with the\n    dashboard.</cd-alert-panel>\n\n  <ng-container *ngIf=\"!error && !incompatible\">\n    <cd-alert-panel *ngIf=\"data | pipeFunction:isEmpty\"\n                    type=\"info\"\n                    i18n>No SMART data available.</cd-alert-panel>\n\n    <ng-container *ngIf=\"!(data | pipeFunction:isEmpty)\">\n      <nav ngbNav\n           #nav=\"ngbNav\"\n           class=\"nav-tabs\">\n        <ng-container ngbNavItem\n                      *ngFor=\"let device of data | keyvalue\">\n          <a ngbNavLink>{{ device.value.device }} ({{ device.value.identifier }})</a>\n          <ng-template ngbNavContent>\n            <ng-container *ngIf=\"device.value.error; else noError\">\n              <cd-alert-panel id=\"alert-error\"\n                              type=\"warning\">{{ device.value.userMessage }}</cd-alert-panel>\n            </ng-container>\n\n            <ng-template #noError>\n              <cd-alert-panel *ngIf=\"device.value.info?.smart_status | pipeFunction:isEmpty; else hasSmartStatus\"\n                              id=\"alert-self-test-unknown\"\n                              size=\"slim\"\n                              type=\"warning\"\n                              i18n-title\n                              title=\"SMART overall-health self-assessment test result\"\n                              i18n>unknown</cd-alert-panel>\n              <ng-template #hasSmartStatus>\n                <!-- HDD/NVMe self test -->\n                <ng-container *ngIf=\"device.value.info.smart_status.passed; else selfTestFailed\">\n                  <cd-alert-panel id=\"alert-self-test-passed\"\n                                  size=\"slim\"\n                                  type=\"info\"\n                                  i18n-title\n                                  title=\"SMART overall-health self-assessment test result\"\n                                  i18n>passed</cd-alert-panel>\n                </ng-container>\n                <ng-template #selfTestFailed>\n                  <cd-alert-panel id=\"alert-self-test-failed\"\n                                  size=\"slim\"\n                                  type=\"warning\"\n                                  i18n-title\n                                  title=\"SMART overall-health self-assessment test result\"\n                                  i18n>failed</cd-alert-panel>\n                </ng-template>\n              </ng-template>\n            </ng-template>\n\n            <ng-container *ngIf=\"!(device.value.info | pipeFunction:isEmpty) || !(device.value.smart | pipeFunction:isEmpty)\">\n              <nav ngbNav\n                   #innerNav=\"ngbNav\"\n                   class=\"nav-tabs\">\n                <li [ngbNavItem]=\"1\">\n                  <a ngbNavLink\n                     i18n>Device Information</a>\n                  <ng-template ngbNavContent>\n                    <cd-table-key-value *ngIf=\"!(device.value.info | pipeFunction:isEmpty)\"\n                                        [renderObjects]=\"true\"\n                                        [data]=\"device.value.info\"></cd-table-key-value>\n                    <cd-alert-panel *ngIf=\"device.value.info | pipeFunction:isEmpty\"\n                                    id=\"alert-device-info-unavailable\"\n                                    type=\"info\"\n                                    i18n>No device information available for this device.</cd-alert-panel>\n                  </ng-template>\n                </li>\n                <li [ngbNavItem]=\"2\">\n                  <a ngbNavLink\n                     i18n>SMART</a>\n                  <ng-template ngbNavContent>\n                    <cd-table *ngIf=\"device.value.smart?.attributes\"\n                              [data]=\"device.value.smart.attributes.table\"\n                              updateSelectionOnRefresh=\"never\"\n                              [columns]=\"smartDataColumns\"></cd-table>\n                    <cd-table-key-value *ngIf=\"device.value.smart?.scsi_error_counter_log\"\n                                        [renderObjects]=\"true\"\n                                        [data]=\"device.value.smart\"\n                                        updateSelectionOnRefresh=\"never\"></cd-table-key-value>\n                    <cd-table-key-value *ngIf=\"device.value.smart?.nvmeData\"\n                                        [renderObjects]=\"true\"\n                                        [data]=\"device.value.smart.nvmeData\"\n                                        updateSelectionOnRefresh=\"never\"></cd-table-key-value>\n                    <cd-alert-panel *ngIf=\"!device.value.smart?.attributes && !device.value.smart?.nvmeData && !device.value.smart?.scsi_error_counter_log\"\n                                    id=\"alert-device-smart-data-unavailable\"\n                                    type=\"info\"\n                                    i18n>No SMART data available for this device.</cd-alert-panel>\n                  </ng-template>\n                </li>\n              </nav>\n\n              <div [ngbNavOutlet]=\"innerNav\"></div>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </nav>\n\n      <div [ngbNavOutlet]=\"nav\"></div>\n    </ng-container>\n  </ng-container>\n</ng-container>\n<ng-template #isLoading>\n  <cd-loading-panel i18n>SMART data is loading.</cd-loading-panel>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\n\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport {\n  AtaSmartDataV1,\n  IscsiSmartDataV1,\n  NvmeSmartDataV1,\n  SmartDataResult,\n  SmartError,\n  SmartErrorResult\n} from '~/app/shared/models/smart';\n\n@Component({\n  selector: 'cd-smart-list',\n  templateUrl: './smart-list.component.html',\n  styleUrls: ['./smart-list.component.scss']\n})\nexport class SmartListComponent implements OnInit, OnChanges {\n  @ViewChild('innerNav')\n  nav: NgbNav;\n\n  @Input()\n  osdId: number = null;\n  @Input()\n  hostname: string = null;\n\n  loading = false;\n  incompatible = false;\n  error = false;\n\n  data: { [deviceId: string]: SmartDataResult | SmartErrorResult } = {};\n\n  smartDataColumns: CdTableColumn[];\n  scsiSmartDataColumns: CdTableColumn[];\n\n  isEmpty = _.isEmpty;\n\n  constructor(private osdService: OsdService, private hostService: HostService) {}\n\n  isSmartError(data: any): data is SmartError {\n    return _.get(data, 'error') !== undefined;\n  }\n\n  isNvmeSmartData(data: any): data is NvmeSmartDataV1 {\n    return _.get(data, 'device.protocol', '').toLowerCase() === 'nvme';\n  }\n\n  isAtaSmartData(data: any): data is AtaSmartDataV1 {\n    return _.get(data, 'device.protocol', '').toLowerCase() === 'ata';\n  }\n\n  isIscsiSmartData(data: any): data is IscsiSmartDataV1 {\n    return _.get(data, 'device.protocol', '').toLowerCase() === 'scsi';\n  }\n\n  private fetchData(data: any) {\n    const result: { [deviceId: string]: SmartDataResult | SmartErrorResult } = {};\n    _.each(data, (smartData, deviceId) => {\n      if (this.isSmartError(smartData)) {\n        let userMessage = '';\n        if (smartData.smartctl_error_code === -22) {\n          userMessage = $localize`Smartctl has received an unknown argument \\\n(error code ${smartData.smartctl_error_code}). \\\nYou may be using an incompatible version of smartmontools. Version >= 7.0 of \\\nsmartmontools is required to successfully retrieve data.`;\n        } else {\n          userMessage = $localize`An error with error code ${smartData.smartctl_error_code} occurred.`;\n        }\n        const _result: SmartErrorResult = {\n          error: smartData.error,\n          smartctl_error_code: smartData.smartctl_error_code,\n          smartctl_output: smartData.smartctl_output,\n          userMessage: userMessage,\n          device: smartData.dev,\n          identifier: smartData.nvme_vendor\n        };\n        result[deviceId] = _result;\n        return;\n      }\n      // Prepare S.M.A.R.T data\n      if (smartData.json_format_version[0] === 1) {\n        // Version 1.x\n        if (this.isAtaSmartData(smartData)) {\n          result[deviceId] = this.extractAtaData(smartData);\n        } else if (this.isIscsiSmartData(smartData)) {\n          result[deviceId] = this.extractIscsiData(smartData);\n        } else if (this.isNvmeSmartData(smartData)) {\n          result[deviceId] = this.extractNvmeData(smartData);\n        }\n        return;\n      } else {\n        this.incompatible = true;\n      }\n    });\n    this.data = result;\n    this.loading = false;\n  }\n\n  private extractNvmeData(smartData: NvmeSmartDataV1): SmartDataResult {\n    const info = _.omitBy(smartData, (_value: string, key: string) =>\n      ['nvme_smart_health_information_log'].includes(key)\n    );\n    return {\n      info: info,\n      smart: {\n        nvmeData: smartData.nvme_smart_health_information_log\n      },\n      device: smartData.device.name,\n      identifier: smartData.serial_number\n    };\n  }\n\n  private extractIscsiData(smartData: IscsiSmartDataV1): SmartDataResult {\n    const info = _.omitBy(smartData, (_value: string, key: string) =>\n      ['scsi_error_counter_log', 'scsi_grown_defect_list'].includes(key)\n    );\n    return {\n      info: info,\n      smart: {\n        scsi_error_counter_log: smartData.scsi_error_counter_log,\n        scsi_grown_defect_list: smartData.scsi_grown_defect_list\n      },\n      device: info.device.name,\n      identifier: info.serial_number\n    };\n  }\n\n  private extractAtaData(smartData: AtaSmartDataV1): SmartDataResult {\n    const info = _.omitBy(smartData, (_value: string, key: string) =>\n      ['ata_smart_attributes', 'ata_smart_selective_self_test_log', 'ata_smart_data'].includes(key)\n    );\n    return {\n      info: info,\n      smart: {\n        attributes: smartData.ata_smart_attributes,\n        data: smartData.ata_smart_data\n      },\n      device: info.device.name,\n      identifier: info.serial_number\n    };\n  }\n\n  private updateData() {\n    this.loading = true;\n\n    if (this.osdId !== null) {\n      this.osdService.getSmartData(this.osdId).subscribe({\n        next: this.fetchData.bind(this),\n        error: (error) => {\n          error.preventDefault();\n          this.error = error;\n          this.loading = false;\n        }\n      });\n    } else if (this.hostname !== null) {\n      this.hostService.getSmartData(this.hostname).subscribe({\n        next: this.fetchData.bind(this),\n        error: (error) => {\n          error.preventDefault();\n          this.error = error;\n          this.loading = false;\n        }\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.smartDataColumns = [\n      { prop: 'id', name: $localize`ID` },\n      { prop: 'name', name: $localize`Name` },\n      { prop: 'raw.value', name: $localize`Raw` },\n      { prop: 'thresh', name: $localize`Threshold` },\n      { prop: 'value', name: $localize`Value` },\n      { prop: 'when_failed', name: $localize`When Failed` },\n      { prop: 'worst', name: $localize`Worst` }\n    ];\n\n    this.scsiSmartDataColumns = [\n      {\n        prop: 'correction_algorithm_invocations',\n        name: $localize`Correction Algorithm Invocations`\n      },\n      {\n        prop: 'errors_corrected_by_eccdelayed',\n        name: $localize`Errors Corrected by ECC (Delayed)`\n      },\n      { prop: 'errors_corrected_by_eccfast', name: $localize`Errors Corrected by ECC (Fast)` },\n      {\n        prop: 'errors_corrected_by_rereads_rewrites',\n        name: $localize`Errors Corrected by Rereads/Rewrites`\n      },\n      { prop: 'gigabytes_processed', name: $localize`Gigabytes Processed` },\n      { prop: 'total_errors_corrected', name: $localize`Total Errors Corrected` },\n      { prop: 'total_uncorrected_errors', name: $localize`Total Errors Uncorrected` }\n    ];\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.data = {}; // Clear previous data\n    if (changes.osdId) {\n      this.osdId = changes.osdId.currentValue;\n    } else if (changes.hostname) {\n      this.hostname = changes.hostname.currentValue;\n    }\n    this.updateData();\n  }\n}\n","<cd-orchestrator-doc-panel *ngIf=\"showDocPanel\"></cd-orchestrator-doc-panel>\n<ng-container *ngIf=\"orchStatus?.available\">\n  <legend i18n>Physical Disks</legend>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <cd-inventory-devices [devices]=\"devices\"\n                            [hiddenColumns]=\"hostname === undefined ? [] : ['hostname']\"\n                            selectionType=\"single\"\n                            (fetchInventory)=\"refresh()\"\n                            [orchStatus]=\"orchStatus\">\n      </cd-inventory-devices>\n    </div>\n  </div>\n</ng-container>\n","import { Component, Input, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription, timer as observableTimer } from 'rxjs';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { InventoryDevice } from './inventory-devices/inventory-device.model';\n\n@Component({\n  selector: 'cd-inventory',\n  templateUrl: './inventory.component.html',\n  styleUrls: ['./inventory.component.scss']\n})\nexport class InventoryComponent implements OnChanges, OnInit, OnDestroy {\n  // Display inventory page only for this hostname, ignore to display all.\n  @Input() hostname?: string;\n\n  private reloadSubscriber: Subscription;\n  private reloadInterval = 5000;\n  private firstRefresh = true;\n\n  icons = Icons;\n\n  orchStatus: OrchestratorStatus;\n  showDocPanel = false;\n\n  devices: Array<InventoryDevice> = [];\n\n  constructor(\n    private orchService: OrchestratorService,\n    private hostService: HostService,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnInit() {\n    this.orchService.status().subscribe((status) => {\n      this.orchStatus = status;\n      this.showDocPanel = !status.available;\n      if (status.available) {\n        // Create a timer to get cached inventory from the orchestrator.\n        // Do not ask the orchestrator frequently to refresh its cache data because it's expensive.\n        this.ngZone.runOutsideAngular(() => {\n          // start after first pass because the embedded table calls refresh at init.\n          this.reloadSubscriber = observableTimer(\n            this.reloadInterval,\n            this.reloadInterval\n          ).subscribe(() => {\n            this.ngZone.run(() => {\n              this.getInventory(false);\n            });\n          });\n        });\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.reloadSubscriber?.unsubscribe();\n  }\n\n  ngOnChanges() {\n    if (this.orchStatus?.available) {\n      this.devices = [];\n      this.getInventory(false);\n    }\n  }\n\n  getInventory(refresh: boolean) {\n    if (this.hostname === '') {\n      return;\n    }\n    this.hostService.inventoryDeviceList(this.hostname, refresh).subscribe(\n      (devices: InventoryDevice[]) => {\n        this.devices = devices;\n      },\n      () => {\n        this.devices = [];\n      }\n    );\n  }\n\n  refresh() {\n    // Make the first reload (triggered by table) use cached data, and\n    // the remaining reloads (triggered by users) ask orchestrator to refresh inventory.\n    this.getInventory(!this.firstRefresh);\n    this.firstRefresh = false;\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"host-details\">\n    <ng-container ngbNavItem=\"devices\">\n      <a ngbNavLink\n         i18n>Devices</a>\n      <ng-template ngbNavContent>\n        <cd-device-list [hostname]=\"selection['hostname']\"></cd-device-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"inventory\"\n                  *ngIf=\"permissions.hosts.read\">\n      <a ngbNavLink\n         i18n>Physical Disks</a>\n      <ng-template ngbNavContent>\n        <cd-inventory [hostname]=\"selectedHostname\"></cd-inventory>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"daemons\"\n                  *ngIf=\"permissions.hosts.read\">\n      <a ngbNavLink\n         i18n>Daemons</a>\n      <ng-template ngbNavContent>\n        <cd-service-daemon-list [hostname]=\"selectedHostname\"\n                                flag=\"hostDetails\"\n                                [hiddenColumns]=\"['hostname']\">\n        </cd-service-daemon-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"permissions.grafana.read\">\n      <a ngbNavLink\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"Host details\"\n                    [grafanaPath]=\"'host-details?var-ceph_hosts=' + selectedHostname\"\n                    [type]=\"'metrics'\"\n                    uid=\"rtOg0AiWz\"\n                    grafanaStyle=\"four\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"device-health\">\n      <a ngbNavLink\n         i18n>Device health</a>\n      <ng-template ngbNavContent>\n        <cd-smart-list *ngIf=\"selectedHostname; else noHostname\"\n                       [hostname]=\"selectedHostname\"></cd-smart-list>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n\n<ng-template #noHostname>\n  <cd-alert-panel type=\"error\"\n                  i18n>No hostname found.</cd-alert-panel>\n</ng-template>\n","import { Component, Input } from '@angular/core';\n\nimport { Permissions } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-host-details',\n  templateUrl: './host-details.component.html',\n  styleUrls: ['./host-details.component.scss']\n})\nexport class HostDetailsComponent {\n  @Input()\n  permissions: Permissions;\n\n  @Input()\n  selection: any;\n\n  get selectedHostname(): string {\n    return this.selection !== undefined ? this.selection['hostname'] : null;\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\">\n  <ng-container ngbNavItem>\n    <a ngbNavLink\n       i18n>Hosts List</a>\n    <ng-template ngbNavContent>\n      <cd-table #table\n                [data]=\"hosts\"\n                [columns]=\"columns\"\n                columnMode=\"flex\"\n                (fetchData)=\"getHosts($event)\"\n                selectionType=\"single\"\n                [searchableObjects]=\"true\"\n                [hasDetails]=\"hasTableDetails\"\n                [serverSide]=\"true\"\n                [count]=\"count\"\n                [maxLimit]=\"25\"\n                (setExpandedRow)=\"setExpandedRow($event)\"\n                (updateSelection)=\"updateSelection($event)\"\n                [toolHeader]=\"!hideToolHeader\">\n        <div class=\"table-actions\">\n          <cd-table-actions [permission]=\"permissions.hosts\"\n                            [selection]=\"selection\"\n                            class=\"btn-group\"\n                            id=\"host-actions\"\n                            [tableActions]=\"tableActions\">\n          </cd-table-actions>\n          <cd-table-actions [permission]=\"permissions.hosts\"\n                            [selection]=\"selection\"\n                            btnColor=\"light\"\n                            class=\"btn-group\"\n                            [tableActions]=\"expandClusterActions\">\n          </cd-table-actions>\n        </div>\n        <cd-host-details *cdTableDetail\n                         [permissions]=\"permissions\"\n                         [selection]=\"expandedRow\">\n        </cd-host-details>\n      </cd-table>\n    </ng-template>\n  </ng-container>\n  <ng-container ngbNavItem\n                *ngIf=\"permissions.grafana.read\">\n  </ng-container>\n  <ng-container ngbNavItem\n                *ngIf=\"permissions.grafana.read\">\n    <a ngbNavLink\n       i18n>Overall Performance</a>\n    <ng-template ngbNavContent>\n      <cd-grafana i18n-title\n                  title=\"Host overview\"\n                  [grafanaPath]=\"'host-overview?'\"\n                  [type]=\"'metrics'\"\n                  uid=\"y0KGL0iZz\"\n                  grafanaStyle=\"two\">\n      </cd-grafana>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n\n<ng-template #servicesTpl\n             let-services=\"data.value\">\n  <span *ngFor=\"let service of services\">\n    <cd-label [key]=\"service['type']\"\n              [value]=\"service['count']\"\n              class=\"me-1\"></cd-label>\n  </span>\n</ng-template>\n\n<ng-template #hostNameTpl\n             let-row=\"data.row\">\n  <span [ngClass]=\"row\">\n    {{ row.hostname }}\n  </span><br>\n  <span class=\"text-muted fst-italic\"\n        *ngIf=\"row.addr\">\n    ({{ row.addr }})\n  </span>\n</ng-template>\n\n<ng-template #maintenanceConfirmTpl>\n  <div *ngFor=\"let msg of errorMessage; let last=last\">\n    <ul *ngIf=\"!last || errorMessage.length === '1'\">\n      <li i18n>{{ msg }}</li>\n    </ul>\n  </div>\n  <ng-container i18n\n                *ngIf=\"showSubmit\">Are you sure you want to continue?</ng-container>\n</ng-template>\n\n\n<ng-template #hostMetricTmpl\n             let-value=\"data.value\">\n  <div *ngIf=\"validValue(value)\">\n    <span>{{ value }}</span>\n  </div>\n  <div *ngIf=\"!validValue(value)\">\n    <span ngbTooltip=\"Not available. Data could not be fetched from Ceph\">-</span>\n  </div>\n</ng-template>\n\n<ng-template #hostDimlessTmpl\n             let-value=\"data.value\">\n  <div *ngIf=\"!validValue(value)\">\n    <span ngbTooltip=\"Not available. Data could not be fetched from Ceph\">-</span>\n  </div>\n  <div *ngIf=\"validValue(value)\">\n    <span>{{ value | dimlessBinary }}</span>\n  </div>\n</ng-template>\n\n<ng-template #orchTmpl>\n  <span i18n\n        i18n-ngbTooltip\n        ngbTooltip=\"Data will be available only if Orchestrator is available.\">-</span>\n</ng-template>\n\n<ng-template #flashTmpl>\n  <span i18n\n        i18n-ngbTooltip\n        ngbTooltip=\"SSD, NVMEs\">Flash</span>\n</ng-template>\n<router-outlet name=\"modal\"></router-outlet>\n","import { Component, Input, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { OrchestratorFeature } from '~/app/shared/models/orchestrator.enum';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { EmptyPipe } from '~/app/shared/pipes/empty.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { CdTableServerSideService } from '~/app/shared/services/cd-table-server-side.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { HostFormComponent } from './host-form/host-form.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nconst BASE_URL = 'hosts';\n\n@Component({\n  selector: 'cd-hosts',\n  templateUrl: './hosts.component.html',\n  styleUrls: ['./hosts.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class HostsComponent extends ListWithDetails implements OnDestroy, OnInit {\n  private sub = new Subscription();\n\n  @ViewChild(TableComponent)\n  table: TableComponent;\n  @ViewChild('servicesTpl', { static: true })\n  public servicesTpl: TemplateRef<any>;\n  @ViewChild('hostMetricTmpl', { static: true })\n  public hostMetricTmpl: TemplateRef<any>;\n  @ViewChild('hostDimlessTmpl', { static: true })\n  public hostDimlessTmpl: TemplateRef<any>;\n  @ViewChild('maintenanceConfirmTpl', { static: true })\n  maintenanceConfirmTpl: TemplateRef<any>;\n  @ViewChild('orchTmpl', { static: true })\n  orchTmpl: TemplateRef<any>;\n  @ViewChild('flashTmpl', { static: true })\n  flashTmpl: TemplateRef<any>;\n  @ViewChild('hostNameTpl', { static: true })\n  hostNameTpl: TemplateRef<any>;\n\n  @Input()\n  hiddenColumns: string[] = [];\n\n  @Input()\n  hideMaintenance = false;\n\n  @Input()\n  hasTableDetails = true;\n\n  @Input()\n  hideToolHeader = false;\n\n  @Input()\n  showGeneralActionsOnly = false;\n\n  @Input()\n  showExpandClusterBtn = true;\n\n  @Input()\n  showInlineActions = true;\n\n  permissions: Permissions;\n  columns: Array<CdTableColumn> = [];\n  hosts: Array<object> = [];\n  isLoadingHosts = false;\n  cdParams = { fromLink: '/hosts' };\n  tableActions: CdTableAction[];\n  expandClusterActions: CdTableAction[];\n  selection = new CdTableSelection();\n  modalRef: NgbModalRef;\n  isExecuting = false;\n  errorMessage: string;\n  enableMaintenanceBtn: boolean;\n  enableDrainBtn: boolean;\n  bsModalRef: NgbModalRef;\n\n  icons = Icons;\n  private tableContext: CdTableFetchDataContext = null;\n  count = 5;\n\n  messages = {\n    nonOrchHost: $localize`The feature is disabled because the selected host is not managed by Orchestrator.`\n  };\n\n  orchStatus: OrchestratorStatus;\n  actionOrchFeatures = {\n    add: [OrchestratorFeature.HOST_ADD],\n    edit: [OrchestratorFeature.HOST_LABEL_ADD, OrchestratorFeature.HOST_LABEL_REMOVE],\n    remove: [OrchestratorFeature.HOST_REMOVE],\n    maintenance: [\n      OrchestratorFeature.HOST_MAINTENANCE_ENTER,\n      OrchestratorFeature.HOST_MAINTENANCE_EXIT\n    ],\n    drain: [OrchestratorFeature.HOST_DRAIN]\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private emptyPipe: EmptyPipe,\n    private hostService: HostService,\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapper: TaskWrapperService,\n    private router: Router,\n    private notificationService: NotificationService,\n    private orchService: OrchestratorService,\n    private cdsModalService: ModalCdsService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n    this.expandClusterActions = [\n      {\n        name: this.actionLabels.EXPAND_CLUSTER,\n        permission: 'create',\n        buttonKind: 'secondary',\n        icon: Icons.expand,\n        routerLink: '/expand-cluster',\n        disable: (selection: CdTableSelection) => this.getDisable('add', selection),\n        visible: () => this.showExpandClusterBtn\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.ADD,\n        permission: 'create',\n        icon: Icons.add,\n        click: () =>\n          this.router.url.includes('/hosts')\n            ? this.router.navigate([BASE_URL, { outlets: { modal: [URLVerbs.ADD] } }])\n            : (this.bsModalRef = this.cdsModalService.show(HostFormComponent, {\n                hideMaintenance: this.hideMaintenance\n              })),\n        disable: (selection: CdTableSelection) => this.getDisable('add', selection)\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.editAction(),\n        disable: (selection: CdTableSelection) => this.getDisable('edit', selection)\n      },\n      {\n        name: this.actionLabels.START_DRAIN,\n        permission: 'update',\n        icon: Icons.exit,\n        click: () => this.hostDrain(),\n        disable: (selection: CdTableSelection) =>\n          this.getDisable('drain', selection) || !this.enableDrainBtn,\n        visible: () => !this.showGeneralActionsOnly && this.enableDrainBtn\n      },\n      {\n        name: this.actionLabels.STOP_DRAIN,\n        permission: 'update',\n        icon: Icons.exit,\n        click: () => this.hostDrain(true),\n        disable: (selection: CdTableSelection) =>\n          this.getDisable('drain', selection) || this.enableDrainBtn,\n        visible: () => !this.showGeneralActionsOnly && !this.enableDrainBtn\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteAction(),\n        disable: (selection: CdTableSelection) => this.getDisable('remove', selection)\n      },\n      {\n        name: this.actionLabels.ENTER_MAINTENANCE,\n        permission: 'update',\n        icon: Icons.enter,\n        click: () => this.hostMaintenance(),\n        disable: (selection: CdTableSelection) =>\n          this.getDisable('maintenance', selection) ||\n          this.isExecuting ||\n          this.enableMaintenanceBtn,\n        visible: () => !this.showGeneralActionsOnly && !this.enableMaintenanceBtn\n      },\n      {\n        name: this.actionLabels.EXIT_MAINTENANCE,\n        permission: 'update',\n        icon: Icons.exit,\n        click: () => this.hostMaintenance(),\n        disable: (selection: CdTableSelection) =>\n          this.getDisable('maintenance', selection) ||\n          this.isExecuting ||\n          !this.enableMaintenanceBtn,\n        visible: () => !this.showGeneralActionsOnly && this.enableMaintenanceBtn\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Hostname`,\n        prop: 'hostname',\n        flexGrow: 1,\n        cellTemplate: this.hostNameTpl\n      },\n      {\n        name: $localize`Service Instances`,\n        prop: 'service_instances',\n        flexGrow: 1.5,\n        cellTemplate: this.servicesTpl\n      },\n      {\n        name: $localize`Labels`,\n        prop: 'labels',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          class: 'badge-dark'\n        }\n      },\n      {\n        name: $localize`Status`,\n        prop: 'status',\n        flexGrow: 0.8,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            maintenance: { class: 'badge-warning' },\n            available: { class: 'badge-success' }\n          }\n        }\n      },\n      {\n        name: $localize`Model`,\n        prop: 'model',\n        flexGrow: 1\n      },\n      {\n        name: $localize`CPUs`,\n        prop: 'cpu_count',\n        cellTemplate: this.hostMetricTmpl,\n        flexGrow: 0.3\n      },\n      {\n        name: $localize`Cores`,\n        prop: 'cpu_cores',\n        cellTemplate: this.hostMetricTmpl,\n        flexGrow: 0.3\n      },\n      {\n        name: $localize`Total Memory`,\n        prop: 'memory_total_bytes',\n        cellTemplate: this.hostDimlessTmpl,\n        flexGrow: 0.4\n      },\n      {\n        name: $localize`Raw Capacity`,\n        prop: 'raw_capacity',\n        cellTemplate: this.hostDimlessTmpl,\n        flexGrow: 0.5\n      },\n      {\n        name: $localize`HDDs`,\n        prop: 'hdd_count',\n        cellTemplate: this.hostMetricTmpl,\n        flexGrow: 0.3\n      },\n      {\n        name: $localize`Flash`,\n        prop: 'flash_count',\n        headerTemplate: this.flashTmpl,\n        cellTemplate: this.hostMetricTmpl,\n        flexGrow: 0.3\n      },\n      {\n        name: $localize`NICs`,\n        prop: 'nic_count',\n        cellTemplate: this.hostMetricTmpl,\n        flexGrow: 0.3\n      }\n    ];\n\n    this.columns = this.columns.filter((col: any) => {\n      return !this.hiddenColumns.includes(col.prop);\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n    this.enableMaintenanceBtn = false;\n    this.enableDrainBtn = false;\n    if (this.selection.hasSelection) {\n      if (this.selection.first().status === 'maintenance') {\n        this.enableMaintenanceBtn = true;\n      }\n\n      if (!this.selection.first().labels.includes('_no_schedule')) {\n        this.enableDrainBtn = true;\n      }\n    }\n  }\n\n  editAction() {\n    this.hostService.getLabels().subscribe((resp: string[]) => {\n      const host = this.selection.first();\n      const labels = new Set(resp.concat(this.hostService.predefinedLabels));\n      const allLabels = Array.from(labels).map((label) => {\n        return { content: label, selected: host['labels'].includes(label) };\n      });\n      this.cdsModalService.show(FormModalComponent, {\n        titleText: $localize`Edit Host: ${host.hostname}`,\n        fields: [\n          {\n            type: 'select-badges',\n            name: 'labels',\n            value: host['labels'],\n            label: $localize`Labels`,\n            typeConfig: {\n              customBadges: true,\n              options: allLabels,\n              messages: new SelectMessages({\n                empty: $localize`There are no labels.`,\n                filter: $localize`Filter or add labels`,\n                add: $localize`Add label`\n              })\n            }\n          }\n        ],\n        submitButtonText: $localize`Edit Host`,\n        onSubmit: (values: any) => {\n          this.hostService.update(host['hostname'], true, values.labels).subscribe(() => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Updated Host \"${host.hostname}\"`\n            );\n            // Reload the data table content.\n            this.table.refreshBtn();\n          });\n        }\n      });\n    });\n  }\n\n  hostMaintenance() {\n    this.isExecuting = true;\n    const host = this.selection.first();\n    if (host['status'] !== 'maintenance') {\n      this.hostService.update(host['hostname'], false, [], true).subscribe(\n        () => {\n          this.isExecuting = false;\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`\"${host.hostname}\" moved to maintenance`\n          );\n          this.table.refreshBtn();\n        },\n        (error) => {\n          this.isExecuting = false;\n          this.errorMessage = error.error['detail'].split(/\\n/);\n          error.preventDefault();\n          if (\n            error.error['detail'].includes('WARNING') &&\n            !error.error['detail'].includes('It is NOT safe to stop') &&\n            !error.error['detail'].includes('ALERT') &&\n            !error.error['detail'].includes('unsafe to stop')\n          ) {\n            const modalVariables = {\n              titleText: $localize`Warning`,\n              buttonText: $localize`Continue`,\n              warning: true,\n              bodyTpl: this.maintenanceConfirmTpl,\n              showSubmit: true,\n              onSubmit: () => {\n                this.hostService.update(host['hostname'], false, [], true, true).subscribe(\n                  () => this.cdsModalService.dismissAll(),\n                  () => this.cdsModalService.dismissAll()\n                );\n              }\n            };\n            this.modalRef = this.cdsModalService.show(ConfirmationModalComponent, modalVariables);\n          } else {\n            this.notificationService.show(\n              NotificationType.error,\n              $localize`\"${host.hostname}\" cannot be put into maintenance`,\n              $localize`${error.error['detail']}`\n            );\n          }\n        }\n      );\n    } else {\n      this.hostService.update(host['hostname'], false, [], true).subscribe(() => {\n        this.isExecuting = false;\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`\"${host.hostname}\" has exited maintenance`\n        );\n        this.table.refreshBtn();\n      });\n    }\n  }\n\n  hostDrain(stop = false) {\n    const host = this.selection.first();\n    if (stop) {\n      const index = host['labels'].indexOf('_no_schedule', 0);\n      host['labels'].splice(index, 1);\n      this.hostService.update(host['hostname'], true, host['labels']).subscribe(() => {\n        this.notificationService.show(\n          NotificationType.info,\n          $localize`\"${host['hostname']}\" stopped draining`\n        );\n        this.table.refreshBtn();\n      });\n    } else {\n      this.hostService.update(host['hostname'], false, [], false, false, true).subscribe(() => {\n        this.notificationService.show(\n          NotificationType.info,\n          $localize`\"${host['hostname']}\" started draining`\n        );\n        this.table.refreshBtn();\n      });\n    }\n  }\n\n  getDisable(\n    action: 'add' | 'edit' | 'remove' | 'maintenance' | 'drain',\n    selection: CdTableSelection\n  ): boolean | string {\n    if (\n      action === 'remove' ||\n      action === 'edit' ||\n      action === 'maintenance' ||\n      action === 'drain'\n    ) {\n      if (!selection?.hasSingleSelection) {\n        return true;\n      }\n      if (!_.every(selection.selected, 'sources.orchestrator')) {\n        return this.messages.nonOrchHost;\n      }\n    }\n    return this.orchService.getTableActionDisableDesc(\n      this.orchStatus,\n      this.actionOrchFeatures[action]\n    );\n  }\n\n  deleteAction() {\n    const hostname = this.selection.first().hostname;\n    this.modalRef = this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'Host',\n      itemNames: [hostname],\n      actionDescription: 'remove',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('host/remove', { hostname: hostname }),\n          call: this.hostService.delete(hostname)\n        })\n    });\n  }\n\n  checkHostsFactsAvailable() {\n    const orchFeatures = this.orchStatus.features;\n    if (!_.isEmpty(orchFeatures)) {\n      if (orchFeatures.get_facts.available) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  transformHostsData() {\n    if (this.checkHostsFactsAvailable()) {\n      _.forEach(this.hosts, (hostKey) => {\n        hostKey['memory_total_bytes'] = this.emptyPipe.transform(hostKey['memory_total_kb'] * 1024);\n        hostKey['raw_capacity'] = this.emptyPipe.transform(\n          hostKey['hdd_capacity_bytes'] + hostKey['flash_capacity_bytes']\n        );\n      });\n    } else {\n      // mark host facts columns unavailable\n      for (let column = 4; column < this.columns.length; column++) {\n        this.columns[column]['cellTemplate'] = this.orchTmpl;\n      }\n    }\n  }\n\n  getHosts(context: CdTableFetchDataContext) {\n    if (context !== null) {\n      this.tableContext = context;\n    }\n    if (this.tableContext == null) {\n      this.tableContext = new CdTableFetchDataContext(() => undefined);\n    }\n    if (this.isLoadingHosts) {\n      return;\n    }\n    this.isLoadingHosts = true;\n    this.sub = this.orchService\n      .status()\n      .pipe(\n        mergeMap((orchStatus) => {\n          this.orchStatus = orchStatus;\n          const factsAvailable = this.checkHostsFactsAvailable();\n          return this.hostService.list(this.tableContext?.toParams(), factsAvailable.toString());\n        })\n      )\n      .subscribe(\n        (hostList: any[]) => {\n          this.hosts = hostList;\n          this.hosts.forEach((host: object) => {\n            if (host['status'] === '') {\n              host['status'] = 'available';\n            }\n          });\n          this.transformHostsData();\n          this.isLoadingHosts = false;\n          if (this.hosts.length > 0) {\n            this.count = CdTableServerSideService.getCount(hostList[0]);\n          } else {\n            this.count = 0;\n          }\n        },\n        () => {\n          this.isLoadingHosts = false;\n          context.error();\n        }\n      );\n  }\n\n  validValue(value: any) {\n    // Check if value is a number(int or float) and that it isn't null\n    return (\n      Number(value) == value &&\n      value % 1 == 0 &&\n      value !== undefined &&\n      value !== null &&\n      value !== ''\n    );\n  }\n}\n","<div cdsRow>\n  <div cdsCol>\n    <fieldset>\n      <legend class=\"cd-header\"\n              i18n>Cluster Resources</legend>\n      <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\">\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold\">Hosts</td>\n            <td>{{ hostsCount }}</td>\n          </tr>\n          <tr *ngIf=\"!isSimpleDeployment; else simpleDeploymentTextTpl\">\n            <td>\n              <dl>\n                <dt>\n                  <p i18n>Storage Capacity</p>\n                </dt>\n                <dd>\n                  <p i18n>Number of devices</p>\n                </dd>\n                <dd>\n                  <p i18n>Raw capacity</p>\n                </dd>\n              </dl>\n            </td>\n            <td class=\"pt-5\"><p>{{ totalDevices }}</p><p>\n              {{ totalCapacity | dimlessBinary }}</p></td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">CPUs</td>\n            <td>{{ totalCPUs | empty }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">Memory</td>\n            <td>{{ totalMemory | empty }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </fieldset>\n  </div>\n</div>\n<div cdsRow>\n  <div cdsCol>\n    <legend i18n\n            class=\"cd-header\">Host Details</legend>\n    <cd-hosts [hiddenColumns]=\"['service_instances', 'status']\"\n              [hideToolHeader]=\"true\"\n              [hasTableDetails]=\"false\"\n              [showGeneralActionsOnly]=\"true\"\n              [showExpandClusterBtn]=\"false\"\n              [showInlineActions]=\"false\">\n    </cd-hosts>\n  </div>\n</div>\n<ng-template #simpleDeploymentTextTpl>\n  <tr>\n    <td>\n      <dl>\n        <dt>\n          <p i18n>Storage Capacity</p>\n        </dt>\n        <dd>\n          <p i18n>{{deploymentDescText}}</p>\n        </dd>\n      </dl>\n    </td>\n  </tr>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { WizardStepsService } from '~/app/shared/services/wizard-steps.service';\n\n@Component({\n  selector: 'cd-create-cluster-review',\n  templateUrl: './create-cluster-review.component.html',\n  styleUrls: ['./create-cluster-review.component.scss']\n})\nexport class CreateClusterReviewComponent implements OnInit {\n  hosts: object[] = [];\n  hostsCount: number;\n  totalDevices: number;\n  totalCapacity = 0;\n  services: Array<CephServiceSpec> = [];\n  totalCPUs = 0;\n  totalMemory = 0;\n  deploymentDescText: string;\n  isSimpleDeployment = true;\n\n  constructor(\n    public wizardStepsService: WizardStepsService,\n    public cephServiceService: CephServiceService,\n    private dimlessBinary: DimlessBinaryPipe,\n    public hostService: HostService,\n    private osdService: OsdService\n  ) {}\n\n  ngOnInit() {\n    let dataDevices = 0;\n    let dataDeviceCapacity = 0;\n    let walDevices = 0;\n    let walDeviceCapacity = 0;\n    let dbDevices = 0;\n    let dbDeviceCapacity = 0;\n\n    this.isSimpleDeployment = this.osdService.isDeployementModeSimple;\n    const hostContext = new CdTableFetchDataContext(() => undefined);\n    this.hostService.list(hostContext.toParams(), 'true').subscribe((resp: object[]) => {\n      this.hosts = resp;\n      this.hostsCount = this.hosts.length;\n      _.forEach(this.hosts, (hostKey) => {\n        this.totalCPUs = this.totalCPUs + hostKey['cpu_count'];\n        // convert to bytes\n        this.totalMemory = this.totalMemory + hostKey['memory_total_kb'] * 1024;\n      });\n      this.totalMemory = this.dimlessBinary.transform(this.totalMemory);\n    });\n\n    if (this.osdService.osdDevices['data']) {\n      dataDevices = this.osdService.osdDevices['data']?.length;\n      dataDeviceCapacity = this.osdService.osdDevices['data']['capacity'];\n    }\n\n    if (this.osdService.osdDevices['wal']) {\n      walDevices = this.osdService.osdDevices['wal']?.length;\n      walDeviceCapacity = this.osdService.osdDevices['wal']['capacity'];\n    }\n\n    if (this.osdService.osdDevices['db']) {\n      dbDevices = this.osdService.osdDevices['db']?.length;\n      dbDeviceCapacity = this.osdService.osdDevices['db']['capacity'];\n    }\n\n    if (this.isSimpleDeployment) {\n      this.osdService.getDeploymentOptions().subscribe((optionsObj) => {\n        if (!_.isEmpty(optionsObj)) {\n          Object.keys(optionsObj.options).forEach((option) => {\n            if (\n              this.osdService.selectedFormValues &&\n              this.osdService.selectedFormValues.get('deploymentOption').value === option\n            ) {\n              this.deploymentDescText = optionsObj.options[option].desc;\n            }\n          });\n        }\n      });\n    }\n\n    this.totalDevices = dataDevices + walDevices + dbDevices;\n    this.osdService.osdDevices['totalDevices'] = this.totalDevices;\n    this.totalCapacity = dataDeviceCapacity + walDeviceCapacity + dbDeviceCapacity;\n  }\n}\n","<div class=\"container h-75\"\n     *ngIf=\"startClusterCreation\">\n  <div class=\"h-100 justify-content-center align-items-center\"\n       cdsRow>\n    <div class=\"blank-page\">\n      <!-- htmllint img-req-src=\"false\" -->\n      <img [src]=\"projectConstants.cephLogo\"\n           alt=\"Ceph\"\n           class=\"img-fluid mx-auto d-block\">\n      <h3 class=\"text-center m-2\"\n          i18n>Welcome to {{ projectConstants.projectName }}</h3>\n\n      <div class=\"m-4\">\n        <h4 class=\"text-center\"\n            i18n>Please expand your cluster first</h4>\n        <div class=\"text-center\">\n          <button cdsButton=\"primary\"\n                  name=\"expand-cluster\"\n                  (click)=\"createCluster()\"\n                  aria-label=\"Expand Cluster\"\n                  i18n>Expand Cluster</button>\n          <button cdsButton=\"secondary\"\n                  name=\"skip-cluster-creation\"\n                  aria-label=\"Skip\"\n                  (click)=\"skipClusterCreation()\"\n                  i18n>Skip</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div cdsRow\n     class=\"form\"\n     *ngIf=\"!startClusterCreation\">\n  <div cdsCol\n       [columnNumbers]=\"{'lg': 2, 'md': 2, 'sm': 2}\"\n       class=\"indicator-wrapper\">\n\n    <div class=\"form-header\"\n         i18n>Expand Cluster</div>\n    <cd-wizard [stepsTitle]=\"stepTitles\"></cd-wizard>\n  </div>\n\n  <div cdsCol\n       [columnNumbers]=\"{'lg': 14, 'md': 14, 'sm': 14}\">\n    <ng-container [ngSwitch]=\"currentStep?.stepIndex\">\n      <div *ngSwitchCase=\"0\"\n           class=\"ms-5\">\n        <h4 class=\"title\"\n            i18n>Add Hosts</h4>\n\n        <cd-hosts [hiddenColumns]=\"['service_instances']\"\n                  [hideMaintenance]=\"true\"\n                  [hasTableDetails]=\"false\"\n                  [showGeneralActionsOnly]=\"true\"\n                  [showExpandClusterBtn]=\"false\"></cd-hosts>\n      </div>\n      <div *ngSwitchCase=\"1\"\n           class=\"ms-5\">\n        <h4 class=\"title\"\n            i18n>Create OSDs</h4>\n        <div class=\"alignForm\">\n          <cd-osd-form [hideTitle]=\"true\"\n                       [hideSubmitBtn]=\"true\"\n                       (emitDriveGroup)=\"setDriveGroup($event)\"\n                       (emitDeploymentOption)=\"setDeploymentOptions($event)\"\n                       (emitMode)=\"setDeploymentMode($event)\"></cd-osd-form>\n        </div>\n      </div>\n      <div *ngSwitchCase=\"2\"\n           class=\"ms-5\">\n        <h4 class=\"title\"\n            i18n>Create Services</h4>\n        <cd-services [hasDetails]=\"false\"\n                     [hiddenServices]=\"['mon', 'mgr', 'crash', 'agent']\"\n                     [hiddenColumns]=\"['status.running', 'status.size', 'status.last_refresh']\"\n                     [routedModal]=\"false\"></cd-services>\n      </div>\n      <div *ngSwitchCase=\"3\"\n           class=\"ms-5\">\n        <cd-create-cluster-review></cd-create-cluster-review>\n      </div>\n    </ng-container>\n    <div cdsRow\n         class=\"m-5\">\n      <button cdsButton=\"secondary\"\n              class=\"me-3\"\n              id=\"skipStepBtn\"\n              (click)=\"onSkip()\"\n              aria-label=\"Skip this step\"\n              *ngIf=\"stepTitles[currentStep?.stepIndex]?.label === 'Create OSDs'\"\n              i18n>Skip</button>\n      <cd-back-button buttonType=\"secondary\"\n                      aria-label=\"Close\"\n                      (backAction)=\"onPreviousStep()\"\n                      [name]=\"showCancelButtonLabel()\"></cd-back-button>\n      <button cdsButton=\"primary\"\n              (click)=\"onNextStep()\"\n              aria-label=\"Next\"\n              i18n>{{ showSubmitButtonLabel() }}</button>\n    </div>\n  </div>\n</div>\n\n<ng-template #skipConfirmTpl>\n  <span i18n>You are about to skip the cluster expansion process.\n             You’ll need to <strong>navigate through the menu to add hosts and services.</strong></span>\n\n  <div class=\"mt-4\"\n       i18n>Are you sure you want to continue?</div>\n</ng-template>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { forkJoin, Subscription } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { ClusterService } from '~/app/shared/api/cluster.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { ActionLabelsI18n, AppConstants, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { DeploymentOptions } from '~/app/shared/models/osd-deployment-options';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { WizardStepModel } from '~/app/shared/models/wizard-steps';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { WizardStepsService } from '~/app/shared/services/wizard-steps.service';\nimport { DriveGroup } from '../osd/osd-form/drive-group.model';\nimport { Location } from '@angular/common';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { Step } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-create-cluster',\n  templateUrl: './create-cluster.component.html',\n  styleUrls: ['./create-cluster.component.scss']\n})\nexport class CreateClusterComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('skipConfirmTpl', { static: true })\n  skipConfirmTpl: TemplateRef<any>;\n  currentStep: WizardStepModel;\n  currentStepSub: Subscription;\n  permissions: Permissions;\n  projectConstants: typeof AppConstants = AppConstants;\n  stepTitles: Step[] = [\n    {\n      label: 'Add Hosts'\n    },\n    {\n      label: 'Create OSDs',\n      complete: false\n    },\n    {\n      label: 'Create Services',\n      complete: false\n    },\n    {\n      label: 'Review',\n      complete: false\n    }\n  ];\n  startClusterCreation = false;\n  observables: any = [];\n  modalRef: NgbModalRef;\n  driveGroup = new DriveGroup();\n  driveGroups: Object[] = [];\n  deploymentOption: DeploymentOptions;\n  selectedOption = {};\n  simpleDeployment = true;\n  stepsToSkip: { [steps: string]: boolean } = {};\n\n  @Output()\n  submitAction = new EventEmitter();\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private wizardStepsService: WizardStepsService,\n    private router: Router,\n    private hostService: HostService,\n    private notificationService: NotificationService,\n    private actionLabels: ActionLabelsI18n,\n    private clusterService: ClusterService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private osdService: OsdService,\n    private route: ActivatedRoute,\n    private location: Location,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n    this.currentStepSub = this.wizardStepsService\n      .getCurrentStep()\n      .subscribe((step: WizardStepModel) => {\n        this.currentStep = step;\n      });\n    this.currentStep.stepIndex = 0;\n  }\n  ngAfterViewInit(): void {\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnInit(): void {\n    this.stepTitles.forEach((steps, index) => {\n      steps.onClick = () => (this.currentStep.stepIndex = index);\n    });\n    this.route.queryParams.subscribe((params) => {\n      // reading 'welcome' value true/false to toggle expand-cluster wizand view and welcome view\n      const showWelcomeScreen = params['welcome'];\n      if (showWelcomeScreen) {\n        this.startClusterCreation = showWelcomeScreen;\n      }\n    });\n\n    this.osdService.getDeploymentOptions().subscribe((options) => {\n      this.deploymentOption = options;\n      this.selectedOption = { option: options.recommended_option, encrypted: false };\n    });\n\n    this.stepTitles.forEach((stepTitle) => {\n      this.stepsToSkip[stepTitle.label] = false;\n    });\n  }\n\n  onStepClick(step: WizardStepModel) {\n    this.wizardStepsService.setCurrentStep(step);\n  }\n\n  createCluster() {\n    this.startClusterCreation = false;\n  }\n\n  skipClusterCreation() {\n    const modalVariables = {\n      titleText: $localize`Warning`,\n      buttonText: $localize`Continue`,\n      warning: true,\n      bodyTpl: this.skipConfirmTpl,\n      showSubmit: true,\n      onSubmit: () => {\n        this.clusterService.updateStatus('POST_INSTALLED').subscribe({\n          error: () => this.modalService.dismissAll(),\n          complete: () => {\n            this.notificationService.show(\n              NotificationType.info,\n              $localize`Cluster expansion skipped by user`\n            );\n            this.router.navigate(['/dashboard']);\n            this.modalService.dismissAll();\n          }\n        });\n      }\n    };\n    this.modalService.show(ConfirmationModalComponent, modalVariables);\n  }\n\n  onSubmit() {\n    if (!this.stepsToSkip['Add Hosts']) {\n      const hostContext = new CdTableFetchDataContext(() => undefined);\n      this.hostService.list(hostContext.toParams(), 'false').subscribe((hosts) => {\n        hosts.forEach((host) => {\n          const index = host['labels'].indexOf('_no_schedule', 0);\n          if (index > -1) {\n            host['labels'].splice(index, 1);\n            this.observables.push(this.hostService.update(host['hostname'], true, host['labels']));\n          }\n        });\n        forkJoin(this.observables)\n          .pipe(\n            finalize(() =>\n              this.clusterService.updateStatus('POST_INSTALLED').subscribe(() => {\n                this.notificationService.show(\n                  NotificationType.success,\n                  $localize`Cluster expansion was successful`\n                );\n                this.router.navigate(['/dashboard']);\n              })\n            )\n          )\n          .subscribe({\n            error: (error) => error.preventDefault()\n          });\n      });\n    }\n\n    if (!this.stepsToSkip['Create OSDs']) {\n      if (this.driveGroup) {\n        const user = this.authStorageService.getUsername();\n        this.driveGroup.setName(`dashboard-${user}-${_.now()}`);\n        this.driveGroups.push(this.driveGroup.spec);\n      }\n\n      if (this.simpleDeployment) {\n        const title = this.deploymentOption?.options[this.selectedOption['option']].title;\n        const trackingId = $localize`${title} deployment`;\n        this.taskWrapper\n          .wrapTaskAroundCall({\n            task: new FinishedTask('osd/' + URLVerbs.CREATE, {\n              tracking_id: trackingId\n            }),\n            call: this.osdService.create([this.selectedOption], trackingId, 'predefined')\n          })\n          .subscribe({\n            error: (error) => error.preventDefault(),\n            complete: () => {\n              this.submitAction.emit();\n            }\n          });\n      } else {\n        if (this.osdService.osdDevices['totalDevices'] > 0) {\n          this.driveGroup.setFeature('encrypted', this.selectedOption['encrypted']);\n          const trackingId = _.join(_.map(this.driveGroups, 'service_id'), ', ');\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('osd/' + URLVerbs.CREATE, {\n                tracking_id: trackingId\n              }),\n              call: this.osdService.create(this.driveGroups, trackingId)\n            })\n            .subscribe({\n              error: (error) => error.preventDefault(),\n              complete: () => {\n                this.submitAction.emit();\n                this.osdService.osdDevices = [];\n              }\n            });\n        }\n      }\n    }\n  }\n\n  setDriveGroup(driveGroup: DriveGroup) {\n    this.driveGroup = driveGroup;\n  }\n\n  setDeploymentOptions(option: object) {\n    this.selectedOption = option;\n  }\n\n  setDeploymentMode(mode: boolean) {\n    this.simpleDeployment = mode;\n  }\n\n  onNextStep() {\n    if (!this.wizardStepsService.isLastStep()) {\n      this.wizardStepsService.getCurrentStep().subscribe((step: WizardStepModel) => {\n        this.currentStep = step;\n      });\n      this.wizardStepsService.moveToNextStep();\n    } else {\n      this.onSubmit();\n    }\n  }\n\n  onPreviousStep() {\n    if (!this.wizardStepsService.isFirstStep()) {\n      this.wizardStepsService.moveToPreviousStep();\n    } else {\n      this.location.back();\n    }\n  }\n\n  onSkip() {\n    const stepTitle = this.stepTitles[this.currentStep.stepIndex];\n    this.stepsToSkip[stepTitle.label] = true;\n    this.onNextStep();\n  }\n\n  showSubmitButtonLabel() {\n    return !this.wizardStepsService.isLastStep()\n      ? this.actionLabels.NEXT\n      : $localize`Expand Cluster`;\n  }\n\n  showCancelButtonLabel() {\n    return !this.wizardStepsService.isFirstStep()\n      ? this.actionLabels.BACK\n      : this.actionLabels.CANCEL;\n  }\n\n  ngOnDestroy(): void {\n    this.currentStepSub.unsubscribe();\n    this.osdService.selectedFormValues = null;\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-sm-12 col-lg-12\">\n    <div class=\"card\">\n      <div class=\"card-header\"\n           i18n>CRUSH map viewer</div>\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-lg-6 tree-container\">\n            <i *ngIf=\"loadingIndicator\"\n               [ngClass]=\"[icons.large, icons.spinner, icons.spin]\"></i>\n            <cds-tree-view #tree\n                           [isMultiSelect]=\"false\"\n                           (select)=\"onNodeSelected($event)\">\n              <ng-template #nodeTemplateRef\n                           let-node=\"node\"\n                           let-depth=\"depth\">\n                <cds-tree-node [node]=\"node\"\n                               [depth]=\"depth\">\n                  <ng-container *ngIf=\"node?.children && node?.children?.length\">\n                    <ng-container *ngFor=\"let child of node.children; let i = index;\">\n                      <!-- Increase the depth by 1 -->\n                      <ng-container *ngTemplateOutlet=\"nodeTemplateRef; context: { node: child, depth: depth + 1 };\">\n                      </ng-container>\n                    </ng-container>\n                  </ng-container>\n                </cds-tree-node>\n              </ng-template>\n              <ng-template #badge\n                           let-data>\n                <span *ngIf=\"data?.status\"\n                      class=\"badge\"\n                      [ngClass]=\"{'badge-success': ['in', 'up'].includes(data?.status), 'badge-danger': ['down', 'out', 'destroyed'].includes(data?.status)}\">\n                  {{ data.status }}\n                </span>\n                <span>&nbsp;</span>\n                <span class=\"node-name\"\n                      [ngClass]=\"{'type-osd': data?.type === 'osd'}\"\n                      [innerHTML]=\"data?.name\"></span>\n              </ng-template>\n              <ng-container *ngFor=\"let node of nodes\">\n                <ng-container *ngTemplateOutlet=\"nodeTemplateRef; context: { node: node, depth: 0 };\">\n                </ng-container>\n              </ng-container>\n            </cds-tree-view>\n          </div>\n          <div class=\"col-sm-6 col-lg-6 metadata\"\n               *ngIf=\"metadata\">\n            <legend>{{ metadataTitle }}</legend>\n            <div>\n              <cd-table-key-value [data]=\"metadata\"></cd-table-key-value>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { TreeViewComponent } from 'carbon-components-angular';\nimport { Node } from 'carbon-components-angular/treeview/tree-node.types';\nimport { Observable, Subscription } from 'rxjs';\n\nimport { CrushRuleService } from '~/app/shared/api/crush-rule.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { TimerService } from '~/app/shared/services/timer.service';\n\nexport interface CrushmapInfo {\n  names: string[];\n  nodes: CrushmapNode[];\n  roots: number[];\n  [key: string]: any;\n}\n\nexport interface CrushmapNode {\n  id: number;\n  name: string;\n  type?: string;\n  type_id: number;\n  children?: number[];\n  pool_weights?: Record<string, any>;\n  device_class?: string;\n  crush_weight?: number;\n  depth?: number;\n  exists?: number;\n  status?: string;\n  reweight?: number;\n  primary_affinity?: number;\n  [key: string]: any;\n}\n\n@Component({\n  selector: 'cd-crushmap',\n  templateUrl: './crushmap.component.html',\n  styleUrls: ['./crushmap.component.scss']\n})\nexport class CrushmapComponent implements OnDestroy, OnInit {\n  private sub = new Subscription();\n\n  @ViewChild('tree') tree: TreeViewComponent;\n  @ViewChild('badge') labelTpl: TemplateRef<any>;\n\n  icons = Icons;\n  loadingIndicator = true;\n  nodes: Node[] = [];\n  metadata: any;\n  metadataTitle: string;\n  metadataKeyMap: { [key: number]: any } = {};\n  data$: Observable<object>;\n\n  constructor(private crushRuleService: CrushRuleService, private timerService: TimerService) {}\n\n  ngOnInit() {\n    this.sub = this.timerService\n      .get(() => this.crushRuleService.getInfo(), 5000)\n      .subscribe((data: CrushmapInfo) => {\n        this.loadingIndicator = false;\n        this.nodes = this.abstractTreeData(data);\n      });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  private abstractTreeData(data: CrushmapInfo): Node[] {\n    const nodes = data.nodes || [];\n    const rootNodes = data.roots || [];\n    const treeNodeMap: { [key: number]: any } = {};\n\n    if (0 === nodes.length) {\n      return [\n        {\n          label: 'No nodes!'\n        }\n      ];\n    }\n\n    const roots: any[] = [];\n    nodes.reverse().forEach((node: CrushmapNode) => {\n      if (rootNodes.includes(node.id)) {\n        roots.push(node.id);\n      }\n      treeNodeMap[node.id] = this.generateTreeLeaf(node, treeNodeMap);\n    });\n\n    const children = roots.map((id) => {\n      return treeNodeMap[id];\n    });\n\n    return children;\n  }\n\n  private generateTreeLeaf(node: CrushmapNode, treeNodeMap: Record<number, any>) {\n    const cdId = node.id;\n    this.metadataKeyMap[cdId] = node;\n\n    const name: string = node.name + ' (' + node.type + ')';\n    const status: string = node.status;\n\n    const children: any[] = [];\n    const resultNode: Record<string, any> = {\n      label: this.labelTpl,\n      labelContext: { name, status, type: node?.type },\n      value: name,\n      id: cdId,\n      expanded: true,\n      name,\n      status,\n      cdId,\n      type: node.type\n    };\n    if (node?.children?.length) {\n      node.children.sort().forEach((childId: number) => {\n        children.push(treeNodeMap[childId]);\n      });\n\n      resultNode['children'] = children;\n    }\n\n    return resultNode;\n  }\n\n  onNodeSelected(node: Node) {\n    if (node.id !== undefined) {\n      const { name, type, status, ...remain } = this.metadataKeyMap[Number(node.id)];\n      this.metadata = remain;\n      this.metadataTitle = name + ' (' + type + ')';\n    } else {\n      delete this.metadata;\n      delete this.metadataTitle;\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogsService {\n  constructor(private http: HttpClient) {}\n\n  getLogs() {\n    return this.http.get('api/logs/all');\n  }\n\n  validateDashboardUrl(uid: string) {\n    return this.http.get(`api/grafana/validation/${uid}`);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { saveAs } from 'file-saver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TextToDownloadService {\n  download(downloadText: string, filename?: string) {\n    saveAs(new Blob([downloadText]), filename);\n  }\n}\n","<div ngbDropdown\n     placement=\"bottom-right\">\n  <button type=\"button\"\n          [title]=\"title\"\n          class=\"btn btn-light dropdown-toggle-split\"\n          ngbDropdownToggle>\n    <svg [cdsIcon]=\"icons.download\"\n         size=\"16\"\n         ></svg>&nbsp;\n  </button>\n  <div ngbDropdownMenu>\n    <button ngbDropdownItem\n            (click)=\"download('json')\"\n            *ngIf=\"objectItem\">\n      <svg [cdsIcon]=\"icons.code\"\n           size=\"16\"\n           ></svg>\n      <span>&nbsp;JSON</span>\n    </button>\n    <button ngbDropdownItem\n            (click)=\"download()\"\n            *ngIf=\"textItem\">\n      <svg [cdsIcon]=\"icons.document\"\n           size=\"16\"\n           ></svg>\n      <span>&nbsp;Text</span>\n    </button>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { TextToDownloadService } from '~/app/shared/services/text-to-download.service';\n\n@Component({\n  selector: 'cd-download-button',\n  templateUrl: './download-button.component.html',\n  styleUrls: ['./download-button.component.scss']\n})\nexport class DownloadButtonComponent {\n  @Input() objectItem: object;\n  @Input() textItem: string;\n  @Input() fileName: any;\n  @Input() title = $localize`Download`;\n\n  icons = Icons;\n  constructor(private textToDownloadService: TextToDownloadService) {}\n\n  download(format?: string) {\n    this.fileName = `${this.fileName}_${new Date().toLocaleDateString()}`;\n    if (format === 'json') {\n      this.textToDownloadService.download(\n        JSON.stringify(this.objectItem, null, 2),\n        `${this.fileName}.json`\n      );\n    } else {\n      this.textToDownloadService.download(this.textItem, `${this.fileName}.txt`);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'searchHighlight'\n})\nexport class SearchHighlightPipe implements PipeTransform {\n  transform(value: string, args: string): string {\n    if (!args) {\n      return value;\n    }\n    args = this.escapeRegExp(args);\n    const regex = new RegExp(args, 'gi');\n    const match = value.match(regex);\n\n    if (!match) {\n      return value;\n    }\n\n    return value.replace(regex, '<mark>$&</mark>');\n  }\n\n  private escapeRegExp(str: string) {\n    // $& means the whole matched string\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n","<div *ngIf=\"contentData\">\n  <ng-container *ngTemplateOutlet=\"logFiltersTpl\"></ng-container>\n\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"logs\"\n       [cdStatefulTabDefault]=\"defaultTab\"\n       [hidden]=\"!showNavLinks\">\n    <ng-container ngbNavItem=\"cluster-logs\">\n      <a ngbNavLink\n         i18n>Cluster Logs</a>\n      <ng-template ngbNavContent>\n        <div class=\"card bg-light mb-3\"\n             *ngIf=\"clog\">\n          <div class=\"btn-group\"\n               role=\"group\"\n               *ngIf=\"clog.length && showClusterLogs\">\n            <cd-download-button [objectItem]=\"clog\"\n                                [textItem]=\"clogText\"\n                                fileName=\"cluster_log\"\n                                *ngIf=\"showDownloadCopyButton\">\n            </cd-download-button>\n            <cd-copy-2-clipboard-button\n                    [source]=\"clogText\"\n                    [byId]=\"false\"\n                    *ngIf=\"showDownloadCopyButton\">\n            </cd-copy-2-clipboard-button>\n          </div>\n          <div class=\"card-body\"\n               [ngClass]=\"{'overflow-auto': scrollable}\">\n            <p *ngFor=\"let line of clog\">\n              <span class=\"timestamp\">{{ line.stamp | cdDate }}</span>\n              <span class=\"priority {{ line.priority | logPriority }}\">{{ line.priority }}</span>\n              <span class=\"message\"\n                    [innerHTML]=\"line.message | searchHighlight: search\"></span>\n            </p>\n\n            <ng-container *ngIf=\"clog.length !== 0 else noEntriesTpl\"></ng-container>\n          </div>\n        </div>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"audit-logs\">\n      <a ngbNavLink\n         i18n>Audit Logs</a>\n      <ng-template ngbNavContent>\n        <div class=\"card bg-light mb-3\"\n             *ngIf=\"audit_log && showAuditLogs\">\n          <div class=\"btn-group\"\n               role=\"group\"\n               *ngIf=\"audit_log.length\">\n            <cd-download-button [objectItem]=\"audit_log\"\n                                [textItem]=\"auditLogText\"\n                                fileName=\"audit_log\"\n                                *ngIf=\"showDownloadCopyButton\">\n            </cd-download-button>\n            <cd-copy-2-clipboard-button\n                    [source]=\"auditLogText\"\n                    [byId]=\"false\"\n                    *ngIf=\"showDownloadCopyButton\">\n            </cd-copy-2-clipboard-button>\n          </div>\n          <div class=\"card-body\">\n            <p *ngFor=\"let line of audit_log\">\n              <span class=\"timestamp\">{{ line.stamp | cdDate }}</span>\n              <span class=\"priority {{ line.priority | logPriority }}\">{{ line.priority }}</span>\n              <span class=\"message\"\n                    [innerHTML]=\"line.message | searchHighlight: search\"></span>\n            </p>\n\n            <ng-container *ngIf=\"audit_log.length !== 0 else noEntriesTpl\"></ng-container>\n          </div>\n        </div>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"daemon-logs\">\n      <a ngbNavLink\n         i18n>Daemon Logs</a>\n      <ng-template ngbNavContent>\n        <ng-container *ngIf=\"showDaemonLogs && lokiServiceStatus$ | async as lokiServiceStatus ; else daemonLogsTpl \">\n          <div *ngIf=\"promtailServiceStatus$ | async as promtailServiceStatus; else daemonLogsTpl\">\n            <cd-grafana i18n-title\n                        title=\"Daemon logs\"\n                        [grafanaPath]=\"'explore?'\"\n                        [type]=\"'logs'\"\n                        uid=\"CrAHE0iZz\"\n                        grafanaStyle=\"three\">\n            </cd-grafana>\n          </div>\n        </ng-container>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</div>\n\n<ng-template #logFiltersTpl>\n  <div class=\"row mb-3\"\n       *ngIf=\"showFilterTools\">\n  <div class=\"col-lg-10 d-flex\">\n    <div class=\"col-sm-1 me-3\">\n      <label for=\"logs-priority\"\n             class=\"fw-bold\"\n             i18n>Priority:</label>\n      <select id=\"logs-priority\"\n              class=\"form-select\"\n              [(ngModel)]=\"priority\"\n              (ngModelChange)=\"filterLogs()\">\n        <option *ngFor=\"let prio of priorities\"\n                [value]=\"prio.value\">{{ prio.name }}</option>\n      </select>\n    </div>\n\n    <div class=\"col-md-3 me-3\">\n      <label for=\"logs-keyword\"\n             class=\"fw-bold\"\n             i18n>Keyword:</label>\n      <div class=\"input-group\">\n        <span class=\"input-group-text\">\n          <svg [cdsIcon]=\"icons.search\"\n               [size]=\"icons.size16\"\n               ></svg>\n        </span>\n\n        <input class=\"form-control\"\n               id=\"logs-keyword\"\n               type=\"text\"\n               [(ngModel)]=\"search\"\n               (keyup)=\"filterLogs()\">\n\n        <button type=\"button\"\n                class=\"btn btn-light\"\n                (click)=\"clearSearchKey()\"\n                title=\"Clear\">\n          <svg [cdsIcon]=\"icons.destroy\"\n               [size]=\"icons.size16\"\n               ></svg>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"col-md-3 me-3\">\n      <label for=\"logs-date\"\n             class=\"fw-bold\"\n             i18n>Date:</label>\n      <div class=\"input-group\">\n        <input class=\"form-control\"\n               id=\"logs-date\"\n               placeholder=\"YYYY-MM-DD\"\n               ngbDatepicker\n               [maxDate]=\"maxDate\"\n               #d=\"ngbDatepicker\"\n               (click)=\"d.open()\"\n               [(ngModel)]=\"selectedDate\"\n               (ngModelChange)=\"filterLogs()\">\n        <button type=\"button\"\n                class=\"btn btn-light\"\n                (click)=\"clearDate()\"\n                title=\"Clear\">\n          <svg [cdsIcon]=\"icons.destroy\"\n               [size]=\"icons.size16\"\n               ></svg>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"col-md-5\">\n      <label i18n\n             class=\"fw-bold\">Time range:</label>\n      <div class=\"d-flex\">\n      <ngb-timepicker [spinners]=\"false\"\n                      [(ngModel)]=\"startTime\"\n                      (ngModelChange)=\"filterLogs()\"></ngb-timepicker>\n\n      <span class=\"mt-2\">&nbsp;&mdash;&nbsp;</span>\n\n      <ngb-timepicker [spinners]=\"false\"\n                      [(ngModel)]=\"endTime\"\n                      (ngModelChange)=\"filterLogs()\"></ngb-timepicker>\n    </div></div>\n  </div></div>\n</ng-template>\n\n<ng-template #noEntriesTpl>\n  <span i18n>No log entries found. Please try to select different filter options.</span>\n  <span>&nbsp;</span>\n  <a href=\"#\"\n     (click)=\"resetFilter()\"\n     i18n>Reset filter.</a>\n</ng-template>\n\n<ng-template #daemonLogsTpl>\n  <cd-alert-panel type=\"info\"\n                  title=\"Loki/Promtail service not running\"\n                  i18n-title>\n  <ng-container i18n>Please start the loki and promtail service to see these logs.</ng-container>\n  </cd-alert-panel>\n</ng-template>\n","import { DatePipe } from '@angular/common';\nimport { Component, Input, NgZone, OnDestroy, OnInit } from '@angular/core';\n\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { LogsService } from '~/app/shared/api/logs.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-logs',\n  templateUrl: './logs.component.html',\n  styleUrls: ['./logs.component.scss']\n})\nexport class LogsComponent implements OnInit, OnDestroy {\n  @Input()\n  showClusterLogs = true;\n  @Input()\n  showAuditLogs = true;\n  @Input()\n  showDaemonLogs = true;\n  @Input()\n  showNavLinks = true;\n  @Input()\n  showFilterTools = true;\n  @Input()\n  showDownloadCopyButton = true;\n  @Input()\n  defaultTab = '';\n  @Input()\n  scrollable = false;\n\n  contentData: any;\n  clog: Array<any>;\n  audit_log: Array<any>;\n  icons = Icons;\n  clogText: string;\n  auditLogText: string;\n  lokiServiceStatus$: Observable<boolean>;\n  promtailServiceStatus$: Observable<boolean>;\n\n  interval: number;\n  priorities: Array<{ name: string; value: string }> = [\n    { name: 'Debug', value: '[DBG]' },\n    { name: 'Info', value: '[INF]' },\n    { name: 'Warning', value: '[WRN]' },\n    { name: 'Error', value: '[ERR]' },\n    { name: 'All', value: 'All' }\n  ];\n  priority = 'All';\n  search = '';\n  selectedDate: NgbDateStruct;\n  startTime = { hour: 0, minute: 0 };\n  endTime = { hour: 23, minute: 59 };\n  maxDate = {\n    year: new Date().getFullYear(),\n    month: new Date().getMonth() + 1,\n    day: new Date().getDate()\n  };\n\n  constructor(\n    private logsService: LogsService,\n    private cephService: CephServiceService,\n    private datePipe: DatePipe,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnInit() {\n    this.getInfo();\n    this.ngZone.runOutsideAngular(() => {\n      this.getDaemonDetails();\n      this.interval = window.setInterval(() => {\n        this.ngZone.run(() => {\n          this.getInfo();\n        });\n      }, 5000);\n    });\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);\n  }\n\n  getDaemonDetails() {\n    this.lokiServiceStatus$ = this.cephService.getDaemons('loki').pipe(\n      map((data: any) => {\n        return data.length > 0 && data[0].status === 1;\n      })\n    );\n    this.promtailServiceStatus$ = this.cephService.getDaemons('promtail').pipe(\n      map((data: any) => {\n        return data.length > 0 && data[0].status === 1;\n      })\n    );\n  }\n\n  getInfo() {\n    this.logsService.getLogs().subscribe((data: any) => {\n      this.contentData = data;\n      this.clogText = this.logToText(this.contentData.clog);\n      this.auditLogText = this.logToText(this.contentData.audit_log);\n      this.filterLogs();\n    });\n  }\n\n  abstractFilters(): any {\n    const priority = this.priority;\n    const key = this.search.toLowerCase();\n    let yearMonthDay: string;\n    if (this.selectedDate) {\n      const m = this.selectedDate.month;\n      const d = this.selectedDate.day;\n\n      const year = this.selectedDate.year;\n      const month = m <= 9 ? `0${m}` : `${m}`;\n      const day = d <= 9 ? `0${d}` : `${d}`;\n      yearMonthDay = `${year}-${month}-${day}`;\n    } else {\n      yearMonthDay = '';\n    }\n\n    const sHour = this.startTime?.hour ?? 0;\n    const sMinutes = this.startTime?.minute ?? 0;\n    const sTime = sHour * 60 + sMinutes;\n\n    const eHour = this.endTime?.hour ?? 23;\n    const eMinutes = this.endTime?.minute ?? 59;\n    const eTime = eHour * 60 + eMinutes;\n\n    return { priority, key, yearMonthDay, sTime, eTime };\n  }\n\n  filterExecutor(logs: Array<any>, filters: any): Array<any> {\n    return logs.filter((line) => {\n      const localDate = this.datePipe.transform(line.stamp, 'mediumTime');\n      const hour = parseInt(localDate.split(':')[0], 10);\n      const minutes = parseInt(localDate.split(':')[1], 10);\n      let prio: string, y_m_d: string, timeSpan: number;\n\n      prio = filters.priority === 'All' ? line.priority : filters.priority;\n      y_m_d = filters.yearMonthDay ? filters.yearMonthDay : line.stamp;\n      timeSpan = hour * 60 + minutes;\n      return (\n        line.priority === prio &&\n        line.message.toLowerCase().indexOf(filters.key) !== -1 &&\n        line.stamp.indexOf(y_m_d) !== -1 &&\n        timeSpan >= filters.sTime &&\n        timeSpan <= filters.eTime\n      );\n    });\n  }\n\n  filterLogs() {\n    const filters = this.abstractFilters();\n    this.clog = this.filterExecutor(this.contentData.clog, filters);\n    this.audit_log = this.filterExecutor(this.contentData.audit_log, filters);\n  }\n\n  clearSearchKey() {\n    this.search = '';\n    this.filterLogs();\n  }\n  clearDate() {\n    this.selectedDate = null;\n    this.filterLogs();\n  }\n  resetFilter() {\n    this.priority = 'All';\n    this.search = '';\n    this.selectedDate = null;\n    this.startTime = { hour: 0, minute: 0 };\n    this.endTime = { hour: 23, minute: 59 };\n    this.filterLogs();\n\n    return false;\n  }\n\n  logToText(log: object) {\n    let logText = '';\n    for (const line of Object.keys(log)) {\n      logText =\n        logText +\n        this.datePipe.transform(log[line].stamp, 'medium') +\n        '\\t' +\n        log[line].priority +\n        '\\t' +\n        log[line].message +\n        '\\n';\n    }\n    return logText;\n  }\n}\n","<div class=\"cd-col-form\"\n     *cdFormLoading=\"loading\">\n  <form name=\"mgrModuleForm\"\n        #frm=\"ngForm\"\n        [formGroup]=\"mgrModuleForm\"\n        novalidate>\n    <div class=\"card\">\n      <div class=\"card-header\"\n           i18n>Edit Manager module</div>\n      <div class=\"card-body\">\n        <div class=\"form-group row\"\n             *ngFor=\"let moduleOption of moduleOptions | keyvalue\">\n\n          <!-- Field label -->\n          <label class=\"cd-col-form-label\"\n                 for=\"{{ moduleOption.value.name }}\">\n            {{ moduleOption.value.name }}\n            <cd-helper *ngIf=\"moduleOption.value.long_desc || moduleOption.value.desc\">\n              {{ moduleOption.value.long_desc || moduleOption.value.desc | upperFirst }}\n            </cd-helper>\n          </label>\n\n          <!-- Field control -->\n          <!-- bool -->\n          <div class=\"cd-col-form-input\"\n               *ngIf=\"moduleOption.value.type === 'bool'\">\n            <div class=\"custom-control custom-checkbox\">\n              <input id=\"{{ moduleOption.value.name }}\"\n                     type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     formControlName=\"{{ moduleOption.value.name }}\">\n              <label class=\"custom-control-label\"\n                     for=\"{{ moduleOption.value.name }}\"></label>\n            </div>\n          </div>\n\n          <!-- addr|str|uuid -->\n          <div class=\"cd-col-form-input\"\n               *ngIf=\"['addr', 'str', 'uuid'].includes(moduleOption.value.type)\">\n            <input id=\"{{ moduleOption.value.name }}\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   formControlName=\"{{ moduleOption.value.name }}\"\n                   *ngIf=\"moduleOption.value.enum_allowed.length === 0\">\n            <select id=\"{{ moduleOption.value.name }}\"\n                    class=\"form-select\"\n                    formControlName=\"{{ moduleOption.value.name }}\"\n                    *ngIf=\"moduleOption.value.enum_allowed.length > 0\">\n              <option *ngFor=\"let value of moduleOption.value.enum_allowed\"\n                      [ngValue]=\"value\">\n                {{ value }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'invalidUuid')\"\n                  i18n>The entered value is not a valid UUID, e.g.: 67dcac9f-2c03-4d6c-b7bd-1210b3a259a8</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'pattern')\"\n                  i18n>The entered value needs to be a valid IP address.</span>\n          </div>\n\n          <!-- uint|int|size|secs -->\n          <div class=\"cd-col-form-input\"\n               *ngIf=\"['uint', 'int', 'size', 'secs'].includes(moduleOption.value.type)\">\n            <input id=\"{{ moduleOption.value.name }}\"\n                   class=\"form-control\"\n                   type=\"number\"\n                   formControlName=\"{{ moduleOption.value.name }}\"\n                   min=\"{{ moduleOption.value.min }}\"\n                   max=\"{{ moduleOption.value.max }}\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'max')\"\n                  i18n>The entered value is too high! It must be lower or equal to {{ moduleOption.value.max }}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'min')\"\n                  i18n>The entered value is too low! It must be greater or equal to {{ moduleOption.value.min }}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'pattern')\"\n                  i18n>The entered value needs to be a number.</span>\n          </div>\n\n          <!-- float -->\n          <div class=\"cd-col-form-input\"\n               *ngIf=\"moduleOption.value.type === 'float'\">\n            <input id=\"{{ moduleOption.value.name }}\"\n                   class=\"form-control\"\n                   type=\"number\"\n                   formControlName=\"{{ moduleOption.value.name }}\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"mgrModuleForm.showError(moduleOption.value.name, frm, 'pattern')\"\n                  i18n>The entered value needs to be a number or decimal.</span>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"mgrModuleForm\"\n                              [submitText]=\"actionLabels.UPDATE\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ValidatorFn, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin } from 'rxjs';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-mgr-module-form',\n  templateUrl: './mgr-module-form.component.html',\n  styleUrls: ['./mgr-module-form.component.scss']\n})\nexport class MgrModuleFormComponent extends CdForm implements OnInit {\n  mgrModuleForm: CdFormGroup;\n  moduleName = '';\n  moduleOptions: any[] = [];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: CdFormBuilder,\n    private mgrModuleService: MgrModuleService,\n    private notificationService: NotificationService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe((params: { name: string }) => {\n      this.moduleName = decodeURIComponent(params.name);\n      const observables = [\n        this.mgrModuleService.getOptions(this.moduleName),\n        this.mgrModuleService.getConfig(this.moduleName)\n      ];\n      observableForkJoin(observables).subscribe(\n        (resp: object) => {\n          this.moduleOptions = resp[0];\n          // Create the form dynamically.\n          this.createForm();\n          // Set the form field values.\n          this.mgrModuleForm.setValue(resp[1]);\n          this.loadingReady();\n        },\n        (_error) => {\n          this.loadingError();\n        }\n      );\n    });\n  }\n\n  getValidators(moduleOption: any): ValidatorFn[] {\n    const result = [];\n    switch (moduleOption.type) {\n      case 'addr':\n        result.push(CdValidators.ip());\n        break;\n      case 'uint':\n      case 'int':\n      case 'size':\n      case 'secs':\n        result.push(Validators.required);\n        break;\n      case 'str':\n        if (_.isNumber(moduleOption.min)) {\n          result.push(Validators.minLength(moduleOption.min));\n        }\n        if (_.isNumber(moduleOption.max)) {\n          result.push(Validators.maxLength(moduleOption.max));\n        }\n        break;\n      case 'float':\n        result.push(Validators.required);\n        result.push(CdValidators.decimalNumber());\n        break;\n      case 'uuid':\n        result.push(CdValidators.uuid());\n        break;\n    }\n    return result;\n  }\n\n  createForm() {\n    const controlsConfig = {};\n    _.forEach(this.moduleOptions, (moduleOption) => {\n      controlsConfig[moduleOption.name] = [\n        moduleOption.default_value,\n        this.getValidators(moduleOption)\n      ];\n    });\n    this.mgrModuleForm = this.formBuilder.group(controlsConfig);\n  }\n\n  goToListView() {\n    this.router.navigate(['/mgr-modules']);\n  }\n\n  onSubmit() {\n    // Exit immediately if the form isn't dirty.\n    if (this.mgrModuleForm.pristine) {\n      this.goToListView();\n      return;\n    }\n    const config = {};\n    _.forEach(this.moduleOptions, (moduleOption) => {\n      const control = this.mgrModuleForm.get(moduleOption.name);\n      // Append the option only if the value has been modified.\n      if (control.dirty && control.valid) {\n        config[moduleOption.name] = control.value;\n      }\n    });\n    this.mgrModuleService.updateConfig(this.moduleName, config).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated options for module '${this.moduleName}'.`\n        );\n        this.goToListView();\n      },\n      () => {\n        // Reset the 'Submit' button.\n        this.mgrModuleForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <cd-table-key-value [data]=\"module_config\">\n  </cd-table-key-value>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\n\n@Component({\n  selector: 'cd-mgr-module-details',\n  templateUrl: './mgr-module-details.component.html',\n  styleUrls: ['./mgr-module-details.component.scss']\n})\nexport class MgrModuleDetailsComponent implements OnChanges {\n  module_config: any;\n\n  @Input()\n  selection: any;\n\n  constructor(private mgrModuleService: MgrModuleService) {}\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.mgrModuleService.getConfig(this.selection.name).subscribe((resp: any) => {\n        this.module_config = resp;\n      });\n    }\n  }\n}\n","<cd-table #table\n          [autoReload]=\"false\"\n          [data]=\"modules\"\n          [columns]=\"columns\"\n          columnMode=\"flex\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\"\n          identifier=\"module\"\n          (fetchData)=\"getModuleList($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-mgr-module-details *cdTableDetail\n                         [selection]=\"expandedRow\">\n  </cd-mgr-module-details>\n</cd-table>\n","import { Component, ViewChild } from '@angular/core';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-mgr-module-list',\n  templateUrl: './mgr-module-list.component.html',\n  styleUrls: ['./mgr-module-list.component.scss']\n})\nexport class MgrModuleListComponent extends ListWithDetails {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  columns: CdTableColumn[] = [];\n  modules: object[] = [];\n  selection: CdTableSelection = new CdTableSelection();\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private mgrModuleService: MgrModuleService\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().configOpt;\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Enabled`,\n        prop: 'enabled',\n        flexGrow: 1,\n        cellClass: 'text-center',\n        cellTransformation: CellTemplate.checkIcon\n      },\n      {\n        name: $localize`Always-On`,\n        prop: 'always_on',\n        flexGrow: 1,\n        cellClass: 'text-center',\n        cellTransformation: CellTemplate.checkIcon\n      }\n    ];\n    const getModuleUri = () =>\n      this.selection.first() && encodeURIComponent(this.selection.first().name);\n    this.tableActions = [\n      {\n        name: $localize`Edit`,\n        permission: 'update',\n        disable: () => {\n          if (!this.selection.hasSelection) {\n            return true;\n          }\n          // Disable the 'edit' button when the module has no options.\n          return Object.values(this.selection.first().options).length === 0;\n        },\n        routerLink: () => `/mgr-modules/edit/${getModuleUri()}`,\n        icon: Icons.edit\n      },\n      {\n        name: $localize`Enable`,\n        permission: 'update',\n        click: () => this.updateModuleState(),\n        disable: () => this.isTableActionDisabled('enabled'),\n        icon: Icons.start\n      },\n      {\n        name: $localize`Disable`,\n        permission: 'update',\n        click: () => this.updateModuleState(),\n        disable: () => this.getTableActionDisabledDesc(),\n        icon: Icons.stop\n      }\n    ];\n  }\n\n  getModuleList(context: CdTableFetchDataContext) {\n    this.mgrModuleService.list().subscribe(\n      (resp: object[]) => {\n        this.modules = resp;\n      },\n      () => {\n        context.error();\n      }\n    );\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  /**\n   * Check if the table action is disabled.\n   * @param state The expected module state, e.g. ``enabled`` or ``disabled``.\n   * @returns If the specified state is validated to true or no selection is\n   *   done, then ``true`` is returned, otherwise ``false``.\n   */\n  isTableActionDisabled(state: 'enabled' | 'disabled') {\n    if (!this.selection.hasSelection) {\n      return true;\n    }\n    const selected = this.selection.first();\n    // Make sure the user can't modify the run state of the 'Dashboard' module.\n    // This check is only done in the UI because the REST API should still be\n    // able to do so.\n    if (selected.name === 'dashboard') {\n      return true;\n    }\n    // Always-on modules can't be disabled.\n    if (selected.always_on) {\n      return true;\n    }\n    switch (state) {\n      case 'enabled':\n        return selected.enabled;\n      case 'disabled':\n        return !selected.enabled;\n    }\n  }\n\n  getTableActionDisabledDesc(): string | boolean {\n    if (this.selection.first()?.always_on) {\n      return $localize`This Manager module is always on.`;\n    }\n\n    return this.isTableActionDisabled('disabled');\n  }\n\n  /**\n   * Update the selected Ceph Mgr module state to enabled or disabled.\n   */\n  updateModuleState() {\n    if (!this.selection.hasSelection) {\n      return;\n    }\n    const selected = this.selection.first();\n    this.mgrModuleService.updateModuleState(selected.name, selected.enabled, this.table);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonitorService {\n  constructor(private http: HttpClient) {}\n\n  getMonitor() {\n    return this.http.get('api/monitor');\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-lg-4\">\n    <fieldset>\n      <legend class=\"cd-header\"\n              i18n>Status</legend>\n      <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n             *ngIf=\"mon_status\">\n        <tbody>\n          <tr>\n            <td i18n\n                class=\"bold\">Cluster ID</td>\n            <td>{{ mon_status.monmap.fsid }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">monmap modified</td>\n            <td>{{ mon_status.monmap.modified | relativeDate }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">monmap epoch</td>\n            <td>{{ mon_status.monmap.epoch }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">quorum con</td>\n            <td>{{ mon_status.features.quorum_con }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">quorum mon</td>\n            <td>{{ mon_status.features.quorum_mon }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">required con</td>\n            <td>{{ mon_status.features.required_con }}</td>\n          </tr>\n          <tr>\n            <td i18n\n                class=\"bold\">required mon</td>\n            <td>{{ mon_status.features.required_mon }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </fieldset>\n  </div>\n\n  <div class=\"col-lg-8\">\n    <legend i18n\n            class=\"in-quorum cd-header\">In Quorum</legend>\n    <div>\n    <cd-table [data]=\"inQuorum.data\"\n              [columns]=\"inQuorum.columns\">\n    </cd-table></div>\n\n    <legend i18n\n            class=\"in-quorum cd-header\">Not In Quorum</legend>\n    <div>\n    <cd-table [data]=\"notInQuorum.data\"\n              (fetchData)=\"refresh()\"\n              [columns]=\"notInQuorum.columns\">\n    </cd-table></div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { MonitorService } from '~/app/shared/api/monitor.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\n\n@Component({\n  selector: 'cd-monitor',\n  templateUrl: './monitor.component.html',\n  styleUrls: ['./monitor.component.scss']\n})\nexport class MonitorComponent {\n  mon_status: any;\n  inQuorum: any;\n  notInQuorum: any;\n\n  interval: any;\n\n  constructor(private monitorService: MonitorService) {\n    this.inQuorum = {\n      columns: [\n        { prop: 'name', name: $localize`Name`, cellTransformation: CellTemplate.routerLink },\n        { prop: 'rank', name: $localize`Rank` },\n        { prop: 'public_addr', name: $localize`Public Address` },\n        {\n          prop: 'cdOpenSessions',\n          name: $localize`Open Sessions`,\n          cellTransformation: CellTemplate.sparkline,\n          comparator: (dataA: any, dataB: any) => {\n            // We get the last value of time series to compare:\n            const lastValueA = _.last(dataA);\n            const lastValueB = _.last(dataB);\n\n            if (!lastValueA || !lastValueB || lastValueA === lastValueB) {\n              return 0;\n            }\n\n            return lastValueA > lastValueB ? 1 : -1;\n          }\n        }\n      ]\n    };\n\n    this.notInQuorum = {\n      columns: [\n        { prop: 'name', name: $localize`Name`, cellTransformation: CellTemplate.routerLink },\n        { prop: 'rank', name: $localize`Rank` },\n        { prop: 'public_addr', name: $localize`Public Address` }\n      ]\n    };\n  }\n\n  refresh() {\n    this.monitorService.getMonitor().subscribe((data: any) => {\n      data.in_quorum.map((row: any) => {\n        row.cdOpenSessions = row.stats.num_sessions.map((i: string) => i[1]);\n        row.cdLink = '/perf_counters/mon/' + row.name;\n        row.cdParams = { fromLink: '/monitor' };\n        return row;\n      });\n\n      data.out_quorum.map((row: any) => {\n        row.cdLink = '/perf_counters/mon/' + row.name;\n        row.cdParams = { fromLink: '/monitor' };\n        return row;\n      });\n\n      this.inQuorum.data = [...data.in_quorum];\n      this.notInQuorum.data = [...data.out_quorum];\n      this.mon_status = data.mon_status;\n    });\n  }\n}\n","export class OsdSettings {\n  nearfull_ratio: number;\n  full_ratio: number;\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>Individual OSD Flags</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"osdFlagsForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"osdFlagsForm\"\n          novalidate>\n      <div class=\"modal-body osd-modal\">\n        <div class=\"custom-control custom-checkbox\"\n             *ngFor=\"let flag of flags; let last = last\">\n          <input class=\"custom-control-input\"\n                 type=\"checkbox\"\n                 [checked]=\"flag.value\"\n                 [indeterminate]=\"flag.indeterminate\"\n                 (change)=\"changeValue(flag)\"\n                 [name]=\"flag.code\"\n                 [id]=\"flag.code\">\n          <label class=\"custom-control-label\"\n                 [for]=\"flag.code\"\n                 ng-class=\"['tc_' + key]\">\n            <strong>{{ flag.name }}</strong>\n            <span class=\"badge badge-hdd ms-2\"\n                  [ngbTooltip]=\"clusterWideTooltip\"\n                  *ngIf=\"flag.clusterWide\"\n                  i18n>Cluster-wide</span>\n            <br>\n            <span class=\"form-text text-muted\">{{ flag.description }}</span>\n          </label>\n          <hr class=\"m-1\"\n              *ngIf=\"!last\">\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"button\"\n                class=\"btn btn-light\"\n                (click)=\"resetSelection()\"\n                i18n>Restore previous selection</button>\n        <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                              [form]=\"osdFlagsForm\"\n                              [showSubmit]=\"permissions.osd.update\"\n                              [submitText]=\"actionLabels.UPDATE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { Flag } from '~/app/shared/models/flag';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-osd-flags-indiv-modal',\n  templateUrl: './osd-flags-indiv-modal.component.html',\n  styleUrls: ['./osd-flags-indiv-modal.component.scss']\n})\nexport class OsdFlagsIndivModalComponent implements OnInit {\n  permissions: Permissions;\n  selected: object[];\n  initialSelection: Flag[] = [];\n  osdFlagsForm = new UntypedFormGroup({});\n  flags: Flag[] = [\n    {\n      code: 'noup',\n      name: $localize`No Up`,\n      description: $localize`OSDs are not allowed to start`,\n      value: false,\n      clusterWide: false,\n      indeterminate: false\n    },\n    {\n      code: 'nodown',\n      name: $localize`No Down`,\n      description: $localize`OSD failure reports are being ignored, such that the monitors will not mark OSDs down`,\n      value: false,\n      clusterWide: false,\n      indeterminate: false\n    },\n    {\n      code: 'noin',\n      name: $localize`No In`,\n      description: $localize`OSDs that were previously marked out will not be marked back in when they start`,\n      value: false,\n      clusterWide: false,\n      indeterminate: false\n    },\n    {\n      code: 'noout',\n      name: $localize`No Out`,\n      description: $localize`OSDs will not automatically be marked out after the configured interval`,\n      value: false,\n      clusterWide: false,\n      indeterminate: false\n    }\n  ];\n  clusterWideTooltip: string = $localize`The flag has been enabled for the entire cluster.`;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private osdService: OsdService,\n    private notificationService: NotificationService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    const osdCount = this.selected.length;\n    this.osdService.getFlags().subscribe((clusterWideFlags: string[]) => {\n      const activatedIndivFlags = this.getActivatedIndivFlags();\n      this.flags.forEach((flag) => {\n        const flagCount = activatedIndivFlags[flag.code];\n        if (clusterWideFlags.includes(flag.code)) {\n          flag.clusterWide = true;\n        }\n\n        if (flagCount === osdCount) {\n          flag.value = true;\n        } else if (flagCount > 0) {\n          flag.indeterminate = true;\n        }\n      });\n      this.initialSelection = _.cloneDeep(this.flags);\n    });\n  }\n\n  getActivatedIndivFlags(): { [flag: string]: number } {\n    const flagsCount = {};\n    this.flags.forEach((flag) => {\n      flagsCount[flag.code] = 0;\n    });\n\n    [].concat(...this.selected.map((osd) => osd['state'])).map((activatedFlag) => {\n      if (Object.keys(flagsCount).includes(activatedFlag)) {\n        flagsCount[activatedFlag] = flagsCount[activatedFlag] + 1;\n      }\n    });\n    return flagsCount;\n  }\n\n  changeValue(flag: Flag) {\n    flag.value = !flag.value;\n    flag.indeterminate = false;\n  }\n\n  resetSelection() {\n    this.flags = _.cloneDeep(this.initialSelection);\n  }\n\n  submitAction() {\n    const activeFlags = {};\n    this.flags.forEach((flag) => {\n      if (flag.indeterminate) {\n        activeFlags[flag.code] = null;\n      } else {\n        activeFlags[flag.code] = flag.value;\n      }\n    });\n    const selectedIds = this.selected.map((selection) => selection['osd']);\n    this.osdService.updateIndividualFlags(activeFlags, selectedIds).subscribe(\n      () => {\n        this.notificationService.show(NotificationType.success, $localize`Updated OSD Flags`);\n        this.activeModal.close();\n      },\n      () => {\n        this.activeModal.close();\n      }\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>Cluster-wide OSD Flags</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"osdFlagsForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"osdFlagsForm\"\n          novalidate\n          cdFormScope=\"osd\">\n      <div class=\"modal-body osd-modal\">\n        <div class=\"custom-control custom-checkbox\"\n             *ngFor=\"let flag of flags; let last = last\">\n          <input class=\"custom-control-input\"\n                 type=\"checkbox\"\n                 [checked]=\"flag.value\"\n                 (change)=\"flag.value = !flag.value\"\n                 [name]=\"flag.code\"\n                 [id]=\"flag.code\"\n                 [disabled]=\"flag.disabled\">\n          <label class=\"custom-control-label\"\n                 [for]=\"flag.code\"\n                 ng-class=\"['tc_' + key]\">\n            <strong>{{ flag.name }}</strong>\n            <br>\n            <span class=\"form-text text-muted\">{{ flag.description }}</span>\n          </label>\n          <hr class=\"m-1\"\n              *ngIf=\"!last\">\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                              [form]=\"osdFlagsForm\"\n                              [showSubmit]=\"permissions.osd.update\"\n                              [submitText]=\"actionLabels.UPDATE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-osd-flags-modal',\n  templateUrl: './osd-flags-modal.component.html',\n  styleUrls: ['./osd-flags-modal.component.scss']\n})\nexport class OsdFlagsModalComponent implements OnInit {\n  permissions: Permissions;\n\n  osdFlagsForm = new UntypedFormGroup({});\n\n  allFlags = {\n    noin: {\n      code: 'noin',\n      name: $localize`No In`,\n      value: false,\n      description: $localize`OSDs that were previously marked out will not be marked back in when they start`\n    },\n    noout: {\n      code: 'noout',\n      name: $localize`No Out`,\n      value: false,\n      description: $localize`OSDs will not automatically be marked out after the configured interval`\n    },\n    noup: {\n      code: 'noup',\n      name: $localize`No Up`,\n      value: false,\n      description: $localize`OSDs are not allowed to start`\n    },\n    nodown: {\n      code: 'nodown',\n      name: $localize`No Down`,\n      value: false,\n      description: $localize`OSD failure reports are being ignored, such that the monitors will not mark OSDs down`\n    },\n    pause: {\n      code: 'pause',\n      name: $localize`Pause`,\n      value: false,\n      description: $localize`Pauses reads and writes`\n    },\n    noscrub: {\n      code: 'noscrub',\n      name: $localize`No Scrub`,\n      value: false,\n      description: $localize`Scrubbing is disabled`\n    },\n    'nodeep-scrub': {\n      code: 'nodeep-scrub',\n      name: $localize`No Deep Scrub`,\n      value: false,\n      description: $localize`Deep Scrubbing is disabled`\n    },\n    nobackfill: {\n      code: 'nobackfill',\n      name: $localize`No Backfill`,\n      value: false,\n      description: $localize`Backfilling of PGs is suspended`\n    },\n    norebalance: {\n      code: 'norebalance',\n      name: $localize`No Rebalance`,\n      value: false,\n      description: $localize`OSD will choose not to backfill unless PG is also degraded`\n    },\n    norecover: {\n      code: 'norecover',\n      name: $localize`No Recover`,\n      value: false,\n      description: $localize`Recovery of PGs is suspended`\n    },\n    sortbitwise: {\n      code: 'sortbitwise',\n      name: $localize`Bitwise Sort`,\n      value: false,\n      description: $localize`Use bitwise sort`,\n      disabled: true\n    },\n    purged_snapdirs: {\n      code: 'purged_snapdirs',\n      name: $localize`Purged Snapdirs`,\n      value: false,\n      description: $localize`OSDs have converted snapsets`,\n      disabled: true\n    },\n    recovery_deletes: {\n      code: 'recovery_deletes',\n      name: $localize`Recovery Deletes`,\n      value: false,\n      description: $localize`Deletes performed during recovery instead of peering`,\n      disabled: true\n    },\n    pglog_hardlimit: {\n      code: 'pglog_hardlimit',\n      name: $localize`PG Log Hard Limit`,\n      value: false,\n      description: $localize`Puts a hard limit on pg log length`,\n      disabled: true\n    }\n  };\n  flags: any[];\n  unknownFlags: string[] = [];\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private osdService: OsdService,\n    private notificationService: NotificationService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    this.osdService.getFlags().subscribe((res: string[]) => {\n      res.forEach((value) => {\n        if (this.allFlags[value]) {\n          this.allFlags[value].value = true;\n        } else {\n          this.unknownFlags.push(value);\n        }\n      });\n      this.flags = _.toArray(this.allFlags);\n    });\n  }\n\n  submitAction() {\n    const newFlags = this.flags\n      .filter((flag) => flag.value)\n      .map((flag) => flag.code)\n      .concat(this.unknownFlags);\n\n    this.osdService.updateFlags(newFlags).subscribe(\n      () => {\n        this.notificationService.show(NotificationType.success, $localize`Updated OSD Flags`);\n        this.activeModal.close();\n      },\n      () => {\n        this.activeModal.close();\n      }\n    );\n  }\n}\n","<div [formGroup]=\"optionsFormGroup\">\n  <div *ngFor=\"let option of options; let last = last\">\n    <div class=\"form-group row pt-2\"\n         *ngIf=\"option.type === 'bool'\">\n      <label class=\"cd-col-form-label\"\n             [for]=\"option.name\">\n        <b>{{ option.text }}</b>\n        <br>\n        <span class=\"text-muted\">\n          {{ option.desc }}\n          <cd-helper *ngIf=\"option.long_desc\">\n            {{ option.long_desc }}</cd-helper>\n        </span>\n      </label>\n\n      <div class=\"cd-col-form-input\">\n        <div class=\"custom-control custom-checkbox\">\n          <input class=\"custom-control-input\"\n                 type=\"checkbox\"\n                 [id]=\"option.name\"\n                 [formControlName]=\"option.name\">\n          <label class=\"custom-control-label\"\n                 [for]=\"option.name\"></label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group row pt-2\"\n         *ngIf=\"option.type !== 'bool'\">\n      <label class=\"cd-col-form-label\"\n             [for]=\"option.name\">{{ option.text }}\n        <br>\n        <span class=\"text-muted\">\n          {{ option.desc }}\n          <cd-helper *ngIf=\"option.long_desc\">\n            {{ option.long_desc }}</cd-helper>\n        </span>\n      </label>\n      <div class=\"cd-col-form-input\">\n        <div class=\"input-group\">\n          <input class=\"form-control\"\n                 [type]=\"option.additionalTypeInfo.inputType\"\n                 [id]=\"option.name\"\n                 [placeholder]=\"option.additionalTypeInfo.humanReadable\"\n                 [formControlName]=\"option.name\"\n                 [step]=\"getStep(option.type, optionsForm.getValue(option.name))\">\n          <button class=\"btn btn-light\"\n                  type=\"button\"\n                  data-toggle=\"button\"\n                  title=\"Remove the custom configuration value. The default configuration will be inherited and used instead.\"\n                  (click)=\"resetValue(option.name)\"\n                  i18n-title\n                  *ngIf=\"optionsFormShowReset\">\n            <i [ngClass]=\"[icons.erase]\"\n               aria-hidden=\"true\"></i>\n          </button>\n        </div>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"optionsForm.showError(option.name, optionsFormDir, 'pattern')\">\n          {{ option.additionalTypeInfo.patternHelpText }}</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"optionsForm.showError(option.name, optionsFormDir, 'invalidUuid')\">\n          {{ option.additionalTypeInfo.patternHelpText }}</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"optionsForm.showError(option.name, optionsFormDir, 'max')\"\n              i18n>The entered value is too high! It must not be greater than {{ option.maxValue }}.</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"optionsForm.showError(option.name, optionsFormDir, 'min')\"\n              i18n>The entered value is too low! It must not be lower than {{ option.minValue }}.</span>\n      </div>\n    </div>\n    <hr *ngIf=\"!last\"\n        class=\"my-2\">\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { UntypedFormControl, NgForm } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { ConfigOptionTypes } from './config-option.types';\n\n@Component({\n  selector: 'cd-config-option',\n  templateUrl: './config-option.component.html',\n  styleUrls: ['./config-option.component.scss']\n})\nexport class ConfigOptionComponent implements OnInit {\n  @Input()\n  optionNames: Array<string> = [];\n  @Input()\n  optionsForm: CdFormGroup = new CdFormGroup({});\n  @Input()\n  optionsFormDir: NgForm = new NgForm([], []);\n  @Input()\n  optionsFormGroupName = '';\n  @Input()\n  optionsFormShowReset = true;\n\n  icons = Icons;\n  options: Array<any> = [];\n  optionsFormGroup: CdFormGroup = new CdFormGroup({});\n\n  constructor(private configService: ConfigurationService) {}\n\n  private static optionNameToText(optionName: string): string {\n    const sections = ['mon', 'mgr', 'osd', 'mds', 'client'];\n    return optionName\n      .split('_')\n      .filter((c, index) => index !== 0 || !sections.includes(c))\n      .map((c) => c.charAt(0).toUpperCase() + c.substring(1))\n      .join(' ');\n  }\n\n  ngOnInit() {\n    this.createForm();\n    this.loadStoredData();\n  }\n\n  private createForm() {\n    this.optionsForm.addControl(this.optionsFormGroupName, this.optionsFormGroup);\n    this.optionNames.forEach((optionName) => {\n      this.optionsFormGroup.addControl(optionName, new UntypedFormControl(null));\n    });\n  }\n\n  getStep(type: string, value: any): number | undefined {\n    return ConfigOptionTypes.getTypeStep(type, value);\n  }\n\n  private loadStoredData() {\n    this.configService.filter(this.optionNames).subscribe((data: any) => {\n      this.options = data.map((configOption: any) => {\n        const formControl = this.optionsForm.get(configOption.name);\n        const typeValidators = ConfigOptionTypes.getTypeValidators(configOption);\n        configOption.additionalTypeInfo = ConfigOptionTypes.getType(configOption.type);\n\n        // Set general information and value\n        configOption.text = ConfigOptionComponent.optionNameToText(configOption.name);\n        configOption.value = _.find(configOption.value, (p) => {\n          return p.section === 'osd'; // TODO: Can handle any other section\n        });\n        if (configOption.value) {\n          if (configOption.additionalTypeInfo.name === 'bool') {\n            formControl.setValue(configOption.value.value === 'true');\n          } else {\n            formControl.setValue(configOption.value.value);\n          }\n        }\n\n        // Set type information and validators\n        if (typeValidators) {\n          configOption.patternHelpText = typeValidators.patternHelpText;\n          if ('max' in typeValidators && typeValidators.max !== '') {\n            configOption.maxValue = typeValidators.max;\n          }\n          if ('min' in typeValidators && typeValidators.min !== '') {\n            configOption.minValue = typeValidators.min;\n          }\n          formControl.setValidators(typeValidators.validators);\n        }\n\n        return configOption;\n      });\n    });\n  }\n\n  saveValues() {\n    const options = {};\n    this.optionNames.forEach((optionName) => {\n      const optionValue = this.optionsForm.getValue(optionName);\n      if (optionValue !== null && optionValue !== '') {\n        options[optionName] = {\n          section: 'osd', // TODO: Can handle any other section\n          value: optionValue\n        };\n      }\n    });\n\n    return this.configService.bulkCreate({ options: options });\n  }\n\n  resetValue(optionName: string) {\n    this.configService.delete(optionName, 'osd').subscribe(\n      // TODO: Can handle any other section\n      () => {\n        const formControl = this.optionsForm.get(optionName);\n        formControl.reset();\n      }\n    );\n  }\n}\n","export class OsdPgScrubModalOptions {\n  public static basicOptions: Array<string> = [\n    'osd_scrub_during_recovery',\n    'osd_scrub_begin_hour',\n    'osd_scrub_end_hour',\n    'osd_scrub_begin_week_day',\n    'osd_scrub_end_week_day',\n    'osd_scrub_min_interval',\n    'osd_scrub_max_interval',\n    'osd_deep_scrub_interval',\n    'osd_scrub_auto_repair',\n    'osd_max_scrubs',\n    'osd_scrub_priority',\n    'osd_scrub_sleep'\n  ];\n\n  public static advancedOptions: Array<string> = [\n    'osd_scrub_auto_repair_num_errors',\n    'osd_debug_deep_scrub_sleep',\n    'osd_deep_scrub_keys',\n    'osd_deep_scrub_large_omap_object_key_threshold',\n    'osd_deep_scrub_large_omap_object_value_sum_threshold',\n    'osd_deep_scrub_randomize_ratio',\n    'osd_deep_scrub_stride',\n    'osd_deep_scrub_update_digest_min_age',\n    'osd_requested_scrub_priority',\n    'osd_scrub_backoff_ratio',\n    'osd_scrub_chunk_max',\n    'osd_scrub_chunk_min',\n    'osd_scrub_cost',\n    'osd_scrub_interval_randomize_ratio',\n    'osd_scrub_invalid_stats',\n    'osd_scrub_load_threshold',\n    'osd_scrub_max_preemptions',\n    'osd_shallow_scrub_chunk_max',\n    'osd_shallow_scrub_chunk_min'\n  ];\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} {{ resource | upperFirst }}</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #formDir=\"ngForm\"\n          [formGroup]=\"osdPgScrubForm\"\n          novalidate\n          cdFormScope=\"osd\">\n      <div class=\"modal-body osd-modal\">\n        <!-- Basic -->\n        <cd-config-option [optionNames]=\"basicOptions\"\n                          [optionsForm]=\"osdPgScrubForm\"\n                          [optionsFormDir]=\"formDir\"\n                          [optionsFormGroupName]=\"'basicFormGroup'\"\n                          #basicOptionsValues></cd-config-option>\n        <!-- Advanced -->\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <a class=\"pull-right margin-right-md\"\n               (click)=\"advancedEnabled = true\"\n               *ngIf=\"!advancedEnabled\"\n               i18n>Advanced...</a>\n          </div>\n        </div>\n        <div *ngIf=\"advancedEnabled\">\n          <h3 class=\"page-header\"\n              i18n>Advanced configuration options</h3>\n          <cd-config-option [optionNames]=\"advancedOptions\"\n                            [optionsForm]=\"osdPgScrubForm\"\n                            [optionsFormDir]=\"formDir\"\n                            [optionsFormGroupName]=\"'advancedFormGroup'\"\n                            #advancedOptionsValues></cd-config-option>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                              [form]=\"osdPgScrubForm\"\n                              [showSubmit]=\"permissions.configOpt.update\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, ViewChild } from '@angular/core';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { forkJoin as observableForkJoin } from 'rxjs';\n\nimport { ConfigOptionComponent } from '~/app/shared/components/config-option/config-option.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { OsdPgScrubModalOptions } from './osd-pg-scrub-modal.options';\n\n@Component({\n  selector: 'cd-osd-pg-scrub-modal',\n  templateUrl: './osd-pg-scrub-modal.component.html',\n  styleUrls: ['./osd-pg-scrub-modal.component.scss']\n})\nexport class OsdPgScrubModalComponent {\n  osdPgScrubForm: CdFormGroup;\n  action: string;\n  resource: string;\n  permissions: Permissions;\n\n  @ViewChild('basicOptionsValues', { static: true })\n  basicOptionsValues: ConfigOptionComponent;\n  basicOptions: Array<string> = OsdPgScrubModalOptions.basicOptions;\n\n  @ViewChild('advancedOptionsValues')\n  advancedOptionsValues: ConfigOptionComponent;\n  advancedOptions: Array<string> = OsdPgScrubModalOptions.advancedOptions;\n\n  advancedEnabled = false;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private authStorageService: AuthStorageService,\n    private notificationService: NotificationService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    this.osdPgScrubForm = new CdFormGroup({});\n    this.resource = $localize`PG scrub options`;\n    this.action = this.actionLabels.EDIT;\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  submitAction() {\n    const observables = [this.basicOptionsValues.saveValues()];\n\n    if (this.advancedOptionsValues) {\n      observables.push(this.advancedOptionsValues.saveValues());\n    }\n\n    observableForkJoin(observables).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated PG scrub options`\n        );\n        this.activeModal.close();\n      },\n      () => {\n        this.activeModal.close();\n      }\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>OSD Recovery Priority</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form #formDir=\"ngForm\"\n          [formGroup]=\"osdRecvSpeedForm\"\n          novalidate\n          cdFormScope=\"osd\">\n      <div class=\"modal-body\">\n        <!-- Priority -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"priority\"\n                 i18n>Priority</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    formControlName=\"priority\"\n                    id=\"priority\"\n                    (change)=\"onPriorityChange($event.target.value)\">\n              <option *ngFor=\"let priority of priorities\"\n                      [value]=\"priority.name\">\n                {{ priority.text }}\n              </option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"osdRecvSpeedForm.showError('priority', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n\n        <!-- Customize priority -->\n        <div class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input formControlName=\"customizePriority\"\n                     class=\"custom-control-input\"\n                     id=\"customizePriority\"\n                     name=\"customizePriority\"\n                     type=\"checkbox\"\n                     (change)=\"onCustomizePriorityChange()\">\n              <label class=\"custom-control-label\"\n                     for=\"customizePriority\"\n                     i18n>Customize priority values</label>\n            </div>\n          </div>\n        </div>\n\n        <!-- Priority values -->\n        <div class=\"form-group row\"\n             *ngFor=\"let attr of priorityAttrs | keyvalue\">\n          <label class=\"cd-col-form-label\"\n                 [for]=\"attr.key\">\n            <span [ngClass]=\"{'required': osdRecvSpeedForm.getValue('customizePriority')}\">\n              {{ attr.value.text }}\n            </span>\n            <cd-helper *ngIf=\"attr.value.desc\">{{ attr.value.desc }}</cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"number\"\n                   [id]=\"attr.key\"\n                   [formControlName]=\"attr.key\"\n                   [readonly]=\"!osdRecvSpeedForm.getValue('customizePriority')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"osdRecvSpeedForm.getValue('customizePriority') &&\n                  osdRecvSpeedForm.showError(attr.key, formDir, 'required')\"\n                  i18n>This field is required!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"osdRecvSpeedForm.getValue('customizePriority') &&\n                  osdRecvSpeedForm.showError(attr.key, formDir, 'pattern')\"\n                  i18n>{{ attr.value.patternHelpText }}</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"osdRecvSpeedForm.getValue('customizePriority') &&\n                  osdRecvSpeedForm.showError(attr.key, formDir, 'max')\"\n                  i18n>The entered value is too high! It must not be greater than {{ attr.value.maxValue }}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"osdRecvSpeedForm.getValue('customizePriority') &&\n                  osdRecvSpeedForm.showError(attr.key, formDir, 'min')\"\n                  i18n>The entered value is too low! It must not be lower than {{ attr.value.minValue }}.</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                              [form]=\"osdRecvSpeedForm\"\n                              [submitText]=\"actionLabels.UPDATE\"\n                              [showSubmit]=\"permissions.configOpt.update\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { ConfigurationService } from '~/app/shared/api/configuration.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ConfigOptionTypes } from '~/app/shared/components/config-option/config-option.types';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-osd-recv-speed-modal',\n  templateUrl: './osd-recv-speed-modal.component.html',\n  styleUrls: ['./osd-recv-speed-modal.component.scss']\n})\nexport class OsdRecvSpeedModalComponent implements OnInit {\n  osdRecvSpeedForm: CdFormGroup;\n  permissions: Permissions;\n\n  priorities: any[] = [];\n  priorityAttrs = {};\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private configService: ConfigurationService,\n    private notificationService: NotificationService,\n    private osdService: OsdService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n    this.priorities = this.osdService.osdRecvSpeedModalPriorities.KNOWN_PRIORITIES;\n    this.osdRecvSpeedForm = new CdFormGroup({\n      priority: new UntypedFormControl(null, { validators: [Validators.required] }),\n      customizePriority: new UntypedFormControl(false)\n    });\n    this.priorityAttrs = {\n      osd_max_backfills: {\n        text: $localize`Max Backfills`,\n        desc: '',\n        patternHelpText: '',\n        maxValue: undefined,\n        minValue: undefined\n      },\n      osd_recovery_max_active: {\n        text: $localize`Recovery Max Active`,\n        desc: '',\n        patternHelpText: '',\n        maxValue: undefined,\n        minValue: undefined\n      },\n      osd_recovery_max_single_start: {\n        text: $localize`Recovery Max Single Start`,\n        desc: '',\n        patternHelpText: '',\n        maxValue: undefined,\n        minValue: undefined\n      },\n      osd_recovery_sleep: {\n        text: $localize`Recovery Sleep`,\n        desc: '',\n        patternHelpText: '',\n        maxValue: undefined,\n        minValue: undefined\n      }\n    };\n\n    Object.keys(this.priorityAttrs).forEach((configOptionName) => {\n      this.osdRecvSpeedForm.addControl(\n        configOptionName,\n        new UntypedFormControl(null, { validators: [Validators.required] })\n      );\n    });\n  }\n\n  ngOnInit() {\n    this.configService.filter(Object.keys(this.priorityAttrs)).subscribe((data: any) => {\n      const config_option_values = this.getCurrentValues(data);\n      this.detectPriority(config_option_values.values, (priority: any) => {\n        this.setPriority(priority);\n      });\n      this.setDescription(config_option_values.configOptions);\n      this.setValidators(config_option_values.configOptions);\n    });\n  }\n\n  detectPriority(configOptionValues: any, callbackFn: Function) {\n    const priority = _.find(this.priorities, (p) => {\n      return _.isEqual(p.values, configOptionValues);\n    });\n\n    this.osdRecvSpeedForm.controls.customizePriority.setValue(false);\n\n    if (priority) {\n      return callbackFn(priority);\n    }\n\n    if (Object.entries(configOptionValues).length === 4) {\n      this.osdRecvSpeedForm.controls.customizePriority.setValue(true);\n      return callbackFn(\n        Object({ name: 'custom', text: $localize`Custom`, values: configOptionValues })\n      );\n    }\n\n    return callbackFn(this.priorities[0]);\n  }\n\n  getCurrentValues(configOptions: any) {\n    const currentValues: Record<string, any> = { values: {}, configOptions: [] };\n    configOptions.forEach((configOption: any) => {\n      currentValues.configOptions.push(configOption);\n\n      if ('value' in configOption) {\n        configOption.value.forEach((value: any) => {\n          if (value.section === 'osd') {\n            currentValues.values[configOption.name] = Number(value.value);\n          }\n        });\n      } else if ('default' in configOption && configOption.default !== null) {\n        currentValues.values[configOption.name] = Number(configOption.default);\n      }\n    });\n    return currentValues;\n  }\n\n  setDescription(configOptions: Array<any>) {\n    configOptions.forEach((configOption) => {\n      if (configOption.desc !== '') {\n        this.priorityAttrs[configOption.name].desc = configOption.desc;\n      }\n    });\n  }\n\n  setPriority(priority: any) {\n    const customPriority = _.find(this.priorities, (p) => {\n      return p.name === 'custom';\n    });\n\n    if (priority.name === 'custom') {\n      if (!customPriority) {\n        this.priorities.push(priority);\n      }\n    } else {\n      if (customPriority) {\n        this.priorities.splice(this.priorities.indexOf(customPriority), 1);\n      }\n    }\n\n    this.osdRecvSpeedForm.controls.priority.setValue(priority.name);\n    Object.entries(priority.values).forEach(([name, value]) => {\n      this.osdRecvSpeedForm.controls[name].setValue(value);\n    });\n  }\n\n  setValidators(configOptions: Array<any>) {\n    configOptions.forEach((configOption) => {\n      const typeValidators = ConfigOptionTypes.getTypeValidators(configOption);\n      if (typeValidators) {\n        typeValidators.validators.push(Validators.required);\n\n        if ('max' in typeValidators && typeValidators.max !== '') {\n          this.priorityAttrs[configOption.name].maxValue = typeValidators.max;\n        }\n\n        if ('min' in typeValidators && typeValidators.min !== '') {\n          this.priorityAttrs[configOption.name].minValue = typeValidators.min;\n        }\n\n        this.priorityAttrs[configOption.name].patternHelpText = typeValidators.patternHelpText;\n        this.osdRecvSpeedForm.controls[configOption.name].setValidators(typeValidators.validators);\n      } else {\n        this.osdRecvSpeedForm.controls[configOption.name].setValidators(Validators.required);\n      }\n    });\n  }\n\n  onCustomizePriorityChange() {\n    const values = {};\n    Object.keys(this.priorityAttrs).forEach((configOptionName) => {\n      values[configOptionName] = this.osdRecvSpeedForm.getValue(configOptionName);\n    });\n\n    if (this.osdRecvSpeedForm.getValue('customizePriority')) {\n      const customPriority = {\n        name: 'custom',\n        text: $localize`Custom`,\n        values: values\n      };\n      this.setPriority(customPriority);\n    } else {\n      this.detectPriority(values, (priority: any) => {\n        this.setPriority(priority);\n      });\n    }\n  }\n\n  onPriorityChange(selectedPriorityName: string) {\n    const selectedPriority =\n      _.find(this.priorities, (p) => {\n        return p.name === selectedPriorityName;\n      }) || this.priorities[0];\n    // Uncheck the 'Customize priority values' checkbox.\n    this.osdRecvSpeedForm.get('customizePriority').setValue(false);\n    // Set the priority profile values.\n    this.setPriority(selectedPriority);\n  }\n\n  submitAction() {\n    const options = {};\n    Object.keys(this.priorityAttrs).forEach((configOptionName) => {\n      options[configOptionName] = {\n        section: 'osd',\n        value: this.osdRecvSpeedForm.getValue(configOptionName)\n      };\n    });\n\n    this.configService.bulkCreate({ options: options }).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated OSD recovery speed priority '${this.osdRecvSpeedForm.getValue(\n            'priority'\n          )}'`\n        );\n        this.activeModal.close();\n      },\n      () => {\n        this.activeModal.close();\n      }\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>Reweight OSD: {{ osdId }}</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form [formGroup]=\"reweightForm\">\n      <div class=\"modal-body\">\n        <div class=\"row\">\n          <label for=\"weight\"\n                 class=\"cd-col-form-label\">Weight</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"weight\"\n                   class=\"form-control\"\n                   type=\"number\"\n                   step=\"0.1\"\n                   formControlName=\"weight\"\n                   min=\"0\"\n                   max=\"1\"\n                   [value]=\"currentWeight\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"weight.errors\">\n              <span *ngIf=\"weight.errors?.required\"\n                    i18n>This field is required.</span>\n              <span *ngIf=\"weight.errors?.max || weight.errors?.min\"\n                    i18n>The value needs to be between 0 and 1.</span>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"reweight()\"\n                              [form]=\"reweightForm\"\n                              [submitText]=\"actionLabels.REWEIGHT\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\n@Component({\n  selector: 'cd-osd-reweight-modal',\n  templateUrl: './osd-reweight-modal.component.html',\n  styleUrls: ['./osd-reweight-modal.component.scss']\n})\nexport class OsdReweightModalComponent implements OnInit {\n  currentWeight = 1;\n  osdId: number;\n  reweightForm: CdFormGroup;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    public activeModal: NgbActiveModal,\n    private osdService: OsdService,\n    private fb: CdFormBuilder\n  ) {}\n\n  get weight() {\n    return this.reweightForm.get('weight');\n  }\n\n  ngOnInit() {\n    this.reweightForm = this.fb.group({\n      weight: this.fb.control(this.currentWeight, [Validators.required])\n    });\n  }\n\n  reweight() {\n    this.osdService\n      .reweight(this.osdId, this.reweightForm.value.weight)\n      .subscribe(() => this.activeModal.close());\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { forkJoin } from 'rxjs';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { JoinPipe } from '~/app/shared/pipes/join.pipe';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-osd-scrub-modal',\n  templateUrl: './osd-scrub-modal.component.html',\n  styleUrls: ['./osd-scrub-modal.component.scss']\n})\nexport class OsdScrubModalComponent implements OnInit {\n  deep: boolean;\n  scrubForm: UntypedFormGroup;\n  selected: any[] = [];\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private osdService: OsdService,\n    private notificationService: NotificationService,\n    private joinPipe: JoinPipe\n  ) {}\n\n  ngOnInit() {\n    this.scrubForm = new UntypedFormGroup({});\n  }\n\n  scrub() {\n    forkJoin(this.selected.map((id: any) => this.osdService.scrub(id, this.deep))).subscribe(\n      () => {\n        const operation = this.deep ? 'Deep scrub' : 'Scrub';\n\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`${operation} was initialized in the following OSD(s): ${this.joinPipe.transform(\n            this.selected\n          )}`\n        );\n\n        this.activeModal.close();\n      },\n      () => this.activeModal.close()\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <span class=\"modal-title\"\n        i18n>OSDs {deep, select, true {Deep } other {}}Scrub</span>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"scrubForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"scrubForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <p i18n>You are about to apply a {deep, select, true {deep } other {}}scrub to\n          the OSD(s): <strong>{{ selected | join }}</strong>.</p>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"scrub()\"\n                              [form]=\"scrubForm\"\n                              [submitText]=\"actionLabels.UPDATE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       id=\"tabset-osd-details\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"osd-details\">\n    <ng-container ngbNavItem=\"devices\">\n      <a ngbNavLink\n         i18n>Devices</a>\n      <ng-template ngbNavContent>\n        <cd-device-list [osdId]=\"osd?.id\"\n                        [hostname]=\"selection?.host.name\"\n                        [osdList]=\"true\"></cd-device-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"attributes\">\n      <a ngbNavLink\n         i18n>Attributes (OSD map)</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [data]=\"osd?.details?.osd_map\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"metadata\">\n      <a ngbNavLink\n         i18n>Metadata</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value *ngIf=\"osd?.details?.osd_metadata; else noMetaData\"\n                            (fetchData)=\"refresh()\"\n                            [data]=\"osd?.details?.osd_metadata\">\n        </cd-table-key-value>\n        <ng-template #noMetaData>\n          <cd-alert-panel type=\"warning\"\n                          i18n>Metadata not available</cd-alert-panel>\n        </ng-template>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"device-health\">\n      <a ngbNavLink\n         i18n>Device health</a>\n      <ng-template ngbNavContent>\n        <cd-smart-list [osdId]=\"osd?.id\"></cd-smart-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-counter\">\n      <a ngbNavLink\n         i18n>Performance counter</a>\n      <ng-template ngbNavContent>\n        <cd-table-performance-counter *ngIf=\"osd?.details\"\n                                      serviceType=\"osd\"\n                                      [serviceId]=\"osd?.id\">\n        </cd-table-performance-counter>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"grafanaPermission.read\">\n      <a ngbNavLink\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"OSD details\"\n                    [grafanaPath]=\"'osd-device-details?var-osd=osd.' + osd['id']\"\n                    [type]=\"'metrics'\"\n                    uid=\"CrAHE0iZz\"\n                    grafanaStyle=\"three\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-osd-details',\n  templateUrl: './osd-details.component.html',\n  styleUrls: ['./osd-details.component.scss']\n})\nexport class OsdDetailsComponent implements OnChanges {\n  @Input()\n  selection: any;\n\n  osd: {\n    id?: number;\n    details?: any;\n    tree?: any;\n  };\n  grafanaPermission: Permission;\n\n  constructor(private osdService: OsdService, private authStorageService: AuthStorageService) {\n    this.grafanaPermission = this.authStorageService.getPermissions().grafana;\n  }\n\n  ngOnChanges() {\n    if (this.osd?.id !== this.selection?.id) {\n      this.osd = this.selection;\n    }\n\n    if (_.isNumber(this.osd?.id)) {\n      this.refresh();\n    }\n  }\n\n  refresh() {\n    this.osdService.getDetails(this.osd.id).subscribe((data) => {\n      this.osd.details = data;\n    });\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\">\n  <ng-container ngbNavItem>\n    <a ngbNavLink\n       i18n>OSDs List</a>\n    <ng-template ngbNavContent>\n      <cd-table [data]=\"osds\"\n                (fetchData)=\"getOsdList($event)\"\n                [columns]=\"columns\"\n                selectionType=\"multiClick\"\n                [hasDetails]=\"true\"\n                (setExpandedRow)=\"setExpandedRow($event)\"\n                (updateSelection)=\"updateSelection($event)\"\n                [updateSelectionOnRefresh]=\"'never'\"\n                [serverSide]=\"true\"\n                [count]=\"count\">\n\n        <div class=\"table-actions\">\n          <cd-table-actions [permission]=\"permissions.osd\"\n                            [selection]=\"selection\"\n                            class=\"btn-group\"\n                            id=\"osd-actions\"\n                            [tableActions]=\"tableActions\">\n          </cd-table-actions>\n          <cd-table-actions [permission]=\"{read: true}\"\n                            [selection]=\"selection\"\n                            dropDownOnly=\"Cluster-wide configuration\"\n                            btnColor=\"light\"\n                            class=\"btn-group\"\n                            id=\"cluster-wide-actions\"\n                            [tableActions]=\"clusterWideActions\">\n          </cd-table-actions>\n        </div>\n\n        <cd-osd-details *cdTableDetail\n                        [selection]=\"expandedRow\">\n        </cd-osd-details>\n      </cd-table>\n    </ng-template>\n  </ng-container>\n\n  <ng-container ngbNavItem\n                *ngIf=\"permissions.grafana.read\">\n    <a ngbNavLink\n       i18n>Overall Performance</a>\n    <ng-template ngbNavContent>\n      <cd-grafana i18n-title\n                  title=\"OSD list\"\n                  [grafanaPath]=\"'osd-overview?'\"\n                  [type]=\"'metrics'\"\n                  uid=\"lo02I1Aiz\"\n                  grafanaStyle=\"four\">\n      </cd-grafana>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n\n<ng-template #markOsdConfirmationTpl\n             let-markActionDescription=\"markActionDescription\"\n             let-osdIds=\"osdIds\">\n  <ng-container i18n><strong>OSD(s) {{ osdIds | join }}</strong> will be marked\n  <strong>{{ markActionDescription }}</strong> if you proceed.</ng-container>\n</ng-template>\n\n<ng-template #criticalConfirmationTpl\n             let-safeToPerform=\"safeToPerform\"\n             let-message=\"message\"\n             let-active=\"active\"\n             let-missingStats=\"missingStats\"\n             let-storedPgs=\"storedPgs\"\n             let-actionDescription=\"actionDescription\"\n             let-osdIds=\"osdIds\">\n  <div *ngIf=\"!safeToPerform\"\n       class=\"danger mb-3\">\n    <cd-alert-panel type=\"warning\">\n      <span i18n>\n        The {selection.hasSingleSelection, select, true {OSD is} other {OSDs are}} not safe to be\n        {{ actionDescription }}!\n      </span>\n      <br>\n      <ul class=\"mb-0 ps-4\">\n        <li *ngIf=\"active.length > 0\"\n             i18n>\n          {selection.hasSingleSelection, select, true {} other {{{ active | join }} : }}\n          Some PGs are currently mapped to\n          {active.length === 1, select, true {it} other {them}}.\n        </li>\n        <li *ngIf=\"missingStats.length > 0\"\n             i18n>\n          {selection.hasSingleSelection, select, true {} other {{{ missingStats | join }} : }}\n          There are no reported stats and not all PGs are active and clean.\n        </li>\n        <li *ngIf=\"storedPgs.length > 0\"\n             i18n>\n          {selection.hasSingleSelection, select, true {OSD} other {{{ storedPgs | join }} : OSDs }}\n          still store some PG data and not all PGs are active and clean.\n        </li>\n        <li *ngIf=\"message\">\n          {{ message }}\n        </li>\n      </ul>\n    </cd-alert-panel>\n  </div>\n  <div *ngIf=\"safeToPerform\"\n       class=\"danger mb-3\">\n    <cd-alert-panel type=\"info\">\n      <span i18n>\n        The {selection.hasSingleSelection, select, true {OSD is} other {OSDs are}}\n        safe to destroy without reducing data durability.\n      </span>\n    </cd-alert-panel>\n  </div>\n  <ng-container i18n><strong>OSD {{ osdIds | join }}</strong> will be\n  <strong>{{ actionDescription }}</strong> if you proceed.</ng-container>\n</ng-template>\n\n<ng-template #flagsTpl\n             let-row=\"data.row\">\n  <span *ngFor=\"let flag of row.cdClusterFlags;\"\n        class=\"badge badge-hdd me-1\">{{ flag }}</span>\n  <span *ngFor=\"let flag of row.cdIndivFlags;\"\n        class=\"badge badge-info me-1\">{{ flag }}</span>\n</ng-template>\n\n<ng-template #osdUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar [title]=\"'osd ' + row.osd\"\n                [total]=\"row.stats.stat_bytes\"\n                [used]=\"row.stats.stat_bytes_used\"\n                [warningThreshold]=\"osdSettings.nearfull_ratio\"\n                [errorThreshold]=\"osdSettings.full_ratio\">\n  </cd-usage-bar>\n</ng-template>\n\n<ng-template #deleteOsdExtraTpl\n             let-form=\"form\">\n  <ng-container [formGroup]=\"form\">\n    <ng-container formGroupName=\"child\">\n      <div class=\"form-group\">\n        <div class=\"custom-control custom-checkbox\">\n          <input type=\"checkbox\"\n                 class=\"custom-control-input\"\n                 name=\"preserve\"\n                 id=\"preserve\"\n                 formControlName=\"preserve\">\n          <label class=\"custom-control-label\"\n                 for=\"preserve\"\n                 i18n>Preserve OSD ID(s) for replacement.</label>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FormModalComponent } from '~/app/shared/components/form-modal/form-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { OrchestratorFeature } from '~/app/shared/models/orchestrator.enum';\nimport { OrchestratorStatus } from '~/app/shared/models/orchestrator.interface';\nimport { OsdSettings } from '~/app/shared/models/osd-settings';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { OsdFlagsIndivModalComponent } from '../osd-flags-indiv-modal/osd-flags-indiv-modal.component';\nimport { OsdFlagsModalComponent } from '../osd-flags-modal/osd-flags-modal.component';\nimport { OsdPgScrubModalComponent } from '../osd-pg-scrub-modal/osd-pg-scrub-modal.component';\nimport { OsdRecvSpeedModalComponent } from '../osd-recv-speed-modal/osd-recv-speed-modal.component';\nimport { OsdReweightModalComponent } from '../osd-reweight-modal/osd-reweight-modal.component';\nimport { OsdScrubModalComponent } from '../osd-scrub-modal/osd-scrub-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { Osd } from '~/app/shared/models/osd.model';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nconst BASE_URL = 'osd';\n\n@Component({\n  selector: 'cd-osd-list',\n  templateUrl: './osd-list.component.html',\n  styleUrls: ['./osd-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }]\n})\nexport class OsdListComponent extends ListWithDetails implements OnInit {\n  @ViewChild('osdUsageTpl', { static: true })\n  osdUsageTpl: TemplateRef<any>;\n  @ViewChild('markOsdConfirmationTpl', { static: true })\n  markOsdConfirmationTpl: TemplateRef<any>;\n  @ViewChild('criticalConfirmationTpl', { static: true })\n  criticalConfirmationTpl: TemplateRef<any>;\n  @ViewChild('reweightBodyTpl')\n  reweightBodyTpl: TemplateRef<any>;\n  @ViewChild('safeToDestroyBodyTpl')\n  safeToDestroyBodyTpl: TemplateRef<any>;\n  @ViewChild('deleteOsdExtraTpl')\n  deleteOsdExtraTpl: TemplateRef<any>;\n  @ViewChild('flagsTpl', { static: true })\n  flagsTpl: TemplateRef<any>;\n\n  permissions: Permissions;\n  tableActions: CdTableAction[];\n  bsModalRef: NgbModalRef;\n  columns: CdTableColumn[];\n  clusterWideActions: CdTableAction[];\n  icons = Icons;\n  osdSettings = new OsdSettings();\n  count = 0;\n\n  selection = new CdTableSelection();\n  osds: any[] = [];\n  disabledFlags: string[] = [\n    'sortbitwise',\n    'purged_snapdirs',\n    'recovery_deletes',\n    'pglog_hardlimit'\n  ];\n  indivFlagNames: string[] = ['noup', 'nodown', 'noin', 'noout'];\n\n  orchStatus: OrchestratorStatus;\n  actionOrchFeatures = {\n    create: [OrchestratorFeature.OSD_CREATE],\n    delete: [OrchestratorFeature.OSD_DELETE]\n  };\n\n  protected static collectStates(osd: any) {\n    const states = [osd['in'] ? 'in' : 'out'];\n    if (osd['up']) {\n      states.push('up');\n    } else if (osd.state.includes('destroyed')) {\n      states.push('destroyed');\n    } else {\n      states.push('down');\n    }\n    return states;\n  }\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private osdService: OsdService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private modalService: ModalService,\n    private urlBuilder: URLBuilderService,\n    private router: Router,\n    private taskWrapper: TaskWrapperService,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private orchService: OrchestratorService,\n    private cdsModalService: ModalCdsService\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.router.navigate([this.urlBuilder.getCreate()]),\n        disable: (selection: CdTableSelection) => this.getDisable('create', selection),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () => this.editAction()\n      },\n      {\n        name: this.actionLabels.FLAGS,\n        permission: 'update',\n        icon: Icons.flag,\n        click: () => this.configureFlagsIndivAction(),\n        disable: () => !this.hasOsdSelected\n      },\n      {\n        name: this.actionLabels.SCRUB,\n        permission: 'update',\n        icon: Icons.analyse,\n        click: () => this.scrubAction(false),\n        disable: () => !this.hasOsdSelected,\n        canBePrimary: (selection: CdTableSelection) => selection.hasSelection\n      },\n      {\n        name: this.actionLabels.DEEP_SCRUB,\n        permission: 'update',\n        icon: Icons.deepCheck,\n        click: () => this.scrubAction(true),\n        disable: () => !this.hasOsdSelected\n      },\n      {\n        name: this.actionLabels.REWEIGHT,\n        permission: 'update',\n        click: () => this.reweight(),\n        disable: () => !this.hasOsdSelected || !this.selection.hasSingleSelection,\n        icon: Icons.reweight\n      },\n      {\n        name: this.actionLabels.MARK_OUT,\n        permission: 'update',\n        click: () => this.showConfirmationModal($localize`out`, this.osdService.markOut),\n        disable: () => this.isNotSelectedOrInState('out'),\n        icon: Icons.left\n      },\n      {\n        name: this.actionLabels.MARK_IN,\n        permission: 'update',\n        click: () => this.showConfirmationModal($localize`in`, this.osdService.markIn),\n        disable: () => this.isNotSelectedOrInState('in'),\n        icon: Icons.right\n      },\n      {\n        name: this.actionLabels.MARK_DOWN,\n        permission: 'update',\n        click: () => this.showConfirmationModal($localize`down`, this.osdService.markDown),\n        disable: () => this.isNotSelectedOrInState('down'),\n        icon: Icons.down\n      },\n      {\n        name: this.actionLabels.MARK_LOST,\n        permission: 'delete',\n        click: () =>\n          this.showCriticalConfirmationModal(\n            $localize`Mark`,\n            $localize`OSD lost`,\n            $localize`marked lost`,\n            (ids: number[]) => {\n              return this.osdService.safeToDestroy(JSON.stringify(ids));\n            },\n            'is_safe_to_destroy',\n            this.osdService.markLost\n          ),\n        disable: () => this.isNotSelectedOrInState('up'),\n        icon: Icons.flatten\n      },\n      {\n        name: this.actionLabels.PURGE,\n        permission: 'delete',\n        click: () =>\n          this.showCriticalConfirmationModal(\n            $localize`Purge`,\n            $localize`OSD`,\n            $localize`purged`,\n            (ids: number[]) => {\n              return this.osdService.safeToDestroy(JSON.stringify(ids));\n            },\n            'is_safe_to_destroy',\n            (id: number) => {\n              this.selection = new CdTableSelection();\n              return this.osdService.purge(id);\n            }\n          ),\n        disable: () => this.isNotSelectedOrInState('up'),\n        icon: Icons.erase\n      },\n      {\n        name: this.actionLabels.DESTROY,\n        permission: 'delete',\n        click: () =>\n          this.showCriticalConfirmationModal(\n            $localize`destroy`,\n            $localize`OSD`,\n            $localize`destroyed`,\n            (ids: number[]) => {\n              return this.osdService.safeToDestroy(JSON.stringify(ids));\n            },\n            'is_safe_to_destroy',\n            (id: number) => {\n              this.selection = new CdTableSelection();\n              return this.osdService.destroy(id);\n            }\n          ),\n        disable: () => this.isNotSelectedOrInState('up'),\n        icon: Icons.clearFilters\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        click: () => this.delete(),\n        disable: (selection: CdTableSelection) => this.getDisable('delete', selection),\n        icon: Icons.destroy\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.clusterWideActions = [\n      {\n        name: $localize`Flags`,\n        icon: Icons.flag,\n        click: () => this.configureFlagsAction(),\n        permission: 'read',\n        visible: () => this.permissions.osd.read\n      },\n      {\n        name: $localize`Recovery Priority`,\n        icon: Icons.deepCheck,\n        click: () => this.configureQosParamsAction(),\n        permission: 'read',\n        visible: () => this.permissions.configOpt.read\n      },\n      {\n        name: $localize`PG scrub`,\n        icon: Icons.analyse,\n        click: () => this.configurePgScrubAction(),\n        permission: 'read',\n        visible: () => this.permissions.configOpt.read\n      }\n    ];\n    this.columns = [\n      {\n        prop: 'id',\n        name: $localize`ID`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.executing,\n        customTemplateConfig: {\n          valueClass: 'bold'\n        }\n      },\n      { prop: 'host.name', name: $localize`Host` },\n      {\n        prop: 'collectedStates',\n        name: $localize`Status`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            in: { class: 'badge-success' },\n            up: { class: 'badge-success' },\n            down: { class: 'badge-danger' },\n            out: { class: 'badge-danger' },\n            destroyed: { class: 'badge-danger' }\n          }\n        }\n      },\n      {\n        prop: 'tree.device_class',\n        name: $localize`Device class`,\n        flexGrow: 1.2,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            hdd: { class: 'badge-hdd' },\n            ssd: { class: 'badge-ssd' }\n          }\n        }\n      },\n      {\n        prop: 'stats.numpg',\n        name: $localize`PGs`,\n        flexGrow: 1\n      },\n      {\n        prop: 'stats.stat_bytes',\n        name: $localize`Size`,\n        flexGrow: 1,\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        prop: 'state',\n        name: $localize`Flags`,\n        cellTemplate: this.flagsTpl\n      },\n      { prop: 'stats.usage', name: $localize`Usage`, cellTemplate: this.osdUsageTpl },\n      {\n        prop: 'stats_history.out_bytes',\n        name: $localize`Read bytes`,\n        cellTransformation: CellTemplate.sparkline\n      },\n      {\n        prop: 'stats_history.in_bytes',\n        name: $localize`Write bytes`,\n        cellTransformation: CellTemplate.sparkline\n      },\n      {\n        prop: 'stats.op_r',\n        name: $localize`Read ops`,\n        cellTransformation: CellTemplate.perSecond\n      },\n      {\n        prop: 'stats.op_w',\n        name: $localize`Write ops`,\n        cellTransformation: CellTemplate.perSecond\n      }\n    ];\n\n    this.orchService.status().subscribe((status: OrchestratorStatus) => (this.orchStatus = status));\n\n    this.osdService\n      .getOsdSettings()\n      .pipe(take(1))\n      .subscribe((data: any) => {\n        this.osdSettings = data;\n      });\n  }\n\n  getDisable(action: 'create' | 'delete', selection: CdTableSelection): boolean | string {\n    if (action === 'delete') {\n      if (!selection.hasSelection) {\n        return true;\n      } else {\n        // Disable delete action if any selected OSDs are under deleting or unmanaged.\n        const deletingOSDs = _.some(this.getSelectedOsds(), (osd) => {\n          const status = _.get(osd, 'operational_status');\n          return status === 'deleting' || status === 'unmanaged';\n        });\n        if (deletingOSDs) {\n          return true;\n        }\n      }\n    }\n    return this.orchService.getTableActionDisableDesc(\n      this.orchStatus,\n      this.actionOrchFeatures[action]\n    );\n  }\n\n  /**\n   * Only returns valid IDs, e.g. if an OSD is falsely still selected after being deleted, it won't\n   * get returned.\n   */\n  getSelectedOsdIds(): number[] {\n    const osdIds = this.osds.map((osd) => osd.id);\n    return this.selection.selected\n      .map((row) => row.id)\n      .filter((id) => osdIds.includes(id))\n      .sort();\n  }\n\n  getSelectedOsds(): any[] {\n    return this.osds.filter(\n      (osd) => !_.isUndefined(osd) && this.getSelectedOsdIds().includes(osd.id)\n    );\n  }\n\n  get hasOsdSelected(): boolean {\n    return this.getSelectedOsdIds().length > 0;\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  /**\n   * Returns true if no rows are selected or if *any* of the selected rows are in the given\n   * state. Useful for deactivating the corresponding menu entry.\n   */\n  isNotSelectedOrInState(state: 'in' | 'up' | 'down' | 'out'): boolean {\n    const selectedOsds = this.getSelectedOsds();\n    if (selectedOsds.length === 0) {\n      return true;\n    }\n    switch (state) {\n      case 'in':\n        return selectedOsds.some((osd) => osd.in === 1);\n      case 'out':\n        return selectedOsds.some((osd) => osd.in !== 1);\n      case 'down':\n        return selectedOsds.some((osd) => osd.up !== 1);\n      case 'up':\n        return selectedOsds.some((osd) => osd.up === 1);\n    }\n  }\n\n  getOsdList(context?: CdTableFetchDataContext) {\n    if (!context) context = new CdTableFetchDataContext();\n    const pagination_obs = this.osdService.getList(context.toParams());\n    const observables = [pagination_obs.observable, this.osdService.getFlags()];\n    observableForkJoin(observables).subscribe((resp: any) => {\n      this.osds = resp[0].map((osd: Osd) => {\n        this.count = pagination_obs.count;\n        osd.collectedStates = OsdListComponent.collectStates(osd);\n        osd.stats_history.out_bytes = osd.stats_history.op_out_bytes.map((i: string) => i[1]);\n        osd.stats_history.in_bytes = osd.stats_history.op_in_bytes.map((i: string) => i[1]);\n        osd.stats.usage = osd.stats.stat_bytes_used / osd.stats.stat_bytes;\n        osd.cdIsBinary = true;\n        osd.cdIndivFlags = osd.state.filter((f: string) => this.indivFlagNames.includes(f));\n        osd.cdClusterFlags = resp[1].filter((f: string) => !this.disabledFlags.includes(f));\n        const deploy_state = _.get(osd, 'operational_status', 'unmanaged');\n        if (deploy_state !== 'unmanaged' && deploy_state !== 'working') {\n          osd.cdExecuting = deploy_state;\n        }\n        return osd;\n      });\n    });\n  }\n\n  editAction() {\n    const selectedOsd = _.filter(this.osds, ['id', this.selection.first().id]).pop();\n\n    this.cdsModalService.show(FormModalComponent, {\n      titleText: $localize`Edit OSD: ${selectedOsd.id}`,\n      fields: [\n        {\n          type: 'text',\n          name: 'deviceClass',\n          value: selectedOsd.tree.device_class,\n          label: $localize`Device class`,\n          required: true\n        }\n      ],\n      submitButtonText: $localize`Edit OSD`,\n      onSubmit: (values: any) => {\n        this.osdService.update(selectedOsd.id, values.deviceClass).subscribe(() => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Updated OSD '${selectedOsd.id}'`\n          );\n          this.getOsdList();\n        });\n      }\n    });\n  }\n\n  scrubAction(deep: boolean) {\n    if (!this.hasOsdSelected) {\n      return;\n    }\n\n    const initialState = {\n      selected: this.getSelectedOsdIds(),\n      deep: deep\n    };\n\n    this.bsModalRef = this.modalService.show(OsdScrubModalComponent, initialState);\n  }\n\n  configureFlagsAction() {\n    this.bsModalRef = this.modalService.show(OsdFlagsModalComponent);\n  }\n\n  configureFlagsIndivAction() {\n    const initialState = {\n      selected: this.getSelectedOsds()\n    };\n    this.bsModalRef = this.modalService.show(OsdFlagsIndivModalComponent, initialState);\n  }\n\n  showConfirmationModal(markAction: string, onSubmit: (id: number) => Observable<any>) {\n    const osdIds = this.getSelectedOsdIds();\n    this.bsModalRef = this.cdsModalService.show(ConfirmationModalComponent, {\n      titleText: $localize`Mark OSD ${markAction}`,\n      buttonText: $localize`Mark ${markAction}`,\n      bodyTpl: this.markOsdConfirmationTpl,\n      bodyContext: {\n        markActionDescription: markAction,\n        osdIds\n      },\n      onSubmit: () => {\n        observableForkJoin(\n          this.getSelectedOsdIds().map((osd: any) => onSubmit.call(this.osdService, osd))\n        ).subscribe(() => this.cdsModalService.dismissAll());\n      }\n    });\n  }\n\n  reweight() {\n    const selectedOsd = this.osds.filter((o) => o.id === this.selection.first().id).pop();\n    this.bsModalRef = this.modalService.show(OsdReweightModalComponent, {\n      currentWeight: selectedOsd.weight,\n      osdId: selectedOsd.id\n    });\n  }\n\n  delete() {\n    const deleteFormGroup = new CdFormGroup({\n      preserve: new UntypedFormControl(false)\n    });\n\n    this.showCriticalConfirmationModal(\n      $localize`delete`,\n      $localize`OSD`,\n      $localize`deleted`,\n      (ids: number[]) => {\n        return this.osdService.safeToDelete(JSON.stringify(ids));\n      },\n      'is_safe_to_delete',\n      (id: number) => {\n        this.selection = new CdTableSelection();\n        return this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('osd/' + URLVerbs.DELETE, {\n            svc_id: id\n          }),\n          call: this.osdService.delete(id, deleteFormGroup.value.preserve, true)\n        });\n      },\n      true,\n      deleteFormGroup,\n      this.deleteOsdExtraTpl\n    );\n  }\n\n  /**\n   * Perform check first and display a critical confirmation modal.\n   * @param {string} actionDescription name of the action.\n   * @param {string} itemDescription the item's name that the action operates on.\n   * @param {string} templateItemDescription the action name to be displayed in modal template.\n   * @param {Function} check the function is called to check if the action is safe.\n   * @param {string} checkKey the safe indicator's key in the check response.\n   * @param {Function} action the action function.\n   * @param {boolean} taskWrapped if true, hide confirmation modal after action\n   * @param {CdFormGroup} childFormGroup additional child form group to be passed to confirmation modal\n   * @param {TemplateRef<any>} childFormGroupTemplate template for additional child form group\n   */\n  showCriticalConfirmationModal(\n    actionDescription: string,\n    itemDescription: string,\n    templateItemDescription: string,\n    check: (ids: number[]) => Observable<any>,\n    checkKey: string,\n    action: (id: number | number[]) => Observable<any>,\n    taskWrapped: boolean = false,\n    childFormGroup?: CdFormGroup,\n    childFormGroupTemplate?: TemplateRef<any>\n  ): void {\n    check(this.getSelectedOsdIds()).subscribe((result) => {\n      const osdIds = this.getSelectedOsdIds();\n      this.cdsModalService.show(DeleteConfirmationModalComponent, {\n        impact: DeletionImpact.high,\n        itemNames: osdIds,\n        actionDescription: actionDescription,\n        itemDescription: itemDescription,\n        bodyTemplate: this.criticalConfirmationTpl,\n        bodyContext: {\n          safeToPerform: result[checkKey],\n          message: result.message,\n          active: result.active,\n          missingStats: result.missing_stats,\n          storedPgs: result.stored_pgs,\n          actionDescription: templateItemDescription,\n          osdIds\n        },\n        childFormGroup: childFormGroup,\n        childFormGroupTemplate: childFormGroupTemplate,\n        submitAction: () => {\n          const observable = observableForkJoin(\n            this.getSelectedOsdIds().map((osd: any) => action.call(this.osdService, osd))\n          );\n          if (taskWrapped) {\n            observable.subscribe({\n              error: () => {\n                this.getOsdList();\n                this.cdsModalService.dismissAll();\n              },\n              complete: () => this.cdsModalService.dismissAll()\n            });\n          } else {\n            observable.subscribe(\n              () => {\n                this.getOsdList();\n                this.cdsModalService.dismissAll();\n              },\n              () => this.cdsModalService.dismissAll()\n            );\n          }\n        }\n      });\n    });\n  }\n\n  configureQosParamsAction() {\n    this.bsModalRef = this.modalService.show(OsdRecvSpeedModalComponent);\n  }\n\n  configurePgScrubAction() {\n    this.bsModalRef = this.modalService.show(OsdPgScrubModalComponent, undefined, { size: 'lg' });\n  }\n}\n","import { Directive, OnInit } from '@angular/core';\n\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport class PrometheusListHelper extends ListWithDetails implements OnInit {\n  public isPrometheusConfigured = false;\n  public isAlertmanagerConfigured = false;\n\n  constructor(protected prometheusService: PrometheusService) {\n    super();\n  }\n\n  ngOnInit() {\n    this.prometheusService.ifAlertmanagerConfigured(() => {\n      this.isAlertmanagerConfigured = true;\n    });\n    this.prometheusService.ifPrometheusConfigured(() => {\n      this.isPrometheusConfigured = true;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { Icons } from '../enum/icons.enum';\nimport { NotificationType } from '../enum/notification-type.enum';\nimport { CdNotificationConfig } from '../models/cd-notification';\nimport {\n  AlertmanagerAlert,\n  AlertmanagerNotificationAlert,\n  PrometheusCustomAlert\n} from '../models/prometheus-alerts';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrometheusAlertFormatter {\n  constructor(private notificationService: NotificationService) {}\n\n  sendNotifications(notifications: CdNotificationConfig[]) {\n    notifications.forEach((n) => this.notificationService.show(n));\n  }\n\n  convertToCustomAlerts(\n    alerts: (AlertmanagerNotificationAlert | AlertmanagerAlert)[]\n  ): PrometheusCustomAlert[] {\n    return _.uniqWith(\n      alerts.map((alert) => {\n        return {\n          status: _.isObject(alert.status)\n            ? (alert as AlertmanagerAlert).status.state\n            : this.getPrometheusNotificationStatus(alert as AlertmanagerNotificationAlert),\n          name: alert.labels.alertname,\n          url: alert.generatorURL,\n          description: alert.annotations.description,\n          fingerprint: _.isObject(alert.status) && (alert as AlertmanagerAlert).fingerprint\n        };\n      }),\n      _.isEqual\n    ) as PrometheusCustomAlert[];\n  }\n\n  /*\n   * This is needed because NotificationAlerts don't use 'active'\n   */\n  private getPrometheusNotificationStatus(alert: AlertmanagerNotificationAlert): string {\n    const state = alert.status;\n    return state === 'firing' ? 'active' : state;\n  }\n\n  convertAlertToNotification(alert: PrometheusCustomAlert): CdNotificationConfig {\n    return new CdNotificationConfig(\n      this.formatType(alert.status),\n      `${alert.name} (${alert.status})`,\n      this.appendSourceLink(alert, alert.description),\n      undefined,\n      'Prometheus'\n    );\n  }\n\n  private formatType(status: string): NotificationType {\n    const types = {\n      error: ['firing', 'active'],\n      info: ['suppressed', 'unprocessed'],\n      success: ['resolved']\n    };\n    return NotificationType[_.findKey(types, (type) => type.includes(status))];\n  }\n\n  private appendSourceLink(alert: PrometheusCustomAlert, message: string): string {\n    return `${message} <a href=\"${alert.url}\" target=\"_blank\"><svg cdsIcon=\"${Icons.lineChart}\" size=\"${Icons.size16}\" ></svg></a>`;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { PrometheusService } from '../api/prometheus.service';\nimport {\n  AlertmanagerAlert,\n  PrometheusCustomAlert,\n  PrometheusRule\n} from '../models/prometheus-alerts';\nimport { PrometheusAlertFormatter } from './prometheus-alert-formatter';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrometheusAlertService {\n  private canAlertsBeNotified = false;\n  private rulesSubject = new BehaviorSubject<PrometheusRule[]>([]);\n  rules$ = this.rulesSubject.asObservable();\n  alerts: AlertmanagerAlert[] = [];\n  activeAlerts: number;\n  activeCriticalAlerts: number;\n  activeWarningAlerts: number;\n\n  constructor(\n    private alertFormatter: PrometheusAlertFormatter,\n    private prometheusService: PrometheusService\n  ) {}\n\n  getAlerts(clusterFilteredAlerts?: boolean) {\n    this.prometheusService.ifAlertmanagerConfigured(() => {\n      this.prometheusService.getAlerts(clusterFilteredAlerts).subscribe(\n        (alerts) => this.handleAlerts(alerts),\n        (resp) => {\n          if ([404, 504].includes(resp.status)) {\n            this.prometheusService.disableAlertmanagerConfig();\n          }\n        }\n      );\n    });\n  }\n\n  getRules() {\n    this.prometheusService.ifPrometheusConfigured(() => {\n      this.prometheusService.getRules('alerting').subscribe((groups) => {\n        const rules = groups['groups'].reduce((acc, group) => {\n          return acc.concat(\n            group.rules.map((rule) => {\n              rule.group = group.name;\n              return rule;\n            })\n          );\n        }, []);\n        this.rulesSubject.next(rules);\n      });\n    });\n  }\n\n  refresh(clusterFilteredAlerts?: boolean) {\n    this.getAlerts(clusterFilteredAlerts);\n  }\n\n  private handleAlerts(alerts: AlertmanagerAlert[]) {\n    if (this.canAlertsBeNotified) {\n      this.notifyOnAlertChanges(alerts, this.alerts);\n    }\n    this.activeAlerts = _.reduce<AlertmanagerAlert, number>(\n      alerts,\n      (result, alert) => (alert.status.state === 'active' ? ++result : result),\n      0\n    );\n    this.activeCriticalAlerts = _.reduce<AlertmanagerAlert, number>(\n      alerts,\n      (result, alert) =>\n        alert.status.state === 'active' && alert.labels.severity === 'critical' ? ++result : result,\n      0\n    );\n    this.activeWarningAlerts = _.reduce<AlertmanagerAlert, number>(\n      alerts,\n      (result, alert) =>\n        alert.status.state === 'active' && alert.labels.severity === 'warning' ? ++result : result,\n      0\n    );\n    this.alerts = alerts\n      .reverse()\n      .sort((a, b) => a.labels.severity.localeCompare(b.labels.severity));\n    this.canAlertsBeNotified = true;\n  }\n\n  private notifyOnAlertChanges(alerts: AlertmanagerAlert[], oldAlerts: AlertmanagerAlert[]) {\n    const changedAlerts = this.getChangedAlerts(\n      this.alertFormatter.convertToCustomAlerts(alerts),\n      this.alertFormatter.convertToCustomAlerts(oldAlerts)\n    );\n    const suppressedFiltered = _.filter(changedAlerts, (alert) => {\n      return alert.status !== 'suppressed';\n    });\n    const notifications = suppressedFiltered.map((alert) =>\n      this.alertFormatter.convertAlertToNotification(alert)\n    );\n    this.alertFormatter.sendNotifications(notifications);\n  }\n\n  private getChangedAlerts(alerts: PrometheusCustomAlert[], oldAlerts: PrometheusCustomAlert[]) {\n    const updatedAndNew = _.differenceWith(alerts, oldAlerts, _.isEqual);\n    return updatedAndNew.concat(this.getVanishedAlerts(alerts, oldAlerts));\n  }\n\n  private getVanishedAlerts(alerts: PrometheusCustomAlert[], oldAlerts: PrometheusCustomAlert[]) {\n    return _.differenceWith(oldAlerts, alerts, (a, b) => a.fingerprint === b.fingerprint).map(\n      (alert) => {\n        alert.status = 'resolved';\n        return alert;\n      }\n    );\n  }\n}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/monitoring/active-alerts\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Active Alerts\n    <small *ngIf=\"prometheusAlertService.activeCriticalAlerts > 0\"\n        class=\"badge badge-danger ms-1\">{{ prometheusAlertService.activeCriticalAlerts }}</small>\n    <small *ngIf=\"prometheusAlertService.activeWarningAlerts > 0\"\n        class=\"badge badge-warning ms-1\">{{ prometheusAlertService.activeWarningAlerts }}</small></a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/monitoring/alerts\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Alerts</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/monitoring/silences\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Silences</a>\n  </li>\n</ul>\n","import { Component } from '@angular/core';\n\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\n\n@Component({\n  selector: 'cd-prometheus-tabs',\n  templateUrl: './prometheus-tabs.component.html',\n  styleUrls: ['./prometheus-tabs.component.scss']\n})\nexport class PrometheusTabsComponent {\n  constructor(public prometheusAlertService: PrometheusAlertService) {}\n}\n","<cd-prometheus-tabs></cd-prometheus-tabs>\n\n<cd-alert-panel *ngIf=\"!isAlertmanagerConfigured\"\n                type=\"info\"\n                i18n>To see all active Prometheus alerts, please provide\n  the URL to the API of Prometheus' Alertmanager as described\n  in the&nbsp;<cd-doc section=\"prometheus\"></cd-doc>.</cd-alert-panel>\n\n<cd-table *ngIf=\"isAlertmanagerConfigured\"\n          [data]=\"prometheusAlertService.alerts\"\n          [columns]=\"columns\"\n          identifier=\"fingerprint\"\n          [forceIdentifier]=\"true\"\n          [customCss]=\"customCss\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n\n  <ng-container *ngIf=\"expandedRow\">\n    <cd-table-key-value *cdTableDetail\n                        [renderObjects]=\"true\"\n                        [hideEmpty]=\"true\"\n                        [appendParentKey]=\"false\"\n                        [data]=\"expandedRow\"\n                        [customCss]=\"customCss\"\n                        [autoReload]=\"false\">\n    </cd-table-key-value>\n  </ng-container>\n</cd-table>\n\n<ng-template #externalLinkTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <a [href]=\"value\"\n     target=\"_blank\">\n    <svg [cdsIcon]=\"icons.lineChart\"\n         [size]=\"icons.size16\"\n         >\n    </svg> Source\n  </a>\n</ng-template>\n","import { Component, Inject, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { PrometheusListHelper } from '~/app/shared/helpers/prometheus-list-helper';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\n\nconst BASE_URL = 'silences'; // as only silence actions can be used\n\n@Component({\n  selector: 'cd-active-alert-list',\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }],\n  templateUrl: './active-alert-list.component.html',\n  styleUrls: ['./active-alert-list.component.scss']\n})\nexport class ActiveAlertListComponent extends PrometheusListHelper implements OnInit {\n  @ViewChild('externalLinkTpl', { static: true })\n  externalLinkTpl: TemplateRef<any>;\n  columns: CdTableColumn[];\n  tableActions: CdTableAction[];\n  permission: Permission;\n  selection = new CdTableSelection();\n  icons = Icons;\n\n  constructor(\n    // NotificationsComponent will refresh all alerts every 5s (No need to do it here as well)\n    private authStorageService: AuthStorageService,\n    public prometheusAlertService: PrometheusAlertService,\n    private urlBuilder: URLBuilderService,\n    @Inject(PrometheusService) prometheusService: PrometheusService\n  ) {\n    super(prometheusService);\n    this.permission = this.authStorageService.getPermissions().prometheus;\n    this.tableActions = [\n      {\n        permission: 'create',\n        canBePrimary: (selection: CdTableSelection) => selection.hasSingleSelection,\n        disable: (selection: CdTableSelection) =>\n          !selection.hasSingleSelection || selection.first().cdExecuting,\n        icon: Icons.add,\n        routerLink: () =>\n          '/monitoring' + this.urlBuilder.getCreateFrom(this.selection.first().fingerprint),\n        name: $localize`Create Silence`\n      }\n    ];\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'labels.alertname',\n        cellClass: 'fw-bold',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Summary`,\n        prop: 'annotations.summary',\n        flexGrow: 3\n      },\n      {\n        name: $localize`Severity`,\n        prop: 'labels.severity',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            critical: { class: 'badge-danger' },\n            warning: { class: 'badge-warning' }\n          }\n        }\n      },\n      {\n        name: $localize`State`,\n        prop: 'status.state',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            active: { class: 'badge-info' },\n            unprocessed: { class: 'badge-warning' },\n            suppressed: { class: 'badge-dark' }\n          }\n        }\n      },\n      {\n        name: $localize`Started`,\n        prop: 'startsAt',\n        cellTransformation: CellTemplate.timeAgo,\n        flexGrow: 1\n      },\n      {\n        name: $localize`URL`,\n        prop: 'generatorURL',\n        flexGrow: 1,\n        sortable: false,\n        cellTemplate: this.externalLinkTpl\n      }\n    ];\n    this.prometheusAlertService.getAlerts(true);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<cd-prometheus-tabs></cd-prometheus-tabs>\n\n<cd-alert-panel *ngIf=\"!isPrometheusConfigured\"\n                type=\"info\"\n                i18n>To see all configured Prometheus alerts, please\n  provide the URL to the API of Prometheus as described in\n  the &nbsp;<cd-doc section=\"prometheus\"></cd-doc>.</cd-alert-panel>\n\n<cd-table *ngIf=\"isPrometheusConfigured\"\n          [data]=\"rules\"\n          [columns]=\"columns\"\n          [selectionType]=\"'single'\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <ng-container *ngIf=\"expandedRow\">\n    <cd-table-key-value *cdTableDetail\n                        [data]=\"expandedRow\"\n                        [renderObjects]=\"true\"\n                        [hideKeys]=\"hideKeys\">\n    </cd-table-key-value>\n  </ng-container>\n</cd-table>\n","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\n\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { PrometheusListHelper } from '~/app/shared/helpers/prometheus-list-helper';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { PrometheusRule } from '~/app/shared/models/prometheus-alerts';\nimport { DurationPipe } from '~/app/shared/pipes/duration.pipe';\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\n\n@Component({\n  selector: 'cd-rules-list',\n  templateUrl: './rules-list.component.html',\n  styleUrls: ['./rules-list.component.scss']\n})\nexport class RulesListComponent extends PrometheusListHelper implements OnInit, OnDestroy {\n  columns: CdTableColumn[];\n  declare expandedRow: PrometheusRule;\n  selection = new CdTableSelection();\n  rules: PrometheusRule[] = [];\n\n  /**\n   * Hide active alerts in details of alerting rules as they are already shown\n   * in the 'active alerts' table. Also hide the 'type' column as the type is\n   * always supposed to be 'alerting'.\n   */\n  hideKeys = ['alerts', 'type'];\n  rulesSubscription: Subscription;\n\n  constructor(\n    public prometheusAlertService: PrometheusAlertService,\n    @Inject(PrometheusService) prometheusService: PrometheusService\n  ) {\n    super(prometheusService);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.prometheusAlertService.getRules();\n    this.rulesSubscription = this.prometheusAlertService.rules$.subscribe((rules) => {\n      this.rules = rules;\n    });\n    this.columns = [\n      { prop: 'name', name: $localize`Name`, cellClass: 'fw-bold', flexGrow: 2 },\n      {\n        prop: 'labels.severity',\n        name: $localize`Severity`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            critical: { class: 'badge-danger' },\n            warning: { class: 'badge-warning' }\n          }\n        }\n      },\n      {\n        prop: 'group',\n        name: $localize`Group`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge\n      },\n      { prop: 'duration', name: $localize`Duration`, pipe: new DurationPipe(), flexGrow: 1 },\n      { prop: 'query', name: $localize`Query`, isHidden: true, flexGrow: 1 },\n      { prop: 'annotations.summary', name: $localize`Summary`, flexGrow: 3 }\n    ];\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  ngOnDestroy() {\n    this.rulesSubscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport {\n  AlertmanagerSilenceMatcher,\n  AlertmanagerSilenceMatcherMatch\n} from '../models/alertmanager-silence';\nimport { PrometheusRule } from '../models/prometheus-alerts';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrometheusSilenceMatcherService {\n  private valueAttributePath = {\n    alertname: 'name',\n    instance: 'alerts.0.labels.instance',\n    job: 'alerts.0.labels.job',\n    severity: 'labels.severity'\n  };\n\n  singleMatch(\n    matcher: AlertmanagerSilenceMatcher,\n    rules: PrometheusRule[]\n  ): AlertmanagerSilenceMatcherMatch {\n    return this.multiMatch([matcher], rules);\n  }\n\n  multiMatch(\n    matchers: AlertmanagerSilenceMatcher[],\n    rules: PrometheusRule[]\n  ): AlertmanagerSilenceMatcherMatch {\n    if (matchers.some((matcher) => matcher.isRegex)) {\n      return undefined;\n    }\n    matchers.forEach((matcher) => {\n      rules = this.getMatchedRules(matcher, rules);\n    });\n    return this.describeMatch(rules);\n  }\n\n  getMatchedRules(matcher: AlertmanagerSilenceMatcher, rules: PrometheusRule[]): PrometheusRule[] {\n    const attributePath = this.getAttributePath(matcher.name);\n    return rules.filter((r) => _.get(r, attributePath) === matcher.value);\n  }\n\n  private describeMatch(rules: PrometheusRule[]): AlertmanagerSilenceMatcherMatch {\n    let alerts = 0;\n    rules.forEach((r) => (alerts += r.alerts.length));\n    return {\n      status: this.getMatchText(rules.length, alerts),\n      cssClass: alerts ? 'has-success' : 'has-warning'\n    };\n  }\n\n  getAttributePath(name: string): string {\n    return this.valueAttributePath[name];\n  }\n\n  private getMatchText(rules: number, alerts: number): string {\n    const msg = {\n      noRule: $localize`Your matcher seems to match no currently defined rule or active alert.`,\n      noAlerts: $localize`no active alerts`,\n      alert: $localize`1 active alert`,\n      alerts: $localize`${alerts} active alerts`,\n      rule: $localize`Matches 1 rule`,\n      rules: $localize`Matches ${rules} rules`\n    };\n\n    const rule = rules > 1 ? msg.rules : msg.rule;\n    const alert = alerts ? (alerts > 1 ? msg.alerts : msg.alert) : msg.noAlerts;\n\n    return rules ? $localize`${rule} with ${alert}.` : msg.noRule;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeDiffService {\n  calculateDuration(startDate: Date, endDate: Date): string {\n    const startTime = +startDate;\n    const endTime = +endDate;\n    const duration = this.getDuration(Math.abs(startTime - endTime));\n    if (startTime > endTime) {\n      return '-' + duration;\n    }\n    return duration;\n  }\n\n  /**\n   * Get the duration in the format '[Nd] [Nh] [Nm]', e.g. '2d 1h 15m'.\n   * @param ms The time in milliseconds.\n   * @return The duration. An empty string is returned if the duration is\n   *   less than a minute.\n   */\n  private getDuration(ms: number): string {\n    const date = new Date(ms);\n    const h = date.getUTCHours();\n    const m = date.getUTCMinutes();\n    const d = Math.floor(ms / (24 * 3600 * 1000));\n\n    const format = (n: number, s: string) => (n ? n + s : n);\n    return [format(d, 'd'), format(h, 'h'), format(m, 'm')].filter((x) => x).join(' ');\n  }\n\n  calculateDate(date: Date, duration: string, reverse?: boolean): Date {\n    const time = +date;\n    if (_.isNaN(time)) {\n      return undefined;\n    }\n    const diff = this.getDurationMs(duration) * (reverse ? -1 : 1);\n    return new Date(time + diff);\n  }\n\n  private getDurationMs(duration: string): number {\n    const d = this.getNumbersFromString(duration, 'd');\n    const h = this.getNumbersFromString(duration, 'h');\n    const m = this.getNumbersFromString(duration, 'm');\n    return ((d * 24 + h) * 60 + m) * 60000;\n  }\n\n  private getNumbersFromString(duration: string, prefix: string): number {\n    const match = duration.match(new RegExp(`[0-9 ]+${prefix}`, 'i'));\n    return match ? parseInt(match[0], 10) : 0;\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <span class=\"modal-title\"\n        i18n>{editMode, select, true {Edit} other {Add}} Matcher</span>\n\n  <ng-container class=\"modal-content\">\n    <form class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"form\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- Name -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"name\"\n                 i18n>Name</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"name\"\n                    formControlName=\"name\"\n                    name=\"name\">\n              <option [ngValue]=\"null\"\n                      i18n>-- Select an attribute to match against --</option>\n              <option *ngFor=\"let attribute of nameAttributes\"\n                      [value]=\"attribute\">\n                {{ attribute }}\n              </option>\n            </select>\n            <span class=\"help-block\"\n                  *ngIf=\"form.showError('name', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Value -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"value\"\n                 i18n>Value</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"value\"\n                   (focus)=\"valueFocus.next($any($event).target.value)\"\n                   (click)=\"valueClick.next($any($event).target.value)\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   [ngbTypeahead]=\"search\"\n                   formControlName=\"value\"\n                   #instance=\"ngbTypeahead\">\n            <span *ngIf=\"form.showError('value', formDir, 'required')\"\n                  class=\"help-block\"\n                  i18n>This field is required!</span>\n          </div>\n          <div *ngIf=\"form.getValue('value') && !form.getValue('isRegex') && matcherMatch\"\n               class=\"cd-col-form-offset {{matcherMatch.cssClass}}\"\n               id=\"match-state\">\n            <span class=\"text-muted {{matcherMatch.cssClass}}\">\n              {{matcherMatch.status}}\n            </span>\n          </div>\n        </div>\n\n        <!-- isRegex -->\n        <div class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     formControlName=\"isRegex\"\n                     name=\"is-regex\"\n                     id=\"is-regex\">\n              <label for=\"is-regex\"\n                     class=\"custom-control-label\"\n                     i18n>Use regular expression</label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"form\"\n                              [submitText]=\"getMode()\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\n\nimport { NgbActiveModal, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport {\n  AlertmanagerSilenceMatcher,\n  AlertmanagerSilenceMatcherMatch\n} from '~/app/shared/models/alertmanager-silence';\nimport { PrometheusRule } from '~/app/shared/models/prometheus-alerts';\nimport { PrometheusSilenceMatcherService } from '~/app/shared/services/prometheus-silence-matcher.service';\n\n@Component({\n  selector: 'cd-silence-matcher-modal',\n  templateUrl: './silence-matcher-modal.component.html',\n  styleUrls: ['./silence-matcher-modal.component.scss']\n})\nexport class SilenceMatcherModalComponent {\n  @ViewChild(NgbTypeahead, { static: true })\n  typeahead: NgbTypeahead;\n  @Output()\n  submitAction = new EventEmitter();\n\n  form: CdFormGroup;\n  editMode = false;\n  rules: PrometheusRule[];\n  nameAttributes = ['alertname', 'instance', 'job', 'severity'];\n  possibleValues: string[] = [];\n  matcherMatch: AlertmanagerSilenceMatcherMatch = undefined;\n\n  // For typeahead usage\n  valueClick = new Subject<string>();\n  valueFocus = new Subject<string>();\n  search = (text$: Observable<string>) => {\n    return merge(\n      text$.pipe(debounceTime(200), distinctUntilChanged()),\n      this.valueFocus,\n      this.valueClick.pipe(filter(() => !this.typeahead.isPopupOpen()))\n    ).pipe(\n      map((term) =>\n        (term === ''\n          ? this.possibleValues\n          : this.possibleValues.filter((v) => v.toLowerCase().indexOf(term.toLowerCase()) > -1)\n        ).slice(0, 10)\n      )\n    );\n  };\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    private silenceMatcher: PrometheusSilenceMatcherService,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    this.createForm();\n    this.subscribeToChanges();\n  }\n\n  private createForm() {\n    this.form = this.formBuilder.group({\n      name: [null, [Validators.required]],\n      value: [{ value: '', disabled: true }, [Validators.required]],\n      isRegex: new UntypedFormControl(false)\n    });\n  }\n\n  private subscribeToChanges() {\n    this.form.get('name').valueChanges.subscribe((name) => {\n      if (name === null) {\n        this.form.get('value').disable();\n        return;\n      }\n      this.setPossibleValues(name);\n      this.form.get('value').enable();\n    });\n    this.form.get('value').valueChanges.subscribe((value) => {\n      const values = this.form.value;\n      values.value = value; // Isn't the current value at this stage\n      this.matcherMatch = this.silenceMatcher.singleMatch(values, this.rules);\n    });\n  }\n\n  private setPossibleValues(name: string) {\n    this.possibleValues = _.sortedUniq(\n      this.rules.map((r) => _.get(r, this.silenceMatcher.getAttributePath(name))).filter((x) => x)\n    );\n  }\n\n  getMode() {\n    return this.editMode ? this.actionLabels.EDIT : this.actionLabels.ADD;\n  }\n\n  preFillControls(matcher: AlertmanagerSilenceMatcher) {\n    this.form.setValue(matcher);\n  }\n\n  onSubmit() {\n    this.submitAction.emit(this.form.value);\n    this.activeModal.close();\n  }\n}\n","<ng-template #matcherTpl\n             let-matcher=\"matcher\"\n             let-index=\"index\">\n  <div class=\"input-group my-2\">\n    <ng-container *ngFor=\"let config of matcherConfig\">\n      <span class=\"input-group-text\"\n            *ngIf=\"config.attribute === 'isRegex'\">\n        <i *ngIf=\"matcher[config.attribute]\"\n           [ngbTooltip]=\"config.tooltip\">~</i>\n        <i *ngIf=\"!matcher[config.attribute]\"\n           ngbTooltip=\"Equals\">=</i>\n      </span>\n\n      <ng-container *ngIf=\"config.attribute !== 'isRegex'\">\n        <input type=\"text\"\n               id=\"matcher-{{config.attribute}}-{{index}}\"\n               class=\"form-control\"\n               [value]=\"matcher[config.attribute]\"\n               disabled\n               readonly>\n      </ng-container>\n    </ng-container>\n\n    <!-- Matcher actions -->\n    <button type=\"button\"\n            class=\"btn btn-light\"\n            id=\"matcher-edit-{{index}}\"\n            i18n-ngbTooltip\n            ngbTooltip=\"Edit\"\n            (click)=\"showMatcherModal(index)\">\n      <svg\n      [cdsIcon]=\"icons.edit\"\n      [size]=\"icons.size16\"\n      class=\"cds-info-color\"></svg>\n    </button>\n    <button type=\"button\"\n            class=\"btn btn-light\"\n            id=\"matcher-delete-{{index}}\"\n            i18n-ngbTooltip\n            ngbTooltip=\"Delete\"\n            (click)=\"deleteMatcher(index)\">\n      <svg [cdsIcon]=\"icons.trash\"\n           [size]=\"icons.size16\"\n           class=\"cds-info-color\"></svg>\n    </button>\n  </div>\n  <span class=\"help-block\"></span>\n</ng-template>\n\n<div class=\"cd-col-form\">\n  <form #formDir=\"ngForm\"\n        [formGroup]=\"form\"\n        class=\"form\"\n        name=\"form\"\n        novalidate>\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n        <cd-helper *ngIf=\"edit\"\n                   i18n>Editing a silence will expire the old silence and recreate it as a new silence</cd-helper>\n      </div>\n\n      <!-- Creator -->\n      <div class=\"card-body\">\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"created-by\"\n                 i18n>Creator</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   formControlName=\"createdBy\"\n                   id=\"created-by\"\n                   name=\"created-by\"\n                   type=\"text\">\n            <span *ngIf=\"form.showError('createdBy', formDir, 'required')\"\n                  class=\"invalid-feedback\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Comment -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"comment\"\n                 i18n>Comment</label>\n          <div class=\"cd-col-form-input\">\n            <textarea class=\"form-control\"\n                      formControlName=\"comment\"\n                      id=\"comment\"\n                      name=\"comment\"\n                      type=\"text\">\n            </textarea>\n            <span *ngIf=\"form.showError('comment', formDir, 'required')\"\n                  class=\"invalid-feedback\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Start time -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"starts-at\">\n            <span class=\"required\"\n                  i18n>Start time</span>\n            <cd-helper i18n>If the start time lies in the past the creation time will be used</cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   formControlName=\"startsAt\"\n                   [ngbPopover]=\"popStart\"\n                   triggers=\"manual\"\n                   #ps=\"ngbPopover\"\n                   (click)=\"ps.open()\"\n                   (keypress)=\"ps.close()\">\n            <span *ngIf=\"form.showError('startsAt', formDir, 'required')\"\n                  class=\"invalid-feedback\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Duration -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"duration\"\n                 i18n>Duration</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   formControlName=\"duration\"\n                   id=\"duration\"\n                   name=\"duration\"\n                   type=\"text\">\n            <span *ngIf=\"form.showError('duration', formDir, 'required')\"\n                  class=\"invalid-feedback\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- End time -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"ends-at\"\n                 i18n>End time</label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   formControlName=\"endsAt\"\n                   [ngbPopover]=\"popEnd\"\n                   triggers=\"manual\"\n                   #pe=\"ngbPopover\"\n                   (click)=\"pe.open()\"\n                   (keypress)=\"pe.close()\">\n            <span *ngIf=\"form.showError('endsAt', formDir, 'required')\"\n                  class=\"invalid-feedback\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <!-- Matchers -->\n        <fieldset>\n          <legend class=\"required\"\n                  i18n>Matchers</legend>\n\n          <div class=\"cd-col-form-offset\">\n            <h5 *ngIf=\"matchers.length === 0\"\n                [ngClass]=\"{'text-warning': !formDir.submitted, 'text-danger': formDir.submitted}\">\n              <strong i18n>A silence requires at least one matcher</strong>\n            </h5>\n\n            <span *ngFor=\"let matcher of matchers; let i=index;\">\n              <ng-container *ngTemplateOutlet=\"matcherTpl; context:{index: i, matcher: matcher}\"></ng-container>\n            </span>\n\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <button type=\"button\"\n                        id=\"add-matcher\"\n                        class=\"btn btn-light float-end my-3\"\n                        [ngClass]=\"{'btn-warning': formDir.submitted && matchers.length === 0 }\"\n                        (click)=\"showMatcherModal()\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                  <ng-container i18n>Add matcher</ng-container>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"matchers.length && matcherMatch\"\n               class=\"cd-col-form-offset {{matcherMatch.cssClass}}\"\n               id=\"match-state\">\n            <span class=\"text-muted {{matcherMatch.cssClass}}\">\n              {{ matcherMatch.status }}\n            </span>\n          </div>\n        </fieldset>\n      </div>\n\n      <div class=\"card-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                                [form]=\"form\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<ng-template #popStart>\n  <cd-date-time-picker [control]=\"form.get('startsAt')\"\n                       [hasSeconds]=\"false\"></cd-date-time-picker>\n</ng-template>\n\n\n<ng-template #popEnd>\n  <cd-date-time-picker [control]=\"form.get('endsAt')\"\n                       [hasSeconds]=\"false\"></cd-date-time-picker>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { DashboardNotFoundError } from '~/app/core/error/error';\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { ActionLabelsI18n, SucceededActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport {\n  AlertmanagerSilence,\n  AlertmanagerSilenceMatcher,\n  AlertmanagerSilenceMatcherMatch\n} from '~/app/shared/models/alertmanager-silence';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AlertmanagerAlert, PrometheusRule } from '~/app/shared/models/prometheus-alerts';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PrometheusSilenceMatcherService } from '~/app/shared/services/prometheus-silence-matcher.service';\nimport { TimeDiffService } from '~/app/shared/services/time-diff.service';\nimport { SilenceMatcherModalComponent } from '../silence-matcher-modal/silence-matcher-modal.component';\n\n@Component({\n  selector: 'cd-prometheus-form',\n  templateUrl: './silence-form.component.html',\n  styleUrls: ['./silence-form.component.scss']\n})\nexport class SilenceFormComponent {\n  icons = Icons;\n  permission: Permission;\n  form: CdFormGroup;\n  rules: PrometheusRule[];\n  matchName = '';\n  matchValue = '';\n\n  recreate = false;\n  edit = false;\n  id: string;\n\n  action: string;\n  resource = $localize`silence`;\n\n  matchers: AlertmanagerSilenceMatcher[] = [];\n  matcherMatch: AlertmanagerSilenceMatcherMatch = undefined;\n  matcherConfig = [\n    {\n      tooltip: $localize`Attribute name`,\n      attribute: 'name'\n    },\n    {\n      tooltip: $localize`Regular expression`,\n      attribute: 'isRegex'\n    },\n    {\n      tooltip: $localize`Value`,\n      attribute: 'value'\n    }\n  ];\n\n  datetimeFormat = 'YYYY-MM-DD HH:mm';\n  isNavigate = true;\n\n  constructor(\n    private router: Router,\n    private authStorageService: AuthStorageService,\n    private formBuilder: CdFormBuilder,\n    private prometheusService: PrometheusService,\n    private notificationService: NotificationService,\n    private route: ActivatedRoute,\n    private timeDiff: TimeDiffService,\n    private modalService: ModalService,\n    private silenceMatcher: PrometheusSilenceMatcherService,\n    private actionLabels: ActionLabelsI18n,\n    private succeededLabels: SucceededActionLabelsI18n\n  ) {\n    this.init();\n  }\n\n  private init() {\n    this.chooseMode();\n    this.authenticate();\n    this.createForm();\n    this.setupDates();\n    this.getData();\n  }\n\n  private chooseMode() {\n    this.edit = this.router.url.startsWith('/monitoring/silences/edit');\n    this.recreate = this.router.url.startsWith('/monitoring/silences/recreate');\n    if (this.edit) {\n      this.action = this.actionLabels.EDIT;\n    } else if (this.recreate) {\n      this.action = this.actionLabels.RECREATE;\n    } else {\n      this.action = this.actionLabels.CREATE;\n    }\n  }\n\n  private authenticate() {\n    this.permission = this.authStorageService.getPermissions().prometheus;\n    const allowed =\n      this.permission.read && (this.edit ? this.permission.update : this.permission.create);\n    if (!allowed) {\n      throw new DashboardNotFoundError();\n    }\n  }\n\n  private createForm() {\n    const formatValidator = CdValidators.custom('format', (expiresAt: string) => {\n      const result = expiresAt === '' || moment(expiresAt, this.datetimeFormat).isValid();\n      return !result;\n    });\n    this.form = this.formBuilder.group(\n      {\n        startsAt: ['', [Validators.required, formatValidator]],\n        duration: ['2h', [Validators.min(1)]],\n        endsAt: ['', [Validators.required, formatValidator]],\n        createdBy: [this.authStorageService.getUsername(), [Validators.required]],\n        comment: [null, [Validators.required]]\n      },\n      {\n        validators: CdValidators.custom('matcherRequired', () => this.matchers.length === 0)\n      }\n    );\n  }\n\n  private setupDates() {\n    const now = moment().format(this.datetimeFormat);\n    this.form.silentSet('startsAt', now);\n    this.updateDate();\n    this.subscribeDateChanges();\n  }\n\n  private updateDate(updateStartDate?: boolean) {\n    const date = moment(\n      this.form.getValue(updateStartDate ? 'endsAt' : 'startsAt'),\n      this.datetimeFormat\n    ).toDate();\n    const next = this.timeDiff.calculateDate(date, this.form.getValue('duration'), updateStartDate);\n    if (next) {\n      const nextDate = moment(next).format(this.datetimeFormat);\n      this.form.silentSet(updateStartDate ? 'startsAt' : 'endsAt', nextDate);\n    }\n  }\n\n  private subscribeDateChanges() {\n    this.form.get('startsAt').valueChanges.subscribe(() => {\n      this.onDateChange();\n    });\n    this.form.get('duration').valueChanges.subscribe(() => {\n      this.updateDate();\n    });\n    this.form.get('endsAt').valueChanges.subscribe(() => {\n      this.onDateChange(true);\n    });\n  }\n\n  private onDateChange(updateStartDate?: boolean) {\n    const startsAt = moment(this.form.getValue('startsAt'), this.datetimeFormat);\n    const endsAt = moment(this.form.getValue('endsAt'), this.datetimeFormat);\n    if (startsAt.isBefore(endsAt)) {\n      this.updateDuration();\n    } else {\n      this.updateDate(updateStartDate);\n    }\n  }\n\n  private updateDuration() {\n    const startsAt = moment(this.form.getValue('startsAt'), this.datetimeFormat).toDate();\n    const endsAt = moment(this.form.getValue('endsAt'), this.datetimeFormat).toDate();\n    this.form.silentSet('duration', this.timeDiff.calculateDuration(startsAt, endsAt));\n  }\n\n  private getData() {\n    this.getRules();\n    this.getModeSpecificData();\n  }\n\n  getRules() {\n    this.prometheusService.ifPrometheusConfigured(\n      () =>\n        this.prometheusService.getRules().subscribe(\n          (groups) => {\n            this.rules = groups['groups'].reduce(\n              (acc, group) => _.concat<PrometheusRule>(acc, group.rules),\n              []\n            );\n          },\n          () => {\n            this.prometheusService.disablePrometheusConfig();\n            this.rules = [];\n          }\n        ),\n      () => {\n        this.rules = [];\n        this.notificationService.show(\n          NotificationType.info,\n          $localize`Please add your Prometheus host to the dashboard configuration and refresh the page`,\n          undefined,\n          undefined,\n          'Prometheus'\n        );\n      }\n    );\n    return this.rules;\n  }\n\n  private getModeSpecificData() {\n    this.route.params.subscribe((params: { id: string }) => {\n      if (!params.id) {\n        return;\n      }\n      if (this.edit || this.recreate) {\n        this.prometheusService.getSilences().subscribe((silences) => {\n          const silence = _.find(silences, ['id', params.id]);\n          if (!_.isUndefined(silence)) {\n            this.fillFormWithSilence(silence);\n          }\n        });\n      } else {\n        this.prometheusService.getAlerts().subscribe((alerts) => {\n          const alert = _.find(alerts, ['fingerprint', params.id]);\n          if (!_.isUndefined(alert)) {\n            this.fillFormByAlert(alert);\n          }\n        });\n      }\n    });\n  }\n\n  private fillFormWithSilence(silence: AlertmanagerSilence) {\n    this.id = silence.id;\n    if (this.edit) {\n      ['startsAt', 'endsAt'].forEach((attr) =>\n        this.form.silentSet(attr, moment(silence[attr]).format(this.datetimeFormat))\n      );\n      this.updateDuration();\n    }\n    ['createdBy', 'comment'].forEach((attr) => this.form.silentSet(attr, silence[attr]));\n    this.matchers = silence.matchers;\n    this.validateMatchers();\n  }\n\n  private validateMatchers() {\n    if (!this.rules) {\n      window.setTimeout(() => this.validateMatchers(), 100);\n      return;\n    }\n    this.matcherMatch = this.silenceMatcher.multiMatch(this.matchers, this.rules);\n    this.form.markAsDirty();\n    this.form.updateValueAndValidity();\n  }\n\n  private fillFormByAlert(alert: AlertmanagerAlert) {\n    const labels = alert.labels;\n    this.setMatcher({\n      name: 'alertname',\n      value: labels.alertname,\n      isRegex: false\n    });\n  }\n\n  private setMatcher(matcher: AlertmanagerSilenceMatcher, index?: number) {\n    if (_.isNumber(index)) {\n      this.matchers[index] = matcher;\n    } else {\n      this.matchers.push(matcher);\n    }\n    this.validateMatchers();\n  }\n\n  showMatcherModal(index?: number) {\n    const modalRef = this.modalService.show(SilenceMatcherModalComponent);\n    const modalComponent = modalRef.componentInstance as SilenceMatcherModalComponent;\n    modalComponent.rules = this.rules;\n    if (_.isNumber(index)) {\n      modalComponent.editMode = true;\n      modalComponent.preFillControls(this.matchers[index]);\n    }\n    modalComponent.submitAction.subscribe((matcher: AlertmanagerSilenceMatcher) => {\n      this.setMatcher(matcher, index);\n    });\n  }\n\n  deleteMatcher(index: number) {\n    this.matchers.splice(index, 1);\n    this.validateMatchers();\n  }\n\n  submit(data?: any) {\n    if (this.form.invalid) {\n      return;\n    }\n    this.prometheusService.setSilence(this.getSubmitData()).subscribe(\n      (resp) => {\n        if (data) {\n          data.silenceId = resp.body['silenceId'];\n        }\n        if (this.isNavigate) {\n          this.router.navigate(['/monitoring/silences']);\n        }\n        this.notificationService.show(\n          NotificationType.success,\n          this.getNotificationTile(this.matchers),\n          undefined,\n          undefined,\n          'Prometheus'\n        );\n        this.matchers = [];\n      },\n      () => this.form.setErrors({ cdSubmitButton: true })\n    );\n  }\n\n  private getSubmitData(): AlertmanagerSilence {\n    const payload = this.form.value;\n    delete payload.duration;\n    payload.startsAt = moment(payload.startsAt, this.datetimeFormat).toISOString();\n    payload.endsAt = moment(payload.endsAt, this.datetimeFormat).toISOString();\n    payload.matchers = this.matchers;\n    if (this.edit) {\n      payload.id = this.id;\n    }\n    return payload;\n  }\n\n  private getNotificationTile(matchers: AlertmanagerSilenceMatcher[]) {\n    let action;\n    if (this.edit) {\n      action = this.succeededLabels.EDITED;\n    } else if (this.recreate) {\n      action = this.succeededLabels.RECREATED;\n    } else {\n      action = this.succeededLabels.CREATED;\n    }\n    let msg = '';\n    for (const matcher of matchers) {\n      msg = msg.concat(` ${matcher.name} - ${matcher.value},`);\n    }\n    return `${action} ${this.resource} for ${msg.slice(0, -1)}`;\n  }\n}\n","<cd-prometheus-tabs></cd-prometheus-tabs>\n\n<cd-alert-panel *ngIf=\"!isAlertmanagerConfigured\"\n                type=\"info\"\n                i18n>To enable Silences, please provide the URL to\n  the API of the Prometheus' Alertmanager as described in the&nbsp;\n  <cd-doc section=\"prometheus\"></cd-doc>.</cd-alert-panel>\n\n<cd-table *ngIf=\"isAlertmanagerConfigured\"\n          [data]=\"silences\"\n          [columns]=\"columns\"\n          [forceIdentifier]=\"true\"\n          [customCss]=\"customCss\"\n          [sorts]=\"sorts\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (fetchData)=\"refresh()\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <ng-container *ngIf=\"expandedRow\">\n    <cd-table-key-value *cdTableDetail\n                        [renderObjects]=\"true\"\n                        [hideEmpty]=\"true\"\n                        [appendParentKey]=\"false\"\n                        [data]=\"expandedRow\"\n                        [customCss]=\"customCss\"\n                        [autoReload]=\"false\">\n    </cd-table-key-value>\n  </ng-container>\n</cd-table>\n","import { Component, Inject } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { PrometheusListHelper } from '~/app/shared/helpers/prometheus-list-helper';\nimport { SilenceFormComponent } from '~/app/ceph/cluster/prometheus/silence-form/silence-form.component';\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, SucceededActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { AlertmanagerSilence } from '~/app/shared/models/alertmanager-silence';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { PrometheusRule } from '~/app/shared/models/prometheus-alerts';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PrometheusSilenceMatcherService } from '~/app/shared/services/prometheus-silence-matcher.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { CdSortDirection } from '~/app/shared/enum/cd-sort-direction';\nimport { CdSortPropDir } from '~/app/shared/models/cd-sort-prop-dir';\n\nconst BASE_URL = 'monitoring/silences';\n\n@Component({\n  providers: [\n    { provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) },\n    SilenceFormComponent\n  ],\n  selector: 'cd-silences-list',\n  templateUrl: './silence-list.component.html',\n  styleUrls: ['./silence-list.component.scss']\n})\nexport class SilenceListComponent extends PrometheusListHelper {\n  silences: AlertmanagerSilence[] = [];\n  columns: CdTableColumn[];\n  tableActions: CdTableAction[];\n  permission: Permission;\n  selection = new CdTableSelection();\n  modalRef: NgbModalRef;\n  customCss = {\n    'badge badge-danger': 'active',\n    'badge badge-warning': 'pending',\n    'badge badge-default': 'expired'\n  };\n  sorts: CdSortPropDir[] = [{ prop: 'endsAt', dir: CdSortDirection.desc }];\n  rules: PrometheusRule[];\n  visited: boolean;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private cdDatePipe: CdDatePipe,\n    private modalService: ModalCdsService,\n    private notificationService: NotificationService,\n    private urlBuilder: URLBuilderService,\n    private actionLabels: ActionLabelsI18n,\n    private succeededLabels: SucceededActionLabelsI18n,\n    private silenceFormComponent: SilenceFormComponent,\n    private silenceMatcher: PrometheusSilenceMatcherService,\n    @Inject(PrometheusService) prometheusService: PrometheusService\n  ) {\n    super(prometheusService);\n    this.permission = this.authStorageService.getPermissions().prometheus;\n    const selectionExpired = (selection: CdTableSelection) =>\n      selection.first() && selection.first().status && selection.first().status.state === 'expired';\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        routerLink: () => this.urlBuilder.getCreate(),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection,\n        name: this.actionLabels.CREATE\n      },\n      {\n        permission: 'create',\n        canBePrimary: (selection: CdTableSelection) =>\n          selection.hasSingleSelection && selectionExpired(selection),\n        disable: (selection: CdTableSelection) =>\n          !selection.hasSingleSelection ||\n          selection.first().cdExecuting ||\n          (selection.first().cdExecuting && selectionExpired(selection)) ||\n          !selectionExpired(selection),\n        icon: Icons.copy,\n        routerLink: () => this.urlBuilder.getRecreate(this.selection.first().id),\n        name: this.actionLabels.RECREATE\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        canBePrimary: (selection: CdTableSelection) =>\n          selection.hasSingleSelection && !selectionExpired(selection),\n        disable: (selection: CdTableSelection) =>\n          !selection.hasSingleSelection ||\n          selection.first().cdExecuting ||\n          (selection.first().cdExecuting && !selectionExpired(selection)) ||\n          selectionExpired(selection),\n        routerLink: () => this.urlBuilder.getEdit(this.selection.first().id),\n        name: this.actionLabels.EDIT\n      },\n      {\n        permission: 'delete',\n        icon: Icons.trash,\n        canBePrimary: (selection: CdTableSelection) =>\n          selection.hasSingleSelection && !selectionExpired(selection),\n        disable: (selection: CdTableSelection) =>\n          !selection.hasSingleSelection ||\n          selection.first().cdExecuting ||\n          selectionExpired(selection),\n        click: () => this.expireSilence(),\n        name: this.actionLabels.EXPIRE\n      }\n    ];\n    this.columns = [\n      {\n        name: $localize`ID`,\n        prop: 'id',\n        flexGrow: 3\n      },\n      {\n        name: $localize`Alerts Silenced`,\n        prop: 'silencedAlerts',\n        flexGrow: 3,\n        cellTransformation: CellTemplate.badge\n      },\n      {\n        name: $localize`Created by`,\n        prop: 'createdBy',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Started`,\n        prop: 'startsAt',\n        pipe: this.cdDatePipe\n      },\n      {\n        name: $localize`Updated`,\n        prop: 'updatedAt',\n        pipe: this.cdDatePipe\n      },\n      {\n        name: $localize`Ends`,\n        prop: 'endsAt',\n        pipe: this.cdDatePipe\n      },\n      {\n        name: $localize`Status`,\n        prop: 'status.state',\n        cellTransformation: CellTemplate.classAdding\n      }\n    ];\n  }\n\n  refresh() {\n    this.prometheusService.ifAlertmanagerConfigured(() => {\n      this.prometheusService.getSilences().subscribe(\n        (silences) => {\n          this.silences = silences;\n          const activeSilences = silences.filter(\n            (silence: AlertmanagerSilence) => silence.status.state !== 'expired'\n          );\n          this.getAlerts(activeSilences);\n        },\n        () => {\n          this.prometheusService.disableAlertmanagerConfig();\n        }\n      );\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  getAlerts(silences: any) {\n    const rules = this.silenceFormComponent.getRules();\n    silences.forEach((silence: any) => {\n      silence.matchers.forEach((matcher: any) => {\n        this.rules = this.silenceMatcher.getMatchedRules(matcher, rules);\n        const alertNames: string[] = [];\n        for (const rule of this.rules) {\n          alertNames.push(rule.name);\n        }\n        silence.silencedAlerts = alertNames;\n      });\n    });\n  }\n\n  expireSilence() {\n    const id = this.selection.first().id;\n    const i18nSilence = $localize`Silence`;\n    const applicationName = 'Prometheus';\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: i18nSilence,\n      itemNames: [id],\n      actionDescription: this.actionLabels.EXPIRE,\n      submitActionObservable: () =>\n        new Observable((observer: Subscriber<any>) => {\n          this.prometheusService.expireSilence(id).subscribe(\n            () => {\n              this.notificationService.show(\n                NotificationType.success,\n                `${this.succeededLabels.EXPIRED} ${i18nSilence} ${id}`,\n                undefined,\n                undefined,\n                applicationName\n              );\n            },\n            (resp) => {\n              resp['application'] = applicationName;\n              observer.error(resp);\n            },\n            () => {\n              observer.complete();\n              this.refresh();\n            }\n          );\n        })\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelemetryService {\n  private url = 'api/telemetry';\n\n  constructor(private http: HttpClient) {}\n\n  getReport() {\n    return this.http.get(`${this.url}/report`);\n  }\n\n  enable(enable: boolean = true) {\n    const body = { enable: enable };\n    if (enable) {\n      body['license_name'] = 'sharing-1-0';\n    }\n    return this.http.put(`${this.url}`, body);\n  }\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelemetryNotificationService {\n  visible = false;\n\n  @Output()\n  update: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  setVisibility(visible: boolean) {\n    this.visible = visible;\n    this.update.emit(visible);\n  }\n}\n","<div class=\"cd-col-form\"\n     *cdFormLoading=\"loading\">\n  <ng-container [ngSwitch]=\"step\">\n    <!-- Configuration step -->\n    <div *ngSwitchCase=\"1\">\n      <form name=\"form\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"configForm\"\n            novalidate>\n        <div class=\"card\">\n          <div class=\"card-header\"\n               i18n>Step {{ step }} of 2: Telemetry report configuration</div>\n          <div class=\"card-body\">\n            <p i18n>The telemetry module sends anonymous data about this Ceph cluster back to the Ceph developers\n              to help understand how Ceph is used and what problems users may be experiencing.<br/>\n              This data is visualized on <a href=\"https://telemetry-public.ceph.com/\">public dashboards</a>\n              that allow the community to quickly see summary statistics on how many clusters are reporting,\n              their total capacity and OSD count, and version distribution trends.<br/><br/>\n              The data being reported does <b>not</b> contain any sensitive data like pool names, object names, object contents,\n              hostnames, or device serial numbers. It contains counters and statistics on how the cluster has been\n              deployed, the version of Ceph, the distribution of the hosts and other parameters which help the project\n              to gain a better understanding of the way Ceph is used. The data is sent secured to {{ sendToUrl }} and\n              {{ sendToDeviceUrl }} (device report).</p>\n            <div *ngIf=\"moduleEnabled\">\n              The plugin is already <b>enabled</b>. Click <b>Deactivate</b> to disable it.&nbsp;\n              <button type=\"button\"\n                      class=\"btn btn-light\"\n                      (click)=\"disableModule('The Telemetry module has been disabled successfully.')\"\n                      i18n>Deactivate</button>\n            </div>\n            <legend i18n>Channels</legend>\n            <p i18n>The telemetry report is broken down into several \"channels\", each with a different type of information that can\n              be configured below.</p>\n\n            <!-- Channel basic -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"channel_basic\">\n                <ng-container i18n>Basic</ng-container>\n                <cd-helper>\n                  <ng-container i18n>Includes basic information about the cluster:</ng-container>\n                  <ul>\n                    <li i18n>Capacity of the cluster</li>\n                    <li i18n>Number of monitors, managers, OSDs, MDSs, object gateways, or other daemons</li>\n                    <li i18n>Software version currently being used</li>\n                    <li i18n>Number and types of RADOS pools and CephFS file systems</li>\n                    <li i18n>Names of configuration options that have been changed from their default (but not their values)</li>\n                  </ul>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"channel_basic\"\n                         formControlName=\"channel_basic\">\n                  <label class=\"custom-control-label\"\n                         for=\"channel_basic\"></label>\n                </div>\n              </div>\n            </div>\n\n            <!-- Channel crash -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"channel_crash\">\n                <ng-container i18n>Crash</ng-container>\n                <cd-helper>\n                  <ng-container i18n>Includes information about daemon crashes:</ng-container>\n                  <ul>\n                    <li i18n>Type of daemon</li>\n                    <li i18n>Version of the daemon</li>\n                    <li i18n>Operating system (OS distribution, kernel version)</li>\n                    <li i18n>Stack trace identifying where in the Ceph code the crash occurred</li>\n                  </ul>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"channel_crash\"\n                         formControlName=\"channel_crash\">\n                  <label class=\"custom-control-label\"\n                         for=\"channel_crash\"></label>\n                </div>\n              </div>\n            </div>\n\n            <!-- Channel device -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"channel_device\">\n                <ng-container i18n>Device</ng-container>\n                <cd-helper i18n-html\n                           html=\"Includes information about device metrics like anonymized SMART metrics.\">\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"channel_device\"\n                         formControlName=\"channel_device\">\n                  <label class=\"custom-control-label\"\n                         for=\"channel_device\"></label>\n                </div>\n              </div>\n            </div>\n\n            <!-- Channel ident -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"channel_ident\">\n                <ng-container i18n>Ident</ng-container>\n                <cd-helper>\n                  <ng-container i18n>Includes user-provided identifying information about the cluster:</ng-container>\n                  <ul>\n                    <li>Cluster description</li>\n                    <li>Contact email address</li>\n                  </ul>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"channel_ident\"\n                         formControlName=\"channel_ident\"\n                         (click)=\"toggleIdent()\">\n                  <label class=\"custom-control-label\"\n                         for=\"channel_ident\"></label>\n                </div>\n              </div>\n            </div>\n\n            <!-- Channel perf -->\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"channel_perf\">\n                <ng-container i18n>Perf</ng-container>\n                <cd-helper>\n                  <ng-container i18n>Includes various performance metrics of a cluster.</ng-container>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"channel_perf\"\n                         formControlName=\"channel_perf\">\n                  <label class=\"custom-control-label\"\n                         for=\"channel_perf\"></label>\n                </div>\n              </div>\n            </div>\n\n            <ng-container *ngIf=\"showContactInfo\">\n            <legend>\n              <ng-container i18n>Contact Information</ng-container>\n              <cd-helper i18n>Submitting any contact information is completely optional and disabled by default.</cd-helper>\n            </legend>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"contact\"\n                     i18n>Contact</label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"contact\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"contact\"\n                       placeholder=\"Example User <user@example.com>\">\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"description\"\n                     i18n>Description</label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"description\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"description\"\n                       placeholder=\"My first Ceph cluster\"\n                       i18n-placeholder>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"organization\"\n                     i18n>Organization</label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"organization\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"organization\"\n                       placeholder=\"Organization name\"\n                       i18n-placeholder>\n              </div>\n            </div>\n          </ng-container>\n            <legend i18n>Advanced Settings</legend>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"interval\">\n                <ng-container i18n>Interval</ng-container>\n                <cd-helper i18n>The module compiles and sends a new report every 24 hours by default. You can\n                  adjust this interval by setting a different number of hours.</cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"interval\"\n                       class=\"form-control\"\n                       type=\"number\"\n                       formControlName=\"interval\"\n                       min=\"8\">\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"configForm.showError('interval', formDir, 'min')\"\n                      i18n>The entered value is too low! It must be greater or equal to 8.</span>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"cd-col-form-label\"\n                     for=\"proxy\">\n                <ng-container i18n>Proxy</ng-container>\n                <cd-helper>\n                  <p i18n>If the cluster cannot directly connect to the configured telemetry endpoint\n                    (default telemetry.ceph.com), you can configure a HTTP/HTTPS proxy server by e.g. adding\n                    https://10.0.0.1:8080</p>\n                  <p i18n>You can also include a user:pass if needed e.g. https://ceph:telemetry&#64;10.0.0.1:8080</p>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input id=\"proxy\"\n                       class=\"form-control\"\n                       type=\"text\"\n                       formControlName=\"proxy\"\n                       placeholder=\"https://10.0.0.1:8080\">\n              </div>\n            </div>\n            <br />\n            <p i18n><b>Note:</b> By clicking 'Next' you will first see a preview of the report content before you\n              can activate the automatic submission of your data.</p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"button-group text-right\">\n              <button type=\"button\"\n                      class=\"btn btn-light\"\n                      (click)=\"next()\">\n                <ng-container>{{ actionLabels.NEXT }}</ng-container>\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n\n    <!-- Preview step -->\n    <div *ngSwitchCase=\"2\">\n      <form name=\"previewForm\"\n            #frm=\"ngForm\"\n            [formGroup]=\"previewForm\"\n            novalidate>\n        <div class=\"card\">\n          <div class=\"card-header\"\n               i18n>Step {{ step }} of 2: Telemetry report preview</div>\n          <div class=\"card-body\">\n            <!-- Telemetry report ID -->\n            <div class=\"form-group row\">\n              <label i18n\n                     for=\"reportId\"\n                     class=\"cd-col-form-label\">Report ID\n              <cd-helper i18n-html\n                         html=\"A randomized UUID to identify a particular cluster over the course of several telemetry reports.\">\n              </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <input class=\"form-control\"\n                       type=\"text\"\n                       id=\"reportId\"\n                       formControlName=\"reportId\"\n                       readonly>\n              </div>\n            </div>\n\n            <!-- Telemetry report -->\n            <div class=\"form-group row\">\n              <label i18n\n                     for=\"report\"\n                     class=\"cd-col-form-label\">Report preview\n                <cd-helper i18n-html\n                           html=\"The actual telemetry data that will be submitted.\"><em>Note: Please select 'Download' to\n                                   view the full report, including metrics from the perf channel.</em>\n                </cd-helper>\n              </label>\n              <div class=\"cd-col-form-input\">\n                <textarea class=\"form-control\"\n                          id=\"report\"\n                          formControlName=\"report\"\n                          rows=\"15\"\n                          readonly></textarea>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"cd-col-form-offset\">\n                <div class=\"btn-group\"\n                     role=\"group\">\n                  <cd-download-button [objectItem]=\"report\"\n                                      fileName=\"telemetry_report\">\n                  </cd-download-button>\n                  <cd-copy-2-clipboard-button source=\"report\">\n                  </cd-copy-2-clipboard-button>\n                </div>\n              </div>\n            </div>\n\n            <!-- License agreement -->\n            <div class=\"form-group row\">\n              <div class=\"cd-col-form-offset\">\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\"\n                         class=\"custom-control-input\"\n                         id=\"licenseAgrmt\"\n                         name=\"licenseAgrmt\"\n                         formControlName=\"licenseAgrmt\">\n                  <label class=\"custom-control-label\"\n                         for=\"licenseAgrmt\"\n                         i18n>I agree to my telemetry data being submitted under the <a href=\"https://cdla.io/sharing-1-0/\">Community Data License Agreement - Sharing - Version 1.0</a></label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"button-group text-right\">\n              <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                    (backActionEvent)=\"back()\"\n                                    [form]=\"previewForm\"\n                                    [submitText]=\"actionLabels.UPDATE\"\n                                    [cancelText]=\"actionLabels.BACK\"></cd-form-button-panel>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ValidatorFn, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { forkJoin as observableForkJoin } from 'rxjs';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { TelemetryService } from '~/app/shared/api/telemetry.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TelemetryNotificationService } from '~/app/shared/services/telemetry-notification.service';\n\n@Component({\n  selector: 'cd-telemetry',\n  templateUrl: './telemetry.component.html',\n  styleUrls: ['./telemetry.component.scss']\n})\nexport class TelemetryComponent extends CdForm implements OnInit {\n  configForm: CdFormGroup;\n  licenseAgrmt = false;\n  moduleEnabled: boolean;\n  options: Object = {};\n  newConfig: Object = {};\n  configResp: object = {};\n  previewForm: CdFormGroup;\n  requiredFields = [\n    'channel_basic',\n    'channel_crash',\n    'channel_device',\n    'channel_ident',\n    'channel_perf',\n    'interval',\n    'proxy',\n    'contact',\n    'description',\n    'organization'\n  ];\n  contactInfofields = ['contact', 'description', 'organization'];\n  report: object = undefined;\n  reportId: number = undefined;\n  sendToUrl = '';\n  sendToDeviceUrl = '';\n  step = 1;\n  showContactInfo: boolean;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private formBuilder: CdFormBuilder,\n    private mgrModuleService: MgrModuleService,\n    private notificationService: NotificationService,\n    private router: Router,\n    private telemetryService: TelemetryService,\n    private telemetryNotificationService: TelemetryNotificationService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    const observables = [\n      this.mgrModuleService.getOptions('telemetry'),\n      this.mgrModuleService.getConfig('telemetry')\n    ];\n    observableForkJoin(observables).subscribe(\n      (resp: object) => {\n        const configResp = resp[1];\n        this.moduleEnabled = configResp['enabled'];\n        this.sendToUrl = configResp['url'];\n        this.sendToDeviceUrl = configResp['device_url'];\n        this.showContactInfo = configResp['channel_ident'];\n        this.options = _.pick(resp[0], this.requiredFields);\n        this.configResp = _.pick(configResp, this.requiredFields);\n        this.createConfigForm();\n        this.configForm.setValue(this.configResp);\n        this.loadingReady();\n      },\n      (_error) => {\n        this.loadingError();\n      }\n    );\n  }\n\n  private createConfigForm() {\n    const controlsConfig = {};\n    _.forEach(Object.values(this.options), (option) => {\n      controlsConfig[option.name] = [option.default_value, this.getValidators(option)];\n    });\n    this.configForm = this.formBuilder.group(controlsConfig);\n  }\n\n  private replacer(key: string, value: any) {\n    // Display the arrays of keys 'ranges' and 'values' horizontally as they take up too much space\n    // and Stringify displays it in vertical by default.\n    if ((key === 'ranges' || key === 'values') && Array.isArray(value)) {\n      const elements = [];\n      for (let i = 0; i < value.length; i++) {\n        elements.push(JSON.stringify(value[i]));\n      }\n      return elements;\n    }\n    // Else, just return the value as is, without any formatting.\n    return value;\n  }\n\n  replacerTest(report: object) {\n    return JSON.stringify(report, this.replacer, 2);\n  }\n\n  private formatReport() {\n    let copy = {};\n    copy = JSON.parse(JSON.stringify(this.report));\n    const perf_keys = [\n      'perf_counters',\n      'stats_per_pool',\n      'stats_per_pg',\n      'io_rate',\n      'osd_perf_histograms',\n      'mempool',\n      'heap_stats',\n      'rocksdb_stats'\n    ];\n    for (let i = 0; i < perf_keys.length; i++) {\n      const key = perf_keys[i];\n      if (key in copy['report']) {\n        delete copy['report'][key];\n      }\n    }\n    return JSON.stringify(copy, null, 2);\n  }\n\n  formatReportTest(report: object) {\n    let copy = {};\n    copy = JSON.parse(JSON.stringify(report));\n    const perf_keys = [\n      'perf_counters',\n      'stats_per_pool',\n      'stats_per_pg',\n      'io_rate',\n      'osd_perf_histograms',\n      'mempool',\n      'heap_stats',\n      'rocksdb_stats'\n    ];\n    for (let i = 0; i < perf_keys.length; i++) {\n      const key = perf_keys[i];\n      if (key in copy) {\n        delete copy[key];\n      }\n    }\n    return JSON.stringify(copy, null, 2);\n  }\n\n  private createPreviewForm() {\n    const controls = {\n      report: this.formatReport(),\n      reportId: this.reportId,\n      licenseAgrmt: [this.licenseAgrmt, Validators.requiredTrue]\n    };\n    this.previewForm = this.formBuilder.group(controls);\n  }\n\n  private getValidators(option: any): ValidatorFn[] {\n    const result = [];\n    switch (option.type) {\n      case 'int':\n        result.push(Validators.required);\n        break;\n      case 'str':\n        if (_.isNumber(option.min)) {\n          result.push(Validators.minLength(option.min));\n        }\n        if (_.isNumber(option.max)) {\n          result.push(Validators.maxLength(option.max));\n        }\n        break;\n    }\n    return result;\n  }\n\n  private updateReportFromConfig(updatedConfig: Object = {}) {\n    // update channels\n    const availableChannels: string[] = this.report['report']['channels_available'];\n    const updatedChannels = [];\n    for (const channel of availableChannels) {\n      const key = `channel_${channel}`;\n      if (updatedConfig[key]) {\n        updatedChannels.push(channel);\n      }\n    }\n    this.report['report']['channels'] = updatedChannels;\n    // update contactInfo\n    for (const contactInfofield of this.contactInfofields) {\n      this.report['report'][contactInfofield] = updatedConfig[contactInfofield];\n    }\n  }\n\n  private getReport() {\n    this.loadingStart();\n\n    this.telemetryService.getReport().subscribe(\n      (resp: object) => {\n        this.report = resp;\n        this.reportId = resp['report']['report_id'];\n        this.updateReportFromConfig(this.newConfig);\n        this.createPreviewForm();\n        this.loadingReady();\n        this.step++;\n      },\n      (_error) => {\n        this.loadingError();\n      }\n    );\n  }\n\n  toggleIdent() {\n    this.showContactInfo = !this.showContactInfo;\n  }\n\n  buildReport() {\n    this.newConfig = {};\n    for (const option of Object.values(this.options)) {\n      const control = this.configForm.get(option.name);\n      // Append the option only if they are valid\n      if (control.valid) {\n        this.newConfig[option.name] = control.value;\n      } else {\n        this.configForm.setErrors({ cdSubmitButton: true });\n        return;\n      }\n    }\n    // reset contact info field  if ident channel is off\n    if (!this.newConfig['channel_ident']) {\n      for (const contactInfofield of this.contactInfofields) {\n        this.newConfig[contactInfofield] = '';\n      }\n    }\n    this.getReport();\n  }\n\n  disableModule(message: string = null, followUpFunc: Function = null) {\n    this.telemetryService.enable(false).subscribe(() => {\n      this.telemetryNotificationService.setVisibility(true);\n      if (message) {\n        this.notificationService.show(NotificationType.success, message);\n      }\n      if (followUpFunc) {\n        followUpFunc();\n      } else {\n        this.router.navigate(['']);\n      }\n    });\n  }\n\n  next() {\n    this.buildReport();\n  }\n\n  back() {\n    this.step--;\n  }\n\n  getChangedConfig() {\n    const updatedConfig = {};\n    _.forEach(this.requiredFields, (configField) => {\n      if (!_.isEqual(this.configResp[configField], this.newConfig[configField])) {\n        updatedConfig[configField] = this.newConfig[configField];\n      }\n    });\n    return updatedConfig;\n  }\n\n  onSubmit() {\n    const updatedConfig = this.getChangedConfig();\n    const observables = [\n      this.telemetryService.enable(),\n      this.mgrModuleService.updateConfig('telemetry', updatedConfig)\n    ];\n\n    observableForkJoin(observables).subscribe(\n      () => {\n        this.telemetryNotificationService.setVisibility(false);\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`The Telemetry module has been configured and activated successfully.`\n        );\n      },\n      () => {\n        this.telemetryNotificationService.setVisibility(false);\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`An Error occurred while updating the Telemetry module configuration.\\\n             Please Try again`\n        );\n        // Reset the 'Update' button.\n        this.previewForm.setErrors({ cdSubmitButton: true });\n      },\n      () => {\n        this.newConfig = {};\n        this.router.navigate(['']);\n      }\n    );\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <form>\n      <div class=\"col-sm-1 d-flex float-end\">\n        <label for=\"refreshInterval\"\n               class=\"col-form-label my-0 mx-2 float-end\"\n               i18n>Refresh</label>\n        <select id=\"refreshInterval\"\n                name=\"refreshInterval\"\n                class=\"form-select float-end\"\n                (change)=\"changeRefreshInterval($event.target.value)\"\n                [(ngModel)]=\"selectedInterval\">\n          <option *ngFor=\"let key of intervalKeys\"\n                  [value]=\"intervalList[key]\">{{ key }}</option>\n        </select>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\n\n@Component({\n  selector: 'cd-refresh-selector',\n  templateUrl: './refresh-selector.component.html',\n  styleUrls: ['./refresh-selector.component.scss']\n})\nexport class RefreshSelectorComponent implements OnInit {\n  selectedInterval: number;\n  intervalList: { [key: string]: number } = {\n    '5 s': 5000,\n    '10 s': 10000,\n    '15 s': 15000,\n    '30 s': 30000,\n    '1 min': 60000,\n    '3 min': 180000,\n    '5 min': 300000\n  };\n  intervalKeys = Object.keys(this.intervalList);\n\n  constructor(private refreshIntervalService: RefreshIntervalService) {}\n\n  ngOnInit() {\n    this.selectedInterval = this.refreshIntervalService.getRefreshInterval() || 5000;\n  }\n\n  changeRefreshInterval(interval: number) {\n    this.refreshIntervalService.setRefreshInterval(interval);\n  }\n}\n","export enum HealthColor {\n  HEALTH_ERR = 'health-color-error',\n  HEALTH_WARN = 'health-color-warning',\n  HEALTH_OK = 'health-color-healthy'\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HardwareService {\n  baseURL = 'api/hardware';\n\n  constructor(private http: HttpClient) {}\n\n  getSummary(category: string[] = []): any {\n    return this.http.get<any>(`${this.baseURL}/summary`, {\n      params: { categories: category },\n      headers: { Accept: 'application/vnd.ceph.api.v0.1+json' }\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { HealthColor } from '~/app/shared/enum/health-color.enum';\n\n@Pipe({\n  name: 'healthColor'\n})\nexport class HealthColorPipe implements PipeTransform {\n  constructor(private cssHelper: CssHelper) {}\n\n  transform(value: any): any {\n    return Object.keys(HealthColor).includes(value as HealthColor)\n      ? { color: this.cssHelper.propertyValue(HealthColor[value]) }\n      : null;\n  }\n}\n","<ng-container *ngTemplateOutlet=\"logsLink\"></ng-container>\n<ul>\n  <li *ngFor=\"let check of healthData\">\n    <span [ngStyle]=\"check.severity | healthColor\"\n          [class.health-warn-description]=\"check.severity === 'HEALTH_WARN'\">\n    {{ check.type }}</span>: {{ check.summary.message }} <br>\n    <div *ngIf=\"check.type === 'CEPHADM_FAILED_DAEMON'\"\n         class=\"failed-daemons\">\n      <cd-help-text>\n        <b>Failed Daemons:</b>\n        <div *ngFor=\"let failedDaemons of getFailedDaemons(check.detail); let last = last\">\n          {{ failedDaemons }}\n          {{ !last ? ', ' : '' }}\n        </div>\n      </cd-help-text>\n    </div>\n    <div *ngFor=\"let details of check?.detail\">\n      <cd-help-text>{{ details?.message }}</cd-help-text>\n    </div>\n  </li>\n</ul>\n\n<ng-template #logsLink>\n  <ng-container *ngIf=\"permissions.log.read\">\n    <p class=\"logs-link\"\n        i18n><i [ngClass]=\"[icons.infoCircle]\"></i> See <a routerLink=\"/logs\">Logs</a> for more details.</p>\n  </ng-container>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Permissions } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-health-checks',\n  templateUrl: './health-checks.component.html',\n  styleUrls: ['./health-checks.component.scss']\n})\nexport class HealthChecksComponent {\n  @Input()\n  healthData: any;\n\n  icons = Icons;\n\n  permissions: Permissions;\n\n  constructor(private authStorageService: AuthStorageService) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  getFailedDaemons(detail: any[]): string[] {\n    return detail.map(\n      (failedDaemons) => failedDaemons.message.split('daemon ')?.[1].split(' on ')[0]\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\">\n    <ng-container i18n>Upgrade Cluster</ng-container>&nbsp;\n  </ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"upgradeForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"upgradeForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <cd-alert-panel type=\"warning\"\n                        spacingClass=\"mb-3\"\n                        *ngIf=\"showImageField\"\n                        i18n>Make sure to put the correct image. Passing an incorrect image can lead the cluster into an undesired state.</cd-alert-panel>\n        <div *ngIf=\"versions\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 [ngClass]=\"{'required': !showImageField}\"\n                 for=\"availableVersions\"\n                 i18n>New Version</label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"availableVersions\"\n                    name=\"availableVersions\"\n                    class=\"form-select\"\n                    formControlName=\"availableVersions\">\n              <option *ngIf=\"versions === null\"\n                      ngValue=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"versions !== null && versions.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No version available --</option>\n              <option *ngIf=\"versions !== null && versions.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select a version --</option>\n              <option *ngFor=\"let version of versions\"\n                      [value]=\"version\">{{ version }}</option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"upgradeForm.showError('availableVersions', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n\n        <div *ngIf=\"versions\"\n             class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     id=\"useImage\"\n                     name=\"useImage\"\n                     formControlName=\"useImage\"\n                     (click)=\"useImage()\">\n              <label class=\"custom-control-label\"\n                     for=\"useImage\"\n                     i18n>Use image</label>\n            </div>\n          </div>\n        </div>\n\n        <!-- Custom image name input-->\n        <div class=\"form-group row\"\n             *ngIf=\"showImageField || !versions\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"customImageName\"\n                 i18n>Image</label>\n          <div class=\"cd-col-form-input\">\n            <input type=\"text\"\n                   class=\"form-control\"\n                   id=\"customImageName\"\n                   name=\"customImageName\"\n                   formControlName=\"customImageName\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"upgradeForm.showError('customImageName', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"startUpgrade()\"\n                              [form]=\"upgradeForm\"\n                              [submitText]=\"actionLabels.START_UPGRADE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UpgradeService } from '~/app/shared/api/upgrade.service';\nimport { UpgradeInfoInterface } from '~/app/shared/models/upgrade.interface';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-upgrade-start-modal.component',\n  templateUrl: './upgrade-start-modal.component.html',\n  styleUrls: ['./upgrade-start-modal.component.scss']\n})\nexport class UpgradeStartModalComponent implements OnInit {\n  permission: Permission;\n  upgradeInfoError$: Observable<any>;\n  upgradeInfo$: Observable<UpgradeInfoInterface>;\n  upgradeForm: CdFormGroup;\n  icons = Icons;\n  versions: string[];\n\n  showImageField = false;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    public activeModal: NgbActiveModal,\n    private upgradeService: UpgradeService,\n    private notificationService: NotificationService\n  ) {\n    this.permission = this.authStorageService.getPermissions().configOpt;\n  }\n\n  ngOnInit() {\n    this.upgradeForm = new CdFormGroup({\n      availableVersions: new FormControl(null, [Validators.required]),\n      useImage: new FormControl(false),\n      customImageName: new FormControl(null)\n    });\n    if (this.versions === undefined) {\n      const availableVersionsControl = this.upgradeForm.get('availableVersions');\n      availableVersionsControl.clearValidators();\n      const customImageNameControl = this.upgradeForm.get('customImageName');\n      customImageNameControl.setValidators(Validators.required);\n      customImageNameControl.updateValueAndValidity();\n    }\n  }\n\n  startUpgrade() {\n    const version = this.upgradeForm.getValue('availableVersions');\n    const image = this.upgradeForm.getValue('customImageName');\n    this.upgradeService.start(version, image).subscribe({\n      next: () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Started upgrading the cluster`\n        );\n      },\n      error: (error) => {\n        this.upgradeForm.setErrors({ cdSubmitButton: true });\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`Failed to start the upgrade`,\n          error\n        );\n      },\n      complete: () => {\n        this.activeModal.close();\n      }\n    });\n  }\n\n  useImage() {\n    this.showImageField = !this.showImageField;\n    const availableVersionsControl = this.upgradeForm.get('availableVersions');\n    const customImageNameControl = this.upgradeForm.get('customImageName');\n\n    if (this.showImageField) {\n      availableVersionsControl.disable();\n      availableVersionsControl.clearValidators();\n\n      customImageNameControl.setValidators(Validators.required);\n      customImageNameControl.updateValueAndValidity();\n    } else {\n      availableVersionsControl.enable();\n      availableVersionsControl.setValidators(Validators.required);\n      availableVersionsControl.updateValueAndValidity();\n\n      customImageNameControl.clearValidators();\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ApiClient } from './api-client';\nimport { map, shareReplay, tap } from 'rxjs/operators';\nimport { SummaryService } from '../services/summary.service';\nimport { UpgradeInfoInterface, UpgradeStatusInterface } from '../models/upgrade.interface';\nimport { Observable } from 'rxjs';\nimport { UpgradeStartModalComponent } from '~/app/ceph/cluster/upgrade/upgrade-form/upgrade-start-modal.component';\nimport { ModalService } from '../services/modal.service';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nconst CACHE_SIZE = 1;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UpgradeService extends ApiClient {\n  baseURL = 'api/cluster/upgrade';\n\n  upgradableServiceTypes = [\n    'mgr',\n    'mon',\n    'crash',\n    'osd',\n    'mds',\n    'rgw',\n    'rbd-mirror',\n    'cephfs-mirror',\n    'iscsi',\n    'nfs'\n  ];\n\n  _listData$: Observable<UpgradeInfoInterface>;\n  _upgradableVersions: string[];\n\n  constructor(\n    private http: HttpClient,\n    private summaryService: SummaryService,\n    private modalService: ModalService\n  ) {\n    super();\n  }\n\n  list() {\n    return this.http.get(this.baseURL).pipe(\n      map((resp: UpgradeInfoInterface) => {\n        return this.versionAvailableForUpgrades(resp);\n      })\n    );\n  }\n\n  // Filter out versions that are older than the current cluster version\n  // Only allow upgrades to the same major version\n  versionAvailableForUpgrades(upgradeInfo: UpgradeInfoInterface): UpgradeInfoInterface {\n    let version = '';\n    this.summaryService.subscribe((summary) => {\n      version = summary.version.replace('ceph version ', '').split('-')[0];\n    });\n\n    const upgradableVersions = upgradeInfo.versions.filter((targetVersion) => {\n      const cVersion = version.split('.');\n      const tVersion = targetVersion.split('.');\n      return (\n        cVersion[0] === tVersion[0] && (cVersion[1] < tVersion[1] || cVersion[2] < tVersion[2])\n      );\n    });\n    upgradeInfo.versions = upgradableVersions.sort();\n    return upgradeInfo;\n  }\n\n  start(version?: string, image?: string) {\n    return this.http.post(`${this.baseURL}/start`, { image: image, version: version });\n  }\n\n  pause() {\n    return this.http.put(`${this.baseURL}/pause`, null);\n  }\n\n  resume() {\n    return this.http.put(`${this.baseURL}/resume`, null);\n  }\n\n  stop() {\n    return this.http.put(`${this.baseURL}/stop`, null);\n  }\n\n  status(): Observable<UpgradeStatusInterface> {\n    return this.http.get<UpgradeStatusInterface>(`${this.baseURL}/status`);\n  }\n\n  listCached(): Observable<UpgradeInfoInterface> {\n    if (!this._listData$) {\n      this._listData$ = this.list().pipe(\n        tap(\n          (upgradeInfo: UpgradeInfoInterface) => (this._upgradableVersions = upgradeInfo.versions)\n        ),\n        shareReplay(CACHE_SIZE)\n      );\n    }\n    return this._listData$;\n  }\n\n  startUpgradeModal(): NgbModalRef {\n    return this.modalService.show(UpgradeStartModalComponent, {\n      versions: this._upgradableVersions\n    });\n  }\n}\n","<div *ngIf=\"upgradeStatus$ | async as status; else isUpgradable\">\n  <ng-container *ngIf=\"status.is_paused || status.in_progress; else isUpgradable\">\n    <h5 *ngIf=\"status.is_paused; else inProgress\"\n        i18n>\n      Upgrade is paused\n    </h5>\n    <ng-template #inProgress>\n      <a href=\"#/upgrade/progress\"\n         i18n>\n        <i [ngClass]=\"[icons.spin, icons.spinner]\"></i>\n          Upgrading {{executingTask?.progress}}%\n      </a>\n    </ng-template>\n  </ng-container>\n</div>\n\n<ng-template #isUpgradable>\n  <div *ngIf=\"upgradeInfo$ | async as info\"\n       i18n>\n    <h5 *ngIf=\"info.versions.length > 0\"\n        (click)=\"upgradeModal()\">\n      <i [ngClass]=\"icons.up\"></i>\n      Upgrade available\n    </h5>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { Observable, Subscription } from 'rxjs';\nimport { UpgradeService } from '../../api/upgrade.service';\nimport { UpgradeInfoInterface, UpgradeStatusInterface } from '../../models/upgrade.interface';\nimport { OrchestratorService } from '../../api/orchestrator.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { SummaryService } from '../../services/summary.service';\nimport { ExecutingTask } from '../../models/executing-task';\n\n@Component({\n  selector: 'cd-upgradable',\n  templateUrl: './upgradable.component.html',\n  styleUrls: ['./upgradable.component.scss']\n})\nexport class UpgradableComponent implements OnInit, OnDestroy {\n  orchAvailable: boolean = false;\n  upgradeInfo$: Observable<UpgradeInfoInterface>;\n  upgradeStatus$: Observable<UpgradeStatusInterface>;\n  upgradeModalRef: NgbModalRef;\n  executingTask: ExecutingTask;\n  private subs = new Subscription();\n\n  icons = Icons;\n\n  constructor(\n    private orchestratorService: OrchestratorService,\n    private summaryService: SummaryService,\n    private upgradeService: UpgradeService\n  ) {}\n\n  ngOnInit() {\n    this.orchestratorService.status().subscribe((status: any) => {\n      this.orchAvailable = status.available;\n      if (this.orchAvailable && status.upgrade_status?.available) {\n        this.upgradeInfo$ = this.upgradeService.listCached();\n        this.upgradeStatus$ = this.upgradeService.status();\n      }\n    });\n\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        this.executingTask = summary.executing_tasks.filter((tasks) =>\n          tasks.name.includes('progress/Upgrade')\n        )[0];\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subs?.unsubscribe();\n  }\n\n  upgradeModal() {\n    this.upgradeModalRef = this.upgradeService.startUpgradeModal();\n  }\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\n\nimport * as Chart from 'chart.js';\nimport _ from 'lodash';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\n\n@Component({\n  selector: 'cd-dashboard-pie',\n  templateUrl: './dashboard-pie.component.html',\n  styleUrls: ['./dashboard-pie.component.scss']\n})\nexport class DashboardPieComponent implements OnChanges, OnInit {\n  @Input()\n  data: any;\n  @Input()\n  highThreshold = 0;\n  @Input()\n  lowThreshold = 0;\n\n  color: string;\n\n  chartConfig: any;\n\n  public doughnutChartPlugins: any[] = [\n    {\n      id: 'center_text',\n      beforeDraw(chart: any) {\n        const cssHelper = new CssHelper();\n        const defaultFontFamily = 'Helvetica Neue, Helvetica, Arial, sans-serif';\n        Chart.defaults.font.family = defaultFontFamily;\n        const ctx = chart.ctx;\n        if (!chart.options.plugins.center_text || !chart.data.datasets[0].label) {\n          return;\n        }\n\n        ctx.save();\n        const label = chart.data.datasets[0].label[0].split('\\n');\n\n        const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n        const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        ctx.font = `24px ${defaultFontFamily}`;\n        ctx.fillText(label[0], centerX, centerY - 10);\n\n        if (label.length > 1) {\n          ctx.font = `14px ${defaultFontFamily}`;\n          ctx.fillStyle = cssHelper.propertyValue('chart-color-center-text-description');\n          ctx.fillText(label[1], centerX, centerY + 10);\n        }\n        ctx.restore();\n      }\n    }\n  ];\n\n  constructor(private cssHelper: CssHelper, private dimlessBinary: DimlessBinaryPipe) {\n    this.chartConfig = {\n      chartType: 'doughnut',\n      labels: [],\n      dataset: [\n        {\n          label: null,\n          backgroundColor: [\n            this.cssHelper.propertyValue('chart-color-light-gray'),\n            this.cssHelper.propertyValue('chart-color-slight-dark-gray'),\n            this.cssHelper.propertyValue('chart-color-dark-gray')\n          ]\n        },\n        {\n          label: null,\n          borderWidth: 0,\n          backgroundColor: [\n            this.cssHelper.propertyValue('chart-color-blue'),\n            this.cssHelper.propertyValue('chart-color-white')\n          ]\n        }\n      ],\n      options: {\n        cutout: '70%',\n        events: ['click', 'mouseout', 'touchstart'],\n        aspectRatio: 2,\n        plugins: {\n          center_text: true,\n          legend: {\n            display: true,\n            position: 'right',\n            labels: {\n              boxWidth: 10,\n              usePointStyle: false,\n              generateLabels: (chart: any) => {\n                let labels = chart.data.labels.slice(0, this.chartConfig.labels.length);\n                labels[0] = {\n                  text: $localize`Used: ${chart.data.datasets[1].data[2]}`,\n                  fillStyle: chart.data.datasets[1].backgroundColor[0],\n                  strokeStyle: chart.data.datasets[1].backgroundColor[0]\n                };\n                if (chart.data.datasets[0].data?.length) {\n                  labels[1] = {\n                    text: $localize`Warning: ${chart.data.datasets[0].data[0]}%`,\n                    fillStyle: chart.data.datasets[0].backgroundColor[1],\n                    strokeStyle: chart.data.datasets[0].backgroundColor[1]\n                  };\n                  labels[2] = {\n                    text: $localize`Danger: ${\n                      chart.data.datasets[0].data[0] + chart.data.datasets[0].data[1]\n                    }%`,\n                    fillStyle: chart.data.datasets[0].backgroundColor[2],\n                    strokeStyle: chart.data.datasets[0].backgroundColor[2]\n                  };\n                }\n                return labels;\n              }\n            }\n          },\n          tooltip: {\n            enabled: true,\n            displayColors: false,\n            backgroundColor: this.cssHelper.propertyValue('chart-color-tooltip-background'),\n            cornerRadius: 0,\n            bodyFontSize: 14,\n            bodyFontStyle: '600',\n            position: 'nearest',\n            xPadding: 12,\n            yPadding: 12,\n            filter: (tooltipItem: any) => {\n              return tooltipItem.datasetIndex === 1;\n            },\n            callbacks: {\n              label: (item: Record<string, any>, data: Record<string, any>) => {\n                let text = data.labels[item.index];\n                if (!text.includes('%')) {\n                  text = `${text} (${data.datasets[item.datasetIndex].data[item.index]}%)`;\n                }\n                return text;\n              }\n            }\n          },\n          title: {\n            display: false\n          }\n        }\n      }\n    };\n  }\n\n  ngOnInit() {\n    this.prepareRawUsage(this.chartConfig, this.data);\n  }\n\n  ngOnChanges() {\n    this.prepareRawUsage(this.chartConfig, this.data);\n  }\n\n  private prepareRawUsage(chart: Record<string, any>, data: Record<string, any>) {\n    const nearFullRatioPercent = this.lowThreshold * 100;\n    const fullRatioPercent = this.highThreshold * 100;\n    const max = typeof data.max === 'string' ? parseFloat(data.max) : data.max;\n    const current = typeof data.current === 'string' ? parseFloat(data.current) : data.current;\n    const percentAvailable = this.calcPercentage(max - current, max);\n    const percentUsed = this.calcPercentage(current, max);\n\n    if (fullRatioPercent > 0 && percentUsed >= fullRatioPercent) {\n      this.color = 'chart-color-red';\n    } else if (nearFullRatioPercent > 0 && percentUsed >= nearFullRatioPercent) {\n      this.color = 'chart-color-yellow';\n    } else {\n      this.color = 'chart-color-blue';\n    }\n\n    if (fullRatioPercent > 0 && nearFullRatioPercent > 0) {\n      chart.dataset[0].data = [\n        Math.round(nearFullRatioPercent),\n        Math.round(Math.abs(nearFullRatioPercent - fullRatioPercent)),\n        Math.round(100 - fullRatioPercent)\n      ];\n    } else {\n      chart.dataset[1].backgroundColor[1] = this.cssHelper.propertyValue('chart-color-light-gray');\n    }\n\n    chart.dataset[1].data = [\n      percentUsed,\n      percentAvailable,\n      this.dimlessBinary.transform(data.current)\n    ];\n    chart.dataset[1].backgroundColor[0] = this.cssHelper.propertyValue(this.color);\n    chart.dataset[0].label = [`${percentUsed}%\\nof ${this.dimlessBinary.transform(data.max)}`];\n  }\n\n  private calcPercentage(dividend: number, divisor: number) {\n    if (!_.isNumber(dividend) || !_.isNumber(divisor) || divisor === 0) {\n      return 0;\n    }\n    return Math.ceil((dividend / divisor) * 100 * 100) / 100;\n  }\n}\n","<div class=\"chart-container d-flex align-items-center justify-content-center\">\n  <canvas baseChart\n          #chartCanvas\n          [datasets]=\"chartConfig.dataset\"\n          [type]=\"chartConfig.chartType\"\n          [options]=\"chartConfig.options\"\n          [labels]=\"chartConfig.labels\"\n          [plugins]=\"doughnutChartPlugins\"\n          class=\"chart-canvas\">\n  </canvas>\n  <div class=\"chartjs-tooltip\"\n       #chartTooltip>\n    <table></table>\n  </div>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core';\nimport _ from 'lodash';\nimport { PgCategoryService } from '~/app/ceph/shared/pg-category.service';\n\n@Pipe({\n  name: 'pgSummary'\n})\nexport class PgSummaryPipe implements PipeTransform {\n  constructor(private pgCategoryService: PgCategoryService) {}\n\n  transform(value: any): any {\n    if (!value) return null;\n    const categoryPgAmount: Record<string, number> = {};\n    let total = 0;\n    _.forEach(value.statuses, (pgAmount, pgStatesText) => {\n      const categoryType = this.pgCategoryService.getTypeByStates(pgStatesText);\n      if (_.isUndefined(categoryPgAmount[categoryType])) {\n        categoryPgAmount[categoryType] = 0;\n      }\n      categoryPgAmount[categoryType] += pgAmount;\n      total += pgAmount;\n    });\n    return {\n      categoryPgAmount,\n      total\n    };\n  }\n}\n","<div class=\"container-fluid p-4\">\n  <div class=\"row d-flex flex-row ps-3\">\n\n    <!-- First Grid to hold Details and Inventory Card-->\n    <div class=\"col-sm-3 d-flex flex-column ps-2\">\n\n      <!-- Details Card-->\n      <cd-card cardTitle=\"Details\"\n               i18n-title\n               class=\"details\"\n               aria-label=\"Details card\">\n        <dl class=\"ms-4 me-4\">\n          <dt>Cluster ID</dt>\n          <dd>{{ detailsCardData.fsid }}</dd>\n          <dt>Orchestrator</dt>\n          <dd i18n>{{ detailsCardData.orchestrator || 'Orchestrator is not available' }}</dd>\n          <dt>Ceph version</dt>\n          <dd>\n            {{ detailsCardData.cephVersion }}\n            <cd-upgradable></cd-upgradable>\n          </dd>\n          <dt>Cluster API</dt>\n          <dd>\n            <a routerLink=\"/api-docs\"\n               target=\"_blank\">\n               {{ origin }}/api-docs\n              <i class=\"fa fa-external-link\"></i>\n            </a>\n          </dd>\n          <ng-container>\n            <dt>Telemetry Dashboard\n              <span\n                class=\"badge\"\n                [ngClass]=\"telemetryEnabled ? 'badge-success' : 'badge-secondary'\"\n                [ngbTooltip]=\"getTelemetryText()\" >\n                {{ telemetryEnabled ? 'Active' : 'Inactive' }}\n              </span>\n            </dt>\n            <dd>\n              <a target=\"_blank\"\n                 [href]=\"telemetryURL\">\n                 {{ telemetryURL }}\n                <i class=\"fa fa-external-link\"></i>\n              </a>\n            </dd>\n          </ng-container>\n          <ng-container *ngIf=\"managedByConfig$ | async as managedByConfig\">\n            <span *ngIf=\"managedByConfig['MANAGED_BY_CLUSTERS'].length > 0\">\n              <dt>Managed By</dt>\n              <dd>\n                <a target=\"_blank\"\n                   [href]=\"managedByConfig['MANAGED_BY_CLUSTERS'][0]['url']\">\n                  {{ managedByConfig['MANAGED_BY_CLUSTERS'][0]['fsid'] }}\n                  <i class=\"fa fa-external-link\"></i>\n                </a>\n              </dd>\n            </span>\n          </ng-container>\n        </dl>\n      </cd-card>\n\n      <!-- Inventory Card-->\n      <cd-card cardTitle=\"Inventory\"\n               i18n-title\n               class=\"pt-4\"\n               aria-label=\"Inventory card\">\n        <ng-container *ngIf=\"enabledFeature$ | async as enabledFeature\">\n          <!-- Hosts -->\n          <cd-card-row [data]=\"hostsCount\"\n                       link=\"/hosts\"\n                       title=\"Host\"\n                       summaryType=\"simplified\"\n                       [dropdownData]=\"(isHardwareEnabled$ | async) && (hardwareSummary$ | async)\">\n          </cd-card-row>\n          <!-- Monitors -->\n          <cd-card-row [data]=\"monMap?.monmap.mons.length\"\n                       link=\"/monitor\"\n                       title=\"Monitor\"\n                       summaryType=\"simplified\"></cd-card-row>\n          <!-- Managers -->\n          <cd-card-row [data]=\"mgrMap | mgrSummary\"\n                       title=\"Manager\"></cd-card-row>\n\n          <!-- OSDs -->\n          <cd-card-row [data]=\"osdMap | osdSummary\"\n                       link=\"/osd\"\n                       title=\"OSD\"\n                       summaryType=\"osd\"></cd-card-row>\n\n          <!-- Pools -->\n          <cd-card-row [data]=\"poolStatus?.length\"\n                       link=\"/pool\"\n                       title=\"Pool\"\n                       summaryType=\"simplified\"></cd-card-row>\n\n          <!-- PG Info -->\n          <cd-card-row [data]=\"pgStatus | pgSummary\"\n                       title=\"PG\"></cd-card-row>\n\n          <!-- Object gateways -->\n          <cd-card-row [data]=\"rgwCount\"\n                       link=\"/rgw/daemon\"\n                       title=\"Object Gateway\"\n                       summaryType=\"simplified\"\n                       id=\"rgw-item\"\n                       *ngIf=\"enabledFeature.rgw\"></cd-card-row>\n\n          <!-- Metadata Servers -->\n          <cd-card-row [data]=\"mdsMap | mdsSummary\"\n                       title=\"Metadata Server\"\n                       id=\"mds-item\"\n                       *ngIf=\"enabledFeature.cephfs\"></cd-card-row>\n          <!-- iSCSI Gateways -->\n          <cd-card-row [data]=\"iscsiMap\"\n                       link=\"/iscsi/daemon\"\n                       title=\"iSCSI Gateway\"\n                       summaryType=\"iscsi\"\n                       id=\"iscsi-item\"\n                       *ngIf=\"enabledFeature.iscsi\"></cd-card-row>\n        </ng-container>\n      </cd-card>\n    </div>\n\n    <!-- Second Grid to hold Status Capacity and Cluster Utilization Cards-->\n    <div class=\"col-sm-9 ps-0\">\n      <div class=\"row\">\n        <!-- This column will hold Status and Capacity cards-->\n        <div class=\"col-sm-8\">\n          <cd-card cardTitle=\"Status\"\n                   i18n-title\n                   aria-label=\"Status card\"\n                   class=\"status\"\n                   [alignItemsCenter]=\"true\"\n                   [cardFooter]=\"isAlertmanagerConfigured && prometheusAlertService.alerts.length\"\n                   [fullHeight]=\"true\">\n            <div class=\"viewAlert\"\n                 *ngIf=\"prometheusAlertService.alerts.length\">\n              <a href=\"#/monitoring/active-alerts\"\n                 i18n>\n                View alerts\n              </a>\n            </div>\n            <div class=\"d-flex flex-column ms-4 me-4 mt-4 mb-4\">\n              <div class=\"d-flex flex-row col-md-3 ms-4\">\n                <i  *ngIf=\"healthData?.status else loadingTpl\"\n                    [ngClass]=\"[healthData.status | healthIcon, icons.large2x]\"\n                    [ngStyle]=\"healthData.status | healthColor\"\n                    [title]=\"healthData.status\">\n                </i>\n              <span class=\"ms-2 mt-n1 lead\"\n                    *ngIf=\"!healthData?.checks?.length\"\n                    i18n>Cluster</span>\n              <cds-toggletip  [dropShadow]=\"true\"\n                              [autoAlign]=\"true\">\n              <div cdsToggletipButton>\n                <a class=\"ms-2 mt-n1 lead text-primary\"\n                   popoverClass=\"info-card-popover-cluster-status\"\n                   *ngIf=\"healthData?.checks?.length\"\n                   i18n>Cluster\n                </a>\n              </div>\n              <div cdsToggletipContent\n                   #healthCheck>\n                <div class=\"cds--popover-scroll-container\">\n                  <cd-health-checks *ngIf=\"healthData?.checks\"\n                                    [healthData]=\"healthData.checks\">\n                  </cd-health-checks>\n                </div>\n              </div>\n            </cds-toggletip>\n          </div>\n          </div>\n\n            <div class=\"d-flex flex-column col-md-3\">\n              <div *ngIf=\"hasHardwareError\"\n                   class=\"d-flex flex-row\">\n                <i class=\"text-danger\"\n                   [ngClass]=\"[icons.danger, icons.large2x]\"></i>\n                <span class=\"ms-2 mt-n1 lead\"\n                      i18n>Hardware</span>\n              </div>\n            </div>\n            <section class=\"footer alerts\"\n                     *ngIf=\"isAlertmanagerConfigured && prometheusAlertService.alerts.length\">\n              <div class=\"d-flex flex-wrap ms-4 me-4 mb-3 mt-3\">\n                <span class=\"pt-2\"\n                      i18n>Alerts</span>\n\n                <!-- Potentially make widget component -->\n                <button class=\"btn btn-outline-danger rounded-pill ms-2\"\n                        [ngClass]=\"{'active': true && alertType === 'critical'}\"\n                        title=\"Danger\"\n                        (click)=\"toggleAlertsWindow('critical')\"\n                        id=\"dangerAlerts\"\n                        i18n-title\n                        *ngIf=\"prometheusAlertService?.activeCriticalAlerts\">\n                  <i [ngClass]=\"[icons.danger]\"></i>\n                  <span>{{ prometheusAlertService.activeCriticalAlerts }}</span>\n                </button>\n\n                <button class=\"btn btn-outline-warning rounded-pill ms-2\"\n                        [ngClass]=\"{'active': true && alertType === 'warning'}\"\n                        title=\"Warning\"\n                        (click)=\"toggleAlertsWindow('warning')\"\n                        id=\"warningAlerts\"\n                        i18n-title\n                        *ngIf=\"prometheusAlertService?.activeWarningAlerts\">\n                  <i [ngClass]=\"[icons.infoCircle]\"></i>\n                  <span>{{ prometheusAlertService.activeWarningAlerts }}</span>\n                </button>\n              </div>\n\n              <div class=\"alerts-section pt-0\">\n                <hr class=\"mt-1 mb-0\">\n                <ngx-simplebar [options]=\"simplebar\">\n                  <div class=\"card-body p-0\">\n                    <ng-container *ngTemplateOutlet=\"alertsCard\"></ng-container>\n                  </div>\n                </ngx-simplebar>\n              </div>\n            </section>\n          </cd-card>\n        </div>\n        <div class=\"col-sm-4 ps-0\">\n          <cd-card cardTitle=\"Capacity\"\n                   i18n-title\n                   [fullHeight]=\"true\"\n                   aria-label=\"Capacity card\">\n            <ng-container class=\"ms-4 me-4\"\n                          *ngIf=\"capacity\">\n              <cd-dashboard-pie [data]=\"{max: capacity.total_bytes, current: capacity.total_used_raw_bytes}\"\n                                [lowThreshold]=\"capacityCardData.osdNearfull\"\n                                [highThreshold]=\"capacityCardData.osdFull\">\n              </cd-dashboard-pie>\n            </ng-container>\n          </cd-card>\n        </div>\n\n      <!-- This column will hold Cluster Utlization card -->\n      <div class=\"col-sm-12 d-flex flex-column pt-4\">\n        <cd-card cardTitle=\"Cluster Utilization\"\n                 i18n-title\n                 aria-label=\"Cluster utilization card\">\n          <div class=\"ms-4 me-4 mt-0\">\n            <cd-dashboard-time-selector (selectedTime)=\"getPrometheusData($event)\">\n            </cd-dashboard-time-selector>\n            <ng-container *ngIf=\"capacity\">\n              <cd-dashboard-area-chart chartTitle=\"Used Capacity (RAW)\"\n                                       [maxValue]=\"capacity.total_bytes\"\n                                       dataUnits=\"B\"\n                                       [labelsArray]=\"['Used Capacity']\"\n                                       [dataArray]=\"[queriesResults.USEDCAPACITY]\">\n              </cd-dashboard-area-chart>\n            </ng-container>\n            <cd-dashboard-area-chart chartTitle=\"IOPS\"\n                                     dataUnits=\"\"\n                                     decimals=\"0\"\n                                     [labelsArray]=\"['Reads', 'Writes']\"\n                                     [dataArray]=\"[queriesResults.READIOPS, queriesResults.WRITEIOPS]\">\n            </cd-dashboard-area-chart>\n            <cd-dashboard-area-chart chartTitle=\"OSD Latencies\"\n                                     dataUnits=\"ms\"\n                                     decimals=\"2\"\n                                     [labelsArray]=\"['Apply', 'Commit']\"\n                                     [dataArray]=\"[queriesResults.READLATENCY, queriesResults.WRITELATENCY]\">\n            </cd-dashboard-area-chart>\n            <cd-dashboard-area-chart chartTitle=\"Client Throughput\"\n                                     dataUnits=\"B/s\"\n                                     decimals=\"2\"\n                                     [labelsArray]=\"['Reads', 'Writes']\"\n                                     [dataArray]=\"[queriesResults.READCLIENTTHROUGHPUT, queriesResults.WRITECLIENTTHROUGHPUT]\">\n            </cd-dashboard-area-chart>\n            <cd-dashboard-area-chart chartTitle=\"Recovery Throughput\"\n                                     dataUnits=\"B/s\"\n                                     decimals=\"2\"\n                                     [labelsArray]=\"['Recovery Throughput']\"\n                                     [dataArray]=\"[queriesResults.RECOVERYBYTES]\">\n            </cd-dashboard-area-chart>\n          </div>\n        </cd-card>\n      </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #alertsCard>\n  <ng-container *ngFor=\"let alert of prometheusAlertService.alerts; let i = index;  trackBy: trackByFn\">\n    <div [ngClass]=\"['border-'+alertClass[alert.labels.severity]]\"\n         *ngIf=\"alert.status.state === 'active' &&\n         alert.labels.severity === alertType ||\n         !alertType\">\n      <div class=\"card tc_alerts border-0 pt-3\">\n        <div class=\"row no-gutters ps-2\">\n          <div class=\"col-sm-1 text-center\">\n            <span [ngClass]=\"[icons.stack, icons.large, 'text-'+alertClass[alert.labels.severity]]\">\n              <i [ngClass]=\"[icons.circle, icons.stack2x]\"></i>\n              <i [ngClass]=\"[icons.stack1x, icons.inverse, icons.warning]\"></i>\n            </span>\n          </div>\n          <div class=\"col-md-11 ps-0\">\n            <div class=\"card-body ps-0 pe-1 pb-1 pt-0\">\n              <h6 class=\"card-title bold\">{{ alert.labels.alertname }}</h6>\n              <p class=\"card-text me-3 mb-0 text-truncate\"\n                 [innerHtml]=\"alert.annotations.description\"\n                 [ngbTooltip]=\"alert.annotations.description\"></p>\n              <p class=\"card-text text-muted me-3\">\n                <small class=\"date\"\n                       [title]=\"alert.startsAt | cdDate\"\n                       i18n>Active since: {{ alert.startsAt  | relativeDate }}</small>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr class=\"mt-0 mb-0\">\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #logsLink>\n  <ng-container *ngIf=\"permissions.log.read\">\n    <p class=\"logs-link\"\n       i18n><i [ngClass]=\"[icons.infoCircle]\"></i> See <a routerLink=\"/logs\">Logs</a> for more details.</p>\n  </ng-container>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <cds-inline-loading></cds-inline-loading>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\nimport { BehaviorSubject, EMPTY, Observable, Subject, Subscription, of } from 'rxjs';\nimport { catchError, exhaustMap, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { HealthService } from '~/app/shared/api/health.service';\nimport { PrometheusService, PromqlGuageMetric } from '~/app/shared/api/prometheus.service';\nimport {\n  CapacityCardQueries,\n  UtilizationCardQueries\n} from '~/app/shared/enum/dashboard-promqls.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { DashboardDetails } from '~/app/shared/models/cd-details';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AlertmanagerAlert } from '~/app/shared/models/prometheus-alerts';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport {\n  FeatureTogglesMap$,\n  FeatureTogglesService\n} from '~/app/shared/services/feature-toggles.service';\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { PrometheusListHelper } from '~/app/shared/helpers/prometheus-list-helper';\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { AlertClass } from '~/app/shared/enum/health-icon.enum';\nimport { HardwareService } from '~/app/shared/api/hardware.service';\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport {\n  IscsiMap,\n  MdsMap,\n  MgrMap,\n  MonMap,\n  OsdMap,\n  PgStatus\n} from '~/app/shared/models/health.interface';\n\ntype CapacityCardData = {\n  osdNearfull: number;\n  osdFull: number;\n};\n\n@Component({\n  selector: 'cd-dashboard-v3',\n  templateUrl: './dashboard-v3.component.html',\n  styleUrls: ['./dashboard-v3.component.scss']\n})\nexport class DashboardV3Component extends PrometheusListHelper implements OnInit, OnDestroy {\n  detailsCardData: DashboardDetails = {};\n  capacityCardData: CapacityCardData = {\n    osdNearfull: null,\n    osdFull: null\n  };\n  interval = new Subscription();\n  permissions: Permissions;\n  enabledFeature$: FeatureTogglesMap$;\n  color: string;\n  capacityService: any;\n  capacity: any;\n  healthData$: Observable<Object>;\n  prometheusAlerts$: Observable<AlertmanagerAlert[]>;\n\n  icons = Icons;\n  flexHeight = true;\n  simplebar = {\n    autoHide: true\n  };\n  borderClass: string;\n  alertType: string;\n  alertClass = AlertClass;\n  healthData: any;\n  categoryPgAmount: Record<string, number> = {};\n  totalPgs = 0;\n  queriesResults: { [key: string]: [] } = {\n    USEDCAPACITY: [],\n    IPS: [],\n    OPS: [],\n    READLATENCY: [],\n    WRITELATENCY: [],\n    READCLIENTTHROUGHPUT: [],\n    WRITECLIENTTHROUGHPUT: [],\n    RECOVERYBYTES: [],\n    READIOPS: [],\n    WRITEIOPS: []\n  };\n  telemetryEnabled: boolean;\n  telemetryURL = 'https://telemetry-public.ceph.com/';\n  origin = window.location.origin;\n  hardwareHealth: any;\n  hardwareEnabled: boolean = false;\n  hasHardwareError: boolean = false;\n  isHardwareEnabled$: Observable<boolean>;\n  hardwareSummary$: Observable<any>;\n  hardwareSubject = new BehaviorSubject<any>([]);\n  managedByConfig$: Observable<any>;\n  private subs = new Subscription();\n  private destroy$ = new Subject<void>();\n\n  hostsCount: number = null;\n  monMap: MonMap = null;\n  mgrMap: MgrMap = null;\n  osdMap: OsdMap = null;\n  poolStatus: Record<string, any>[] = null;\n  pgStatus: PgStatus = null;\n  rgwCount: number = null;\n  mdsMap: MdsMap = null;\n  iscsiMap: IscsiMap = null;\n\n  constructor(\n    private summaryService: SummaryService,\n    private orchestratorService: OrchestratorService,\n    private authStorageService: AuthStorageService,\n    private featureToggles: FeatureTogglesService,\n    private healthService: HealthService,\n    private settingsService: SettingsService,\n    public prometheusService: PrometheusService,\n    private mgrModuleService: MgrModuleService,\n    private refreshIntervalService: RefreshIntervalService,\n    public prometheusAlertService: PrometheusAlertService,\n    private hardwareService: HardwareService\n  ) {\n    super(prometheusService);\n    this.permissions = this.authStorageService.getPermissions();\n    this.enabledFeature$ = this.featureToggles.get();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.permissions.configOpt.read) {\n      this.isHardwareEnabled$ = this.getHardwareConfig();\n      this.hardwareSummary$ = this.hardwareSubject.pipe(\n        switchMap(() =>\n          this.hardwareService.getSummary().pipe(\n            switchMap((data: any) => {\n              this.hasHardwareError = data.host.flawed;\n              return of(data);\n            })\n          )\n        )\n      );\n      this.managedByConfig$ = this.settingsService.getValues('MANAGED_BY_CLUSTERS');\n    }\n\n    this.loadInventories();\n\n    // fetch capacity to load the capacity chart\n    this.refreshIntervalObs(() => this.healthService.getClusterCapacity()).subscribe({\n      next: (capacity: any) => {\n        this.capacity = capacity;\n      }\n    });\n\n    this.getPrometheusData(this.prometheusService.lastHourDateObject);\n    this.getDetailsCardData();\n    this.getTelemetryReport();\n    this.getCapacityCardData();\n    this.prometheusAlertService.getAlerts(true);\n  }\n\n  getTelemetryText(): string {\n    return this.telemetryEnabled\n      ? 'Cluster telemetry is active'\n      : 'Cluster telemetry is inactive. To Activate the Telemetry, \\\n       click settings icon on top navigation bar and select \\\n       Telemetry configration.';\n  }\n  ngOnDestroy() {\n    this.prometheusService.unsubscribe();\n    this.subs?.unsubscribe();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  toggleAlertsWindow(type: AlertClass) {\n    this.alertType === type ? (this.alertType = null) : (this.alertType = type);\n  }\n\n  getDetailsCardData() {\n    this.healthService.getClusterFsid().subscribe((data: string) => {\n      this.detailsCardData.fsid = data;\n    });\n    this.orchestratorService.getName().subscribe((data: string) => {\n      this.detailsCardData.orchestrator = data;\n    });\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        const version = summary.version.replace('ceph version ', '').split(' ');\n        this.detailsCardData.cephVersion =\n          version[0] + ' ' + version.slice(2, version.length).join(' ');\n      })\n    );\n  }\n\n  public getPrometheusData(selectedTime: any) {\n    this.queriesResults = this.prometheusService.getRangeQueriesData(\n      selectedTime,\n      UtilizationCardQueries,\n      this.queriesResults\n    );\n  }\n\n  getCapacityQueryValues(data: PromqlGuageMetric['result']) {\n    let osdFull = null;\n    let osdNearfull = null;\n    if (data?.[0]?.metric?.['__name__'] === CapacityCardQueries.OSD_FULL) {\n      osdFull = data[0]?.value?.[1];\n      osdNearfull = data[1]?.value?.[1];\n    } else {\n      osdFull = data?.[1]?.value?.[1];\n      osdNearfull = data?.[0]?.value?.[1];\n    }\n    return [osdFull, osdNearfull];\n  }\n\n  getCapacityCardData() {\n    const CAPACITY_QUERY = `{__name__=~\"${CapacityCardQueries.OSD_FULL}|${CapacityCardQueries.OSD_NEARFULL}\"}`;\n    this.prometheusService\n      .getGaugeQueryData(CAPACITY_QUERY)\n      .subscribe((data: PromqlGuageMetric) => {\n        const [osdFull, osdNearfull] = this.getCapacityQueryValues(data?.result);\n        this.capacityCardData.osdFull = this.prometheusService.formatGuageMetric(osdFull);\n        this.capacityCardData.osdNearfull = this.prometheusService.formatGuageMetric(osdNearfull);\n      });\n  }\n\n  private getTelemetryReport() {\n    this.healthService.getTelemetryStatus().subscribe((enabled: boolean) => {\n      this.telemetryEnabled = enabled;\n    });\n  }\n\n  trackByFn(index: any) {\n    return index;\n  }\n\n  getHardwareConfig(): Observable<any> {\n    return this.mgrModuleService.getConfig('cephadm').pipe(\n      switchMap((resp: any) => {\n        this.hardwareEnabled = resp?.hw_monitoring;\n        return of(resp?.hw_monitoring);\n      })\n    );\n  }\n\n  refreshIntervalObs(fn: Function) {\n    return this.refreshIntervalService.intervalData$.pipe(\n      exhaustMap(() => fn().pipe(catchError(() => EMPTY))),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  loadInventories() {\n    this.refreshIntervalObs(() => this.healthService.getMinimalHealth()).subscribe({\n      next: (result: any) => {\n        this.hostsCount = result.hosts;\n        this.monMap = result.mon_status;\n        this.mgrMap = result.mgr_map;\n        this.osdMap = result.osd_map;\n        this.poolStatus = result.pools;\n        this.pgStatus = result.pg_info;\n        this.rgwCount = result.rgw;\n        this.mdsMap = result.fs_map;\n        this.iscsiMap = result.iscsi_daemons;\n        this.healthData = result.health;\n        this.enabledFeature$ = this.featureToggles.get();\n      }\n    });\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\n\nimport * as Chart from 'chart.js';\nimport _ from 'lodash';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { ChartTooltip } from '~/app/shared/models/chart-tooltip';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\n\n@Component({\n  selector: 'cd-health-pie',\n  templateUrl: './health-pie.component.html',\n  styleUrls: ['./health-pie.component.scss']\n})\nexport class HealthPieComponent implements OnChanges, OnInit {\n  @ViewChild('chartCanvas', { static: true })\n  chartCanvasRef: ElementRef;\n  @ViewChild('chartTooltip', { static: true })\n  chartTooltipRef: ElementRef;\n\n  @Input()\n  data: any;\n  @Input()\n  config = {};\n  @Input()\n  isBytesData = false;\n  @Input()\n  tooltipFn: any;\n  @Input()\n  showLabelAsTooltip = false;\n  @Output()\n  prepareFn = new EventEmitter();\n\n  chartConfig: any;\n\n  public doughnutChartPlugins: any[] = [\n    {\n      id: 'center_text',\n      beforeDraw(chart: any) {\n        const cssHelper = new CssHelper();\n        const defaultFontFamily = 'Helvetica Neue, Helvetica, Arial, sans-serif';\n        Chart.defaults.font.family = defaultFontFamily;\n        const ctx = chart.ctx;\n        if (!chart.options.plugins.center_text || !chart.data.datasets[0].label) {\n          return;\n        }\n\n        ctx.save();\n        const label = chart.data.datasets[0].label.split('\\n');\n\n        const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n        const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        ctx.font = `24px ${defaultFontFamily}`;\n        ctx.fillStyle = cssHelper.propertyValue('chart-color-center-text');\n        ctx.fillText(label[0], centerX, centerY - 10);\n\n        if (label.length > 1) {\n          ctx.font = `14px ${defaultFontFamily}`;\n          ctx.fillStyle = cssHelper.propertyValue('chart-color-center-text-description');\n          ctx.fillText(label[1], centerX, centerY + 10);\n        }\n        ctx.restore();\n      }\n    }\n  ];\n\n  constructor(\n    private dimlessBinary: DimlessBinaryPipe,\n    private dimless: DimlessPipe,\n    private cssHelper: CssHelper\n  ) {\n    this.chartConfig = {\n      chartType: 'doughnut',\n      dataset: [\n        {\n          label: null,\n          borderWidth: 0,\n          backgroundColor: [\n            this.cssHelper.propertyValue('chart-color-green'),\n            this.cssHelper.propertyValue('chart-color-yellow'),\n            this.cssHelper.propertyValue('chart-color-orange'),\n            this.cssHelper.propertyValue('chart-color-red'),\n            this.cssHelper.propertyValue('chart-color-blue')\n          ]\n        }\n      ],\n      options: {\n        cutout: '90%',\n        events: ['click', 'mouseout', 'touchstart'],\n        aspectRatio: 2,\n        plugins: {\n          center_text: true,\n          legend: {\n            display: true,\n            position: 'right',\n            labels: {\n              boxWidth: 10,\n              usePointStyle: false\n            }\n          },\n          tooltips: {\n            enabled: true,\n            displayColors: false,\n            backgroundColor: this.cssHelper.propertyValue('chart-color-tooltip-background'),\n            cornerRadius: 0,\n            bodyFontSize: 14,\n            bodyFontStyle: '600',\n            position: 'nearest',\n            xPadding: 12,\n            yPadding: 12,\n            callbacks: {\n              label: (item: Record<string, any>, data: Record<string, any>) => {\n                let text = data.labels[item.index];\n                if (!text.includes('%')) {\n                  text = `${text} (${data.datasets[item.datasetIndex].data[item.index]}%)`;\n                }\n                return text;\n              }\n            }\n          },\n          title: {\n            display: false\n          }\n        }\n      }\n    };\n  }\n\n  ngOnInit() {\n    const getStyleTop = (tooltip: any, positionY: number) => {\n      return positionY + tooltip.caretY - tooltip.height - 10 + 'px';\n    };\n\n    const getStyleLeft = (tooltip: any, positionX: number) => {\n      return positionX + tooltip.caretX + 'px';\n    };\n\n    const chartTooltip = new ChartTooltip(\n      this.chartCanvasRef,\n      this.chartTooltipRef,\n      getStyleLeft,\n      getStyleTop\n    );\n\n    chartTooltip.getBody = (body: any) => {\n      return this.getChartTooltipBody(body);\n    };\n\n    _.merge(this.chartConfig, this.config);\n\n    this.prepareFn.emit([this.chartConfig, this.data]);\n  }\n\n  ngOnChanges() {\n    this.prepareFn.emit([this.chartConfig, this.data]);\n    this.setChartSliceBorderWidth();\n  }\n\n  private getChartTooltipBody(body: string[]) {\n    const bodySplit = body[0].split(': ');\n\n    if (this.showLabelAsTooltip) {\n      return bodySplit[0];\n    }\n\n    bodySplit[1] = this.isBytesData\n      ? this.dimlessBinary.transform(bodySplit[1])\n      : this.dimless.transform(bodySplit[1]);\n\n    return bodySplit.join(': ');\n  }\n\n  private setChartSliceBorderWidth() {\n    let nonZeroValueSlices = 0;\n    _.forEach(this.chartConfig.dataset[0].data, function (slice) {\n      if (slice > 0) {\n        nonZeroValueSlices += 1;\n      }\n    });\n\n    this.chartConfig.dataset[0].borderWidth = nonZeroValueSlices > 1 ? 1 : 0;\n  }\n}\n","<div class=\"chart-container\">\n  <canvas baseChart\n          #chartCanvas\n          [datasets]=\"chartConfig.dataset\"\n          [type]=\"chartConfig.chartType\"\n          [options]=\"chartConfig.options\"\n          [labels]=\"chartConfig.labels\"\n          [plugins]=\"doughnutChartPlugins\"\n          class=\"chart-canvas\">\n  </canvas>\n  <div class=\"chartjs-tooltip\"\n       #chartTooltip>\n  </div>\n</div>\n","<div class=\"card shadow-sm\"\n     [ngClass]=\"cardClass\">\n  <div class=\"card-body d-flex align-items-center justify-content-center\">\n    <h4 class=\"card-title m-4\">\n      <a *ngIf=\"link; else noLinkTitle\"\n         [routerLink]=\"link\">{{ cardTitle }}</a>\n\n      <ng-template #noLinkTitle>\n        {{ cardTitle }}\n      </ng-template>\n    </h4>\n\n    <div class=\"card-text text-center\"\n         [ngClass]=\"contentClass\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-info-card',\n  templateUrl: './info-card.component.html',\n  styleUrls: ['./info-card.component.scss']\n})\nexport class InfoCardComponent {\n  @Input()\n  cardTitle: string;\n  @Input()\n  link: string;\n  @Input()\n  cardClass = '';\n  @Input()\n  contentClass: string;\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-info-group',\n  templateUrl: './info-group.component.html',\n  styleUrls: ['./info-group.component.scss']\n})\nexport class InfoGroupComponent {\n  icons = Icons;\n  @Input()\n  groupTitle: string;\n}\n","<div class=\"row\">\n  <div class=\"info-group-title\">\n    <span data-testid=\"group-title\">{{ groupTitle }}</span>\n    <cd-helper iconClass=\"fa fa-info-circle fa-2xs\">\n      <div class=\"text-center\"\n           i18n>For an overview of {{ groupTitle|lowercase }} widgets click\n        <cd-doc section=\"dashboard-landing-page-{{ groupTitle|lowercase }}\"\n                docText=\"here\"\n                i18n-docText></cd-doc>\n      </div>\n    </cd-helper>\n  </div>\n</div>\n\n<div class=\"row\">\n  <ng-content></ng-content>\n</div>\n","export enum HealthLabel {\n  HEALTH_ERR = 'error',\n  HEALTH_WARN = 'warning',\n  HEALTH_OK = 'ok'\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HealthLabel } from '~/app/shared/enum/health-label.enum';\n\n@Pipe({\n  name: 'healthLabel'\n})\nexport class HealthLabelPipe implements PipeTransform {\n  transform(value: any): any {\n    return Object.keys(HealthLabel).includes(value as HealthLabel) ? HealthLabel[value] : null;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'monSummary'\n})\nexport class MonSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return '';\n    }\n\n    const result = $localize`${value.monmap.mons.length.toString()} (quorum \\\n${value.quorum.join(', ')})`;\n\n    return result;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'osdDashboardSummary'\n})\nexport class osdDashboardSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return '';\n    }\n\n    let inCount = 0;\n    let upCount = 0;\n    let nearFullCount = 0;\n    let fullCount = 0;\n    _.each(value.osds, (osd) => {\n      if (osd.in) {\n        inCount++;\n      }\n      if (osd.up) {\n        upCount++;\n      }\n      if (osd.state.includes('nearfull')) {\n        nearFullCount++;\n      }\n      if (osd.state.includes('full')) {\n        fullCount++;\n      }\n    });\n\n    const osdSummary = [\n      {\n        content: `${value.osds.length} ${$localize`total`}`,\n        class: ''\n      }\n    ];\n    osdSummary.push({\n      content: '',\n      class: 'card-text-line-break'\n    });\n    osdSummary.push({\n      content: `${upCount} ${$localize`up`}, ${inCount} ${$localize`in`}`,\n      class: ''\n    });\n\n    const downCount = value.osds.length - upCount;\n    const outCount = value.osds.length - inCount;\n    if (downCount > 0 || outCount > 0) {\n      osdSummary.push({\n        content: '',\n        class: 'card-text-line-break'\n      });\n\n      const downText = downCount > 0 ? `${downCount} ${$localize`down`}` : '';\n      const separator = downCount > 0 && outCount > 0 ? ', ' : '';\n      const outText = outCount > 0 ? `${outCount} ${$localize`out`}` : '';\n      osdSummary.push({\n        content: `${downText}${separator}${outText}`,\n        class: 'card-text-error'\n      });\n    }\n\n    if (nearFullCount > 0) {\n      osdSummary.push(\n        {\n          content: '',\n          class: 'card-text-line-break'\n        },\n        {\n          content: `${nearFullCount} ${$localize`near full`}`,\n          class: 'card-text-error'\n        },\n        {\n          content: '',\n          class: 'card-text-line-break'\n        }\n      );\n    }\n\n    if (fullCount > 0) {\n      osdSummary.push({\n        content: `${fullCount} ${$localize`full`}`,\n        class: 'card-text-error'\n      });\n    }\n\n    return osdSummary;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'mgrDashboardSummary'\n})\nexport class MgrDashboardSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return '';\n    }\n\n    let activeCount = $localize`n/a`;\n    const activeTitleText = _.isUndefined(value.active_name)\n      ? ''\n      : `${$localize`active daemon`}: ${value.active_name}`;\n    // There is always one standbyreplay to replace active daemon, if active one is down\n    if (activeTitleText.length > 0) {\n      activeCount = '1';\n    }\n    const standbyHoverText = value.standbys.map((s: any): string => s.name).join(', ');\n    const standbyTitleText = !standbyHoverText\n      ? ''\n      : `${$localize`standby daemons`}: ${standbyHoverText}`;\n    const standbyCount = value.standbys.length;\n    const mgrSummary = [\n      {\n        content: `${activeCount} ${$localize`active`}`,\n        class: 'popover-info',\n        titleText: activeTitleText\n      }\n    ];\n\n    mgrSummary.push({\n      content: '',\n      class: 'card-text-line-break',\n      titleText: ''\n    });\n    mgrSummary.push({\n      content: `${standbyCount} ${$localize`standby`}`,\n      class: 'popover-info',\n      titleText: standbyTitleText\n    });\n\n    return mgrSummary;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport _ from 'lodash';\n\n@Pipe({\n  name: 'mdsDashboardSummary'\n})\nexport class MdsDashboardSummaryPipe implements PipeTransform {\n  transform(value: any): any {\n    if (!value) {\n      return '';\n    }\n\n    let contentLine1 = '';\n    let contentLine2 = '';\n    let standbys = 0;\n    let active = 0;\n    let standbyReplay = 0;\n    _.each(value.standbys, () => {\n      standbys += 1;\n    });\n\n    if (value.standbys && !value.filesystems) {\n      contentLine1 = `${standbys} ${$localize`up`}`;\n      contentLine2 = $localize`no filesystems`;\n    } else if (value.filesystems.length === 0) {\n      contentLine1 = $localize`no filesystems`;\n    } else {\n      _.each(value.filesystems, (fs) => {\n        _.each(fs.mdsmap.info, (mds) => {\n          if (mds.state === 'up:standby-replay') {\n            standbyReplay += 1;\n          } else {\n            active += 1;\n          }\n        });\n      });\n\n      contentLine1 = `${active} ${$localize`active`}`;\n      contentLine2 = `${standbys + standbyReplay} ${$localize`standby`}`;\n    }\n    const standbyHoverText = value.standbys.map((s: any): string => s.name).join(', ');\n    const standbyTitleText = !standbyHoverText\n      ? ''\n      : `${$localize`standby daemons`}: ${standbyHoverText}`;\n    const fsLength = value.filesystems ? value.filesystems.length : 0;\n    const infoObject = fsLength > 0 ? value.filesystems[0].mdsmap.info : {};\n    const activeHoverText = Object.values(infoObject)\n      .map((info: any): string => info.name)\n      .join(', ');\n    let activeTitleText = !activeHoverText ? '' : `${$localize`active daemon`}: ${activeHoverText}`;\n    // There is always one standbyreplay to replace active daemon, if active one is down\n    if (!active && fsLength > 0) {\n      activeTitleText = `${standbyReplay} ${$localize`standbyReplay`}`;\n    }\n    const mgrSummary = [\n      {\n        content: contentLine1,\n        class: 'popover-info',\n        titleText: activeTitleText\n      }\n    ];\n    if (contentLine2) {\n      mgrSummary.push({\n        content: '',\n        class: 'card-text-line-break',\n        titleText: ''\n      });\n      mgrSummary.push({\n        content: contentLine2,\n        class: 'popover-info',\n        titleText: standbyTitleText\n      });\n    }\n\n    return mgrSummary;\n  }\n}\n","<div *ngIf=\"healthData && enabledFeature$ | async as enabledFeature\"\n     class=\"container-fluid\">\n  <cd-info-group groupTitle=\"Status\"\n                 i18n-groupTitle\n                 *ngIf=\"healthData?.health?.status\n                 || healthData?.mon_status\n                 || healthData?.osd_map\n                 || healthData?.mgr_map\n                 || healthData?.hosts != null\n                 || healthData?.rgw != null\n                 || healthData?.fs_map\n                 || healthData?.iscsi_daemons != null\">\n\n    <cd-info-card cardTitle=\"Cluster Status\"\n                  i18n-cardTitle\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData.health?.status\">\n      <ng-container *ngIf=\"healthData.health?.checks?.length > 0\">\n        <cds-toggletip  [dropShadow]=\"true\"\n                        [autoAlign]=\"true\">\n          <div cdsToggletipButton>\n            <span [ngStyle]=\"healthData.health.status | healthColor\"\n                  class=\"info-card-content-clickable\">\n                  {{ healthData.health.status | healthLabel | uppercase }}\n              <i  *ngIf=\"healthData.health?.status !== 'HEALTH_OK'\"\n                  class=\"fa fa-exclamation-triangle\"></i>\n            </span>\n          </div>\n          <div cdsToggletipContent>\n            <div class=\"cds--popover-scroll-container\">\n              <cd-health-checks [healthData]=\"healthData\"></cd-health-checks>\n            </div>\n          </div>\n        </cds-toggletip>\n      </ng-container>\n      <ng-container *ngIf=\"!healthData?.health?.checks?.length\">\n        <div [ngStyle]=\"healthData?.health.status | healthColor\">\n          {{ healthData?.health.status | healthLabel | uppercase }}\n        </div>\n      </ng-container>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Hosts\"\n                  i18n-cardTitle\n                  link=\"/hosts\"\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.hosts != null\">\n      {{ healthData?.hosts }} total\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Monitors\"\n                  i18n-cardTitle\n                  link=\"/monitor\"\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.mon_status\">\n      {{ healthData?.mon_status | monSummary }}\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"OSDs\"\n                  i18n-cardTitle\n                  link=\"/osd\"\n                  class=\"cd-status-card\"\n                  *ngIf=\"(healthData?.osd_map | osdDashboardSummary) as transformedResult\"\n                  contentClass=\"content-highlight\">\n      <span *ngFor=\"let result of transformedResult\"\n            [ngClass]=\"result.class\">\n        {{ result.content }}\n      </span>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Managers\"\n                  i18n-cardTitle\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.mgr_map\">\n      <span *ngFor=\"let result of (healthData?.mgr_map | mgrDashboardSummary)\"\n            [ngClass]=\"result.class\"\n            [title]=\"result.titleText != null ? result.titleText : ''\">\n        {{ result.content }}\n      </span>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Object Gateways\"\n                  i18n-cardTitle\n                  link=\"/rgw/daemon\"\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"enabledFeature?.rgw && healthData?.rgw != null\">\n      {{ healthData?.rgw }} total\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Metadata Servers\"\n                  i18n-cardTitle\n                  class=\"cd-status-card\"\n                  *ngIf=\"(enabledFeature?.cephfs && healthData?.fs_map | mdsDashboardSummary) as transformedResult\"\n                  [contentClass]=\"(transformedResult.length > 1 ? 'text-area-size-2' : '') + ' content-highlight'\">\n      <!-- TODO: check text-area-size-2 -->\n      <span *ngFor=\"let result of transformedResult\"\n            [ngClass]=\"result.class\"\n            [title]=\"result.titleText !== null ? result.titleText : ''\">\n        {{ result.content }}\n      </span>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"iSCSI Gateways\"\n                  i18n-cardTitle\n                  link=\"/block/iscsi\"\n                  class=\"cd-status-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"enabledFeature?.iscsi && healthData?.iscsi_daemons != null\">\n      {{ healthData?.iscsi_daemons.up + healthData?.iscsi_daemons.down }} total\n      <span class=\"card-text-line-break\"></span>\n      {{ healthData?.iscsi_daemons.up }} up,\n      <span [ngClass]=\"{'card-text-error': healthData?.iscsi_daemons.down > 0}\">{{ healthData?.iscsi_daemons.down }}\n        down</span>\n    </cd-info-card>\n  </cd-info-group>\n\n  <cd-info-group groupTitle=\"Capacity\"\n                 i18n-groupTitle\n                 *ngIf=\"healthData?.pools\n                 || healthData?.df\n                 || healthData?.pg_info\">\n    <cd-info-card cardTitle=\"Raw Capacity\"\n                  i18n-cardTitle\n                  class=\"cd-capacity-card cd-chart-card\"\n                  contentClass=\"content-chart\"\n                  *ngIf=\"healthData?.df\">\n      <cd-health-pie [data]=\"healthData\"\n                     [config]=\"rawCapacityChartConfig\"\n                     [isBytesData]=\"true\"\n                     (prepareFn)=\"prepareRawUsage($event[0], $event[1])\">\n      </cd-health-pie>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Objects\"\n                  i18n-cardTitle\n                  class=\"cd-capacity-card cd-chart-card\"\n                  contentClass=\"content-chart\"\n                  *ngIf=\"healthData?.pg_info?.object_stats?.num_objects != null\">\n      <cd-health-pie [data]=\"healthData\"\n                     (prepareFn)=\"prepareObjects($event[0], $event[1])\">\n      </cd-health-pie>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"PG Status\"\n                  i18n-cardTitle\n                  class=\"cd-capacity-card cd-chart-card\"\n                  contentClass=\"content-chart\"\n                  *ngIf=\"healthData.pg_info\">\n      <div  cdsPopover\n            [dropShadow]=\"true\"\n            placement=\"bottom\"\n            class=\"pg-status-popover-wrapper\">\n\n      <div class=\"popover-trigger\">\n        <cd-health-pie  [data]=\"healthData\"\n                        [config]=\"pgStatusChartConfig\"\n                        (prepareFn)=\"preparePgStatus($event[0], $event[1])\">\n        </cd-health-pie>\n        </div>\n        <cds-popover-content>\n          <div class=\"cds--popover-scroll-container\">\n            <ng-container *ngTemplateOutlet=\"logsLink\"></ng-container>\n            <ul>\n              <li *ngFor=\"let pgStatesText of healthData.pg_info.statuses | keyvalue\">\n              {{ pgStatesText.key }}: {{ pgStatesText.value }}\n              </li>\n            </ul>\n          </div>\n        </cds-popover-content>\n      </div>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Pools\"\n                  i18n-cardTitle\n                  link=\"/pool\"\n                  class=\"cd-capacity-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.pools\">\n      {{ healthData?.pools.length }}\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"PGs per OSD\"\n                  i18n-cardTitle\n                  class=\"cd-capacity-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.pg_info\">\n      {{ healthData?.pg_info.pgs_per_osd | dimless }}\n    </cd-info-card>\n  </cd-info-group>\n\n  <cd-info-group groupTitle=\"Performance\"\n                 i18n-groupTitle\n                 *ngIf=\"healthData?.client_perf || healthData?.scrub_status\">\n    <cd-info-card cardTitle=\"Client Read/Write\"\n                  i18n-cardTitle\n                  class=\"cd-performance-card cd-chart-card\"\n                  contentClass=\"content-chart\"\n                  *ngIf=\"healthData?.client_perf\">\n      <cd-health-pie [data]=\"healthData\"\n                     [config]=\"clientStatsConfig\"\n                     (prepareFn)=\"prepareReadWriteRatio($event[0], $event[1])\">\n      </cd-health-pie>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Client Throughput\"\n                  i18n-cardTitle\n                  class=\"cd-performance-card cd-chart-card\"\n                  contentClass=\"content-chart\"\n                  *ngIf=\"healthData?.client_perf\">\n      <cd-health-pie [data]=\"healthData\"\n                     [config]=\"clientStatsConfig\"\n                     (prepareFn)=\"prepareClientThroughput($event[0], $event[1])\">\n      </cd-health-pie>\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Recovery Throughput\"\n                  i18n-cardTitle\n                  class=\"cd-performance-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.client_perf\">\n      {{ (healthData?.client_perf.recovering_bytes_per_sec | dimlessBinary) + '/s' }}\n    </cd-info-card>\n\n    <cd-info-card cardTitle=\"Scrubbing\"\n                  i18n-cardTitle\n                  class=\"cd-performance-card\"\n                  contentClass=\"content-highlight\"\n                  *ngIf=\"healthData?.scrub_status\">\n      {{ healthData?.scrub_status }}\n    </cd-info-card>\n  </cd-info-group>\n\n  <ng-template #logsLink>\n    <ng-container *ngIf=\"permissions?.log?.read\">\n      <p class=\"logs-link\"\n         i18n>\n        <i [ngClass]=\"[icons.infoCircle]\"></i> See\n        <a routerLink=\"/logs\">Logs</a> for more details.\n      </p>\n    </ng-container>\n  </ng-template>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { PgCategoryService } from '~/app/ceph/shared/pg-category.service';\nimport { HealthService } from '~/app/shared/api/health.service';\nimport { OsdService } from '~/app/shared/api/osd.service';\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { OsdSettings } from '~/app/shared/models/osd-settings';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport {\n  FeatureTogglesMap$,\n  FeatureTogglesService\n} from '~/app/shared/services/feature-toggles.service';\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\n\n@Component({\n  selector: 'cd-health',\n  templateUrl: './health.component.html',\n  styleUrls: ['./health.component.scss']\n})\nexport class HealthComponent implements OnInit, OnDestroy {\n  healthData: any;\n  osdSettings = new OsdSettings();\n  interval = new Subscription();\n  permissions: Permissions;\n  enabledFeature$: FeatureTogglesMap$;\n  icons = Icons;\n  color: string;\n  clientStatsConfig: any = {};\n  rawCapacityChartConfig: any = {};\n  pgStatusChartConfig = {\n    options: {\n      events: ['']\n    }\n  };\n\n  constructor(\n    private healthService: HealthService,\n    private osdService: OsdService,\n    private authStorageService: AuthStorageService,\n    private pgCategoryService: PgCategoryService,\n    private featureToggles: FeatureTogglesService,\n    private refreshIntervalService: RefreshIntervalService,\n    private dimlessBinary: DimlessBinaryPipe,\n    private dimless: DimlessPipe,\n    private cssHelper: CssHelper\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n    this.enabledFeature$ = this.featureToggles.get();\n  }\n\n  ngOnInit() {\n    this.clientStatsConfig = {\n      dataset: [\n        {\n          backgroundColor: [\n            this.cssHelper.propertyValue('chart-color-cyan'),\n            this.cssHelper.propertyValue('chart-color-purple')\n          ]\n        }\n      ]\n    };\n\n    this.rawCapacityChartConfig = {\n      dataset: [\n        {\n          backgroundColor: [\n            this.cssHelper.propertyValue('chart-color-blue'),\n            this.cssHelper.propertyValue('chart-color-gray')\n          ]\n        }\n      ]\n    };\n    this.interval = this.refreshIntervalService.intervalData$.subscribe(() => {\n      this.getHealth();\n    });\n\n    this.osdService\n      .getOsdSettings()\n      .pipe(take(1))\n      .subscribe((data: any) => {\n        this.osdSettings = data;\n      });\n  }\n\n  ngOnDestroy() {\n    this.interval.unsubscribe();\n  }\n\n  getHealth() {\n    this.healthService.getMinimalHealth().subscribe((data: any) => {\n      this.healthData = data;\n    });\n  }\n\n  prepareReadWriteRatio(chart: Record<string, any>) {\n    const ratioLabels = [];\n    const ratioData = [];\n\n    const total =\n      this.healthData.client_perf.write_op_per_sec + this.healthData.client_perf.read_op_per_sec;\n\n    ratioLabels.push(\n      `${$localize`Reads`}: ${this.dimless.transform(\n        this.healthData.client_perf.read_op_per_sec\n      )} ${$localize`/s`}`\n    );\n    ratioData.push(this.calcPercentage(this.healthData.client_perf.read_op_per_sec, total));\n    ratioLabels.push(\n      `${$localize`Writes`}: ${this.dimless.transform(\n        this.healthData.client_perf.write_op_per_sec\n      )} ${$localize`/s`}`\n    );\n    ratioData.push(this.calcPercentage(this.healthData.client_perf.write_op_per_sec, total));\n\n    chart.labels = ratioLabels;\n    chart.dataset[0].data = ratioData;\n    chart.dataset[0].label = `${this.dimless.transform(total)}\\n${$localize`IOPS`}`;\n  }\n\n  prepareClientThroughput(chart: Record<string, any>) {\n    const ratioLabels = [];\n    const ratioData = [];\n\n    const total =\n      this.healthData.client_perf.read_bytes_sec + this.healthData.client_perf.write_bytes_sec;\n\n    ratioLabels.push(\n      `${$localize`Reads`}: ${this.dimlessBinary.transform(\n        this.healthData.client_perf.read_bytes_sec\n      )}${$localize`/s`}`\n    );\n    ratioData.push(this.calcPercentage(this.healthData.client_perf.read_bytes_sec, total));\n    ratioLabels.push(\n      `${$localize`Writes`}: ${this.dimlessBinary.transform(\n        this.healthData.client_perf.write_bytes_sec\n      )}${$localize`/s`}`\n    );\n    ratioData.push(this.calcPercentage(this.healthData.client_perf.write_bytes_sec, total));\n\n    chart.labels = ratioLabels;\n    chart.dataset[0].data = ratioData;\n    chart.dataset[0].label = `${this.dimlessBinary\n      .transform(total)\n      .replace(' ', '\\n')}${$localize`/s`}`;\n  }\n\n  prepareRawUsage(chart: Record<string, any>, data: Record<string, any>) {\n    const percentAvailable = this.calcPercentage(\n      data.df.stats.total_bytes - data.df.stats.total_used_raw_bytes,\n      data.df.stats.total_bytes\n    );\n    const percentUsed = this.calcPercentage(\n      data.df.stats.total_used_raw_bytes,\n      data.df.stats.total_bytes\n    );\n\n    const nearfullRatio = this.osdSettings.nearfull_ratio;\n    const fullRatio = this.osdSettings.nearfull_ratio;\n\n    if (nearfullRatio >= 0 && percentUsed / 100 >= nearfullRatio) {\n      this.color = 'chart-color-red';\n    } else if (fullRatio >= 0 && percentUsed / 100 >= fullRatio) {\n      this.color = 'chart-color-yellow';\n    } else {\n      this.color = 'chart-color-blue';\n    }\n    this.rawCapacityChartConfig.dataset[0].backgroundColor[0] = this.cssHelper.propertyValue(\n      this.color\n    );\n\n    chart.dataset[0].data = [percentUsed, percentAvailable];\n\n    chart.labels = [\n      `${$localize`Used`}: ${this.dimlessBinary.transform(data.df.stats.total_used_raw_bytes)}`,\n      `${$localize`Avail.`}: ${this.dimlessBinary.transform(\n        data.df.stats.total_bytes - data.df.stats.total_used_raw_bytes\n      )}`\n    ];\n\n    chart.dataset[0].label = `${percentUsed}%\\nof ${this.dimlessBinary.transform(\n      data.df.stats.total_bytes\n    )}`;\n  }\n\n  preparePgStatus(chart: Record<string, any>, data: Record<string, any>) {\n    const categoryPgAmount: Record<string, number> = {};\n    let totalPgs = 0;\n\n    _.forEach(data.pg_info.statuses, (pgAmount, pgStatesText) => {\n      const categoryType = this.pgCategoryService.getTypeByStates(pgStatesText);\n\n      if (_.isUndefined(categoryPgAmount[categoryType])) {\n        categoryPgAmount[categoryType] = 0;\n      }\n      categoryPgAmount[categoryType] += pgAmount;\n      totalPgs += pgAmount;\n    });\n\n    for (const categoryType of this.pgCategoryService.getAllTypes()) {\n      if (_.isUndefined(categoryPgAmount[categoryType])) {\n        categoryPgAmount[categoryType] = 0;\n      }\n    }\n\n    chart.dataset[0].data = this.pgCategoryService\n      .getAllTypes()\n      .map((categoryType) => this.calcPercentage(categoryPgAmount[categoryType], totalPgs));\n\n    chart.labels = [\n      `${$localize`Clean`}: ${this.dimless.transform(categoryPgAmount['clean'])}`,\n      `${$localize`Working`}: ${this.dimless.transform(categoryPgAmount['working'])}`,\n      `${$localize`Warning`}: ${this.dimless.transform(categoryPgAmount['warning'])}`,\n      `${$localize`Unknown`}: ${this.dimless.transform(categoryPgAmount['unknown'])}`\n    ];\n\n    chart.dataset[0].label = `${totalPgs}\\n${$localize`PGs`}`;\n  }\n\n  prepareObjects(chart: Record<string, any>, data: Record<string, any>) {\n    const objectCopies = data.pg_info.object_stats.num_object_copies;\n    const healthy =\n      objectCopies -\n      data.pg_info.object_stats.num_objects_misplaced -\n      data.pg_info.object_stats.num_objects_degraded -\n      data.pg_info.object_stats.num_objects_unfound;\n    const healthyPercentage = this.calcPercentage(healthy, objectCopies);\n    const misplacedPercentage = this.calcPercentage(\n      data.pg_info.object_stats.num_objects_misplaced,\n      objectCopies\n    );\n    const degradedPercentage = this.calcPercentage(\n      data.pg_info.object_stats.num_objects_degraded,\n      objectCopies\n    );\n    const unfoundPercentage = this.calcPercentage(\n      data.pg_info.object_stats.num_objects_unfound,\n      objectCopies\n    );\n\n    chart.labels = [\n      `${$localize`Healthy`}: ${healthyPercentage}%`,\n      `${$localize`Misplaced`}: ${misplacedPercentage}%`,\n      `${$localize`Degraded`}: ${degradedPercentage}%`,\n      `${$localize`Unfound`}: ${unfoundPercentage}%`\n    ];\n\n    chart.dataset[0].data = [\n      healthyPercentage,\n      misplacedPercentage,\n      degradedPercentage,\n      unfoundPercentage\n    ];\n\n    chart.dataset[0].label = `${this.dimless.transform(\n      data.pg_info.object_stats.num_objects\n    )}\\n${$localize`objects`}`;\n  }\n\n  isClientReadWriteChartShowable() {\n    const readOps = this.healthData.client_perf.read_op_per_sec || 0;\n    const writeOps = this.healthData.client_perf.write_op_per_sec || 0;\n\n    return readOps + writeOps > 0;\n  }\n\n  private calcPercentage(dividend: number, divisor: number) {\n    if (!_.isNumber(dividend) || !_.isNumber(divisor) || divisor === 0) {\n      return 0;\n    }\n\n    return Math.ceil((dividend / divisor) * 100 * 100) / 100;\n  }\n}\n","<main aria-label=\"Dashboard\">\n  <a href=\"#main\"\n     class=\"sr-only\">skip to content</a>\n\n  <ng-container *ngIf=\"(enabledFeature$ | async)?.dashboard === false; else dashboardV3\"\n                class=\"main-padding\">\n    <cd-refresh-selector></cd-refresh-selector>\n\n    <cd-health id=\"main\"></cd-health>\n  </ng-container>\n\n  <ng-template #dashboardV3>\n    <cd-dashboard-v3></cd-dashboard-v3>\n  </ng-template>\n</main>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FeatureTogglesService } from '~/app/shared/services/feature-toggles.service';\n\n@Component({\n  selector: 'cd-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent {\n  enabledFeature$: Observable<Object>;\n\n  constructor(private featureToggles: FeatureTogglesService) {\n    this.enabledFeature$ = this.featureToggles.get();\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'cd-performance-counter',\n  templateUrl: './performance-counter.component.html',\n  styleUrls: ['./performance-counter.component.scss']\n})\nexport class PerformanceCounterComponent {\n  static defaultFromLink = '/hosts';\n\n  serviceId: string;\n  serviceType: string;\n  fromLink: string;\n\n  constructor(private route: ActivatedRoute) {\n    this.route.queryParams.subscribe((params: { fromLink: string }) => {\n      this.fromLink = params.fromLink || PerformanceCounterComponent.defaultFromLink;\n    });\n    this.route.params.subscribe((params: { type: string; id: string }) => {\n      this.serviceId = decodeURIComponent(params.id);\n      this.serviceType = params.type;\n    });\n  }\n}\n","<legend>{{ serviceType }}.{{ serviceId }}</legend>\n<cd-table-performance-counter [serviceType]=\"serviceType\"\n                              [serviceId]=\"serviceId\">\n</cd-table-performance-counter>\n","<div class=\"cd-col-form\">\n  <form #frm=\"ngForm\"\n        [formGroup]=\"userForm\"\n        novalidate>\n    <div class=\"card\">\n      <div i18n=\"form title\"\n           class=\"card-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n      <div class=\"card-body\">\n        <!-- Old password -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"oldpassword\"\n                 i18n>Old password</label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input class=\"form-control\"\n                     type=\"password\"\n                     placeholder=\"Old password...\"\n                     id=\"oldpassword\"\n                     formControlName=\"oldpassword\"\n                     autocomplete=\"new-password\"\n                     autofocus>\n              <button class=\"btn btn-light\"\n                      cdPasswordButton=\"oldpassword\">\n              </button>\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('oldpassword', frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('oldpassword', frm, 'notmatch')\"\n                  i18n>The old and new passwords must be different.</span>\n          </div>\n        </div>\n\n        <!-- New password -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"newpassword\">\n            <span class=\"required\"\n                  i18n>New password</span>\n            <cd-helper *ngIf=\"passwordPolicyHelpText.length > 0\"\n                       class=\"text-pre-wrap\"\n                       html=\"{{ passwordPolicyHelpText }}\">\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input class=\"form-control\"\n                     type=\"password\"\n                     placeholder=\"Password...\"\n                     id=\"newpassword\"\n                     autocomplete=\"new-password\"\n                     formControlName=\"newpassword\">\n              <button type=\"button\"\n                      class=\"btn btn-light\"\n                      cdPasswordButton=\"newpassword\">\n              </button>\n            </div>\n            <div class=\"password-strength-level\">\n              <div class=\"{{ passwordStrengthLevelClass }}\"\n                   data-toggle=\"tooltip\"\n                   title=\"{{ passwordValuation }}\">\n              </div>\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('newpassword', frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('newpassword', frm, 'notmatch')\"\n                  i18n>The old and new passwords must be different.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('newpassword', frm, 'passwordPolicy')\">\n              {{ passwordValuation }}\n            </span>\n          </div>\n        </div>\n\n        <!-- Confirm new password -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"confirmnewpassword\"\n                 i18n>Confirm new password</label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input class=\"form-control\"\n                     type=\"password\"\n                     autocomplete=\"new-password\"\n                     placeholder=\"Confirm new password...\"\n                     id=\"confirmnewpassword\"\n                     formControlName=\"confirmnewpassword\">\n              <button class=\"btn btn-light\"\n                      cdPasswordButton=\"confirmnewpassword\">\n              </button>\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('confirmnewpassword', frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"userForm.showError('confirmnewpassword', frm, 'match')\"\n                  i18n>Password confirmation doesn't match the new password.</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"userForm\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n    </div>\n  </form>\n</div>\n","import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { UserService } from '~/app/shared/api/user.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PasswordPolicyService } from '~/app/shared/services/password-policy.service';\n\n@Component({\n  selector: 'cd-user-password-form',\n  templateUrl: './user-password-form.component.html',\n  styleUrls: ['./user-password-form.component.scss']\n})\nexport class UserPasswordFormComponent {\n  userForm: CdFormGroup;\n  action: string;\n  resource: string;\n  passwordPolicyHelpText = '';\n  passwordStrengthLevelClass: string;\n  passwordValuation: string;\n  icons = Icons;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    public userService: UserService,\n    public authStorageService: AuthStorageService,\n    public formBuilder: CdFormBuilder,\n    public router: Router,\n    public passwordPolicyService: PasswordPolicyService\n  ) {\n    this.action = this.actionLabels.CHANGE;\n    this.resource = $localize`password`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.passwordPolicyService.getHelpText().subscribe((helpText: string) => {\n      this.passwordPolicyHelpText = helpText;\n    });\n    this.userForm = this.formBuilder.group(\n      {\n        oldpassword: [\n          null,\n          [\n            Validators.required,\n            CdValidators.custom('notmatch', () => {\n              return (\n                this.userForm &&\n                this.userForm.getValue('newpassword') === this.userForm.getValue('oldpassword')\n              );\n            })\n          ]\n        ],\n        newpassword: [\n          null,\n          [\n            Validators.required,\n            CdValidators.custom('notmatch', () => {\n              return (\n                this.userForm &&\n                this.userForm.getValue('oldpassword') === this.userForm.getValue('newpassword')\n              );\n            })\n          ],\n          [\n            CdValidators.passwordPolicy(\n              this.userService,\n              () => this.authStorageService.getUsername(),\n              (_valid: boolean, credits: number, valuation: string) => {\n                this.passwordStrengthLevelClass = this.passwordPolicyService.mapCreditsToCssClass(\n                  credits\n                );\n                this.passwordValuation = _.defaultTo(valuation, '');\n              }\n            )\n          ]\n        ],\n        confirmnewpassword: [null, [Validators.required]]\n      },\n      {\n        validators: [CdValidators.match('newpassword', 'confirmnewpassword')]\n      }\n    );\n  }\n\n  onSubmit() {\n    if (this.userForm.pristine) {\n      return;\n    }\n    const username = this.authStorageService.getUsername();\n    const oldPassword = this.userForm.getValue('oldpassword');\n    const newPassword = this.userForm.getValue('newpassword');\n    this.userService.changePassword(username, oldPassword, newPassword).subscribe(\n      () => this.onPasswordChange(),\n      () => {\n        this.userForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n\n  /**\n   * The function that is called after the password has been changed.\n   * Override this in derived classes to change the behaviour.\n   */\n  onPasswordChange() {\n    this.notificationService.show(NotificationType.success, $localize`Updated user password\"`);\n    this.router.navigate(['/login']);\n  }\n}\n","<div>\n  <h2 i18n>Please set a new password.</h2>\n  <h4 i18n>You will be redirected to the login page afterwards.</h4>\n  <form #frm=\"ngForm\"\n        [formGroup]=\"userForm\"\n        novalidate>\n\n    <!-- Old password -->\n    <div class=\"form-group has-feedback\">\n      <div class=\"input-group\">\n        <input class=\"form-control\"\n               type=\"password\"\n               placeholder=\"Old password...\"\n               id=\"oldpassword\"\n               formControlName=\"oldpassword\"\n               autocomplete=\"new-password\"\n               autofocus>\n        <button class=\"btn btn-outline-light btn-password\"\n                cdPasswordButton=\"oldpassword\">\n        </button>\n      </div>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('oldpassword', frm, 'required')\"\n            i18n>This field is required.</span>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('oldpassword', frm, 'notmatch')\"\n            i18n>The old and new passwords must be different.</span>\n    </div>\n\n    <!-- New password -->\n    <div class=\"form-group has-feedback\">\n      <div class=\"input-group\">\n        <input class=\"form-control\"\n               type=\"password\"\n               placeholder=\"New password...\"\n               id=\"newpassword\"\n               autocomplete=\"new-password\"\n               formControlName=\"newpassword\">\n        <button type=\"button\"\n                class=\"btn btn-outline-light btn-password\"\n                cdPasswordButton=\"newpassword\">\n        </button>\n      </div>\n      <div class=\"password-strength-level\">\n        <div class=\"{{ passwordStrengthLevelClass }}\"\n             data-toggle=\"tooltip\"\n             title=\"{{ passwordValuation }}\">\n        </div>\n      </div>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('newpassword', frm, 'required')\"\n            i18n>This field is required.</span>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('newpassword', frm, 'notmatch')\"\n            i18n>The old and new passwords must be different.</span>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('newpassword', frm, 'passwordPolicy')\">\n        {{ passwordValuation }}\n      </span>\n    </div>\n\n    <!-- Confirm new password -->\n    <div class=\"form-group has-feedback\">\n      <div class=\"input-group\">\n        <input class=\"form-control\"\n               type=\"password\"\n               autocomplete=\"new-password\"\n               placeholder=\"Confirm new password...\"\n               id=\"confirmnewpassword\"\n               formControlName=\"confirmnewpassword\">\n        <button class=\"btn btn-outline-light btn-password\"\n                cdPasswordButton=\"confirmnewpassword\">\n        </button>\n      </div>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('confirmnewpassword', frm, 'required')\"\n            i18n>This field is required.</span>\n      <span class=\"invalid-feedback\"\n            *ngIf=\"userForm.showError('confirmnewpassword', frm, 'match')\"\n            i18n>Password confirmation doesn't match the new password.</span>\n    </div>\n    <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                          (backActionEvent)=\"onCancel()\"\n                          [form]=\"userForm\"\n                          [disabled]=\"userForm.invalid\"\n                          [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                          wrappingClass=\"text-right\"></cd-form-button-panel>\n  </form>\n</div>\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '~/app/shared/api/auth.service';\nimport { UserService } from '~/app/shared/api/user.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PasswordPolicyService } from '~/app/shared/services/password-policy.service';\nimport { UserPasswordFormComponent } from '../user-password-form/user-password-form.component';\n\n@Component({\n  selector: 'cd-login-password-form',\n  templateUrl: './login-password-form.component.html',\n  styleUrls: ['./login-password-form.component.scss']\n})\nexport class LoginPasswordFormComponent extends UserPasswordFormComponent {\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    public userService: UserService,\n    public authStorageService: AuthStorageService,\n    public formBuilder: CdFormBuilder,\n    public router: Router,\n    public passwordPolicyService: PasswordPolicyService,\n    public authService: AuthService\n  ) {\n    super(\n      actionLabels,\n      notificationService,\n      userService,\n      authStorageService,\n      formBuilder,\n      router,\n      passwordPolicyService\n    );\n  }\n\n  onPasswordChange() {\n    // Logout here because changing the password will change the\n    // session token which will finally lead to a 401 when calling\n    // the REST API the next time. The API HTTP interceptor will\n    // then also redirect to the login page immediately.\n    this.authService.logout();\n  }\n\n  onCancel() {\n    this.authService.logout();\n  }\n}\n","export class Credentials {\n  username: string;\n  password: string;\n}\n","<div class=\"container\"\n     *ngIf=\"isLoginActive\">\n  <h1 class=\"sr-only\">Ceph login</h1>\n  <form name=\"loginForm\"\n        (ngSubmit)=\"login()\"\n        #loginForm=\"ngForm\"\n        novalidate>\n\n    <!-- Username -->\n    <div class=\"form-group has-feedback d-flex flex-column py-3\">\n      <label class=\"ps-3\"\n             for=\"username\"\n             i18n>Username</label>\n      <input id=\"username\"\n             name=\"username\"\n             [(ngModel)]=\"model.username\"\n             #username=\"ngModel\"\n             type=\"text\"\n             [attr.aria-invalid]=\"username.invalid\"\n             aria-labelledby=\"username\"\n             class=\"form-control ps-3\"\n             required\n             autofocus>\n      <div class=\"invalid-feedback ps-3\"\n           *ngIf=\"(loginForm.submitted || username.dirty) && username.invalid\"\n           i18n>Username is required</div>\n    </div>\n\n    <!-- Password -->\n    <div class=\"form-group has-feedback\"\n         id=\"password-div\">\n      <div class=\"input-group d-flex flex-nowrap\">\n        <div class=\"d-flex flex-column flex-grow-1 py-3\">\n          <label class=\"ps-3\"\n                 for=\"password\"\n                 i18n>Password</label>\n          <input id=\"password\"\n                 name=\"password\"\n                 [(ngModel)]=\"model.password\"\n                 #password=\"ngModel\"\n                 type=\"password\"\n                 [attr.aria-invalid]=\"password.invalid\"\n                 aria-labelledby=\"password\"\n                 class=\"form-control ps-3\"\n                 required>\n          <div class=\"invalid-feedback ps-3\"\n               *ngIf=\"(loginForm.submitted || password.dirty) && password.invalid\"\n               i18n>Password is required</div>\n        </div>\n        <span class=\"form-group-append\">\n          <button type=\"button\"\n                  class=\"btn btn-outline-light btn-password h-100 px-4\"\n                  cdPasswordButton=\"password\"\n                  aria-label=\"toggle-password\">\n          </button>\n        </span>\n      </div>\n    </div>\n\n    <input type=\"submit\"\n           class=\"btn btn-accent px-5 py-2\"\n           [disabled]=\"loginForm.invalid\"\n           value=\"Log in\"\n           i18n-value>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { AuthService } from '~/app/shared/api/auth.service';\nimport { Credentials } from '~/app/shared/models/credentials';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\n\n@Component({\n  selector: 'cd-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  model = new Credentials();\n  isLoginActive = false;\n  returnUrl: string;\n  postInstalled = false;\n\n  constructor(\n    private authService: AuthService,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    if (this.authStorageService.isLoggedIn()) {\n      this.router.navigate(['']);\n    } else {\n      // Make sure all open modal dialogs are closed. This might be\n      // necessary when the logged in user is redirected to the login\n      // page after a 401.\n      this.modalService.dismissAll();\n\n      let token: string = null;\n      if (window.location.hash.indexOf('access_token=') !== -1) {\n        token = window.location.hash.split('access_token=')[1];\n        const uri = window.location.toString();\n        window.history.replaceState({}, document.title, uri.split('?')[0]);\n      }\n      this.authService.check(token).subscribe((login: any) => {\n        if (login.login_url) {\n          this.postInstalled = login.cluster_status === 'POST_INSTALLED';\n          if (login.login_url === '#/login') {\n            this.isLoginActive = true;\n          } else {\n            window.location.replace(login.login_url);\n          }\n        } else {\n          this.authStorageService.set(\n            login.username,\n            login.permissions,\n            login.sso,\n            login.pwdExpirationDate\n          );\n          this.router.navigate(['']);\n        }\n      });\n    }\n  }\n\n  login() {\n    localStorage.setItem('cluster_api_url', window.location.origin);\n    this.authService.login(this.model).subscribe(() => {\n      const urlPath = this.postInstalled ? '/' : '/expand-cluster';\n      let url = _.get(this.route.snapshot.queryParams, 'returnUrl', urlPath);\n      if (!this.postInstalled && this.route.snapshot.queryParams['returnUrl'] === '/dashboard') {\n        url = '/expand-cluster';\n      }\n      if (url == '/expand-cluster') {\n        this.router.navigate([url], { queryParams: { welcome: true } });\n      } else {\n        this.router.navigate([url]);\n      }\n    });\n  }\n}\n","<head>\n  <title>Error Page</title>\n  <base target=\"_blank\">\n</head>\n<div class=\"container h-75\">\n  <div class=\"row h-100 justify-content-center align-items-center\">\n    <div class=\"blank-page\">\n      <div *ngIf=\"header && message; else elseBlock\">\n        <svg [cdsIcon]=\"icon\"\n             class=\"cds-info-color cds-icon--size-10\"></svg>\n        <div class=\"mt-4 text-center\">\n          <h3><b>{{ header }}</b></h3>\n          <h4 class=\"mt-3\"\n              *ngIf=\"header !== message\">{{ message }}</h4>\n          <h4 *ngIf=\"section\"\n              i18n>Please consult the&nbsp;<a href=\"{{ docUrl }}\">documentation</a>&nbsp;on how to configure and enable\n                   the {{ sectionInfo }} management functionality.\n          </h4>\n        </div>\n      </div>\n\n      <div class=\"mt-4\">\n        <div class=\"text-center\"\n             *ngIf=\"(buttonName && buttonRoute) || uiConfig; else dashboardButton\">\n          <button class=\"btn btn-primary ms-1\"\n                  [routerLink]=\"buttonRoute\"\n                  *ngIf=\"!uiConfig; else configureButtonTpl\"\n                  i18n>{{ buttonName }}</button>\n          <button class=\"btn btn-light ms-1\"\n                  [routerLink]=\"secondaryButtonRoute\"\n                  *ngIf=\"secondaryButtonName && secondaryButtonRoute\"\n                  i18n>{{ secondaryButtonName }}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #configureButtonTpl>\n  <button class=\"btn btn-primary\"\n          (click)=\"doConfigure()\"\n          [attr.title]=\"buttonTitle\"\n          *ngIf=\"uiConfig\"\n          i18n>{{ buttonName }}</button>\n</ng-template>\n\n\n<ng-template #elseBlock>\n  <i class=\"fa fa-exclamation-triangle mx-auto d-block text-danger\"></i>\n\n  <div class=\"mt-4 text-center\">\n    <h3 i18n><b>Page not Found</b></h3>\n\n    <h4 class=\"mt-4\"\n        i18n>Sorry, we couldn’t find what you were looking for.\n             The page you requested may have been changed or moved.</h4>\n  </div>\n</ng-template>\n\n<ng-template #dashboardButton>\n  <div class=\"mt-4 text-center\"\n       *ngIf=\"!module_name; else enableButton\">\n    <button class=\"btn btn-primary\"\n            [routerLink]=\"'/dashboard'\"\n            i18n>Go To Dashboard</button>\n  </div>\n</ng-template>\n\n<ng-template #enableButton>\n  <div class=\"mt-4 text-center\"\n       *ngIf=\"module_name && !(buttonName && buttonRoute)\">\n    <button class=\"btn btn-primary\"\n            (click)=\"enableModule()\"\n            i18n>Enable {{ module_name | upperFirst }} module</button>\n  </div>\n</ng-template>\n","import { HttpClient } from '@angular/common/http';\nimport { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\n\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { DocService } from '~/app/shared/services/doc.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\n@Component({\n  selector: 'cd-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnDestroy, OnInit {\n  header: string;\n  message: string;\n  section: string;\n  sectionInfo: string;\n  icon: string;\n  docUrl: string;\n  source: string;\n  routerSubscription: Subscription;\n  uiConfig: string;\n  uiApiPath: string;\n  buttonRoute: string;\n  buttonName: string;\n  buttonTitle: string;\n  secondaryButtonRoute: string;\n  secondaryButtonName: string;\n  secondaryButtonTitle: string;\n  module_name: string;\n  navigateTo: string;\n  component: string;\n  icons = Icons;\n\n  constructor(\n    private router: Router,\n    private docService: DocService,\n    private http: HttpClient,\n    private notificationService: NotificationService,\n    private mgrModuleService: MgrModuleService\n  ) {}\n\n  ngOnInit() {\n    this.fetchData();\n    this.routerSubscription = this.router.events\n      .pipe(filter((event: any) => event instanceof NavigationEnd))\n      .subscribe(() => {\n        this.fetchData();\n      });\n  }\n\n  doConfigure() {\n    this.http.post(`ui-api/${this.uiApiPath}/configure`, {}).subscribe({\n      next: () => {\n        this.notificationService.show(NotificationType.info, `Configuring ${this.component}`);\n      },\n      error: (error: any) => {\n        this.notificationService.show(NotificationType.error, error);\n      },\n      complete: () => {\n        setTimeout(() => {\n          this.router.navigate([this.uiApiPath]);\n          this.notificationService.show(NotificationType.success, `Configured ${this.component}`);\n        }, 3000);\n      }\n    });\n  }\n\n  @HostListener('window:beforeunload', ['$event']) unloadHandler(event: Event) {\n    event.returnValue = false;\n  }\n\n  fetchData() {\n    try {\n      this.router.onSameUrlNavigation = 'reload';\n      this.message = history.state.message;\n      this.header = history.state.header;\n      this.section = history.state.section;\n      this.sectionInfo = history.state.section_info;\n      this.icon = history.state.icon;\n      this.source = history.state.source;\n      this.uiConfig = history.state.uiConfig;\n      this.uiApiPath = history.state.uiApiPath;\n      this.buttonRoute = history.state.button_route;\n      this.buttonName = history.state.button_name;\n      this.buttonTitle = history.state.button_title;\n      this.secondaryButtonRoute = history.state.secondary_button_route;\n      this.secondaryButtonName = history.state.secondary_button_name;\n      this.secondaryButtonTitle = history.state.secondary_button_title;\n      this.module_name = history.state.module_name;\n      this.navigateTo = history.state.navigate_to;\n      this.component = history.state.component;\n      this.docUrl = this.docService.urlGenerator(this.section);\n    } catch (error) {\n      this.router.navigate(['/error']);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.routerSubscription) {\n      this.routerSubscription.unsubscribe();\n    }\n  }\n\n  enableModule(): void {\n    this.mgrModuleService.updateModuleState(this.module_name, false, null, this.navigateTo);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-blank-layout',\n  templateUrl: './blank-layout.component.html',\n  styleUrls: ['./blank-layout.component.scss']\n})\nexport class BlankLayoutComponent {}\n","<router-outlet></router-outlet>\n","// When adding a new supported language make sure to add a test for it in:\n// language-selector.component.spec.ts\nexport enum SupportedLanguages {\n  'cs' = 'Čeština',\n  'de' = 'Deutsch',\n  'en-US' = 'English',\n  'es' = 'Español',\n  'fr' = 'Français',\n  'id' = 'Bahasa Indonesia',\n  'it' = 'Italiano',\n  'ja' = '日本語',\n  'ko' = '한국어',\n  'pl' = 'Polski',\n  'pt' = 'Português (brasileiro)',\n  'zh-Hans' = '中文 (简体)',\n  'zh-Hant' = '中文 (繁體）'\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\n\nimport { environment } from '~/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n  constructor(private http: HttpClient, @Inject(LOCALE_ID) protected localeId: string) {}\n\n  getLocale(): string {\n    return this.localeId || environment.default_lang;\n  }\n\n  setLocale(lang: string) {\n    document.cookie = `cd-lang=${lang}`;\n  }\n\n  getLanguages() {\n    return this.http.get<string[]>('ui-api/langs');\n  }\n}\n","<cds-header-menu [title]=\"allLanguages[selectedLanguage]\">\n  <ng-container *ngFor=\"let lang of supportedLanguages | keyvalue\">\n    <cds-header-item (click)=\"changeLanguage(lang.key)\">{{ lang.value }}</cds-header-item>\n  </ng-container>\n</cds-header-menu>\n\n","import { Component, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { LanguageService } from '~/app/shared/services/language.service';\nimport { SupportedLanguages } from './supported-languages.enum';\n\n@Component({\n  selector: 'cd-language-selector',\n  templateUrl: './language-selector.component.html',\n  styleUrls: ['./language-selector.component.scss']\n})\nexport class LanguageSelectorComponent implements OnInit {\n  allLanguages = SupportedLanguages;\n  supportedLanguages: Record<string, any> = {};\n  selectedLanguage: string;\n\n  constructor(private languageService: LanguageService) {}\n\n  ngOnInit() {\n    this.selectedLanguage = this.languageService.getLocale();\n\n    this.languageService.getLanguages().subscribe((langs) => {\n      this.supportedLanguages = _.pick(SupportedLanguages, langs) as Object;\n    });\n  }\n\n  /**\n   * Jest is being more restricted regarding spying on the reload method.\n   * This will allow us to spyOn this method instead.\n   */\n  reloadWindow() {\n    window.location.reload();\n  }\n\n  changeLanguage(lang: string) {\n    this.languageService.setLocale(lang);\n    this.reloadWindow();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomLoginBannerService {\n  baseUiURL = 'ui-api/login/custom_banner';\n\n  constructor(private http: HttpClient) {}\n\n  getBannerText() {\n    return this.http.get<string>(this.baseUiURL);\n  }\n}\n","<p class=\"login-text\"\n   *ngIf=\"bannerText$ | async as bannerText\">{{ bannerText }}</p>\n","import { Component, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport { CustomLoginBannerService } from '~/app/shared/api/custom-login-banner.service';\n\n@Component({\n  selector: 'cd-custom-login-banner',\n  templateUrl: './custom-login-banner.component.html',\n  styleUrls: ['./custom-login-banner.component.scss']\n})\nexport class CustomLoginBannerComponent implements OnInit {\n  bannerText$: Observable<string>;\n  constructor(private customLoginBannerService: CustomLoginBannerService) {}\n\n  ngOnInit(): void {\n    this.bannerText$ = this.customLoginBannerService.getBannerText();\n  }\n}\n","<main class=\"login full-height\">\n  <header>\n    <nav class=\"navbar p-4\">\n      <a class=\"navbar-brand\"></a>\n      <div class=\"form-inline\">\n        <cd-language-selector></cd-language-selector>\n      </div>\n    </nav>\n  </header>\n  <section>\n    <div class=\"container\">\n      <div class=\"row full-height\">\n        <div class=\"col-sm-12 col-md-6 d-sm-block login-form\">\n          <router-outlet></router-outlet>\n        </div>\n        <div class=\"col-sm-12 col-md-6 d-sm-block branding-info\">\n          <img src=\"assets/Ceph_Ceph_Logo_with_text_white.svg\"\n               alt=\"Ceph\"\n               class=\"img-fluid pb-3\">\n          <ul class=\"list-inline\">\n            <li class=\"list-inline-item p-3\"\n                *ngFor=\"let docItem of docItems\">\n              <cd-doc section=\"{{ docItem.section }}\"\n                      docText=\"{{ docItem.text }}\"\n                      noSubscribe=\"true\"\n                      i18n-docText></cd-doc>\n            </li>\n          </ul>\n          <cd-custom-login-banner></cd-custom-login-banner>\n        </div>\n      </div>\n    </div>\n  </section>\n</main>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-login-layout',\n  templateUrl: './login-layout.component.html',\n  styleUrls: ['./login-layout.component.scss']\n})\nexport class LoginLayoutComponent {\n  docItems: any[] = [\n    { section: 'help', text: $localize`Help` },\n    { section: 'security', text: $localize`Security` },\n    { section: 'trademarks', text: $localize`Trademarks` }\n  ];\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { CssHelper } from '~/app/shared/classes/css-helper';\nimport { HealthColor } from '~/app/shared/enum/health-color.enum';\nimport { SummaryService } from './summary.service';\n\n@Injectable()\nexport class FaviconService implements OnDestroy {\n  sub: Subscription;\n  oldStatus: string;\n  url: string;\n\n  constructor(\n    @Inject(DOCUMENT) private document: HTMLDocument,\n    private summaryService: SummaryService,\n    private cssHelper: CssHelper\n  ) {}\n\n  init() {\n    this.url = this.document.getElementById('cdFavicon')?.getAttribute('href');\n\n    this.sub = this.summaryService.subscribe((summary) => {\n      this.changeIcon(summary.health_status);\n    });\n  }\n\n  changeIcon(status?: string) {\n    if (status === this.oldStatus) {\n      return;\n    }\n\n    this.oldStatus = status;\n\n    const favicon = this.document.getElementById('cdFavicon');\n    const faviconSize = 16;\n    const radius = faviconSize / 4;\n\n    const canvas = this.document.createElement('canvas');\n    canvas.width = faviconSize;\n    canvas.height = faviconSize;\n\n    const context = canvas.getContext('2d');\n    const img = this.document.createElement('img');\n    img.src = this.url;\n\n    img.onload = () => {\n      // Draw Original Favicon as Background\n      context.drawImage(img, 0, 0, faviconSize, faviconSize);\n\n      if (Object.keys(HealthColor).includes(status as HealthColor)) {\n        // Cut notification circle area\n        context.save();\n        context.globalCompositeOperation = 'destination-out';\n        context.beginPath();\n        context.arc(canvas.width - radius, radius, radius + 2, 0, 2 * Math.PI);\n        context.fill();\n        context.restore();\n\n        // Draw Notification Circle\n        context.beginPath();\n        context.arc(canvas.width - radius, radius, radius, 0, 2 * Math.PI);\n\n        context.fillStyle = this.cssHelper.propertyValue(HealthColor[status]);\n        context.fill();\n      }\n\n      // Replace favicon\n      favicon.setAttribute('href', canvas.toDataURL('image/png'));\n    };\n  }\n\n  ngOnDestroy() {\n    this.changeIcon();\n    this.sub?.unsubscribe();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nexport interface Motd {\n  message: string;\n  md5: string;\n  severity: 'info' | 'warning' | 'danger';\n  // The expiration date in ISO 8601. Does not expire if empty.\n  expires: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MotdService {\n  private url = 'ui-api/motd';\n\n  constructor(private http: HttpClient) {}\n\n  get(): Observable<Motd | null> {\n    return this.http.get<Motd | null>(this.url);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport * as _ from 'lodash';\nimport { BehaviorSubject, EMPTY, Observable, of, Subscription } from 'rxjs';\nimport { catchError, delay, mergeMap, repeat, tap } from 'rxjs/operators';\n\nimport { Motd, MotdService } from '~/app/shared/api/motd.service';\nimport { whenPageVisible } from '../rxjs/operators/page-visibility.operator';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MotdNotificationService implements OnDestroy {\n  public motd$: Observable<Motd | null>;\n  public motdSource = new BehaviorSubject<Motd | null>(null);\n\n  private subscription: Subscription;\n  private localStorageKey = 'dashboard_motd_hidden';\n\n  constructor(private motdService: MotdService) {\n    this.motd$ = this.motdSource.asObservable();\n    // Check every 60 seconds for the latest MOTD configuration.\n    this.subscription = of(true)\n      .pipe(\n        mergeMap(() => this.motdService.get()),\n        catchError((error) => {\n          // Do not show an error notification.\n          if (_.isFunction(error.preventDefault)) {\n            error.preventDefault();\n          }\n          return EMPTY;\n        }),\n        tap((motd: Motd | null) => this.processResponse(motd)),\n        delay(60000),\n        repeat(),\n        whenPageVisible()\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  hide() {\n    // Store the severity and MD5 of the current MOTD in local or\n    // session storage to be able to show it again if the severity\n    // or message of the latest MOTD has changed.\n    const motd: Motd = this.motdSource.getValue();\n    if (motd) {\n      const value = `${motd.severity}:${motd.md5}`;\n      switch (motd.severity) {\n        case 'info':\n          localStorage.setItem(this.localStorageKey, value);\n          sessionStorage.removeItem(this.localStorageKey);\n          break;\n        case 'warning':\n          sessionStorage.setItem(this.localStorageKey, value);\n          localStorage.removeItem(this.localStorageKey);\n          break;\n      }\n    }\n    this.motdSource.next(null);\n  }\n\n  processResponse(motd: Motd | null) {\n    const value: string | null =\n      sessionStorage.getItem(this.localStorageKey) || localStorage.getItem(this.localStorageKey);\n    let visible: boolean = _.isNull(value);\n    // Force a hidden MOTD to be shown again if the severity or message\n    // has been changed.\n    if (!visible && motd) {\n      const [severity, md5] = value.split(':');\n      if (severity !== motd.severity || md5 !== motd.md5) {\n        visible = true;\n        sessionStorage.removeItem(this.localStorageKey);\n        localStorage.removeItem(this.localStorageKey);\n      }\n    }\n    if (visible) {\n      this.motdSource.next(motd);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookiesService {\n  constructor(private cookieService: CookieService) {}\n\n  setToken(name: string, token: string) {\n    this.cookieService.set(name, token, null, null, null, true, 'Strict');\n  }\n\n  getToken(name: string): string {\n    return this.cookieService.get(name);\n  }\n\n  deleteToken(name: string) {\n    this.cookieService.delete(name);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { PrometheusService } from '../api/prometheus.service';\nimport { CdNotificationConfig } from '../models/cd-notification';\nimport { AlertmanagerNotification } from '../models/prometheus-alerts';\nimport { PrometheusAlertFormatter } from './prometheus-alert-formatter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrometheusNotificationService {\n  private notifications: AlertmanagerNotification[];\n  private backendFailure = false;\n\n  constructor(\n    private alertFormatter: PrometheusAlertFormatter,\n    private prometheusService: PrometheusService\n  ) {\n    this.notifications = [];\n  }\n\n  refresh() {\n    if (this.backendFailure) {\n      return;\n    }\n    this.prometheusService.getNotifications(_.last(this.notifications)).subscribe(\n      (notifications) => this.handleNotifications(notifications),\n      () => (this.backendFailure = true)\n    );\n  }\n\n  private handleNotifications(notifications: AlertmanagerNotification[]) {\n    if (notifications.length === 0) {\n      return;\n    }\n    if (this.notifications.length > 0) {\n      this.alertFormatter.sendNotifications(\n        _.flatten(notifications.map((notification) => this.formatNotification(notification)))\n      );\n    }\n    this.notifications = this.notifications.concat(notifications);\n  }\n\n  private formatNotification(notification: AlertmanagerNotification): CdNotificationConfig[] {\n    return this.alertFormatter\n      .convertToCustomAlerts(notification.alerts)\n      .map((alert) => this.alertFormatter.convertAlertToNotification(alert));\n  }\n}\n","<ng-template #tasksTpl>\n  <!-- Executing -->\n  <div *ngFor=\"let executingTask of executingTasks; trackBy:trackByFn\">\n    <div class=\"card tc_task border-0\">\n      <div class=\"row no-gutters\">\n        <div class=\"col-md-2 text-center\">\n          <span class=\"text-info\">\n            <svg [cdsIcon]=\"icons.circle\"\n                 [size]=\"icons.size16\"\n                 ></svg>\n          </span>\n        </div>\n        <div class=\"col-md-9\">\n          <div class=\"card-body p-1\">\n            <h6 class=\"card-title bold\">{{ executingTask.description }}</h6>\n            <div class=\"mb-1\">\n              <ngb-progressbar type=\"info\"\n                               [value]=\"executingTask?.progress\"\n                               [striped]=\"true\"\n                               [animated]=\"true\"></ngb-progressbar>\n            </div>\n            <p class=\"card-text text-muted\">\n              <small class=\"date float-start\">\n                {{ executingTask.begin_time | cdDate }}\n              </small>\n\n              <span class=\"float-end\">\n                {{ executingTask.progress || 0 }} %\n              </span>\n            </p>\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <hr>\n  </div>\n</ng-template>\n\n<ng-template #notificationsTpl>\n  <ng-container *ngIf=\"notifications.length > 0\">\n    <button type=\"button\"\n            class=\"btn btn-light btn-block\"\n            (click)=\"removeAll(); $event.stopPropagation()\">\n      <svg [cdsIcon]=\"icons.trash\"\n           [size]=\"icons.size16\"\n           ></svg>\n      &nbsp;\n      <ng-container i18n>Clear notifications</ng-container>\n    </button>\n\n    <hr>\n\n    <div *ngFor=\"let notification of notifications; let i = index\"\n         [ngClass]=\"notification.borderClass\">\n      <div class=\"card tc_notification border-0\">\n        <div class=\"row no-gutters\">\n          <div class=\"col-md-2 text-center\">\n            <span [ngClass]=\"[icons.stack, icons.large,  notification.textClass]\">\n              <i [ngClass]=\"[icons.circle, icons.stack2x]\"></i>\n              <i [ngClass]=\"[icons.stack1x, icons.inverse, notification.iconClass]\"></i>\n            </span>\n          </div>\n          <div class=\"col-md-10\">\n            <div class=\"card-body p-1\">\n              <button class=\"btn btn-link float-end mt-0 pt-0\"\n                      title=\"Remove notification\"\n                      i18n-title\n                      (click)=\"remove(i); $event.stopPropagation()\">\n                <svg [cdsIcon]=\"icons.trash\"\n                     [size]=\"icons.size16\"\n                     ></svg>\n              </button>\n              <button *ngIf=\"notification.application === 'Prometheus' && notification.type !== 2 && !notification.alertSilenced\"\n                      class=\"btn btn-link float-end text-muted mute m-0 p-0\"\n                      title=\"Silence Alert\"\n                      i18n-title\n                      (click)=\"silence(notification)\">\n                <svg [cdsIcon]=\"icons.mute\"\n                     [size]=\"icons.size16\"\n                     ></svg>\n              </button>\n              <button *ngIf=\"notification.application === 'Prometheus' && notification.type !== 2 && notification.alertSilenced\"\n                      class=\"btn btn-link float-end text-muted mute m-0 p-0\"\n                      title=\"Expire Silence\"\n                      i18n-title\n                      (click)=\"expire(notification)\">\n                <svg [cdsIcon]=\"icons.bell\"\n                     [size]=\"icons.size16\"\n                     ></svg>\n              </button>\n\n\n              <h6 class=\"card-title bold\">{{ notification.title }}</h6>\n              <p class=\"card-text\"\n                 [innerHtml]=\"notification.message\"></p>\n              <p class=\"card-text text-muted\">\n                <ng-container *ngIf=\"notification.duration\">\n                  <small>\n                    <ng-container i18n>Duration:</ng-container> {{ notification.duration | duration }}\n                  </small>\n                  <br>\n                </ng-container>\n                <small class=\"date\"\n                       [title]=\"notification.timestamp | cdDate\">{{ notification.timestamp | relativeDate }}</small>\n                <i class=\"float-end custom-icon\"\n                   [ngClass]=\"[notification.applicationClass]\"\n                   [title]=\"notification.application\"></i>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <hr>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #emptyTpl>\n  <div *ngIf=\"notifications.length === 0 && executingTasks.length === 0\">\n    <div class=\"message text-center\"\n         i18n>There are no notifications.</div>\n  </div>\n</ng-template>\n\n<div class=\"card\"\n     (clickOutside)=\"closeSidebar()\"\n     [clickOutsideEnabled]=\"isSidebarOpened\">\n  <div class=\"card-header\">\n    <ng-container i18n>Tasks and Notifications</ng-container>\n\n    <button class=\"btn-close float-end\"\n            tabindex=\"-1\"\n            type=\"button\"\n            title=\"close\"\n            (click)=\"closeSidebar()\">\n    </button>\n  </div>\n\n  <ngx-simplebar [options]=\"simplebar\">\n    <div class=\"card-body\">\n      <ng-container *ngTemplateOutlet=\"tasksTpl\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"notificationsTpl\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"emptyTpl\"></ng-container>\n    </div>\n  </ngx-simplebar>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  NgZone,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\n\nimport { Mutex } from 'async-mutex';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { Subscription } from 'rxjs';\n\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { SucceededActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport {\n  AlertmanagerSilence,\n  AlertmanagerSilenceMatcher\n} from '~/app/shared/models/alertmanager-silence';\nimport { CdNotification } from '~/app/shared/models/cd-notification';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\nimport { PrometheusNotificationService } from '~/app/shared/services/prometheus-notification.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { TaskMessageService } from '~/app/shared/services/task-message.service';\n\n@Component({\n  selector: 'cd-notifications-sidebar',\n  templateUrl: './notifications-sidebar.component.html',\n  styleUrls: ['./notifications-sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotificationsSidebarComponent implements OnInit, OnDestroy {\n  @HostBinding('class.active') isSidebarOpened = false;\n\n  notifications: CdNotification[];\n  private interval: number;\n  private timeout: number;\n\n  executingTasks: ExecutingTask[] = [];\n\n  private subs = new Subscription();\n\n  icons = Icons;\n\n  // Tasks\n  last_task = '';\n  mutex = new Mutex();\n\n  simplebar = {\n    autoHide: false\n  };\n\n  constructor(\n    public notificationService: NotificationService,\n    private summaryService: SummaryService,\n    private taskMessageService: TaskMessageService,\n    private prometheusNotificationService: PrometheusNotificationService,\n    private succeededLabels: SucceededActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private prometheusAlertService: PrometheusAlertService,\n    private prometheusService: PrometheusService,\n    private ngZone: NgZone,\n    private cdRef: ChangeDetectorRef\n  ) {\n    this.notifications = [];\n  }\n\n  ngOnDestroy() {\n    window.clearInterval(this.interval);\n    window.clearTimeout(this.timeout);\n    this.subs.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.last_task = window.localStorage.getItem('last_task');\n\n    const permissions = this.authStorageService.getPermissions();\n    if (permissions.prometheus.read && permissions.configOpt.read) {\n      this.triggerPrometheusAlerts();\n      this.ngZone.runOutsideAngular(() => {\n        this.interval = window.setInterval(() => {\n          this.ngZone.run(() => {\n            this.triggerPrometheusAlerts();\n          });\n        }, 5000);\n      });\n    }\n\n    this.subs.add(\n      this.notificationService.data$.subscribe((notifications: CdNotification[]) => {\n        this.notifications = _.orderBy(notifications, ['timestamp'], ['desc']);\n        this.cdRef.detectChanges();\n      })\n    );\n\n    this.subs.add(\n      this.notificationService.sidebarSubject.subscribe((forceClose) => {\n        if (forceClose) {\n          this.isSidebarOpened = false;\n        } else {\n          this.isSidebarOpened = !this.isSidebarOpened;\n        }\n\n        window.clearTimeout(this.timeout);\n        this.timeout = window.setTimeout(() => {\n          this.cdRef.detectChanges();\n        }, 0);\n      })\n    );\n\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        this._handleTasks(summary.executing_tasks);\n\n        this.mutex.acquire().then((release) => {\n          _.filter(\n            summary.finished_tasks,\n            (task: FinishedTask) => !this.last_task || moment(task.end_time).isAfter(this.last_task)\n          ).forEach((task) => {\n            const config = this.notificationService.finishedTaskToNotification(task, task.success);\n            const notification = new CdNotification(config);\n            notification.timestamp = task.end_time;\n            notification.duration = task.duration;\n\n            if (!this.last_task || moment(task.end_time).isAfter(this.last_task)) {\n              this.last_task = task.end_time;\n              window.localStorage.setItem('last_task', this.last_task);\n            }\n\n            this.notificationService.save(notification);\n          });\n\n          this.cdRef.detectChanges();\n\n          release();\n        });\n      })\n    );\n  }\n\n  _handleTasks(executingTasks: ExecutingTask[]) {\n    for (const executingTask of executingTasks) {\n      executingTask.description = this.taskMessageService.getRunningTitle(executingTask);\n    }\n    this.executingTasks = executingTasks;\n  }\n\n  private triggerPrometheusAlerts() {\n    this.prometheusAlertService.refresh(true);\n    this.prometheusNotificationService.refresh();\n  }\n\n  removeAll() {\n    this.notificationService.removeAll();\n  }\n\n  remove(index: number) {\n    this.notificationService.remove(index);\n  }\n\n  closeSidebar() {\n    this.isSidebarOpened = false;\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n\n  silence(data: CdNotification) {\n    const datetimeFormat = 'YYYY-MM-DD HH:mm';\n    const resource = $localize`silence`;\n    const matcher: AlertmanagerSilenceMatcher = {\n      name: 'alertname',\n      value: data['title'].split(' ')[0],\n      isRegex: false\n    };\n    const silencePayload: AlertmanagerSilence = {\n      matchers: [matcher],\n      startsAt: moment(moment().format(datetimeFormat)).toISOString(),\n      endsAt: moment(moment().add(2, 'hours').format(datetimeFormat)).toISOString(),\n      createdBy: this.authStorageService.getUsername(),\n      comment: 'Silence created from the alert notification'\n    };\n    let msg = '';\n\n    data.alertSilenced = true;\n    msg = msg.concat(` ${matcher.name} - ${matcher.value},`);\n    const title = `${this.succeededLabels.CREATED} ${resource} for ${msg.slice(0, -1)}`;\n    this.prometheusService.setSilence(silencePayload).subscribe((resp) => {\n      if (data) {\n        data.silenceId = resp.body['silenceId'];\n      }\n      this.notificationService.show(\n        NotificationType.success,\n        title,\n        undefined,\n        undefined,\n        'Prometheus'\n      );\n    });\n  }\n\n  expire(data: CdNotification) {\n    data.alertSilenced = false;\n    this.prometheusService.expireSilence(data.silenceId).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          `${this.succeededLabels.EXPIRED} ${data.silenceId}`,\n          undefined,\n          undefined,\n          'Prometheus'\n        );\n      },\n      (resp) => {\n        resp['application'] = 'Prometheus';\n      }\n    );\n  }\n}\n","<a i18n-title\n   title=\"Tasks and Notifications\"\n   [ngClass]=\"{ 'running': hasRunningTasks }\"\n   >\n  <svg cdsIcon=\"notification\"\n       size=\"20\"\n       title=\"notification\"></svg>\n  <span class=\"dot\"\n        *ngIf=\"hasNotifications\">\n  </span>\n  <span class=\"d-md-none\"\n        i18n>Tasks and Notifications</span>\n</a>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdNotification } from '~/app/shared/models/cd-notification';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\n\n@Component({\n  selector: 'cd-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss']\n})\nexport class NotificationsComponent implements OnInit, OnDestroy {\n  icons = Icons;\n  hasRunningTasks = false;\n  hasNotifications = false;\n  private subs = new Subscription();\n\n  constructor(\n    public notificationService: NotificationService,\n    private summaryService: SummaryService\n  ) {}\n\n  ngOnInit() {\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        this.hasRunningTasks = summary.executing_tasks.length > 0;\n      })\n    );\n\n    this.subs.add(\n      this.notificationService.data$.subscribe((notifications: CdNotification[]) => {\n        this.hasNotifications = notifications.length > 0;\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport * as _ from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedbackService {\n  constructor(private http: HttpClient) {}\n  baseUIURL = 'api/feedback';\n\n  isKeyExist() {\n    return this.http.get('ui-api/feedback/api_key/exist');\n  }\n\n  createIssue(\n    project: string,\n    tracker: string,\n    subject: string,\n    description: string,\n    apiKey: string\n  ) {\n    return this.http.post(\n      'api/feedback',\n      {\n        project: project,\n        tracker: tracker,\n        subject: subject,\n        description: description,\n        api_key: apiKey\n      },\n      {\n        headers: { Accept: 'application/vnd.ceph.api.v0.1+json' }\n      }\n    );\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <div class=\"modal-title\"\n       i18n>Report an issue</div>\n\n  <div class=\"modal-content\">\n    <form name=\"feedbackForm\"\n          [formGroup]=\"feedbackForm\"\n          #formDir=\"ngForm\">\n      <div class=\"modal-body\">\n        <cd-alert-panel *ngIf=\"!isFeedbackEnabled\"\n                        type=\"error\"\n                        i18n>Feedback module is not enabled. Please enable it from <a (click)=\"redirect()\">Cluster-> Manager Modules.</a>\n        </cd-alert-panel>\n        <!-- api_key -->\n        <div class=\"form-group row mt-3\"\n             *ngIf=\"!isAPIKeySet\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"api_key\"\n                 i18n>Ceph Tracker API Key</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"api_key\"\n                   type=\"password\"\n                   formControlName=\"api_key\"\n                   class=\"form-control\"\n                   placeholder=\"Add Ceph tracker API key\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"feedbackForm.showError('api_key', formDir, 'required')\"\n                  i18n>Ceph Tracker API key is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"feedbackForm.showError('api_key', formDir, 'invalidApiKey')\"\n                  i18n>Ceph Tracker API key is invalid.</span>\n          </div>\n        </div>\n\n        <!-- project -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"project\"\n                 i18n>Project name</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-control\"\n                    id=\"project\"\n                    formControlName=\"project\">\n              <option ngValue=\"\"\n                      i18n>-- Select a project --</option>\n              <option *ngFor=\"let projectName of project\"\n                      [value]=\"projectName\">{{ projectName }}</option>\n            </select>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"feedbackForm.showError('project', formDir, 'required')\"\n                  i18n>Project name is required.</span>\n          </div>\n        </div>\n\n        <!-- tracker -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"tracker\"\n                 i18n>Tracker</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-control\"\n                    id=\"tracker\"\n                    formControlName=\"tracker\">\n              <option ngValue=\"\"\n                      i18n>-- Select a tracker --</option>\n              <option *ngFor=\"let trackerName of tracker\"\n                      [value]=\"trackerName\">{{ trackerName }}</option>\n            </select>\n            <span  class=\"invalid-feedback\"\n                   *ngIf=\"feedbackForm.showError('tracker', formDir, 'required')\"\n                   i18n>Tracker name is required.</span>\n          </div>\n        </div>\n\n        <!-- subject -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"subject\"\n                 i18n>Subject</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"subject\"\n                   type=\"text\"\n                   formControlName=\"subject\"\n                   class=\"form-control\"\n                   placeholder=\"Add issue title\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"feedbackForm.showError('subject', formDir, 'required')\"\n                  i18n>Subject is required.</span>\n          </div>\n        </div>\n\n        <!-- description -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"description\"\n                 i18n>Description</label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"description\"\n                      type=\"text\"\n                      formControlName=\"description\"\n                      class=\"form-control\"\n                      placeholder=\"Add issue description\">\n            </textarea>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"feedbackForm.showError('description', formDir, 'required')\"\n                  i18n>Description is required.</span>\n          </div>\n        </div>\n\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [form]=\"feedbackForm\"\n                              [submitText]=\"actionLabels.SUBMIT\"\n                              wrappingClass=\"text-right\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </div>\n</cd-modal>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { FeedbackService } from '~/app/shared/api/feedback.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-feedback',\n  templateUrl: './feedback.component.html',\n  styleUrls: ['./feedback.component.scss']\n})\nexport class FeedbackComponent implements OnInit, OnDestroy {\n  title = 'Feedback';\n  project: any = [\n    'dashboard',\n    'block',\n    'objects',\n    'file_system',\n    'ceph_manager',\n    'orchestrator',\n    'ceph_volume',\n    'core_ceph'\n  ];\n  tracker: string[] = ['bug', 'feature'];\n  api_key: string;\n  keySub: Subscription;\n\n  feedbackForm: CdFormGroup;\n  isAPIKeySet = false;\n  isFeedbackEnabled = true;\n\n  constructor(\n    private feedbackService: FeedbackService,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public secondaryModal: NgbModal,\n    private notificationService: NotificationService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.createForm();\n    this.keySub = this.feedbackService.isKeyExist().subscribe({\n      next: (data: boolean) => {\n        this.isAPIKeySet = data;\n        if (this.isAPIKeySet) {\n          this.feedbackForm.get('api_key').clearValidators();\n        }\n      },\n      error: () => {\n        this.isFeedbackEnabled = false;\n        this.feedbackForm.disable();\n      }\n    });\n  }\n\n  private createForm() {\n    this.feedbackForm = new CdFormGroup({\n      project: new UntypedFormControl('', Validators.required),\n      tracker: new UntypedFormControl('', Validators.required),\n      subject: new UntypedFormControl('', Validators.required),\n      description: new UntypedFormControl('', Validators.required),\n      api_key: new UntypedFormControl('', Validators.required)\n    });\n  }\n\n  ngOnDestroy() {\n    this.keySub.unsubscribe();\n  }\n\n  onSubmit() {\n    this.feedbackService\n      .createIssue(\n        this.feedbackForm.controls['project'].value,\n        this.feedbackForm.controls['tracker'].value,\n        this.feedbackForm.controls['subject'].value,\n        this.feedbackForm.controls['description'].value,\n        this.feedbackForm.controls['api_key'].value\n      )\n      .subscribe({\n        next: (result) => {\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Issue successfully created on Ceph Issue tracker`,\n            `Go to the tracker: <a href=\"https://tracker.ceph.com/issues/${result['message']['issue']['id']}\" target=\"_blank\"> ${result['message']['issue']['id']} </a>`\n          );\n        },\n        error: () => {\n          this.feedbackForm.get('api_key').setErrors({ invalidApiKey: true });\n          this.feedbackForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.activeModal.close();\n        }\n      });\n  }\n\n  redirect() {\n    this.activeModal.close();\n    this.router.navigate(['/mgr-modules']);\n  }\n}\n","export enum LocalStorage {\n  DASHBOARD_USRENAME = 'dashboard_username'\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { detect } from 'detect-browser';\nimport { Subscription } from 'rxjs';\n\nimport { UserService } from '~/app/shared/api/user.service';\nimport { AppConstants, USER, VERSION_PREFIX } from '~/app/shared/constants/app.constants';\nimport { LocalStorage } from '~/app/shared/enum/local-storage-enum';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\n\n@Component({\n  selector: 'cd-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit, OnDestroy {\n  modalVariables: any;\n  versionNumber: string;\n  versionHash: string;\n  versionName: string;\n  subs: Subscription;\n  userPermission: Permission;\n  projectConstants: typeof AppConstants;\n  hostAddr: string;\n  copyright: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private summaryService: SummaryService,\n    private userService: UserService,\n    private authStorageService: AuthStorageService\n  ) {\n    this.userPermission = this.authStorageService.getPermissions().user;\n  }\n\n  ngOnInit() {\n    this.projectConstants = AppConstants;\n    this.hostAddr = window.location.hostname;\n    this.modalVariables = this.setVariables();\n    this.subs = this.summaryService.subscribe((summary) => {\n      const version = summary.version.replace(`${VERSION_PREFIX} `, '').split(' ');\n      this.hostAddr = summary.mgr_host.replace(/(^\\w+:|^)\\/\\//, '').replace(/\\/$/, '');\n      this.versionNumber = version[0];\n      this.versionHash = version[1];\n      this.versionName = version.slice(2, version.length).join(' ');\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  setVariables() {\n    const NOT_AVAILABLE = $localize`Not available`;\n    const project = {} as any;\n    project.user = localStorage.getItem(LocalStorage.DASHBOARD_USRENAME);\n    project.role = USER;\n    if (this.userPermission.read) {\n      this.userService.get(project.user).subscribe((data: any) => {\n        project.role = data.roles;\n      });\n    }\n    const browser = detect();\n    project.browserName = browser && browser.name ? browser.name : NOT_AVAILABLE;\n    project.browserVersion = browser && browser.version ? browser.version : NOT_AVAILABLE;\n    project.browserOS = browser && browser.os ? browser.os : NOT_AVAILABLE;\n    return project;\n  }\n}\n","<div class=\"about-container\">\n  <div class=\"modal-header\">\n    <button type=\"button\"\n            class=\"btn-close float-end\"\n            aria-label=\"Close\"\n            i18n-aria-label\n            (click)=\"activeModal.close()\">\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <img src=\"assets/Ceph_Ceph_Logo_with_text_red_white.svg\"\n         class=\"ceph-logo\"\n         alt=\"{{ projectConstants.organization }}\">\n    <h3>\n      <strong>{{ projectConstants.projectName }}</strong>\n    </h3>\n    <div class=\"product-versions\">\n      <strong i18n>Version</strong>\n      <br>\n      {{ versionNumber }}\n      {{ versionHash }}\n      <br>\n      {{ versionName }}\n    </div>\n    <br>\n    <dl>\n      <dt i18n>Ceph Manager</dt>\n      <dd>{{ hostAddr }}</dd>\n      <dt i18n>User</dt>\n      <dd>{{ modalVariables.user }}</dd>\n      <dt i18n>User Role</dt>\n      <dd>{{ modalVariables.role }}</dd>\n      <dt i18n>Browser</dt>\n      <dd>{{ modalVariables.browserName }}</dd>\n      <dt i18n>Browser Version</dt>\n      <dd>{{ modalVariables.browserVersion }}</dd>\n      <dt i18n>Browser OS</dt>\n      <dd>{{ modalVariables.browserOS }}</dd>\n    </dl>\n  </div>\n  <div class=\"modal-footer\">\n    <div class=\"text-left\">\n      {{ projectConstants.copyright }}\n      {{ projectConstants.license }}\n    </div>\n  </div>\n</div>\n","<cds-overflow-menu [customTrigger]=\"customTrigger\"\n                   [flip]=\"true\">\n  <li>\n    <a [ngClass]=\"{'cds--overflow-menu-options__btn': true, 'disabled': !docsUrl}\"\n       href=\"{{ docsUrl }}\"\n       target=\"_blank\"\n       i18n>Documentation\n      <svg cdsIcon=\"launch\"\n           class=\"ms-2\"\n           size=\"16\"></svg>\n    </a>\n  </li>\n  <li>\n    <a routerLink=\"/api-docs\"\n       target=\"_blank\"\n       class=\"cds--overflow-menu-options__btn\"\n       i18n>API\n      <svg cdsIcon=\"launch\"\n           class=\"ms-2\"\n           size=\"16\"></svg>\n    </a>\n  </li>\n  <cds-overflow-menu-option (click)=\"openAboutModal()\"\n                            i18n>About</cds-overflow-menu-option>\n  <cds-overflow-menu-option (click)=\"openFeedbackModal()\"\n                            i18n>Report an issue...</cds-overflow-menu-option>\n</cds-overflow-menu>\n\n<ng-template #customTrigger>\n  <svg cdsIcon=\"help\"\n       size=\"20\"\n       i18n-title\n       title=\"Help\"\n       role=\"button\"></svg>\n  <span i18n\n        class=\"d-md-none\">Help</span>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { FeedbackComponent } from '~/app/ceph/shared/feedback/feedback.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { DocService } from '~/app/shared/services/doc.service';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { AboutComponent } from '../about/about.component';\n\n@Component({\n  selector: 'cd-dashboard-help',\n  templateUrl: './dashboard-help.component.html',\n  styleUrls: ['./dashboard-help.component.scss']\n})\nexport class DashboardHelpComponent implements OnInit {\n  docsUrl: string;\n  modalRef: NgbModalRef;\n  icons = Icons;\n  bsModalRef: NgbModalRef;\n\n  constructor(private modalService: ModalService, private docService: DocService) {}\n\n  ngOnInit() {\n    this.docService.subscribeOnce('dashboard', (url: string) => {\n      this.docsUrl = url;\n    });\n  }\n\n  openAboutModal() {\n    this.modalRef = this.modalService.show(AboutComponent, null, { size: 'lg' });\n  }\n\n  openFeedbackModal() {\n    this.bsModalRef = this.modalService.show(FeedbackComponent, null, { size: 'lg' });\n  }\n}\n","<cds-overflow-menu [customTrigger]=\"customTrigger\"\n                   [flip]=\"true\">\n  <li class=\"cds--overflow-menu-options__option mb-2\">\n    <button routerLink=\"/user-management\"\n            class=\"cds--overflow-menu-options__btn\"\n            i18n>User management</button>\n  </li>\n  <li class=\"cds--overflow-menu-options__option mb-2\"\n      *ngIf=\"configOptPermission.read\">\n    <button routerLink=\"/telemetry\"\n            class=\"cds--overflow-menu-options__btn\"\n            i18n>Telemetry configuration</button>\n  </li>\n</cds-overflow-menu>\n\n<ng-template #customTrigger>\n  <svg cdsIcon=\"settings\"\n       size=\"20\"\n       title=\"user\"\n       *ngIf=\"userPermission.read\"></svg>\n  <span i18n\n        class=\"d-md-none\">Dashboard Settings</span>\n</ng-template>\n","import { Component } from '@angular/core';\n\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-administration',\n  templateUrl: './administration.component.html',\n  styleUrls: ['./administration.component.scss']\n})\nexport class AdministrationComponent {\n  userPermission: Permission;\n  configOptPermission: Permission;\n\n  constructor(private authStorageService: AuthStorageService) {\n    const permissions = this.authStorageService.getPermissions();\n    this.userPermission = permissions.user;\n    this.configOptPermission = permissions.configOpt;\n  }\n}\n","<cds-overflow-menu [customTrigger]=\"customTrigger\"\n                   [flip]=\"true\">\n  <li disabled=\"true\"\n      class=\"show cds--overflow-menu-options__option cds--overflow-menu-options__option--disabled my-2\"\n      i18n>\n    <div class=\"cds--overflow-menu-options__btn\">Logged in as {{ username }}\n    </div>\n  </li>\n  <li class=\"cds--overflow-menu-options__option cds--overflow-menu--divider mb-2\">\n    <button *ngIf=\"!sso\"\n            routerLink=\"/user-profile/edit\"\n            class=\"cds--overflow-menu-options__btn\"\n            i18n>\n    <svg cdsIcon=\"locked\"\n         class=\"me-2\"\n         size=\"16\"></svg>Change password\n  </button>\n  </li>\n  <li class=\"cds--overflow-menu-options__option mb-2\">\n    <button (click)=\"logout()\"\n            data-testid=\"logout\"\n            class=\"cds--overflow-menu-options__btn\"\n            i18n><svg cdsIcon=\"logout\"\n                      class=\"me-2\"\n                      size=\"16\"></svg>Log out\n  </button>\n  </li>\n</cds-overflow-menu>\n\n<ng-template #customTrigger>\n  <svg cdsIcon=\"user--filled\"\n       size=\"20\"\n       title=\"user\"></svg>\n  <span i18n\n        class=\"d-md-none\">Logged in user</span>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\n\nimport { AuthService } from '~/app/shared/api/auth.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-identity',\n  templateUrl: './identity.component.html',\n  styleUrls: ['./identity.component.scss']\n})\nexport class IdentityComponent implements OnInit {\n  sso: boolean;\n  username: string;\n  icons = Icons;\n\n  constructor(private authStorageService: AuthStorageService, private authService: AuthService) {}\n\n  ngOnInit() {\n    this.username = this.authStorageService.getUsername();\n    this.sso = this.authStorageService.isSSO();\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}\n","<div class=\"cd-navbar-main\">\n  <!-- ************************ -->\n  <!-- NOTIFICATIONS     -->\n  <!-- ************************ -->\n  <cd-notifications-sidebar></cd-notifications-sidebar>\n  <!-- ************************ -->\n  <!-- HEADER                   -->\n  <!-- ************************ -->\n  <cds-header name=\"Ceph Dashboard\"\n              class=\"cd-navbar-top\"\n              [brand]=\"brandTemplate\">\n    <cds-hamburger [active]=\"showMenuSidebar\"\n                   data-testid=\"main-menu-toggler\"\n                   (selected)=\"showMenuSidebar = !showMenuSidebar\"></cds-hamburger>\n    <!-- ************************* -->\n    <!-- CLUSTER SWITCHER TEMPLATE -->\n    <!-- ************************* -->\n    <cds-header-navigation class=\"cluster-switcher\"\n                           *ngIf=\"clustersMap?.size > 1\">\n      <cds-header-menu [title]=\"currentClusterName\"\n                       data-testid=\"selected-cluster\">\n        <ng-container *ngFor=\"let cluster of clustersMap | keyvalue; trackBy:trackByFn \">\n          <cds-header-item (click)=\"onClusterSelection(cluster.value)\"\n                           [class.disabled]=\"cluster.value.cluster_connection_status === 1\"\n                           data-testid=\"select-a-cluster\">\n              {{ cluster.value.name }} - {{ cluster.value?.cluster_alias }} - {{ cluster.value?.user }}\n          </cds-header-item>\n        </ng-container>\n      </cds-header-menu>\n    </cds-header-navigation>\n\n    <cds-header-global>\n      <cds-header-navigation>\n        <cd-language-selector class=\"d-flex\"></cd-language-selector>\n      </cds-header-navigation>\n      <div class=\"cds--btn cds--btn--icon-only cds--header__action\"\n           (click)=\"toggleSidebar()\">\n        <cd-notifications></cd-notifications>\n      </div>\n      <div class=\"cds--btn cds--btn--icon-only cds--header__action\">\n        <cd-dashboard-help></cd-dashboard-help>\n      </div>\n      <div class=\"cds--btn cds--btn--icon-only cds--header__action\"\n           *ngIf=\"permissions.user.read\">\n        <cd-administration></cd-administration>\n      </div>\n      <div class=\"cds--btn cds--btn--icon-only cds--header__action\">\n        <cd-identity></cd-identity>\n      </div>\n    </cds-header-global>\n  </cds-header>\n  <!-- ***************************** -->\n  <!-- LOGO BRAND TEMPLATE  -->\n  <!-- ***************************** -->\n  <ng-template #brandTemplate>\n    <a class=\"cds--header__name navbar-brand ms-3\"\n       routerLink=\"/dashboard\">\n      <img src=\"assets/Ceph_Ceph_Logo_with_text_white.svg\"\n           alt=\"Ceph\" />\n    </a>\n  </ng-template>\n  <!-- **************************************** -->\n  <!-- WRAPPER AROUND SIDENAV AND MAIN CONTAINT -->\n  <!-- **************************************** -->\n  <div class=\"wrapper\">\n    <!-- Content -->\n    <nav id=\"sidebar\"\n         [ngClass]=\"{'active': !showMenuSidebar}\">\n      <ng-container *ngTemplateOutlet=\"cd_menu\"></ng-container>\n    </nav>\n    <!-- Page Content -->\n    <div id=\"content\"\n         [ngClass]=\"{'active': !showMenuSidebar, 'content-theme': true}\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <!-- ************************ -->\n  <!-- SIDENAV                  -->\n  <!-- ************************ -->\n  <ng-template #cd_menu>\n    <ng-container *ngIf=\"enabledFeature$ | async as enabledFeature\">\n      <cds-sidenav [expanded]=\"showMenuSidebar\"\n                   class=\"mt-5\"\n                   (click)=\"onMenuClick($event)\"\n                   #sidenavContainer>\n        <!-- Dashboard -->\n        <cds-sidenav-item route=\"/dashboard\"\n                          [useRouter]=\"true\"\n                          title=\"Dashboard\"\n                          i18n-title\n                          class=\"nav-item tc_menuitem_dashboard\">\n          <svg cdsIcon=\"template\"\n               icon\n               size=\"20\"></svg>\n          <span i18n>\n            Dashboard</span>\n        </cds-sidenav-item>\n        <!-- Multi-cluster Dashboard -->\n        <cds-sidenav-menu title=\"Multi-Cluster\"\n                          *ngIf=\"permissions.configOpt.read\"\n                          i18n-title>\n          <svg cdsIcon=\"edge-cluster\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/multi-cluster/overview\"\n                            title=\"Overview\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_multiCluster_overview\"><span i18n>Overview</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/multi-cluster/manage-clusters\"\n                            title=\"Manage Clusters\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_multiCluster_manage_clusters\"><span i18n>Manage Clusters</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Cluster -->\n        <cds-sidenav-menu title=\"Cluster\"\n                          i18n-title\n                          *ngIf=\"permissions.hosts.read || permissions.monitor.read || permissions.osd.read || permissions.pool.read\"\n                          class=\"tc_menuitem_cluster\">\n          <svg cdsIcon=\"web-services--cluster\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/pool\"\n                            [useRouter]=\"true\"\n                            title=\"Pools\"\n                            i18n-title\n                            *ngIf=\"permissions.pool.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_pool\"><span i18n>Pools</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/hosts\"\n                            [useRouter]=\"true\"\n                            title=\"Hosts\"\n                            i18n-title\n                            *ngIf=\"permissions.hosts.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_hosts\"><span i18n>Hosts</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/osd\"\n                            [useRouter]=\"true\"\n                            title=\"OSDs\"\n                            i18n-title\n                            *ngIf=\"permissions.osd.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_osds\"><span i18n>OSDs</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/inventory\"\n                            [useRouter]=\"true\"\n                            title=\"Physical Disks\"\n                            i18n-title\n                            *ngIf=\"permissions.hosts.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_inventory\"><span i18n>Physical Disks</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/crush-map\"\n                            [useRouter]=\"true\"\n                            title=\"CRUSH Map\"\n                            i18n-title\n                            *ngIf=\"permissions.osd.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_crush\"><span i18n>CRUSH Map</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/monitor\"\n                            [useRouter]=\"true\"\n                            title=\"Monitors\"\n                            i18n-title\n                            *ngIf=\"permissions.monitor.read\"\n                            class=\"tc_submenuitem tc_submenuitem_cluster_monitor\"><span i18n>Monitors</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Block Storage -->\n        <cds-sidenav-menu title=\"Block\"\n                          i18n-title\n                          *ngIf=\"(permissions.rbdImage.read || permissions.rbdMirroring.read|| permissions.iscsi.read) && (enabledFeature.rbd || enabledFeature.mirroring || enabledFeature.iscsi)\"\n                          class=\"tc_menuitem_block\">\n          <svg cdsIcon=\"datastore\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/block/rbd\"\n                            [useRouter]=\"true\"\n                            title=\"Images\"\n                            i18n-title\n                            *ngIf=\"permissions.rbdImage.read && enabledFeature.rbd\"\n                            class=\"tc_submenuitem tc_submenuitem_block_images\"><span i18n>Images</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/block/mirroring\"\n                            [useRouter]=\"true\"\n                            title=\"Mirroring\"\n                            i18n-title\n                            *ngIf=\"permissions.rbdMirroring.read && enabledFeature.mirroring\"\n                            class=\"tc_submenuitem tc_submenuitem_block_mirroring\">\n            <span i18n>Mirroring\n              <small *ngIf=\"summaryData?.rbd_mirroring?.warnings !== 0\"\n                     class=\"badge badge-warning\">{{ summaryData?.rbd_mirroring?.warnings }}</small>\n              <small *ngIf=\"summaryData?.rbd_mirroring?.errors !== 0\"\n                     class=\"badge badge-danger\">{{ summaryData?.rbd_mirroring?.errors }}</small>\n            </span>\n          </cds-sidenav-item>\n          <cds-sidenav-item route=\"/block/iscsi\"\n                            [useRouter]=\"true\"\n                            title=\"iSCSI\"\n                            i18n-title\n                            *ngIf=\"permissions.iscsi.read && enabledFeature.iscsi\"\n                            class=\"tc_submenuitem tc_submenuitem_block_iscsi\"><span i18n>iSCSI</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/block/nvmeof\"\n                            [useRouter]=\"true\"\n                            title=\"NVMe/TCP\"\n                            i18n-title\n                            class=\"tc_submenuitem tc_submenuitem_block_nvme\"><span i18n>NVMe/TCP</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Object Storage -->\n        <cds-sidenav-menu title=\"Object\"\n                          i18n-title\n                          *ngIf=\"permissions.rgw.read && enabledFeature.rgw\"\n                          class=\"nav-item tc_menuitem_rgw\">\n          <svg cdsIcon=\"object-storage\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/rgw/overview\"\n                            title=\"Overview\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_overview\"><span i18n>Overview</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/user\"\n                            title=\"Users\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_users\"><span i18n>Users</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/bucket\"\n                            title=\"Buckets\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_buckets\"><span i18n>Buckets</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/topic\"\n                            [useRouter]=\"true\"\n                            title=\"Topics\"\n                            i18n-title\n                            class=\"tc_submenuitem tc_submenuitem_rgw_topics\"><span i18n>Topics</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/tiering\"\n                            title=\"Tiering\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_tiering\"><span i18n>Tiering</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/multisite\"\n                            title=\"Multi-site\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_multi-site\"><span i18n>Multi-site</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/daemon\"\n                            title=\"Gateways\"\n                            i18n-title\n                            [useRouter]=\"true\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_daemons\"><span i18n>Gateways</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/nfs\"\n                            [useRouter]=\"true\"\n                            title=\"NFS\"\n                            i18n-title\n                            *ngIf=\"permissions.nfs.read && enabledFeature.nfs\"\n                            class=\"tc_submenuitem tc_submenuitem_rgw_nfs\"><span i18n>NFS</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/rgw/configuration\"\n                            [useRouter]=\"true\"\n                            title=\"Configuration\"\n                            i18n-title\n                            class=\"tc_submenuitem tc_submenuitem_rgw_configuration\"><span i18n>Configuration</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Filesystem -->\n        <cds-sidenav-menu title=\"File\"\n                          i18n-title\n                          *ngIf=\"permissions.nfs.read && enabledFeature.nfs || permissions.cephfs.read && enabledFeature.cephfs || permissions.smb.read\"\n                          class=\"tc_menuitem_file\">\n          <svg cdsIcon=\"file-storage\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/cephfs/fs\"\n                            [useRouter]=\"true\"\n                            title=\"File Systems\"\n                            i18n-title\n                            *ngIf=\"permissions.cephfs.read && enabledFeature.cephfs\"\n                            class=\"tc_submenuitem tc_submenuitem_file_cephfs\"><span i18n>File Systems</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/cephfs/nfs\"\n                            [useRouter]=\"true\"\n                            title=\"NFS\"\n                            i18n-title\n                            *ngIf=\"permissions.nfs.read && enabledFeature.nfs\"\n                            class=\"tc_submenuitem tc_submenuitem_file_nfs\"><span i18n>NFS</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/cephfs/smb\"\n                            [useRouter]=\"true\"\n                            title=\"SMB\"\n                            i18n-title\n                            *ngIf=\"permissions.smb.read\"\n                            class=\"tc_submenuitem tc_submenuitem_file_smb\"><span i18n>SMB</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Observability -->\n        <cds-sidenav-menu title=\"Observability\"\n                          i18n-title\n                          *ngIf=\"permissions.log.read || permissions.prometheus.read\"\n                          class=\"tc_menuitem_observe\">\n          <svg cdsIcon=\"observed--hail\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/logs\"\n                            [useRouter]=\"true\"\n                            title=\"Logs\"\n                            i18n-title\n                            *ngIf=\"permissions.log.read\"\n                            class=\"tc_submenuitem tc_submenuitem_observe_log\"><span i18n>Logs</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/monitoring\"\n                            [useRouter]=\"true\"\n                            title=\"Alerts\"\n                            i18n-title\n                            *ngIf=\"permissions.prometheus.read\"\n                            class=\"tc_submenuitem tc_submenuitem_observe_monitoring\">\n            <span i18n>\n              <ng-container>Alerts</ng-container>\n              <small *ngIf=\"prometheusAlertService.activeCriticalAlerts > 0\"\n                     class=\"badge badge-danger ms-1\">{{ prometheusAlertService.activeCriticalAlerts }}</small>\n              <small *ngIf=\"prometheusAlertService.activeWarningAlerts > 0\"\n                     class=\"badge badge-warning ms-1\">{{ prometheusAlertService.activeWarningAlerts }}</small>\n            </span>\n          </cds-sidenav-item>\n        </cds-sidenav-menu>\n        <!-- Administration -->\n        <cds-sidenav-menu title=\"Administration\"\n                          i18n-title\n                          *ngIf=\"permissions.configOpt.read || permissions.hosts.read\"\n                          class=\"tc_menuitem_admin\">\n          <svg cdsIcon=\"network--admin-control\"\n               icon\n               size=\"20\"></svg>\n          <cds-sidenav-item route=\"/services/\"\n                            [useRouter]=\"true\"\n                            title=\"Services\"\n                            i18n-title\n                            *ngIf=\"permissions.hosts.read\"\n                            class=\"tc_submenuitem tc_submenuitem_admin_services\"><span i18n>Services</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/upgrade\"\n                            [useRouter]=\"true\"\n                            title=\"Upgrade\"\n                            i18n-title\n                            *ngIf=\"permissions.configOpt.read\"\n                            class=\"tc_submenuitem tc_submenuitem_admin_upgrade\"><span i18n>Upgrade</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/ceph-users\"\n                            [useRouter]=\"true\"\n                            title=\"Ceph Users\"\n                            i18n-title\n                            *ngIf=\"permissions.configOpt.read\"\n                            class=\"tc_submenuitem tc_submenuitem_admin_users\"><span i18n>Ceph Users</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/mgr-modules\"\n                            [useRouter]=\"true\"\n                            title=\"Manager Modules\"\n                            i18n-title\n                            *ngIf=\"permissions.configOpt.read\"\n                            class=\"tc_submenuitem tc_submenuitem_admin_modules\"><span i18n>Manager Modules</span></cds-sidenav-item>\n          <cds-sidenav-item route=\"/configuration\"\n                            [useRouter]=\"true\"\n                            title=\"Configuration\"\n                            i18n-title\n                            *ngIf=\"permissions.configOpt.read\"\n                            class=\"tc_submenuitem tc_submenuitem_admin_configuration\"><span i18n>Configuration</span></cds-sidenav-item>\n        </cds-sidenav-menu>\n      </cds-sidenav>\n    </ng-container>\n  </ng-template>\n  </div>\n","import { Component, OnDestroy, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport * as _ from 'lodash';\nimport { Subscription } from 'rxjs';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { SettingsService } from '~/app/shared/api/settings.service';\n\nimport { MultiCluster } from '~/app/shared/models/multi-cluster';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { CookiesService } from '~/app/shared/services/cookie.service';\nimport {\n  FeatureTogglesMap$,\n  FeatureTogglesService\n} from '~/app/shared/services/feature-toggles.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { PrometheusAlertService } from '~/app/shared/services/prometheus-alert.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\n\n@Component({\n  selector: 'cd-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent implements OnInit, OnDestroy {\n  clusterDetails: any[] = [];\n\n  permissions: Permissions;\n  enabledFeature$: FeatureTogglesMap$;\n  clusterTokenStatus: object = {};\n  summaryData: any;\n\n  rightSidebarOpen = false; // rightSidebar only opens when width is less than 768px\n  showMenuSidebar = true;\n\n  simplebar = {\n    autoHide: false\n  };\n  displayedSubMenu = {};\n  @ViewChild('sidenavContainer') sidenavContainer: ElementRef;\n  private subs = new Subscription();\n\n  clustersMap: Map<string, any> = new Map<string, any>();\n  selectedCluster: {\n    name: string;\n    cluster_alias: string;\n    user: string;\n    cluster_connection_status?: number;\n  };\n  currentClusterName: string;\n\n  constructor(\n    public notificationService: NotificationService,\n    private authStorageService: AuthStorageService,\n    private multiClusterService: MultiClusterService,\n    private router: Router,\n    private summaryService: SummaryService,\n    private featureToggles: FeatureTogglesService,\n    public prometheusAlertService: PrometheusAlertService,\n    private cookieService: CookiesService,\n    private settingsService: SettingsService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n    this.enabledFeature$ = this.featureToggles.get();\n  }\n\n  ngOnInit() {\n    this.subs.add(\n      this.multiClusterService.subscribe((resp: object) => {\n        const clustersConfig = resp['config'];\n        if (clustersConfig) {\n          this.clustersMap.clear();\n          Object.keys(clustersConfig).forEach((clusterKey: string) => {\n            const clusterDetailsList = clustersConfig[clusterKey];\n            clusterDetailsList.forEach((clusterDetails: MultiCluster) => {\n              const clusterUser = clusterDetails['user'];\n              const clusterUrl = clusterDetails['url'];\n              const clusterUniqueKey = `${clusterUrl}-${clusterUser}`;\n              this.clustersMap.set(clusterUniqueKey, clusterDetails);\n              this.checkClusterConnectionStatus();\n            });\n          });\n          this.selectedCluster =\n            this.clustersMap.get(`${resp['current_url']}-${resp['current_user']}`) || {};\n          this.currentClusterName = `${this.selectedCluster?.name} - ${this.selectedCluster?.cluster_alias} - ${this.selectedCluster?.user}`;\n        }\n      })\n    );\n\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        this.summaryData = summary;\n      })\n    );\n    this.subs.add(\n      this.multiClusterService.subscribeClusterTokenStatus((resp: object) => {\n        this.clusterTokenStatus = resp;\n        this.checkClusterConnectionStatus();\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  checkClusterConnectionStatus() {\n    this.clustersMap.forEach((clusterDetails, clusterName) => {\n      const clusterTokenStatus = this.clusterTokenStatus[clusterDetails.name];\n      const connectionStatus = clusterTokenStatus ? clusterTokenStatus.status : 0;\n      const user = clusterTokenStatus ? clusterTokenStatus.user : clusterDetails.user;\n\n      this.clustersMap.set(clusterName, {\n        ...clusterDetails,\n        cluster_connection_status: connectionStatus,\n        user: user\n      });\n\n      if (clusterDetails.cluster_alias === 'local-cluster') {\n        this.clustersMap.set(clusterName, {\n          ...clusterDetails,\n          cluster_connection_status: 0,\n          user: user\n        });\n      }\n    });\n  }\n\n  blockHealthColor() {\n    if (this.summaryData && this.summaryData.rbd_mirroring) {\n      if (this.summaryData.rbd_mirroring.errors > 0) {\n        return { color: '#f4926c' };\n      } else if (this.summaryData.rbd_mirroring.warnings > 0) {\n        return { color: '#f0ad4e' };\n      }\n    }\n\n    return undefined;\n  }\n\n  onMenuClick(event: MouseEvent) {\n    const target = event.target;\n    if (!(target instanceof HTMLElement)) return;\n    const menuElement: Element = target.closest('cds-sidenav-menu');\n\n    if (menuElement) {\n      const clientViewBounding = menuElement.getBoundingClientRect();\n      const isOutOfView =\n        clientViewBounding.top < 0 || clientViewBounding.bottom > window.innerHeight;\n\n      if (isOutOfView) {\n        menuElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n      }\n    }\n  }\n\n  toggleSubMenu(menu: string) {\n    this.displayedSubMenu[menu] = !this.displayedSubMenu[menu];\n  }\n\n  toggleRightSidebar() {\n    this.rightSidebarOpen = !this.rightSidebarOpen;\n  }\n\n  onClusterSelection(value: object) {\n    this.multiClusterService.setCluster(value).subscribe(\n      (resp: any) => {\n        if (value['cluster_alias'] === 'local-cluster') {\n          localStorage.setItem('cluster_api_url', '');\n        } else {\n          localStorage.setItem('current_cluster_name', `${value['name']}-${value['user']}`);\n          localStorage.setItem('cluster_api_url', value['url']);\n        }\n        this.selectedCluster = this.clustersMap.get(`${value['url']}-${value['user']}`) || {};\n        const clustersConfig = resp['config'];\n        if (clustersConfig && typeof clustersConfig === 'object') {\n          Object.keys(clustersConfig).forEach((clusterKey: string) => {\n            const clusterDetailsList = clustersConfig[clusterKey];\n\n            clusterDetailsList.forEach((clusterDetails: any) => {\n              const clusterName = clusterDetails['name'];\n              const clusterToken = clusterDetails['token'];\n              const clusterUser = clusterDetails['user'];\n\n              if (\n                clusterName === this.selectedCluster['name'] &&\n                clusterUser === this.selectedCluster['user'] &&\n                clusterDetails['cluster_alias'] !== 'local-cluster'\n              ) {\n                this.cookieService.setToken(`${clusterName}-${clusterUser}`, clusterToken);\n              }\n            });\n          });\n        }\n      },\n      () => {},\n      () => {\n        // force refresh grafana api url to get the correct url for the selected cluster\n        this.settingsService.ifSettingConfigured(\n          'api/grafana/url',\n          () => {},\n          () => {},\n          true\n        );\n        const currentRoute = this.router.url.split('?')[0];\n        this.multiClusterService.refreshMultiCluster(currentRoute);\n      }\n    );\n  }\n  toggleSidebar() {\n    this.notificationService.toggleSidebar();\n  }\n  trackByFn(item: any) {\n    return item;\n  }\n}\n","/*\nThe MIT License\n\nCopyright (c) 2017 (null) McNull https://github.com/McNull\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n */\n\nimport { ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\n\nexport class BreadcrumbsResolver {\n  public resolve(\n    route: ActivatedRouteSnapshot\n  ): Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n    const data = route.routeConfig.data;\n    const path = data.path === null ? null : this.getFullPath(route);\n    const disableSplit = data.disableSplit || false;\n\n    const text =\n      typeof data.breadcrumbs === 'string'\n        ? data.breadcrumbs\n        : data.breadcrumbs.text || data.text || path;\n\n    const crumbs: IBreadcrumb[] = [{ text: text, path: path, disableSplit: disableSplit }];\n\n    return of(crumbs);\n  }\n\n  public getFullPath(route: ActivatedRouteSnapshot): string {\n    const relativePath = (segments: UrlSegment[]) =>\n      segments.reduce((a, v) => (a += '/' + v.path), '');\n    const fullPath = (routes: ActivatedRouteSnapshot[]) =>\n      routes.reduce((a, v) => (a += relativePath(v.url)), '');\n\n    return fullPath(route.pathFromRoot);\n  }\n}\n\nexport interface IBreadcrumb {\n  text: string;\n  path: string;\n  disableSplit?: boolean;\n}\n","<cds-breadcrumb [noTrailingSlash]=\"true\"\n                *ngIf=\"crumbs.length\">\n  <ng-container *ngFor=\"let crumb of crumbs; let last = last\">\n    <cds-breadcrumb-item *ngIf=\"!last && crumb.path !== null\"\n                         href=\"#/{{ crumb.path }}\">\n      {{ crumb.text }}\n    </cds-breadcrumb-item>\n\n    <cds-breadcrumb-item *ngIf=\"last || crumb.path === null\"\n                         data-testid=\"active-breadcrumb-item\">\n      {{ crumb.text }}\n    </cds-breadcrumb-item>\n  </ng-container>\n</cds-breadcrumb>\n","/*\nThe MIT License\n\nCopyright (c) 2017 (null) McNull https://github.com/McNull\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n */\n\nimport { Component, Injector, OnDestroy } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRouteSnapshot, NavigationEnd, NavigationStart, Router } from '@angular/router';\n\nimport { concat, from, Observable, of, Subscription } from 'rxjs';\nimport { distinct, filter, first, mergeMap, toArray } from 'rxjs/operators';\nimport { AppConstants } from '~/app/shared/constants/app.constants';\n\nimport { BreadcrumbsResolver, IBreadcrumb } from '~/app/shared/models/breadcrumbs';\n\n@Component({\n  selector: 'cd-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss']\n})\nexport class BreadcrumbsComponent implements OnDestroy {\n  crumbs: IBreadcrumb[] = [];\n  /**\n   * Useful for e2e tests.\n   * This allow us to mark the breadcrumb as pending during the navigation from\n   * one page to another.\n   * This resolves the problem of validating the breadcrumb of a new page and\n   * still get the value from the previous\n   */\n  finished = false;\n  subscription: Subscription;\n  private defaultResolver = new BreadcrumbsResolver();\n\n  constructor(private router: Router, private injector: Injector, private titleService: Title) {\n    this.subscription = this.router.events\n      .pipe(filter((x) => x instanceof NavigationStart))\n      .subscribe(() => {\n        this.finished = false;\n      });\n\n    this.subscription = this.router.events\n      .pipe(filter((x) => x instanceof NavigationEnd))\n      .subscribe(() => {\n        const currentRoot = router.routerState.snapshot.root;\n\n        this._resolveCrumbs(currentRoot)\n          .pipe(\n            mergeMap((x) => x),\n            distinct((x) => x.text),\n            toArray(),\n            mergeMap((x) => {\n              const y = this.postProcess(x);\n              return this.wrapIntoObservable<IBreadcrumb[]>(y).pipe(first());\n            })\n          )\n          .subscribe((x) => {\n            this.finished = true;\n            this.crumbs = x;\n            const title = this.getTitleFromCrumbs(this.crumbs);\n            this.titleService.setTitle(title);\n          });\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private _resolveCrumbs(route: ActivatedRouteSnapshot): Observable<IBreadcrumb[]> {\n    let crumbs$: Observable<IBreadcrumb[]>;\n\n    const data = route.routeConfig && route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n      let resolver: BreadcrumbsResolver;\n\n      if (data.breadcrumbs.prototype instanceof BreadcrumbsResolver) {\n        resolver = this.injector.get<BreadcrumbsResolver>(data.breadcrumbs);\n      } else {\n        resolver = this.defaultResolver;\n      }\n\n      const result = resolver.resolve(route);\n      crumbs$ = this.wrapIntoObservable<IBreadcrumb[]>(result).pipe(first());\n    } else {\n      crumbs$ = of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = concat<IBreadcrumb[]>(crumbs$, this._resolveCrumbs(route.firstChild));\n    }\n\n    return crumbs$;\n  }\n\n  postProcess(breadcrumbs: IBreadcrumb[]) {\n    const result: IBreadcrumb[] = [];\n    breadcrumbs.forEach((element) => {\n      const split = element.text.split('/');\n      if (!element.disableSplit && split.length > 1) {\n        element.text = split[split.length - 1];\n        for (let i = 0; i < split.length - 1; i++) {\n          result.push({ text: split[i], path: null });\n        }\n      }\n      result.push(element);\n    });\n    return result;\n  }\n\n  isPromise(value: any): boolean {\n    return value && typeof value.then === 'function';\n  }\n\n  wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\n    if (value instanceof Observable) {\n      return value;\n    }\n\n    if (this.isPromise(value)) {\n      return from(Promise.resolve(value));\n    }\n\n    return of(value as T);\n  }\n\n  private getTitleFromCrumbs(crumbs: IBreadcrumb[]): string {\n    const currentLocation = crumbs\n      .map((crumb: IBreadcrumb) => {\n        return crumb.text || '';\n      })\n      .join(' > ');\n    if (currentLocation.length > 0) {\n      return `${AppConstants.projectName}: ${currentLocation}`;\n    } else {\n      return AppConstants.projectName;\n    }\n  }\n}\n","<cd-alert-panel class=\"no-margin-bottom\"\n                [type]=\"alertType\"\n                *ngIf=\"displayNotification\"\n                [showTitle]=\"false\"\n                size=\"slim\"\n                [dismissible]=\"alertType !== 'danger'\"\n                (dismissed)=\"onDismissed()\">\n  <div *ngIf=\"expirationDays === 0\"\n       i18n>Your password will expire in <strong>less than 1</strong> day. Click\n    <a routerLink=\"/user-profile/edit\"\n       class=\"alert-link\">here</a> to change it now.</div>\n  <div *ngIf=\"expirationDays > 0\"\n       i18n>Your password will expire in <strong>{{ expirationDays }}</strong> day(s). Click\n  <a routerLink=\"/user-profile/edit\"\n     class=\"alert-link\">here</a> to change it now.</div>\n</cd-alert-panel>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { CdPwdExpirationSettings } from '~/app/shared/models/cd-pwd-expiration-settings';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-pwd-expiration-notification',\n  templateUrl: './pwd-expiration-notification.component.html',\n  styleUrls: ['./pwd-expiration-notification.component.scss']\n})\nexport class PwdExpirationNotificationComponent implements OnInit, OnDestroy {\n  alertType: string;\n  expirationDays: number;\n  pwdExpirationSettings: CdPwdExpirationSettings;\n  displayNotification = false;\n\n  constructor(\n    private settingsService: SettingsService,\n    private authStorageService: AuthStorageService\n  ) {}\n\n  ngOnInit() {\n    this.settingsService.getStandardSettings().subscribe((pwdExpirationSettings) => {\n      this.pwdExpirationSettings = new CdPwdExpirationSettings(pwdExpirationSettings);\n      const pwdExpirationDate = this.authStorageService.getPwdExpirationDate();\n      if (pwdExpirationDate) {\n        this.expirationDays = this.getExpirationDays(pwdExpirationDate);\n        if (this.expirationDays <= this.pwdExpirationSettings.pwdExpirationWarning2) {\n          this.alertType = 'danger';\n        } else {\n          this.alertType = 'warning';\n        }\n        this.displayNotification =\n          this.expirationDays <= this.pwdExpirationSettings.pwdExpirationWarning1;\n        this.authStorageService.isPwdDisplayedSource.next(this.displayNotification);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.authStorageService.isPwdDisplayedSource.next(false);\n  }\n\n  private getExpirationDays(pwdExpirationDate: number): number {\n    const current = new Date();\n    const expiration = new Date(pwdExpirationDate * 1000);\n    return Math.floor((expiration.valueOf() - current.valueOf()) / (1000 * 3600 * 24));\n  }\n\n  onDismissed(): void {\n    this.authStorageService.isPwdDisplayedSource.next(false);\n    this.displayNotification = false;\n  }\n}\n","<cd-alert-panel *ngIf=\"displayNotification\"\n                class=\"no-margin-bottom\"\n                [showTitle]=\"false\"\n                size=\"slim\"\n                [type]=\"notificationSeverity\"\n                [dismissible]=\"notificationSeverity !== 'danger'\"\n                (dismissed)=\"onDismissed()\">\n  <div i18n>The Ceph community needs your help to continue improving: please\n    <a routerLink=\"/telemetry\"\n       class=\"btn activate-button alert-link activate-text\">Activate</a> the\n  <a href=\"https://docs.ceph.com/en/latest/mgr/telemetry/\">Telemetry</a> module.</div>\n</cd-alert-panel>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { MgrModuleService } from '~/app/shared/api/mgr-module.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TelemetryNotificationService } from '~/app/shared/services/telemetry-notification.service';\n\n@Component({\n  selector: 'cd-telemetry-notification',\n  templateUrl: './telemetry-notification.component.html',\n  styleUrls: ['./telemetry-notification.component.scss']\n})\nexport class TelemetryNotificationComponent implements OnInit, OnDestroy {\n  displayNotification = false;\n  notificationSeverity = 'warning';\n\n  constructor(\n    private mgrModuleService: MgrModuleService,\n    private authStorageService: AuthStorageService,\n    private notificationService: NotificationService,\n    private telemetryNotificationService: TelemetryNotificationService\n  ) {}\n\n  ngOnInit() {\n    this.telemetryNotificationService.update.subscribe((visible: boolean) => {\n      this.displayNotification = visible;\n    });\n\n    if (!this.isNotificationHidden()) {\n      const configOptPermissions = this.authStorageService.getPermissions().configOpt;\n      if (_.every(Object.values(configOptPermissions))) {\n        this.mgrModuleService.getConfig('telemetry').subscribe((options) => {\n          if (!options['enabled']) {\n            this.telemetryNotificationService.setVisibility(true);\n          }\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.telemetryNotificationService.setVisibility(false);\n  }\n\n  isNotificationHidden(): boolean {\n    return localStorage.getItem('telemetry_notification_hidden') === 'true';\n  }\n\n  onDismissed(): void {\n    this.telemetryNotificationService.setVisibility(false);\n    localStorage.setItem('telemetry_notification_hidden', 'true');\n    this.notificationService.show(\n      NotificationType.success,\n      $localize`Telemetry activation reminder muted`,\n      $localize`You can activate the module on the Telemetry configuration \\\npage (<b>Dashboard Settings</b> -> <b>Telemetry configuration</b>) at any time.`\n    );\n  }\n}\n","<cd-alert-panel *ngIf=\"motd\"\n                size=\"slim\"\n                [showTitle]=\"false\"\n                [type]=\"motd.severity\"\n                [dismissible]=\"motd.severity !== 'danger'\"\n                (dismissed)=\"onDismissed()\">\n  <span [innerHTML]=\"motd.message | sanitizeHtml\"></span>\n</cd-alert-panel>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { Motd } from '~/app/shared/api/motd.service';\nimport { MotdNotificationService } from '~/app/shared/services/motd-notification.service';\n\n@Component({\n  selector: 'cd-motd',\n  templateUrl: './motd.component.html',\n  styleUrls: ['./motd.component.scss']\n})\nexport class MotdComponent implements OnInit, OnDestroy {\n  motd: Motd | undefined = undefined;\n\n  private subscription: Subscription;\n\n  constructor(private motdNotificationService: MotdNotificationService) {}\n\n  ngOnInit(): void {\n    this.subscription = this.motdNotificationService.motd$.subscribe((motd: Motd | undefined) => {\n      this.motd = motd;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  onDismissed(): void {\n    this.motdNotificationService.hide();\n  }\n}\n","<ng-container *ngIf=\"{ ftMap: featureToggleMap$ | async, daemons: rgwDaemonService.daemons$ | async, selectedDaemon: rgwDaemonService.selectedDaemon$ | async } as data\">\n  <ng-container *ngIf=\"data.ftMap && data.ftMap.rgw && permissions.rgw.read && isRgwRoute && data.daemons.length > 1\">\n    <div class=\"cd-context-bar pt-3 pb-3\">\n      <span class=\"me-1\"\n            i18n>Selected Object Gateway:</span>\n      <div ngbDropdown\n           placement=\"bottom-left\"\n           class=\"d-inline-block ms-2\">\n        <button ngbDropdownToggle\n                class=\"btn btn-outline-info ctx-bar-selected-rgw-daemon\"\n                i18n-title\n                title=\"Select Object Gateway\">\n          {{ data.selectedDaemon.id }} ( {{ data.selectedDaemon.zonegroup_name }} )\n        </button>\n        <div ngbDropdownMenu>\n          <ng-container *ngFor=\"let daemon of data.daemons\">\n            <button ngbDropdownItem\n                    class=\"ctx-bar-available-rgw-daemon\"\n                    (click)=\"onDaemonSelection(daemon)\">\n              {{ daemon.id }} ( {{ daemon.zonegroup_name }} )\n            </button>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Event, NavigationEnd, Router } from '@angular/router';\n\nimport { NEVER, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { RgwDaemon } from '~/app/ceph/rgw/models/rgw-daemon';\nimport { RgwDaemonService } from '~/app/shared/api/rgw-daemon.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport {\n  FeatureTogglesMap$,\n  FeatureTogglesService\n} from '~/app/shared/services/feature-toggles.service';\nimport { TimerService } from '~/app/shared/services/timer.service';\n\n@Component({\n  selector: 'cd-context',\n  templateUrl: './context.component.html',\n  styleUrls: ['./context.component.scss']\n})\nexport class ContextComponent implements OnInit, OnDestroy {\n  readonly REFRESH_INTERVAL = 5000;\n  private subs = new Subscription();\n  private rgwUrlPrefix = '/rgw';\n  private rgwUserUrlPrefix = '/rgw/user';\n  private rgwRoleUrlPrefix = '/rgw/roles';\n  private rgwBuckerUrlPrefix = '/rgw/bucket';\n  private rgwAccountsUrlPrefix = '/rgw/accounts';\n  permissions: Permissions;\n  featureToggleMap$: FeatureTogglesMap$;\n  isRgwRoute =\n    document.location.href.includes(this.rgwUserUrlPrefix) ||\n    document.location.href.includes(this.rgwBuckerUrlPrefix) ||\n    document.location.href.includes(this.rgwRoleUrlPrefix) ||\n    document.location.href.includes(this.rgwAccountsUrlPrefix);\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private featureToggles: FeatureTogglesService,\n    private router: Router,\n    private timerService: TimerService,\n    public rgwDaemonService: RgwDaemonService\n  ) {}\n\n  ngOnInit() {\n    this.permissions = this.authStorageService.getPermissions();\n    this.featureToggleMap$ = this.featureToggles.get();\n    // Check if route belongs to RGW:\n    this.subs.add(\n      this.router.events\n        .pipe(filter((event: Event) => event instanceof NavigationEnd))\n        .subscribe(\n          () =>\n            (this.isRgwRoute = [\n              this.rgwBuckerUrlPrefix,\n              this.rgwUserUrlPrefix,\n              this.rgwRoleUrlPrefix,\n              this.rgwAccountsUrlPrefix\n            ].some((urlPrefix) => this.router.url.startsWith(urlPrefix)))\n        )\n    );\n    // Set daemon list polling only when in RGW route:\n    this.subs.add(\n      this.timerService\n        .get(() => (this.isRgwRoute ? this.rgwDaemonService.list() : NEVER), this.REFRESH_INTERVAL)\n        .subscribe()\n    );\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n\n  onDaemonSelection(daemon: RgwDaemon) {\n    this.rgwDaemonService.selectDaemon(daemon);\n    this.reloadData();\n  }\n\n  private reloadData() {\n    const currentUrl = this.router.url;\n    this.router.navigateByUrl(this.rgwUrlPrefix, { skipLocationChange: true }).finally(() => {\n      this.router.navigate([currentUrl]);\n    });\n  }\n}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\nimport { FaviconService } from '~/app/shared/services/favicon.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { TaskManagerService } from '~/app/shared/services/task-manager.service';\nimport { TelemetryNotificationService } from '../../../shared/services/telemetry-notification.service';\nimport { MotdNotificationService } from '~/app/shared/services/motd-notification.service';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'cd-workbench-layout',\n  templateUrl: './workbench-layout.component.html',\n  styleUrls: ['./workbench-layout.component.scss'],\n  providers: [FaviconService]\n})\nexport class WorkbenchLayoutComponent implements OnInit, OnDestroy {\n  notifications: string[] = [];\n  private subs = new Subscription();\n  permissions: Permissions;\n  @HostBinding('class') get class(): string {\n    return 'top-notification-' + this.notifications.length;\n  }\n\n  constructor(\n    public router: Router,\n    private summaryService: SummaryService,\n    private taskManagerService: TaskManagerService,\n    private multiClusterService: MultiClusterService,\n    private faviconService: FaviconService,\n    private authStorageService: AuthStorageService,\n    private telemetryNotificationService: TelemetryNotificationService,\n    private motdNotificationService: MotdNotificationService\n  ) {\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    if (this.permissions.configOpt.read) {\n      this.subs.add(this.multiClusterService.startPolling());\n      this.subs.add(this.multiClusterService.startClusterTokenStatusPolling());\n    }\n    this.subs.add(this.summaryService.startPolling());\n    this.subs.add(this.taskManagerService.init(this.summaryService));\n\n    this.subs.add(\n      this.authStorageService.isPwdDisplayed$.subscribe((isDisplayed) => {\n        this.showTopNotification('isPwdDisplayed', isDisplayed);\n      })\n    );\n    this.subs.add(\n      this.telemetryNotificationService.update.subscribe((visible: boolean) => {\n        this.showTopNotification('telemetryNotificationEnabled', visible);\n      })\n    );\n    this.subs.add(\n      this.motdNotificationService.motd$.subscribe((motd: any) => {\n        this.showTopNotification('motdNotificationEnabled', _.isPlainObject(motd));\n      })\n    );\n    this.faviconService.init();\n  }\n  showTopNotification(name: string, isDisplayed: boolean) {\n    if (isDisplayed) {\n      if (!this.notifications.includes(name)) {\n        this.notifications.push(name);\n      }\n    } else {\n      const index = this.notifications.indexOf(name);\n      if (index >= 0) {\n        this.notifications.splice(index, 1);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","<block-ui name=\"global\">\n  <cd-navigation>\n    <div class=\"container-fluid h-100\"\n         [ngClass]=\"{'dashboard': (router.url == '/dashboard' || router.url == '/dashboard_3' || router.url == '/multi-cluster/overview'), 'rgw-dashboard': (router.url == '/rgw/overview')}\">\n      <!-- ************************ -->\n      <!-- ALERTS BANNER     -->\n      <!-- ************************ -->\n      <div class=\"cd-alert-container\"\n           [ngClass]=\"{'ms-4 me-4': (router.url == '/dashboard' || router.url == '/dashboard_3' || router.url == '/multi-cluster/overview'), 'm-3': (router.url == '/rgw/overview')}\">\n        <cd-pwd-expiration-notification></cd-pwd-expiration-notification>\n        <cd-telemetry-notification></cd-telemetry-notification>\n        <cd-motd></cd-motd>\n      </div>\n      <cd-context></cd-context>\n      <cd-breadcrumbs></cd-breadcrumbs>\n      <router-outlet></router-outlet>\n      <cds-placeholder></cds-placeholder>\n    </div>\n  </cd-navigation>\n</block-ui>\n","import { Component, OnInit } from '@angular/core';\n\nimport SwaggerUI from 'swagger-ui';\n\n@Component({\n  selector: 'cd-api-docs',\n  templateUrl: './api-docs.component.html',\n  styleUrls: ['./api-docs.component.scss']\n})\nexport class ApiDocsComponent implements OnInit {\n  ngOnInit(): void {\n    SwaggerUI({\n      url: window.location.origin + '/docs/openapi.json',\n      dom_id: '#swagger-ui',\n      layout: 'BaseLayout'\n    });\n  }\n}\n","\n<div id=\"swagger-ui\"\n     class=\"apiDocs\"></div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthStorageService } from './auth-storage.service';\n\n/**\n * This service guard checks if a user must be redirected to a special\n * page at '/login-change-password' to set a new password.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChangePasswordGuardService {\n  constructor(private router: Router, private authStorageService: AuthStorageService) {}\n\n  canActivate(_route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // Redirect to '/login-change-password' when the following constraints\n    // are fulfilled:\n    // - The user must be logged in.\n    // - SSO must be disabled.\n    // - The flag 'User must change password at next login' must be set.\n    if (\n      this.authStorageService.isLoggedIn() &&\n      !this.authStorageService.isSSO() &&\n      this.authStorageService.getPwdUpdateRequired()\n    ) {\n      this.router.navigate(['/login-change-password'], { queryParams: { returnUrl: state.url } });\n      return false;\n    }\n    return true;\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.canActivate(childRoute, state);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DashboardUserDeniedError } from '~/app/core/error/error';\nimport { AuthStorageService } from './auth-storage.service';\n\n/**\n * This service checks if a route can be activated if the user has not\n * been logged in via SSO.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoSsoGuardService {\n  constructor(private authStorageService: AuthStorageService) {}\n\n  canActivate() {\n    if (!this.authStorageService.isSSO()) {\n      return true;\n    }\n    throw new DashboardUserDeniedError();\n    return false;\n  }\n\n  canActivateChild(): boolean {\n    return this.canActivate();\n  }\n}\n","<div class=\"row h-25\"\n     *cdScope=\"'configOpt'\">\n  <ng-container *ngIf=\"healthData$ | async as healthData\">\n    <cd-card class=\"col-sm-3 px-3 d-flex\"\n             cardTitle=\"New Version\"\n             i18n-cardTitle\n             aria-label=\"New Version\"\n             i18n-aria-label\n             id=\"newVersionAvailable\"\n             *ngIf=\"upgradeStatus$ | async as status\">\n      <ng-container *ngIf=\"status.in_progress; else upgradeStatusTpl\">\n        <div class=\"d-flex flex-column justify-content-center align-items-center mt-2\">\n          <h5 i18n\n              *ngIf=\"status.is_paused; else inProgress\">\n            <i [ngClass]=\"[icons.spinner]\"></i>\n            Upgrade is paused {{executingTasks?.progress}}%</h5>\n          <a class=\"mt-2 link-primary mb-2\"\n             routerLink=\"/upgrade/progress\"\n             i18n>View Details...</a>\n        </div>\n\n        <ng-template #inProgress>\n          <h5 i18n>\n            <i [ngClass]=\"[icons.spin, icons.spinner]\"></i>\n              Upgrading {{executingTasks?.progress}}%\n          </h5>\n        </ng-template>\n      </ng-container>\n    </cd-card>\n\n    <cd-card class=\"col-sm-3 px-3 d-flex\"\n             cardTitle=\"Current Version\"\n             i18n-cardTitle\n             aria-label=\"Current Version\"\n             i18n-aria-label\n             id=\"currentVersion\">\n      <div class=\"d-flex flex-column justify-content-center align-items-center\">\n        <h5>{{ version }}</h5>\n      </div>\n    </cd-card>\n\n    <cd-card class=\"col-sm-3 px-3 d-flex\"\n             cardTitle=\"Cluster Status\"\n             i18n-cardTitle\n             aria-label=\"Cluster Status\"\n             i18n-aria-label\n             id=\"clusterStatus\">\n      <div class=\"d-flex flex-column justify-content-center align-items-center\">\n        <ng-template #healthWarningAndError>\n          <cds-toggletip  [ngStyle]=\"healthData.health.status | healthColor\"\n                          [dropShadow]=\"true\"\n                          [autoAlign]=\"true\"\n                          class=\"info-card-content-clickable mt-1\">\n            <div cdsToggletipButton>\n            {{ healthData.health.status | healthLabel | uppercase }}\n            <i  *ngIf=\"healthData.health?.status !== 'HEALTH_OK'\"\n                class=\"fa fa-exclamation-triangle\">\n            </i>\n            </div>\n            <div cdsToggletipContent>\n              <div class=\"cds--popover-scroll-container\">\n                <cd-health-checks [healthData]=\"healthData.health.checks\"></cd-health-checks>\n              </div>\n            </div>\n          </cds-toggletip>\n        </ng-template>\n\n      <ng-container *ngIf=\"!healthData.health?.checks?.length; else healthWarningAndError\">\n        <div [ngStyle]=\"healthData.health.status | healthColor\">\n          {{ healthData.health.status | healthLabel | uppercase }}\n        </div>\n      </ng-container>\n      </div>\n    </cd-card>\n\n    <cd-card class=\"col-sm-3 px-3 d-flex\"\n             cardTitle=\"MGR Count\"\n             i18n-cardTitle\n             aria-label=\"MGR Count\"\n             i18n-aria-label\n             id=\"mgrCount\">\n      <div class=\"d-flex flex-column justify-content-center align-items-center\">\n        <h5>\n          <i class=\"text-success\"\n             [ngClass]=\"[icons.success]\"\n             *ngIf=\"(healthData.mgr_map | mgrSummary)?.total > 1; else warningIcon\">\n          </i>\n          {{ (healthData.mgr_map | mgrSummary)?.total }}\n        </h5>\n      </div>\n    </cd-card>\n\n    <div class=\"d-flex mt-3\">\n      <dl class=\"w-50\"\n          *ngIf=\"fsid$ | async as fsid\">\n        <dt class=\"bold mt-5\"\n            i18n>Cluster FSID</dt>\n        <dd class=\"mt-2\">{{ fsid }}</dd>\n\n        <ng-container *ngIf=\"info$ | async as info; else loadingDetails\">\n          <dt class=\"bold mt-5\"\n              i18n>Release Image</dt>\n          <dd class=\"mt-2\">{{ info.image }}</dd>\n          <dt class=\"bold mt-5\"\n              i18n>Registry</dt>\n          <dd class=\"mt-2\">{{ info.registry }}</dd>\n        </ng-container>\n      </dl>\n      <div class=\"w-50\">\n        <ng-container *ngIf=\"daemons$ | async as daemons\">\n          <legend class=\"cd-header\"\n                  i18n>Daemon versions</legend>\n          <div>\n            <cd-table #daemonsTable\n                      [data]=\"daemons\"\n                      selectionType=\"single\"\n                      [columns]=\"columns\"\n                      columnMode=\"flex\"\n                      [limit]=\"5\">\n            </cd-table>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n    <legend class=\"cd-header\"\n            i18n>Cluster logs</legend>\n    <cd-logs [showAuditLogs]=\"false\"\n             [showDaemonLogs]=\"false\"\n             [showNavLinks]=\"false\"\n             [showFilterTools]=\"false\"\n             [showDownloadCopyButton]=\"false\"\n             defaultTab=\"cluster-logs\"\n             [scrollable]=\"true\"></cd-logs>\n\n\n    <ng-template #upgradeStatusTpl>\n      <div class=\"d-flex flex-column justify-content-center align-items-center\"\n           *ngIf=\"info$ | async as info; else checkingForUpgradeStatus\">\n        <ng-container *ngIf=\"info.versions.length > 0; else noUpgradesAvailable\">\n          <div i18n-ngbTooltip\n               [ngbTooltip]=\"(healthData.mgr_map | mgrSummary)?.total <= 1 ? 'To upgrade, you need minimum 2 mgr daemons.' : ''\">\n            <button class=\"btn btn-accent mt-2\"\n                    id=\"upgrade\"\n                    aria-label=\"Upgrade now\"\n                    (click)=\"upgradeNow(info.versions[info.versions.length - 1])\"\n                    [disabled]=\"(healthData.mgr_map | mgrSummary)?.total <= 1\"\n                    i18n>Upgrade to {{ info.versions[info.versions.length - 1] }}</button>\n          </div>\n          <a class=\"mt-2 link-primary mb-2\"\n             (click)=\"startUpgradeModal()\"\n             i18n>Select another version...</a>\n        </ng-container>\n      </div>\n    </ng-template>\n  </ng-container>\n</div>\n\n<ng-template #noUpgradesAvailable>\n  <span class=\"mt-1\"\n        id=\"no-upgrades-available\"\n        i18n>\n    <i [ngClass]=\"[icons.success]\"\n       class=\"text-success\"></i>\n    Cluster is up-to-date\n  </span>\n  <a class=\"link-primary mb-2\"\n     (click)=\"startUpgradeModal()\"\n     i18n>Upgrade using custom image...</a>\n</ng-template>\n\n<ng-template #warningIcon>\n  <i class=\"text-warning\"\n     [ngClass]=\"[icons.warning]\"\n     title=\"To upgrade, you need minimum 2 mgr daemons.\">\n  </i>\n</ng-template>\n\n<ng-template #checkingForUpgradeStatus>\n  <div class=\"d-flex flex-column justify-content-center align-items-center\"\n       *ngIf=\"!errorMessage; else upgradeStatusError\">\n    <button class=\"btn btn-accent mt-2 mb-4\"\n            id=\"upgrade\"\n            aria-label=\"Upgrade now\"\n            [disabled]=\"true\"\n            i18n>Checking for upgrades\n      <i [ngClass]=\"[icons.spin, icons.spinner]\"></i>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #loadingDetails>\n  <div class=\"w-50\"\n       *ngIf=\"!errorMessage; else upgradeInfoError\">\n    <span class=\"text-info justify-content-center align-items-center\"\n          i18n>Fetching registry informations\n      <i [ngClass]=\"[icons.spin, icons.spinner]\"></i>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #upgradeStatusError>\n  <div class=\"d-flex flex-column justify-content-center align-items-center\">\n    <span class=\"text-danger mt-2 mb-4\"\n          id=\"upgrade-status-error\"\n          i18n>\n      <i [ngClass]=\"[icons.danger]\"></i>\n      {{ errorMessage }}\n    </span>\n    <a class=\"link-primary mb-2\"\n       (click)=\"startUpgradeModal()\"\n       i18n>Upgrade using custom image...</a>\n  </div>\n</ng-template>\n\n<ng-template #upgradeInfoError>\n  <span class=\"text-danger justify-content-center align-items-center\"\n        i18n>\n    <i [ngClass]=\"[icons.danger]\"></i>\n    Failed to fetch registry informations\n  </span>\n</ng-template>\n\n<ng-template #upgradeProgress>\n  <div class=\"d-flex flex-column justify-content-center align-items-center mt-2\">\n    <h5 i18n>\n      <i [ngClass]=\"[icons.spin, icons.spinner]\"></i>\n      Upgrade in progress {{executingTasks?.progress}}%</h5>\n    <a class=\"mt-2 link-primary mb-2\"\n       routerLink=\"/upgrade/progress\"\n       i18n>View Details...</a>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, ReplaySubject, Subscription, of } from 'rxjs';\nimport { catchError, shareReplay, switchMap } from 'rxjs/operators';\nimport { DaemonService } from '~/app/shared/api/daemon.service';\nimport { HealthService } from '~/app/shared/api/health.service';\nimport { UpgradeService } from '~/app/shared/api/upgrade.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { Daemon } from '~/app/shared/models/daemon.interface';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { UpgradeInfoInterface } from '~/app/shared/models/upgrade.interface';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { Router } from '@angular/router';\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\n\n@Component({\n  selector: 'cd-upgrade',\n  templateUrl: './upgrade.component.html',\n  styleUrls: ['./upgrade.component.scss']\n})\nexport class UpgradeComponent implements OnInit, OnDestroy {\n  version: string;\n  info$: Observable<UpgradeInfoInterface>;\n  permission: Permission;\n  healthData$: Observable<any>;\n  daemons$: Observable<Daemon[]>;\n  fsid$: Observable<any>;\n  modalRef: NgbModalRef;\n  upgradableVersions: string[];\n  errorMessage: string;\n  executingTasks: ExecutingTask;\n  interval = new Subscription();\n\n  columns: CdTableColumn[] = [];\n\n  icons = Icons;\n\n  upgradeStatus$: Observable<any>;\n  subject = new ReplaySubject<any>();\n  private subs = new Subscription();\n\n  constructor(\n    private summaryService: SummaryService,\n    private upgradeService: UpgradeService,\n    private healthService: HealthService,\n    private daemonService: DaemonService,\n    private notificationService: NotificationService,\n    private router: Router,\n    private refreshIntervalService: RefreshIntervalService\n  ) {}\n\n  ngOnInit(): void {\n    this.upgradeStatus$ = this.subject.pipe(\n      switchMap(() => this.upgradeService.status()),\n      shareReplay(1)\n    );\n\n    this.columns = [\n      {\n        name: $localize`Daemon name`,\n        prop: 'daemon_name',\n        flexGrow: 1,\n        filterable: true\n      },\n      {\n        name: $localize`Version`,\n        prop: 'version',\n        flexGrow: 1,\n        filterable: true\n      }\n    ];\n\n    this.subs.add(\n      this.summaryService.subscribe((summary) => {\n        const version = summary.version.replace('ceph version ', '').split('-');\n        this.version = version[0];\n        this.executingTasks = summary.executing_tasks.filter((tasks) =>\n          tasks.name.includes('progress/Upgrade')\n        )[0];\n      })\n    );\n\n    this.interval = this.refreshIntervalService.intervalData$.subscribe(() => {\n      this.fetchStatus();\n    });\n\n    this.info$ = this.upgradeService.listCached().pipe(\n      catchError((err) => {\n        err.preventDefault();\n        this.errorMessage = $localize`Not retrieving upgrades`;\n        this.notificationService.show(\n          NotificationType.error,\n          this.errorMessage,\n          err.error.detail || err.error.message\n        );\n        return of(null);\n      })\n    );\n\n    this.healthData$ = this.healthService.getMinimalHealth();\n    this.daemons$ = this.daemonService.list(this.upgradeService.upgradableServiceTypes);\n    this.fsid$ = this.healthService.getClusterFsid();\n  }\n\n  startUpgradeModal() {\n    this.modalRef = this.upgradeService.startUpgradeModal();\n  }\n\n  fetchStatus() {\n    this.subject.next();\n  }\n\n  upgradeNow(version: string) {\n    this.upgradeService.start(version).subscribe({\n      error: (error) => {\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`Failed to start the upgrade`,\n          error\n        );\n      },\n      complete: () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Started upgrading the cluster`\n        );\n        this.fetchStatus();\n        this.router.navigate(['/upgrade/progress']);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.interval?.unsubscribe();\n    this.subs?.unsubscribe();\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\"\n     *ngIf=\"orchStatus$ | async as orchStatus\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form #frm=\"ngForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"form\"\n          novalidate>\n      <div i18n=\"form title|Example: Create Volume@@formTitle\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n      <div class=\"form-item\">\n        <ng-container *ngIf=\"!orchStatus.available\">\n          <cd-alert-panel type=\"info\"\n                          spacingClass=\"mb-2\"\n                          i18n\n                          *ngIf=\"!editing\">Orchestrator is not configured. Deploy MDS daemons manually after creating the volume.</cd-alert-panel>\n        </ng-container>\n\n        <cd-alert-panel type=\"info\"\n                        spacingClass=\"mb-2\"\n                        i18n\n                        *ngIf=\"editing && disableRename\">\n          <p>The File System can only be renamed if it is shutdown and `refuse_client_session` is set to true.\n            Follow the steps below in the command line and refresh the page:</p>\n          <cd-code-block [codes]=\"[fsFailCmd]\"></cd-code-block>\n          <cd-code-block [codes]=\"[fsSetCmd]\"></cd-code-block>\n        </cd-alert-panel>\n      </div>\n        <!-- Name -->\n        <div class=\"form-item\">\n          <cds-text-label for=\"name\"\n                          cdRequiredField=\"Name\"\n                          [invalid]=\"!form.controls.name.valid && form.controls.name.dirty\"\n                          [invalidText]=\"nameError\"\n                          i18n>Name\n            <input cdsText\n                   placeholder=\"Name...\"\n                   i18n-placeholder\n                   id=\"name\"\n                   name=\"name\"\n                   formControlName=\"name\"\n                   [invalid]=\"!form.controls.name.valid && form.controls.name.dirty\"\n                   autofocus>\n          </cds-text-label>\n          <ng-template #nameError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('name', formDir, 'required')\"\n                  i18n>This field is required!</span>\n            <span *ngIf=\"form.showError('name', formDir, 'pattern')\"\n                  class=\"invalid-feedback\"\n                  i18n>File System name should start with a letter or dot (.) and can only contain letters, numbers, '.', '-' or '_'</span>\n          </ng-template>\n        </div>\n\n        <div class=\"form-item\"\n             *ngIf=\"!editing\">\n          <cds-checkbox id=\"customPools\"\n                        name=\"customPools\"\n                        formControlName=\"customPools\"\n                        i18n>Use existing pools\n            <cd-help-text>Allows you to use replicated pools with 'cephfs' application tag that are already created.</cd-help-text>\n          </cds-checkbox>\n\n          <cd-alert-panel *ngIf=\"pools.length < 2\"\n                          type=\"info\"\n                          spacingClass=\"mt-1\"\n                          i18n>\n            You need to have atleast 2 pools that are empty, applied with cephfs label and not erasure-coded.\n          </cd-alert-panel>\n        </div>\n\n        <!-- Data pool -->\n        <div class=\"form-item\"\n             *ngIf=\"form.get('customPools')?.value || editing\">\n          <cds-text-label for=\"dataPool\"\n                          i18n\n                          *ngIf=\"editing\">Data pool\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Pool name...\"\n                   id=\"dataPool\"\n                   name=\"dataPool\"\n                   formControlName=\"dataPool\">\n          </cds-text-label>\n          <cds-select label=\"Data pool\"\n                      for=\"dataPool\"\n                      name=\"dataPool\"\n                      id=\"dataPool\"\n                      formControlName=\"dataPool\"\n                      (valueChange)=\"onPoolChange($event)\"\n                      cdRequiredField=\"Data pool\"\n                      [invalid]=\"!form.controls.dataPool.valid && form.controls.dataPool.dirty\"\n                      [invalidText]=\"dataPoolError\"\n                      *ngIf=\"!editing\">\n            <option *ngIf=\"dataPools === null\"\n                    [ngValue]=\"null\"\n                    i18n>Loading...</option>\n            <option *ngIf=\"dataPools !== null && dataPools?.length === 0\"\n                    [ngValue]=\"null\"\n                    i18n>-- No cephfs pools available --</option>\n            <option *ngIf=\"dataPools !== null && dataPools?.length > 0\"\n                    [ngValue]=\"null\"\n                    i18n>-- Select a pool --</option>\n            <option *ngFor=\"let pool of dataPools\"\n                    [value]=\"pool?.pool_name\">{{ pool?.pool_name }}</option>\n          </cds-select>\n          <ng-template #dataPoolError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('dataPool', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </ng-template>\n        </div>\n\n        <!-- Metadata pool -->\n        <div class=\"form-item\"\n             *ngIf=\"form.get('customPools')?.value || editing\">\n          <cds-text-label for=\"metadataPool\"\n                          i18n\n                          *ngIf=\"editing\">Metadata pool\n            <input cdsText\n                   type=\"text\"\n                   placeholder=\"Pool name...\"\n                   id=\"metadataPool\"\n                   name=\"metadataPool\"\n                   formControlName=\"metadataPool\">\n          </cds-text-label>\n          <cds-select label=\"Metadata pool\"\n                      for=\"metadataPool\"\n                      name=\"metadataPool\"\n                      id=\"metadataPool\"\n                      formControlName=\"metadataPool\"\n                      cdRequiredField=\"Metadata pool\"\n                      [invalid]=\"!form.controls.metadataPool.valid && form.controls.metadataPool.dirty\"\n                      [invalidText]=\"metadataPoolError\"\n                      (valueChange)=\"onPoolChange($event, true)\"\n                      *ngIf=\"!editing\">\n            <option *ngIf=\"metadatPools === null\"\n                    [ngValue]=\"null\"\n                    i18n>Loading...</option>\n            <option *ngIf=\"metadatPools !== null && metadatPools?.length === 0\"\n                    [ngValue]=\"null\"\n                    i18n>-- No cephfs pools available --</option>\n            <option *ngIf=\"metadatPools !== null && metadatPools?.length > 0\"\n                    [ngValue]=\"null\"\n                    i18n>-- Select a pool --</option>\n            <option *ngFor=\"let pool of metadatPools\"\n                    [value]=\"pool?.pool_name\">{{ pool?.pool_name }}</option>\n          </cds-select>\n          <ng-template #metadataPoolError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"form.showError('metadataPool', formDir, 'required')\"\n                  i18n>This field is required!</span>\n          </ng-template>\n        </div>\n\n        <ng-container *ngIf=\"orchStatus.available\">\n          <!-- Placement -->\n          <div class=\"form-item\"\n               *ngIf=\"!editing\">\n            <cds-select label=\"Placement\"\n                        for=\"placement\"\n                        formControlName=\"placement\"\n                        name=\"placement\"\n                        id=\"placement\"\n                        i18n>\n              <option value=\"hosts\">Hosts</option>\n              <option value=\"label\">Labels</option>\n            </cds-select>\n          </div>\n\n          <ng-container *ngIf=\"hostsAndLabels$ | async as data\">\n          <!-- Label -->\n          <div *ngIf=\"form.controls.placement.value === 'label' && !editing\"\n               class=\"form-item\">\n            <cds-combo-box type=\"multi\"\n                           selectionFeedback=\"top-after-reopen\"\n                           label=\"Label\"\n                           for=\"label\"\n                           name=\"label\"\n                           formControlName=\"label\"\n                           id=\"label\"\n                           placeholder=\"Select labels...\"\n                           [appendInline]=\"true\"\n                           [items]=\"data.labels\"\n                           i18n-placeholder\n                           (selected)=\"multiSelector($event, 'label')\"\n                           [invalid]=\"form.controls.label.invalid && (form.controls.label.dirty)\"\n                           [invalidText]=\"labelError\"\n                           cdRequiredField=\"Label\"\n                           cdDynamicInputCombobox\n                           (updatedItems)=\"data.labels = $event\"\n                           i18n>\n              <cds-dropdown-list></cds-dropdown-list>\n            </cds-combo-box>\n            <ng-template #labelError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('label', frm, 'required')\"\n                    i18n>This field is required.</span>\n            </ng-template>\n          </div>\n\n          <!-- Hosts -->\n          <div *ngIf=\"form.controls.placement.value === 'hosts' && !editing\"\n               class=\"form-item\">\n            <cds-combo-box type=\"multi\"\n                           selectionFeedback=\"top-after-reopen\"\n                           label=\"Hosts\"\n                           for=\"hosts\"\n                           name=\"hosts\"\n                           formControlName=\"hosts\"\n                           id=\"hosts\"\n                           placeholder=\"Select hosts...\"\n                           i18n-placeholder\n                           [appendInline]=\"true\"\n                           [items]=\"data.hosts\"\n                           (selected)=\"multiSelector($event, 'hosts')\"\n                           i18n>\n              <cds-dropdown-list></cds-dropdown-list>\n            </cds-combo-box>\n          </div>\n        </ng-container>\n      </ng-container>\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"formDir\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            [disabled]=\"editing ? disableRename: false\"\n                            wrappingClass=\"text-right\"></cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport _ from 'lodash';\n\nimport { NgbNav, NgbTooltip, NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\nimport { forkJoin, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CephfsService } from '~/app/shared/api/cephfs.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { Pool } from '../../pool/pool';\nimport { Host } from '~/app/shared/models/host.interface';\n\n@Component({\n  selector: 'cd-cephfs-form',\n  templateUrl: './cephfs-form.component.html',\n  styleUrls: ['./cephfs-form.component.scss']\n})\nexport class CephfsVolumeFormComponent extends CdForm implements OnInit {\n  @ViewChild('crushInfoTabs') crushInfoTabs: NgbNav;\n  @ViewChild('crushDeletionBtn') crushDeletionBtn: NgbTooltip;\n  @ViewChild('ecpInfoTabs') ecpInfoTabs: NgbNav;\n  @ViewChild('ecpDeletionBtn') ecpDeletionBtn: NgbTooltip;\n  @ViewChild(NgbTypeahead, { static: false })\n  typeahead: NgbTypeahead;\n\n  labelFocus = new Subject<string>();\n  labelClick = new Subject<string>();\n\n  orchStatus$: Observable<any>;\n\n  permission: Permission;\n  form: CdFormGroup;\n  action: string;\n  resource: string;\n  editing: boolean;\n  icons = Icons;\n  hosts: any;\n  labels: any;\n  hasOrchestrator: boolean;\n  currentVolumeName: string;\n  fsId: number;\n  disableRename: boolean = true;\n  hostsAndLabels$: Observable<{ hosts: any[]; labels: any[] }>;\n  pools: Pool[] = [];\n  dataPools: Pool[] = [];\n  metadatPools: Pool[] = [];\n\n  fsFailCmd: string;\n  fsSetCmd: string;\n\n  selectedLabels: string[] = [];\n  selectedHosts: string[] = [];\n\n  constructor(\n    private router: Router,\n    private taskWrapperService: TaskWrapperService,\n    private orchService: OrchestratorService,\n    private formBuilder: CdFormBuilder,\n    public actionLabels: ActionLabelsI18n,\n    private hostService: HostService,\n    private cephfsService: CephfsService,\n    private route: ActivatedRoute,\n    private poolService: PoolService\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/cephfs/fs/${URLVerbs.EDIT}`);\n    this.action = this.editing ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n    this.resource = $localize`File System`;\n    this.createForm();\n  }\n\n  private createForm() {\n    this.form = this.formBuilder.group({\n      name: new FormControl('', {\n        validators: [\n          Validators.pattern(/^(?:[.][A-Za-z0-9_-]+|[A-Za-z][.A-Za-z0-9_-]*)$/),\n          Validators.required\n        ]\n      }),\n      placement: [''],\n      hosts: [[]],\n      label: [\n        null,\n        [\n          CdValidators.requiredIf({\n            placement: 'label',\n            unmanaged: false\n          })\n        ]\n      ],\n      unmanaged: [false],\n      customPools: [false],\n      dataPool: [\n        null,\n        CdValidators.requiredIf({\n          customPools: true\n        })\n      ],\n      metadataPool: [\n        null,\n        CdValidators.requiredIf({\n          customPools: true\n        })\n      ]\n    });\n    this.orchService.status().subscribe((status) => {\n      this.hasOrchestrator = status.available;\n      this.form.get('placement').setValue(this.hasOrchestrator ? 'hosts' : '');\n    });\n  }\n\n  ngOnInit() {\n    if (this.editing) {\n      this.route.params.subscribe((params: { id: string }) => {\n        this.fsId = Number(params.id);\n      });\n\n      this.cephfsService.getCephfs(this.fsId).subscribe((resp: object) => {\n        this.currentVolumeName = resp['cephfs']['name'];\n        this.form.get('name').setValue(this.currentVolumeName);\n        const dataPool =\n          resp['cephfs'].pools.find((pool: Pool) => pool.type === 'data')?.pool || '';\n        const metaPool =\n          resp['cephfs'].pools.find((pool: Pool) => pool.type === 'metadata')?.pool || '';\n        this.form.get('dataPool').setValue(dataPool);\n        this.form.get('metadataPool').setValue(metaPool);\n\n        this.form.get('dataPool').disable();\n        this.form.get('metadataPool').disable();\n\n        this.disableRename = !(\n          !resp['cephfs']['flags']['joinable'] && resp['cephfs']['flags']['refuse_client_session']\n        );\n        if (this.disableRename) {\n          this.form.get('name').disable();\n          this.fsFailCmd = `ceph fs fail ${this.currentVolumeName}`;\n          this.fsSetCmd = `ceph fs set ${this.currentVolumeName} refuse_client_session true`;\n        }\n      });\n    } else {\n      forkJoin({\n        usedPools: this.cephfsService.getUsedPools(),\n        pools: this.poolService.getList()\n      }).subscribe(({ usedPools, pools }) => {\n        // filtering pools if\n        // * pool is labelled with cephfs\n        // * its not already used by cephfs\n        // * its not erasure coded\n        // * and only if its empty\n        const filteredPools = Object.values(pools).filter(\n          (pool: Pool) =>\n            this.cephfsService.isCephFsPool(pool) &&\n            !usedPools.includes(pool.pool) &&\n            pool.type !== 'erasure' &&\n            pool.stats.bytes_used.latest === 0\n        );\n        if (filteredPools.length < 2) this.form.get('customPools').disable();\n        this.pools = filteredPools;\n        this.metadatPools = this.dataPools = this.pools;\n      });\n\n      this.hostsAndLabels$ = forkJoin({\n        hosts: this.hostService.getAllHosts(),\n        labels: this.hostService.getLabels()\n      }).pipe(\n        map(({ hosts, labels }) => ({\n          hosts: hosts.map((host: Host) => ({ content: host['hostname'] })),\n          labels: labels.map((label: string) => ({ content: label }))\n        }))\n      );\n    }\n    this.orchStatus$ = this.orchService.status();\n    this.loadingReady();\n  }\n\n  onPoolChange(poolName: string, metadataChange = false) {\n    if (!metadataChange) {\n      this.metadatPools = this.pools.filter((pool: Pool) => pool.pool_name != poolName);\n    } else this.dataPools = this.pools.filter((pool: Pool) => pool.pool_name !== poolName);\n  }\n\n  multiSelector(event: any, field: 'label' | 'hosts') {\n    if (field === 'label') this.selectedLabels = event.map((label: any) => label.content);\n    else this.selectedHosts = event.map((host: any) => host.content);\n  }\n\n  submit() {\n    const volumeName = this.form.get('name').value;\n    const BASE_URL = 'cephfs';\n\n    if (this.editing) {\n      this.taskWrapperService\n        .wrapTaskAroundCall({\n          task: new FinishedTask(`${BASE_URL}/${URLVerbs.EDIT}`, {\n            volumeName: volumeName\n          }),\n          call: this.cephfsService.rename(this.currentVolumeName, volumeName)\n        })\n        .subscribe({\n          error: () => {\n            this.form.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.router.navigate([`${BASE_URL}/fs`]);\n          }\n        });\n    } else {\n      let values = this.form.getRawValue();\n      const serviceSpec: object = {\n        placement: {},\n        unmanaged: values['unmanaged']\n      };\n      switch (values['placement']) {\n        case 'hosts':\n          if (values['hosts'].length > 0) {\n            serviceSpec['placement']['hosts'] = this.selectedHosts;\n          }\n          break;\n        case 'label':\n          serviceSpec['placement']['label'] = this.selectedLabels;\n          break;\n      }\n\n      const dataPool = values['dataPool'];\n      const metadataPool = values['metadataPool'];\n\n      const self = this;\n      let taskUrl = `${BASE_URL}/${URLVerbs.CREATE}`;\n      this.taskWrapperService\n        .wrapTaskAroundCall({\n          task: new FinishedTask(taskUrl, {\n            volumeName: volumeName\n          }),\n          call: this.cephfsService.create(\n            this.form.get('name').value,\n            serviceSpec,\n            dataPool,\n            metadataPool\n          )\n        })\n        .subscribe({\n          error() {\n            self.form.setErrors({ cdSubmitButton: true });\n          },\n          complete: () => {\n            this.router.navigate([`${BASE_URL}/fs`]);\n          }\n        });\n    }\n  }\n}\n","<div *ngIf=\"upgradeStatus$ | async as upgradeStatus\">\n  <ng-container>\n    <cd-progress [value]=\"executingTask?.progress\"\n                 [label]=\"executingTask?.description\"\n                 [status]=\"upgradeStatus.in_progress ? 'in-progress' : 'paused'\"\n                 [subLabel]=\"upgradeStatus.which\"\n                 [completedItems]=\"upgradeStatus.services_complete\"\n                 [actionName]=\"'upgrading'\"\n                 [helperText]=\"upgradeStatus.progress\"\n                 [footerText]=\"upgradeStatus.message\"\n                 [isPaused]=\"upgradeStatus.is_paused\">\n    </cd-progress>\n\n    <div class=\"text-center mt-3\">\n      <button class=\"btn btn-light\"\n              aria-label=\"Go back\"\n              routerLink=\"/upgrade\"\n              i18n>Back</button>\n      <button *ngIf=\"upgradeStatus.in_progress && !upgradeStatus.is_paused\"\n              (click)=\"pauseUpgrade()\"\n              class=\"btn btn-light m-2\"\n              aria-label=\"Pause Upgrade\"\n              i18n>Pause</button>\n      <button *ngIf=\"upgradeStatus.in_progress && upgradeStatus.is_paused\"\n              (click)=\"resumeUpgrade()\"\n              class=\"btn btn-light m-2\"\n              aria-label=\"Resume Upgrade\"\n              i18n>Resume</button>\n      <button *ngIf=\"upgradeStatus.in_progress\"\n              (click)=\"stopUpgradeModal()\"\n              class=\"btn btn-danger\"\n              aria-label=\"Stop Upgrade\"\n              i18n>Stop</button>\n    </div>\n  </ng-container>\n</div>\n\n<legend class=\"cd-header\"\n        i18n>Cluster logs</legend>\n  <cd-logs [showAuditLogs]=\"false\"\n           [showDaemonLogs]=\"false\"\n           [showNavLinks]=\"false\"\n           [showFilterTools]=\"false\"\n           [showDownloadCopyButton]=\"false\"\n           defaultTab=\"cluster-logs\"\n           [scrollable]=\"true\"></cd-logs>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { UpgradeService } from '~/app/shared/api/upgrade.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { RefreshIntervalService } from '~/app/shared/services/refresh-interval.service';\nimport { UpgradeStatusInterface } from '~/app/shared/models/upgrade.interface';\n\n@Component({\n  selector: 'cd-upgrade-progress',\n  templateUrl: './upgrade-progress.component.html',\n  styleUrls: ['./upgrade-progress.component.scss']\n})\nexport class UpgradeProgressComponent implements OnInit, OnDestroy {\n  permission: Permission;\n  icons = Icons;\n  modalRef: NgbModalRef;\n  interval = new Subscription();\n  executingTask: ExecutingTask;\n\n  upgradeStatus$: Observable<UpgradeStatusInterface>;\n  subject = new ReplaySubject<UpgradeStatusInterface>();\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private upgradeService: UpgradeService,\n    private notificationService: NotificationService,\n    private modalService: ModalCdsService,\n    private summaryService: SummaryService,\n    private router: Router,\n    private refreshIntervalService: RefreshIntervalService\n  ) {\n    this.permission = this.authStorageService.getPermissions().configOpt;\n  }\n\n  ngOnInit() {\n    this.upgradeStatus$ = this.subject.pipe(\n      switchMap(() => this.upgradeService.status()),\n      tap((status: UpgradeStatusInterface) => {\n        if (!status.in_progress) {\n          this.router.navigate(['/upgrade']);\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.interval = this.refreshIntervalService.intervalData$.subscribe(() => {\n      this.fetchStatus();\n    });\n\n    this.summaryService.subscribe((summary) => {\n      this.executingTask = summary.executing_tasks.filter((tasks) =>\n        tasks.name.includes('progress/Upgrade')\n      )[0];\n    });\n  }\n\n  pauseUpgrade() {\n    this.upgradeService.pause().subscribe({\n      error: (error) => {\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`Failed to pause the upgrade`,\n          error\n        );\n      },\n      complete: () => {\n        this.notificationService.show(NotificationType.success, $localize`The upgrade is paused`);\n        this.fetchStatus();\n      }\n    });\n  }\n\n  fetchStatus() {\n    this.subject.next();\n  }\n\n  resumeUpgrade(modal = false) {\n    this.upgradeService.resume().subscribe({\n      error: (error) => {\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`Failed to resume the upgrade`,\n          error\n        );\n      },\n      complete: () => {\n        this.fetchStatus();\n        this.notificationService.show(NotificationType.success, $localize`Upgrade is resumed`);\n        if (modal) {\n          this.modalRef.close();\n        }\n      }\n    });\n  }\n\n  stopUpgradeModal() {\n    // pause the upgrade meanwhile we get stop confirmation from user\n    this.pauseUpgrade();\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Upgrade',\n      actionDescription: 'stop',\n      submitAction: () => this.stopUpgrade(),\n      callBackAtionObservable: () => this.resumeUpgrade(true)\n    });\n  }\n\n  stopUpgrade() {\n    this.modalRef.close();\n    this.upgradeService.stop().subscribe({\n      error: (error) => {\n        this.notificationService.show(\n          NotificationType.error,\n          $localize`Failed to stop the upgrade`,\n          error\n        );\n      },\n      complete: () => {\n        this.notificationService.show(NotificationType.success, $localize`The upgrade is stopped`);\n        this.router.navigate(['/upgrade']);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.interval?.unsubscribe();\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container i18n=\"form title\"\n                class=\"modal-title\">{{ action | titlecase }} Cluster\n  </ng-container>\n  <ng-container class=\"modal-content\">\n    <form name=\"remoteClusterForm\"\n          #frm=\"ngForm\"\n          [formGroup]=\"remoteClusterForm\">\n      <div class=\"modal-body\">\n        <cd-alert-panel *ngIf=\"connectionVerified !== undefined && !connectionVerified && connectionMessage !== 'Connection refused'\"\n                        type=\"error\"\n                        spacingClass=\"mb-3\"\n                        i18n>{{ connectionMessage }}\n        </cd-alert-panel>\n        <cd-alert-panel *ngIf=\"connectionVerified !== undefined && connectionVerified\"\n                        type=\"success\"\n                        spacingClass=\"mb-3\"\n                        i18n>{{ connectionMessage }}\n        </cd-alert-panel>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"remoteClusterUrl\"\n                 i18n>Cluster API URL\n            <cd-helper>\n              <span>\n                <p>Enter the Dashboard API URL. You can retrieve it from the CLI with: <b>{{ clusterApiUrlCmd }} </b>\n                  <cd-copy-2-clipboard-button [source]=\"clusterApiUrlCmd\"\n                                              [byId]=\"false\"></cd-copy-2-clipboard-button>\n                </p>\n              </span>\n            </cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input class=\"form-control\"\n                   type=\"text\"\n                   placeholder=\"https://localhost:4202\"\n                   id=\"remoteClusterUrl\"\n                   name=\"remoteClusterUrl\"\n                   formControlName=\"remoteClusterUrl\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('remoteClusterUrl', frm, 'required')\"\n                  i18n>This field is required.\n            </span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('remoteClusterUrl', frm, 'endpoint')\"\n                  i18n>Please enter a valid URL.\n            </span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('remoteClusterUrl', frm, 'hubUrlCheck')\"\n                  i18n>The hub cluster cannot be connected.\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"clusterAlias\"\n                 i18n>Alias Name\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"clusterAlias\"\n                   name=\"clusterAlias\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   placeholder=\"Name/Text to uniquely identify cluster\"\n                   formControlName=\"clusterAlias\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('clusterAlias', frm, 'required')\"\n                  i18n>This field is required.\n            </span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('clusterAlias', frm, 'uniqueName')\"\n                  i18n>The chosen alias name is already in use.\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group row\"\n             *ngIf=\"action !== 'edit'\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"username\"\n                 i18n>Username\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"username\"\n                   name=\"username\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   formControlName=\"username\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('username', frm, 'required')\"\n                  i18n>This field is required.\n            </span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('username', frm, 'uniqueUrlandUser')\"\n                  i18n>A cluster with the chosen user is already connected.\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group row\"\n             *ngIf=\"action !== 'edit'\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"password\"\n                 i18n>Password\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"password\"\n                     name=\"password\"\n                     class=\"form-control\"\n                     type=\"password\"\n                     formControlName=\"password\">\n              <span class=\"input-group-button\">\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"password\">\n                </button>\n                <cd-copy-2-clipboard-button source=\"password\">\n                </cd-copy-2-clipboard-button>\n              </span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"remoteClusterForm.showError('password', frm, 'requiredNotEdit')\"\n                    i18n>This field is required.\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group row\"\n             *ngIf=\"action !== 'edit'\">\n          <label class=\"cd-col-form-label\"\n                 for=\"ttl\"\n                 i18n>Login Expiration</label>\n          <div class=\"cd-col-form-input\">\n            <select class=\"form-select\"\n                    id=\"ttl\"\n                    formControlName=\"ttl\"\n                    name=\"ttl\">\n              <option value=\"1\">1 day</option>\n              <option value=\"7\">1 week</option>\n              <option value=\"15\"\n                      [selected]=\"true\">15 days</option>\n              <option value=\"30\">30 days</option>\n            </select>\n          </div>\n        </div>\n        <!--\n        <div class=\"form-group row\"\n             *ngIf=\"action !== 'edit'\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"apiToken\"\n                 i18n>Token\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"apiToken\"\n                   name=\"apiToken\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   formControlName=\"apiToken\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('apiToken', frm, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n        <div class=\"form-group row\"\n             *ngIf=\"action !== 'edit'\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input class=\"custom-control-input\"\n                     id=\"showToken\"\n                     type=\"checkbox\"\n                     [checked]=\"showToken\"\n                     (change)=\"toggleToken()\"\n                     formControlName=\"showToken\">\n              <label class=\"custom-control-label\"\n                     for=\"showToken\"\n                     i18n>Auth with token</label>\n            </div>\n          </div>\n        </div> -->\n        <!-- ssl -->\n        <div class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input class=\"custom-control-input\"\n                     id=\"ssl\"\n                     type=\"checkbox\"\n                     formControlName=\"ssl\">\n              <label class=\"custom-control-label\"\n                     for=\"ssl\"\n                     i18n>SSL</label>\n            </div>\n          </div>\n        </div>\n\n        <!-- ssl_cert -->\n        <div *ngIf=\"remoteClusterForm.controls.ssl.value\"\n             class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"ssl_cert\">\n            <span i18n>Certificate</span>\n            <cd-helper i18n>The SSL certificate in PEM format.</cd-helper>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <textarea id=\"ssl_cert\"\n                      class=\"form-control resize-vertical text-monospace text-pre\"\n                      formControlName=\"ssl_cert\"\n                      rows=\"5\">\n            </textarea>\n            <input type=\"file\"\n                   (change)=\"fileUpload($event.target.files, 'ssl_cert')\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('ssl_cert', frm, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"remoteClusterForm.showError('ssl_cert', frm, 'pattern')\"\n                  i18n>Invalid SSL certificate.</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                              [submitText]=\"(action | titlecase) + ' ' + 'Cluster'\"\n                              [form]=\"remoteClusterForm\">\n        </cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { MultiCluster } from '~/app/shared/models/multi-cluster';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-multi-cluster-form',\n  templateUrl: './multi-cluster-form.component.html',\n  styleUrls: ['./multi-cluster-form.component.scss']\n})\nexport class MultiClusterFormComponent implements OnInit, OnDestroy {\n  @Output()\n  submitAction = new EventEmitter();\n  readonly endpoints = /^((https?:\\/\\/)|(www.))(?:([a-zA-Z]+)|(\\d+\\.\\d+.\\d+.\\d+)):\\d{2,5}\\/?$/;\n  readonly ipv4Rgx = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i;\n  readonly ipv6Rgx = /^(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4}$/i;\n  clusterApiUrlCmd = 'ceph mgr services';\n  remoteClusterForm: CdFormGroup;\n  connectionVerified: boolean;\n  connectionMessage = '';\n  private subs = new Subscription();\n  action: string;\n  cluster: MultiCluster;\n  clustersData: MultiCluster[];\n  clusterAliasNames: string[];\n  clusterUrls: string[];\n  clusterUsers: string[];\n  clusterUrlUserMap: Map<string, string>;\n  hubUrl: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public notificationService: NotificationService,\n    private multiClusterService: MultiClusterService\n  ) {\n    this.subs.add(\n      this.multiClusterService.subscribe((resp: any) => {\n        this.hubUrl = resp['hub_url'];\n      })\n    );\n    this.createForm();\n  }\n  ngOnInit(): void {\n    if (this.action === 'edit') {\n      this.remoteClusterForm.get('remoteClusterUrl').setValue(this.cluster.url);\n      this.remoteClusterForm.get('clusterAlias').setValue(this.cluster.cluster_alias);\n      this.remoteClusterForm.get('ssl').setValue(this.cluster.ssl_verify);\n      this.remoteClusterForm.get('ssl_cert').setValue(this.cluster.ssl_certificate);\n    }\n    if (this.action === 'reconnect') {\n      this.remoteClusterForm.get('remoteClusterUrl').setValue(this.cluster.url);\n      this.remoteClusterForm.get('remoteClusterUrl').disable();\n      this.remoteClusterForm.get('clusterAlias').setValue(this.cluster.cluster_alias);\n      this.remoteClusterForm.get('clusterAlias').disable();\n      this.remoteClusterForm.get('username').setValue(this.cluster.user);\n      this.remoteClusterForm.get('username').disable();\n      this.remoteClusterForm.get('ssl').setValue(this.cluster.ssl_verify);\n      this.remoteClusterForm.get('ssl_cert').setValue(this.cluster.ssl_certificate);\n    }\n    [this.clusterAliasNames, this.clusterUrls, this.clusterUsers] = [\n      'cluster_alias',\n      'url',\n      'user'\n    ].map((prop) => this.clustersData?.map((cluster) => cluster[prop]));\n  }\n\n  createForm() {\n    this.remoteClusterForm = new CdFormGroup({\n      username: new FormControl('', [\n        CdValidators.custom('uniqueUrlandUser', (username: string) => {\n          let remoteClusterUrl = '';\n          if (\n            this.remoteClusterForm &&\n            this.remoteClusterForm.getValue('remoteClusterUrl') &&\n            this.remoteClusterForm.getValue('remoteClusterUrl').endsWith('/')\n          ) {\n            remoteClusterUrl = this.remoteClusterForm.getValue('remoteClusterUrl').slice(0, -1);\n          } else if (this.remoteClusterForm) {\n            remoteClusterUrl = this.remoteClusterForm.getValue('remoteClusterUrl');\n          }\n          return (\n            this.remoteClusterForm &&\n            this.clusterUrls?.includes(remoteClusterUrl) &&\n            this.clusterUsers?.includes(username)\n          );\n        })\n      ]),\n      password: new FormControl(\n        null,\n        CdValidators.custom('requiredNotEdit', (value: string) => {\n          return this.action !== 'edit' && !value;\n        })\n      ),\n      remoteClusterUrl: new FormControl(null, {\n        validators: [\n          CdValidators.custom('endpoint', (value: string) => {\n            if (_.isEmpty(value)) {\n              return false;\n            } else {\n              return (\n                !this.endpoints.test(value) &&\n                !this.ipv4Rgx.test(value) &&\n                !this.ipv6Rgx.test(value)\n              );\n            }\n          }),\n          CdValidators.custom('hubUrlCheck', (remoteClusterUrl: string) => {\n            return this.action === 'connect' && remoteClusterUrl?.includes(this.hubUrl);\n          }),\n          Validators.required\n        ]\n      }),\n      clusterAlias: new FormControl(null, {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (clusterAlias: string) => {\n            return (\n              (this.action === 'connect' || this.action === 'edit') &&\n              this.clusterAliasNames &&\n              this.clusterAliasNames.indexOf(clusterAlias) !== -1 &&\n              this.cluster?.cluster_alias &&\n              this.cluster.cluster_alias !== clusterAlias\n            );\n          })\n        ]\n      }),\n      ssl: new FormControl(false),\n      ttl: new FormControl(15),\n      ssl_cert: new FormControl('', {\n        validators: [\n          CdValidators.requiredIf({\n            ssl: true\n          })\n        ]\n      })\n    });\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n\n  handleError(error: any): void {\n    if (error.error.code === 'connection_refused') {\n      this.connectionVerified = false;\n      this.connectionMessage = error.error.detail;\n    } else {\n      this.connectionVerified = false;\n      this.connectionMessage = error.error.detail;\n    }\n    this.remoteClusterForm.setErrors({ cdSubmitButton: true });\n    this.notificationService.show(\n      NotificationType.error,\n      $localize`Connection to the cluster failed`\n    );\n  }\n\n  handleSuccess(message?: string): void {\n    this.notificationService.show(NotificationType.success, message);\n    this.submitAction.emit();\n    this.activeModal.close();\n  }\n\n  convertToHours(value: number): number {\n    return value * 24; // Convert days to hours\n  }\n\n  onSubmit() {\n    const url = this.remoteClusterForm.getValue('remoteClusterUrl');\n    const updatedUrl = url.endsWith('/') ? url.slice(0, -1) : url;\n    const clusterAlias = this.remoteClusterForm.getValue('clusterAlias');\n    const username = this.remoteClusterForm.getValue('username');\n    const password = this.remoteClusterForm.getValue('password');\n    const ssl = this.remoteClusterForm.getValue('ssl');\n    const ttl = this.convertToHours(this.remoteClusterForm.getValue('ttl'));\n    const ssl_certificate = this.remoteClusterForm.getValue('ssl_cert')?.trim();\n\n    const commonSubscribtion = {\n      error: (error: any) => this.handleError(error),\n      next: (response: any) => {\n        if (response === true) {\n          this.handleSuccess($localize`Cluster connected successfully`);\n        }\n      }\n    };\n\n    switch (this.action) {\n      case 'edit':\n        this.subs.add(\n          this.multiClusterService\n            .editCluster(\n              this.cluster.name,\n              url,\n              clusterAlias,\n              this.cluster.user,\n              ssl,\n              ssl_certificate\n            )\n            .subscribe({\n              ...commonSubscribtion,\n              complete: () => this.handleSuccess($localize`Cluster updated successfully`)\n            })\n        );\n        break;\n      case 'reconnect':\n        this.subs.add(\n          this.multiClusterService\n            .reConnectCluster(updatedUrl, username, password, ssl, ssl_certificate, ttl)\n            .subscribe(commonSubscribtion)\n        );\n        break;\n      case 'connect':\n        this.subs.add(\n          this.multiClusterService\n            .addCluster(\n              updatedUrl,\n              clusterAlias,\n              username,\n              password,\n              window.location.origin,\n              ssl,\n              ssl_certificate,\n              ttl\n            )\n            .subscribe(commonSubscribtion)\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  fileUpload(files: FileList, controlName: string) {\n    const file: File = files[0];\n    const reader = new FileReader();\n    reader.addEventListener('load', (event: ProgressEvent<FileReader>) => {\n      const control: AbstractControl = this.remoteClusterForm.get(controlName);\n      control.setValue(event.target.result);\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n    reader.readAsText(file, 'utf8');\n  }\n}\n","<div class=\"row\"\n     *ngIf=\"groupTitle\">\n  <div class=\"info-group-title\">\n    <span i18n\n          data-testid=\"group-title\">{{ groupTitle }}</span>\n  </div>\n</div>\n\n<div class=\"row\">\n  <ng-content></ng-content>\n</div>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-card-group',\n  templateUrl: './card-group.component.html',\n  styleUrls: ['./card-group.component.scss']\n})\nexport class CardGroupComponent {\n  @Input()\n  groupTitle = '';\n}\n","<ng-template #emptyCluster>\n  <ng-container class=\"container h-75\"\n                *ngIf=\"managedByConfig$ | async as managedByConfig\">\n    <div class=\"row h-100 justify-content-center align-items-center\">\n      <div class=\"blank-page\">\n        <i class=\"mx-auto d-block\"\n           [ngClass]=\"[icons.large, icons.wrench]\">\n        </i>\n      <div class=\"mt-4 text-center\"\n           *ngIf=\"managedByConfig['MANAGED_BY_CLUSTERS'].length === 0\">\n        <h3 class=\"fw-bold\">Connect Cluster</h3>\n        <h4 class=\"mt-3\">Upgrade your current cluster to a multi-cluster setup effortlessly.\n            Click on the \"Connect Cluster\" button to begin the process.</h4>\n      </div>\n      <div class=\"mt-4 text-center\"\n           *ngIf=\"managedByConfig['MANAGED_BY_CLUSTERS'].length > 0\">\n        <h4 class=\"mt-3\">This cluster is already managed by cluster -\n          <a target=\"_blank\"\n             [href]=\"managedByConfig['MANAGED_BY_CLUSTERS'][0]['url']\">\n             {{ managedByConfig['MANAGED_BY_CLUSTERS'][0]['fsid'] }}\n            <i class=\"fa fa-external-link\"></i>\n          </a>\n        </h4>\n      </div>\n      <div class=\"mt-4\"\n           *ngIf=\"managedByConfig['MANAGED_BY_CLUSTERS'].length === 0\">\n        <div class=\"text-center\">\n          <button class=\"btn btn-primary\"\n                  (click)=\"openRemoteClusterInfoModal()\">\n            <i class=\"mx-auto\"\n               [ngClass]=\"icons.add\">\n            </i> Connect Cluster\n          </button>\n        </div>\n      </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #nametpl>\n  <div cdstabledata>\n    <span title=\"{{cluster}}\">\n      <a href=\"#\">\n        {{cluster}}\n      </a>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #loadingTpl>\n  <div class=\"container h-75\">\n    <div class=\"row h-100 justify-content-center align-items-center\">\n      <div class=\"blank-page\">\n        <i class=\"mx-auto d-block\"\n           [ngClass]=\"[icons.large3x, icons.spinner, icons.spin]\">\n        </i>\n        <p class=\"text-center mt-3\"\n           i18n>Loading data, Please wait...</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"managedByConfig$ | async as managedByConfig\">\n  <div class=\"container-fluid h-100 p-4\"\n       *ngIf=\"isMultiCluster && managedByConfig['MANAGED_BY_CLUSTERS'].length === 0; else emptyCluster\">\n    <ng-container *ngIf=\"!loading; else loadingTpl\">\n      <cd-alert-panel type=\"error\"\n                      spacingClass=\"mb-3\"\n                      [showTitle]=\"false\"\n                      size=\"slim\"\n                      *ngIf=\"prometheusConnectionErrors.length > 0\"\n                      (dismissed)=\"onDismissed()\"\n                      [dismissible]=\"true\"\n                      i18n>\n      <div>\n        <p><strong>Could not retrieve metrics from the following clusters:</strong></p>\n        <div *ngFor=\"let cluster of prometheusConnectionErrors\">\n          <p>\n            <strong>Cluster Name:</strong> {{ cluster['cluster_alias'] }}<br>\n            <strong>Cluster ID:</strong> {{ cluster['cluster_name'] }}<br>\n            <strong>Issue:</strong> {{ cluster.reconnectionError ? cluster.reconnectionError : 'Security configuration error' }}<br>\n          </p>\n        </div>\n      </div>\n      </cd-alert-panel>\n      <cd-alert-panel type=\"info\"\n                      spacingClass=\"mb-3\"\n                      [showTitle]=\"false\"\n                      size=\"slim\"\n                      *ngIf=\"showDeletionMessage\"\n                      (dismissed)=\"onDismissed()\"\n                      [dismissible]=\"true\"\n                      i18n>\n        <p>Please note that the data for the disconnected cluster will be visible for a duration of ~ 5 minutes. After this period, it will be automatically removed.</p>\n      </cd-alert-panel>\n      <cd-card-group>\n        <div class=\"col-lg-4\">\n          <div class=\"row\">\n            <cd-card cardTitle=\"Clusters\"\n                     i18n-title\n                     class=\"col-sm-6 m-0 p-0 ps-4 pe-2\"\n                     aria-label=\"Clusters\"\n                     [fullHeight]=\"true\"\n                     *ngIf=\"queriesResults.CLUSTER_COUNT && queriesResults.CLUSTER_COUNT[0]\">\n              <span class=\"text-center\">\n                <h3 *ngIf=\"queriesResults['HEALTH_ERROR_COUNT'][0][1] === '0' && queriesResults['HEALTH_OK_COUNT'][0][1] === '0' && queriesResults['HEALTH_WARNING_COUNT'][0][1] === '0'\">{{ queriesResults.CLUSTER_COUNT[0][1] }}</h3>\n                <h3 class=\"text-danger\"\n                    *ngIf=\"queriesResults.HEALTH_ERROR_COUNT[0][1] !== '0'\">\n                  <i [ngClass]=\"icons.danger\"></i>\n                  {{ queriesResults.HEALTH_ERROR_COUNT[0][1] }}\n                </h3>\n                <h3 class=\"text-warning\"\n                    *ngIf=\"queriesResults.HEALTH_WARNING_COUNT[0][1] !== '0'\">\n                  <i [ngClass]=\"icons.warning\"></i>\n                    {{ queriesResults.HEALTH_WARNING_COUNT[0][1] }}\n                </h3>\n                <h3 class=\"text-danger\"\n                    *ngIf=\"queriesResults.HEALTH_ERROR_COUNT[0][1] !== '0'\">\n                  <i [ngClass]=\"icons.danger\"></i>\n                  {{ queriesResults.HEALTH_ERROR_COUNT[0][1] }}\n                </h3>\n                <h3 class=\"text-success\"\n                    *ngIf=\"queriesResults.HEALTH_OK_COUNT[0][1] !== '0'\">\n                  <i [ngClass]=\"icons.success\"></i>\n                    {{ queriesResults.HEALTH_OK_COUNT[0][1] }}\n                </h3>\n              </span>\n            </cd-card>\n            <cd-card cardTitle=\"Alerts\"\n                     i18n-title\n                     class=\"col-sm-6 m-0 p-0 ps-2 pe-2\"\n                     aria-label=\"Alerts\"\n                     [fullHeight]=\"true\"\n                     *ngIf=\"queriesResults['ALERTS_COUNT'] && queriesResults['ALERTS_COUNT'][0]\">\n              <span class=\"text-center\">\n                <h3 *ngIf=\"queriesResults['CRITICAL_ALERTS_COUNT'][0][1] === '0' && queriesResults['WARNING_ALERTS_COUNT'][0][1] === '0'\">\n                    {{ queriesResults['ALERTS_COUNT'][0][1] }}\n                </h3>\n                <h3 class=\"text-danger\"\n                    *ngIf=\"queriesResults['CRITICAL_ALERTS_COUNT'][0][1] !== '0'\">\n                  <i [ngClass]=\"icons.danger\"></i>\n                  {{ queriesResults['CRITICAL_ALERTS_COUNT'][0][1] }}\n                </h3>\n                <h3 class=\"text-warning\"\n                    *ngIf=\"queriesResults['WARNING_ALERTS_COUNT'][0][1] !== '0'\">\n                  <i [ngClass]=\"icons.warning\"></i>\n                    {{ queriesResults['WARNING_ALERTS_COUNT'][0][1] }}\n                </h3>\n              </span>\n            </cd-card>\n          </div>\n          <div class=\"row pt-3\">\n            <cd-card cardTitle=\"Connection Errors\"\n                     i18n-title\n                     class=\"col-sm-6 m-0 p-0 ps-4 pe-2\"\n                     aria-label=\"Connection Errors\">\n              <span class=\"text-center\">\n                <h3 [ngClass]=\"{'text-danger': connectionErrorsCount > 0}\">\n                  <i [ngClass]=\"icons.danger\"\n                     *ngIf=\"connectionErrorsCount > 0\"></i>\n                  {{ connectionErrorsCount }}\n                </h3>\n              </span>\n            </cd-card>\n            <cd-card cardTitle=\"Hosts\"\n                     i18n-title\n                     class=\"col-sm-6 m-0 p-0 ps-2 pe-2\"\n                     aria-label=\"Total number of hosts\"\n                     *ngIf=\"queriesResults['TOTAL_HOSTS'] && queriesResults['TOTAL_HOSTS'][0]\">\n              <span class=\"text-center\">\n                <h3>{{ queriesResults['TOTAL_HOSTS'][0][1] }}</h3>\n              </span>\n            </cd-card>\n          </div>\n\n          <div class=\"row pt-3\">\n            <cd-card cardTitle=\"Capacity\"\n                     i18n-title\n                     class=\"col-sm-12 m-0 p-0 ps-4 pe-2\"\n                     aria-label=\"Capacity card\"\n                     *ngIf=\"queriesResults['TOTAL_CLUSTERS_CAPACITY'] && queriesResults['TOTAL_CLUSTERS_CAPACITY'][0] && queriesResults['TOTAL_USED_CAPACITY'] && queriesResults['TOTAL_USED_CAPACITY'][0]\">\n              <ng-container class=\"ms-4 me-4\">\n                <cd-dashboard-pie [data]=\"{max: queriesResults['TOTAL_CLUSTERS_CAPACITY'][0][1], current: queriesResults['TOTAL_USED_CAPACITY'][0][1]}\"\n                                  lowThreshold=\".95\"\n                                  highThreshold=\".99\">\n                </cd-dashboard-pie>\n              </ng-container>\n            </cd-card>\n          </div>\n        </div>\n\n        <div class=\"col-sm-8 ps-2\">\n          <cd-card [cardTitle]=\"'Top ' + COUNT_OF_UTILIZATION_CHARTS + ' Cluster Utilization'\"\n                   i18n-title\n                   [fullHeight]=\"true\"\n                   aria-label=\"Cluster Utilization card\"\n                   *ngIf=\"clusters\">\n            <div class=\"ms-4 me-4 mt-0\">\n              <cd-dashboard-time-selector (selectedTime)=\"getPrometheusData($event, 'clusterUtilization')\">\n              </cd-dashboard-time-selector>\n              <cd-dashboard-area-chart  chartTitle=\"Capacity\"\n                                        [labelsArray]=\"capacityLabels\"\n                                        isMultiCluster=\"true\"\n                                        dataUnits=\"B\"\n                                        [dataArray]=\"capacityValues\"\n                                        [truncateLabel]=\"true\"\n                                        *ngIf=\"capacityLabels && capacityValues\">\n              </cd-dashboard-area-chart>\n              <cd-dashboard-area-chart chartTitle=\"IOPS\"\n                                       [labelsArray]=\"iopsLabels\"\n                                       isMultiCluster=\"true\"\n                                       dataUnits=\"\"\n                                       decimals=\"0\"\n                                       [dataArray]=\"iopsValues\"\n                                       [truncateLabel]=\"true\"\n                                       *ngIf=\"iopsLabels && iopsValues\">\n              </cd-dashboard-area-chart>\n              <cd-dashboard-area-chart chartTitle=\"Throughput\"\n                                       [labelsArray]=\"throughputLabels\"\n                                       isMultiCluster=\"true\"\n                                       dataUnits=\"B/s\"\n                                       decimals=\"2\"\n                                       [dataArray]=\"throughputValues\"\n                                       [truncateLabel]=\"true\"\n                                       *ngIf=\"throughputLabels && throughputLabels\">\n              </cd-dashboard-area-chart>\n            </div>\n          </cd-card>\n        </div>\n      </cd-card-group>\n\n      <cd-card-group>\n        <div class=\"col-lg-12 mt-3 m-0 p-0 ps-4 pe-4\">\n          <cd-table [data]=\"clusters\"\n                    [columns]=\"columns\"\n                    [limit]=\"5\"\n                    *ngIf=\"clusters\">\n          </cd-table>\n        </div>\n      </cd-card-group>\n\n      <cd-card-group>\n        <div class=\"col-lg-12 mb-4 m-0 p-0 ps-4 pe-4\">\n          <div class=\"row\">\n            <cd-card [cardTitle]=\"'Top ' + COUNT_OF_UTILIZATION_CHARTS + ' Pools Utilization'\"\n                     i18n-title\n                     aria-label=\"Pools Utilization card\"\n                     *ngIf=\"clusters\">\n              <div class=\"ms-4 me-4 mt-0\">\n                <cd-dashboard-time-selector (selectedTime)=\"getPrometheusData($event, 'poolUtilization')\">\n                </cd-dashboard-time-selector>\n                <cd-dashboard-area-chart  chartTitle=\"Capacity\"\n                                          [labelsArray]=\"poolCapacityLabels\"\n                                          dataUnits=\"B\"\n                                          isMultiCluster=\"true\"\n                                          [dataArray]=\"poolCapacityValues\"\n                                          *ngIf=\"poolCapacityLabels && poolCapacityValues\"\n                                          [truncateLabel]=\"true\">\n                </cd-dashboard-area-chart>\n                <cd-dashboard-area-chart chartTitle=\"IOPS\"\n                                         [labelsArray]=\"poolIOPSLabels\"\n                                         dataUnits=\"\"\n                                         decimals=\"0\"\n                                         isMultiCluster=\"true\"\n                                         [dataArray]=\"poolIOPSValues\"\n                                         *ngIf=\"poolIOPSLabels && poolIOPSValues\"\n                                         [truncateLabel]=\"true\">\n                </cd-dashboard-area-chart>\n                <cd-dashboard-area-chart chartTitle=\"Client Throughput\"\n                                         [labelsArray]=\"poolThroughputLabels\"\n                                         dataUnits=\"B/s\"\n                                         decimals=\"2\"\n                                         isMultiCluster=\"true\"\n                                         [dataArray]=\"poolThroughputValues\"\n                                         *ngIf=\"poolThroughputLabels && poolThroughputValues\"\n                                         [truncateLabel]=\"true\">\n                </cd-dashboard-area-chart>\n              </div>\n            </cd-card>\n          </div>\n        </div>\n      </cd-card-group>\n    </ng-container>\n  </div>\n</ng-container>\n\n<ng-template #clusterUsageTpl\n             let-row=\"data.row\">\n  <cd-usage-bar [total]=\"row.total_capacity\"\n                [used]=\"row.used_capacity\">\n  </cd-usage-bar>\n</ng-template>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { Observable, Subscription } from 'rxjs';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { MultiClusterFormComponent } from './multi-cluster-form/multi-cluster-form.component';\nimport { PrometheusService } from '~/app/shared/api/prometheus.service';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Router } from '@angular/router';\n\nimport {\n  MultiClusterPromqls as allQueries,\n  MultiClusterPromqlsForClusterUtilization as ClusterUltilizationQueries,\n  MultiClusterPromqlsForPoolUtilization as PoolUltilizationQueries\n} from '~/app/shared/enum/dashboard-promqls.enum';\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-multi-cluster',\n  templateUrl: './multi-cluster.component.html',\n  styleUrls: ['./multi-cluster.component.scss']\n})\nexport class MultiClusterComponent implements OnInit, OnDestroy {\n  COUNT_OF_UTILIZATION_CHARTS = 5;\n\n  @ViewChild('clusterUsageTpl', { static: true })\n  clusterUsageTpl: TemplateRef<any>;\n  @ViewChild('nameTpl', { static: true })\n  nameTpl: any;\n\n  columns: Array<CdTableColumn> = [];\n\n  queriesResults: any = {\n    ALERTS_COUNT: 0,\n    CLUSTER_COUNT: 0,\n    HEALTH_OK_COUNT: 0,\n    HEALTH_WARNING_COUNT: 0,\n    HEALTH_ERROR_COUNT: 0,\n    TOTAL_CLUSTERS_CAPACITY: 0,\n    TOTAL_USED_CAPACITY: 0,\n    CLUSTER_CAPACITY_UTILIZATION: 0,\n    CLUSTER_IOPS_UTILIZATION: 0,\n    CLUSTER_THROUGHPUT_UTILIZATION: 0,\n    POOL_CAPACITY_UTILIZATION: 0,\n    POOL_IOPS_UTILIZATION: 0,\n    POOL_THROUGHPUT_UTILIZATION: 0,\n    TOTAL_CAPACITY: 0,\n    USED_CAPACITY: 0,\n    HOSTS: 0,\n    POOLS: 0,\n    OSDS: 0,\n    CLUSTER_ALERTS: 0,\n    version: '',\n    FEDERATE_UP_METRIC: 0\n  };\n  alerts: any;\n\n  private subs = new Subscription();\n  dashboardClustersMap: Map<string, string> = new Map<string, string>();\n  icons = Icons;\n  loading = true;\n  bsModalRef: NgbModalRef;\n  isMultiCluster = true;\n  clusterTokenStatus: object = {};\n  localClusterName: string;\n  clusters: any = [];\n  connectionErrorsCount = 0;\n\n  capacityLabels: string[] = [];\n  iopsLabels: string[] = [];\n  throughputLabels: string[] = [];\n  poolIOPSLabels: string[] = [];\n  poolCapacityLabels: string[] = [];\n  poolThroughputLabels: string[] = [];\n\n  capacityValues: string[] = [];\n  iopsValues: string[] = [];\n  throughputValues: string[] = [];\n  poolIOPSValues: string[] = [];\n  poolCapacityValues: string[] = [];\n  poolThroughputValues: string[] = [];\n  showDeletionMessage = false;\n  isClusterAdded = false;\n  selectedQueries: any;\n  PROMETHEUS_DELAY = 20000;\n  LOAD_DELAY = 5000;\n  CLUSTERS_REFRESH_INTERVAL = 30000;\n  interval: NodeJS.Timer;\n  selectedTime: any;\n  multiClusterQueries: any = {};\n  managedByConfig$: Observable<any>;\n  clusterDetailsArray: any[];\n  prometheusConnectionErrors: any[] = [];\n  reconnectionError: string;\n\n  constructor(\n    private multiClusterService: MultiClusterService,\n    private settingsService: SettingsService,\n    private modalService: ModalService,\n    private router: Router,\n    private prometheusService: PrometheusService,\n    private notificationService: NotificationService\n  ) {\n    this.multiClusterQueries = {\n      cluster: {\n        queries: ClusterUltilizationQueries,\n        selectedTime: this.prometheusService.lastHourDateObject\n      },\n      pool: {\n        queries: PoolUltilizationQueries,\n        selectedTime: this.prometheusService.lastHourDateObject\n      },\n      all: {\n        queries: allQueries,\n        selectedTime: this.prometheusService.lastHourDateObject\n      }\n    };\n  }\n\n  ngOnInit(): void {\n    this.columns = [\n      {\n        prop: 'cluster',\n        name: $localize`Cluster Name`,\n        flexGrow: 2,\n        cellTemplate: this.nameTpl\n      },\n      {\n        prop: 'cluster_connection_status',\n        name: $localize`Connection`,\n        flexGrow: 2,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            1: { value: 'DISCONNECTED', class: 'badge-danger' },\n            0: { value: 'CONNECTED', class: 'badge-success' },\n            2: { value: 'CHECKING..', class: 'badge-info' }\n          }\n        }\n      },\n      {\n        prop: 'status',\n        name: $localize`Status`,\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            1: { value: 'WARN', class: 'badge-warning' },\n            0: { value: 'OK', class: 'badge-success' },\n            2: { value: 'ERROR', class: 'badge-danger' }\n          }\n        }\n      },\n      { prop: 'alert', name: $localize`Alerts`, flexGrow: 1 },\n      { prop: 'version', name: $localize`Version`, flexGrow: 2 },\n      {\n        prop: 'usage',\n        name: $localize`Usage`,\n        cellTemplate: this.clusterUsageTpl,\n        flexGrow: 1\n      },\n      { prop: 'pools', name: $localize`Pools`, flexGrow: 1 },\n      { prop: 'hosts', name: $localize`Hosts`, flexGrow: 1 },\n      { prop: 'osds', name: $localize`OSDs`, flexGrow: 1 }\n    ];\n\n    this.subs.add(\n      this.multiClusterService.subscribe((resp: any) => {\n        this.isMultiCluster = Object.keys(resp['config']).length > 1;\n        this.clusterDetailsArray = Object.values(resp['config']).flat();\n        const hubUrl = resp['hub_url'];\n        for (const key in resp['config']) {\n          if (resp['config'].hasOwnProperty(key)) {\n            const cluster = resp['config'][key][0];\n            if (hubUrl === cluster.url) {\n              this.localClusterName = cluster.name;\n              break;\n            }\n          }\n        }\n      })\n    );\n    this.managedByConfig$ = this.settingsService.getValues('MANAGED_BY_CLUSTERS');\n    this.subs.add(\n      this.multiClusterService.subscribeClusterTokenStatus((resp: object) => {\n        this.clusterTokenStatus = resp;\n      })\n    );\n\n    this.isClusterAdded = this.multiClusterService.isClusterAdded();\n\n    if (this.isClusterAdded) {\n      setTimeout(() => {\n        this.getPrometheusData(this.prometheusService.lastHourDateObject);\n        this.multiClusterService.isClusterAdded(false);\n      }, this.PROMETHEUS_DELAY);\n    } else {\n      this.showDeletionMessage = this.multiClusterService.showPrometheusDelayMessage();\n      if (this.showDeletionMessage) {\n        setTimeout(() => {\n          this.getPrometheusData(this.prometheusService.lastHourDateObject);\n        }, this.LOAD_DELAY);\n      } else {\n        this.getPrometheusData(this.prometheusService.lastHourDateObject);\n      }\n    }\n  }\n\n  openRemoteClusterInfoModal() {\n    const initialState = {\n      action: 'connect'\n    };\n    this.bsModalRef = this.modalService.show(MultiClusterFormComponent, initialState, {\n      size: 'lg'\n    });\n    this.bsModalRef.componentInstance.submitAction.subscribe(() => {\n      this.loading = true;\n      setTimeout(() => {\n        const currentRoute = this.router.url.split('?')[0];\n        this.multiClusterService.refreshMultiCluster(currentRoute);\n        this.getPrometheusData(this.prometheusService.lastHourDateObject);\n      }, this.PROMETHEUS_DELAY);\n    });\n  }\n\n  getPrometheusData(selectedTime: any, selectedQueries?: string) {\n    const validRangeQueries = Object.keys(ClusterUltilizationQueries).concat(\n      Object.keys(PoolUltilizationQueries)\n    );\n\n    const allMultiClusterQueries = Object.keys(allQueries).concat(\n      Object.keys(ClusterUltilizationQueries).concat(Object.keys(PoolUltilizationQueries))\n    );\n\n    const validQueries = [\n      'ALERTS',\n      'MGR_METADATA',\n      'HEALTH_STATUS',\n      'TOTAL_CAPACITY',\n      'USED_CAPACITY',\n      'POOLS',\n      'OSDS',\n      'CLUSTER_CAPACITY_UTILIZATION',\n      'CLUSTER_IOPS_UTILIZATION',\n      'CLUSTER_THROUGHPUT_UTILIZATION',\n      'POOL_CAPACITY_UTILIZATION',\n      'POOL_IOPS_UTILIZATION',\n      'POOL_THROUGHPUT_UTILIZATION',\n      'HOSTS',\n      'CLUSTER_ALERTS',\n      'FEDERATE_UP_METRIC'\n    ];\n\n    let validSelectedQueries = allMultiClusterQueries;\n\n    if (selectedQueries) {\n      if (selectedQueries === 'poolUtilization') {\n        this.multiClusterQueries.pool['selectedTime'] = selectedTime;\n        validSelectedQueries = Object.keys(PoolUltilizationQueries);\n      }\n\n      if (selectedQueries === 'clusterUtilization') {\n        this.multiClusterQueries.cluster.selectedTime = selectedTime;\n        validSelectedQueries = Object.keys(ClusterUltilizationQueries);\n      }\n    }\n\n    this.prometheusService\n      .getMultiClusterQueriesData(\n        this.queriesResults,\n        validQueries,\n        validRangeQueries,\n        this.multiClusterQueries,\n        validSelectedQueries,\n        allMultiClusterQueries\n      )\n      .subscribe((data: any) => {\n        this.queriesResults = data;\n        this.loading = false;\n        this.alerts = this.queriesResults.ALERTS;\n        this.getAlertsInfo();\n        this.getClustersInfo();\n        this.interval = setInterval(() => {\n          this.getClustersInfo();\n        }, this.CLUSTERS_REFRESH_INTERVAL);\n      });\n  }\n\n  getAlertsInfo() {\n    interface Alert {\n      alertName: string;\n      alertState: string;\n      severity: string;\n      cluster: string;\n    }\n\n    const alerts: Alert[] = [];\n\n    this.alerts?.forEach((item: any) => {\n      const metric = item.metric;\n      const alert: Alert = {\n        alertName: metric.alertname,\n        cluster: metric.cluster,\n        alertState: metric.alertstate,\n        severity: metric.severity\n      };\n      alerts.push(alert);\n    });\n\n    this.alerts = alerts;\n  }\n\n  getClustersInfo() {\n    interface ClusterInfo {\n      cluster: string;\n      status: number;\n      alert: number;\n      total_capacity: number;\n      used_capacity: number;\n      available_capacity: number;\n      pools: number;\n      osds: number;\n      hosts: number;\n      version: string;\n      cluster_connection_status: number;\n    }\n\n    const clusters: ClusterInfo[] = [];\n    this.queriesResults.TOTAL_CAPACITY?.forEach((totalCapacityMetric: any, index: number) => {\n      const clusterName = totalCapacityMetric.metric.cluster;\n      const totalCapacity = parseInt(totalCapacityMetric.value[1]);\n      const getMgrMetadata = this.findCluster(this.queriesResults?.MGR_METADATA, clusterName);\n      const version = this.getVersion(getMgrMetadata.metric.ceph_version);\n\n      const usedCapacity = this.findClusterData(this.queriesResults?.USED_CAPACITY, clusterName);\n      const pools = this.findClusterData(this.queriesResults?.POOLS, clusterName);\n      const hosts = this.findClusterData(this.queriesResults?.HOSTS, clusterName);\n      const alert = this.findClusterData(this.queriesResults?.CLUSTER_ALERTS, clusterName);\n      const osds = this.findClusterData(this.queriesResults?.OSDS, clusterName);\n      const status = this.findClusterData(this.queriesResults?.HEALTH_STATUS, clusterName);\n      const available_capacity = totalCapacity - usedCapacity;\n      const federateJobName = `federate_${index + 1}`;\n      const federateMetrics = this.queriesResults?.FEDERATE_UP_METRIC.filter(\n        (metric: any) => metric.metric.job === federateJobName\n      );\n      this.checkFederateMetricsStatus(federateMetrics);\n\n      clusters.push({\n        cluster: clusterName.trim(),\n        status,\n        alert,\n        total_capacity: totalCapacity,\n        used_capacity: usedCapacity,\n        available_capacity: available_capacity,\n        pools,\n        osds,\n        hosts,\n        version,\n        cluster_connection_status: 2\n      });\n    });\n\n    if (this.clusterTokenStatus) {\n      clusters.forEach((cluster: any) => {\n        cluster.cluster_connection_status = this.clusterTokenStatus[cluster.cluster]?.status;\n        if (cluster.cluster === this.localClusterName) {\n          cluster.cluster_connection_status = 0;\n        }\n      });\n      this.connectionErrorsCount = clusters.filter(\n        (cluster) => cluster.cluster_connection_status === 1\n      ).length;\n    }\n\n    this.clusters = clusters;\n\n    // Generate labels and metrics for utilization charts\n    this.capacityLabels = this.generateQueryLabel(this.queriesResults.CLUSTER_CAPACITY_UTILIZATION);\n    this.iopsLabels = this.generateQueryLabel(this.queriesResults.CLUSTER_IOPS_UTILIZATION);\n    this.throughputLabels = this.generateQueryLabel(\n      this.queriesResults.CLUSTER_THROUGHPUT_UTILIZATION\n    );\n    this.poolCapacityLabels = this.generateQueryLabel(\n      this.queriesResults.POOL_CAPACITY_UTILIZATION,\n      true\n    );\n    this.poolIOPSLabels = this.generateQueryLabel(this.queriesResults.POOL_IOPS_UTILIZATION, true);\n    this.poolThroughputLabels = this.generateQueryLabel(\n      this.queriesResults.POOL_THROUGHPUT_UTILIZATION,\n      true\n    );\n\n    this.capacityValues = this.getQueryValues(this.queriesResults.CLUSTER_CAPACITY_UTILIZATION);\n    this.iopsValues = this.getQueryValues(this.queriesResults.CLUSTER_IOPS_UTILIZATION);\n    this.throughputValues = this.getQueryValues(this.queriesResults.CLUSTER_THROUGHPUT_UTILIZATION);\n    this.poolCapacityValues = this.getQueryValues(this.queriesResults.POOL_CAPACITY_UTILIZATION);\n    this.poolIOPSValues = this.getQueryValues(this.queriesResults.POOL_IOPS_UTILIZATION);\n    this.poolThroughputValues = this.getQueryValues(\n      this.queriesResults.POOL_THROUGHPUT_UTILIZATION\n    );\n  }\n\n  checkFederateMetricsStatus(federatedMetrics: any) {\n    if (!federatedMetrics || federatedMetrics.length === 0) {\n      return;\n    }\n\n    this.prometheusConnectionErrors = [];\n\n    federatedMetrics.forEach((metricEntry: { metric: { instance: string }; value: any }) => {\n      const instanceIpPort = metricEntry.metric.instance;\n      const instanceIp = instanceIpPort.split(':')[0];\n      const instancePort = instanceIpPort.split(':')[1];\n      const federationStatus = metricEntry.value[1];\n\n      this.clusterDetailsArray?.forEach((clusterDetails) => {\n        if (clusterDetails.name !== this.localClusterName) {\n          const prometheusUrl = clusterDetails.prometheus_url.replace(\n            /^(http:\\/\\/|https:\\/\\/)/,\n            ''\n          );\n          const prometheusIp = prometheusUrl.split(':')[0];\n          const prometheusPort = prometheusUrl.split(':')[1] ? prometheusUrl.split(':')[1] : '443';\n\n          const existingError = this.prometheusConnectionErrors.find(\n            (errorEntry) => errorEntry.url === clusterDetails.url\n          );\n\n          if (\n            !existingError &&\n            instanceIp === prometheusIp &&\n            instancePort === prometheusPort &&\n            federationStatus === '0'\n          ) {\n            this.prometheusConnectionErrors.push({\n              cluster_name: clusterDetails.name,\n              cluster_alias: clusterDetails.cluster_alias,\n              url: clusterDetails.url\n            });\n\n            this.multiClusterService\n              .reConnectCluster(\n                clusterDetails.url,\n                clusterDetails.user,\n                null,\n                clusterDetails.ssl_verify,\n                clusterDetails.ssl_certificate,\n                clusterDetails.ttl,\n                clusterDetails.token\n              )\n              .subscribe({\n                error: (errorResponse: any) => {\n                  const reconnectionError = errorResponse.error.detail;\n                  const errorIndex = this.prometheusConnectionErrors.findIndex(\n                    (errorEntry) => errorEntry.url === clusterDetails.url\n                  );\n                  if (errorIndex !== -1) {\n                    this.prometheusConnectionErrors[\n                      errorIndex\n                    ].reconnectionError = reconnectionError;\n                  }\n                },\n                next: (response: any) => {\n                  if (response === true) {\n                    const message = $localize`Cluster re-connected successfully`;\n                    this.notificationService.show(NotificationType.success, message);\n\n                    this.prometheusConnectionErrors = this.prometheusConnectionErrors.filter(\n                      (errorEntry) => errorEntry.url !== clusterDetails.url\n                    );\n                  }\n                }\n              });\n          }\n        }\n      });\n    });\n  }\n\n  findClusterData(metrics: any, clusterName: string) {\n    const clusterMetrics = this.findCluster(metrics, clusterName);\n    return parseInt(clusterMetrics?.value[1] || 0);\n  }\n\n  findCluster(metrics: any, clusterName: string) {\n    return metrics.find((metric: any) => metric?.metric?.cluster === clusterName);\n  }\n\n  getVersion(fullVersion: string) {\n    const version = fullVersion.replace('ceph version ', '').split(' ');\n    return version[0] + ' ' + version.slice(2, version.length).join(' ');\n  }\n\n  generateQueryLabel(query: any, name = false, count = this.COUNT_OF_UTILIZATION_CHARTS) {\n    let labels = [];\n    for (let i = 0; i < count; i++) {\n      let label = '';\n      if (query[i]) {\n        label = query[i]?.metric?.cluster;\n        if (name) label = query[i]?.metric?.name + ' - ' + label;\n      }\n      labels.push(label);\n    }\n    return labels;\n  }\n\n  getQueryValues(query: any, count = this.COUNT_OF_UTILIZATION_CHARTS) {\n    let values = [];\n    for (let i = 0; i < count; i++) {\n      if (query[i]) values.push(query[i]?.values);\n    }\n    return values;\n  }\n\n  onDismissed() {\n    this.showDeletionMessage = false;\n    this.multiClusterService.showPrometheusDelayMessage(false);\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n    clearInterval(this.interval);\n    this.prometheusService.unsubscribe();\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       id=\"tabset-multi-cluster-details\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"multi-cluster-details\">\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"permissions.grafana.read\">\n      <a ngbNavLink\n         routerLink=\"performance-details\"\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"Cluster details\"\n                    [grafanaPath]=\"'ceph-cluster?var-cluster=' + selectedClusterFsid\"\n                    [type]=\"'metrics'\"\n                    uid=\"edtb0oxdq\"\n                    grafanaStyle=\"four\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cd-multi-cluster-details',\n  templateUrl: './multi-cluster-details.component.html',\n  styleUrls: ['./multi-cluster-details.component.scss']\n})\nexport class MultiClusterDetailsComponent {\n  @Input()\n  permissions: Permissions;\n\n  @Input()\n  selection: any;\n\n  get selectedClusterFsid(): string {\n    return this.selection !== undefined ? this.selection['name'] : null;\n  }\n}\n","<ng-template #emptyCluster>\n  <ng-container class=\"container h-75\"\n                *ngIf=\"managedByConfig$ | async as managedByConfig\">\n    <div class=\"row h-100 justify-content-center align-items-center\">\n      <div class=\"blank-page\">\n        <i class=\"mx-auto d-block\"\n           [ngClass]=\"[icons.large, icons.wrench]\">\n        </i>\n      <div class=\"mt-4 text-center\">\n        <h4 class=\"mt-3\">This cluster is already managed by cluster -\n          <a target=\"_blank\"\n             [href]=\"managedByConfig['MANAGED_BY_CLUSTERS'][0]['url']\">\n            {{ managedByConfig['MANAGED_BY_CLUSTERS'][0]['fsid'] }}\n            <i class=\"fa fa-external-link\"></i>\n          </a>\n        </h4>\n      </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-container *ngIf=\"managedByConfig$ | async as managedByConfig\">\n  <div *ngIf=\"managedByConfig['MANAGED_BY_CLUSTERS'].length === 0; else emptyCluster\">\n    <nav ngbNav\n         #nav=\"ngbNav\"\n         class=\"nav-tabs\">\n      <ng-container ngbNavItem>\n        <a ngbNavLink\n           i18n>Clusters List</a>\n        <ng-template ngbNavContent>\n          <cd-table #table\n                    [data]=\"data\"\n                    [columns]=\"columns\"\n                    columnMode=\"flex\"\n                    selectionType=\"single\"\n                    (fetchData)=\"refresh()\"\n                    [hasDetails]=\"true\"\n                    (setExpandedRow)=\"setExpandedRow($event)\"\n                    [maxLimit]=\"25\"\n                    (updateSelection)=\"updateSelection($event)\">\n            <cd-table-actions [permission]=\"permissions.user\"\n                              [selection]=\"selection\"\n                              class=\"table-actions\"\n                              id=\"cluster-actions\"\n                              [tableActions]=\"tableActions\">\n            </cd-table-actions>\n            <cd-multi-cluster-details *cdTableDetail\n                                      [permissions]=\"permissions\"\n                                      [selection]=\"expandedRow\">\n            </cd-multi-cluster-details>\n          </cd-table>\n        </ng-template>\n      </ng-container>\n    </nav>\n    <div [ngbNavOutlet]=\"nav\"></div>\n  </div>\n</ng-container>\n\n<ng-template #urlTpl\n             let-row=\"data.row\">\n  <a target=\"_blank\"\n     [href]=\"row.url\">\n      {{ row?.url?.endsWith('/') ? row?.url?.slice(0, -1) : row.url }}\n    <i class=\"fa fa-external-link\"></i>\n  </a>\n</ng-template>\n\n<ng-template #durationTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <span *ngIf=\"row.remainingTimeWithoutSeconds > 0 && row.cluster_alias !== 'local-cluster'\">\n    <i *ngIf=\"row.remainingDays < 8\"\n       i18n-title\n       title=\"Cluster's token is about to expire\"\n       [class.icon-danger-color]=\"row.remainingDays < 2\"\n       [class.icon-warning-color]=\"row.remainingDays < 8\"\n       class=\"{{ icons.warning }}\"></i>\n    <span title=\"{{ row.expiryDate }}\">{{ row.remainingTimeWithoutSeconds / 1000 | duration }}</span>\n  </span>\n  <span *ngIf=\"row.remainingTimeWithoutSeconds <= 0 && row.remainingDays <=0 && row.cluster_alias !== 'local-cluster'\">\n    <i i18n-title\n       title=\"Cluster's token has expired\"\n       class=\"{{ icons.danger }}\"></i>\n    <span class=\"text-danger\">Token expired</span>\n  </span>\n  <span *ngIf=\"row.cluster_alias === 'local-cluster'\">N/A</span>\n</ng-template>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiClusterService } from '~/app/shared/api/multi-cluster.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { MultiClusterFormComponent } from '../multi-cluster-form/multi-cluster-form.component';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { MultiCluster } from '~/app/shared/models/multi-cluster';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CookiesService } from '~/app/shared/services/cookie.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { SettingsService } from '~/app/shared/api/settings.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\n\n@Component({\n  selector: 'cd-multi-cluster-list',\n  templateUrl: './multi-cluster-list.component.html',\n  styleUrls: ['./multi-cluster-list.component.scss']\n})\nexport class MultiClusterListComponent extends ListWithDetails implements OnInit, OnDestroy {\n  @ViewChild(TableComponent)\n  table: TableComponent;\n  @ViewChild('urlTpl', { static: true })\n  public urlTpl: TemplateRef<any>;\n  @ViewChild('durationTpl', { static: true })\n  durationTpl: TemplateRef<any>;\n  private subs = new Subscription();\n  permissions: Permissions;\n  tableActions: CdTableAction[];\n  clusterTokenStatus: object = {};\n  columns: Array<CdTableColumn> = [];\n  data: any;\n  selection = new CdTableSelection();\n  bsModalRef: NgbModalRef;\n  clustersTokenMap: Map<string, string> = new Map<string, string>();\n  newData: any;\n  modalRef: NgbModalRef;\n  hubUrl: string;\n  currentUrl: string;\n  icons = Icons;\n  managedByConfig$: Observable<any>;\n  prometheusConnectionError: any[] = [];\n\n  constructor(\n    private multiClusterService: MultiClusterService,\n    private router: Router,\n    public actionLabels: ActionLabelsI18n,\n    private notificationService: NotificationService,\n    private authStorageService: AuthStorageService,\n    private modalService: ModalService,\n    private cookieService: CookiesService,\n    private settingsService: SettingsService,\n    private cdsModalService: ModalCdsService,\n    private route: ActivatedRoute\n  ) {\n    super();\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        name: this.actionLabels.CONNECT,\n        disable: (selection: CdTableSelection) => this.getDisable('connect', selection),\n        click: () => this.openRemoteClusterInfoModal('connect')\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        name: this.actionLabels.EDIT,\n        disable: (selection: CdTableSelection) => this.getDisable('edit', selection),\n        click: () => this.openRemoteClusterInfoModal('edit')\n      },\n      {\n        permission: 'update',\n        icon: Icons.refresh,\n        name: this.actionLabels.RECONNECT,\n        disable: (selection: CdTableSelection) => this.getDisable('reconnect', selection),\n        click: () => this.openRemoteClusterInfoModal('reconnect')\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        name: this.actionLabels.DISCONNECT,\n        disable: (selection: CdTableSelection) => this.getDisable('disconnect', selection),\n        click: () => this.openDeleteClusterModal()\n      }\n    ];\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit(): void {\n    this.subs.add(\n      this.multiClusterService.subscribe((resp: object) => {\n        if (resp && resp['config']) {\n          this.hubUrl = resp['hub_url'];\n          this.currentUrl = resp['current_url'];\n          const clusterDetailsArray = Object.values(resp['config']).flat();\n          this.data = clusterDetailsArray;\n          this.checkClusterConnectionStatus();\n          this.data.forEach((cluster: any) => {\n            cluster['remainingTimeWithoutSeconds'] = 0;\n            if (cluster['ttl'] && cluster['ttl'] > 0) {\n              cluster['ttl'] = cluster['ttl'] * 1000;\n              cluster['remainingTimeWithoutSeconds'] = this.getRemainingTimeWithoutSeconds(\n                cluster['ttl']\n              );\n              cluster['remainingDays'] = this.getRemainingDays(cluster['ttl']);\n              cluster['expiryDate'] = new Date(Date.now() + cluster['ttl']).toLocaleString();\n            }\n          });\n        }\n      })\n    );\n\n    this.columns = [\n      {\n        prop: 'cluster_alias',\n        name: $localize`Alias`,\n        flexGrow: 2\n      },\n      {\n        prop: 'cluster_connection_status',\n        name: $localize`Connection`,\n        flexGrow: 2,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            1: { value: 'DISCONNECTED', class: 'badge-danger' },\n            0: { value: 'CONNECTED', class: 'badge-success' },\n            2: { value: 'CHECKING..', class: 'badge-info' }\n          }\n        }\n      },\n      {\n        prop: 'name',\n        name: $localize`FSID`,\n        flexGrow: 2\n      },\n      {\n        prop: 'url',\n        name: $localize`URL`,\n        flexGrow: 2,\n        cellTemplate: this.urlTpl\n      },\n      {\n        prop: 'user',\n        name: $localize`User`,\n        flexGrow: 2\n      },\n      {\n        prop: 'ttl',\n        name: $localize`Token expires`,\n        flexGrow: 2,\n        cellTemplate: this.durationTpl\n      }\n    ];\n\n    this.subs.add(\n      this.multiClusterService.subscribeClusterTokenStatus((resp: object) => {\n        this.clusterTokenStatus = resp;\n        this.checkClusterConnectionStatus();\n      })\n    );\n\n    this.managedByConfig$ = this.settingsService.getValues('MANAGED_BY_CLUSTERS');\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  getRemainingDays(time: number): number {\n    if (time === undefined || time == null) {\n      return undefined;\n    }\n    if (time < 0) {\n      return 0;\n    }\n    const toDays = 1000 * 60 * 60 * 24;\n    return Math.max(0, Math.floor(time / toDays));\n  }\n\n  getRemainingTimeWithoutSeconds(time: number): number {\n    return Math.floor(time / (1000 * 60)) * 60 * 1000;\n  }\n\n  checkClusterConnectionStatus() {\n    if (this.clusterTokenStatus && this.data) {\n      this.data.forEach((cluster: MultiCluster) => {\n        const clusterStatus = this.clusterTokenStatus[cluster.name];\n        if (clusterStatus !== undefined) {\n          cluster.cluster_connection_status = clusterStatus.status;\n          cluster.ttl = clusterStatus.time_left;\n        } else {\n          cluster.cluster_connection_status = 2;\n        }\n        if (cluster.cluster_alias === 'local-cluster') {\n          cluster.cluster_connection_status = 0;\n        }\n      });\n    }\n  }\n\n  openRemoteClusterInfoModal(action: string) {\n    const initialState = {\n      clustersData: this.data,\n      action: action,\n      cluster: this.selection.first()\n    };\n    this.bsModalRef = this.modalService.show(MultiClusterFormComponent, initialState, {\n      size: 'xl'\n    });\n    this.bsModalRef.componentInstance.submitAction.subscribe(() => {\n      const currentRoute = this.router.url.split('?')[0];\n      this.multiClusterService.refreshMultiCluster(currentRoute);\n      this.checkClusterConnectionStatus();\n      this.multiClusterService.isClusterAdded(true);\n    });\n  }\n\n  openDeleteClusterModal() {\n    const cluster = this.selection.first();\n    this.modalRef = this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      infoMessage: $localize`Please note that the data for the disconnected cluster will be visible for a duration of ~ 5 minutes. After this period, it will be automatically removed.`,\n      actionDescription: $localize`Disconnect`,\n      itemDescription: $localize`Cluster`,\n      itemNames: [cluster['cluster_alias'] + ' - ' + cluster['user']],\n      submitAction: () =>\n        this.multiClusterService.deleteCluster(cluster['name'], cluster['user']).subscribe(() => {\n          this.cookieService.deleteToken(`${cluster['name']}-${cluster['user']}`);\n          this.multiClusterService.showPrometheusDelayMessage(true);\n          this.cdsModalService.dismissAll();\n          this.notificationService.show(\n            NotificationType.success,\n            $localize`Disconnected cluster '${cluster['cluster_alias']}'`\n          );\n          const currentRoute = this.router.url.split('?')[0];\n          this.multiClusterService.refreshMultiCluster(currentRoute);\n        })\n    });\n  }\n\n  getDisable(action: string, selection: CdTableSelection): string | boolean {\n    if (this.hubUrl !== this.currentUrl) {\n      return $localize`Please switch to the local-cluster to ${action} a remote cluster`;\n    }\n    if (!selection.hasSelection && action !== 'connect') {\n      return $localize`Please select one or more clusters to ${action}`;\n    }\n    if (selection.hasSingleSelection) {\n      const cluster = selection.first();\n      if (cluster['cluster_alias'] === 'local-cluster' && action !== 'connect') {\n        return $localize`Cannot ${action} local cluster`;\n      }\n    }\n    return false;\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  setExpandedRow(expandedRow: any) {\n    super.setExpandedRow(expandedRow);\n    this.router.navigate(['performance-details'], { relativeTo: this.route });\n  }\n\n  refresh() {\n    this.multiClusterService.refresh();\n  }\n}\n","import { CephServicePlacement } from '~/app/shared/models/service.interface';\n\nexport interface SMBCluster {\n  resource_type: typeof CLUSTER_RESOURCE;\n  cluster_id: string;\n  auth_mode: typeof AUTHMODE[keyof typeof AUTHMODE];\n  domain_settings?: DomainSettings;\n  user_group_settings?: JoinSource[];\n  custom_dns?: string[];\n  placement?: CephServicePlacement;\n  clustering?: Clustering;\n  public_addrs?: PublicAddress[];\n  count?: number;\n}\n\nexport interface ClusterRequestModel {\n  cluster_resource: SMBCluster;\n}\n\nexport interface ShareRequestModel {\n  share_resource: SMBShare;\n}\n\ninterface SMBCephfs {\n  volume: string;\n  path: string;\n  subvolumegroup?: string;\n  subvolume?: string;\n  provider?: string;\n}\n\ninterface SMBShareLoginControl {\n  name: string;\n  access: 'read' | 'read-write' | 'none' | 'admin';\n  category?: 'user' | 'group';\n}\n\nexport interface Filesystem {\n  id: string;\n  name: string;\n}\n\nexport interface DomainSettings {\n  realm?: string;\n  join_sources?: JoinSource[];\n}\n\nexport interface JoinSource {\n  sourceType: string;\n  ref: string;\n}\n\nexport interface PublicAddress {\n  address: string;\n  destination?: string;\n}\n\nexport const CLUSTERING = {\n  Default: 'default',\n  Always: 'always',\n  Never: 'never'\n};\n\nexport const RESOURCE = {\n  ClusterResource: 'cluster_resource',\n  Resource: 'resource'\n};\n\nexport const AUTHMODE = {\n  User: 'user',\n  activeDirectory: 'active-directory'\n};\n\nexport const PLACEMENT = {\n  host: 'hosts',\n  label: 'label'\n};\n\nexport interface SMBShare {\n  resource_type: string;\n  cluster_id: string;\n  share_id: string;\n  cephfs: SMBCephfs;\n  intent?: string;\n  name?: string;\n  readonly?: boolean;\n  browseable?: boolean;\n  restrict_access?: boolean;\n  login_control?: SMBShareLoginControl;\n}\n\ninterface SMBCephfs {\n  volume: string;\n  path: string;\n  subvolumegroup?: string;\n  subvolume?: string;\n  provider?: string;\n}\n\ninterface SMBShareLoginControl {\n  name: string;\n  access: 'read' | 'read-write' | 'none' | 'admin';\n  category?: 'user' | 'group';\n}\n\nexport interface SMBJoinAuth {\n  resource_type: string;\n  auth_id: string;\n  auth: Auth;\n  linked_to_cluster?: string;\n}\n\nexport interface SMBUsersGroups {\n  resource_type: string;\n  users_groups_id: string;\n  values: Value;\n  linked_to_cluster?: string;\n}\n\ninterface Auth {\n  username: string;\n  password: string;\n}\n\nexport interface User {\n  name: string;\n  password: string;\n}\n\nexport interface Group {\n  name: string;\n}\n\ninterface Value {\n  users: User[];\n  groups: Group[];\n}\n\nexport type SMBResource = SMBCluster | SMBShare | SMBJoinAuth | SMBUsersGroups;\n\nexport const CLUSTER_RESOURCE = 'ceph.smb.cluster' as const;\nexport const SHARE_RESOURCE = 'ceph.smb.share' as const;\nexport const JOIN_AUTH_RESOURCE = 'ceph.smb.join.auth' as const;\nexport const USERSGROUPS_RESOURCE = 'ceph.smb.usersgroups' as const;\n\nexport const PROVIDER = 'samba-vfs';\n\ntype Clustering = 'default' | 'never' | 'always';\n","import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable, signal } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n  ClusterRequestModel,\n  DomainSettings,\n  ShareRequestModel,\n  SMBCluster,\n  SMBJoinAuth,\n  SMBResource,\n  SMBShare,\n  SMBUsersGroups\n} from '~/app/ceph/smb/smb.model';\nimport { NotificationService } from '../services/notification.service';\nimport { NotificationType } from '../enum/notification-type.enum';\nimport * as yaml from 'js-yaml';\n\nexport const APPYAML = 'application/yaml';\nexport const APPJSON = 'application/json';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmbService {\n  baseURL = 'api/smb';\n  private modalDataSubject = new Subject<DomainSettings>();\n  modalData$ = this.modalDataSubject.asObservable();\n  dataUploader = signal<SMBResource | null>(null);\n\n  constructor(private http: HttpClient, private notificationService: NotificationService) {}\n\n  passData(data: DomainSettings) {\n    this.modalDataSubject.next(data);\n  }\n\n  setDataUploaded(data: SMBResource): void {\n    this.dataUploader.set(data);\n  }\n\n  uploadData(event: any) {\n    const file = event.values().next().value?.file;\n    if (!file) {\n      return;\n    }\n\n    if (!(file.type === APPYAML || file.type === APPJSON)) {\n      this.notificationService.show(\n        NotificationType.error,\n        $localize`Invalid file type: only .json or .yaml accepted`\n      );\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const fileContents: any = e.target?.result;\n      let parsedContent: any;\n      try {\n        if (file.type === APPYAML) {\n          parsedContent = yaml.load(fileContents);\n        } else if (file.type === APPJSON) {\n          parsedContent = JSON.parse(fileContents);\n        }\n      } catch (error) {\n        this.notificationService.show(NotificationType.error, $localize`${error.message}`);\n      }\n      this.setDataUploaded(parsedContent);\n    };\n\n    reader.readAsText(file);\n  }\n\n  listClusters(): Observable<SMBCluster[]> {\n    return this.http.get<SMBCluster[]>(`${this.baseURL}/cluster`);\n  }\n\n  createCluster(requestModel: ClusterRequestModel) {\n    return this.http.post(`${this.baseURL}/cluster`, requestModel);\n  }\n\n  removeCluster(clusterId: string) {\n    return this.http.delete(`${this.baseURL}/cluster/${clusterId}`, {\n      observe: 'response'\n    });\n  }\n\n  listShares(clusterId: string): Observable<SMBShare[]> {\n    return this.http.get<SMBShare[]>(`${this.baseURL}/share?cluster_id=${clusterId}`);\n  }\n\n  listJoinAuths(): Observable<SMBJoinAuth[]> {\n    return this.http.get<SMBJoinAuth[]>(`${this.baseURL}/joinauth`);\n  }\n\n  listUsersGroups(): Observable<SMBUsersGroups[]> {\n    return this.http.get<SMBUsersGroups[]>(`${this.baseURL}/usersgroups`);\n  }\n\n  createShare(requestModel: ShareRequestModel) {\n    return this.http.post(`${this.baseURL}/share`, requestModel);\n  }\n\n  getShare(cluster_id: string, share_id: string) {\n    return this.http.get(`${this.baseURL}/share/${cluster_id}/${share_id}`);\n  }\n\n  deleteShare(clusterId: string, shareId: string): Observable<HttpResponse<null>> {\n    return this.http.delete<null>(`${this.baseURL}/share/${clusterId}/${shareId}`, {\n      observe: 'response'\n    });\n  }\n\n  getJoinAuth(authId: string): Observable<SMBJoinAuth> {\n    return this.http.get<SMBJoinAuth>(`${this.baseURL}/joinauth/${authId}`);\n  }\n\n  getUsersGroups(usersGroupsId: string): Observable<SMBUsersGroups> {\n    return this.http.get<SMBUsersGroups>(`${this.baseURL}/usersgroups/${usersGroupsId}`);\n  }\n\n  createJoinAuth(joinAuth: SMBJoinAuth) {\n    return this.http.post(`${this.baseURL}/joinauth`, {\n      join_auth: joinAuth\n    });\n  }\n\n  createUsersGroups(usersgroups: SMBUsersGroups) {\n    return this.http.post(`${this.baseURL}/usersgroups`, {\n      usersgroups: usersgroups\n    });\n  }\n\n  deleteJoinAuth(authId: string) {\n    return this.http.delete(`${this.baseURL}/joinauth/${authId}`, {\n      observe: 'response'\n    });\n  }\n\n  deleteUsersgroups(usersGroupsId: string) {\n    return this.http.delete(`${this.baseURL}/usersgroups/${usersGroupsId}`, {\n      observe: 'response'\n    });\n  }\n\n  getCluster(cluster_id: string) {\n    return this.http.get(`${this.baseURL}/cluster/${cluster_id}`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nconst SMB_PATH = 'cephfs/smb';\n\nenum TABS {\n  cluster = 'cluster',\n  activeDirectory = 'active-directory',\n  standalone = 'standalone',\n  overview = 'overview'\n}\n\n@Component({\n  selector: 'cd-smb-tabs',\n  templateUrl: './smb-tabs.component.html',\n  styleUrls: ['./smb-tabs.component.scss']\n})\nexport class SmbTabsComponent implements OnInit {\n  selectedTab: TABS;\n  activeTab: TABS = TABS.cluster;\n\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {\n    const currentPath = this.router.url;\n    this.activeTab = Object.values(TABS).find((tab) => currentPath.includes(tab)) || TABS.cluster;\n  }\n\n  onSelected(tab: TABS) {\n    this.selectedTab = tab;\n    this.router.navigate([`${SMB_PATH}/${tab}`]);\n  }\n\n  public get Tabs(): typeof TABS {\n    return TABS;\n  }\n}\n","<cds-tabs\n  type=\"contained\"\n  followFocus=\"true\"\n  isNavigation=\"true\"\n  [cacheActive]=\"false\">\n  <cds-tab\n    heading=\"Cluster\"\n    i18n-heading\n    [active]=\"activeTab === Tabs.cluster\"\n    (selected)=\"onSelected(Tabs.cluster)\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Active Directory\"\n    i18n-heading\n    [active]=\"activeTab === Tabs.activeDirectory\"\n    (selected)=\"onSelected(Tabs.activeDirectory)\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Standalone\"\n    i18n-heading\n    [active]=\"activeTab === Tabs.standalone\"\n    (selected)=\"onSelected(Tabs.standalone)\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Overview\"\n    i18n-heading\n    [active]=\"activeTab === Tabs.overview\"\n    (selected)=\"onSelected(Tabs.overview)\">\n  </cds-tab>\n</cds-tabs>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { SMBJoinAuth } from '../smb.model';\nimport { Router } from '@angular/router';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nexport const JOIN_AUTH_PATH = 'cephfs/smb/active-directory';\n\n@Component({\n  selector: 'cd-smb-join-auth-list',\n  templateUrl: './smb-join-auth-list.component.html',\n  styleUrls: ['./smb-join-auth-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(JOIN_AUTH_PATH) }]\n})\nexport class SmbJoinAuthListComponent implements OnInit {\n  columns: CdTableColumn[];\n  permission: Permission;\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n\n  joinAuth$: Observable<SMBJoinAuth[]>;\n  subject$ = new BehaviorSubject<SMBJoinAuth[]>([]);\n  selection: CdTableSelection = new CdTableSelection();\n\n  constructor(\n    private router: Router,\n    private urlBuilder: URLBuilderService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private smbService: SmbService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    this.permission = this.authStorageService.getPermissions().smb;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'auth_id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Username`,\n        prop: 'auth.username',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Linked to cluster`,\n        prop: 'linked_to_cluster',\n        flexGrow: 2\n      }\n    ];\n\n    this.tableActions = [\n      {\n        name: `${this.actionLabels.CREATE} AD`,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.router.navigate([this.urlBuilder.getCreate()]),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () =>\n          this.router.navigate([this.urlBuilder.getEdit(String(this.selection.first().auth_id))])\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'update',\n        icon: Icons.destroy,\n        click: () => this.openDeleteModal()\n      }\n    ];\n\n    this.joinAuth$ = this.subject$.pipe(\n      switchMap(() =>\n        this.smbService.listJoinAuths().pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n\n  loadJoinAuth() {\n    this.subject$.next([]);\n  }\n\n  openDeleteModal() {\n    const authId = this.selection.first().auth_id;\n\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Active directory access resource`,\n      itemNames: [authId],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(`${JOIN_AUTH_PATH}/${URLVerbs.DELETE}`, {\n            authId: authId\n          }),\n          call: this.smbService.deleteJoinAuth(authId)\n        })\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<cd-smb-tabs></cd-smb-tabs>\n\n<cd-table\n  headerTitle=\"Active directory access resources\"\n  headerDescription=\"Logical management units for authorization on active directory (AD) servers\"\n  [data]=\"joinAuth$ | async\"\n  columnMode=\"flex\"\n  [columns]=\"columns\"\n  selectionType=\"single\"\n  [hasDetails]=\"false\"\n  (fetchData)=\"loadJoinAuth()\"\n  (updateSelection)=\"updateSelection($event)\"\n>\n  <div class=\"table-actions\">\n    <cd-table-actions\n      [permission]=\"permission\"\n      [selection]=\"selection\"\n      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n</cd-table>\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n  <ng-container *cdFormLoading=\"loading\">\n    <div cdsModalContent>\n      <form name=\"domainSettingsForm\"\n            #formDir=\"ngForm\"\n            [formGroup]=\"domainSettingsForm\"\n            novalidate>\n        <div class=\"form-item\">\n          <cds-text-label\n            label=\"realm\"\n            [invalid]=\"\n              !domainSettingsForm.controls.realm.valid && domainSettingsForm.controls.realm.dirty\n            \"\n            [invalidText]=\"realmNameError\"\n            i18n\n            >Realm Name\n            <input\n              cdsText\n              type=\"text\"\n              formControlName=\"realm\"\n              autofocus\n            />\n          </cds-text-label>\n          <ng-template #realmNameError>\n            <span\n              *ngIf=\"domainSettingsForm.showError('realm', formDir, 'required')\"\n              class=\"invalid-feedback\"\n            >\n              <ng-container i18n> This field is required. </ng-container>\n            </span>\n          </ng-template>\n        </div>\n\n        <div\n          *ngIf=\"joinAuths$ | async as joinAuths\"\n          class=\"form-item\">\n          <ng-container\n            formArrayName=\"join_sources\"\n            *ngFor=\"let _ of join_sources.controls; index as i\"\n          >\n            <ng-container [formGroupName]=\"i\">\n              <div\n                cdsRow\n                class=\"form-item form-item-append\">\n                <div\n                  cdsCol\n                  [columnNumbers]=\"{ lg: 14 }\"\n                >\n                  <cds-select\n                    label=\"Active Directory access resources\"\n                    i18n-label\n                    formControlName=\"ref\"\n                    [invalid]=\"domainSettingsForm.controls?.join_sources.controls[i].invalid && domainSettingsForm.controls?.join_sources.controls[i].controls.ref.dirty\"\n                    [invalidText]=\"joinSourceError\"\n                  >\n                    <option\n                      [value]=\"null\"\n                      i18n\n                    >-- List of AD access resources --\n                    </option>\n                    <option *ngFor=\"let jA of joinAuths\"\n                            [value]=\"jA.auth_id\">{{ jA.auth_id }}</option>\n                  </cds-select>\n                  <ng-template #joinSourceError>\n                    <span\n                      class=\"invalid-feedback\"\n                    >\n                      <ng-container i18n> This field is required. </ng-container>\n                    </span>\n                  </ng-template>\n                </div>\n                <div cdsCol\n                     *ngIf=\"i > 0\"\n                     [columnNumbers]=\"{ lg: 1 }\"\n                     class=\"item-action-btn spacing\">\n                  <cds-icon-button kind=\"danger\"\n                                   size=\"sm\"\n                                   (click)=\"removeJoinSource(i)\">\n                    <svg cdsIcon=\"trash-can\"\n                         size=\"32\"\n                         class=\"cds--btn__icon\"></svg>\n                  </cds-icon-button>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n          <div class=\"form-item\">\n            <button cdsButton=\"tertiary\"\n                    type=\"button\"\n                    (click)=\"addJoinSource()\"\n                    i18n>\n              Add AD access resource\n              <svg cdsIcon=\"add\"\n                   size=\"32\"\n                   class=\"cds--btn__icon\"\n                   icon></svg>\n            </button>\n            <button cdsButton=\"tertiary\"\n                    type=\"button\"\n                    (click)=\"navigateCreateJoinSource()\"\n                    i18n>\n              Create AD access resource\n              <svg\n                cdsIcon=\"launch\"\n                size=\"16\"\n                class=\"cds--btn__icon\"></svg>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n\n    <cd-form-button-panel\n      (submitActionEvent)=\"submit()\"\n      [form]=\"domainSettingsForm\"\n      [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n      [modalForm]=\"true\"\n    >\n    </cd-form-button-panel>\n  </ng-container>\n</cds-modal>\n","import { ChangeDetectorRef, Component, Inject, OnInit, Optional } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\n\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { RgwRealmService } from '~/app/shared/api/rgw-realm.service';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { DomainSettings, JoinSource, SMBJoinAuth } from '../smb.model';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { JOIN_AUTH_PATH } from '../smb-join-auth-list/smb-join-auth-list.component';\n\n@Component({\n  selector: 'cd-smb-domain-setting-modal',\n  templateUrl: './smb-domain-setting-modal.component.html',\n  styleUrls: ['./smb-domain-setting-modal.component.scss']\n})\nexport class SmbDomainSettingModalComponent extends CdForm implements OnInit {\n  domainSettingsForm: CdFormGroup;\n  realmNames: string[];\n  joinAuths$: Observable<SMBJoinAuth[]>;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    public rgwRealmService: RgwRealmService,\n    public notificationService: NotificationService,\n    public smbService: SmbService,\n    private cd: ChangeDetectorRef,\n    private router: Router,\n    @Optional() @Inject('action') public action: string,\n    @Optional() @Inject('resource') public resource: string,\n    @Optional()\n    @Inject('domainSettingsObject')\n    public domainSettingsObject?: DomainSettings\n  ) {\n    super();\n    this.action = this.actionLabels.UPDATE;\n    this.resource = $localize`Active Directory (AD) parameters`;\n  }\n\n  private createForm() {\n    this.domainSettingsForm = new CdFormGroup({\n      realm: new UntypedFormControl('', {\n        validators: [\n          Validators.required,\n          CdValidators.custom('uniqueName', (realm: string) => {\n            return this.realmNames && this.realmNames.indexOf(realm) !== -1;\n          })\n        ]\n      }),\n      join_sources: new FormArray([])\n    });\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.loadingReady();\n    this.joinAuths$ = this.smbService.listJoinAuths();\n    this.domainSettingsForm.get('realm').setValue(this.domainSettingsObject?.realm);\n    const join_sources = this.domainSettingsForm.get('join_sources') as FormArray;\n\n    if (this.domainSettingsObject?.join_sources) {\n      this.domainSettingsObject.join_sources.forEach((source: JoinSource) => {\n        join_sources.push(this.newJoinSource(source));\n      });\n    }\n\n    if (!this.domainSettingsObject) {\n      this.addJoinSource();\n    } else {\n      this.action = this.actionLabels.EDIT;\n    }\n  }\n\n  submit() {\n    this.smbService.passData(this.domainSettingsForm.value);\n    this.closeModal();\n  }\n\n  get join_sources() {\n    return this.domainSettingsForm.get('join_sources') as FormArray;\n  }\n\n  newJoinSource(joinSource?: JoinSource) {\n    return new FormGroup({\n      ref: new FormControl(joinSource?.ref || null, Validators.required)\n    });\n  }\n\n  addJoinSource() {\n    this.join_sources.push(this.newJoinSource());\n    this.cd.detectChanges();\n  }\n\n  navigateCreateJoinSource() {\n    this.closeModal();\n    this.router.navigate([`${JOIN_AUTH_PATH}/${URLVerbs.CREATE}`]);\n  }\n\n  removeJoinSource(index: number) {\n    const join_sources = this.domainSettingsForm.get('join_sources') as FormArray;\n\n    if (index >= 0 && index < join_sources.length) {\n      join_sources.removeAt(index);\n    }\n\n    this.cd.detectChanges();\n  }\n}\n","<ng-container *ngIf=\"smbShares$ | async as smbShares\">\n  <cd-table\n    headerTitle=\"Shares\"\n    headerDescription=\"Logical unit hosted by the cluster that maps to the given CephFS volume and path\"\n    [data]=\"smbShares\"\n    columnMode=\"flex\"\n    [columns]=\"columns\"\n    selectionType=\"single\"\n    [hasDetails]=\"false\"\n    (fetchData)=\"loadSMBShares()\"\n    (updateSelection)=\"updateSelection($event)\"\n  >\n    <div class=\"table-actions\">\n      <cd-table-actions\n        class=\"btn-group\"\n        [permission]=\"permission\"\n        [selection]=\"selection\"\n        [tableActions]=\"tableActions\"\n      >\n      </cd-table-actions>\n    </div>\n  </cd-table>\n</ng-container>\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { SMBShare } from '../smb.model';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nexport const SHARE_PATH = 'cephfs/smb/share';\n\n@Component({\n  selector: 'cd-smb-share-list',\n  templateUrl: './smb-share-list.component.html',\n  styleUrls: ['./smb-share-list.component.scss']\n})\nexport class SmbShareListComponent implements OnInit {\n  @Input()\n  clusterId: string;\n  @ViewChild('table', { static: true })\n  table: TableComponent;\n  columns: CdTableColumn[];\n  permission: Permission;\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n\n  smbShares$: Observable<SMBShare[]>;\n  subject$ = new BehaviorSubject<SMBShare[]>([]);\n  modalRef: NgbModalRef;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private smbService: SmbService,\n    private taskWrapper: TaskWrapperService,\n    private modalService: ModalCdsService\n  ) {\n    this.permission = this.authStorageService.getPermissions().smb;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`ID`,\n        prop: 'share_id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`File System`,\n        prop: 'cephfs.volume',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Path`,\n        prop: 'cephfs.path',\n        cellTransformation: CellTemplate.path,\n        flexGrow: 2\n      },\n      {\n        name: $localize`Subvolume group`,\n        prop: 'cephfs.subvolumegroup',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Subvolume`,\n        prop: 'cephfs.subvolume',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Provider`,\n        prop: 'cephfs.provider',\n        flexGrow: 2\n      }\n    ];\n    this.tableActions = [\n      {\n        name: `${this.actionLabels.CREATE}`,\n        permission: 'create',\n        icon: Icons.add,\n        routerLink: () => [`/${SHARE_PATH}/${URLVerbs.CREATE}`, this.clusterId],\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        routerLink: () => [\n          `/${SHARE_PATH}/${URLVerbs.EDIT}`,\n          this.clusterId,\n          this.selection.first().name\n        ]\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteShareModal(),\n        name: this.actionLabels.DELETE\n      }\n    ];\n\n    this.smbShares$ = this.subject$.pipe(\n      switchMap(() =>\n        this.smbService.listShares(this.clusterId).pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n\n  loadSMBShares() {\n    this.subject$.next([]);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteShareModal() {\n    const cluster_id = this.selection.first().cluster_id;\n    const share_id = this.selection.first().share_id;\n    const name = this.selection.first().name;\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`SMB Share`,\n      itemNames: [`Share: ${share_id} (${name}) from cluster: ${cluster_id}`],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(`${SHARE_PATH}/${URLVerbs.DELETE}`, {\n            share_id: share_id\n          }),\n          call: this.smbService.deleteShare(cluster_id, share_id)\n        })\n    });\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <cd-smb-share-list\n    [clusterId]=\"selection.cluster_id\"\n  ></cd-smb-share-list>\n</ng-container>\n","import { Component, Input } from '@angular/core';\nimport { SMBCluster } from '../smb.model';\n\n@Component({\n  selector: 'cd-smb-cluster-tabs',\n  templateUrl: './smb-cluster-tabs.component.html',\n  styleUrls: ['./smb-cluster-tabs.component.scss']\n})\nexport class SmbClusterTabsComponent {\n  @Input()\n  selection: SMBCluster;\n}\n","<cd-smb-tabs></cd-smb-tabs>\n\n<ng-container *ngIf=\"smbClusters$ | async as smbClusters\">\n  <cd-table\n    headerTitle=\"Clusters\"\n    headerDescription=\"Logical management units that may map to one or more managed Samba service\"\n    [data]=\"smbClusters\"\n    columnMode=\"flex\"\n    [columns]=\"columns\"\n    selectionType=\"single\"\n    [hasDetails]=\"true\"\n    (setExpandedRow)=\"setExpandedRow($event)\"\n    (fetchData)=\"loadSMBCluster($event)\"\n    (updateSelection)=\"updateSelection($event)\"\n  >\n    <div class=\"table-actions\">\n      <cd-table-actions\n        class=\"btn-group\"\n        [permission]=\"permission\"\n        [selection]=\"selection\"\n        [tableActions]=\"tableActions\"\n      >\n      </cd-table-actions>\n    </div>\n    <cd-smb-cluster-tabs\n      *cdTableDetail\n      [selection]=\"expandedRow\">\n    </cd-smb-cluster-tabs>\n  </cd-table>\n</ng-container>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { Permission } from '~/app/shared/models/permissions';\n\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { SMBCluster } from '../smb.model';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\n\nexport const CLUSTER_PATH = 'cephfs/smb/cluster';\n\n@Component({\n  selector: 'cd-smb-cluster-list',\n  templateUrl: './smb-cluster-list.component.html',\n  styleUrls: ['./smb-cluster-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(CLUSTER_PATH) }]\n})\nexport class SmbClusterListComponent extends ListWithDetails implements OnInit {\n  @ViewChild('table', { static: true })\n  table: TableComponent;\n  columns: CdTableColumn[];\n  permission: Permission;\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n  smbClusters$: Observable<SMBCluster[]>;\n  subject$ = new BehaviorSubject<SMBCluster[]>([]);\n  selection = new CdTableSelection();\n  modalRef: NgbModalRef;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private smbService: SmbService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private urlBuilder: URLBuilderService\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().smb;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'cluster_id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Authentication Mode`,\n        prop: 'auth_mode',\n        flexGrow: 2\n      }\n    ];\n    this.tableActions = [\n      {\n        name: `${this.actionLabels.CREATE} cluster`,\n        permission: 'create',\n        icon: Icons.add,\n        routerLink: () => this.urlBuilder.getCreate(),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        routerLink: () =>\n          this.selection.first() && this.urlBuilder.getEdit(this.selection.first().cluster_id)\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeSMBClusterModal(),\n        name: this.actionLabels.DELETE\n      }\n    ];\n\n    this.smbClusters$ = this.subject$.pipe(\n      switchMap(() =>\n        this.smbService.listClusters()?.pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n  loadSMBCluster() {\n    this.subject$.next([]);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  removeSMBClusterModal() {\n    const cluster_id = this.selection.first().cluster_id;\n\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Cluster`,\n      itemNames: [cluster_id],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(`${CLUSTER_PATH}/${URLVerbs.DELETE}`, {\n            cluster_id: cluster_id\n          }),\n          call: this.smbService.removeCluster(cluster_id)\n        })\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { SMBUsersGroups } from '../smb.model';\n\n@Component({\n  selector: 'cd-smb-usersgroups-details',\n  templateUrl: './smb-usersgroups-details.component.html',\n  styleUrls: ['./smb-usersgroups-details.component.scss']\n})\nexport class SmbUsersgroupsDetailsComponent implements OnInit {\n  @Input()\n  selection: SMBUsersGroups;\n  columns: CdTableColumn[];\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Username`,\n        prop: 'name',\n        flexGrow: 2\n      }\n    ];\n  }\n}\n","<cds-tabs\n  type=\"contained\"\n  followFocus=\"true\"\n  isNavigation=\"true\"\n  [cacheActive]=\"false\"\n>\n  <cds-tab\n    heading=\"Users\"\n    i18n-heading>\n    <cd-table\n      [data]=\"selection?.values.users\"\n      columnMode=\"flex\"\n      [columns]=\"columns\"\n      selectionType=\"single\"\n      [hasDetails]=\"false\"\n    >\n    </cd-table>\n  </cds-tab>\n</cds-tabs>\n","<cd-smb-tabs></cd-smb-tabs>\n\n<ng-container *ngIf=\"usersGroups$ | async as usersGroups\">\n  <cd-table\n    headerTitle=\"Standalone access resoruces\"\n    headerDescription=\"Logical management units for authorization on Standalone servers\"\n    [data]=\"usersGroups\"\n    columnMode=\"flex\"\n    [columns]=\"columns\"\n    selectionType=\"single\"\n    [hasDetails]=\"true\"\n    (setExpandedRow)=\"setExpandedRow($event)\"\n    (fetchData)=\"loadUsersGroups()\"\n    (updateSelection)=\"updateSelection($event)\"\n  >\n  <div class=\"table-actions\">\n    <cd-table-actions\n      [permission]=\"permission\"\n      [selection]=\"selection\"\n      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n  <cd-smb-usersgroups-details\n    *cdTableDetail\n    [selection]=\"expandedRow\"\n  ></cd-smb-usersgroups-details>\n</cd-table>\n</ng-container>\n\n<ng-template\n  #groupsNamesTpl\n  let-row=\"data.row\"\n>\n  <cds-tag\n    *ngFor=\"let group of row?.values.groups\"\n    size=\"md\"\n  >\n    {{ group?.name }}\n  </cds-tag>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { Permission } from '~/app/shared/models/permissions';\n\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { SMBUsersGroups } from '../smb.model';\nimport { Router } from '@angular/router';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nexport const USERSGROUPS_PATH = 'cephfs/smb/standalone';\n\n@Component({\n  selector: 'cd-smb-users-list',\n  templateUrl: './smb-usersgroups-list.component.html',\n  styleUrls: ['./smb-usersgroups-list.component.scss'],\n  providers: [{ provide: URLBuilderService, useValue: new URLBuilderService(USERSGROUPS_PATH) }]\n})\nexport class SmbUsersgroupsListComponent extends ListWithDetails implements OnInit {\n  @ViewChild('groupsNamesTpl', { static: true })\n  groupsNamesTpl: TemplateRef<any>;\n  columns: CdTableColumn[];\n  permission: Permission;\n  tableActions: CdTableAction[];\n  context: CdTableFetchDataContext;\n\n  usersGroups$: Observable<SMBUsersGroups[]>;\n  subject$ = new BehaviorSubject<SMBUsersGroups[]>([]);\n  selection: CdTableSelection = new CdTableSelection();\n\n  constructor(\n    private router: Router,\n    private urlBuilder: URLBuilderService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private smbService: SmbService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().smb;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'users_groups_id',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Number of users`,\n        prop: 'values.users.length',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Groups`,\n        prop: 'values.groups',\n        cellTemplate: this.groupsNamesTpl,\n        flexGrow: 2\n      },\n      {\n        name: $localize`Linked to cluster`,\n        prop: 'values.linked_to_cluster',\n        flexGrow: 2\n      }\n    ];\n\n    this.tableActions = [\n      {\n        name: `${this.actionLabels.CREATE} standalone`,\n        permission: 'create',\n        icon: Icons.add,\n        click: () => this.router.navigate([this.urlBuilder.getCreate()]),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () =>\n          this.router.navigate([\n            this.urlBuilder.getEdit(String(this.selection.first().users_groups_id))\n          ])\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.openDeleteModal()\n      }\n    ];\n\n    this.usersGroups$ = this.subject$.pipe(\n      switchMap(() =>\n        this.smbService.listUsersGroups().pipe(\n          catchError(() => {\n            this.context.error();\n            return of(null);\n          })\n        )\n      )\n    );\n  }\n\n  loadUsersGroups() {\n    this.subject$.next([]);\n  }\n\n  openDeleteModal() {\n    const usersGroupsId = this.selection.first().users_groups_id;\n\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Users and groups access resource`,\n      itemNames: [usersGroupsId],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask(`${USERSGROUPS_PATH}/${URLVerbs.DELETE}`, {\n            usersGroupsId: usersGroupsId\n          }),\n          call: this.smbService.deleteUsersgroups(usersGroupsId)\n        })\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{ md: 4 }\"\n     *ngIf=\"orchStatus$ | async as orchStatus\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"smbForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"smbForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">\n        {{ action | titlecase }} {{ resource | upperFirst }}\n      </div>\n\n      <!-- Cluster Id -->\n      <div class=\"form-item\">\n        <cds-text-label\n          labelInputID=\"cluster_id\"\n          i18n\n          helperText=\"Unique identifier\"\n          i18n-helperText\n          cdRequiredField=\"Cluster Name\"\n          [disabled]=\"isEdit\"\n          [invalid]=\"smbForm.controls.cluster_id.invalid && smbForm.controls.cluster_id.dirty\"\n          [invalidText]=\"clusterError\"\n          >Cluster Name\n          <input\n            cdsText\n            type=\"text\"\n            id=\"cluster_id\"\n            formControlName=\"cluster_id\"\n            [invalid]=\"smbForm.controls.cluster_id.invalid && smbForm.controls.cluster_id.dirty\"\n          />\n        </cds-text-label>\n        <ng-template #clusterError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"smbForm.showError('cluster_id', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n\n      <!-- Auth Mode -->\n      <div class=\"form-item\">\n        <cds-select\n          formControlName=\"auth_mode\"\n          label=\"Authentication Mode\"\n          cdRequiredField=\"Authentication Mode\"\n          id=\"auth_mode\"\n          [invalid]=\"smbForm.controls.auth_mode.invalid && smbForm.controls.auth_mode.dirty\"\n          [invalidText]=\"authModeError\"\n          (change)=\"onAuthModeChange()\"\n          [disabled]=\"isEdit\"\n          helperText=\"Active-directory authentication for domain member servers and User authentication for\n          Stand-alone servers configuration.\"\n          i18n-helperText\n        >\n          <option value=\"active-directory\"\n                  i18n>Active Directory</option>\n          <option value=\"user\"\n                  i18n>User</option>\n        </cds-select>\n        <ng-template #authModeError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"smbForm.showError('auth_mode', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n\n      <!-- Domain Settings -->\n      <div class=\"form-item\"\n           *ngIf=\"this.smbForm.get('auth_mode').value === 'active-directory'\">\n        <div cdsCol\n             [columnNumbers]=\"{ md: 12 }\"\n             class=\"d-flex\">\n          <cds-text-label labelInputID=\"domain_settings\"\n                          i18n\n                          cdRequiredField=\"Domain Settings\">Active Directory (AD) Settings\n            <div class=\"cds-input-group\">\n              <input\n                cdsText\n                type=\"text\"\n                id=\"domain_settings\"\n                formControlName=\"domain_settings\"\n                [value]=\"domainSettingsObject?.realm\"\n                (click)=\"editDomainSettingsModal()\"\n                [invalid]=\"\n                  !smbForm.controls.domain_settings.valid &&\n                  smbForm.controls.domain_settings.dirty &&\n                  smbForm.controls.domain_settings.touched\n                \"\n              />\n              <cds-icon-button kind=\"ghost\"\n                               (click)=\"editDomainSettingsModal()\"\n                               size=\"md\">\n                <svg cdsIcon=\"edit\"\n                     size=\"32\"\n                     class=\"cds--btn__icon\"\n                     icon></svg>\n              </cds-icon-button>\n\n              <cds-icon-button kind=\"danger\"\n                               (click)=\"deleteDomainSettingsModal()\"\n                               size=\"md\">\n                <svg cdsIcon=\"trash-can\"\n                     size=\"32\"\n                     class=\"cds--btn__icon\"\n                     icon></svg>\n              </cds-icon-button>\n            </div>\n          </cds-text-label>\n        </div>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"\n            smbForm.get('domain_settings').hasError('required') &&\n            smbForm.controls.domain_settings.touched\n          \"\n          i18n>Specify the Realm and AD access resources in the Domain Settings field.</span\n        >\n        <div></div>\n      </div>\n\n      <!-- User Group Settings -->\n      <ng-container formArrayName=\"joinSources\"\n                    *ngFor=\"let _ of joinSources.controls; index as i\">\n        <div\n          cdsRow\n          *ngIf=\"this.smbForm.get('auth_mode').value === 'user' && usersGroups$ | async as usersGroups\"\n          class=\"form-item form-item-append\"\n        >\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 14 }\"\n          >\n            <cds-select\n              label=\"Standalone user access resources\"\n              i18n-label\n              [formControlName]=\"i\"\n              [invalid]=\"smbForm.controls.joinSources.controls[i].invalid && smbForm.controls.joinSources.controls[i].dirty\"\n              [invalidText]=\"ugError\"\n            >\n              <option\n                [value]=\"null\"\n                i18n\n              >-- List of users and groups access resources --\n              </option>\n              <option *ngFor=\"let ug of usersGroups\"\n                      [value]=\"ug.users_groups_id\">{{ ug.users_groups_id }}</option>\n            </cds-select>\n            <ng-template #ugError>\n              <span\n                class=\"invalid-feedback\"\n                i18n\n              >This field is required.</span>\n            </ng-template>\n          </div>\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 1 }\"\n            class=\"item-action-btn spacing\"\n          >\n            <cds-icon-button\n              kind=\"danger\"\n              *ngIf=\"i > 0\"\n              size=\"sm\"\n              (click)=\"removeUserGroupSetting(i)\"\n            >\n              <svg\n                cdsIcon=\"trash-can\"\n                size=\"32\"\n                class=\"cds--btn__icon\"></svg>\n            </cds-icon-button>\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"form-item\"\n           *ngIf=\"this.smbForm.get('auth_mode').value === 'user'\">\n        <button cdsButton=\"tertiary\"\n                type=\"button\"\n                (click)=\"addUserGroupSetting()\"\n                i18n>\n          Add user group\n          <svg cdsIcon=\"add\"\n               size=\"32\"\n               class=\"cds--btn__icon\"\n               icon></svg>\n        </button>\n\n        <button\n          cdsButton=\"tertiary\"\n          type=\"button\"\n          (click)=\"navigateCreateUsersGroups()\"\n          i18n\n        >\n          Create user group\n        <svg\n          cdsIcon=\"launch\"\n          size=\"32\"\n          class=\"cds--btn__icon\"></svg>\n        </button>\n      </div>\n\n      <cd-form-advanced-fieldset title=\"Service specifications\">\n        <!-- Placement -->\n        <ng-container *ngIf=\"orchStatus.available\">\n          <div class=\"form-item\">\n            <cds-select\n              label=\"Placement\"\n              for=\"placement\"\n              formControlName=\"placement\"\n              id=\"placement\"\n            >\n              <option value=\"hosts\"\n                      i18n>Hosts</option>\n              <option value=\"label\"\n                      i18n>Labels</option>\n            </cds-select>\n          </div>\n          <ng-container *ngIf=\"hostsAndLabels$ | async as data\">\n            <!-- Label -->\n            <div *ngIf=\"smbForm.controls.placement.value === 'label'\"\n                 class=\"form-item\">\n              <cds-combo-box\n                type=\"multi\"\n                selectionFeedback=\"top-after-reopen\"\n                label=\"Label\"\n                formControlName=\"label\"\n                id=\"label\"\n                placeholder=\"Select labels...\"\n                [appendInline]=\"true\"\n                [items]=\"data.labels\"\n                i18n-placeholder\n                (selected)=\"multiSelector($event, 'label')\"\n                [invalid]=\"smbForm.controls.label.invalid && smbForm.controls.label.dirty\"\n                [invalidText]=\"labelError\"\n                cdRequiredField=\"Label\"\n                i18n\n              >\n                <cds-dropdown-list></cds-dropdown-list>\n              </cds-combo-box>\n              <ng-template #labelError>\n                <span\n                  class=\"invalid-feedback\"\n                  *ngIf=\"smbForm.showError('label', formDir, 'required')\"\n                  i18n\n                  >This field is required.</span\n                >\n              </ng-template>\n            </div>\n\n            <!-- Hosts -->\n            <div *ngIf=\"smbForm.controls.placement.value === 'hosts'\"\n                 class=\"form-item\">\n              <cds-combo-box\n                type=\"multi\"\n                selectionFeedback=\"top-after-reopen\"\n                label=\"Hosts\"\n                formControlName=\"hosts\"\n                id=\"hosts\"\n                placeholder=\"Select hosts...\"\n                i18n-placeholder\n                [appendInline]=\"true\"\n                [items]=\"data.hosts\"\n                (selected)=\"multiSelector($event, 'hosts')\"\n                i18n\n              >\n                <cds-dropdown-list></cds-dropdown-list>\n              </cds-combo-box>\n            </div>\n          </ng-container>\n        </ng-container>\n\n        <div class=\"form-item\">\n          <cds-number\n            [id]=\"'count'\"\n            [formControlName]=\"'count'\"\n            [label]=\"'Count'\"\n            [min]=\"1\"\n          ></cds-number>\n        </div>\n\n        <!-- Custom DNS -->\n        <ng-container formArrayName=\"custom_dns\"\n                      *ngFor=\"let _ of custom_dns.controls; index as i\">\n          <div cdsRow\n               class=\"form-item form-item-append\">\n            <div cdsCol\n                 [columnNumbers]=\"{ lg: 14 }\">\n              <cds-text-label\n                for=\"custom_dns\"\n                i18n\n              >DNS\n              <input cdsText\n                     [formControlName]=\"i\"\n                     placeholder=\"192.168.76.204\"/>\n              </cds-text-label>\n            </div>\n            <div\n              cdsCol\n              [columnNumbers]=\"{ lg: 1 }\"\n              class=\"item-action-btn spacing\"\n            >\n              <cds-icon-button\n                kind=\"danger\"\n                size=\"sm\"\n                (click)=\"removeCustomDNS(i)\"\n              >\n                <svg\n                  cdsIcon=\"trash-can\"\n                  size=\"32\"\n                  class=\"cds--btn__icon\"\n                >\n                </svg>\n              </cds-icon-button>\n            </div>\n          </div>\n        </ng-container>\n\n        <div class=\"form-item\">\n          <button cdsButton=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"addCustomDns()\"\n                  i18n>\n            Add custom DNS\n            <svg\n              cdsIcon=\"add\"\n              size=\"32\"\n              class=\"cds--btn__icon\"\n              icon></svg>\n          </button>\n          <cd-helper i18n>One or more IP Addresses that will be\n            applied to the Samba containers to override\n            the default DNS resolver(s). This option is\n            intended to be used when the host Ceph node\n            is not configured to resolve DNS entries within\n            AD domain(s).\n          </cd-helper>\n        </div>\n\n        <!-- Clustering -->\n        <div class=\"form-item\">\n          <cds-select\n            formControlName=\"clustering\"\n            for=\"clustering\"\n            label=\"Clustering\"\n            id=\"clustering\"\n            helperText=\"Default value indicates that clustering should be enabled if the placement count value is any value other than 1. Always value enables clustering regardless of the placement count. Never value disables clustering regardless of the placement count. \"\n            i18n-helperText\n          >\n            <option *ngFor=\"let data of allClustering\"\n                    i18n>{{ data | upperFirst }}</option>\n          </cds-select>\n        </div>\n\n        <!-- Public addrs -->\n        <ng-container formArrayName=\"public_addrs\"\n                      *ngFor=\"let _ of public_addrs.controls; index as i\">\n          <ng-container [formGroupName]=\"i\">\n            <div cdsRow\n                 class=\"form-item form-item-append\">\n              <!-- Address -->\n              <div cdsCol\n                   [columnNumbers]=\"{ lg: 7 }\">\n                <cds-text-label\n                  for=\"public_addrs\"\n                  i18n\n                  helperText=\"This address will be assigned to one of the host's network devices and managed automatically.\"\n                  i18n-helperText\n                  cdrequiredField\n                  [invalid]=\"smbForm?.controls['public_addrs']?.controls[i].controls.address.invalid && smbForm?.controls['public_addrs']?.controls[i].controls.address.dirty\"\n                  [invalidText]=\"addressError\"\n                >Address\n                  <input\n                    cdsText\n                    type=\"text\"\n                    formControlName=\"address\"\n                    placeholder=\"192.168.4.51/24\"\n                    [invalid]=\"smbForm?.controls['public_addrs'].controls[i].controls.address.invalid && smbForm?.controls['public_addrs']?.controls[i].controls.address.dirty\"\n                  />\n                </cds-text-label>\n                <ng-template #addressError>\n                  <span\n                    class=\"invalid-feedback\"\n                  >\n                    <ng-container i18n> This field is required. </ng-container>\n                  </span>\n                </ng-template>\n              </div>\n              <!-- Destination -->\n              <div cdsCol\n                   [columnNumbers]=\"{ lg: 7 }\">\n                <cds-text-label\n                  for=\"public_addrs\"\n                  i18n\n                  helperText=\"Defines where the system will assign the managed IPs. Each string value must be a network address.\"\n                  i18n-helperText\n                >Destination\n                <input\n                  cdsText\n                  type=\"text\"\n                  formControlName=\"destination\"\n                  placeholder=\"192.168.4.0/24\"/>\n                </cds-text-label>\n              </div>\n              <div\n                cdsCol\n                [columnNumbers]=\"{ lg: 1 }\"\n                class=\"item-action-btn spacing\"\n              >\n                <cds-icon-button\n                  kind=\"danger\"\n                  size=\"sm\"\n                  (click)=\"removePublicAddrs(i)\"\n                >\n                  <svg cdsIcon=\"trash-can\"\n                       size=\"32\"\n                       class=\"cds--btn__icon\"></svg>\n                </cds-icon-button>\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n        <div\n          *ngIf=\"(this.smbForm.get('count').value > 1 && this.smbForm.get('clustering').value.toLowerCase() == CLUSTERING.Default) || this.smbForm.get('clustering').value.toLowerCase() == CLUSTERING.Always\"\n          class=\"form-item\"\n        >\n          <button cdsButton=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"addPublicAddrs()\"\n                  i18n>\n            Add public address\n            <svg\n              cdsIcon=\"add\"\n              size=\"32\"\n              class=\"cds--btn__icon\"\n              icon></svg>\n          </button>\n          <cd-helper i18n>Assign virtual IP addresses that will be managed\n            by the clustering subsystem and may automatically\n            move between nodes running Samba containers.</cd-helper>\n        </div>\n      </cd-form-advanced-fieldset>\n      <cd-form-button-panel\n        (submitActionEvent)=\"submitAction()\"\n        [form]=\"smbForm\"\n        [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n        wrappingClass=\"text-right\"\n      ></cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport _ from 'lodash';\nimport {\n  AUTHMODE,\n  CLUSTERING,\n  PLACEMENT,\n  RESOURCE,\n  DomainSettings,\n  JoinSource,\n  CLUSTER_RESOURCE,\n  ClusterRequestModel,\n  SMBUsersGroups,\n  PublicAddress,\n  SMBCluster\n} from '../smb.model';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\n\nimport { FormArray, FormControl, UntypedFormControl, Validators } from '@angular/forms';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\n\nimport { OrchestratorService } from '~/app/shared/api/orchestrator.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { SmbDomainSettingModalComponent } from '../smb-domain-setting-modal/smb-domain-setting-modal.component';\nimport { CephServicePlacement } from '~/app/shared/models/service.interface';\nimport { UpperFirstPipe } from '~/app/shared/pipes/upper-first.pipe';\nimport { CLUSTER_PATH } from '../smb-cluster-list/smb-cluster-list.component';\nimport { USERSGROUPS_PATH } from '../smb-usersgroups-list/smb-usersgroups-list.component';\nimport { Host } from '~/app/shared/models/host.interface';\n\n@Component({\n  selector: 'cd-smb-cluster-form',\n  templateUrl: './smb-cluster-form.component.html',\n  styleUrls: ['./smb-cluster-form.component.scss']\n})\nexport class SmbClusterFormComponent extends CdForm implements OnInit {\n  smbForm: CdFormGroup;\n  hostsAndLabels$: Observable<{ hosts: any[]; labels: any[] }>;\n  hasOrchestrator: boolean;\n  orchStatus$: Observable<any>;\n  allClustering: string[] = [];\n  CLUSTERING = CLUSTERING;\n  selectedLabels: string[] = [];\n  selectedHosts: string[] = [];\n  action: string;\n  resource: string;\n  icons = Icons;\n  domainSettingsObject: DomainSettings;\n  isEdit = false;\n  cluster_id: string;\n  clusterResponse: SMBCluster;\n  modalData$!: Observable<DomainSettings>;\n  usersGroups$: Observable<SMBUsersGroups[]>;\n\n  constructor(\n    private hostService: HostService,\n    private formBuilder: CdFormBuilder,\n    public smbService: SmbService,\n    public actionLabels: ActionLabelsI18n,\n    private orchService: OrchestratorService,\n    private modalService: ModalCdsService,\n    private taskWrapperService: TaskWrapperService,\n    private router: Router,\n    private cd: ChangeDetectorRef,\n    private route: ActivatedRoute\n  ) {\n    super();\n\n    this.resource = $localize`Cluster`;\n    this.modalData$ = this.smbService.modalData$;\n  }\n\n  ngOnInit() {\n    this.action = this.actionLabels.CREATE;\n    this.usersGroups$ = this.smbService.listUsersGroups();\n    if (this.router.url.startsWith(`/${CLUSTER_PATH}/${URLVerbs.EDIT}`)) {\n      this.isEdit = true;\n    }\n    this.smbService.modalData$.subscribe((data: DomainSettings) => {\n      this.domainSettingsObject = data;\n      this.smbForm.get('domain_settings').setValue(data?.realm);\n    });\n    this.hostsAndLabels$ = forkJoin({\n      hosts: this.hostService.getAllHosts(),\n      labels: this.hostService.getLabels()\n    }).pipe(\n      map(({ hosts, labels }) => ({\n        hosts: hosts.map((host: Host) => ({ content: host['hostname'] })),\n        labels: labels.map((label: string) => ({ content: label }))\n      }))\n    );\n\n    this.createForm();\n    if (this.isEdit) {\n      this.action = this.actionLabels.EDIT;\n      this.smbForm.get('cluster_id').disable();\n      this.smbForm.get('auth_mode').disable();\n      this.route.params.subscribe((params: { cluster_id: string }) => {\n        this.cluster_id = params.cluster_id;\n      });\n\n      this.smbService.getCluster(this.cluster_id).subscribe((res: SMBCluster) => {\n        this.clusterResponse = res;\n\n        const customDnsList = this.clusterResponse.custom_dns;\n        const customDnsFormArray = this.smbForm.get('custom_dns') as FormArray;\n        const joinSourcesArray = this.smbForm.get('joinSources') as FormArray;\n        const pubAddresses = this.clusterResponse.public_addrs;\n        const publicAddrsFormArray = this.smbForm.get('public_addrs') as FormArray;\n\n        if (this.clusterResponse.clustering) {\n          const responseClustering = this.clusterResponse.clustering;\n          const upperFirstPipe = new UpperFirstPipe();\n          const upperCaseCluster = upperFirstPipe.transform(responseClustering);\n          this.smbForm.get('clustering').setValue(upperCaseCluster || '');\n        }\n        if (customDnsList?.length) {\n          customDnsList.forEach((dns: string) => {\n            customDnsFormArray.push(new FormControl(dns));\n          });\n        }\n        if (this.clusterResponse.auth_mode == AUTHMODE.activeDirectory) {\n          this.domainSettingsObject = this.clusterResponse?.domain_settings;\n          this.smbForm.get('domain_settings').setValue(this.domainSettingsObject.realm);\n        } else {\n          if (\n            this.clusterResponse.user_group_settings &&\n            this.clusterResponse.user_group_settings.length > 0\n          ) {\n            this.clusterResponse.user_group_settings.forEach((JoinSource: JoinSource) => {\n              joinSourcesArray.push(new FormControl(JoinSource.ref));\n            });\n            const joinSourceRef = this.clusterResponse.user_group_settings.map(\n              (JoinSource: JoinSource) => JoinSource.ref\n            );\n            joinSourcesArray.setValue(joinSourceRef);\n          }\n        }\n        this.smbForm.get('cluster_id').setValue(this.clusterResponse.cluster_id);\n        this.smbForm.get('auth_mode').setValue(this.clusterResponse.auth_mode);\n        if (this.clusterResponse.placement.count) {\n          this.smbForm.get('count').setValue(this.clusterResponse.placement.count);\n        }\n        if (pubAddresses?.length) {\n          pubAddresses.forEach((pubAddress: PublicAddress) => {\n            publicAddrsFormArray.push(\n              this.formBuilder.group({\n                address: [pubAddress.address, Validators.required],\n                destination: [pubAddress.destination || '']\n              })\n            );\n          });\n        }\n      });\n    } else {\n      this.action = this.actionLabels.CREATE;\n      this.hostsAndLabels$ = forkJoin({\n        hosts: this.hostService.getAllHosts(),\n        labels: this.hostService.getLabels()\n      }).pipe(\n        map(({ hosts, labels }) => ({\n          hosts: hosts.map((host: Host) => ({ content: host['hostname'] })),\n          labels: labels.map((label: string) => ({ content: label }))\n        }))\n      );\n    }\n    this.orchStatus$ = this.orchService.status();\n    this.allClustering = Object.values(CLUSTERING);\n    this.loadingReady();\n    if (!this.isEdit) this.onAuthModeChange();\n  }\n\n  createForm() {\n    this.smbForm = this.formBuilder.group({\n      cluster_id: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      auth_mode: [\n        AUTHMODE.activeDirectory,\n        {\n          validators: [Validators.required]\n        }\n      ],\n      domain_settings: [null],\n      placement: [{}],\n      hosts: [[]],\n      label: [\n        null,\n        [\n          CdValidators.requiredIf({\n            placement: 'label'\n          })\n        ]\n      ],\n      count: [1],\n      custom_dns: new FormArray([]),\n      joinSources: new FormArray([]),\n      clustering: new UntypedFormControl(\n        CLUSTERING.Default.charAt(0).toUpperCase() + CLUSTERING.Default.slice(1)\n      ),\n      public_addrs: new FormArray([])\n    });\n\n    this.orchService.status().subscribe((status) => {\n      this.hasOrchestrator = status.available;\n      this.smbForm.get('placement').setValue(this.hasOrchestrator ? PLACEMENT.host : '');\n    });\n  }\n\n  multiSelector(event: any, field: 'label' | 'hosts') {\n    if (field === PLACEMENT.host) this.selectedHosts = event.map((host: any) => host.content);\n    else this.selectedLabels = event.map((label: any) => label.content);\n  }\n\n  onAuthModeChange() {\n    const authMode = this.smbForm.get('auth_mode').value;\n    const domainSettingsControl = this.smbForm.get('domain_settings');\n    const userGroupSettingsControl = this.smbForm.get('joinSources') as FormArray;\n\n    // User Group Setting should be optional if authMode is \"Active Directory\"\n    if (authMode === AUTHMODE.activeDirectory) {\n      if (userGroupSettingsControl) {\n        userGroupSettingsControl.clear();\n      }\n      if (domainSettingsControl) {\n        domainSettingsControl.setValidators(Validators.required);\n        domainSettingsControl.updateValueAndValidity();\n      }\n      if (userGroupSettingsControl) {\n        userGroupSettingsControl.clearValidators();\n        userGroupSettingsControl.updateValueAndValidity();\n      }\n      // Domain Setting should be optional if authMode is \"Users\"\n    } else if (authMode === AUTHMODE.User) {\n      const control = new FormControl(null, Validators.required);\n      userGroupSettingsControl.push(control);\n      if (domainSettingsControl) {\n        domainSettingsControl.setValue('');\n        this.domainSettingsObject = { realm: '', join_sources: [] };\n      }\n      domainSettingsControl.setErrors(null);\n      userGroupSettingsControl.setValidators(Validators.required);\n\n      if (domainSettingsControl) {\n        domainSettingsControl.clearValidators();\n        domainSettingsControl.updateValueAndValidity();\n      }\n    } else {\n      if (userGroupSettingsControl) {\n        userGroupSettingsControl.clearValidators();\n        userGroupSettingsControl.clear();\n        userGroupSettingsControl.updateValueAndValidity();\n      }\n    }\n  }\n\n  submitAction() {\n    const domainSettingsControl = this.smbForm.get('domain_settings');\n    const authMode = this.smbForm.get('auth_mode').value;\n\n    const values = this.smbForm.getRawValue();\n    const serviceSpec: object = {\n      placement: {}\n    };\n    switch (values['placement']) {\n      case PLACEMENT.host:\n        if (values['hosts'].length > 0) {\n          serviceSpec['placement']['hosts'] = this.selectedHosts;\n        }\n        break;\n      case PLACEMENT.label:\n        serviceSpec['placement']['label'] = this.selectedLabels;\n        break;\n    }\n\n    // Domain Setting should be mandatory if authMode is \"Active Directory\"\n    if (authMode === AUTHMODE.activeDirectory && !domainSettingsControl.value) {\n      domainSettingsControl.setErrors({ required: true });\n      this.smbForm.markAllAsTouched();\n      return;\n    }\n    if (this.isEdit) {\n      this.handleTaskRequest(URLVerbs.EDIT);\n    } else {\n      this.handleTaskRequest(URLVerbs.CREATE);\n    }\n  }\n\n  handleTaskRequest(urlVerb: string) {\n    const requestModel = this.buildRequest();\n    const component = this;\n    const cluster_id = this.smbForm.get('cluster_id').value;\n\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(`${CLUSTER_PATH}/${urlVerb}`, { cluster_id }),\n        call: this.smbService.createCluster(requestModel)\n      })\n      .subscribe({\n        complete: () => {\n          this.router.navigate([CLUSTER_PATH]);\n        },\n        error: () => {\n          component.smbForm.setErrors({ cdSubmitButton: true });\n        }\n      });\n  }\n\n  private buildRequest() {\n    const values = this.smbForm.getRawValue();\n    const rawFormValue = _.cloneDeep(this.smbForm.value);\n    const clusterId = this.smbForm.get('cluster_id')?.value;\n    const authMode = this.smbForm.get('auth_mode')?.value;\n\n    const joinSources: JoinSource[] = (this.domainSettingsObject?.join_sources || [])\n      .filter((source: { ref: string }) => source.ref)\n      .map((source: { ref: string }) => ({\n        ref: source.ref,\n        sourceType: RESOURCE.Resource\n      }));\n\n    const joinSourceObj = joinSources.map((source: JoinSource) => ({\n      sourceType: RESOURCE.Resource,\n      ref: source.ref\n    }));\n\n    const domainSettings = {\n      realm: this.domainSettingsObject?.realm,\n      join_sources: joinSourceObj\n    };\n\n    const requestModel: ClusterRequestModel = {\n      cluster_resource: {\n        resource_type: CLUSTER_RESOURCE,\n        cluster_id: clusterId,\n        auth_mode: authMode\n      }\n    };\n\n    if (domainSettings && domainSettings.join_sources.length > 0) {\n      requestModel.cluster_resource.domain_settings = domainSettings;\n    }\n    if (rawFormValue.joinSources?.length > 0) {\n      requestModel.cluster_resource.user_group_settings = rawFormValue.joinSources.map(\n        (source: { ref: string }) => ({\n          source_type: RESOURCE.Resource,\n          ref: source\n        })\n      );\n    }\n\n    const serviceSpec = this.getPlacementSpec(values);\n    if (serviceSpec) {\n      requestModel.cluster_resource.placement = serviceSpec;\n    }\n\n    if (rawFormValue.custom_dns?.length > 0) {\n      requestModel.cluster_resource.custom_dns = rawFormValue.custom_dns;\n    }\n\n    if (rawFormValue.public_addrs?.length > 0) {\n      requestModel.cluster_resource.public_addrs = rawFormValue.public_addrs.map(\n        (publicAddress: PublicAddress) => {\n          return publicAddress.destination ? publicAddress : { address: publicAddress.address };\n        }\n      );\n    }\n\n    if (rawFormValue.clustering && rawFormValue.clustering.toLowerCase() !== CLUSTERING.Default) {\n      requestModel.cluster_resource.clustering = rawFormValue.clustering.toLowerCase();\n    }\n\n    if (rawFormValue.placement.count) {\n      requestModel.cluster_resource.count = rawFormValue.placement.count;\n    }\n\n    return requestModel;\n  }\n\n  getPlacementSpec(values: CephServicePlacement) {\n    const serviceSpec = {\n      placement: {}\n    };\n\n    serviceSpec['placement']['count'] = values.count;\n\n    switch (values['placement']) {\n      case 'hosts':\n        if (values['hosts'].length > 0) {\n          serviceSpec['placement']['hosts'] = this.selectedHosts;\n          serviceSpec['placement']['count'] = values.count;\n        }\n        break;\n      case 'label':\n        serviceSpec['placement']['label'] = this.selectedLabels;\n        serviceSpec['placement']['count'] = values.count;\n        break;\n    }\n\n    return serviceSpec.placement;\n  }\n\n  editDomainSettingsModal() {\n    this.modalService.show(SmbDomainSettingModalComponent, {\n      domainSettingsObject: this.domainSettingsObject\n    });\n  }\n\n  deleteDomainSettingsModal() {\n    this.smbForm.get('domain_settings')?.setValue('');\n    this.domainSettingsObject = { realm: '', join_sources: [] };\n  }\n\n  get joinSources() {\n    return this.smbForm.get('joinSources') as FormArray;\n  }\n\n  get custom_dns() {\n    return this.smbForm.get('custom_dns') as FormArray;\n  }\n\n  get public_addrs() {\n    return this.smbForm.get('public_addrs') as FormArray;\n  }\n\n  addUserGroupSetting() {\n    const control = new FormControl(null, Validators.required);\n    this.joinSources.push(control);\n  }\n\n  navigateCreateUsersGroups() {\n    this.router.navigate([`${USERSGROUPS_PATH}/${URLVerbs.CREATE}`]);\n  }\n\n  addCustomDns() {\n    const control = new FormControl('', Validators.required);\n    this.custom_dns.push(control);\n  }\n\n  addPublicAddrs() {\n    const control = this.formBuilder.group({\n      address: ['', Validators.required],\n      destination: ['']\n    });\n    this.public_addrs.push(control);\n  }\n\n  removeUserGroupSetting(index: number) {\n    this.joinSources.removeAt(index);\n    this.cd.detectChanges();\n  }\n\n  removeCustomDNS(index: number) {\n    this.custom_dns.removeAt(index);\n    this.cd.detectChanges();\n  }\n\n  removePublicAddrs(index: number) {\n    this.public_addrs.removeAt(index);\n    this.cd.detectChanges();\n  }\n}\n","<div cdsCol\n     [columnNumbers]=\"{ md: 4 }\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"smbShareForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"smbShareForm\"\n          novalidate>\n      <div i18n=\"form title\"\n           class=\"form-header\">\n        {{ action | titlecase }} {{ resource | upperFirst }}\n      </div>\n\n      <!-- Share Id -->\n      <div class=\"form-item\">\n        <cds-text-label\n          labelInputID=\"share_id\"\n          i18n\n          helperText=\"Unique share identifier\"\n          i18n-helperText\n          cdRequiredField=\"Share Name\"\n          [invalid]=\"smbShareForm.controls.share_id.invalid && smbShareForm.controls.share_id.dirty\"\n          [invalidText]=\"shareError\"\n          >Share Name\n          <input\n            cdsText\n            type=\"text\"\n            id=\"share_id\"\n            formControlName=\"share_id\"\n            [invalid]=\"smbShareForm.controls.share_id.invalid && smbShareForm.controls.share_id.dirty\"\n          />\n        </cds-text-label>\n        <ng-template #shareError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"smbShareForm.showError('share_id', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n\n      <!-- Volume -->\n      <div class=\"form-item\">\n        <cds-select\n          formControlName=\"volume\"\n          label=\"Volume\"\n          cdRequiredField=\"Volume\"\n          id=\"volume\"\n          (change)=\"volumeChangeHandler()\"\n          [invalid]=\"smbShareForm.controls.volume.invalid && smbShareForm.controls.volume.dirty\"\n          [invalidText]=\"volumeError\"\n          i18n-label>\n          <option *ngIf=\"allFsNames?.length === 0\"\n                  value=\"\"\n                  i18n>\n            -- No filesystem available --\n          </option>\n          <option *ngIf=\"allFsNames !== null && allFsNames?.length > 0\"\n                  value=\"\"\n                  i18n>\n            -- Select the filesystem --\n          </option>\n          <option *ngFor=\"let filesystem of allFsNames\"\n                  [value]=\"filesystem.name\"\n                  i18n>\n            {{ filesystem.name }}\n          </option>\n        </cds-select>\n        <ng-template #volumeError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"smbShareForm.showError('volume', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\"\n           *ngIf=\"smbShareForm.getValue('volume')\">\n        <cds-select\n          formControlName=\"subvolume_group\"\n          label=\"Subvolume Group\"\n          id=\"subvolume_group\"\n          (change)=\"getSubVol()\"\n          [skeleton]=\"allsubvolgrps === null\"\n          i18n-label>\n          <option *ngIf=\"allsubvolgrps === null\"\n                  value=\"\"\n                  i18n>Loading...</option>\n          <option *ngIf=\"allsubvolgrps !== null && allsubvolgrps.length >= 0\"\n                  value=\"\"\n                  i18n>\n            -- Select the CephFS subvolume group --\n          </option>\n          <option\n            *ngFor=\"let subvol_grp of allsubvolgrps\"\n            [value]=\"subvol_grp.name\"\n            [selected]=\"subvol_grp.name === smbShareForm.get('subvolume_group').value\"\n            i18n\n          >\n            {{ subvol_grp.name }}\n          </option>\n        </cds-select>\n      </div>\n\n      <div class=\"form-group row\"\n           *ngIf=\"smbShareForm.getValue('volume')\">\n        <cds-select\n          formControlName=\"subvolume\"\n          label=\"Subvolume\"\n          id=\"subvolume\"\n          (change)=\"setSubVolPath()\"\n          [skeleton]=\"allsubvols === null\"\n        >\n          <option *ngIf=\"allsubvols === null\"\n                  value=\"\"\n                  i18n>Loading...</option>\n          <option *ngIf=\"allsubvols !== null && allsubvols.length === 0\"\n                  value=\"\"\n                  i18n>\n            -- No SMB subvolume available --\n          </option>\n          <option *ngIf=\"allsubvols !== null && allsubvols.length > 0\"\n                  value=\"\"\n                  i18n>\n            -- Select the SMB subvolume --\n          </option>\n          <option\n            *ngFor=\"let subvolume of allsubvols\"\n            [value]=\"subvolume.name\"\n            [selected]=\"subvolume.name === smbShareForm.get('subvolume').value\"\n            i18n\n          >\n            {{ subvolume.name }}\n          </option>\n        </cds-select>\n      </div>\n\n    <!-- Path -->\n    <div class=\"form-item form-item-append\"\n         cdsRow>\n      <div cdsCol>\n        <cds-text-label labelInputID=\"prefixedPath\"\n                        i18n\n                        helperText=\"A path is a relative path.\">Prefixed Path\n          <input cdsText\n                 type=\"text\"\n                 id=\"prefixedPath\"\n                 formControlName=\"prefixedPath\" />\n        </cds-text-label>\n      </div>\n      <div cdsCol>\n        <cds-text-label\n          labelInputID=\"inputPath\"\n          i18n\n          [invalid]=\"\n            smbShareForm.controls.inputPath.invalid && smbShareForm.controls.inputPath.dirty\n          \"\n          [invalidText]=\"pathError\"\n          helperText=\"A relative path in a cephFS file system.\"\n          cdRequiredField=\"Path\"\n          >Input Path\n          <input\n            cdsText\n            type=\"text\"\n            id=\"inputPath\"\n            formControlName=\"inputPath\"\n            [invalid]=\"\n              smbShareForm.controls.inputPath.invalid && smbShareForm.controls.inputPath.dirty\n            \"\n          />\n        </cds-text-label>\n        <ng-template #pathError>\n          <span\n            class=\"invalid-feedback\"\n            *ngIf=\"smbShareForm.showError('inputPath', formDir, 'required')\"\n            i18n\n            >This field is required.</span\n          >\n        </ng-template>\n      </div>\n    </div>\n\n      <!-- Browseable -->\n      <div class=\"form-item\">\n        <cds-checkbox id=\"browseable\"\n                      formControlName=\"browseable\"\n                      i18n>Browseable\n          <cd-help-text\n            >If selected the share will be included in share listings visible to\n            clients.</cd-help-text\n          >\n        </cds-checkbox>\n      </div>\n\n      <!-- Readonly -->\n      <div class=\"form-item\">\n        <cds-checkbox id=\"readonly\"\n                      formControlName=\"readonly\"\n                      i18n>Readonly\n          <cd-help-text>If selected no clients are permitted to write to the share.</cd-help-text>\n        </cds-checkbox>\n      </div>\n      <cd-form-button-panel\n        (submitActionEvent)=\"submitAction()\"\n        [form]=\"smbShareForm\"\n        [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n        wrappingClass=\"text-right\"\n      ></cd-form-button-panel>\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\nimport _ from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\n\nimport { Filesystem, PROVIDER, SHARE_RESOURCE, ShareRequestModel, SMBShare } from '../smb.model';\nimport { CephfsSubvolumeGroup } from '~/app/shared/models/cephfs-subvolume-group.model';\nimport { CephfsSubvolume } from '~/app/shared/models/cephfs-subvolume.model';\n\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { NfsService } from '~/app/shared/api/nfs.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { CephfsSubvolumeGroupService } from '~/app/shared/api/cephfs-subvolume-group.service';\nimport { CephfsSubvolumeService } from '~/app/shared/api/cephfs-subvolume.service';\nimport { CLUSTER_PATH } from '../smb-cluster-list/smb-cluster-list.component';\nimport { SHARE_PATH } from '../smb-share-list/smb-share-list.component';\n\n@Component({\n  selector: 'cd-smb-share-form',\n  templateUrl: './smb-share-form.component.html',\n  styleUrls: ['./smb-share-form.component.scss']\n})\nexport class SmbShareFormComponent extends CdForm implements OnInit {\n  smbShareForm: CdFormGroup;\n  action: string;\n  resource: string;\n  allFsNames: Filesystem[] = [];\n  allsubvolgrps: CephfsSubvolumeGroup[] = [];\n  allsubvols: CephfsSubvolume[] = [];\n  clusterId: string;\n  isEdit = false;\n  share_id: string;\n  shareResponse: SMBShare;\n\n  constructor(\n    private formBuilder: CdFormBuilder,\n    public smbService: SmbService,\n    public actionLabels: ActionLabelsI18n,\n    private nfsService: NfsService,\n    private subvolgrpService: CephfsSubvolumeGroupService,\n    private subvolService: CephfsSubvolumeService,\n    private taskWrapperService: TaskWrapperService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    super();\n    this.resource = $localize`Share`;\n    this.isEdit = this.router.url.startsWith(`/${SHARE_PATH}/${URLVerbs.EDIT}`);\n    this.action = this.isEdit ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n  }\n  ngOnInit() {\n    this.route.params.subscribe((params: any) => {\n      this.share_id = params.shareId;\n      this.clusterId = params.clusterId;\n    });\n    this.nfsService.filesystems().subscribe((data: Filesystem[]) => {\n      this.allFsNames = data;\n    });\n    this.createForm();\n    if (this.isEdit) {\n      this.smbService.getShare(this.clusterId, this.share_id).subscribe((resp: SMBShare) => {\n        this.shareResponse = resp;\n        this.smbShareForm.get('share_id').setValue(this.shareResponse.share_id);\n        this.smbShareForm.get('share_id').disable();\n        this.smbShareForm.get('volume').setValue(this.shareResponse.cephfs.volume);\n        this.smbShareForm.get('subvolume_group').setValue(this.shareResponse.cephfs.subvolumegroup);\n        this.smbShareForm.get('subvolume').setValue(this.shareResponse.cephfs.subvolume);\n        this.smbShareForm.get('inputPath').setValue(this.shareResponse.cephfs.path);\n        if (this.shareResponse.readonly) {\n          this.smbShareForm.get('readonly').setValue(this.shareResponse.readonly);\n        }\n        if (this.shareResponse.browseable) {\n          this.smbShareForm.get('browseable').setValue(this.shareResponse.browseable);\n        }\n\n        this.getSubVolGrp(this.shareResponse.cephfs.volume);\n      });\n    }\n    this.loadingReady();\n  }\n\n  createForm() {\n    this.smbShareForm = this.formBuilder.group({\n      share_id: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      volume: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      subvolume_group: new FormControl(''),\n      subvolume: new FormControl(''),\n      prefixedPath: new FormControl({ value: '', disabled: true }),\n      inputPath: new FormControl('/', {\n        validators: [Validators.required]\n      }),\n      browseable: new FormControl(true),\n      readonly: new FormControl(false)\n    });\n  }\n\n  volumeChangeHandler() {\n    const fsName = this.smbShareForm.getValue('volume');\n    this.smbShareForm.patchValue({\n      subvolume_group: '',\n      subvolume: '',\n      prefixedPath: ''\n    });\n    this.allsubvols = [];\n    if (fsName) {\n      this.getSubVolGrp(fsName);\n    }\n  }\n\n  getSubVolGrp(volume: string) {\n    this.smbShareForm.patchValue({\n      subvolume_group: '',\n      subvolume: ''\n    });\n    if (volume) {\n      this.subvolgrpService.get(volume).subscribe((data: CephfsSubvolumeGroup[]) => {\n        this.allsubvolgrps = data;\n        if (this.isEdit) {\n          const selectedSubVolGrp = this.shareResponse.cephfs.subvolumegroup;\n          if (selectedSubVolGrp && volume === this.shareResponse.cephfs.volume) {\n            const subvolGrp = this.allsubvolgrps.find((group) => group.name === selectedSubVolGrp);\n            if (subvolGrp) {\n              this.smbShareForm.get('subvolume_group').setValue(subvolGrp.name);\n              this.getSubVol();\n            }\n          }\n        }\n      });\n    }\n  }\n\n  async getSubVol() {\n    const volume = this.smbShareForm.getValue('volume');\n    const subvolgrp = this.smbShareForm.getValue('subvolume_group');\n    this.smbShareForm.patchValue({\n      subvolume: '',\n      prefixedPath: ''\n    });\n    this.allsubvols = [];\n\n    if (volume && subvolgrp) {\n      await this.setSubVolPath();\n      this.subvolService.get(volume, subvolgrp, false).subscribe((data: CephfsSubvolume[]) => {\n        this.allsubvols = data;\n        if (this.isEdit) {\n          const selectedSubVol = this.shareResponse.cephfs.subvolume;\n          if (selectedSubVol && this.shareResponse.cephfs.subvolumegroup) {\n            const subvol = this.allsubvols.find((s) => s.name === selectedSubVol);\n            if (subvol) {\n              this.smbShareForm.get('subvolume').setValue(subvol.name);\n              this.setSubVolPath();\n            }\n          }\n        }\n      });\n    }\n  }\n\n  setSubVolPath(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const fsName = this.smbShareForm.getValue('volume');\n      const subvolGroup = this.smbShareForm.getValue('subvolume_group') || ''; // Default to empty if not present\n      const subvol = this.smbShareForm.getValue('subvolume');\n\n      this.subvolService\n        .info(fsName, subvol, subvolGroup)\n        .pipe(map((data: any) => data['path']))\n        .subscribe(\n          (path: string) => {\n            this.updatePath(path);\n            resolve();\n          },\n          (error: any) => reject(error)\n        );\n    });\n  }\n\n  updatePath(prefixedPath: string) {\n    this.smbShareForm.patchValue({ prefixedPath: prefixedPath });\n  }\n\n  buildRequest() {\n    const rawFormValue = _.cloneDeep(this.smbShareForm.value);\n    const correctedPath = rawFormValue.inputPath;\n    const shareId = this.smbShareForm.get('share_id')?.value;\n    const requestModel: ShareRequestModel = {\n      share_resource: {\n        resource_type: SHARE_RESOURCE,\n        cluster_id: this.clusterId,\n        share_id: shareId,\n        cephfs: {\n          volume: rawFormValue.volume,\n          path: correctedPath,\n          subvolumegroup: rawFormValue.subvolume_group,\n          subvolume: rawFormValue.subvolume,\n          provider: PROVIDER\n        },\n        browseable: rawFormValue.browseable,\n        readonly: rawFormValue.readonly\n      }\n    };\n\n    return requestModel;\n  }\n\n  submitAction() {\n    if (this.isEdit) {\n      this.handleTaskRequest(URLVerbs.EDIT);\n    } else {\n      this.handleTaskRequest(URLVerbs.CREATE);\n    }\n  }\n\n  handleTaskRequest(urlVerb: string) {\n    const requestModel = this.buildRequest();\n    const component = this;\n    const share_id = this.smbShareForm.get('share_id').value;\n\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(`${SHARE_PATH}/${urlVerb}`, { share_id }),\n        call: this.smbService.createShare(requestModel)\n      })\n      .subscribe({\n        complete: () => {\n          this.router.navigate([CLUSTER_PATH]);\n        },\n        error: () => {\n          component.smbShareForm.setErrors({ cdSubmitButton: true });\n        }\n      });\n  }\n}\n","<div\n  cdsCol\n  [columnNumbers]=\"{ md: 4 }\"\n>\n  <form name=\"form\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"form\"\n        novalidate>\n    <div i18n=\"form title\"\n         class=\"form-header\">\n      {{ action | titlecase }} {{ resource | upperFirst }}\n    </div>\n\n    <!-- Auth Id -->\n    <div class=\"form-item\">\n      <cds-text-label\n        for=\"authId\"\n        i18n\n        helperText=\"Unique identifier\"\n        i18n-helperText\n        [invalid]=\"form.controls.authId.invalid && form.controls.authId.dirty\"\n        [invalidText]=\"jaError\"\n      >Active directory access resource name\n        <input\n          cdsText\n          type=\"text\"\n          id=\"authId\"\n          name=\"authId\"\n          formControlName=\"authId\"\n          [invalid]=\"form.controls.authId.invalid && form.controls.authId.dirty\"\n        />\n      </cds-text-label>\n      <ng-template #jaError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('authId', form, 'required')\"\n          i18n\n          >This field is required.</span\n        >\n      </ng-template>\n    </div>\n\n    <!-- Username -->\n    <div class=\"form-item\">\n      <cds-text-label\n        for=\"username\"\n        i18n\n        [invalid]=\"form.controls.username.invalid && form.controls.username.dirty\"\n        [invalidText]=\"usernameError\"\n      >Username\n      <input\n          cdsText\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          formControlName=\"username\"\n          [invalid]=\"form.controls.username.invalid && form.controls.username.dirty\"\n      />\n      </cds-text-label>\n      <ng-template #usernameError>\n        <span\n            class=\"invalid-feedback\"\n            *ngIf=\"form.showError('username', form, 'required')\"\n            i18n\n        >This field is required.\n        </span>\n      </ng-template>\n    </div>\n\n    <!-- Password -->\n    <div class=\"form-item\">\n      <cds-password-label\n        for=\"password\"\n        i18n\n        [invalid]=\"form.controls.password.invalid && form.controls.password.dirty\"\n        [invalidText]=\"passwordError\"\n      >Password\n        <input\n          cdsPassword\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          formControlName=\"password\"\n          [invalid]=\"form.controls.password.invalid && form.controls.password.dirty\"\n        />\n      </cds-password-label>\n      <ng-template #passwordError>\n        <span\n            class=\"invalid-feedback\"\n            *ngIf=\"form.showError('password', form, 'required')\"\n            i18n\n        >This field is required.\n        </span>\n      </ng-template>\n    </div>\n\n    <!-- linkedToCluster -->\n    <div\n      *ngIf=\"smbClusters$ | async as clusters\"\n      class=\"form-item\"\n    >\n      <cds-select\n        label=\"Linked to cluster\"\n        i18n-label\n        formControlName=\"linkedToCluster\"\n        name=\"linkedToCluster\"\n        cdOptionalField=\"Linked to cluster\"\n        helperText=\"This resource may only be used with the linked cluster and will automatically be removed when the linked cluster is removed.\"\n        i18n-helperText\n      >\n        <option\n          [value]=\"null\"\n          i18n\n        >-- List of clusters --\n        </option>\n        <option *ngFor=\"let cluster of clusters\"\n                [value]=\"cluster.cluster_id\">{{ cluster.cluster_id }}</option>\n      </cds-select>\n    </div>\n    <cd-form-button-panel\n        (submitActionEvent)=\"submit()\"\n        [form]=\"form\"\n        [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n        wrappingClass=\"text-right\"></cd-form-button-panel>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { JOIN_AUTH_RESOURCE, SMBCluster, SMBJoinAuth } from '../smb.model';\nimport { Observable } from 'rxjs';\nimport { JOIN_AUTH_PATH } from '../smb-join-auth-list/smb-join-auth-list.component';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'cd-smb-join-auth-form',\n  templateUrl: './smb-join-auth-form.component.html',\n  styleUrls: ['./smb-join-auth-form.component.scss']\n})\nexport class SmbJoinAuthFormComponent extends CdForm implements OnInit {\n  form: CdFormGroup;\n  action: string;\n  resource: string;\n  editing: boolean;\n  icons = Icons;\n\n  smbClusters$: Observable<SMBCluster[]>;\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapperService: TaskWrapperService,\n    private formBuilder: CdFormBuilder,\n    private smbService: SmbService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private location: Location\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/${JOIN_AUTH_PATH}/${URLVerbs.EDIT}`);\n    this.resource = $localize`Active directory (AD) access resource`;\n  }\n\n  ngOnInit() {\n    this.action = this.actionLabels.CREATE;\n    this.smbClusters$ = this.smbService.listClusters();\n    this.createForm();\n\n    if (this.editing) {\n      this.action = this.actionLabels.UPDATE;\n      this.form.get('authId').disable();\n      let editingAuthId: string;\n      this.route.params.subscribe((params: { authId: string }) => {\n        editingAuthId = params.authId;\n      });\n\n      this.smbService.getJoinAuth(editingAuthId).subscribe((joinAuth: SMBJoinAuth) => {\n        this.form.get('authId').setValue(joinAuth.auth_id);\n        this.form.get('username').setValue(joinAuth.auth.username);\n        this.form.get('password').setValue(joinAuth.auth.password);\n        this.form.get('linkedToCluster').setValue(joinAuth.linked_to_cluster);\n      });\n    }\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      authId: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      username: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      password: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      linkedToCluster: new FormControl(null)\n    });\n  }\n\n  submit() {\n    const authId = this.form.getValue('authId');\n    const username = this.form.getValue('username');\n    const password = this.form.getValue('password');\n    const linkedToCluster = this.form.getValue('linkedToCluster');\n\n    const joinAuth: SMBJoinAuth = {\n      resource_type: JOIN_AUTH_RESOURCE,\n      auth_id: authId,\n      auth: { username: username, password: password },\n      linked_to_cluster: linkedToCluster\n    };\n\n    const self = this;\n    let taskUrl = `${JOIN_AUTH_PATH}/${this.editing ? URLVerbs.EDIT : URLVerbs.CREATE}`;\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          authId: authId\n        }),\n        call: this.smbService.createJoinAuth(joinAuth)\n      })\n      .subscribe({\n        error() {\n          self.form.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.location.back();\n        }\n      });\n  }\n}\n","<div\n  cdsCol\n  [columnNumbers]=\"{ md: 4 }\"\n>\n  <form name=\"form\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"form\"\n        novalidate>\n    <div\n      i18n=\"form title\"\n      class=\"form-header\"\n    >\n      {{ action | titlecase }} {{ resource | upperFirst }}\n    </div>\n\n    <cds-file-uploader\n      *ngIf=\"!editing && !hideUploader\"\n      title=\"Upload Users and Groups\"\n      i18n-title\n      description=\"only .json and .yaml files are supported\"\n      i18n-description\n      buttonText=\"Add from file\"\n      i18n-buttonText\n      buttonType=\"primary\"\n      [accept]=\"['yaml', 'json']\"\n      [multiple]=\"false\"\n      size=\"md\"\n      (filesChange)=\"smbService.uploadData($event)\"\n    ></cds-file-uploader>\n\n    <!-- Users Groups Id -->\n    <div class=\"form-item\">\n      <cds-text-label\n        for=\"usersGroupsId\"\n        i18n\n        helperText=\"Unique identifier\"\n        i18n-helperText\n        [invalid]=\"form.controls.usersGroupsId.invalid && form.controls.usersGroupsId.dirty\"\n        [invalidText]=\"usersgroupsError\"\n      >Users and groups access resource name\n        <input\n          cdsText\n          type=\"text\"\n          id=\"usersGroupsId\"\n          name=\"usersGroupsId\"\n          formControlName=\"usersGroupsId\"\n        />\n      </cds-text-label>\n      <ng-template #usersgroupsError>\n        <span\n          class=\"invalid-feedback\"\n          *ngIf=\"form.showError('usersGroupsId', form, 'required')\"\n          i18n\n          >This field is required.</span\n        >\n      </ng-template>\n    </div>\n\n    <!-- LinkedToCluster -->\n    <div\n      *ngIf=\"smbClusters$ | async as clusters\"\n      class=\"form-item\"\n    >\n      <cds-select\n        label=\"Linked to cluster\"\n        i18n-label\n        formControlName=\"linkedToCluster\"\n        name=\"linkedToCluster\"\n        helperText=\"This resource may only be used with the linked cluster and will automatically be removed when the linked cluster is removed.\"\n        i18n-helperText\n        cdOptionalField=\"Linked to cluster\"\n      >\n        <option\n          [value]=\"null\"\n          i18n\n        >-- List of clusters --\n        </option>\n        <option\n          *ngFor=\"let cluster of clusters\"\n          [value]=\"cluster.cluster_id\">{{ cluster.cluster_id }}\n        </option>\n      </cds-select>\n    </div>\n\n    <!-- Users -->\n    <ng-container\n      formArrayName=\"users\"\n      *ngFor=\"let _ of users.controls; index as i\"\n    >\n      <ng-container [formGroupName]=\"i\">\n        <div\n          cdsRow\n          class=\"form-item form-item-append\"\n        >\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 7 }\"\n          >\n            <cds-text-label\n              for=\"name\"\n              i18n\n              [invalid]=\"form.controls['users'].controls[i].controls.name.invalid &&\n                          form.controls['users'].controls[i].controls.name.dirty\"\n              [invalidText]=\"usersNameError\"\n            >Username\n              <input\n                cdsText\n                type=\"text\"\n                formControlName=\"name\"\n                [invalid]=\"form.controls['users'].controls[i].controls.name.invalid &&\n                          form.controls['users'].controls[i].controls.name.dirty\"\n              />\n            </cds-text-label>\n            <ng-template #usersNameError>\n              <span\n                class=\"invalid-feedback\"\n                i18n\n                >This field is required.</span\n              >\n            </ng-template>\n          </div>\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 7 }\"\n          >\n            <cds-password-label\n              for=\"password\"\n              i18n\n              [invalid]=\"form.controls['users'].controls[i].controls.password.invalid &&\n                          form.controls['users'].controls[i].controls.password.dirty\"\n              [invalidText]=\"usersPasswordError\"\n            >Password\n            <input\n              cdsPassword\n              type=\"password\"\n              label=\"Password\"\n              formControlName=\"password\"\n              [invalid]=\"form.controls['users'].controls[i].controls.password.invalid &&\n                          form.controls['users'].controls[i].controls.password.dirty\"\n            >\n          </cds-password-label>\n          <ng-template #usersPasswordError>\n            <span\n              class=\"invalid-feedback\"\n              i18n\n              >This field is required.</span\n            >\n          </ng-template>\n          </div>\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 1 }\"\n            class=\"item-action-btn spacing\"\n          >\n            <cds-icon-button\n              kind=\"danger\"\n              *ngIf=\"i > 0\"\n              size=\"sm\"\n              (click)=\"removeUser(i)\"\n            >\n            <svg\n              cdsIcon=\"trash-can\"\n              size=\"32\"\n              class=\"cds--btn__icon\">\n            </svg>\n          </cds-icon-button>\n        </div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <div class=\"form-item\">\n      <button\n        cdsButton=\"tertiary\"\n        type=\"button\"\n        (click)=\"addUser()\"\n        i18n\n      >Add User\n        <svg\n          cdsIcon=\"add\"\n          size=\"32\"\n          class=\"cds--btn__icon\"\n          icon>\n        </svg>\n      </button>\n    </div>\n\n    <!-- Groups -->\n    <ng-container\n      formArrayName=\"groups\"\n      *ngFor=\"let _ of groups.controls; index as i\"\n    >\n      <ng-container [formGroupName]=\"i\">\n        <div\n          cdsRow\n          class=\"form-item form-item-append\"\n        >\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 14 }\"\n          >\n          <cds-text-label\n            for=\"name\"\n            i18n\n          >Group\n            <input\n              cdsText\n              type=\"text\"\n              formControlName=\"name\"\n            />\n          </cds-text-label>\n          </div>\n          <div\n            cdsCol\n            [columnNumbers]=\"{ lg: 1 }\"\n            class=\"item-action-btn spacing\">\n            <cds-icon-button\n              kind=\"danger\"\n              size=\"sm\"\n              (click)=\"removeGroup(i)\"\n            >\n            <svg\n              cdsIcon=\"trash-can\"\n              size=\"32\"\n              class=\"cds--btn__icon\">\n            </svg>\n          </cds-icon-button>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <div class=\"form-item\">\n      <button cdsButton=\"tertiary\"\n              type=\"button\"\n              (click)=\"addGroup()\"\n              i18n>\n        Add Group\n        <svg\n          cdsIcon=\"add\"\n          size=\"32\"\n          class=\"cds--btn__icon\"\n          icon></svg>\n      </button>\n    </div>\n\n    <cd-form-button-panel\n      (submitActionEvent)=\"submit()\"\n      [form]=\"form\"\n      [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n      wrappingClass=\"text-right\"></cd-form-button-panel>\n    </form>\n  </div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  OnInit,\n  Signal,\n  OnDestroy\n} from '@angular/core';\nimport { FormArray, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SmbService } from '~/app/shared/api/smb.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { Group, SMBCluster, SMBUsersGroups, User, USERSGROUPS_RESOURCE } from '../smb.model';\nimport { Location } from '@angular/common';\nimport { USERSGROUPS_PATH } from '../smb-usersgroups-list/smb-usersgroups-list.component';\n\n@Component({\n  selector: 'cd-smb-usersgroups-form',\n  templateUrl: './smb-usersgroups-form.component.html',\n  styleUrls: ['./smb-usersgroups-form.component.scss']\n})\nexport class SmbUsersgroupsFormComponent extends CdForm implements OnInit, OnDestroy {\n  form: CdFormGroup;\n  action: string;\n  resource: string;\n  editing: boolean;\n  icons = Icons;\n  hideUploader: boolean = false;\n\n  smbClusters$: Observable<SMBCluster[]>;\n  uploadedData: Signal<SMBUsersGroups> = computed(() => {\n    return this.smbService.dataUploader() as SMBUsersGroups;\n  });\n\n  constructor(\n    private actionLabels: ActionLabelsI18n,\n    private taskWrapperService: TaskWrapperService,\n    private formBuilder: CdFormBuilder,\n    public smbService: SmbService,\n    private router: Router,\n    private cd: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private location: Location\n  ) {\n    super();\n    this.editing = this.router.url.startsWith(`/${USERSGROUPS_PATH}/${URLVerbs.EDIT}`);\n    this.resource = $localize`users and groups access resource`;\n    effect(() => {\n      const formData = this.uploadedData();\n      if (formData) {\n        this.fillForm(formData);\n        this.hideUploader = true;\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.action = this.actionLabels.CREATE;\n    this.smbClusters$ = this.smbService.listClusters();\n    this.createForm();\n    if (this.editing) {\n      this.action = this.actionLabels.UPDATE;\n      this.form.get('usersGroupsId').disable();\n      let editingUsersGroupId: string;\n      this.route.params.subscribe((params: { usersGroupsId: string }) => {\n        editingUsersGroupId = params.usersGroupsId;\n      });\n      this.smbService\n        .getUsersGroups(editingUsersGroupId)\n        .subscribe((usersGroups: SMBUsersGroups) => {\n          this.fillForm(usersGroups);\n        });\n    } else {\n      this.addUser();\n    }\n  }\n\n  ngOnDestroy() {\n    this.smbService.setDataUploaded(null);\n  }\n\n  fillForm(usersGroups: SMBUsersGroups) {\n    this.form.get('usersGroupsId').setValue(usersGroups.users_groups_id);\n    this.form.get('linkedToCluster').setValue(usersGroups.linked_to_cluster);\n    this.users.controls.forEach((userField: CdFormGroup) => {\n      if (!userField.controls.name.value && userField.controls.password) {\n        userField.patchValue({\n          name: usersGroups.values.users[0].name,\n          password: usersGroups.values.users[0].password\n        });\n        usersGroups.values.users.shift();\n      }\n    });\n    this.groups.controls.forEach((groupField: CdFormGroup) => {\n      if (!groupField.controls.name.value) {\n        groupField.patchValue({\n          name: usersGroups.values.users[0].name\n        });\n        usersGroups.values.groups.shift();\n      }\n    });\n    usersGroups.values.users.forEach((user: User) => {\n      this.addUser(user);\n    });\n    usersGroups.values.groups.forEach((group: Group) => {\n      this.addGroup(group);\n    });\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      usersGroupsId: new FormControl('', {\n        validators: [Validators.required]\n      }),\n      linkedToCluster: new FormControl(null),\n      users: new FormArray([]),\n      groups: new FormArray([])\n    });\n  }\n\n  submit() {\n    const usersGroupsId = this.form.getValue('usersGroupsId');\n    const linkedToCluster = this.form.getValue('linkedToCluster');\n    const users = this.form.getValue('users');\n    const groups = this.form.getValue('groups');\n    const usersgroups: SMBUsersGroups = {\n      resource_type: USERSGROUPS_RESOURCE,\n      users_groups_id: usersGroupsId,\n      values: { users: users, groups: groups },\n      linked_to_cluster: linkedToCluster\n    };\n\n    const self = this;\n\n    let taskUrl = `${USERSGROUPS_PATH}/${this.editing ? URLVerbs.EDIT : URLVerbs.CREATE}`;\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          usersGroupsId: usersGroupsId\n        }),\n        call: this.smbService.createUsersGroups(usersgroups)\n      })\n      .subscribe({\n        error() {\n          self.form.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.location.back();\n        }\n      });\n  }\n\n  get users(): FormArray {\n    return this.form.get('users') as FormArray;\n  }\n\n  get groups(): FormArray {\n    return this.form.get('groups') as FormArray;\n  }\n\n  newUser(user?: User): CdFormGroup {\n    return this.formBuilder.group({\n      name: [user ? user.name : '', Validators.required],\n      password: [user ? user.password : '', [Validators.required]]\n    });\n  }\n\n  newGroup(group?: Group): CdFormGroup {\n    return this.formBuilder.group({\n      name: [group ? group.name : '']\n    });\n  }\n\n  addUser(user?: User): void {\n    this.users.push(this.newUser(user));\n  }\n\n  addGroup(group?: Group): void {\n    this.groups.push(this.newGroup(group));\n  }\n\n  removeUser(index: number): void {\n    this.users.removeAt(index);\n    this.cd.detectChanges();\n  }\n\n  removeGroup(index: number): void {\n    this.groups.removeAt(index);\n    this.cd.detectChanges();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-smb-overview',\n  templateUrl: './smb-overview.component.html',\n  styleUrl: './smb-overview.component.scss'\n})\nexport class SmbOverviewComponent {}\n","<cd-smb-tabs></cd-smb-tabs>\n\n<cd-grafana\n  i18n-title\n  title=\"SMB overview\"\n  [grafanaPath]=\"'smb-overview?'\"\n  [type]=\"'metrics'\"\n  uid=\"feem6ehrmi2o0b\"\n  grafanaStyle=\"two\">\n</cd-grafana>\n","import { Injectable, NgModule } from '@angular/core';\nimport { ActivatedRouteSnapshot, PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nimport _ from 'lodash';\n\nimport { CephfsListComponent } from './ceph/cephfs/cephfs-list/cephfs-list.component';\nimport { ConfigurationFormComponent } from './ceph/cluster/configuration/configuration-form/configuration-form.component';\nimport { ConfigurationComponent } from './ceph/cluster/configuration/configuration.component';\nimport { CreateClusterComponent } from './ceph/cluster/create-cluster/create-cluster.component';\nimport { CrushmapComponent } from './ceph/cluster/crushmap/crushmap.component';\nimport { HostFormComponent } from './ceph/cluster/hosts/host-form/host-form.component';\nimport { HostsComponent } from './ceph/cluster/hosts/hosts.component';\nimport { InventoryComponent } from './ceph/cluster/inventory/inventory.component';\nimport { LogsComponent } from './ceph/cluster/logs/logs.component';\nimport { MgrModuleFormComponent } from './ceph/cluster/mgr-modules/mgr-module-form/mgr-module-form.component';\nimport { MgrModuleListComponent } from './ceph/cluster/mgr-modules/mgr-module-list/mgr-module-list.component';\nimport { MonitorComponent } from './ceph/cluster/monitor/monitor.component';\nimport { OsdFormComponent } from './ceph/cluster/osd/osd-form/osd-form.component';\nimport { OsdListComponent } from './ceph/cluster/osd/osd-list/osd-list.component';\nimport { ActiveAlertListComponent } from './ceph/cluster/prometheus/active-alert-list/active-alert-list.component';\nimport { RulesListComponent } from './ceph/cluster/prometheus/rules-list/rules-list.component';\nimport { SilenceFormComponent } from './ceph/cluster/prometheus/silence-form/silence-form.component';\nimport { SilenceListComponent } from './ceph/cluster/prometheus/silence-list/silence-list.component';\nimport { ServiceFormComponent } from './ceph/cluster/services/service-form/service-form.component';\nimport { ServicesComponent } from './ceph/cluster/services/services.component';\nimport { TelemetryComponent } from './ceph/cluster/telemetry/telemetry.component';\nimport { DashboardComponent } from './ceph/dashboard/dashboard/dashboard.component';\nimport { NfsFormComponent } from './ceph/nfs/nfs-form/nfs-form.component';\nimport { PerformanceCounterComponent } from './ceph/performance-counter/performance-counter/performance-counter.component';\nimport { LoginPasswordFormComponent } from './core/auth/login-password-form/login-password-form.component';\nimport { LoginComponent } from './core/auth/login/login.component';\nimport { UserPasswordFormComponent } from './core/auth/user-password-form/user-password-form.component';\nimport { ErrorComponent } from './core/error/error.component';\nimport { BlankLayoutComponent } from './core/layouts/blank-layout/blank-layout.component';\nimport { LoginLayoutComponent } from './core/layouts/login-layout/login-layout.component';\nimport { WorkbenchLayoutComponent } from './core/layouts/workbench-layout/workbench-layout.component';\nimport { ApiDocsComponent } from './core/navigation/api-docs/api-docs.component';\nimport { ActionLabels, URLVerbs } from './shared/constants/app.constants';\nimport { CrudFormComponent } from './shared/forms/crud-form/crud-form.component';\nimport { CRUDTableComponent } from './shared/datatable/crud-table/crud-table.component';\nimport { BreadcrumbsResolver, IBreadcrumb } from './shared/models/breadcrumbs';\nimport { AuthGuardService } from './shared/services/auth-guard.service';\nimport { ChangePasswordGuardService } from './shared/services/change-password-guard.service';\nimport { FeatureTogglesGuardService } from './shared/services/feature-toggles-guard.service';\nimport { ModuleStatusGuardService } from './shared/services/module-status-guard.service';\nimport { NoSsoGuardService } from './shared/services/no-sso-guard.service';\nimport { UpgradeComponent } from './ceph/cluster/upgrade/upgrade.component';\nimport { CephfsVolumeFormComponent } from './ceph/cephfs/cephfs-form/cephfs-form.component';\nimport { UpgradeProgressComponent } from './ceph/cluster/upgrade/upgrade-progress/upgrade-progress.component';\nimport { MultiClusterComponent } from './ceph/cluster/multi-cluster/multi-cluster.component';\nimport { MultiClusterListComponent } from './ceph/cluster/multi-cluster/multi-cluster-list/multi-cluster-list.component';\nimport { MultiClusterDetailsComponent } from './ceph/cluster/multi-cluster/multi-cluster-details/multi-cluster-details.component';\nimport { SmbClusterFormComponent } from './ceph/smb/smb-cluster-form/smb-cluster-form.component';\nimport { SmbShareFormComponent } from './ceph/smb/smb-share-form/smb-share-form.component';\nimport { SmbJoinAuthFormComponent } from './ceph/smb/smb-join-auth-form/smb-join-auth-form.component';\nimport { SmbUsersgroupsFormComponent } from './ceph/smb/smb-usersgroups-form/smb-usersgroups-form.component';\nimport { NfsClusterComponent } from './ceph/nfs/nfs-cluster/nfs-cluster.component';\nimport { SmbClusterListComponent } from './ceph/smb/smb-cluster-list/smb-cluster-list.component';\nimport { SmbJoinAuthListComponent } from './ceph/smb/smb-join-auth-list/smb-join-auth-list.component';\nimport { SmbUsersgroupsListComponent } from './ceph/smb/smb-usersgroups-list/smb-usersgroups-list.component';\nimport { SmbOverviewComponent } from './ceph/smb/smb-overview/smb-overview.component';\n\n@Injectable()\nexport class PerformanceCounterBreadcrumbsResolver extends BreadcrumbsResolver {\n  resolve(route: ActivatedRouteSnapshot) {\n    const result: IBreadcrumb[] = [];\n\n    const fromPath = route.queryParams.fromLink || null;\n    let fromText = '';\n    switch (fromPath) {\n      case '/monitor':\n        fromText = 'Monitors';\n        break;\n      case '/hosts':\n        fromText = 'Hosts';\n        break;\n    }\n    result.push({ text: 'Cluster', path: null });\n    result.push({ text: fromText, path: fromPath });\n    result.push({ text: 'Performance Counters', path: '' });\n\n    return result;\n  }\n}\n\n@Injectable()\nexport class StartCaseBreadcrumbsResolver extends BreadcrumbsResolver {\n  resolve(route: ActivatedRouteSnapshot) {\n    const path = route.params.name;\n    const text = _.startCase(path);\n    return [{ text: `${text}/Edit`, path: path }];\n  }\n}\n\nconst routes: Routes = [\n  // Dashboard\n  { path: '', redirectTo: 'dashboard', pathMatch: 'full' },\n  { path: 'api-docs', component: ApiDocsComponent },\n  {\n    path: '',\n    component: WorkbenchLayoutComponent,\n    canActivate: [AuthGuardService, ChangePasswordGuardService],\n    canActivateChild: [AuthGuardService, ChangePasswordGuardService],\n    children: [\n      { path: 'dashboard', component: DashboardComponent },\n      { path: 'error', component: ErrorComponent },\n\n      // Cluster\n      {\n        path: 'expand-cluster',\n        component: CreateClusterComponent,\n        canActivate: [ModuleStatusGuardService],\n        data: {\n          moduleStatusGuardConfig: {\n            uiApiPath: 'orchestrator',\n            redirectTo: 'dashboard',\n            backend: 'cephadm'\n          },\n          breadcrumbs: 'Cluster/Expand Cluster'\n        }\n      },\n      {\n        path: 'hosts',\n        component: HostsComponent,\n        data: { breadcrumbs: 'Cluster/Hosts' },\n        children: [\n          {\n            path: URLVerbs.ADD,\n            component: HostFormComponent,\n            outlet: 'modal'\n          }\n        ]\n      },\n      {\n        path: 'ceph-users',\n        component: CRUDTableComponent,\n        data: {\n          breadcrumbs: 'Administration/Ceph Users',\n          resource: 'api.cluster.user@1.0'\n        }\n      },\n      {\n        path: 'cluster/user/create',\n        component: CrudFormComponent,\n        data: {\n          breadcrumbs: 'Administration/Ceph Users/Create',\n          resource: 'api.cluster.user@1.0'\n        }\n      },\n      {\n        path: 'cluster/user/import',\n        component: CrudFormComponent,\n        data: {\n          breadcrumbs: 'Administration/Ceph Users/Import',\n          resource: 'api.cluster.user@1.0'\n        }\n      },\n      {\n        path: 'cluster/user/edit',\n        component: CrudFormComponent,\n        data: {\n          breadcrumbs: 'Administration/Ceph Users/Edit',\n          resource: 'api.cluster.user@1.0'\n        }\n      },\n      {\n        path: 'monitor',\n        component: MonitorComponent,\n        data: { breadcrumbs: 'Cluster/Monitors' }\n      },\n      {\n        path: 'services',\n        component: ServicesComponent,\n        canActivate: [ModuleStatusGuardService],\n        data: {\n          moduleStatusGuardConfig: {\n            uiApiPath: 'orchestrator',\n            redirectTo: 'error',\n            section: 'orch',\n            section_info: 'Orchestrator',\n            header: 'Orchestrator is not available'\n          },\n          breadcrumbs: 'Administration/Services'\n        },\n        children: [\n          {\n            path: URLVerbs.CREATE,\n            component: ServiceFormComponent,\n            outlet: 'modal'\n          },\n          {\n            path: `${URLVerbs.CREATE}/:type`,\n            component: ServiceFormComponent,\n            outlet: 'modal'\n          },\n          {\n            path: `${URLVerbs.EDIT}/:type/:name`,\n            component: ServiceFormComponent,\n            outlet: 'modal'\n          }\n        ]\n      },\n      {\n        path: 'multi-cluster',\n        children: [\n          {\n            path: 'overview',\n            component: MultiClusterComponent\n          },\n          {\n            path: 'manage-clusters',\n            component: MultiClusterListComponent,\n            data: {\n              breadcrumbs: 'Multi-Cluster/Manage Clusters'\n            },\n            children: [\n              {\n                path: 'performance-details',\n                component: MultiClusterDetailsComponent\n              }\n            ]\n          }\n        ]\n      },\n      {\n        path: 'inventory',\n        canActivate: [ModuleStatusGuardService],\n        component: InventoryComponent,\n        data: {\n          moduleStatusGuardConfig: {\n            uiApiPath: 'orchestrator',\n            redirectTo: 'error',\n            section: 'orch',\n            section_info: 'Orchestrator',\n            header: 'Orchestrator is not available'\n          },\n          breadcrumbs: 'Cluster/Physical Disks'\n        }\n      },\n      {\n        path: 'osd',\n        data: { breadcrumbs: 'Cluster/OSDs' },\n        children: [\n          { path: '', component: OsdListComponent },\n          {\n            path: URLVerbs.CREATE,\n            component: OsdFormComponent,\n            data: { breadcrumbs: ActionLabels.CREATE }\n          }\n        ]\n      },\n      {\n        path: 'configuration',\n        data: { breadcrumbs: 'Administration/Configuration' },\n        children: [\n          { path: '', component: ConfigurationComponent },\n          {\n            path: 'edit/:name',\n            component: ConfigurationFormComponent,\n            data: { breadcrumbs: ActionLabels.EDIT }\n          }\n        ]\n      },\n      {\n        path: 'crush-map',\n        component: CrushmapComponent,\n        data: { breadcrumbs: 'Cluster/CRUSH map' }\n      },\n      {\n        path: 'logs',\n        component: LogsComponent,\n        data: { breadcrumbs: 'Observability/Logs' }\n      },\n      {\n        path: 'telemetry',\n        component: TelemetryComponent,\n        data: { breadcrumbs: 'Telemetry configuration' }\n      },\n      {\n        path: 'monitoring',\n        data: { breadcrumbs: 'Observability/Alerts' },\n        children: [\n          { path: '', redirectTo: 'active-alerts', pathMatch: 'full' },\n          {\n            path: 'active-alerts',\n            data: { breadcrumbs: 'Active Alerts' },\n            component: ActiveAlertListComponent\n          },\n          {\n            path: 'alerts',\n            data: { breadcrumbs: 'Alerts' },\n            component: RulesListComponent\n          },\n          {\n            path: 'silences',\n            data: { breadcrumbs: 'Silences' },\n            children: [\n              {\n                path: '',\n                component: SilenceListComponent\n              },\n              {\n                path: URLVerbs.CREATE,\n                component: SilenceFormComponent,\n                data: { breadcrumbs: `${ActionLabels.CREATE} Silence` }\n              },\n              {\n                path: `${URLVerbs.CREATE}/:id`,\n                component: SilenceFormComponent,\n                data: { breadcrumbs: ActionLabels.CREATE }\n              },\n              {\n                path: `${URLVerbs.EDIT}/:id`,\n                component: SilenceFormComponent,\n                data: { breadcrumbs: ActionLabels.EDIT }\n              },\n              {\n                path: `${URLVerbs.RECREATE}/:id`,\n                component: SilenceFormComponent,\n                data: { breadcrumbs: ActionLabels.RECREATE }\n              }\n            ]\n          }\n        ]\n      },\n      {\n        path: 'upgrade',\n        canActivate: [ModuleStatusGuardService],\n        data: {\n          moduleStatusGuardConfig: {\n            uiApiPath: 'orchestrator',\n            redirectTo: 'error',\n            backend: 'cephadm',\n            section: 'orch',\n            section_info: 'Orchestrator',\n            header: 'Orchestrator is not available'\n          },\n          breadcrumbs: 'Administration/Upgrade'\n        },\n        children: [\n          {\n            path: '',\n            component: UpgradeComponent\n          },\n          {\n            path: 'progress',\n            component: UpgradeProgressComponent,\n            data: { breadcrumbs: 'Progress' }\n          }\n        ]\n      },\n      {\n        path: 'perf_counters/:type/:id',\n        component: PerformanceCounterComponent,\n        data: {\n          breadcrumbs: PerformanceCounterBreadcrumbsResolver\n        }\n      },\n      // Mgr modules\n      {\n        path: 'mgr-modules',\n        data: { breadcrumbs: 'Administrator/Manager Modules' },\n        children: [\n          {\n            path: '',\n            component: MgrModuleListComponent\n          },\n          {\n            path: 'edit/:name',\n            component: MgrModuleFormComponent,\n            data: {\n              breadcrumbs: StartCaseBreadcrumbsResolver\n            }\n          }\n        ]\n      },\n      // Pools\n      {\n        path: 'pool',\n        data: { breadcrumbs: 'Cluster/Pools' },\n        loadChildren: () => import('./ceph/pool/pool.module').then((m) => m.RoutedPoolModule)\n      },\n      // Block\n      {\n        path: 'block',\n        data: { breadcrumbs: true, text: 'Block', path: null },\n        loadChildren: () => import('./ceph/block/block.module').then((m) => m.RoutedBlockModule)\n      },\n      // File Systems\n      {\n        path: 'cephfs',\n        canActivate: [FeatureTogglesGuardService],\n        children: [\n          {\n            path: 'fs',\n            component: CephfsListComponent,\n            data: { breadcrumbs: 'File/File Systems' }\n          },\n          {\n            path: `fs/${URLVerbs.CREATE}`,\n            component: CephfsVolumeFormComponent,\n            data: { breadcrumbs: ActionLabels.CREATE }\n          },\n          {\n            path: `fs/${URLVerbs.EDIT}/:id`,\n            component: CephfsVolumeFormComponent,\n            data: { breadcrumbs: ActionLabels.EDIT }\n          },\n          {\n            path: 'nfs',\n            canActivateChild: [FeatureTogglesGuardService, ModuleStatusGuardService],\n            data: {\n              moduleStatusGuardConfig: {\n                uiApiPath: 'nfs-ganesha',\n                redirectTo: 'error',\n                section: 'nfs-ganesha',\n                section_info: 'NFS GANESHA',\n                header: 'NFS-Ganesha is not configured'\n              },\n              breadcrumbs: 'File/NFS'\n            },\n            children: [\n              { path: '', component: NfsClusterComponent },\n              {\n                path: `${URLVerbs.CREATE}/:fs_name/:subvolume_group`,\n                component: NfsFormComponent,\n                data: { breadcrumbs: ActionLabels.CREATE }\n              },\n              {\n                path: `${URLVerbs.CREATE}`,\n                component: NfsFormComponent,\n                data: { breadcrumbs: ActionLabels.CREATE }\n              },\n              {\n                path: `${URLVerbs.EDIT}/:cluster_id/:export_id`,\n                component: NfsFormComponent,\n                data: { breadcrumbs: ActionLabels.EDIT }\n              }\n            ]\n          },\n          {\n            path: 'smb',\n            canActivate: [ModuleStatusGuardService],\n            data: {\n              moduleStatusGuardConfig: {\n                uiApiPath: 'smb',\n                redirectTo: 'error',\n                header: 'SMB module is not enabled',\n                module_name: 'smb',\n                navigate_to: 'cephfs/smb'\n              },\n              breadcrumbs: 'File/SMB'\n            },\n            children: [\n              { path: '', component: SmbClusterListComponent },\n              {\n                path: 'cluster',\n                data: { breadcrumbs: 'Cluster' },\n                children: [\n                  { path: '', component: SmbClusterListComponent },\n                  {\n                    path: `${URLVerbs.CREATE}`,\n                    component: SmbClusterFormComponent,\n                    data: { breadcrumbs: ActionLabels.CREATE }\n                  },\n                  {\n                    path: `${URLVerbs.EDIT}/:cluster_id`,\n                    component: SmbClusterFormComponent,\n                    data: { breadcrumbs: ActionLabels.EDIT }\n                  }\n                ]\n              },\n              {\n                path: 'active-directory',\n                data: { breadcrumbs: 'Active Directory' },\n                children: [\n                  { path: '', component: SmbJoinAuthListComponent },\n                  {\n                    path: `${URLVerbs.CREATE}`,\n                    component: SmbJoinAuthFormComponent,\n                    data: { breadcrumbs: ActionLabels.CREATE }\n                  },\n                  {\n                    path: `${URLVerbs.EDIT}/:authId`,\n                    component: SmbJoinAuthFormComponent,\n                    data: { breadcrumbs: ActionLabels.EDIT }\n                  }\n                ]\n              },\n              {\n                path: 'standalone',\n                data: { breadcrumbs: 'Standalone' },\n                children: [\n                  { path: '', component: SmbUsersgroupsListComponent },\n                  {\n                    path: `${URLVerbs.CREATE}`,\n                    component: SmbUsersgroupsFormComponent,\n                    data: { breadcrumbs: ActionLabels.CREATE }\n                  },\n                  {\n                    path: `${URLVerbs.EDIT}/:usersGroupsId`,\n                    component: SmbUsersgroupsFormComponent\n                  }\n                ]\n              },\n              {\n                path: 'overview',\n                component: SmbOverviewComponent,\n                data: { breadcrumbs: 'Overview' }\n              },\n              {\n                path: `share/${URLVerbs.CREATE}/:clusterId`,\n                component: SmbShareFormComponent,\n                data: { breadcrumbs: ActionLabels.CREATE }\n              },\n              {\n                path: `share/${URLVerbs.EDIT}/:clusterId/:shareId`,\n                component: SmbShareFormComponent,\n                data: { breadcrumbs: ActionLabels.EDIT }\n              }\n            ]\n          }\n        ]\n      },\n      // Object Gateway\n      {\n        path: 'rgw',\n        canActivate: [FeatureTogglesGuardService, ModuleStatusGuardService],\n        data: {\n          moduleStatusGuardConfig: {\n            uiApiPath: 'rgw',\n            redirectTo: 'error',\n            section: 'rgw',\n            section_info: 'Object Gateway',\n            header: 'The Object Gateway Service is not configured'\n          },\n          breadcrumbs: true,\n          text: 'Object',\n          path: null\n        },\n        loadChildren: () => import('./ceph/rgw/rgw.module').then((m) => m.RoutedRgwModule)\n      },\n      // User/Role Management\n      {\n        path: 'user-management',\n        data: { breadcrumbs: 'User management', path: null },\n        loadChildren: () => import('./core/auth/auth.module').then((m) => m.RoutedAuthModule)\n      },\n      // User Profile\n      {\n        path: 'user-profile',\n        data: { breadcrumbs: 'User profile', path: null },\n        children: [\n          {\n            path: URLVerbs.EDIT,\n            component: UserPasswordFormComponent,\n            canActivate: [NoSsoGuardService],\n            data: { breadcrumbs: ActionLabels.EDIT }\n          }\n        ]\n      }\n    ]\n  },\n  {\n    path: '',\n    component: LoginLayoutComponent,\n    children: [\n      { path: 'login', component: LoginComponent },\n      {\n        path: 'login-change-password',\n        component: LoginPasswordFormComponent,\n        canActivate: [NoSsoGuardService]\n      }\n    ]\n  },\n  {\n    path: '',\n    component: BlankLayoutComponent,\n    children: [{ path: '**', redirectTo: '/error' }]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      useHash: true,\n      preloadingStrategy: PreloadAllModules\n    })\n  ],\n  exports: [RouterModule],\n  providers: [StartCaseBreadcrumbsResolver, PerformanceCounterBreadcrumbsResolver]\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\nimport { NgbPopoverConfig, NgbTooltipConfig } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'cd-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(popoverConfig: NgbPopoverConfig, tooltipConfig: NgbTooltipConfig) {\n    popoverConfig.autoClose = 'outside';\n    popoverConfig.container = 'body';\n    popoverConfig.placement = 'bottom';\n\n    tooltipConfig.container = 'body';\n  }\n}\n","<router-outlet></router-outlet>\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"\n    }\n  }],\n  \"name\": \"add\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M26,28H6a2.0027,2.0027,0,0,1-2-2V6A2.0027,2.0027,0,0,1,6,4H16V6H6V26H26V16h2V26A2.0027,2.0027,0,0,1,26,28Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M20 2L20 4 26.586 4 18 12.586 19.414 14 28 5.414 28 12 30 12 30 2 20 2z\"\n    }\n  }],\n  \"name\": \"launch\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M12 12H14V24H12zM18 12H20V24H18z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M4 6V8H6V28a2 2 0 002 2H24a2 2 0 002-2V8h2V6zM8 28V8H24V28zM12 2H20V4H12z\"\n    }\n  }],\n  \"name\": \"trash-can\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport {\n  NgbDatepickerModule,\n  NgbNavModule,\n  NgbTimepickerModule,\n  NgbTooltipModule,\n  NgbTypeaheadModule\n} from '@ng-bootstrap/ng-bootstrap';\nimport { provideCharts, withDefaultRegisterables, BaseChartDirective } from 'ng2-charts';\n\nimport { AppRoutingModule } from '~/app/app-routing.module';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { CephfsChartComponent } from './cephfs-chart/cephfs-chart.component';\nimport { CephfsClientsComponent } from './cephfs-clients/cephfs-clients.component';\nimport { CephfsDetailComponent } from './cephfs-detail/cephfs-detail.component';\nimport { CephfsDirectoriesComponent } from './cephfs-directories/cephfs-directories.component';\nimport { CephfsVolumeFormComponent } from './cephfs-form/cephfs-form.component';\nimport { CephfsListComponent } from './cephfs-list/cephfs-list.component';\nimport { CephfsTabsComponent } from './cephfs-tabs/cephfs-tabs.component';\nimport { CephfsSubvolumeListComponent } from './cephfs-subvolume-list/cephfs-subvolume-list.component';\nimport { CephfsSubvolumeFormComponent } from './cephfs-subvolume-form/cephfs-subvolume-form.component';\nimport { CephfsSubvolumeGroupComponent } from './cephfs-subvolume-group/cephfs-subvolume-group.component';\nimport { CephfsSubvolumegroupFormComponent } from './cephfs-subvolumegroup-form/cephfs-subvolumegroup-form.component';\nimport { CephfsSubvolumeSnapshotsListComponent } from './cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-list.component';\nimport { CephfsSnapshotscheduleListComponent } from './cephfs-snapshotschedule-list/cephfs-snapshotschedule-list.component';\nimport { DataTableModule } from '../../shared/datatable/datatable.module';\nimport { CephfsSubvolumeSnapshotsFormComponent } from './cephfs-subvolume-snapshots-list/cephfs-subvolume-snapshots-form/cephfs-subvolume-snapshots-form.component';\nimport { CephfsSnapshotscheduleFormComponent } from './cephfs-snapshotschedule-form/cephfs-snapshotschedule-form.component';\nimport { CephfsMountDetailsComponent } from './cephfs-mount-details/cephfs-mount-details.component';\nimport { CephfsAuthModalComponent } from './cephfs-auth-modal/cephfs-auth-modal.component';\nimport {\n  ButtonModule,\n  CheckboxModule,\n  ComboBoxModule,\n  DatePickerModule,\n  DropdownModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  LayoutModule,\n  ModalModule,\n  NumberModule,\n  PlaceholderModule,\n  SelectModule,\n  TimePickerModule,\n  TreeviewModule,\n  TabsModule\n} from 'carbon-components-angular';\n\nimport AddIcon from '@carbon/icons/es/add/32';\nimport LaunchIcon from '@carbon/icons/es/launch/32';\nimport Close from '@carbon/icons/es/close/32';\nimport Trash from '@carbon/icons/es/trash-can/32';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    AppRoutingModule,\n    TreeviewModule,\n    NgbNavModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbTypeaheadModule,\n    NgbTooltipModule,\n    DataTableModule,\n    NgbDatepickerModule,\n    NgbTimepickerModule,\n    NgbTypeaheadModule,\n    GridModule,\n    InputModule,\n    CheckboxModule,\n    SelectModule,\n    DropdownModule,\n    ModalModule,\n    PlaceholderModule,\n    DatePickerModule,\n    TimePickerModule,\n    ButtonModule,\n    NumberModule,\n    LayoutModule,\n    ComboBoxModule,\n    IconModule,\n    BaseChartDirective,\n    TabsModule\n  ],\n  declarations: [\n    CephfsDetailComponent,\n    CephfsClientsComponent,\n    CephfsChartComponent,\n    CephfsListComponent,\n    CephfsTabsComponent,\n    CephfsVolumeFormComponent,\n    CephfsDirectoriesComponent,\n    CephfsSubvolumeListComponent,\n    CephfsSubvolumeFormComponent,\n    CephfsDirectoriesComponent,\n    CephfsSubvolumeGroupComponent,\n    CephfsSubvolumegroupFormComponent,\n    CephfsSubvolumeSnapshotsListComponent,\n    CephfsSnapshotscheduleListComponent,\n    CephfsSnapshotscheduleFormComponent,\n    CephfsSubvolumeSnapshotsFormComponent,\n    CephfsMountDetailsComponent,\n    CephfsAuthModalComponent\n  ],\n  providers: [provideCharts(withDefaultRegisterables())]\n})\nexport class CephfsModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([AddIcon, LaunchIcon, Close, Trash]);\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M4,2H2V28a2,2,0,0,0,2,2H30V28H4Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M30,9H23v2h3.59L19,18.59l-4.29-4.3a1,1,0,0,0-1.42,0L6,21.59,7.41,23,14,16.41l4.29,4.3a1,1,0,0,0,1.42,0L28,12.41V16h2Z\"\n    }\n  }],\n  \"name\": \"analytics\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8,1C4.1,1,1,4.1,1,8s3.1,7,7,7s7-3.1,7-7S11.9,1,8,1z M10.7,11.5L8,8.8l-2.7,2.7l-0.8-0.8L7.2,8L4.5,5.3l0.8-0.8L8,7.2\\tl2.7-2.7l0.8,0.8L8.8,8l2.7,2.7L10.7,11.5z\"\n    }\n  }],\n  \"name\": \"close--filled\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppRoutingModule } from '~/app/app-routing.module';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { MgrModuleDetailsComponent } from './mgr-module-details/mgr-module-details.component';\nimport { MgrModuleFormComponent } from './mgr-module-form/mgr-module-form.component';\nimport { MgrModuleListComponent } from './mgr-module-list/mgr-module-list.component';\n\n@NgModule({\n  imports: [AppRoutingModule, CommonModule, ReactiveFormsModule, SharedModule, NgbNavModule],\n  declarations: [MgrModuleListComponent, MgrModuleFormComponent, MgrModuleDetailsComponent]\n})\nexport class MgrModulesModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  ComboBoxModule,\n  DropdownModule,\n  CheckboxModule,\n  ButtonModule,\n  GridModule,\n  ProgressIndicatorModule,\n  InputModule,\n  ModalModule,\n  TreeviewModule,\n  ListModule,\n  ToggletipModule,\n  IconModule,\n  IconService\n} from 'carbon-components-angular';\nimport Analytics from '@carbon/icons/es/analytics/16';\nimport CloseFilled from '@carbon/icons/es/close--filled/16';\nimport ProgressBarRoundIcon from '@carbon/icons/es/progress-bar--round/32';\nimport {\n  NgbActiveModal,\n  NgbDatepickerModule,\n  NgbDropdownModule,\n  NgbNavModule,\n  NgbPopoverModule,\n  NgbProgressbarModule,\n  NgbTimepickerModule,\n  NgbTooltipModule,\n  NgbTypeaheadModule\n} from '@ng-bootstrap/ng-bootstrap';\nimport { PipesModule } from '~/app/shared/pipes/pipes.module';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { PerformanceCounterModule } from '../performance-counter/performance-counter.module';\nimport { CephSharedModule } from '../shared/ceph-shared.module';\nimport { ConfigurationDetailsComponent } from './configuration/configuration-details/configuration-details.component';\nimport { ConfigurationFormComponent } from './configuration/configuration-form/configuration-form.component';\nimport { ConfigurationComponent } from './configuration/configuration.component';\nimport { CreateClusterReviewComponent } from './create-cluster/create-cluster-review.component';\nimport { CreateClusterComponent } from './create-cluster/create-cluster.component';\nimport { CrushmapComponent } from './crushmap/crushmap.component';\nimport { HostDetailsComponent } from './hosts/host-details/host-details.component';\nimport { HostFormComponent } from './hosts/host-form/host-form.component';\nimport { HostsComponent } from './hosts/hosts.component';\nimport { InventoryDevicesComponent } from './inventory/inventory-devices/inventory-devices.component';\nimport { InventoryComponent } from './inventory/inventory.component';\nimport { LogsComponent } from './logs/logs.component';\nimport { MgrModulesModule } from './mgr-modules/mgr-modules.module';\nimport { MonitorComponent } from './monitor/monitor.component';\nimport { OsdCreationPreviewModalComponent } from './osd/osd-creation-preview-modal/osd-creation-preview-modal.component';\nimport { OsdDetailsComponent } from './osd/osd-details/osd-details.component';\nimport { OsdDevicesSelectionGroupsComponent } from './osd/osd-devices-selection-groups/osd-devices-selection-groups.component';\nimport { OsdDevicesSelectionModalComponent } from './osd/osd-devices-selection-modal/osd-devices-selection-modal.component';\nimport { OsdFlagsIndivModalComponent } from './osd/osd-flags-indiv-modal/osd-flags-indiv-modal.component';\nimport { OsdFlagsModalComponent } from './osd/osd-flags-modal/osd-flags-modal.component';\nimport { OsdFormComponent } from './osd/osd-form/osd-form.component';\nimport { OsdListComponent } from './osd/osd-list/osd-list.component';\nimport { OsdPgScrubModalComponent } from './osd/osd-pg-scrub-modal/osd-pg-scrub-modal.component';\nimport { OsdRecvSpeedModalComponent } from './osd/osd-recv-speed-modal/osd-recv-speed-modal.component';\nimport { OsdReweightModalComponent } from './osd/osd-reweight-modal/osd-reweight-modal.component';\nimport { OsdScrubModalComponent } from './osd/osd-scrub-modal/osd-scrub-modal.component';\nimport { ActiveAlertListComponent } from './prometheus/active-alert-list/active-alert-list.component';\nimport { PrometheusTabsComponent } from './prometheus/prometheus-tabs/prometheus-tabs.component';\nimport { RulesListComponent } from './prometheus/rules-list/rules-list.component';\nimport { SilenceFormComponent } from './prometheus/silence-form/silence-form.component';\nimport { SilenceListComponent } from './prometheus/silence-list/silence-list.component';\nimport { SilenceMatcherModalComponent } from './prometheus/silence-matcher-modal/silence-matcher-modal.component';\nimport { PlacementPipe } from './services/placement.pipe';\nimport { ServiceDaemonListComponent } from './services/service-daemon-list/service-daemon-list.component';\nimport { ServiceDetailsComponent } from './services/service-details/service-details.component';\nimport { ServiceFormComponent } from './services/service-form/service-form.component';\nimport { ServicesComponent } from './services/services.component';\nimport { TelemetryComponent } from './telemetry/telemetry.component';\nimport { UpgradeComponent } from './upgrade/upgrade.component';\nimport { UpgradeStartModalComponent } from './upgrade/upgrade-form/upgrade-start-modal.component';\nimport { UpgradeProgressComponent } from './upgrade/upgrade-progress/upgrade-progress.component';\nimport { MultiClusterComponent } from './multi-cluster/multi-cluster.component';\nimport { MultiClusterFormComponent } from './multi-cluster/multi-cluster-form/multi-cluster-form.component';\nimport { MultiClusterListComponent } from './multi-cluster/multi-cluster-list/multi-cluster-list.component';\nimport { DashboardV3Module } from '../dashboard-v3/dashboard-v3.module';\nimport { MultiClusterDetailsComponent } from './multi-cluster/multi-cluster-details/multi-cluster-details.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PerformanceCounterModule,\n    NgbNavModule,\n    SharedModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbTooltipModule,\n    MgrModulesModule,\n    NgbTypeaheadModule,\n    NgbTimepickerModule,\n    TreeviewModule,\n    CephSharedModule,\n    NgbDatepickerModule,\n    NgbPopoverModule,\n    NgbDropdownModule,\n    PipesModule,\n    NgbProgressbarModule,\n    DashboardV3Module,\n    ComboBoxModule,\n    DropdownModule,\n    CheckboxModule,\n    GridModule,\n    ProgressIndicatorModule,\n    ButtonModule,\n    InputModule,\n    ModalModule,\n    ListModule,\n    ToggletipModule,\n    IconModule\n  ],\n  declarations: [\n    MonitorComponent,\n    ConfigurationComponent,\n    OsdListComponent,\n    OsdDetailsComponent,\n    OsdScrubModalComponent,\n    OsdFlagsModalComponent,\n    HostDetailsComponent,\n    ConfigurationDetailsComponent,\n    ConfigurationFormComponent,\n    OsdReweightModalComponent,\n    CrushmapComponent,\n    LogsComponent,\n    OsdRecvSpeedModalComponent,\n    OsdPgScrubModalComponent,\n    OsdRecvSpeedModalComponent,\n    SilenceFormComponent,\n    SilenceListComponent,\n    SilenceMatcherModalComponent,\n    ServicesComponent,\n    InventoryComponent,\n    HostFormComponent,\n    OsdFormComponent,\n    OsdDevicesSelectionModalComponent,\n    InventoryDevicesComponent,\n    OsdDevicesSelectionGroupsComponent,\n    OsdCreationPreviewModalComponent,\n    RulesListComponent,\n    ActiveAlertListComponent,\n    ServiceDetailsComponent,\n    ServiceDaemonListComponent,\n    TelemetryComponent,\n    PrometheusTabsComponent,\n    ServiceFormComponent,\n    OsdFlagsIndivModalComponent,\n    PlacementPipe,\n    CreateClusterComponent,\n    CreateClusterReviewComponent,\n    UpgradeComponent,\n    UpgradeStartModalComponent,\n    UpgradeProgressComponent,\n    MultiClusterComponent,\n    MultiClusterFormComponent,\n    MultiClusterListComponent,\n    MultiClusterDetailsComponent,\n    HostsComponent\n  ],\n  providers: [NgbActiveModal]\n})\nexport class ClusterModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([Analytics, CloseFilled, ProgressBarRoundIcon]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { provideCharts, withDefaultRegisterables, BaseChartDirective } from 'ng2-charts';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { DashboardV3Module } from '../dashboard-v3/dashboard-v3.module';\nimport { CephSharedModule } from '../shared/ceph-shared.module';\nimport { FeedbackComponent } from '../shared/feedback/feedback.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HealthPieComponent } from './health-pie/health-pie.component';\nimport { HealthComponent } from './health/health.component';\nimport { InfoCardComponent } from './info-card/info-card.component';\nimport { InfoGroupComponent } from './info-group/info-group.component';\nimport { MdsDashboardSummaryPipe } from './mds-dashboard-summary.pipe';\nimport { MgrDashboardSummaryPipe } from './mgr-dashboard-summary.pipe';\nimport { MonSummaryPipe } from './mon-summary.pipe';\nimport { osdDashboardSummaryPipe } from './osd-dashboard-summary.pipe';\nimport { ToggletipModule } from 'carbon-components-angular';\n\n@NgModule({\n  imports: [\n    CephSharedModule,\n    CommonModule,\n    NgbNavModule,\n    SharedModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DashboardV3Module,\n    BaseChartDirective,\n    ToggletipModule\n  ],\n  declarations: [\n    HealthComponent,\n    DashboardComponent,\n    MonSummaryPipe,\n    osdDashboardSummaryPipe,\n    MgrDashboardSummaryPipe,\n    MdsDashboardSummaryPipe,\n    HealthPieComponent,\n    InfoCardComponent,\n    InfoGroupComponent,\n    FeedbackComponent\n  ],\n  providers: [provideCharts(withDefaultRegisterables())]\n})\nexport class DashboardModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbNavModule, NgbTooltipModule, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { NfsDetailsComponent } from './nfs-details/nfs-details.component';\nimport { NfsFormClientComponent } from './nfs-form-client/nfs-form-client.component';\nimport { NfsFormComponent } from './nfs-form/nfs-form.component';\nimport { NfsListComponent } from './nfs-list/nfs-list.component';\nimport {\n  ButtonModule,\n  CheckboxModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  RadioModule,\n  SelectModule,\n  TabsModule,\n  TagModule\n} from 'carbon-components-angular';\n\nimport Close from '@carbon/icons/es/close/32';\nimport { NfsClusterComponent } from './nfs-cluster/nfs-cluster.component';\nimport { ClusterModule } from '../cluster/cluster.module';\nimport { NfsClusterDetailsComponent } from './nfs-cluster-details/nfs-cluster-details.component';\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    RouterModule,\n    SharedModule,\n    NgbNavModule,\n    CommonModule,\n    NgbTypeaheadModule,\n    NgbTooltipModule,\n    GridModule,\n    TagModule,\n    SelectModule,\n    InputModule,\n    RadioModule,\n    CheckboxModule,\n    ButtonModule,\n    IconModule,\n    TabsModule,\n    ClusterModule\n  ],\n  exports: [NfsListComponent, NfsFormComponent, NfsDetailsComponent, NfsClusterComponent],\n  declarations: [\n    NfsListComponent,\n    NfsDetailsComponent,\n    NfsFormComponent,\n    NfsFormClientComponent,\n    NfsClusterComponent,\n    NfsClusterDetailsComponent\n  ]\n})\nexport class NfsModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([Close]);\n  }\n}\n","import Close from '@carbon/icons/es/close/32';\nimport { SmbClusterListComponent } from './smb-cluster-list/smb-cluster-list.component';\nimport { SmbClusterFormComponent } from './smb-cluster-form/smb-cluster-form.component';\nimport { AppRoutingModule } from '~/app/app-routing.module';\nimport { DataTableModule } from '~/app/shared/datatable/datatable.module';\nimport { SmbDomainSettingModalComponent } from './smb-domain-setting-modal/smb-domain-setting-modal.component';\nimport { SmbClusterTabsComponent } from './smb-cluster-tabs/smb-cluster-tabs.component';\nimport { SmbShareListComponent } from './smb-share-list/smb-share-list.component';\nimport {\n  ButtonModule,\n  CheckboxModule,\n  ComboBoxModule,\n  DropdownModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  LayoutModule,\n  ModalModule,\n  NumberModule,\n  PlaceholderModule,\n  SelectModule,\n  TabsModule,\n  TagModule,\n  FileUploaderModule\n} from 'carbon-components-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { SmbShareFormComponent } from './smb-share-form/smb-share-form.component';\n\nimport { SmbUsersgroupsListComponent } from './smb-usersgroups-list/smb-usersgroups-list.component';\nimport { SmbTabsComponent } from './smb-tabs/smb-tabs.component';\nimport { SmbJoinAuthListComponent } from './smb-join-auth-list/smb-join-auth-list.component';\nimport { SmbUsersgroupsDetailsComponent } from './smb-usersgroups-details/smb-usersgroups-details.component';\nimport { SmbJoinAuthFormComponent } from './smb-join-auth-form/smb-join-auth-form.component';\nimport { SmbUsersgroupsFormComponent } from './smb-usersgroups-form/smb-usersgroups-form.component';\nimport { SmbOverviewComponent } from './smb-overview/smb-overview.component';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    SharedModule,\n    AppRoutingModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DataTableModule,\n    GridModule,\n    SelectModule,\n    TabsModule,\n    TagModule,\n    FileUploaderModule,\n    InputModule,\n    CheckboxModule,\n    SelectModule,\n    DropdownModule,\n    ModalModule,\n    PlaceholderModule,\n    ButtonModule,\n    NumberModule,\n    LayoutModule,\n    ComboBoxModule,\n    IconModule\n  ],\n  exports: [SmbClusterListComponent, SmbClusterFormComponent],\n  declarations: [\n    SmbClusterListComponent,\n    SmbClusterFormComponent,\n    SmbDomainSettingModalComponent,\n    SmbClusterTabsComponent,\n    SmbShareListComponent,\n    SmbUsersgroupsListComponent,\n    SmbUsersgroupsDetailsComponent,\n    SmbTabsComponent,\n    SmbJoinAuthListComponent,\n    SmbUsersgroupsDetailsComponent,\n    SmbJoinAuthFormComponent,\n    SmbUsersgroupsFormComponent,\n    SmbShareFormComponent,\n    SmbOverviewComponent\n  ]\n})\nexport class SmbModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([Close]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { CephfsModule } from './cephfs/cephfs.module';\nimport { ClusterModule } from './cluster/cluster.module';\nimport { DashboardModule } from './dashboard/dashboard.module';\nimport { NfsModule } from './nfs/nfs.module';\nimport { PerformanceCounterModule } from './performance-counter/performance-counter.module';\nimport { SmbModule } from './smb/smb.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ClusterModule,\n    DashboardModule,\n    PerformanceCounterModule,\n    CephfsModule,\n    NfsModule,\n    SmbModule,\n    SharedModule\n  ],\n  declarations: []\n})\nexport class CephModule {}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M6 30H26V25a7.0082 7.0082 0 00-7-7H13a7.0082 7.0082 0 00-7 7zM9 9a7 7 0 107-7A7 7 0 009 9z\"\n    }\n  }],\n  \"name\": \"user--filled\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M27,16.76c0-.25,0-.5,0-.76s0-.51,0-.77l1.92-1.68A2,2,0,0,0,29.3,11L26.94,7a2,2,0,0,0-1.73-1,2,2,0,0,0-.64.1l-2.43.82a11.35,11.35,0,0,0-1.31-.75l-.51-2.52a2,2,0,0,0-2-1.61H13.64a2,2,0,0,0-2,1.61l-.51,2.52a11.48,11.48,0,0,0-1.32.75L7.43,6.06A2,2,0,0,0,6.79,6,2,2,0,0,0,5.06,7L2.7,11a2,2,0,0,0,.41,2.51L5,15.24c0,.25,0,.5,0,.76s0,.51,0,.77L3.11,18.45A2,2,0,0,0,2.7,21L5.06,25a2,2,0,0,0,1.73,1,2,2,0,0,0,.64-.1l2.43-.82a11.35,11.35,0,0,0,1.31.75l.51,2.52a2,2,0,0,0,2,1.61h4.72a2,2,0,0,0,2-1.61l.51-2.52a11.48,11.48,0,0,0,1.32-.75l2.42.82a2,2,0,0,0,.64.1,2,2,0,0,0,1.73-1L29.3,21a2,2,0,0,0-.41-2.51ZM25.21,24l-3.43-1.16a8.86,8.86,0,0,1-2.71,1.57L18.36,28H13.64l-.71-3.55a9.36,9.36,0,0,1-2.7-1.57L6.79,24,4.43,20l2.72-2.4a8.9,8.9,0,0,1,0-3.13L4.43,12,6.79,8l3.43,1.16a8.86,8.86,0,0,1,2.71-1.57L13.64,4h4.72l.71,3.55a9.36,9.36,0,0,1,2.7,1.57L25.21,8,27.57,12l-2.72,2.4a8.9,8.9,0,0,1,0,3.13L27.57,20Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,22a6,6,0,1,1,6-6A5.94,5.94,0,0,1,16,22Zm0-10a3.91,3.91,0,0,0-4,4,3.91,3.91,0,0,0,4,4,3.91,3.91,0,0,0,4-4A3.91,3.91,0,0,0,16,12Z\"\n    }\n  }],\n  \"name\": \"settings\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,26A12,12,0,1,1,28,16,12,12,0,0,1,16,28Z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"16\",\n      \"cy\": \"23.5\",\n      \"r\": \"1.5\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17,8H15.5A4.49,4.49,0,0,0,11,12.5V13h2v-.5A2.5,2.5,0,0,1,15.5,10H17a2.5,2.5,0,0,1,0,5H15v4.5h2V17a4.5,4.5,0,0,0,0-9Z\"\n    }\n  }],\n  \"name\": \"help\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28.7071,19.293,26,16.5859V13a10.0136,10.0136,0,0,0-9-9.9492V1H15V3.0508A10.0136,10.0136,0,0,0,6,13v3.5859L3.2929,19.293A1,1,0,0,0,3,20v3a1,1,0,0,0,1,1h7v.7768a5.152,5.152,0,0,0,4.5,5.1987A5.0057,5.0057,0,0,0,21,25V24h7a1,1,0,0,0,1-1V20A1,1,0,0,0,28.7071,19.293ZM19,25a3,3,0,0,1-6,0V24h6Zm8-3H5V20.4141L7.707,17.707A1,1,0,0,0,8,17V13a8,8,0,0,1,16,0v4a1,1,0,0,0,.293.707L27,20.4141Z\"\n    }\n  }],\n  \"name\": \"notification\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 16 16\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M13,14H3c-0.6,0-1-0.4-1-1V3c0-0.6,0.4-1,1-1h5v1H3v10h10V8h1v5C14,13.6,13.6,14,13,14z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M10 1L10 2 13.3 2 9 6.3 9.7 7 14 2.7 14 6 15 6 15 1z\"\n    }\n  }],\n  \"name\": \"launch\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M26 6v4H6V6H26m0-2H6A2 2 0 004 6v4a2 2 0 002 2H26a2 2 0 002-2V6a2 2 0 00-2-2zM10 16V26H6V16h4m0-2H6a2 2 0 00-2 2V26a2 2 0 002 2h4a2 2 0 002-2V16a2 2 0 00-2-2zM26 16V26H16V16H26m0-2H16a2 2 0 00-2 2V26a2 2 0 002 2H26a2 2 0 002-2V16a2 2 0 00-2-2z\"\n    }\n  }],\n  \"name\": \"template\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16 26c-.2559 0-.512-.0977-.707-.2928l-3-3c-.1953-.1953-.293-.4512-.293-.7071s.0977-.5118.293-.7072l3-3c.1951-.1952.451-.2928.707-.2928s.512.0977.707.2928l3 3c.1953.1953.293.4512.293.7071s-.0977.5118-.293.7072l-3 3c-.1951.1952-.4512.2928-.707.2928zm-1.5857-4l1.5857 1.5858 1.5857-1.5858-1.5857-1.5858-1.5857 1.5858zM22 20c-.2559 0-.512-.0977-.707-.2928l-3-3c-.1953-.1953-.293-.4512-.293-.7071s.0977-.5118.293-.7072l3-3c.1951-.1952.451-.2928.707-.2928s.512.0977.707.2928l3 3c.1953.1953.293.4512.293.7071s-.0977.5118-.293.7072l-3 3c-.1951.1952-.4512.2928-.707.2928zm-1.5857-4l1.5857 1.5858 1.5857-1.5858-1.5857-1.5858-1.5857 1.5858zM16 14c-.2559 0-.512-.0977-.707-.2928l-3-3c-.1953-.1953-.293-.4512-.293-.7071s.0977-.5118.293-.7072l3-3c.1951-.1952.451-.2928.707-.2928s.512.0977.707.2928l3 3c.1953.1953.293.4512.293.7071s-.0977.5118-.293.7072l-3 3c-.1951.1952-.4512.2928-.707.2928zm-1.5857-4l1.5857 1.5858 1.5857-1.5858-1.5857-1.5858-1.5857 1.5858zM10 20c-.2559 0-.512-.0977-.707-.2928l-3-3c-.1953-.1953-.293-.4512-.293-.7071s.0977-.5118.293-.7072l3-3c.1951-.1952.451-.2928.707-.2928s.512.0977.707.2928l3 3c.1953.1953.293.4512.293.7071s-.0977.5118-.293.7072l-3 3c-.1951.1952-.4512.2928-.707.2928zm-1.5857-4l1.5857 1.5858 1.5857-1.5858-1.5857-1.5858-1.5857 1.5858z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"m16,1c-.1741,0-.3481.0454-.5039.1362L3.4961,8.1362c-.3071.1792-.4961.5081-.4961.8638v14c0,.3557.189.6846.4961.8638l12,7c.1558.0908.3298.1362.5039.1362s.3481-.0454.5039-.1362l11-6.4166-1.0078-1.7275-10.4961,6.1227-11-6.4166v-12.8513L16,3.1577l11,6.4166v7.4257h2v-8c0-.3557-.189-.6846-.4961-.8638L16.5039,1.1362c-.1558-.0908-.3298-.1362-.5039-.1362Z\"\n    }\n  }],\n  \"name\": \"web-services--cluster\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16 7a3 3 0 113-3A3.0033 3.0033 0 0116 7zm0-4a1 1 0 101 1A1.001 1.001 0 0016 3zM11 30a3 3 0 113-3A3.0033 3.0033 0 0111 30zm0-4a1 1 0 101 1A1.001 1.001 0 0011 26zM7 11a3 3 0 113-3A3.0033 3.0033 0 017 11zM7 7A1 1 0 108 8 1.001 1.001 0 007 7zM21 30a3 3 0 113-3A3.0033 3.0033 0 0121 30zm0-4a1 1 0 101 1A1.001 1.001 0 0021 26zM25 11a3 3 0 113-3A3.0033 3.0033 0 0125 11zm0-4a1 1 0 101 1A1.001 1.001 0 0025 7zM4 21a3 3 0 113-3A3.0033 3.0033 0 014 21zm0-4a1 1 0 101 1A1.001 1.001 0 004 17zM28 21a3 3 0 113-3A3.0033 3.0033 0 0128 21zm0-4a1 1 0 101 1A1.001 1.001 0 0028 17zM16 22a6 6 0 116-6A6.0069 6.0069 0 0116 22zm0-10a4 4 0 104 4A4.0045 4.0045 0 0016 12z\"\n    }\n  }],\n  \"name\": \"edge-cluster\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"23\",\n      \"cy\": \"23\",\n      \"r\": \"1\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 22H20V24H8z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"23\",\n      \"cy\": \"9\",\n      \"r\": \"1\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 8H20V10H8z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M26,14a2,2,0,0,0,2-2V6a2,2,0,0,0-2-2H6A2,2,0,0,0,4,6v6a2,2,0,0,0,2,2H8v4H6a2,2,0,0,0-2,2v6a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V20a2,2,0,0,0-2-2H24V14ZM6,6H26v6H6ZM26,26H6V20H26Zm-4-8H10V14H22Z\"\n    }\n  }],\n  \"name\": \"datastore\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28,20H26v2h2v6H4V22H14V20H4a2.0023,2.0023,0,0,0-2,2v6a2.0023,2.0023,0,0,0,2,2H28a2.0023,2.0023,0,0,0,2-2V22A2.0023,2.0023,0,0,0,28,20Z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"7\",\n      \"cy\": \"25\",\n      \"r\": \"1\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M30 8H22v6H16v8h8V16h6zM22 20H18V16h4zm6-6H24V10h4zM18 10H10V2h8zM12 8h4V4H12z\"\n    }\n  }],\n  \"name\": \"object-storage\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28,20H26v2h2v6H4V22H6V20H4a2.0024,2.0024,0,0,0-2,2v6a2.0024,2.0024,0,0,0,2,2H28a2.0024,2.0024,0,0,0,2-2V22A2.0024,2.0024,0,0,0,28,20Z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"7\",\n      \"cy\": \"25\",\n      \"r\": \"1\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M22.707,7.293l-5-5A1,1,0,0,0,17,2H11A2.0023,2.0023,0,0,0,9,4V20a2.0023,2.0023,0,0,0,2,2H21a2.0023,2.0023,0,0,0,2-2V8A1,1,0,0,0,22.707,7.293ZM20.5857,8H17V4.4141ZM11,20V4h4V8a2.0023,2.0023,0,0,0,2,2h4V20Z\"\n    }\n  }],\n  \"name\": \"file-storage\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M4,18A12,12,0,1,0,16,6H12V1L6,7l6,6V8h4A10,10,0,1,1,6,18Z\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"13.5\",\n      \"cy\": \"23.5\",\n      \"r\": \"1.5\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"10.5\",\n      \"cy\": \"19.5\",\n      \"r\": \"1.5\"\n    }\n  }, {\n    \"elem\": \"circle\",\n    \"attrs\": {\n      \"cx\": \"16.5\",\n      \"cy\": \"19.5\",\n      \"r\": \"1.5\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M11.964 14.5H17.036V16.499H11.964z\",\n      \"transform\": \"rotate(-45 14.5 15.5)\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M17.964 14.5H23.035999999999998V16.499H17.964z\",\n      \"transform\": \"rotate(-45 20.5 15.5)\"\n    }\n  }],\n  \"name\": \"observed--hail\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M27 20.415L25.586 19 23 21.587 20.414 19 19 20.415 21.586 23 19 25.586 20.414 27 23 24.414 25.586 27 27 25.586 24.414 23 27 20.415zM24 4a4.0045 4.0045 0 00-4 4 3.951 3.951 0 00.5669 2.019L10.019 20.5669A3.9521 3.9521 0 008 20a4 4 0 104 4 3.951 3.951 0 00-.5669-2.019L21.981 11.4331A3.9521 3.9521 0 0024 12a4 4 0 000-8zM8 26a2 2 0 112-2A2.0023 2.0023 0 018 26zM24 10a2 2 0 112-2A2.0023 2.0023 0 0124 10zM8 11.18L5.41 8.59 4 10 8 14 15 7 13.59 5.59 8 11.18z\"\n    }\n  }],\n  \"name\": \"network--admin-control\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M6,30H18a2.0023,2.0023,0,0,0,2-2V25H18v3H6V4H18V7h2V4a2.0023,2.0023,0,0,0-2-2H6A2.0023,2.0023,0,0,0,4,4V28A2.0023,2.0023,0,0,0,6,30Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M20.586 20.586L24.172 17 10 17 10 15 24.172 15 20.586 11.414 22 10 28 16 22 22 20.586 20.586z\"\n    }\n  }],\n  \"name\": \"logout\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbCollapseModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { SimplebarAngularModule } from 'simplebar-angular';\nimport {\n  UIShellModule,\n  IconService,\n  IconModule,\n  ThemeModule,\n  DialogModule,\n  GridModule,\n  BreadcrumbModule\n} from 'carbon-components-angular';\n\nimport { AppRoutingModule } from '~/app/app-routing.module';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { AuthModule } from '../auth/auth.module';\nimport { AboutComponent } from './about/about.component';\nimport { AdministrationComponent } from './administration/administration.component';\nimport { ApiDocsComponent } from './api-docs/api-docs.component';\nimport { BreadcrumbsComponent } from './breadcrumbs/breadcrumbs.component';\nimport { DashboardHelpComponent } from './dashboard-help/dashboard-help.component';\nimport { IdentityComponent } from './identity/identity.component';\nimport { NavigationComponent } from './navigation/navigation.component';\nimport { NotificationsComponent } from './notifications/notifications.component';\n\n// Icons\nimport UserFilledIcon from '@carbon/icons/es/user--filled/20';\nimport SettingsIcon from '@carbon/icons/es/settings/20';\nimport HelpIcon from '@carbon/icons/es/help/20';\nimport NotificationIcon from '@carbon/icons/es/notification/20';\nimport LaunchIcon from '@carbon/icons/es/launch/16';\nimport DashboardIcon from '@carbon/icons/es/template/20';\nimport ClusterIcon from '@carbon/icons/es/web-services--cluster/20';\nimport MultiClusterIcon from '@carbon/icons/es/edge-cluster/20';\nimport BlockIcon from '@carbon/icons/es/datastore/20';\nimport ObjectIcon from '@carbon/icons/es/object-storage/20';\nimport FileIcon from '@carbon/icons/es/file-storage/20';\nimport ObservabilityIcon from '@carbon/icons/es/observed--hail/20';\nimport AdminIcon from '@carbon/icons/es/network--admin-control/20';\nimport LockedIcon from '@carbon/icons/es/locked/16';\nimport LogoutIcon from '@carbon/icons/es/logout/16';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AuthModule,\n    NgbCollapseModule,\n    NgbDropdownModule,\n    AppRoutingModule,\n    SharedModule,\n    SimplebarAngularModule,\n    RouterModule,\n    UIShellModule,\n    IconModule,\n    ThemeModule,\n    DialogModule,\n    GridModule,\n    BreadcrumbModule\n  ],\n  declarations: [\n    AboutComponent,\n    ApiDocsComponent,\n    BreadcrumbsComponent,\n    NavigationComponent,\n    NotificationsComponent,\n    DashboardHelpComponent,\n    AdministrationComponent,\n    IdentityComponent\n  ],\n  exports: [NavigationComponent, BreadcrumbsComponent]\n})\nexport class NavigationModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      UserFilledIcon,\n      SettingsIcon,\n      HelpIcon,\n      NotificationIcon,\n      LaunchIcon,\n      DashboardIcon,\n      ClusterIcon,\n      MultiClusterIcon,\n      BlockIcon,\n      ObjectIcon,\n      FileIcon,\n      ObservabilityIcon,\n      AdminIcon,\n      LockedIcon,\n      LogoutIcon\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { BlockUIModule } from 'ng-block-ui';\n\nimport { ContextComponent } from '~/app/core/context/context.component';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { ErrorComponent } from './error/error.component';\nimport { BlankLayoutComponent } from './layouts/blank-layout/blank-layout.component';\nimport { LoginLayoutComponent } from './layouts/login-layout/login-layout.component';\nimport { WorkbenchLayoutComponent } from './layouts/workbench-layout/workbench-layout.component';\nimport { NavigationModule } from './navigation/navigation.module';\nimport { PlaceholderModule } from 'carbon-components-angular';\n\n@NgModule({\n  imports: [\n    BlockUIModule.forRoot(),\n    CommonModule,\n    NavigationModule,\n    NgbDropdownModule,\n    RouterModule,\n    SharedModule,\n    PlaceholderModule\n  ],\n  exports: [NavigationModule],\n  declarations: [\n    ContextComponent,\n    WorkbenchLayoutComponent,\n    BlankLayoutComponent,\n    LoginLayoutComponent,\n    ErrorComponent\n  ]\n})\nexport class CoreModule {}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { Observable, throwError as observableThrowError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CdHelperClass } from '~/app/shared/classes/cd-helper.class';\nimport { NotificationType } from '../enum/notification-type.enum';\nimport { CdNotificationConfig } from '../models/cd-notification';\nimport { FinishedTask } from '../models/finished-task';\nimport { NotificationService } from './notification.service';\nimport { AuthStorageService } from './auth-storage.service';\nimport { CookiesService } from './cookie.service';\n\nexport class CdHttpErrorResponse extends HttpErrorResponse {\n  preventDefault: Function;\n  ignoreStatusCode: Function;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiInterceptorService implements HttpInterceptor {\n  constructor(\n    private router: Router,\n    public notificationService: NotificationService,\n    private authStorageService: AuthStorageService,\n    private cookieService: CookiesService\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const acceptHeader = request.headers.get('Accept');\n    let reqWithVersion: HttpRequest<any>;\n\n    const origin = window.location.origin;\n    if (acceptHeader && acceptHeader.startsWith('application/vnd.ceph.api.v')) {\n      reqWithVersion = request.clone();\n    } else {\n      reqWithVersion = request.clone({\n        setHeaders: {\n          Accept: CdHelperClass.cdVersionHeader('1', '0')\n        }\n      });\n    }\n\n    let apiUrl = localStorage.getItem('cluster_api_url');\n\n    if (apiUrl && !apiUrl.endsWith('/')) {\n      apiUrl += '/';\n    }\n    const currentRoute = this.router.url.split('?')[0];\n\n    const ALWAYS_TO_HUB_APIs = [\n      'api/auth/login',\n      'api/auth/logout',\n      'api/multi-cluster/set_config',\n      'api/multi-cluster/get_config',\n      'api/multi-cluster/auth'\n    ];\n\n    if (\n      !currentRoute.includes('login') &&\n      !ALWAYS_TO_HUB_APIs.includes(request.url) &&\n      apiUrl &&\n      !apiUrl.includes(origin)\n    ) {\n      const token = this.cookieService.getToken(localStorage.getItem('current_cluster_name'));\n      reqWithVersion = reqWithVersion.clone({\n        url: `${apiUrl}${reqWithVersion.url}`,\n        setHeaders: {\n          'Access-Control-Allow-Origin': origin,\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    return next.handle(reqWithVersion).pipe(\n      catchError((resp: CdHttpErrorResponse) => {\n        if (resp instanceof HttpErrorResponse) {\n          let timeoutId: number;\n          switch (resp.status) {\n            case 400:\n              const finishedTask = new FinishedTask();\n\n              const task = resp.error.task;\n              if (_.isPlainObject(task)) {\n                task.metadata.component = task.metadata.component || resp.error.component;\n\n                finishedTask.name = task.name;\n                finishedTask.metadata = task.metadata;\n              } else {\n                finishedTask.metadata = resp.error;\n              }\n\n              finishedTask.success = false;\n              finishedTask.exception = resp.error;\n              timeoutId = this.notificationService.notifyTask(finishedTask);\n              break;\n            case 401:\n              this.authStorageService.remove();\n              this.router.navigate(['/login']);\n              break;\n            case 403:\n              this.router.navigate(['error'], {\n                state: {\n                  message: $localize`Sorry, you don’t have permission to view this page or resource.`,\n                  header: $localize`Access Denied`,\n                  icon: 'fa fa-lock',\n                  source: 'forbidden'\n                }\n              });\n              break;\n            default:\n              timeoutId = this.prepareNotification(resp);\n          }\n\n          /**\n           * Decorated preventDefault method (in case error previously had\n           * preventDefault method defined). If called, it will prevent a\n           * notification to be shown.\n           */\n          resp.preventDefault = () => {\n            this.notificationService.cancel(timeoutId);\n          };\n\n          /**\n           * If called, it will prevent a notification for the specific status code.\n           * @param {number} status The status code to be ignored.\n           */\n          resp.ignoreStatusCode = function (status: number) {\n            if (this.status === status) {\n              this.preventDefault();\n            }\n          };\n        }\n        // Return the error to the method that called it.\n        return observableThrowError(resp);\n      })\n    );\n  }\n\n  private prepareNotification(resp: any): number {\n    return this.notificationService.show(() => {\n      let message = '';\n      if (_.isPlainObject(resp.error) && _.isString(resp.error.detail)) {\n        message = resp.error.detail; // Error was triggered by the backend.\n      } else if (_.isString(resp.error)) {\n        message = resp.error;\n      } else if (_.isString(resp.message)) {\n        message = resp.message;\n      }\n      return new CdNotificationConfig(\n        NotificationType.error,\n        `${resp.status} - ${resp.statusText}`,\n        message,\n        undefined,\n        resp['application']\n      );\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggingService {\n  constructor(private http: HttpClient) {}\n\n  jsError(url: string, message: string, stack: any) {\n    const request = {\n      url: url,\n      message: message,\n      stack: stack\n    };\n    return this.http.post('ui-api/logging/js-error', request);\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { DashboardError } from '~/app/core/error/error';\nimport { LoggingService } from '../api/logging.service';\n\n@Injectable()\nexport class JsErrorHandler implements ErrorHandler {\n  constructor(private injector: Injector, private router: Router) {}\n\n  handleError(error: any) {\n    const loggingService = this.injector.get(LoggingService);\n    const url = window.location.href;\n    const message = error && error.message;\n    const stack = error && error.stack;\n    loggingService.jsError(url, message, stack).subscribe();\n    if (error.rejection instanceof DashboardError) {\n      setTimeout(\n        () =>\n          this.router.navigate(['error'], {\n            state: {\n              message: error.rejection.message,\n              header: error.rejection.header,\n              icon: error.rejection.icon\n            }\n          }),\n        50\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n","import { APP_BASE_HREF } from '@angular/common';\nimport { HTTP_INTERCEPTORS, provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CephModule } from './ceph/ceph.module';\nimport { CoreModule } from './core/core.module';\nimport { ApiInterceptorService } from './shared/services/api-interceptor.service';\nimport { JsErrorHandler } from './shared/services/js-error-handler.service';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  exports: [SharedModule],\n  bootstrap: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot({\n      positionClass: 'toast-top-right',\n      preventDuplicates: true,\n      enableHtml: true\n    }),\n    AppRoutingModule,\n    CoreModule,\n    SharedModule,\n    CephModule\n  ],\n  providers: [\n    {\n      provide: ErrorHandler,\n      useClass: JsErrorHandler\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiInterceptorService,\n      multi: true\n    },\n    {\n      provide: APP_BASE_HREF,\n      useValue: '/' + (window.location.pathname.split('/', 1)[1] || '')\n    },\n    provideHttpClient(withInterceptorsFromDi())\n  ]\n})\nexport class AppModule {}\n","import { ApplicationRef, enableProdMode, isDevMode } from '@angular/core';\nimport { enableDebugTools } from '@angular/platform-browser';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .then((moduleRef) => {\n    if (isDevMode()) {\n      // source: https://medium.com/@dmitrymogilko/profiling-angular-change-detection-c00605862b9f\n      const applicationRef = moduleRef.injector.get(ApplicationRef);\n      const componentRef = applicationRef.components[0];\n      // allows to run `ng.profiler.timeChangeDetection();`\n      enableDebugTools(componentRef);\n    }\n  })\n  .catch((err) => console.error(err)); // eslint-disable-line no-console\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  default_lang: 'en-US',\n  production: false,\n  year: '2025'\n};\n","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,57,100,101,102,103,104,105,160,161,162,163,164,165,166,603,604,605,607,608,615,616,617,618,619,620,621,622,623,624,625,626,627,628,637]}