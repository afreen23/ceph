{"version":3,"file":"default-src_app_ceph_block_block_module_ts.js","mappings":"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","names":["IscsiService","constructor","http","this","listTargets","get","getTarget","target_iqn","updateTarget","target","put","observe","status","settings","version","portals","createTarget","post","deleteTarget","delete","getDiscovery","updateDiscovery","auth","overview","i0","i1","factory","ɵfac","providedIn","__decorate","cdEncode","HttpClient","opt_r1","IscsiSettingComponent_select_3_option_2_Template","ctx_r1","setting","limits","values","IscsiSettingComponent_span_4_input_1_Template","IscsiSettingComponent_span_4_input_2_Template","IscsiSettingComponent_span_4_ng_container_3_Template","type","min","max","IscsiSettingComponent","ngOnInit","validators","push","Validators","Number","settingsForm","setValidators","selectors","inputs","formDir","decls","vars","consts","i18n_0","$localize","IscsiSettingComponent_select_3_Template","IscsiSettingComponent_span_4_Template","IscsiSettingComponent_span_5_Template","IscsiSettingComponent_span_6_Template","ctx","showError","IscsiTargetImageSettingsModalComponent_span_13_span_8_Template","formDir_r3","bs_r4","setting_r5","key","getDiskControlLimits","bs_r6","IscsiTargetImageSettingsModalComponent_ng_container_22_ng_container_1_div_1_Template","disk_default_controls","IscsiTargetImageSettingsModalComponent_ng_container_22_ng_container_1_Template","value","backstore","IscsiTargetImageSettingsModalComponent","activeModal","iscsiService","actionLabels","fg","UntypedFormControl","imagesSettings","image","lun","wwn","_","backstores","model","_value","CdFormGroup","disk_controls_limits","save","controls","control","currentBackstore","updateValueAndValidity","emitEvent","close","i2","i3","IscsiTargetImageSettingsModalComponent_span_13_Template","IscsiTargetImageSettingsModalComponent_option_21_Template","IscsiTargetImageSettingsModalComponent_ng_container_22_Template","_r1","api_version","UPDATE","ctx_r2","formDir_r4","setting_r2","getTargetControlLimits","IscsiTargetIqnSettingsModalComponent","target_default_controls","target_controls","setValue","target_controls_limits","includes","IscsiTargetIqnSettingsModalComponent_div_9_Template","ctx_r3","_r3","portal_r5","$implicit","i_r6","index","removePortal","icons","destroy","size16","minimum_gateways","image_r8","IscsiTargetFormComponent_div_0_ng_container_40_div_3_Template","_r7","imageSettingsModal","ctx_r8","i_r10","removeImage","IscsiTargetFormComponent_div_0_ng_container_40_ng_container_9_Template","IscsiTargetFormComponent_div_0_ng_container_40_ng_container_10_Template","deepCheck","length","hasAdvancedSettings","IscsiTargetFormComponent_div_0_div_58_span_7_Template","IscsiTargetFormComponent_div_0_div_58_span_8_Template","IscsiTargetFormComponent_div_0_div_58_span_18_Template","IscsiTargetFormComponent_div_0_div_58_span_19_Template","IscsiTargetFormComponent_div_0_div_58_span_26_Template","IscsiTargetFormComponent_div_0_div_58_span_27_Template","IscsiTargetFormComponent_div_0_div_58_span_37_Template","IscsiTargetFormComponent_div_0_div_58_span_38_Template","targetForm","formDir_r11","ctx_r15","_r15","image_r17","li_r18","ctx_r18","initiator_r20","ii_r14","removeInitiatorImage","getValue","imagesInitiatorSelections","messages","initiatorImage","add","_r13","removeInitiator","updatedInitiatorSelector","IscsiTargetFormComponent_div_0_div_59_div_4_span_12_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_13_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_14_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_21_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_22_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_31_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_32_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_39_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_40_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_49_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_50_Template","IscsiTargetFormComponent_div_0_div_59_div_4_ng_container_55_Template","IscsiTargetFormComponent_div_0_div_59_div_4_span_56_Template","IscsiTargetFormComponent_div_0_div_59_div_4_div_57_Template","IscsiTargetFormComponent_div_0_div_59_div_4_Template","IscsiTargetFormComponent_div_0_div_59_span_7_Template","_r12","addInitiator","initiators","i_r25","_r24","ctx_r25","group_r27","gi_r23","removeGroupInitiator","member_r28","i_r30","_r29","removeGroupDisk","disk_r31","_r22","removeGroup","IscsiTargetFormComponent_div_0_div_60_div_4_ng_container_17_Template","$event","onGroupMemberSelection","IscsiTargetFormComponent_div_0_div_60_div_4_ng_container_30_Template","groupMembersSelections","groupInitiator","groupDiskSelections","IscsiTargetFormComponent_div_0_div_60_div_4_Template","IscsiTargetFormComponent_div_0_div_60_span_7_Template","_r21","addGroup","groups","targetSettingsModal","IscsiTargetFormComponent_div_0_span_17_Template","IscsiTargetFormComponent_div_0_span_18_Template","IscsiTargetFormComponent_div_0_span_19_Template","IscsiTargetFormComponent_div_0_span_20_Template","IscsiTargetFormComponent_div_0_ng_container_26_Template","onPortalSelection","IscsiTargetFormComponent_div_0_span_34_Template","IscsiTargetFormComponent_div_0_ng_container_40_Template","IscsiTargetFormComponent_div_0_span_42_Template","IscsiTargetFormComponent_div_0_span_43_Template","onImageSelection","IscsiTargetFormComponent_div_0_div_58_Template","IscsiTargetFormComponent_div_0_div_59_Template","IscsiTargetFormComponent_div_0_div_60_Template","submit","action","resource","portalsSelections","disks","imagesSelections","images","cephIscsiConfigVersion","IscsiTargetFormComponent","CdForm","modalService","rbdService","router","route","taskWrapper","super","Icons","isEdit","SelectMessages","noOptions","IQN_REGEX","USER_REGEX","PASSWORD_REGEX","rbdListContext","CdTableFetchDataContext","pageInfo","limit","promises","list","toParams","url","startsWith","params","subscribe","decodeURIComponent","EDIT","CREATE","forkJoin","data","usedImages","filter","flatMap","map","pool","config","default_backstore","unsupported_rbd_features","required_rbd_features","imagesAll","namespace","imageId","pool_name","name","indexOf","getValidBackstores","SelectOption","forEach","portal","ip_addresses","ip","ceph_iscsi_config_version","createForm","resolveModel","loadingReady","Date","now","required","pattern","CdValidators","custom","elem","split","Math","lunIds","getLunIds","wwns","getWwns","UntypedFormArray","acl_enabled","authFormGroup","user","password","mutual_user","mutual_password","setAuthValidator","addControl","res","patchValue","id","host","disk","option","selected","clients","client","initiator","luns","group","group_index","members","member","Object","splice","removeImageRefs","element","newImages","item","newDisks","selections","i","getDefaultBackstore","result","getImageById","validFeatures","isLunIdInUse","lunId","currentImageId","nextLunId","lunIdsInUse","lunIdCandidate","defaultBackstore","client_iqn","flattened","reduce","accumulator","currentValue","concat","lastIndexOf","cdIsInGroup","validateIf","removed","removeAt","newMembers","oldName","lun_index","initiator_index","group_id","selection","enabled","member_index","disk_index","formValue","request","targetAuth","wrapTask","imageSplit","substring","newLuns","new_target_iqn","wrapTaskAroundCall","task","FinishedTask","call","error","setErrors","cdSubmitButton","complete","navigate","initialState","modalRef","show","imageFeatures","features","requiredFeatures","unsupportedFeatures","find","i4","i5","i6","IscsiTargetFormComponent_div_0_Template","loading","IscsiTargetDiscoveryModalComponent","authStorageService","notificationService","permission","getPermissions","iscsi","hasPermission","update","discoveryForm","disabled","submitAction","NotificationType","success","IscsiTargetDiscoveryModalComponent_span_12_Template","IscsiTargetDiscoveryModalComponent_span_13_Template","IscsiTargetDiscoveryModalComponent_span_22_Template","IscsiTargetDiscoveryModalComponent_span_23_Template","IscsiTargetDiscoveryModalComponent_span_30_Template","IscsiTargetDiscoveryModalComponent_span_31_Template","IscsiTargetDiscoveryModalComponent_span_40_Template","IscsiTargetDiscoveryModalComponent_span_41_Template","formDir_r2","SUBMIT","IscsiTabsComponent","node_r2","cdIcon","_c5","_c3","_c4","title","columns","value_r4","IscsiTargetDetailsComponent_ng_template_9_span_0_Template","IscsiTargetDetailsComponent_ng_template_9_strong_1_Template","undefined","row_r5","default","current","IscsiTargetDetailsComponent","content","detailTable","updateColumns","iscsiBackstorePipe","booleanTextPipe","treeViewService","metadata","nodes","prop","flexGrow","cellTemplate","highlightTpl","ngOnChanges","selectedItem","generateTree","target_meta","root","cssClasses","expanded","cdExecuting","large","spinner","spin","bullseye","leaf","users","server","k","label","labelTpl","labelContext","client_metadata","info","state","keys","toLowerCase","children","format","transform","onNodeSelected","node","tempData","toggleColumn","isHidden","displayName","toString","viewQuery","rf","IscsiTargetDetailsComponent_ng_template_6_Template","IscsiTargetDetailsComponent_div_8_Template","IscsiTargetDetailsComponent_ng_template_9_Template","ctx_r0","IscsiTargetListComponent_cd_alert_panel_1_ng_container_4_Template","expandedRow","IscsiTargetListComponent_cd_table_2_ng_container_8_cd_iscsi_target_details_1_Template","_r2","getTargets","setExpandedRow","updateSelection","configureDiscoveryAuth","IscsiTargetListComponent_cd_table_2_ng_container_8_Template","targets","tableStatus","tableActions","IscsiTargetListComponent","ListWithDetails","joinPipe","taskListService","notAvailablePipe","ngZone","available","CdTableSelection","builders","icon","routerLink","edit","first","disable","getEditDisableDesc","click","deleteIscsiTargetModal","DELETE","getDeleteDisableDesc","cellTransformation","CellTemplate","executing","pipe","message","setTableRefreshTimeout","init","resp","prepareResponse","onFetchError","taskFilter","itemFilter","ngOnDestroy","summaryDataSubscription","unsubscribe","num_sessions","cdPortals","cdImages","table","reset","entry","DeleteConfirmationModalComponent","itemDescription","itemNames","submitActionObservable","i7","i8","TableComponent","TaskListService","IscsiTargetListComponent_cd_alert_panel_1_Template","IscsiTargetListComponent_cd_table_2_Template","row_r3","cdIsBinary","IscsiComponent_ng_template_9_span_0_Template","IscsiComponent_ng_template_9_span_1_Template","value_r5","IscsiComponent_ng_template_11_span_0_Template","IscsiComponent_ng_template_11_span_1_Template","row_r6","value_r7","IscsiComponent_ng_template_13_span_0_Template","IscsiComponent_ng_template_13_span_1_Template","row_r8","IscsiComponent","dimlessPipe","gateways","gatewaysColumns","badge","customTemplateConfig","up","class","down","imagesColumns","iscsiSparklineTpl","iscsiPerSecondTpl","iscsiRelativeDateTpl","refresh","stats_history","rd_bytes","wr_bytes","IscsiComponent_ng_template_9_Template","IscsiComponent_ng_template_11_Template","IscsiComponent_ng_template_13_Template","_32","attrs","xmlns","viewBox","fill","width","height","d","size","_16","MirroringModule","iconService","registerAll","EditIcon","CheckMarkIcon","ResetIcon","DocumentAddIcon","DocumentImportIcon","CommonModule","SharedModule","NgbNavModule","RouterModule","FormsModule","ReactiveFormsModule","NgbProgressbarModule","NgbTooltipModule","ModalModule","InputModule","CheckboxModule","SelectModule","GridModule","ButtonModule","IconModule","BootstrapCreateModalComponent_ng_template_15_span_0_Template","createBootstrapForm","pool_r4","BootstrapCreateModalComponent","BaseModal","rbdMirroringService","changeDetectorRef","siteName","pools","ngAfterViewInit","detectChanges","UntypedFormGroup","validatePools","token","getSiteName","response","site_name","subs","subscribeSummary","content_data","acc","mirror_mode","poolsControl","poolName","mirroring_disabled","enable","checkedCount","requirePool","generate","bootstrapPoolName","poolNames","poolModeRequest","apiActionsObs","setSiteName","updatePool","createBootstrapToken","tap","last","finishHandler","closeModal","BootstrapCreateModalComponent_ng_template_15_Template","BootstrapCreateModalComponent_ng_container_21_Template","BootstrapCreateModalComponent_span_22_Template","open","valid","dirty","touched","siteNameError_r5","BootstrapImportModalComponent_ng_template_15_span_0_Template","importBootstrapForm","direction_r4","desc","pool_r5","BootstrapImportModalComponent_ng_template_30_span_0_Template","BootstrapImportModalComponent_ng_template_30_span_1_Template","BootstrapImportModalComponent","directions","direction","validateToken","JSON","parse","atob","invalidToken","import","bootstrapPoolNames","obs","importBootstrapToken","BootstrapImportModalComponent_ng_template_15_Template","BootstrapImportModalComponent_option_19_Template","BootstrapImportModalComponent_ng_container_24_Template","BootstrapImportModalComponent_span_25_Template","BootstrapImportModalComponent_ng_template_30_Template","siteNameError_r6","invalid","tokenError_r7","MirrorHealthColorPipe","pure","row_r2","health_color","value_r3","DaemonListComponent","cephShortVersionPipe","TableStatusViewCache","healthTmpl","daemons","DaemonListComponent_ng_template_1_Template","image_error","image_syncing","_r4","image_ready","state_color","value_r6","ImageListComponent_ng_template_17_div_0_Template","ImageListComponent_ng_template_17_ngb_progressbar_2_Template","value_r9","ImageListComponent_ng_template_19_span_0_Template","ImageListComponent_ng_template_19_span_1_Template","row_r10","ImageListComponent","stateTmpl","progressTmpl","entriesBehindPrimaryTpl","ImageListComponent_ng_template_5_Template","ImageListComponent_ng_template_9_Template","ImageListComponent_ng_template_13_Template","ImageListComponent_ng_template_15_Template","ImageListComponent_ng_template_17_Template","ImageListComponent_ng_template_19_Template","nav_r11","PoolEditPeerResponseModel","PoolEditPeerModalComponent_ng_template_16_span_0_Template","PoolEditPeerModalComponent_ng_template_16_span_1_Template","editPeerForm","PoolEditPeerModalComponent_ng_template_22_span_0_Template","PoolEditPeerModalComponent_ng_template_22_span_1_Template","PoolEditPeerModalComponent_ng_template_28_span_0_Template","PoolEditPeerModalComponent_ng_template_34_span_0_Template","PoolEditPeerModalComponent","peerUUID","mode","bsConfig","containerClass","clusterName","validateClusterName","clientID","validateClientID","monAddr","validateMonAddr","validateKey","getPeer","setResponse","match","invalidClusterName","invalidClientID","invalidMonAddr","invalidKey","cluster_name","client_id","mon_host","updatePeer","addPeer","i18n_4","i18n_6","PoolEditPeerModalComponent_ng_template_16_Template","PoolEditPeerModalComponent_ng_template_22_Template","PoolEditPeerModalComponent_ng_template_28_Template","PoolEditPeerModalComponent_ng_template_34_Template","clusterNameError_r4","clientIDError_r5","monAddrError_r6","keyError_r7","PoolListComponent","rbdMirroring","editModeAction","editModeModal","canBePrimary","addPeerAction","editPeersModal","visible","getPeerUUID","editPeerAction","exchange","deletePeerAction","deletePeersModal","headerTemplate","localTmpl","remoteTmpl","outlets","modal","URLVerbs","impact","DeletionImpact","high","Observable","observer","deletePeer","o","peer_uuids","PoolListComponent_ng_template_2_Template","PoolListComponent_ng_template_4_Template","PoolListComponent_ng_template_6_Template","size32","check","action_r4","buttonKind","preserveFragment","OverviewComponent","peersExist","Subscription","editing","createBootstrapAction","createBootstrapModal","importBootstrapAction","importBootstrapModal","startPolling","rbdmirroringForm","updateSiteName","OverviewComponent__svg_svg_9_Template","OverviewComponent__svg_svg_10_Template","OverviewComponent_ng_container_14_Template","_c0","PoolEditModeResponseModel","mirrorMode_r2","PoolEditModeModalComponent_ng_template_16_span_0_Template","editModeForm","PoolEditModeModalComponent","location","peerExists","mirrorModes","mirrorMode","validateMode","bind","outlet","getPool","cannotDisable","back","PoolEditModeModalComponent_option_15_Template","PoolEditModeModalComponent_ng_template_16_Template","mirrorModeError_r5","RBDImageFormat","RbdFormMode","RbdModel","V1","V2","RbdFormCloneRequestModel","RbdFormCopyRequestModel","RbdFormModel","RbdFormCreateRequestModel","RbdFormEditRequestModel","remove_scheduling","cloning","copying","RBDActionHelpers","moveToTrash","copy","flatten","enableMirroring","clonedSnapshot","secondayImageDelete","primaryImageResync","invalidNameDisable","removingStatus","journalTooltipText","snapshotTooltipText","copyMessage","RbdFormComponent_ng_container_1_ng_template_14_span_0_Template","RbdFormComponent_ng_container_1_ng_template_14_span_1_Template","rbdForm","RbdFormComponent_ng_container_1_cds_select_18_option_1_Template","RbdFormComponent_ng_container_1_cds_select_18_option_2_Template","RbdFormComponent_ng_container_1_cds_select_18_option_3_Template","RbdFormComponent_ng_container_1_cds_select_18_option_4_Template","poolError_r5","RbdFormComponent_ng_container_1_ng_template_19_span_0_Template","_r6","onAlertAction","setExclusiveLock","option_r8","shouldDisable","text","_r9","RbdFormComponent_ng_container_1_div_27_cds_radio_2_Template","RbdFormComponent_ng_container_1_div_27_cd_alert_panel_3_Template","mirroringOptions","currentPoolMirrorMode","RbdFormComponent_ng_container_1_div_28_ng_template_4_span_0_Template","RbdFormComponent_ng_container_1_div_28_ng_template_4_Template","schedule","scheduleError_r10","peerConfigured","_r11","onUseDataPoolChange","RbdFormComponent_ng_container_1_div_29_cd_helper_4_Template","allDataPools","dataPool_r12","RbdFormComponent_ng_container_1_div_30_cds_select_1_option_1_Template","RbdFormComponent_ng_container_1_div_30_cds_select_1_option_2_Template","RbdFormComponent_ng_container_1_div_30_cds_select_1_option_3_Template","RbdFormComponent_ng_container_1_div_30_cds_select_1_option_4_Template","dataPool","dataPoolError_r13","dataPools","RbdFormComponent_ng_container_1_div_30_ng_template_2_span_0_Template","RbdFormComponent_ng_container_1_div_30_cds_select_1_Template","RbdFormComponent_ng_container_1_div_30_ng_template_2_Template","poolPermission","read","namespace_r14","RbdFormComponent_ng_container_1_cds_select_33_option_1_Template","RbdFormComponent_ng_container_1_cds_select_33_option_2_Template","RbdFormComponent_ng_container_1_cds_select_33_option_3_Template","RbdFormComponent_ng_container_1_cds_select_33_option_4_Template","namespaces","RbdFormComponent_ng_container_1_ng_template_38_span_0_Template","RbdFormComponent_ng_container_1_ng_template_38_span_1_Template","RbdFormComponent_ng_container_1_ng_template_38_span_2_Template","feature_r15","helperText","helperHtml","RbdFormComponent_ng_container_1_ng_container_45_cd_help_text_4_Template","RbdFormComponent_ng_container_1_ng_container_45_cd_alert_panel_5_Template","objectSize_r16","objectSize_r17","RbdFormComponent_ng_container_1_ng_template_57_span_0_Template","RbdFormComponent_ng_container_1_ng_template_57_span_1_Template","RbdFormComponent_ng_container_1_ng_template_61_span_0_Template","RbdFormComponent_ng_container_1_ng_template_61_span_1_Template","RbdFormComponent_ng_container_1_div_8_Template","RbdFormComponent_ng_container_1_div_9_Template","RbdFormComponent_ng_container_1_ng_template_14_Template","onPoolChange","RbdFormComponent_ng_container_1_cds_text_label_17_Template","RbdFormComponent_ng_container_1_cds_select_18_Template","RbdFormComponent_ng_container_1_ng_template_19_Template","setMirrorMode","RbdFormComponent_ng_container_1_cd_alert_panel_25_Template","RbdFormComponent_ng_container_1_cd_alert_panel_26_Template","RbdFormComponent_ng_container_1_div_27_Template","RbdFormComponent_ng_container_1_div_28_Template","RbdFormComponent_ng_container_1_div_29_Template","RbdFormComponent_ng_container_1_div_30_Template","RbdFormComponent_ng_container_1_div_31_Template","RbdFormComponent_ng_container_1_cds_select_33_Template","RbdFormComponent_ng_container_1_ng_template_38_Template","RbdFormComponent_ng_container_1_ng_container_45_Template","RbdFormComponent_ng_container_1_option_51_Template","RbdFormComponent_ng_container_1_option_56_Template","RbdFormComponent_ng_container_1_ng_template_57_Template","RbdFormComponent_ng_container_1_ng_template_61_Template","getDirtyConfigurationValues","nameError_r18","showMirrorDisableMessage","mirroring","sizeError_r19","featuresList","objectSizes","stripingUnit","stripingUnitError_r20","stripingCount","stripingCountError_r21","initializeConfigData","RbdFormComponent","poolService","formatter","dimlessBinaryPipe","namespacesByPoolCache","allPools","ReplaySubject","advancedEnabled","rbdFormMode","defaultObjectSize","currentPoolName","defaultStripingUnit","defaultStripingCount","rbdImage","currentImageMirrorMode","routerUrl","requires","allowEnable","allowDisable","layering","initDisabled","interlockedWith","objToArray","obj","assign","parent","useDataPool","updateOn","obj_size","e","requiredIf","mirroringMode","validateRbdForm","disableForEdit","image_format","disableForClone","disableForCopy","prepareFormForAction","gatherNeededData","handleExternalData","checkPeersConfigured","poolname","Poolname","getPeerForPool","setPoolMirrorMode","CLONE","COPY","feature","valueChanges","featureFormUpdate","imageSpec","ImageSpec","fromString","image_spec","snap","snapName","rbd","defaultFeatures","handlePoolData","setFeatures","next","isRBDPool","flags_names","selectedPoolName","dataPoolControl","listNamespaces","onDataPoolChange","selectedDataPoolName","newPools","formGroup","useDataPoolControl","dataPoolControlErrors","sizeControl","objectSizeControl","objectSizeInBytes","toBytes","stripingCountControl","sizeControlErrors","invalidSizeObject","stripingUnitControl","stripingUnitControlErrors","invalidStripingUnit","stripingCountControlErrors","deepBoxCheck","checked","getDependentChildFeatures","featureControl","featureFormGroup","features_name","featureKey","f","interlockCheck","hasInterlockedFeature","dependentInterlockedFeature","isOriginFeatureEnabled","featuresControl","image_name","snap_name","schedule_interval","data_pool","stripe_unit","stripe_count","initialData","configuration","sourceType","RbdConfigurationSourceField","createRequest","addObjectSizeAndStripingToRequest","createAction","start_time","create","editRequest","enable_mirror","image_mirror_mode","cloneRequest","child_pool_name","child_namespace","child_image_name","editAction","cloneAction","parent_image_spec","parent_snap_name","cloneSnapshot","copyRequest","snapshot_name","dest_pool_name","dest_namespace","dest_image_name","copyAction","src_image_spec","switchMap","i9","RbdFormComponent_ng_container_1_Template","RbdTrashMoveModalComponent_div_15_span_2_Template","RbdTrashMoveModalComponent_div_15_span_3_Template","moveForm","RbdTrashMoveModalComponent","fb","imageName","hasSnapshots","setExpirationDate","expiresAt","moment","isValid","isAfter","setExpiry","imageSpecStr","moveImage","delay","diff","moveTrash","toggleExpiration","markAsPristine","RbdTrashMoveModalComponent_cd_alert_panel_7_Template","RbdTrashMoveModalComponent_div_15_Template","MOVE","RbdSnapshotFormModalComponent_ng_template_14_span_0_Template","RbdSnapshotFormModalComponent_ng_template_14_span_1_Template","snapshotForm","onMirrorCheckBoxChange","RbdSnapshotFormModalComponent_ng_container_16_div_1_Template","peerConfigured$","RbdSnapshotFormModalComponent","cdsModalService","taskManagerService","rbdMirrorService","onSubmit","Subject","snapshotName","mirrorImageSnapshot","setSnapName","clearValidators","setEditing","RENAME","finishedTask","renameSnapshot","toPromise","then","asyncFinishedTask","notifyTask","dismissAll","catch","createSnapshot","RbdSnapshotFormModalComponent_span_13_Template","RbdSnapshotFormModalComponent_ng_template_14_Template","RbdSnapshotFormModalComponent_ng_container_16_Template","snapshotError_r6","RbdSnapshotActionsModel","featuresName","cloneFormatVersion","rename","disableForMirrorSnapshot","hasSingleSelection","protect","lock","is_protected","PROTECT","getProtectDisableDesc","unprotect","unlock","UNPROTECT","clone","getCloneDisableDesc","rollback","undo","ROLLBACK","deleteSnap","ordering","RbdSnapshotModel","value_r2","RbdSnapshotListComponent","cdDatePipe","summaryService","cdr","snapshots","cellClass","true","false","rbdName","rbdTableActions","openCreateSnapshotModal","openEditSnapshotModal","toggleProtection","getImageUri","toStringEncoded","encodeURIComponent","rollbackModal","deleteSnapshotModal","of","items","CdHelperClass","updateChanged","fetch","openSnapshotModal","taskName","modalVariables","toISOString","executingTask","ExecutingTask","addRunningTask","isProtected","protectSnapshot","_asyncTask","stopLoadingSpinner","titleText","buttonText","bodyTpl","rollbackTpl","bodyData","ConfirmationModalComponent","i10","RbdSnapshotListComponent_ng_template_2_Template","feature_r1","usageNotAvailableTooltipTpl_r2","disk_usage","total_disk_usage","pool_namespace","RbdDetailsComponent_ng_container_2_ng_template_6_span_74_span_2_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_46_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_51_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_52_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_57_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_58_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_74_Template","RbdDetailsComponent_ng_container_2_ng_template_6_span_75_Template","timestamp","num_objs","block_name_prefix","order","primary","rbdDashboardUrl","RbdDetailsComponent_ng_container_2_ng_template_6_Template","RbdDetailsComponent_ng_container_2_ng_template_10_Template","RbdDetailsComponent_ng_container_2_ng_template_14_Template","RbdDetailsComponent_ng_container_2_ng_template_18_Template","nav_r4","RbdDetailsComponent_ng_template_4_ng_container_0_Template","RbdDetailsComponent_ng_template_4_ng_template_1_Template","global_r6","RbdDetailsComponent","NgbNav","RbdDetailsComponent_ng_template_0_Template","RbdDetailsComponent_ng_container_2_Template","RbdDetailsComponent_ng_container_3_Template","RbdDetailsComponent_ng_template_4_Template","source","RbdTabsComponent","grafanaPermission","grafana","RbdTabsComponent_li_10_Template","RbdListComponent_ng_template_5_span_0_span_2_Template","RbdListComponent_ng_template_5_span_0_Template","RbdListComponent_ng_template_5_span_1_Template","RbdListComponent_ng_template_7_span_0_Template","RbdListComponent_ng_template_7_span_2_Template","RbdListComponent_ng_template_7_span_4_Template","RbdListComponent_ng_template_7_span_5_Template","RbdListComponent_ng_template_7_ng_template_6_Template","probb_r6","RbdListComponent_ng_template_9_span_0_Template","value_r8","child","snapshot_r9","RbdListComponent_ng_template_13_div_0_ng_container_4_li_4_Template","snapshots_r10","RbdListComponent_ng_template_13_div_0_ng_container_4_Template","RbdListComponent_ng_template_13_div_0_Template","hasSnapshots_r11","_c12","column_r13","executingClass","row_r14","warning","RbdListComponent_ng_template_15_i_0_Template","RbdListComponent_ng_template_15_span_3_Template","RbdListComponent_ng_template_15__svg_svg_4_Template","valueClass","value_r15","errorMessage","usageTooltip_r16","row_r17","RbdListComponent_ng_template_19_ng_template_1_cd_usage_bar_0_Template","RbdListComponent_ng_template_19_span_0_Template","RbdListComponent_ng_template_19_ng_template_1_Template","usageBar_r18","RbdListComponent","createRbdFromTaskImageSpec","createRbdFromTask","unique_id","urlBuilder","TableStatus","count","tableContext","addAction","getCreate","getEdit","getRemovingStatusDesc","getInvalidNameDisable","deleteAction","deleteRbdModal","moveAction","trash","trashRbdModal","TRASH","resyncAction","resyncRbdModal","RESYNC","getResyncDisableDesc","flattenAction","flattenRbdModal","FLATTEN","removeSchedulingAction","removeSchedulingModal","REMOVE_SCHEDULING","schedule_info","promoteAction","actionPrimary","PROMOTE","demoteAction","DEMOTE","removingStatTpl","sortable","imageUsageTpl","parentTpl","mirroringTpl","ScheduleTpl","context","getRbdImages","taskImageSpec","scheduling","scheduleStatus","nextSnapshotDate","schedule_time","offset","getTimezoneOffset","abs","CdTableServerSideService","getCount","bodyTemplate","deleteTpl","bodyContext","listProtectedSnapshots","actionDescription","resync","flattenRbd","parentImageSpec","childImageSpec","flattenTpl","preventDefault","detail","replace","force","forcePromoteConfirmation","hasClonedSnapshots","some","imageIsPrimary","provide","URLBuilderService","useValue","RbdListComponent_cd_rbd_details_4_Template","RbdListComponent_ng_template_5_Template","RbdListComponent_ng_template_7_Template","RbdListComponent_ng_template_9_Template","RbdListComponent_ng_template_11_Template","RbdListComponent_ng_template_13_Template","RbdListComponent_ng_template_15_Template","RbdListComponent_ng_template_17_Template","RbdListComponent_ng_template_19_Template","RbdListComponent_ng_template_21_Template","pool_r2","RbdNamespaceFormModalComponent_cds_select_8_option_2_Template","RbdNamespaceFormModalComponent_cds_select_8_option_3_Template","RbdNamespaceFormModalComponent_cds_select_8_option_4_Template","RbdNamespaceFormModalComponent_cds_select_8_option_5_Template","namespaceForm","poolError_r4","RbdNamespaceFormModalComponent_ng_template_9_span_0_Template","formDir_r5","RbdNamespaceFormModalComponent_ng_template_15_span_0_Template","RbdNamespaceFormModalComponent_ng_template_15_span_1_Template","RbdNamespaceFormModalComponent","validator","asyncValidator","poolCtrl","namespaceCtrl","poolErrors","namespaceErrors","Promise","resolve","ns","namespaceExists","createNamespace","RbdNamespaceFormModalComponent_cds_select_8_Template","RbdNamespaceFormModalComponent_ng_template_9_Template","RbdNamespaceFormModalComponent_ng_template_15_Template","namespaceError_r6","RbdNamespaceListComponent","createModal","deleteModal","num_images","deleteNamespace","deletionForm","template","RbdPerformanceComponent","RbdTrashPurgeModalComponent_cds_select_12_option_3_Template","RbdTrashPurgeModalComponent","purgeForm","application_metadata","purge","purgeTrash","RbdTrashPurgeModalComponent_cds_select_12_Template","PURGE","RbdTrashRestoreModalComponent","restoreForm","restore","image_id_spec","new_image_name","restoreTrash","RESTORE","purgeModal","disablePurgeBtn","RbdTrashListComponent_ng_template_5_ng_container_0_Template","RbdTrashListComponent_ng_template_5_ng_container_1_Template","row_r4","cdIsExpired","expiresAt_r6","RbdTrashListComponent_ng_template_7_p_0_Template","isExpired_r7","RbdTrashListComponent","executingTasks","restoreAction","restoreModal","expiresTpl","listTrash","viewCacheStatusMap","statusFor","join","deferment_end_time","ViewCacheStatus","ValueException","isExpired","imageIdSpec","removeTrash","RbdTrashListComponent_button_4_Template","RbdTrashListComponent_ng_template_5_Template","RbdTrashListComponent_ng_template_7_Template","API_PATH","UI_API_PATH","NvmeofService","formatGwGroupsList","isGatewayList","gwGrpList","spec","service_name","serviceName","listGatewayGroups","listGateways","listSubsystems","getSubsystem","subsystemNQN","createSubsystem","deleteSubsystem","isSubsystemPresent","subsystemNqn","mapTo","catchError","observableOf","getInitiators","addInitiators","removeInitiators","host_nqn","gw_group","listListeners","createListener","deleteListener","hostName","traddr","trsvcid","getNamespace","nsid","updateNamespace","patch","NvmeofTabsComponent","getStatusClass","status_desc","NvmeofGatewayComponent_ng_template_10_legend_0_Template","getGateways","selectedTab","Tabs","gatewayColumns","selectedGatewayGroup","TABS","DEFAULT_PLACEHOLDER","NvmeofGatewayComponent","onSelected","tab","nvmeofService","cephServiceService","gwGroups","groupService","gwGroupsEmpty","gwGroupPlaceholder","setGatewayGroups","statusTpl","row","getDaemons","daemon","daemon_name","hostname","onGroupSelection","onGroupClear","NvmeofGatewayComponent_ng_template_4_Template","NvmeofGatewayComponent_ng_template_10_Template","NvmeofGatewayComponent_ng_template_12_Template","NvmeofGatewayComponent_ng_template_14_Template","_c1","gateways_content_r5","overview_content_r6","performance_content_r7","NvmeofListenersListComponent","nvmeof","listenerColumns","queryParams","hasSelection","deleteListenerModal","listResponse","listeners","listener","full_addr","infoMessage","host_name","nqn","BASE_URL","NvmeofNamespacesListComponent","mbPerSecondPipe","iopsPipe","namespacesColumns","deleteNamespaceModal","NvmeofInitiatorsListComponent_ng_template_6_span_0_Template","NvmeofInitiatorsListComponent_ng_template_6_span_1_Template","NvmeofInitiatorsListComponent","initiatorColumns","hostTpl","ADD","REMOVE","removeInitiatorModal","getAllowAllHostIndex","findIndex","listInitiators","getSelectedNQNs","hostNQNs","allowAllHostIndex","plural","NvmeofInitiatorsListComponent_ng_template_6_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_container_19_ng_template_3_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_template_6_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_template_10_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_template_14_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_template_18_Template","NvmeofSubsystemsDetailsComponent_ng_container_0_ng_container_19_Template","permissions","nav_r2","NvmeofSubsystemsDetailsComponent","serial_number","model_number","min_cntlid","max_cntlid","subtype","NvmeofSubsystemsDetailsComponent_ng_container_0_Template","NvmeofSubsystemsComponent","subsystems","subsystemsColumns","deleteSubsystemModal","getSubsystems","Array","isArray","subsystem","NvmeofSubsystemsComponent_cd_nvmeof_subsystems_details_10_Template","defaultMaxNamespace","NvmeofSubsystemsFormComponent","taskWrapperService","DEFAULT_NQN","NQN_REGEX","NQN_REGEX_UUID","customNQNValidator","nqnInput","test","pageURL","subsystemForm","TextEncoder","encode","asyncValidators","unique","max_namespaces","number","component","taskUrl","enable_ha","NvmeofSubsystemsFormComponent_span_17_Template","NvmeofSubsystemsFormComponent_span_18_Template","NvmeofSubsystemsFormComponent_span_19_Template","NvmeofSubsystemsFormComponent_span_20_Template","NvmeofSubsystemsFormComponent_span_29_Template","NvmeofSubsystemsFormComponent_span_30_Template","NvmeofSubsystemsFormComponent_span_31_Template","hostsItem_r2","NvmeofListenersFormComponent","hostService","formatterService","hosts","hostPermission","filterHostsByLabel","allHosts","gwNodesLabel","hostLabels","labels","filterHostsByHostname","gwNodes","getGwGroupPlacement","gwGroup","placement","setHosts","getAllHosts","nvmeofGwNodes","h","addr","subsystem_nqn","listenerForm","buildRequest","NvmeofListenersFormComponent_option_15_Template","NvmeofListenersFormComponent_option_16_Template","NvmeofListenersFormComponent_option_17_Template","NvmeofListenersFormComponent_option_18_Template","NvmeofListenersFormComponent_span_21_Template","NvmeofListenersFormComponent_span_30_Template","NvmeofListenersFormComponent_span_31_Template","NvmeofListenersFormComponent_span_32_Template","NvmeofNamespacesFormComponent_select_15_option_1_Template","NvmeofNamespacesFormComponent_select_15_option_2_Template","NvmeofNamespacesFormComponent_select_15_option_3_Template","NvmeofNamespacesFormComponent_select_15_option_4_Template","rbdPools","MIN_NAMESPACE_CREATE","MAX_NAMESPACE_CREATE","nsForm","hasError","requiredInvalidText","nsCountInvalidText","u_r5","NvmeofNamespacesFormComponent","units","initForEdit","convertedSize","rbd_image_size","currentBytes","rbd_pool_name","addValidators","initForCreate","getList","image_size","unit","nsCount","buildUpdateRequest","rbdImageSize","randomString","random","buildCreateRequest","requests","rbd_image_name","rbd_pool","create_image","validateSize","invalidSizeError","image_size_unit","NvmeofNamespacesFormComponent_input_14_Template","NvmeofNamespacesFormComponent_select_15_Template","NvmeofNamespacesFormComponent_span_18_Template","NvmeofNamespacesFormComponent_div_19_Template","NvmeofNamespacesFormComponent_option_28_Template","NvmeofNamespacesFormComponent_span_29_Template","NvmeofNamespacesFormComponent_span_30_Template","NvmeofNamespacesFormComponent_span_31_Template","NvmeofInitiatorsFormComponent_div_20_div_1_ng_container_6_span_1_Template","NvmeofInitiatorsFormComponent_div_20_div_1_ng_container_6_span_2_Template","NvmeofInitiatorsFormComponent_div_20_div_1_ng_container_6_span_3_Template","tmp_6_0","initiatorForm","hi_r4","errors","tmp_7_0","tmp_8_0","maxLength","addHost","removeHost","NvmeofInitiatorsFormComponent_div_20_div_1_ng_container_6_Template","duplicate","addedHosts","NvmeofInitiatorsFormComponent_div_20_div_1_Template","NvmeofInitiatorsFormComponent_div_20_span_2_Template","tmp_3_0","NvmeofInitiatorsFormComponent","formBuilder","remove","removeHosts","ALLOW_ALL_HOST","allowAnyHost","addHostCheck","array","Set","newHostFormGroup","setAddHostCheck","NvmeofInitiatorsFormComponent_div_20_Template","NvmeofInitiatorsFormComponent_cd_alert_panel_25_Template","_20","BlockModule","ChevronDown","Close","AddFilled","SubtractFilled","Reset","ProgressBarRound","SubtractAlt","NgbPopoverModule","PipesModule","TreeviewModule","UIShellModule","RadioModule","NumberModule","DatePickerModule","ComboBoxModule","TabsModule","routes","path","redirectTo","pathMatch","canActivate","FeatureTogglesGuardService","ModuleStatusGuardService","moduleStatusGuardConfig","uiApiPath","header","button_name","button_route","uiConfig","breadcrumbs","ActionLabels","RbdMirroringComponent","button_title","disableSplit","RoutedBlockModule","forChild","DimlessBinaryPerSecondDirective","elementRef","dimlessBinaryPerSecondPipe","ngModelChange","EventEmitter","el","nativeElement","ngDataReady","defaultUnit","roundedSize","round","emit","minBytes","maxBytes","roundPower","power","log","pow","onBlur","hostBindings","MillisecondsDirective","ms","toMilliseconds","onUpdate","IopsDirective","ngControl","iops","toIops","option_r5","form","RbdConfigurationFormComponent_div_4_div_6_ng_template_10__svg_svg_0_Template","RbdConfigurationFormComponent_div_4_div_6_ng_template_12_span_0_Template","cfgFormGroup_r6","RbdConfigurationFormComponent_div_4_div_6_ng_container_5_Template","RbdConfigurationFormComponent_div_4_div_6_ng_container_6_Template","RbdConfigurationFormComponent_div_4_div_6_ng_container_7_Template","RbdConfigurationFormComponent_div_4_div_6__svg_svg_9_Template","RbdConfigurationFormComponent_div_4_div_6_ng_template_10_Template","RbdConfigurationFormComponent_div_4_div_6_ng_template_12_Template","description","formError_r8","configurationType","milliseconds","bps","resetIcon_r7","section_r2","toggleSectionVisibility","RbdConfigurationFormComponent_div_4_div_6_Template","heading","sectionVisibility","minusCircle","addCircle","size20","options","RbdConfigurationFormComponent","rbdConfigurationService","initializeData","changes","RbdConfigurationType","configFormGroup","createConfigurationFormGroup","getDirtyValues","dataType","getWritableOptionFields","optionData","pop","getWritableSections","section","includeLocalValues","localFieldType","Error","c","initialValue","configList","optionName","formControl","previousValue","markAsDirty","isDisabled","className","outputs","RbdConfigurationFormComponent_div_4_Template","sections","RbdConfigurationSourcePipe","RbdConfigurationListComponent_ng_template_2_span_1_Template","RbdConfigurationListComponent_ng_template_2_strong_2_Template","RbdConfigurationListComponent_ng_template_2_strong_3_Template","value_r1","RbdConfigurationListComponent_ng_template_4_span_1_Template","RbdConfigurationListComponent_ng_template_4_span_2_Template","RbdConfigurationListComponent_ng_template_4_span_3_Template","RbdConfigurationListComponent_ng_template_4_span_4_Template","typeField","RbdConfigurationListComponent","sourceField","poolConfigurationColumns","configurationSourceTpl","configurationValueTpl","getOptionFields","RbdConfigurationListComponent_ng_template_2_Template","RbdConfigurationListComponent_ng_template_4_Template","RbdMirroringService","timerService","REFRESH_INTERVAL","summaryDataSource","BehaviorSubject","summaryData$","asObservable","retrieveSummaryObservable","retrieveSummaryObserver","__param","cdEncodeNot","TimerService"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/shared/api/iscsi.service.ts","./src/app/ceph/block/iscsi-setting/iscsi-setting.component.html","./src/app/ceph/block/iscsi-setting/iscsi-setting.component.ts","./src/app/ceph/block/iscsi-target-image-settings-modal/iscsi-target-image-settings-modal.component.html","./src/app/ceph/block/iscsi-target-image-settings-modal/iscsi-target-image-settings-modal.component.ts","./src/app/ceph/block/iscsi-target-iqn-settings-modal/iscsi-target-iqn-settings-modal.component.html","./src/app/ceph/block/iscsi-target-iqn-settings-modal/iscsi-target-iqn-settings-modal.component.ts","./src/app/ceph/block/iscsi-target-form/iscsi-target-form.component.html","./src/app/ceph/block/iscsi-target-form/iscsi-target-form.component.ts","./src/app/ceph/block/iscsi-target-discovery-modal/iscsi-target-discovery-modal.component.html","./src/app/ceph/block/iscsi-target-discovery-modal/iscsi-target-discovery-modal.component.ts","./src/app/ceph/block/iscsi-tabs/iscsi-tabs.component.ts","./src/app/ceph/block/iscsi-tabs/iscsi-tabs.component.html","./src/app/ceph/block/iscsi-target-details/iscsi-target-details.component.html","./src/app/ceph/block/iscsi-target-details/iscsi-target-details.component.ts","./src/app/ceph/block/iscsi-target-list/iscsi-target-list.component.html","./src/app/ceph/block/iscsi-target-list/iscsi-target-list.component.ts","./src/app/ceph/block/iscsi/iscsi.component.html","./src/app/ceph/block/iscsi/iscsi.component.ts","./node_modules/@carbon/icons/es/edit/32.js","./node_modules/@carbon/icons/es/checkmark/32.js","./node_modules/@carbon/icons/es/document--add/16.js","./node_modules/@carbon/icons/es/document--import/16.js","./src/app/ceph/block/mirroring/mirroring.module.ts","./src/app/ceph/block/mirroring/bootstrap-create-modal/bootstrap-create-modal.component.html","./src/app/ceph/block/mirroring/bootstrap-create-modal/bootstrap-create-modal.component.ts","./src/app/ceph/block/mirroring/bootstrap-import-modal/bootstrap-import-modal.component.html","./src/app/ceph/block/mirroring/bootstrap-import-modal/bootstrap-import-modal.component.ts","./src/app/ceph/block/mirroring/mirror-health-color.pipe.ts","./src/app/ceph/block/mirroring/daemon-list/daemon-list.component.html","./src/app/ceph/block/mirroring/daemon-list/daemon-list.component.ts","./src/app/ceph/block/mirroring/image-list/image-list.component.html","./src/app/ceph/block/mirroring/image-list/image-list.component.ts","./src/app/ceph/block/mirroring/pool-edit-peer-modal/pool-edit-peer-response.model.ts","./src/app/ceph/block/mirroring/pool-edit-peer-modal/pool-edit-peer-modal.component.html","./src/app/ceph/block/mirroring/pool-edit-peer-modal/pool-edit-peer-modal.component.ts","./src/app/ceph/block/mirroring/pool-list/pool-list.component.html","./src/app/ceph/block/mirroring/pool-list/pool-list.component.ts","./src/app/ceph/block/mirroring/overview/overview.component.html","./src/app/ceph/block/mirroring/overview/overview.component.ts","./src/app/ceph/block/mirroring/pool-edit-mode-modal/pool-edit-mode-response.model.ts","./src/app/ceph/block/mirroring/pool-edit-mode-modal/pool-edit-mode-modal.component.html","./src/app/ceph/block/mirroring/pool-edit-mode-modal/pool-edit-mode-modal.component.ts","./src/app/ceph/block/rbd-list/rbd-model.ts","./src/app/ceph/block/rbd-form/rbd-form-mode.enum.ts","./src/app/ceph/block/rbd-form/rbd-form-clone-request.model.ts","./src/app/ceph/block/rbd-form/rbd-form-copy-request.model.ts","./src/app/ceph/block/rbd-form/rbd-form.model.ts","./src/app/ceph/block/rbd-form/rbd-form-create-request.model.ts","./src/app/ceph/block/rbd-form/rbd-form-edit-request.model.ts","./src/app/ceph/block/rbd-contants.ts","./src/app/ceph/block/rbd-form/rbd-form.component.html","./src/app/ceph/block/rbd-form/rbd-form.component.ts","./src/app/ceph/block/rbd-trash-move-modal/rbd-trash-move-modal.component.html","./src/app/ceph/block/rbd-trash-move-modal/rbd-trash-move-modal.component.ts","./src/app/ceph/block/rbd-snapshot-form/rbd-snapshot-form-modal.component.html","./src/app/ceph/block/rbd-snapshot-form/rbd-snapshot-form-modal.component.ts","./src/app/ceph/block/rbd-snapshot-list/rbd-snapshot-actions.model.ts","./src/app/ceph/block/rbd-snapshot-list/rbd-snapshot.model.ts","./src/app/ceph/block/rbd-snapshot-list/rbd-snapshot-list.component.html","./src/app/ceph/block/rbd-snapshot-list/rbd-snapshot-list.component.ts","./src/app/ceph/block/rbd-details/rbd-details.component.html","./src/app/ceph/block/rbd-details/rbd-details.component.ts","./src/app/ceph/block/rbd-tabs/rbd-tabs.component.html","./src/app/ceph/block/rbd-tabs/rbd-tabs.component.ts","./src/app/ceph/block/rbd-list/rbd-list.component.html","./src/app/ceph/block/rbd-list/rbd-list.component.ts","./src/app/ceph/block/rbd-namespace-form/rbd-namespace-form-modal.component.html","./src/app/ceph/block/rbd-namespace-form/rbd-namespace-form-modal.component.ts","./src/app/ceph/block/rbd-namespace-list/rbd-namespace-list.component.ts","./src/app/ceph/block/rbd-namespace-list/rbd-namespace-list.component.html","./src/app/ceph/block/rbd-performance/rbd-performance.component.ts","./src/app/ceph/block/rbd-performance/rbd-performance.component.html","./src/app/ceph/block/rbd-trash-purge-modal/rbd-trash-purge-modal.component.html","./src/app/ceph/block/rbd-trash-purge-modal/rbd-trash-purge-modal.component.ts","./src/app/ceph/block/rbd-trash-restore-modal/rbd-trash-restore-modal.component.ts","./src/app/ceph/block/rbd-trash-restore-modal/rbd-trash-restore-modal.component.html","./src/app/ceph/block/rbd-trash-list/rbd-trash-list.component.html","./src/app/ceph/block/rbd-trash-list/rbd-trash-list.component.ts","./src/app/shared/api/nvmeof.service.ts","./src/app/ceph/block/nvmeof-tabs/nvmeof-tabs.component.ts","./src/app/ceph/block/nvmeof-tabs/nvmeof-tabs.component.html","./src/app/ceph/block/nvmeof-gateway/nvmeof-gateway.component.html","./src/app/ceph/block/nvmeof-gateway/nvmeof-gateway.component.ts","./src/app/ceph/block/nvmeof-listeners-list/nvmeof-listeners-list.component.ts","./src/app/ceph/block/nvmeof-listeners-list/nvmeof-listeners-list.component.html","./src/app/ceph/block/nvmeof-namespaces-list/nvmeof-namespaces-list.component.ts","./src/app/ceph/block/nvmeof-namespaces-list/nvmeof-namespaces-list.component.html","./src/app/ceph/block/nvmeof-initiators-list/nvmeof-initiators-list.component.html","./src/app/ceph/block/nvmeof-initiators-list/nvmeof-initiators-list.component.ts","./src/app/ceph/block/nvmeof-subsystems-details/nvmeof-subsystems-details.component.html","./src/app/ceph/block/nvmeof-subsystems-details/nvmeof-subsystems-details.component.ts","./src/app/ceph/block/nvmeof-subsystems/nvmeof-subsystems.component.html","./src/app/ceph/block/nvmeof-subsystems/nvmeof-subsystems.component.ts","./src/app/ceph/block/nvmeof-subsystems-form/nvmeof-subsystems-form.component.html","./src/app/ceph/block/nvmeof-subsystems-form/nvmeof-subsystems-form.component.ts","./src/app/ceph/block/nvmeof-listeners-form/nvmeof-listeners-form.component.html","./src/app/ceph/block/nvmeof-listeners-form/nvmeof-listeners-form.component.ts","./src/app/ceph/block/nvmeof-namespaces-form/nvmeof-namespaces-form.component.html","./src/app/ceph/block/nvmeof-namespaces-form/nvmeof-namespaces-form.component.ts","./src/app/ceph/block/nvmeof-initiators-form/nvmeof-initiators-form.component.html","./src/app/ceph/block/nvmeof-initiators-form/nvmeof-initiators-form.component.ts","./node_modules/@carbon/icons/es/add--filled/20.js","./node_modules/@carbon/icons/es/subtract--alt/20.js","./src/app/ceph/block/block.module.ts","./src/app/shared/directives/dimless-binary-per-second.directive.ts","./src/app/shared/directives/milliseconds.directive.ts","./src/app/shared/directives/iops.directive.ts","./src/app/ceph/block/rbd-configuration-form/rbd-configuration-form.component.html","./src/app/ceph/block/rbd-configuration-form/rbd-configuration-form.component.ts","./src/app/shared/pipes/rbd-configuration-source.pipe.ts","./src/app/ceph/block/rbd-configuration-list/rbd-configuration-list.component.html","./src/app/ceph/block/rbd-configuration-list/rbd-configuration-list.component.ts","./src/app/shared/api/rbd-mirroring.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { cdEncode } from '../decorators/cd-encode';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class IscsiService {\n  constructor(private http: HttpClient) {}\n\n  listTargets() {\n    return this.http.get(`api/iscsi/target`);\n  }\n\n  getTarget(target_iqn: string) {\n    return this.http.get(`api/iscsi/target/${target_iqn}`);\n  }\n\n  updateTarget(target_iqn: string, target: any) {\n    return this.http.put(`api/iscsi/target/${target_iqn}`, target, { observe: 'response' });\n  }\n\n  status() {\n    return this.http.get(`ui-api/iscsi/status`);\n  }\n\n  settings() {\n    return this.http.get(`ui-api/iscsi/settings`);\n  }\n\n  version() {\n    return this.http.get(`ui-api/iscsi/version`);\n  }\n\n  portals() {\n    return this.http.get(`ui-api/iscsi/portals`);\n  }\n\n  createTarget(target: any) {\n    return this.http.post(`api/iscsi/target`, target, { observe: 'response' });\n  }\n\n  deleteTarget(target_iqn: string) {\n    return this.http.delete(`api/iscsi/target/${target_iqn}`, { observe: 'response' });\n  }\n\n  getDiscovery() {\n    return this.http.get(`api/iscsi/discoveryauth`);\n  }\n\n  updateDiscovery(auth: any) {\n    return this.http.put(`api/iscsi/discoveryauth`, auth);\n  }\n\n  overview() {\n    return this.http.get(`ui-api/iscsi/overview`);\n  }\n}\n","<div class=\"form-group\"\n     [formGroup]=\"settingsForm\">\n  <label class=\"col-form-label\"\n         for=\"{{ setting }}\">{{ setting }}</label>\n  <select id=\"{{ setting }}\"\n          name=\"{{ setting }}\"\n          *ngIf=\"limits['type'] === 'enum'\"\n          class=\"form-control\"\n          [formControlName]=\"setting\">\n    <option [ngValue]=\"null\"></option>\n    <option *ngFor=\"let opt of limits['values']\"\n            [ngValue]=\"opt\">{{ opt }}</option>\n  </select>\n\n  <span *ngIf=\"limits['type'] !== 'enum'\">\n    <input type=\"number\"\n           *ngIf=\"limits['type'] === 'int'\"\n           class=\"form-control\"\n           [formControlName]=\"setting\">\n\n    <input type=\"text\"\n           *ngIf=\"limits['type'] === 'str'\"\n           class=\"form-control\"\n           [formControlName]=\"setting\">\n\n    <ng-container *ngIf=\"limits['type'] === 'bool'\">\n      <br>\n      <div class=\"custom-control custom-radio custom-control-inline\">\n        <input type=\"radio\"\n               [id]=\"setting + 'True'\"\n               [value]=\"true\"\n               [formControlName]=\"setting\"\n               class=\"custom-control-input\">\n        <label class=\"custom-control-label\"\n               [for]=\"setting + 'True'\">Yes</label>\n      </div>\n      <div class=\"custom-control custom-radio custom-control-inline\">\n        <input type=\"radio\"\n               [id]=\"setting + 'False'\"\n               [value]=\"false\"\n               class=\"custom-control-input\"\n               [formControlName]=\"setting\">\n        <label class=\"custom-control-label\"\n               [for]=\"setting + 'False'\">No</label>\n      </div>\n    </ng-container>\n  </span>\n\n  <span class=\"invalid-feedback\"\n        *ngIf=\"settingsForm.showError(setting, formDir, 'min')\">\n    <ng-container i18n>Must be greater than or equal to {{ limits['min'] }}.</ng-container>\n  </span>\n  <span class=\"invalid-feedback\"\n        *ngIf=\"settingsForm.showError(setting, formDir, 'max')\">\n    <ng-container i18n>Must be less than or equal to {{ limits['max'] }}.</ng-container>\n  </span>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { NgForm, ValidatorFn, Validators } from '@angular/forms';\n\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\n@Component({\n  selector: 'cd-iscsi-setting',\n  templateUrl: './iscsi-setting.component.html',\n  styleUrls: ['./iscsi-setting.component.scss']\n})\nexport class IscsiSettingComponent implements OnInit {\n  @Input()\n  settingsForm: CdFormGroup;\n  @Input()\n  formDir: NgForm;\n  @Input()\n  setting: string;\n  @Input()\n  limits: object;\n\n  ngOnInit() {\n    const validators: ValidatorFn[] = [];\n    if ('min' in this.limits) {\n      validators.push(Validators.min(Number(this.limits['min'])));\n    }\n    if ('max' in this.limits) {\n      validators.push(Validators.max(Number(this.limits['max'])));\n    }\n    this.settingsForm.get(this.setting).setValidators(validators);\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\">\n    <ng-container i18n>Configure</ng-container>&nbsp;\n    <small>{{ image }}</small>\n  </ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"settingsForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"settingsForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <p class=\"alert-warning\"\n           i18n>Changing these parameters from their default values is usually not necessary.</p>\n\n        <span *ngIf=\"api_version >= 1\">\n          <legend class=\"cd-header\"\n                  i18n>Identifier</legend>\n          <!-- LUN -->\n          <div class=\"form-group row\">\n            <div class=\"col-sm-12\">\n              <label class=\"col-form-label required\"\n                     for=\"lun\"\n                     i18n>lun</label>\n              <input type=\"number\"\n                     class=\"form-control\"\n                     id=\"lun\"\n                     name=\"lun\"\n                     formControlName=\"lun\">\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"settingsForm.showError('lun', formDir, 'required')\"\n                    i18n>This field is required.</span>\n            </div>\n          </div>\n          <!-- WWN -->\n          <div class=\"form-group row\">\n            <div class=\"col-sm-12\">\n              <label class=\"col-form-label\"\n                     for=\"wwn\"\n                     i18n>wwn</label>\n              <input type=\"text\"\n                     class=\"form-control\"\n                     id=\"wwn\"\n                     name=\"wwn\"\n                     formControlName=\"wwn\">\n            </div>\n          </div>\n        </span>\n\n        <legend class=\"cd-header\"\n                i18n>Settings</legend>\n\n        <!-- BACKSTORE -->\n        <div class=\"form-group row\">\n          <div class=\"col-sm-12\">\n            <label class=\"col-form-label\"\n                   i18n>Backstore</label>\n            <select id=\"backstore\"\n                    name=\"backstore\"\n                    class=\"form-select\"\n                    formControlName=\"backstore\">\n              <option *ngFor=\"let bs of backstores\"\n                      [value]=\"bs\">{{ bs | iscsiBackstore }}</option>\n            </select>\n          </div>\n        </div>\n\n        <!-- CONTROLS -->\n        <ng-container *ngFor=\"let bs of backstores\">\n          <ng-container *ngIf=\"settingsForm.value['backstore'] === bs\">\n            <div class=\"form-group row\"\n                 *ngFor=\"let setting of disk_default_controls[bs] | keyvalue\">\n              <div class=\"col-sm-12\">\n                <cd-iscsi-setting [settingsForm]=\"settingsForm\"\n                                  [formDir]=\"formDir\"\n                                  [setting]=\"setting.key\"\n                                  [limits]=\"getDiskControlLimits(bs, setting.key)\"></cd-iscsi-setting>\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"save()\"\n                              [form]=\"settingsForm\"\n                              [submitText]=\"actionLabels.UPDATE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, UntypedFormControl } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\n@Component({\n  selector: 'cd-iscsi-target-image-settings-modal',\n  templateUrl: './iscsi-target-image-settings-modal.component.html',\n  styleUrls: ['./iscsi-target-image-settings-modal.component.scss']\n})\nexport class IscsiTargetImageSettingsModalComponent implements OnInit {\n  image: string;\n  imagesSettings: any;\n  api_version: number;\n  disk_default_controls: any;\n  disk_controls_limits: any;\n  backstores: any;\n  control: AbstractControl;\n\n  settingsForm: CdFormGroup;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public iscsiService: IscsiService,\n    public actionLabels: ActionLabelsI18n\n  ) {}\n\n  ngOnInit() {\n    const fg: Record<string, UntypedFormControl> = {\n      backstore: new UntypedFormControl(this.imagesSettings[this.image]['backstore']),\n      lun: new UntypedFormControl(this.imagesSettings[this.image]['lun']),\n      wwn: new UntypedFormControl(this.imagesSettings[this.image]['wwn'])\n    };\n    _.forEach(this.backstores, (backstore) => {\n      const model = this.imagesSettings[this.image][backstore] || {};\n      _.forIn(this.disk_default_controls[backstore], (_value, key) => {\n        fg[key] = new UntypedFormControl(model[key]);\n      });\n    });\n\n    this.settingsForm = new CdFormGroup(fg);\n  }\n\n  getDiskControlLimits(backstore: string, setting: string) {\n    if (this.disk_controls_limits) {\n      return this.disk_controls_limits[backstore][setting];\n    }\n    // backward compatibility\n    return { type: 'int' };\n  }\n\n  save() {\n    const backstore = this.settingsForm.controls['backstore'].value;\n    const lun = this.settingsForm.controls['lun'].value;\n    const wwn = this.settingsForm.controls['wwn'].value;\n    const settings = {};\n    _.forIn(this.settingsForm.controls, (control, key) => {\n      if (\n        !(control.value === '' || control.value === null) &&\n        key in this.disk_default_controls[this.settingsForm.value['backstore']]\n      ) {\n        settings[key] = control.value;\n        // If one setting belongs to multiple backstores, we have to update it in all backstores\n        _.forEach(this.backstores, (currentBackstore) => {\n          if (currentBackstore !== backstore) {\n            const model = this.imagesSettings[this.image][currentBackstore] || {};\n            if (key in model) {\n              this.imagesSettings[this.image][currentBackstore][key] = control.value;\n            }\n          }\n        });\n      }\n    });\n    this.imagesSettings[this.image]['backstore'] = backstore;\n    this.imagesSettings[this.image]['lun'] = lun;\n    this.imagesSettings[this.image]['wwn'] = wwn;\n    this.imagesSettings[this.image][backstore] = settings;\n    this.imagesSettings = { ...this.imagesSettings };\n    this.control.updateValueAndValidity({ emitEvent: false });\n    this.activeModal.close();\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>Advanced Settings</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"settingsForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"settingsForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <p class=\"alert-warning\"\n           i18n>Changing these parameters from their default values is usually not necessary.</p>\n\n        <div class=\"form-group row\"\n             *ngFor=\"let setting of settingsForm.controls | keyvalue\">\n          <div class=\"col-sm-12\">\n            <cd-iscsi-setting [settingsForm]=\"settingsForm\"\n                              [formDir]=\"formDir\"\n                              [setting]=\"setting.key\"\n                              [limits]=\"getTargetControlLimits(setting.key)\"></cd-iscsi-setting>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"save()\"\n                              [form]=\"settingsForm\"\n                              [submitText]=\"actionLabels.UPDATE\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\n\n@Component({\n  selector: 'cd-iscsi-target-iqn-settings-modal',\n  templateUrl: './iscsi-target-iqn-settings-modal.component.html',\n  styleUrls: ['./iscsi-target-iqn-settings-modal.component.scss']\n})\nexport class IscsiTargetIqnSettingsModalComponent implements OnInit {\n  target_controls: UntypedFormControl;\n  target_default_controls: any;\n  target_controls_limits: any;\n\n  settingsForm: CdFormGroup;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    public iscsiService: IscsiService,\n    public actionLabels: ActionLabelsI18n\n  ) {}\n\n  ngOnInit() {\n    const fg: Record<string, UntypedFormControl> = {};\n    _.forIn(this.target_default_controls, (_value, key) => {\n      fg[key] = new UntypedFormControl(this.target_controls.value[key]);\n    });\n\n    this.settingsForm = new CdFormGroup(fg);\n  }\n\n  save() {\n    const settings = {};\n    _.forIn(this.settingsForm.controls, (control, key) => {\n      if (!(control.value === '' || control.value === null)) {\n        settings[key] = control.value;\n      }\n    });\n\n    this.target_controls.setValue(settings);\n    this.activeModal.close();\n  }\n\n  getTargetControlLimits(setting: string) {\n    if (this.target_controls_limits) {\n      return this.target_controls_limits[setting];\n    }\n    // backward compatibility\n    if (['Yes', 'No'].includes(this.target_default_controls[setting])) {\n      return { type: 'bool' };\n    }\n    return { type: 'int' };\n  }\n}\n","<div class=\"cd-col-form\"\n     *cdFormLoading=\"loading\">\n  <form name=\"targetForm\"\n        #formDir=\"ngForm\"\n        [formGroup]=\"targetForm\"\n        novalidate>\n    <div class=\"card\">\n      <div i18n=\"form title\"\n           class=\"card-header\">{{ action | titlecase }} {{ resource | upperFirst }}</div>\n\n      <div class=\"card-body\">\n        <!-- Target IQN -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"target_iqn\"\n                 i18n>Target IQN</label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input class=\"form-control\"\n                     type=\"text\"\n                     id=\"target_iqn\"\n                     name=\"target_iqn\"\n                     formControlName=\"target_iqn\"\n                     cdTrim />\n              <button class=\"btn btn-light\"\n                      id=\"ecp-info-button\"\n                      type=\"button\"\n                      (click)=\"targetSettingsModal()\">\n                <svg [cdsIcon]=\"icons.deepCheck\"\n                     [size]=\"icons.size16\"\n                     ></svg>\n              </button>\n            </div>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('target_iqn', formDir, 'required')\"\n                  i18n>This field is required.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('target_iqn', formDir, 'pattern')\"\n                  i18n>IQN has wrong pattern.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('target_iqn', formDir, 'iqn')\">\n              <ng-container i18n>An IQN has the following notation\n                'iqn.$year-$month.$reversedAddress:$definedName'</ng-container>\n              <br>\n              <ng-container i18n>For example: iqn.2016-06.org.dashboard:storage:disk.sn-a8675309</ng-container>\n              <br>\n              <a target=\"_blank\"\n                 href=\"https://en.wikipedia.org/wiki/ISCSI#Addressing\"\n                 i18n>More information</a>\n            </span>\n\n            <span class=\"form-text text-muted\"\n                  *ngIf=\"hasAdvancedSettings(targetForm.getValue('target_controls'))\"\n                  i18n>This target has modified advanced settings.</span>\n            <hr />\n          </div>\n        </div>\n\n        <!-- Portals -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 for=\"portals\"\n                 i18n>Portals</label>\n          <div class=\"cd-col-form-input\">\n\n            <ng-container *ngFor=\"let portal of portals.value; let i = index\">\n              <div class=\"input-group cd-mb\">\n                <input class=\"cd-form-control\"\n                       type=\"text\"\n                       [value]=\"portal\"\n                       disabled />\n                <button class=\"btn btn-light\"\n                        type=\"button\"\n                        (click)=\"removePortal(i, portal)\">\n                  <svg [cdsIcon]=\"icons.destroy\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                </button>\n              </div>\n            </ng-container>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <cd-select [data]=\"portals.value\"\n                           [options]=\"portalsSelections\"\n                           [messages]=\"messages.portals\"\n                           (selection)=\"onPortalSelection($event)\"\n                           elemClass=\"btn btn-light float-end\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                  <ng-container i18n>Add portal</ng-container>\n                </cd-select>\n              </div>\n            </div>\n\n            <input class=\"form-control\"\n                   type=\"hidden\"\n                   id=\"portals\"\n                   name=\"portals\"\n                   formControlName=\"portals\" />\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('portals', formDir, 'minGateways')\"\n                  i18n>At least {{ minimum_gateways }} gateways are required.</span>\n\n            <hr />\n          </div>\n        </div>\n\n        <!-- Images -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"disks\"\n                 i18n>Images</label>\n          <div class=\"cd-col-form-input\">\n            <ng-container *ngFor=\"let image of targetForm.getValue('disks'); let i = index\">\n              <div class=\"input-group cd-mb\">\n                <input class=\"cd-form-control\"\n                       type=\"text\"\n                       [value]=\"image\"\n                       disabled />\n                <div class=\"input-group-text\"\n                     *ngIf=\"api_version >= 1\">lun: {{ imagesSettings[image]['lun'] }}</div>\n                <button class=\"btn btn-light\"\n                        type=\"button\"\n                        (click)=\"imageSettingsModal(image)\">\n                  <svg [cdsIcon]=\"icons.deepCheck\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                </button>\n                <button class=\"btn btn-light\"\n                        type=\"button\"\n                        (click)=\"removeImage(i, image)\">\n                  <svg [cdsIcon]=\"icons.destroy\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                </button>\n\n              </div>\n\n              <span class=\"form-text text-muted\">\n                <ng-container *ngIf=\"backstores.length > 1\"\n                              i18n>Backstore: {{ imagesSettings[image].backstore | iscsiBackstore }}.&nbsp;</ng-container>\n\n                <ng-container *ngIf=\"hasAdvancedSettings(imagesSettings[image][imagesSettings[image].backstore])\"\n                              i18n>This image has modified settings.</ng-container>\n              </span>\n            </ng-container>\n\n            <input class=\"form-control\"\n                   type=\"hidden\"\n                   id=\"disks\"\n                   name=\"disks\"\n                   formControlName=\"disks\" />\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('disks', formDir, 'dupLunId')\"\n                  i18n>Duplicated LUN numbers.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"targetForm.showError('disks', formDir, 'dupWwn')\"\n                  i18n>Duplicated WWN.</span>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <cd-select [data]=\"disks.value\"\n                           [options]=\"imagesSelections\"\n                           [messages]=\"messages.images\"\n                           (selection)=\"onImageSelection($event)\"\n                           elemClass=\"btn btn-light float-end\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                  <ng-container i18n>Add image</ng-container>\n                </cd-select>\n              </div>\n            </div>\n\n            <hr />\n          </div>\n        </div>\n\n        <!-- acl_enabled -->\n        <div class=\"form-group row\">\n          <div class=\"cd-col-form-offset\">\n            <div class=\"custom-control custom-checkbox\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     formControlName=\"acl_enabled\"\n                     name=\"acl_enabled\"\n                     id=\"acl_enabled\">\n              <label for=\"acl_enabled\"\n                     class=\"custom-control-label\"\n                     i18n>ACL authentication</label>\n            </div>\n\n            <hr />\n          </div>\n        </div>\n\n        <!-- Target level authentication was introduced in ceph-iscsi config v11 -->\n        <div formGroupName=\"auth\"\n             *ngIf=\"cephIscsiConfigVersion > 10 && !targetForm.getValue('acl_enabled')\">\n\n          <!-- Target user -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"target_user\">\n              <ng-container i18n>User</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input class=\"form-control\"\n                     type=\"text\"\n                     autocomplete=\"off\"\n                     id=\"target_user\"\n                     name=\"target_user\"\n                     formControlName=\"user\" />\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('user', formDir, 'required')\"\n                    i18n>This field is required.</span>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('user', formDir, 'pattern')\"\n                    i18n>User names must have a length of 8 to 64 characters and can contain\n                alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n            </div>\n          </div>\n\n          <!-- Target password -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"target_password\">\n              <ng-container i18n>Password</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group\">\n                <input class=\"form-control\"\n                       type=\"password\"\n                       autocomplete=\"new-password\"\n                       id=\"target_password\"\n                       name=\"target_password\"\n                       formControlName=\"password\" />\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"target_password\">\n                </button>\n                <cd-copy-2-clipboard-button source=\"target_password\">\n                </cd-copy-2-clipboard-button>\n              </div>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('password', formDir, 'required')\"\n                    i18n>This field is required.</span>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('password', formDir, 'pattern')\"\n                    i18n>Passwords must have a length of 12 to 16 characters and can contain\n                alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n            </div>\n          </div>\n\n          <!-- Target mutual_user -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"target_mutual_user\">\n              <ng-container i18n>Mutual User</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <input class=\"form-control\"\n                     type=\"text\"\n                     autocomplete=\"off\"\n                     id=\"target_mutual_user\"\n                     name=\"target_mutual_user\"\n                     formControlName=\"mutual_user\" />\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('mutual_user', formDir, 'required')\"\n                    i18n>This field is required.</span>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('mutual_user', formDir, 'pattern')\"\n                    i18n>User names must have a length of 8 to 64 characters and can contain\n                alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n            </div>\n          </div>\n\n          <!-- Target mutual_password -->\n          <div class=\"form-group row\">\n            <label class=\"cd-col-form-label\"\n                   for=\"target_mutual_password\">\n              <ng-container i18n>Mutual Password</ng-container>\n            </label>\n            <div class=\"cd-col-form-input\">\n              <div class=\"input-group\">\n                <input class=\"form-control\"\n                       type=\"password\"\n                       autocomplete=\"new-password\"\n                       id=\"target_mutual_password\"\n                       name=\"target_mutual_password\"\n                       formControlName=\"mutual_password\" />\n\n                <button type=\"button\"\n                        class=\"btn btn-light\"\n                        cdPasswordButton=\"target_mutual_password\">\n                </button>\n                <cd-copy-2-clipboard-button source=\"target_mutual_password\">\n                </cd-copy-2-clipboard-button>\n              </div>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('mutual_password', formDir, 'required')\"\n                    i18n>This field is required.</span>\n\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"targetForm.showError('mutual_password', formDir, 'pattern')\"\n                    i18n>Passwords must have a length of 12 to 16 characters and can contain\n                alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n            </div>\n          </div>\n\n        </div>\n\n        <!-- Initiators -->\n        <div class=\"form-group row\"\n             *ngIf=\"targetForm.getValue('acl_enabled')\">\n          <label class=\"cd-col-form-label\"\n                 for=\"initiators\"\n                 i18n>Initiators</label>\n          <div class=\"cd-col-form-input\"\n               formArrayName=\"initiators\">\n            <div class=\"card mb-2\"\n                 *ngFor=\"let initiator of initiators.controls; let ii = index\"\n                 [formGroup]=\"initiator\">\n              <div class=\"card-header\">\n                <ng-container i18n>Initiator</ng-container>: {{ initiator.getValue('client_iqn') }}\n                <button type=\"button\"\n                        class=\"btn-close float-end\"\n                        (click)=\"removeInitiator(ii)\">\n                </button>\n              </div>\n              <div class=\"card-body\">\n                <!-- Initiator: Name -->\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"client_iqn\"\n                         i18n>Client IQN</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           formControlName=\"client_iqn\"\n                           cdTrim\n                           (blur)=\"updatedInitiatorSelector()\">\n\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiator.showError('client_iqn', formDir, 'notUnique')\"\n                          i18n>Initiator IQN needs to be unique.</span>\n\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiator.showError('client_iqn', formDir, 'required')\"\n                          i18n>This field is required.</span>\n\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiator.showError('client_iqn', formDir, 'pattern')\"\n                          i18n>IQN has wrong pattern.</span>\n                  </div>\n                </div>\n\n                <ng-container formGroupName=\"auth\">\n                  <!-- Initiator: User -->\n                  <div class=\"form-group row\">\n                    <label class=\"cd-col-form-label\"\n                           for=\"user\"\n                           i18n>User</label>\n                    <div class=\"cd-col-form-input\">\n                      <input [id]=\"'user' + ii\"\n                             class=\"form-control\"\n                             formControlName=\"user\"\n                             autocomplete=\"off\"\n                             type=\"text\">\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('user', formDir, 'required')\"\n                            i18n>This field is required.</span>\n\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('user', formDir, 'pattern')\"\n                            i18n>User names must have a length of 8 to 64 characters and can contain\n                        alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n                    </div>\n                  </div>\n\n                  <!-- Initiator: Password -->\n                  <div class=\"form-group row\">\n                    <label class=\"cd-col-form-label\"\n                           for=\"password\"\n                           i18n>Password</label>\n                    <div class=\"cd-col-form-input\">\n                      <div class=\"input-group\">\n                        <input [id]=\"'password' + ii\"\n                               class=\"form-control\"\n                               formControlName=\"password\"\n                               autocomplete=\"new-password\"\n                               type=\"password\">\n\n                        <button type=\"button\"\n                                class=\"btn btn-light\"\n                                [cdPasswordButton]=\"'password' + ii\">\n                        </button>\n                        <cd-copy-2-clipboard-button [source]=\"'password' + ii\">\n                        </cd-copy-2-clipboard-button>\n                      </div>\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('password', formDir, 'required')\"\n                            i18n>This field is required.</span>\n\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('password', formDir, 'pattern')\"\n                            i18n>Passwords must have a length of 12 to 16 characters and can contain\n                        alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n                    </div>\n                  </div>\n\n\n                  <!-- Initiator: mutual_user -->\n                  <div class=\"form-group row\">\n                    <label class=\"cd-col-form-label\"\n                           for=\"mutual_user\">\n                      <ng-container i18n>Mutual User</ng-container>\n                    </label>\n                    <div class=\"cd-col-form-input\">\n                      <input [id]=\"'mutual_user' + ii\"\n                             class=\"form-control\"\n                             formControlName=\"mutual_user\"\n                             autocomplete=\"off\"\n                             type=\"text\">\n\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('mutual_user', formDir, 'required')\"\n                            i18n>This field is required.</span>\n\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('mutual_user', formDir, 'pattern')\"\n                            i18n>User names must have a length of 8 to 64 characters and can contain\n                        alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n                    </div>\n                  </div>\n\n                  <!-- Initiator: mutual_password -->\n                  <div class=\"form-group row\">\n                    <label class=\"cd-col-form-label\"\n                           for=\"mutual_password\"\n                           i18n>Mutual Password</label>\n                    <div class=\"cd-col-form-input\">\n                      <div class=\"input-group\">\n                        <input [id]=\"'mutual_password' + ii\"\n                               class=\"form-control\"\n                               formControlName=\"mutual_password\"\n                               autocomplete=\"new-password\"\n                               type=\"password\">\n\n                        <button type=\"button\"\n                                class=\"btn btn-light\"\n                                [cdPasswordButton]=\"'mutual_password' + ii\">\n                        </button>\n                        <cd-copy-2-clipboard-button [source]=\"'mutual_password' + ii\">\n                        </cd-copy-2-clipboard-button>\n                      </div>\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('mutual_password', formDir, 'required')\"\n                            i18n>This field is required.</span>\n\n                      <span class=\"invalid-feedback\"\n                            *ngIf=\"initiator.showError('mutual_password', formDir, 'pattern')\"\n                            i18n>Passwords must have a length of 12 to 16 characters and can contain\n                        alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n                    </div>\n                  </div>\n                </ng-container>\n\n                <!-- Initiator: Images -->\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label\"\n                         for=\"luns\"\n                         i18n>Images</label>\n                  <div class=\"cd-col-form-input\">\n                    <ng-container *ngFor=\"let image of initiator.getValue('luns'); let li = index\">\n                      <div class=\"input-group cd-mb\">\n                        <input class=\"cd-form-control\"\n                               type=\"text\"\n                               [value]=\"image\"\n                               disabled />\n                        <button class=\"btn btn-light\"\n                                type=\"button\"\n                                (click)=\"removeInitiatorImage(initiator, li, ii, image)\">\n                          <svg [cdsIcon]=\"icons.destroy\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                        </button>\n                      </div>\n                    </ng-container>\n\n                    <span *ngIf=\"initiator.getValue('cdIsInGroup')\"\n                          i18n>Initiator belongs to a group. Images will be configure in the group.</span>\n\n                    <div class=\"row\"\n                         *ngIf=\"!initiator.getValue('cdIsInGroup')\">\n                      <div class=\"col-md-12\">\n                        <cd-select [data]=\"initiator.getValue('luns')\"\n                                   [options]=\"imagesInitiatorSelections[ii]\"\n                                   [messages]=\"messages.initiatorImage\"\n                                   elemClass=\"btn btn-light float-end\">\n                          <svg [cdsIcon]=\"icons.add\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                          <ng-container i18n>Add image</ng-container>\n                        </cd-select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <span class=\"form-text text-muted\"\n                      *ngIf=\"initiators.controls.length === 0\"\n                      i18n>No items added.</span>\n\n                <button (click)=\"addInitiator(); false\"\n                        class=\"btn btn-light float-end\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                  <ng-container i18n>Add initiator</ng-container>\n                </button>\n              </div>\n            </div>\n\n            <hr />\n          </div>\n        </div>\n\n        <!-- Groups -->\n        <div class=\"form-group row\"\n             *ngIf=\"targetForm.getValue('acl_enabled')\">\n          <label class=\"cd-col-form-label\"\n                 for=\"initiators\"\n                 i18n>Groups</label>\n          <div class=\"cd-col-form-input\"\n               formArrayName=\"groups\">\n            <div class=\"card mb-2\"\n                 *ngFor=\"let group of groups.controls; let gi = index\"\n                 [formGroup]=\"group\">\n              <div class=\"card-header\">\n                <ng-container i18n>Group</ng-container>: {{ group.getValue('group_id') }}\n                <button type=\"button\"\n                        class=\"btn-close float-end\"\n                        (click)=\"removeGroup(gi)\">\n                </button>\n              </div>\n              <div class=\"card-body\">\n                <!-- Group: group_id -->\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label required\"\n                         for=\"group_id\"\n                         i18n>Name</label>\n                  <div class=\"cd-col-form-input\">\n                    <input class=\"form-control\"\n                           type=\"text\"\n                           formControlName=\"group_id\">\n                  </div>\n                </div>\n\n                <!-- Group: members -->\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label\"\n                         for=\"members\">\n                    <ng-container i18n>Initiators</ng-container>\n                  </label>\n                  <div class=\"cd-col-form-input\">\n                    <ng-container *ngFor=\"let member of group.getValue('members'); let i = index\">\n                      <div class=\"input-group cd-mb\">\n                        <input class=\"cd-form-control\"\n                               type=\"text\"\n                               [value]=\"member\"\n                               disabled />\n                        <button class=\"btn btn-light\"\n                                type=\"button\"\n                                (click)=\"removeGroupInitiator(group, i, gi)\">\n                          <svg [cdsIcon]=\"icons.destroy\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                        </button>\n                      </div>\n                    </ng-container>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        <cd-select [data]=\"group.getValue('members')\"\n                                   [options]=\"groupMembersSelections[gi]\"\n                                   [messages]=\"messages.groupInitiator\"\n                                   (selection)=\"onGroupMemberSelection($event, gi)\"\n                                   elemClass=\"btn btn-light float-end\">\n                          <svg [cdsIcon]=\"icons.add\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                          <ng-container i18n>Add initiator</ng-container>\n                        </cd-select>\n                      </div>\n                    </div>\n\n                    <hr />\n                  </div>\n                </div>\n\n                <!-- Group: disks -->\n                <div class=\"form-group row\">\n                  <label class=\"cd-col-form-label\"\n                         for=\"disks\">\n                    <ng-container i18n>Images</ng-container>\n                  </label>\n                  <div class=\"cd-col-form-input\">\n                    <ng-container *ngFor=\"let disk of group.getValue('disks'); let i = index\">\n                      <div class=\"input-group cd-mb\">\n                        <input class=\"cd-form-control\"\n                               type=\"text\"\n                               [value]=\"disk\"\n                               disabled />\n                        <button class=\"btn btn-light\"\n                                type=\"button\"\n                                (click)=\"removeGroupDisk(group, i, gi)\">\n                          <svg [cdsIcon]=\"icons.destroy\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                        </button>\n                      </div>\n                    </ng-container>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        <cd-select [data]=\"group.getValue('disks')\"\n                                   [options]=\"groupDiskSelections[gi]\"\n                                   [messages]=\"messages.initiatorImage\"\n                                   elemClass=\"btn btn-light float-end\">\n                          <svg [cdsIcon]=\"icons.add\"\n                               [size]=\"icons.size16\"\n                               ></svg>\n                          <ng-container i18n>Add image</ng-container>\n                        </cd-select>\n                      </div>\n                    </div>\n\n                    <hr />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <span class=\"form-text text-muted\"\n                      *ngIf=\"groups.controls.length === 0\"\n                      i18n>No items added.</span>\n\n                <button (click)=\"addGroup(); false\"\n                        class=\"btn btn-light float-end\">\n                  <svg [cdsIcon]=\"icons.add\"\n                       [size]=\"icons.size16\"\n                       ></svg>\n                  <ng-container i18n>Add group</ng-container>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n      <div class=\"card-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                              [form]=\"targetForm\"\n                              [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                              wrappingClass=\"text-right\"></cd-form-button-panel>\n      </div>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { forkJoin } from 'rxjs';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { SelectMessages } from '~/app/shared/components/select/select-messages.model';\nimport { SelectOption } from '~/app/shared/components/select/select-option.model';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ModalService } from '~/app/shared/services/modal.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { IscsiTargetImageSettingsModalComponent } from '../iscsi-target-image-settings-modal/iscsi-target-image-settings-modal.component';\nimport { IscsiTargetIqnSettingsModalComponent } from '../iscsi-target-iqn-settings-modal/iscsi-target-iqn-settings-modal.component';\n\n@Component({\n  selector: 'cd-iscsi-target-form',\n  templateUrl: './iscsi-target-form.component.html',\n  styleUrls: ['./iscsi-target-form.component.scss']\n})\nexport class IscsiTargetFormComponent extends CdForm implements OnInit {\n  cephIscsiConfigVersion: number;\n  targetForm: CdFormGroup;\n  modalRef: NgbModalRef;\n  api_version = 0;\n  minimum_gateways = 1;\n  target_default_controls: any;\n  target_controls_limits: any;\n  disk_default_controls: any;\n  disk_controls_limits: any;\n  backstores: string[];\n  default_backstore: string;\n  unsupported_rbd_features: any;\n  required_rbd_features: any;\n\n  icons = Icons;\n\n  isEdit = false;\n  target_iqn: string;\n\n  imagesAll: any[];\n  imagesSelections: SelectOption[];\n  portalsSelections: SelectOption[] = [];\n\n  imagesInitiatorSelections: SelectOption[][] = [];\n  groupDiskSelections: SelectOption[][] = [];\n  groupMembersSelections: SelectOption[][] = [];\n\n  imagesSettings: any = {};\n  messages = {\n    portals: new SelectMessages({ noOptions: $localize`There are no portals available.` }),\n    images: new SelectMessages({ noOptions: $localize`There are no images available.` }),\n    initiatorImage: new SelectMessages({\n      noOptions: $localize`There are no images available. Please make sure you add an image to the target.`\n    }),\n    groupInitiator: new SelectMessages({\n      noOptions: $localize`There are no initiators available. Please make sure you add an initiator to the target.`\n    })\n  };\n\n  IQN_REGEX = /^iqn\\.(19|20)\\d\\d-(0[1-9]|1[0-2])\\.\\D{2,3}(\\.[A-Za-z0-9-]+)+(:[A-Za-z0-9-\\.]+)*$/;\n  USER_REGEX = /^[\\w\\.:@_-]{8,64}$/;\n  PASSWORD_REGEX = /^[\\w@\\-_\\/]{12,16}$/;\n  action: string;\n  resource: string;\n\n  constructor(\n    private iscsiService: IscsiService,\n    private modalService: ModalService,\n    private rbdService: RbdService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private taskWrapper: TaskWrapperService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    super();\n    this.resource = $localize`target`;\n  }\n\n  ngOnInit() {\n    const rbdListContext = new CdTableFetchDataContext(() => undefined);\n    /* limit -1 to specify all images */\n    rbdListContext.pageInfo.limit = -1;\n    const promises: any[] = [\n      this.iscsiService.listTargets(),\n      /* tslint:disable:no-empty */\n      this.rbdService.list(rbdListContext.toParams()),\n      this.iscsiService.portals(),\n      this.iscsiService.settings(),\n      this.iscsiService.version()\n    ];\n\n    if (this.router.url.startsWith('/block/iscsi/targets/edit')) {\n      this.isEdit = true;\n      this.route.params.subscribe((params: { target_iqn: string }) => {\n        this.target_iqn = decodeURIComponent(params.target_iqn);\n        promises.push(this.iscsiService.getTarget(this.target_iqn));\n      });\n    }\n    this.action = this.isEdit ? this.actionLabels.EDIT : this.actionLabels.CREATE;\n\n    forkJoin(promises).subscribe((data: any[]) => {\n      // iscsiService.listTargets\n      const usedImages = _(data[0])\n        .filter((target) => target.target_iqn !== this.target_iqn)\n        .flatMap((target) => target.disks)\n        .map((image) => `${image.pool}/${image.image}`)\n        .value();\n\n      // iscsiService.settings()\n      if ('api_version' in data[3]) {\n        this.api_version = data[3].api_version;\n      }\n      this.minimum_gateways = data[3].config.minimum_gateways;\n      this.target_default_controls = data[3].target_default_controls;\n      this.target_controls_limits = data[3].target_controls_limits;\n      this.disk_default_controls = data[3].disk_default_controls;\n      this.disk_controls_limits = data[3].disk_controls_limits;\n      this.backstores = data[3].backstores;\n      this.default_backstore = data[3].default_backstore;\n      this.unsupported_rbd_features = data[3].unsupported_rbd_features;\n      this.required_rbd_features = data[3].required_rbd_features;\n\n      // rbdService.list()\n      this.imagesAll = _(data[1])\n        .flatMap((pool) => pool.value)\n        .filter((image) => {\n          // Namespaces are not supported by ceph-iscsi\n          if (image.namespace) {\n            return false;\n          }\n          const imageId = `${image.pool_name}/${image.name}`;\n          if (usedImages.indexOf(imageId) !== -1) {\n            return false;\n          }\n          const validBackstores = this.getValidBackstores(image);\n          if (validBackstores.length === 0) {\n            return false;\n          }\n          return true;\n        })\n        .value();\n\n      this.imagesSelections = this.imagesAll.map(\n        (image) => new SelectOption(false, `${image.pool_name}/${image.name}`, '')\n      );\n\n      // iscsiService.portals()\n      const portals: SelectOption[] = [];\n      data[2].forEach((portal: Record<string, any>) => {\n        portal.ip_addresses.forEach((ip: string) => {\n          portals.push(new SelectOption(false, portal.name + ':' + ip, ''));\n        });\n      });\n      this.portalsSelections = [...portals];\n\n      // iscsiService.version()\n      this.cephIscsiConfigVersion = data[4]['ceph_iscsi_config_version'];\n\n      this.createForm();\n\n      // iscsiService.getTarget()\n      if (data[5]) {\n        this.resolveModel(data[5]);\n      }\n\n      this.loadingReady();\n    });\n  }\n\n  createForm() {\n    this.targetForm = new CdFormGroup({\n      target_iqn: new UntypedFormControl('iqn.2001-07.com.ceph:' + Date.now(), {\n        validators: [Validators.required, Validators.pattern(this.IQN_REGEX)]\n      }),\n      target_controls: new UntypedFormControl({}),\n      portals: new UntypedFormControl([], {\n        validators: [\n          CdValidators.custom('minGateways', (value: any[]) => {\n            const gateways = _.uniq(value.map((elem) => elem.split(':')[0]));\n            return gateways.length < Math.max(1, this.minimum_gateways);\n          })\n        ]\n      }),\n      disks: new UntypedFormControl([], {\n        validators: [\n          CdValidators.custom('dupLunId', (value: any[]) => {\n            const lunIds = this.getLunIds(value);\n            return lunIds.length !== _.uniq(lunIds).length;\n          }),\n          CdValidators.custom('dupWwn', (value: any[]) => {\n            const wwns = this.getWwns(value);\n            return wwns.length !== _.uniq(wwns).length;\n          })\n        ]\n      }),\n      initiators: new UntypedFormArray([]),\n      groups: new UntypedFormArray([]),\n      acl_enabled: new UntypedFormControl(false)\n    });\n    // Target level authentication was introduced in ceph-iscsi config v11\n    if (this.cephIscsiConfigVersion > 10) {\n      const authFormGroup = new CdFormGroup({\n        user: new UntypedFormControl(''),\n        password: new UntypedFormControl(''),\n        mutual_user: new UntypedFormControl(''),\n        mutual_password: new UntypedFormControl('')\n      });\n      this.setAuthValidator(authFormGroup);\n      this.targetForm.addControl('auth', authFormGroup);\n    }\n  }\n\n  resolveModel(res: Record<string, any>) {\n    this.targetForm.patchValue({\n      target_iqn: res.target_iqn,\n      target_controls: res.target_controls,\n      acl_enabled: res.acl_enabled\n    });\n    // Target level authentication was introduced in ceph-iscsi config v11\n    if (this.cephIscsiConfigVersion > 10) {\n      this.targetForm.patchValue({\n        auth: res.auth\n      });\n    }\n    const portals: any[] = [];\n    _.forEach(res.portals, (portal) => {\n      const id = `${portal.host}:${portal.ip}`;\n      portals.push(id);\n    });\n    this.targetForm.patchValue({\n      portals: portals\n    });\n\n    const disks: any[] = [];\n    _.forEach(res.disks, (disk) => {\n      const id = `${disk.pool}/${disk.image}`;\n      disks.push(id);\n      this.imagesSettings[id] = {\n        backstore: disk.backstore\n      };\n      this.imagesSettings[id][disk.backstore] = disk.controls;\n      if ('lun' in disk) {\n        this.imagesSettings[id]['lun'] = disk.lun;\n      }\n      if ('wwn' in disk) {\n        this.imagesSettings[id]['wwn'] = disk.wwn;\n      }\n\n      this.onImageSelection({ option: { name: id, selected: true } });\n    });\n    this.targetForm.patchValue({\n      disks: disks\n    });\n\n    _.forEach(res.clients, (client) => {\n      const initiator = this.addInitiator();\n      client.luns = _.map(client.luns, (lun) => `${lun.pool}/${lun.image}`);\n      initiator.patchValue(client);\n      // updatedInitiatorSelector()\n    });\n\n    (res.groups as any[]).forEach((group: any, group_index: number) => {\n      const fg = this.addGroup();\n      group.disks = _.map(group.disks, (disk) => `${disk.pool}/${disk.image}`);\n      fg.patchValue(group);\n      _.forEach(group.members, (member) => {\n        this.onGroupMemberSelection({ option: new SelectOption(true, member, '') }, group_index);\n      });\n    });\n  }\n\n  hasAdvancedSettings(settings: any) {\n    return Object.values(settings).length > 0;\n  }\n\n  // Portals\n  get portals() {\n    return this.targetForm.get('portals') as UntypedFormControl;\n  }\n\n  onPortalSelection() {\n    this.portals.setValue(this.portals.value);\n  }\n\n  removePortal(index: number, portal: string) {\n    this.portalsSelections.forEach((value) => {\n      if (value.name === portal) {\n        value.selected = false;\n      }\n    });\n\n    this.portals.value.splice(index, 1);\n    this.portals.setValue(this.portals.value);\n    return false;\n  }\n\n  // Images\n  get disks() {\n    return this.targetForm.get('disks') as UntypedFormControl;\n  }\n\n  removeImage(index: number, image: string) {\n    this.imagesSelections.forEach((value) => {\n      if (value.name === image) {\n        value.selected = false;\n      }\n    });\n    this.disks.value.splice(index, 1);\n    this.removeImageRefs(image);\n    this.targetForm.get('disks').updateValueAndValidity({ emitEvent: false });\n    return false;\n  }\n\n  removeImageRefs(name: string) {\n    this.initiators.controls.forEach((element) => {\n      const newImages = element.value.luns.filter((item: string) => item !== name);\n      element.get('luns').setValue(newImages);\n    });\n\n    this.groups.controls.forEach((element) => {\n      const newDisks = element.value.disks.filter((item: string) => item !== name);\n      element.get('disks').setValue(newDisks);\n    });\n\n    _.forEach(this.imagesInitiatorSelections, (selections, i) => {\n      this.imagesInitiatorSelections[i] = selections.filter((item: any) => item.name !== name);\n    });\n    _.forEach(this.groupDiskSelections, (selections, i) => {\n      this.groupDiskSelections[i] = selections.filter((item: any) => item.name !== name);\n    });\n  }\n\n  getDefaultBackstore(imageId: string) {\n    let result = this.default_backstore;\n    const image = this.getImageById(imageId);\n    if (!this.validFeatures(image, this.default_backstore)) {\n      this.backstores.forEach((backstore) => {\n        if (backstore !== this.default_backstore) {\n          if (this.validFeatures(image, backstore)) {\n            result = backstore;\n          }\n        }\n      });\n    }\n    return result;\n  }\n\n  isLunIdInUse(lunId: string, imageId: string) {\n    const images = this.disks.value.filter((currentImageId: string) => currentImageId !== imageId);\n    return this.getLunIds(images).includes(lunId);\n  }\n\n  getLunIds(images: object) {\n    return _.map(images, (image) => this.imagesSettings[image]['lun']);\n  }\n\n  nextLunId(imageId: string) {\n    const images = this.disks.value.filter((currentImageId: string) => currentImageId !== imageId);\n    const lunIdsInUse = this.getLunIds(images);\n    let lunIdCandidate = 0;\n    while (lunIdsInUse.includes(lunIdCandidate)) {\n      lunIdCandidate++;\n    }\n    return lunIdCandidate;\n  }\n\n  getWwns(images: object) {\n    const wwns = _.map(images, (image) => this.imagesSettings[image]['wwn']);\n    return wwns.filter((wwn) => _.isString(wwn) && wwn !== '');\n  }\n\n  onImageSelection($event: any) {\n    const option = $event.option;\n\n    if (option.selected) {\n      if (!this.imagesSettings[option.name]) {\n        const defaultBackstore = this.getDefaultBackstore(option.name);\n        this.imagesSettings[option.name] = {\n          backstore: defaultBackstore,\n          lun: this.nextLunId(option.name)\n        };\n        this.imagesSettings[option.name][defaultBackstore] = {};\n      } else if (this.isLunIdInUse(this.imagesSettings[option.name]['lun'], option.name)) {\n        // If the lun id is now in use, we have to generate a new one\n        this.imagesSettings[option.name]['lun'] = this.nextLunId(option.name);\n      }\n\n      _.forEach(this.imagesInitiatorSelections, (selections, i) => {\n        selections.push(new SelectOption(false, option.name, ''));\n        this.imagesInitiatorSelections[i] = [...selections];\n      });\n\n      _.forEach(this.groupDiskSelections, (selections, i) => {\n        selections.push(new SelectOption(false, option.name, ''));\n        this.groupDiskSelections[i] = [...selections];\n      });\n    } else {\n      this.removeImageRefs(option.name);\n    }\n    this.targetForm.get('disks').updateValueAndValidity({ emitEvent: false });\n  }\n\n  // Initiators\n  get initiators() {\n    return this.targetForm.get('initiators') as UntypedFormArray;\n  }\n\n  addInitiator() {\n    const fg = new CdFormGroup({\n      client_iqn: new UntypedFormControl('', {\n        validators: [\n          Validators.required,\n          CdValidators.custom('notUnique', (client_iqn: string) => {\n            const flattened = this.initiators.controls.reduce(function (accumulator, currentValue) {\n              return accumulator.concat(currentValue.value.client_iqn);\n            }, []);\n\n            return flattened.indexOf(client_iqn) !== flattened.lastIndexOf(client_iqn);\n          }),\n          Validators.pattern(this.IQN_REGEX)\n        ]\n      }),\n      auth: new CdFormGroup({\n        user: new UntypedFormControl(''),\n        password: new UntypedFormControl(''),\n        mutual_user: new UntypedFormControl(''),\n        mutual_password: new UntypedFormControl('')\n      }),\n      luns: new UntypedFormControl([]),\n      cdIsInGroup: new UntypedFormControl(false)\n    });\n\n    this.setAuthValidator(fg);\n\n    this.initiators.push(fg);\n\n    _.forEach(this.groupMembersSelections, (selections, i) => {\n      selections.push(new SelectOption(false, '', ''));\n      this.groupMembersSelections[i] = [...selections];\n    });\n\n    const disks = _.map(\n      this.targetForm.getValue('disks'),\n      (disk) => new SelectOption(false, disk, '')\n    );\n    this.imagesInitiatorSelections.push(disks);\n\n    return fg;\n  }\n\n  setAuthValidator(fg: CdFormGroup) {\n    CdValidators.validateIf(\n      fg.get('user'),\n      () => fg.getValue('password') || fg.getValue('mutual_user') || fg.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.USER_REGEX)],\n      [fg.get('password'), fg.get('mutual_user'), fg.get('mutual_password')]\n    );\n\n    CdValidators.validateIf(\n      fg.get('password'),\n      () => fg.getValue('user') || fg.getValue('mutual_user') || fg.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.PASSWORD_REGEX)],\n      [fg.get('user'), fg.get('mutual_user'), fg.get('mutual_password')]\n    );\n\n    CdValidators.validateIf(\n      fg.get('mutual_user'),\n      () => fg.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.USER_REGEX)],\n      [fg.get('user'), fg.get('password'), fg.get('mutual_password')]\n    );\n\n    CdValidators.validateIf(\n      fg.get('mutual_password'),\n      () => fg.getValue('mutual_user'),\n      [Validators.required],\n      [Validators.pattern(this.PASSWORD_REGEX)],\n      [fg.get('user'), fg.get('password'), fg.get('mutual_user')]\n    );\n  }\n\n  removeInitiator(index: number) {\n    const removed = this.initiators.value[index];\n\n    this.initiators.removeAt(index);\n\n    _.forEach(this.groupMembersSelections, (selections, i) => {\n      selections.splice(index, 1);\n      this.groupMembersSelections[i] = [...selections];\n    });\n\n    this.groups.controls.forEach((element) => {\n      const newMembers = element.value.members.filter(\n        (item: string) => item !== removed.client_iqn\n      );\n      element.get('members').setValue(newMembers);\n    });\n\n    this.imagesInitiatorSelections.splice(index, 1);\n  }\n\n  updatedInitiatorSelector() {\n    // Validate all client_iqn\n    this.initiators.controls.forEach((control) => {\n      control.get('client_iqn').updateValueAndValidity({ emitEvent: false });\n    });\n\n    // Update Group Initiator Selector\n    _.forEach(this.groupMembersSelections, (group, group_index) => {\n      _.forEach(group, (elem, index) => {\n        const oldName = elem.name;\n        elem.name = this.initiators.controls[index].value.client_iqn;\n\n        this.groups.controls.forEach((element) => {\n          const members = element.value.members;\n          const i = members.indexOf(oldName);\n\n          if (i !== -1) {\n            members[i] = elem.name;\n          }\n          element.get('members').setValue(members);\n        });\n      });\n      this.groupMembersSelections[group_index] = [...this.groupMembersSelections[group_index]];\n    });\n  }\n\n  removeInitiatorImage(initiator: any, lun_index: number, initiator_index: number, image: string) {\n    const luns = initiator.getValue('luns');\n    luns.splice(lun_index, 1);\n    initiator.patchValue({ luns: luns });\n\n    this.imagesInitiatorSelections[initiator_index].forEach((value: Record<string, any>) => {\n      if (value.name === image) {\n        value.selected = false;\n      }\n    });\n\n    return false;\n  }\n\n  // Groups\n  get groups() {\n    return this.targetForm.get('groups') as UntypedFormArray;\n  }\n\n  addGroup() {\n    const fg = new CdFormGroup({\n      group_id: new UntypedFormControl('', { validators: [Validators.required] }),\n      members: new UntypedFormControl([]),\n      disks: new UntypedFormControl([])\n    });\n\n    this.groups.push(fg);\n\n    const disks = _.map(\n      this.targetForm.getValue('disks'),\n      (disk) => new SelectOption(false, disk, '')\n    );\n    this.groupDiskSelections.push(disks);\n\n    const initiators = _.map(\n      this.initiators.value,\n      (initiator) => new SelectOption(false, initiator.client_iqn, '', !initiator.cdIsInGroup)\n    );\n    this.groupMembersSelections.push(initiators);\n\n    return fg;\n  }\n\n  removeGroup(index: number) {\n    // Remove group and disk selections\n    this.groups.removeAt(index);\n\n    // Free initiator from group\n    const selectedMembers = this.groupMembersSelections[index].filter((value) => value.selected);\n    selectedMembers.forEach((selection) => {\n      selection.selected = false;\n      this.onGroupMemberSelection({ option: selection }, index);\n    });\n\n    this.groupMembersSelections.splice(index, 1);\n    this.groupDiskSelections.splice(index, 1);\n  }\n\n  onGroupMemberSelection($event: any, group_index: number) {\n    const option = $event.option;\n\n    let luns: string[] = [];\n    if (!option.selected) {\n      const selectedDisks = this.groupDiskSelections[group_index].filter((value) => value.selected);\n      luns = selectedDisks.map((value) => value.name);\n    }\n\n    this.initiators.controls.forEach((element, index) => {\n      if (element.value.client_iqn === option.name) {\n        element.patchValue({ luns: luns });\n        element.get('cdIsInGroup').setValue(option.selected);\n\n        // Members can only be at one group at a time, so when a member is selected\n        // in one group we need to disable its selection in other groups\n        _.forEach(this.groupMembersSelections, (group) => {\n          group[index].enabled = !option.selected;\n        });\n\n        this.imagesInitiatorSelections[index].forEach((image) => {\n          image.selected = luns.includes(image.name);\n        });\n      }\n    });\n  }\n\n  removeGroupInitiator(group: CdFormGroup, member_index: number, group_index: number) {\n    const name = group.getValue('members')[member_index];\n    group.getValue('members').splice(member_index, 1);\n\n    this.onGroupMemberSelection({ option: new SelectOption(false, name, '') }, group_index);\n  }\n\n  removeGroupDisk(group: CdFormGroup, disk_index: number, group_index: number) {\n    const name = group.getValue('disks')[disk_index];\n    group.getValue('disks').splice(disk_index, 1);\n\n    this.groupDiskSelections[group_index].forEach((value) => {\n      if (value.name === name) {\n        value.selected = false;\n      }\n    });\n    this.groupDiskSelections[group_index] = [...this.groupDiskSelections[group_index]];\n  }\n\n  submit() {\n    const formValue = _.cloneDeep(this.targetForm.value);\n\n    const request: Record<string, any> = {\n      target_iqn: this.targetForm.getValue('target_iqn'),\n      target_controls: this.targetForm.getValue('target_controls'),\n      acl_enabled: this.targetForm.getValue('acl_enabled'),\n      portals: [],\n      disks: [],\n      clients: [],\n      groups: []\n    };\n\n    // Target level authentication was introduced in ceph-iscsi config v11\n    if (this.cephIscsiConfigVersion > 10) {\n      const targetAuth: CdFormGroup = this.targetForm.get('auth') as CdFormGroup;\n      if (!targetAuth.getValue('user')) {\n        targetAuth.get('user').setValue('');\n      }\n      if (!targetAuth.getValue('password')) {\n        targetAuth.get('password').setValue('');\n      }\n      if (!targetAuth.getValue('mutual_user')) {\n        targetAuth.get('mutual_user').setValue('');\n      }\n      if (!targetAuth.getValue('mutual_password')) {\n        targetAuth.get('mutual_password').setValue('');\n      }\n      const acl_enabled = this.targetForm.getValue('acl_enabled');\n      request['auth'] = {\n        user: acl_enabled ? '' : targetAuth.getValue('user'),\n        password: acl_enabled ? '' : targetAuth.getValue('password'),\n        mutual_user: acl_enabled ? '' : targetAuth.getValue('mutual_user'),\n        mutual_password: acl_enabled ? '' : targetAuth.getValue('mutual_password')\n      };\n    }\n\n    // Disks\n    formValue.disks.forEach((disk: string) => {\n      const imageSplit = disk.split('/');\n      const backstore = this.imagesSettings[disk].backstore;\n      request.disks.push({\n        pool: imageSplit[0],\n        image: imageSplit[1],\n        backstore: backstore,\n        controls: this.imagesSettings[disk][backstore],\n        lun: this.imagesSettings[disk]['lun'],\n        wwn: this.imagesSettings[disk]['wwn']\n      });\n    });\n\n    // Portals\n    formValue.portals.forEach((portal: string) => {\n      const index = portal.indexOf(':');\n      request.portals.push({\n        host: portal.substring(0, index),\n        ip: portal.substring(index + 1)\n      });\n    });\n\n    // Clients\n    if (request.acl_enabled) {\n      formValue.initiators.forEach((initiator: Record<string, any>) => {\n        if (!initiator.auth.user) {\n          initiator.auth.user = '';\n        }\n        if (!initiator.auth.password) {\n          initiator.auth.password = '';\n        }\n        if (!initiator.auth.mutual_user) {\n          initiator.auth.mutual_user = '';\n        }\n        if (!initiator.auth.mutual_password) {\n          initiator.auth.mutual_password = '';\n        }\n        delete initiator.cdIsInGroup;\n\n        const newLuns: any[] = [];\n        initiator.luns.forEach((lun: string) => {\n          const imageSplit = lun.split('/');\n          newLuns.push({\n            pool: imageSplit[0],\n            image: imageSplit[1]\n          });\n        });\n\n        initiator.luns = newLuns;\n      });\n      request.clients = formValue.initiators;\n    }\n\n    // Groups\n    if (request.acl_enabled) {\n      formValue.groups.forEach((group: Record<string, any>) => {\n        const newDisks: any[] = [];\n        group.disks.forEach((disk: string) => {\n          const imageSplit = disk.split('/');\n          newDisks.push({\n            pool: imageSplit[0],\n            image: imageSplit[1]\n          });\n        });\n\n        group.disks = newDisks;\n      });\n      request.groups = formValue.groups;\n    }\n\n    let wrapTask;\n    if (this.isEdit) {\n      request['new_target_iqn'] = request.target_iqn;\n      request.target_iqn = this.target_iqn;\n      wrapTask = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('iscsi/target/edit', {\n          target_iqn: request.target_iqn\n        }),\n        call: this.iscsiService.updateTarget(this.target_iqn, request)\n      });\n    } else {\n      wrapTask = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('iscsi/target/create', {\n          target_iqn: request.target_iqn\n        }),\n        call: this.iscsiService.createTarget(request)\n      });\n    }\n\n    wrapTask.subscribe({\n      error: () => {\n        this.targetForm.setErrors({ cdSubmitButton: true });\n      },\n      complete: () => this.router.navigate(['/block/iscsi/targets'])\n    });\n  }\n\n  targetSettingsModal() {\n    const initialState = {\n      target_controls: this.targetForm.get('target_controls'),\n      target_default_controls: this.target_default_controls,\n      target_controls_limits: this.target_controls_limits\n    };\n\n    this.modalRef = this.modalService.show(IscsiTargetIqnSettingsModalComponent, initialState);\n  }\n\n  imageSettingsModal(image: string) {\n    const initialState = {\n      imagesSettings: this.imagesSettings,\n      image: image,\n      api_version: this.api_version,\n      disk_default_controls: this.disk_default_controls,\n      disk_controls_limits: this.disk_controls_limits,\n      backstores: this.getValidBackstores(this.getImageById(image)),\n      control: this.targetForm.get('disks')\n    };\n\n    this.modalRef = this.modalService.show(IscsiTargetImageSettingsModalComponent, initialState);\n  }\n\n  validFeatures(image: Record<string, any>, backstore: string) {\n    const imageFeatures = image.features;\n    const requiredFeatures = this.required_rbd_features[backstore];\n    const unsupportedFeatures = this.unsupported_rbd_features[backstore];\n    // eslint-disable-next-line no-bitwise\n    const validRequiredFeatures = (imageFeatures & requiredFeatures) === requiredFeatures;\n    // eslint-disable-next-line no-bitwise\n    const validSupportedFeatures = (imageFeatures & unsupportedFeatures) === 0;\n    return validRequiredFeatures && validSupportedFeatures;\n  }\n\n  getImageById(imageId: string) {\n    return this.imagesAll.find((image) => imageId === `${image.pool_name}/${image.name}`);\n  }\n\n  getValidBackstores(image: object) {\n    return this.backstores.filter((backstore) => this.validFeatures(image, backstore));\n  }\n}\n","<cd-modal [modalRef]=\"activeModal\">\n  <ng-container class=\"modal-title\"\n                i18n>Discovery Authentication</ng-container>\n\n  <ng-container class=\"modal-content\">\n    <form name=\"discoveryForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"discoveryForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- User -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"user\"\n                 i18n>User</label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"user\"\n                   class=\"form-control\"\n                   formControlName=\"user\"\n                   type=\"text\"\n                   autocomplete=\"off\">\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('user', formDir, 'required')\"\n                  i18n>This field is required.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('user', formDir, 'pattern')\"\n                  i18n>User names must have a length of 8 to 64 characters and can contain\n              alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n          </div>\n        </div>\n\n        <!-- Password -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"password\"\n                 i18n>Password</label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"password\"\n                     class=\"form-control\"\n                     formControlName=\"password\"\n                     type=\"password\"\n                     autocomplete=\"new-password\">\n\n              <button type=\"button\"\n                      class=\"btn btn-light\"\n                      cdPasswordButton=\"password\">\n              </button>\n              <cd-copy-2-clipboard-button source=\"password\">\n              </cd-copy-2-clipboard-button>\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('password', formDir, 'required')\"\n                  i18n>This field is required.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('password', formDir, 'pattern')\"\n                  i18n>Passwords must have a length of 12 to 16 characters and can contain\n              alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n          </div>\n        </div>\n\n        <!-- mutual_user -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"mutual_user\">\n            <ng-container i18n>Mutual User</ng-container>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"mutual_user\"\n                   class=\"form-control\"\n                   formControlName=\"mutual_user\"\n                   type=\"text\"\n                   autocomplete=\"off\">\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('mutual_user', formDir, 'required')\"\n                  i18n>This field is required.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('mutual_user', formDir, 'pattern')\"\n                  i18n>User names must have a length of 8 to 64 characters and can contain\n              alphanumeric characters, '.', '&#64;', '-', '_' or ':'.</span>\n          </div>\n        </div>\n\n        <!-- mutual_password -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"mutual_password\"\n                 i18n>Mutual Password</label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"mutual_password\"\n                     class=\"form-control\"\n                     formControlName=\"mutual_password\"\n                     type=\"password\"\n                     autocomplete=\"new-password\">\n\n              <button type=\"button\"\n                      class=\"btn btn-light\"\n                      cdPasswordButton=\"mutual_password\">\n              </button>\n              <cd-copy-2-clipboard-button source=\"mutual_password\">\n              </cd-copy-2-clipboard-button>\n            </div>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('mutual_password', formDir, 'required')\"\n                  i18n>This field is required.</span>\n\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"discoveryForm.showError('mutual_password', formDir, 'pattern')\"\n                  i18n>Passwords must have a length of 12 to 16 characters and can contain\n              alphanumeric characters, '&#64;', '-', '_' or '/'.</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <cd-form-button-panel (submitActionEvent)=\"submitAction()\"\n                              [form]=\"discoveryForm\"\n                              [showSubmit]=\"hasPermission\"\n                              [submitText]=\"actionLabels.SUBMIT\"></cd-form-button-panel>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\n\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-iscsi-target-discovery-modal',\n  templateUrl: './iscsi-target-discovery-modal.component.html',\n  styleUrls: ['./iscsi-target-discovery-modal.component.scss']\n})\nexport class IscsiTargetDiscoveryModalComponent implements OnInit {\n  discoveryForm: CdFormGroup;\n  permission: Permission;\n  hasPermission: boolean;\n\n  USER_REGEX = /^[\\w\\.:@_-]{8,64}$/;\n  PASSWORD_REGEX = /^[\\w@\\-_\\/]{12,16}$/;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public activeModal: NgbActiveModal,\n    public actionLabels: ActionLabelsI18n,\n    private iscsiService: IscsiService,\n    private notificationService: NotificationService\n  ) {\n    this.permission = this.authStorageService.getPermissions().iscsi;\n  }\n\n  ngOnInit() {\n    this.hasPermission = this.permission.update;\n    this.createForm();\n    this.iscsiService.getDiscovery().subscribe((auth) => {\n      this.discoveryForm.patchValue(auth);\n    });\n  }\n\n  createForm() {\n    this.discoveryForm = new CdFormGroup({\n      user: new UntypedFormControl({ value: '', disabled: !this.hasPermission }),\n      password: new UntypedFormControl({ value: '', disabled: !this.hasPermission }),\n      mutual_user: new UntypedFormControl({ value: '', disabled: !this.hasPermission }),\n      mutual_password: new UntypedFormControl({ value: '', disabled: !this.hasPermission })\n    });\n\n    CdValidators.validateIf(\n      this.discoveryForm.get('user'),\n      () =>\n        this.discoveryForm.getValue('password') ||\n        this.discoveryForm.getValue('mutual_user') ||\n        this.discoveryForm.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.USER_REGEX)],\n      [\n        this.discoveryForm.get('password'),\n        this.discoveryForm.get('mutual_user'),\n        this.discoveryForm.get('mutual_password')\n      ]\n    );\n\n    CdValidators.validateIf(\n      this.discoveryForm.get('password'),\n      () =>\n        this.discoveryForm.getValue('user') ||\n        this.discoveryForm.getValue('mutual_user') ||\n        this.discoveryForm.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.PASSWORD_REGEX)],\n      [\n        this.discoveryForm.get('user'),\n        this.discoveryForm.get('mutual_user'),\n        this.discoveryForm.get('mutual_password')\n      ]\n    );\n\n    CdValidators.validateIf(\n      this.discoveryForm.get('mutual_user'),\n      () => this.discoveryForm.getValue('mutual_password'),\n      [Validators.required],\n      [Validators.pattern(this.USER_REGEX)],\n      [\n        this.discoveryForm.get('user'),\n        this.discoveryForm.get('password'),\n        this.discoveryForm.get('mutual_password')\n      ]\n    );\n\n    CdValidators.validateIf(\n      this.discoveryForm.get('mutual_password'),\n      () => this.discoveryForm.getValue('mutual_user'),\n      [Validators.required],\n      [Validators.pattern(this.PASSWORD_REGEX)],\n      [\n        this.discoveryForm.get('user'),\n        this.discoveryForm.get('password'),\n        this.discoveryForm.get('mutual_user')\n      ]\n    );\n  }\n\n  submitAction() {\n    this.iscsiService.updateDiscovery(this.discoveryForm.value).subscribe(\n      () => {\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Updated discovery authentication`\n        );\n        this.activeModal.close();\n      },\n      () => {\n        this.discoveryForm.setErrors({ cdSubmitButton: true });\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-iscsi-tabs',\n  templateUrl: './iscsi-tabs.component.html',\n  styleUrls: ['./iscsi-tabs.component.scss']\n})\nexport class IscsiTabsComponent {}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/iscsi/overview\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Overview</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/iscsi/targets\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Targets</a>\n  </li>\n</ul>\n","<div class=\"row\">\n  <div class=\"col-6 card-tree\">\n    <legend i18n>iSCSI Topology</legend>\n\n    <cds-tree-view #tree\n                   [tree]=\"nodes\"\n                   (select)=\"onNodeSelected($event)\">\n    </cds-tree-view>\n    <ng-template #treeNodeTemplate\n                 let-node>\n                 {{node?.data?.cdIcon}}\n    <svg [cdsIcon]=\"node?.data?.cdIcon\"\n         [size]=\"icons.size16\"\n         ></svg>\n      <span>{{ node?.name }}</span>\n      &nbsp;\n      <span class=\"badge\"\n            [ngClass]=\"{'badge-success': ['logged_in'].includes(node?.status), 'badge-danger': ['logged_out'].includes(node?.status)}\">\n        {{ node?.status }}\n      </span>\n    </ng-template>\n  </div>\n\n  <div class=\"col-6 metadata\"\n       *ngIf=\"data\">\n    <legend>{{ title }}</legend>\n\n    <cd-table #detailTable\n              [data]=\"data\"\n              columnMode=\"flex\"\n              [columns]=\"columns\"\n              [limit]=\"0\">\n    </cd-table>\n  </div>\n</div>\n\n<ng-template #highlightTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span *ngIf=\"row.default === undefined || row.default === row.current\">{{ value }}</span>\n  <strong *ngIf=\"row.default !== undefined && row.default !== row.current\">{{ value }}</strong>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { Node } from 'carbon-components-angular/treeview/tree-node.types';\nimport _ from 'lodash';\n\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { BooleanTextPipe } from '~/app/shared/pipes/boolean-text.pipe';\nimport { IscsiBackstorePipe } from '~/app/shared/pipes/iscsi-backstore.pipe';\nimport { TreeViewService } from '~/app/shared/services/tree-view.service';\n\n@Component({\n  selector: 'cd-iscsi-target-details',\n  templateUrl: './iscsi-target-details.component.html',\n  styleUrls: ['./iscsi-target-details.component.scss']\n})\nexport class IscsiTargetDetailsComponent implements OnChanges, OnInit {\n  @Input()\n  selection: any;\n  @Input()\n  settings: any;\n  @Input()\n  cephIscsiConfigVersion: number;\n\n  @ViewChild('highlightTpl', { static: true })\n  highlightTpl: TemplateRef<any>;\n\n  private detailTable: TableComponent;\n  @ViewChild('detailTable')\n  set content(content: TableComponent) {\n    this.detailTable = content;\n    if (content) {\n      content.updateColumns();\n    }\n  }\n\n  @ViewChild('treeNodeTemplate', { static: true }) labelTpl: TemplateRef<any>;\n\n  icons = Icons;\n  columns: CdTableColumn[];\n  data: any;\n  metadata: any = {};\n  selectedItem: any;\n  title: string;\n\n  nodes: Node[] = [];\n\n  constructor(\n    private iscsiBackstorePipe: IscsiBackstorePipe,\n    private booleanTextPipe: BooleanTextPipe,\n    public treeViewService: TreeViewService\n  ) {}\n\n  ngOnInit() {\n    this.columns = [\n      {\n        prop: 'displayName',\n        name: $localize`Name`,\n        flexGrow: 1,\n        cellTemplate: this.highlightTpl\n      },\n      {\n        prop: 'current',\n        name: $localize`Current`,\n        flexGrow: 1,\n        cellTemplate: this.highlightTpl\n      },\n      {\n        prop: 'default',\n        name: $localize`Default`,\n        flexGrow: 1,\n        cellTemplate: this.highlightTpl\n      }\n    ];\n  }\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.selectedItem = this.selection;\n      this.generateTree();\n    }\n\n    this.data = undefined;\n  }\n\n  private generateTree() {\n    const target_meta = _.cloneDeep(this.selectedItem.target_controls);\n    // Target level authentication was introduced in ceph-iscsi config v11\n    if (this.cephIscsiConfigVersion > 10) {\n      _.extend(target_meta, _.cloneDeep(this.selectedItem.auth));\n    }\n    this.metadata = { root: target_meta };\n    const cssClasses = {\n      target: {\n        expanded: _.join(\n          this.selectedItem.cdExecuting\n            ? [Icons.large, Icons.spinner, Icons.spin]\n            : [Icons.large, Icons.bullseye],\n          ' '\n        )\n      },\n      initiators: {\n        expanded: _.join([Icons.large, Icons.user], ' '),\n        leaf: _.join([Icons.user], ' ')\n      },\n      groups: {\n        expanded: _.join([Icons.large, Icons.users], ' '),\n        leaf: _.join([Icons.users], ' ')\n      },\n      disks: {\n        expanded: _.join([Icons.large, Icons.disk], ' '),\n        leaf: _.join([Icons.disk], ' ')\n      },\n      portals: {\n        expanded: _.join([Icons.large, Icons.server], ' '),\n        leaf: _.join([Icons.server], ' ')\n      }\n    };\n\n    const disks: any[] = [];\n    _.forEach(this.selectedItem.disks, (disk) => {\n      const id = 'disk_' + disk.pool + '_' + disk.image;\n      this.metadata[id] = {\n        controls: disk.controls,\n        backstore: disk.backstore\n      };\n      ['wwn', 'lun'].forEach((k) => {\n        if (k in disk) {\n          this.metadata[id][k] = disk[k];\n        }\n      });\n      disks.push({\n        id: id,\n        name: `${disk.pool}/${disk.image}`,\n        label: `${disk.pool}/${disk.image}`,\n        value: { cdIcon: cssClasses.disks.leaf }\n      });\n    });\n\n    const portals: Node[] = [];\n    _.forEach(this.selectedItem.portals, (portal) => {\n      portals.push({\n        label: this.labelTpl,\n        labelContext: {\n          name: `${portal.host}:${portal.ip}`,\n          cdIcon: cssClasses.portals.leaf\n        },\n        value: {\n          name: `${portal.host}:${portal.ip}`,\n          cdIcon: cssClasses.portals.leaf\n        }\n      });\n    });\n\n    const clients: Node[] = [];\n    _.forEach(this.selectedItem.clients, (client: Node) => {\n      const client_metadata = _.cloneDeep(client.auth);\n      if (client.info) {\n        _.extend(client_metadata, client.info);\n        delete client_metadata['state'];\n        _.forEach(Object.keys(client.info.state), (state) => {\n          client_metadata[state.toLowerCase()] = client.info.state[state];\n        });\n      }\n      this.metadata['client_' + client.client_iqn] = client_metadata;\n\n      const luns: Node[] = [];\n      client.luns.forEach((lun: Node) => {\n        luns.push({\n          label: this.labelTpl,\n          labelContext: {\n            name: `${lun.pool}/${lun.image}`,\n            cdIcon: cssClasses.disks.leaf\n          },\n          value: {\n            name: `${lun.pool}/${lun.image}`,\n            cdIcon: cssClasses.disks.leaf\n          },\n          id: 'disk_' + lun.pool + '_' + lun.image\n        });\n      });\n\n      let status = '';\n      if (client.info) {\n        status = Object.keys(client.info.state).includes('LOGGED_IN') ? 'logged_in' : 'logged_out';\n      }\n      clients.push({\n        label: this.labelTpl,\n        labelContext: {\n          name: client.client_iqn,\n          status: status,\n          cdIcon: cssClasses.initiators.leaf\n        },\n        value: {\n          name: client.client_iqn,\n          status: status,\n          cdIcon: cssClasses.initiators.leaf\n        },\n        id: 'client_' + client.client_iqn,\n        children: luns\n      });\n    });\n\n    const groups: Node[] = [];\n    _.forEach(this.selectedItem.groups, (group: Node) => {\n      const luns: Node[] = [];\n      group.disks.forEach((disk: Node) => {\n        luns.push({\n          label: this.labelTpl,\n          labelContext: {\n            name: `${disk.pool}/${disk.image}`,\n            cdIcon: cssClasses.disks.leaf\n          },\n          value: {\n            name: `${disk.pool}/${disk.image}`,\n            cdIcon: cssClasses.disks.leaf\n          },\n          id: 'disk_' + disk.pool + '_' + disk.image\n        });\n      });\n\n      const initiators: Node[] = [];\n      group.members.forEach((member: string) => {\n        initiators.push({\n          label: this.labelTpl,\n          labelContext: { name: member },\n          value: { name: member },\n          id: 'client_' + member\n        });\n      });\n\n      groups.push({\n        label: this.labelTpl,\n        labelContext: { name: group.group_id, cdIcon: cssClasses.groups.leaf },\n        value: { name: group.group_id, cdIcon: cssClasses.groups.leaf },\n        children: [\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Disks', cdIcon: cssClasses.disks.expanded },\n            value: { name: 'Disks', cdIcon: cssClasses.disks.expanded },\n            children: luns\n          },\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Initiators', cdIcon: cssClasses.initiators.expanded },\n            value: { name: 'Initiators', cdIcon: cssClasses.initiators.expanded },\n            children: initiators\n          }\n        ]\n      });\n    });\n\n    this.nodes = [\n      {\n        id: 'root',\n        label: this.labelTpl,\n        labelContext: {\n          name: this.selectedItem.target_iqn,\n          cdIcon: cssClasses.target.expanded\n        },\n        value: {\n          name: this.selectedItem.target_iqn,\n          cdIcon: cssClasses.target.expanded\n        },\n        expanded: true,\n        children: [\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Disks', cdIcon: cssClasses.disks.expanded },\n            value: { name: 'Disks', cdIcon: cssClasses.disks.expanded },\n            expanded: true,\n            children: disks\n          },\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Portals', cdIcon: cssClasses.portals.expanded },\n            value: { name: 'Portals', cdIcon: cssClasses.portals.expanded },\n            expanded: true,\n            children: portals\n          },\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Initiators', cdIcon: cssClasses.initiators.expanded },\n            value: { name: 'Initiators', cdIcon: cssClasses.initiators.expanded },\n            expanded: true,\n            children: clients\n          },\n          {\n            label: this.labelTpl,\n            labelContext: { name: 'Groups', cdIcon: cssClasses.groups.expanded },\n            value: { name: 'Groups', cdIcon: cssClasses.groups.expanded },\n            expanded: true,\n            children: groups\n          }\n        ]\n      }\n    ];\n  }\n\n  private format(value: any) {\n    if (typeof value === 'boolean') {\n      return this.booleanTextPipe.transform(value);\n    }\n    return value;\n  }\n\n  onNodeSelected(node: Node) {\n    if (node.id) {\n      this.title = node?.value?.name;\n      const tempData = this.metadata[node.id] || {};\n\n      if (node.id === 'root') {\n        this.detailTable?.toggleColumn({ prop: 'default', isHidden: true });\n        this.data = _.map(this.settings.target_default_controls, (value, key) => {\n          value = this.format(value);\n          return {\n            displayName: key,\n            default: value,\n            current: !_.isUndefined(tempData[key]) ? this.format(tempData[key]) : value\n          };\n        });\n        // Target level authentication was introduced in ceph-iscsi config v11\n        if (this.cephIscsiConfigVersion > 10) {\n          ['user', 'password', 'mutual_user', 'mutual_password'].forEach((key) => {\n            this.data.push({\n              displayName: key,\n              default: null,\n              current: tempData[key]\n            });\n          });\n        }\n      } else if (node.id.toString().startsWith('disk_')) {\n        this.detailTable?.toggleColumn({ prop: 'default', isHidden: true });\n        this.data = _.map(this.settings.disk_default_controls[tempData.backstore], (value, key) => {\n          value = this.format(value);\n          return {\n            displayName: key,\n            default: value,\n            current: !_.isUndefined(tempData.controls[key])\n              ? this.format(tempData.controls[key])\n              : value\n          };\n        });\n        this.data.push({\n          displayName: 'backstore',\n          default: this.iscsiBackstorePipe.transform(this.settings.default_backstore),\n          current: this.iscsiBackstorePipe.transform(tempData.backstore)\n        });\n        ['wwn', 'lun'].forEach((k) => {\n          if (k in tempData) {\n            this.data.push({\n              displayName: k,\n              default: undefined,\n              current: tempData[k]\n            });\n          }\n        });\n      } else {\n        this.detailTable?.toggleColumn({ prop: 'default', isHidden: false });\n        this.data = _.map(tempData, (value, key) => {\n          return {\n            displayName: key,\n            default: undefined,\n            current: this.format(value)\n          };\n        });\n      }\n    } else {\n      this.data = undefined;\n    }\n\n    this.detailTable?.updateColumns();\n  }\n}\n","<cd-iscsi-tabs></cd-iscsi-tabs>\n\n<cd-alert-panel type=\"info\"\n                *ngIf=\"available === false\"\n                title=\"iSCSI Targets not available\"\n                i18n-title>\n  <ng-container i18n>Please consult the&nbsp;<cd-doc section=\"iscsi\"></cd-doc>&nbsp;on\n    how to configure and enable the iSCSI Targets management functionality.</ng-container>\n\n  <ng-container *ngIf=\"status\">\n    <br>\n    <span i18n>Available information:</span>\n    <pre>{{ status }}</pre>\n  </ng-container>\n</cd-alert-panel>\n\n<cd-table #table\n          *ngIf=\"available === true\"\n          [data]=\"targets\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"target_iqn\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          [autoReload]=\"false\"\n          [status]=\"tableStatus\"\n          (fetchData)=\"getTargets()\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions class=\"btn-group\"\n                      [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n\n    <button class=\"btn btn-light\"\n            type=\"button\"\n            (click)=\"configureDiscoveryAuth()\">\n      <svg [cdsIcon]=\"icons.key\"\n           [size]=\"icons.size16\"\n           ></svg>\n      <ng-container i18n>Discovery authentication</ng-container>\n    </button>\n  </div>\n\n  <ng-container *ngIf=\"expandedRow\">\n    <cd-iscsi-target-details *cdTableDetail\n                             [cephIscsiConfigVersion]=\"cephIscsiConfigVersion\"\n                             [selection]=\"expandedRow\"\n                             [settings]=\"settings\"></cd-iscsi-target-details>\n  </ng-container>\n</cd-table>\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport { Subscription } from 'rxjs';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { Task } from '~/app/shared/models/task';\nimport { JoinPipe } from '~/app/shared/pipes/join.pipe';\nimport { NotAvailablePipe } from '~/app/shared/pipes/not-available.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { IscsiTargetDiscoveryModalComponent } from '../iscsi-target-discovery-modal/iscsi-target-discovery-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-iscsi-target-list',\n  templateUrl: './iscsi-target-list.component.html',\n  styleUrls: ['./iscsi-target-list.component.scss'],\n  providers: [TaskListService]\n})\nexport class IscsiTargetListComponent extends ListWithDetails implements OnInit, OnDestroy {\n  @ViewChild(TableComponent)\n  table: TableComponent;\n\n  available: boolean = undefined;\n  columns: CdTableColumn[];\n  modalRef: NgbModalRef;\n  permission: Permission;\n  selection = new CdTableSelection();\n  cephIscsiConfigVersion: number;\n  settings: any;\n  status: string;\n  summaryDataSubscription: Subscription;\n  tableActions: CdTableAction[];\n  targets: any[] = [];\n  icons = Icons;\n\n  builders = {\n    'iscsi/target/create': (metadata: object) => {\n      return {\n        target_iqn: metadata['target_iqn']\n      };\n    }\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private iscsiService: IscsiService,\n    private joinPipe: JoinPipe,\n    private taskListService: TaskListService,\n    private notAvailablePipe: NotAvailablePipe,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    public actionLabels: ActionLabelsI18n,\n    protected ngZone: NgZone\n  ) {\n    super(ngZone);\n    this.permission = this.authStorageService.getPermissions().iscsi;\n\n    this.tableActions = [\n      {\n        permission: 'create',\n        icon: Icons.add,\n        routerLink: () => '/block/iscsi/targets/create',\n        name: this.actionLabels.CREATE\n      },\n      {\n        permission: 'update',\n        icon: Icons.edit,\n        routerLink: () => `/block/iscsi/targets/edit/${this.selection.first().target_iqn}`,\n        name: this.actionLabels.EDIT,\n        disable: () => this.getEditDisableDesc()\n      },\n      {\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteIscsiTargetModal(),\n        name: this.actionLabels.DELETE,\n        disable: () => this.getDeleteDisableDesc()\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Target`,\n        prop: 'target_iqn',\n        flexGrow: 2,\n        cellTransformation: CellTemplate.executing\n      },\n      {\n        name: $localize`Portals`,\n        prop: 'cdPortals',\n        pipe: this.joinPipe,\n        flexGrow: 2\n      },\n      {\n        name: $localize`Images`,\n        prop: 'cdImages',\n        pipe: this.joinPipe,\n        flexGrow: 2\n      },\n      {\n        name: $localize`# Sessions`,\n        prop: 'info.num_sessions',\n        pipe: this.notAvailablePipe,\n        flexGrow: 1\n      }\n    ];\n\n    this.iscsiService.status().subscribe((result: any) => {\n      this.available = result.available;\n\n      if (!result.available) {\n        this.status = result.message;\n      }\n    });\n  }\n\n  getTargets() {\n    if (this.available) {\n      this.setTableRefreshTimeout();\n      this.iscsiService.version().subscribe((res: any) => {\n        this.cephIscsiConfigVersion = res['ceph_iscsi_config_version'];\n      });\n      this.taskListService.init(\n        () => this.iscsiService.listTargets(),\n        (resp) => this.prepareResponse(resp),\n        (targets) => (this.targets = targets),\n        () => this.onFetchError(),\n        this.taskFilter,\n        this.itemFilter,\n        this.builders\n      );\n\n      this.iscsiService.settings().subscribe((settings: any) => {\n        this.settings = settings;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.summaryDataSubscription) {\n      this.summaryDataSubscription.unsubscribe();\n    }\n  }\n\n  getEditDisableDesc(): string | boolean {\n    const first = this.selection.first();\n\n    if (first && first?.cdExecuting) {\n      return first.cdExecuting;\n    }\n\n    if (first && _.isUndefined(first?.['info'])) {\n      return $localize`Unavailable gateway(s)`;\n    }\n\n    return !first;\n  }\n\n  getDeleteDisableDesc(): string | boolean {\n    const first = this.selection.first();\n\n    if (first?.cdExecuting) {\n      return first.cdExecuting;\n    }\n\n    if (first && _.isUndefined(first?.['info'])) {\n      return $localize`Unavailable gateway(s)`;\n    }\n\n    if (first && first?.['info']?.['num_sessions']) {\n      return $localize`Target has active sessions`;\n    }\n\n    return !first;\n  }\n\n  prepareResponse(resp: any): any[] {\n    resp.forEach((element: Record<string, any>) => {\n      element.cdPortals = element.portals.map(\n        (portal: Record<string, any>) => `${portal.host}:${portal.ip}`\n      );\n      element.cdImages = element.disks.map(\n        (disk: Record<string, any>) => `${disk.pool}/${disk.image}`\n      );\n    });\n\n    return resp;\n  }\n\n  onFetchError() {\n    this.table.reset(); // Disable loading indicator.\n  }\n\n  itemFilter(entry: Record<string, any>, task: Task) {\n    return entry.target_iqn === task.metadata['target_iqn'];\n  }\n\n  taskFilter(task: Task) {\n    return ['iscsi/target/create', 'iscsi/target/edit', 'iscsi/target/delete'].includes(task.name);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteIscsiTargetModal() {\n    const target_iqn = this.selection.first().target_iqn;\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`iSCSI target`,\n      itemNames: [target_iqn],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('iscsi/target/delete', {\n            target_iqn: target_iqn\n          }),\n          call: this.iscsiService.deleteTarget(target_iqn)\n        })\n    });\n  }\n\n  configureDiscoveryAuth() {\n    this.modalService.show(IscsiTargetDiscoveryModalComponent);\n  }\n}\n","<cd-iscsi-tabs></cd-iscsi-tabs>\n\n<legend i18n>Gateways</legend>\n<div>\n  <cd-table [data]=\"gateways\"\n            (fetchData)=\"refresh()\"\n            [columns]=\"gatewaysColumns\">\n  </cd-table>\n</div>\n\n<legend i18n>Images</legend>\n<div>\n  <cd-table [data]=\"images\"\n            [columns]=\"imagesColumns\">\n  </cd-table>\n</div>\n\n<ng-template #iscsiSparklineTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span *ngIf=\"row.backstore === 'user:rbd'\">\n    <cd-sparkline [data]=\"value\"\n                  [isBinary]=\"row.cdIsBinary\"></cd-sparkline>\n  </span>\n  <span *ngIf=\"row.backstore !== 'user:rbd'\"\n        class=\"text-muted\">\n    n/a\n  </span>\n</ng-template>\n\n<ng-template #iscsiPerSecondTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span *ngIf=\"row.backstore === 'user:rbd'\">\n    {{ value }} /s\n  </span>\n  <span *ngIf=\"row.backstore !== 'user:rbd'\"\n        class=\"text-muted\">\n    n/a\n  </span>\n</ng-template>\n\n<ng-template #iscsiRelativeDateTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span *ngIf=\"row.backstore === 'user:rbd'\">\n    {{ value | relativeDate | notAvailable }}\n  </span>\n  <span *ngIf=\"row.backstore !== 'user:rbd'\"\n        class=\"text-muted\">\n    n/a\n  </span>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { IscsiService } from '~/app/shared/api/iscsi.service';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { IscsiBackstorePipe } from '~/app/shared/pipes/iscsi-backstore.pipe';\n\n@Component({\n  selector: 'cd-iscsi',\n  templateUrl: './iscsi.component.html',\n  styleUrls: ['./iscsi.component.scss']\n})\nexport class IscsiComponent implements OnInit {\n  @ViewChild('iscsiSparklineTpl', { static: true })\n  iscsiSparklineTpl: TemplateRef<any>;\n  @ViewChild('iscsiPerSecondTpl', { static: true })\n  iscsiPerSecondTpl: TemplateRef<any>;\n  @ViewChild('iscsiRelativeDateTpl', { static: true })\n  iscsiRelativeDateTpl: TemplateRef<any>;\n\n  gateways: any[] = [];\n  gatewaysColumns: any;\n  images: any[] = [];\n  imagesColumns: any;\n\n  constructor(\n    private iscsiService: IscsiService,\n    private dimlessPipe: DimlessPipe,\n    private iscsiBackstorePipe: IscsiBackstorePipe\n  ) {}\n\n  ngOnInit() {\n    this.gatewaysColumns = [\n      {\n        name: $localize`Name`,\n        prop: 'name'\n      },\n      {\n        name: $localize`State`,\n        prop: 'state',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            up: { class: 'badge-success' },\n            down: { class: 'badge-danger' }\n          }\n        }\n      },\n      {\n        name: $localize`# Targets`,\n        prop: 'num_targets'\n      },\n      {\n        name: $localize`# Sessions`,\n        prop: 'num_sessions'\n      }\n    ];\n    this.imagesColumns = [\n      {\n        name: $localize`Pool`,\n        prop: 'pool'\n      },\n      {\n        name: $localize`Image`,\n        prop: 'image'\n      },\n      {\n        name: $localize`Backstore`,\n        prop: 'backstore',\n        pipe: this.iscsiBackstorePipe\n      },\n      {\n        name: $localize`Read Bytes`,\n        prop: 'stats_history.rd_bytes',\n        cellTemplate: this.iscsiSparklineTpl\n      },\n      {\n        name: $localize`Write Bytes`,\n        prop: 'stats_history.wr_bytes',\n        cellTemplate: this.iscsiSparklineTpl\n      },\n      {\n        name: $localize`Read Ops`,\n        prop: 'stats.rd',\n        pipe: this.dimlessPipe,\n        cellTemplate: this.iscsiPerSecondTpl\n      },\n      {\n        name: $localize`Write Ops`,\n        prop: 'stats.wr',\n        pipe: this.dimlessPipe,\n        cellTemplate: this.iscsiPerSecondTpl\n      },\n      {\n        name: $localize`A/O Since`,\n        prop: 'optimized_since',\n        cellTemplate: this.iscsiRelativeDateTpl\n      }\n    ];\n  }\n\n  refresh() {\n    this.iscsiService.overview().subscribe((overview: object) => {\n      this.gateways = overview['gateways'];\n      this.images = overview['images'];\n      this.images.map((image) => {\n        if (image.stats_history) {\n          image.stats_history.rd_bytes = image.stats_history.rd_bytes.map((i: any) => i[1]);\n          image.stats_history.wr_bytes = image.stats_history.wr_bytes.map((i: any) => i[1]);\n        }\n        image.cdIsBinary = true;\n        return image;\n      });\n    });\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M2 26H30V28H2zM25.4 9c.8-.8.8-2 0-2.8 0 0 0 0 0 0l-3.6-3.6c-.8-.8-2-.8-2.8 0 0 0 0 0 0 0l-15 15V24h6.4L25.4 9zM20.4 4L24 7.6l-3 3L17.4 7 20.4 4zM6 22v-3.6l10-10 3.6 3.6-10 10H6z\"\n    }\n  }],\n  \"name\": \"edit\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _32 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 32,\n    \"height\": 32\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z\"\n    }\n  }],\n  \"name\": \"checkmark\",\n  \"size\": 32\n};\n\nexport { _32 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M30 24L26 24 26 20 24 20 24 24 20 24 20 26 24 26 24 30 26 30 26 26 30 26 30 24z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,28H8V4h8v6a2.0058,2.0058,0,0,0,2,2h6v4h2V10a.9092.9092,0,0,0-.3-.7l-7-7A.9087.9087,0,0,0,18,2H8A2.0058,2.0058,0,0,0,6,4V28a2.0058,2.0058,0,0,0,2,2h8ZM18,4.4,23.6,10H18Z\"\n    }\n  }],\n  \"name\": \"document--add\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _16 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 16,\n    \"height\": 16\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M28 19L14.83 19 17.41 16.41 16 15 11 20 16 25 17.41 23.59 14.83 21 28 21 28 19z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M24,14V10a1,1,0,0,0-.29-.71l-7-7A1,1,0,0,0,16,2H6A2,2,0,0,0,4,4V28a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V26H22v2H6V4h8v6a2,2,0,0,0,2,2h6v2Zm-8-4V4.41L21.59,10Z\"\n    }\n  }],\n  \"name\": \"document--import\",\n  \"size\": 16\n};\n\nexport { _16 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgbNavModule, NgbProgressbarModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { BootstrapCreateModalComponent } from './bootstrap-create-modal/bootstrap-create-modal.component';\nimport { BootstrapImportModalComponent } from './bootstrap-import-modal/bootstrap-import-modal.component';\nimport { DaemonListComponent } from './daemon-list/daemon-list.component';\nimport { ImageListComponent } from './image-list/image-list.component';\nimport { MirrorHealthColorPipe } from './mirror-health-color.pipe';\nimport { OverviewComponent } from './overview/overview.component';\nimport { PoolEditModeModalComponent } from './pool-edit-mode-modal/pool-edit-mode-modal.component';\nimport { PoolEditPeerModalComponent } from './pool-edit-peer-modal/pool-edit-peer-modal.component';\nimport { PoolListComponent } from './pool-list/pool-list.component';\nimport {\n  ButtonModule,\n  CheckboxModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  ModalModule,\n  SelectModule\n} from 'carbon-components-angular';\n\n// Icons\nimport EditIcon from '@carbon/icons/es/edit/32';\nimport CheckMarkIcon from '@carbon/icons/es/checkmark/32';\nimport ResetIcon from '@carbon/icons/es/reset/32';\nimport DocumentAddIcon from '@carbon/icons/es/document--add/16';\nimport DocumentImportIcon from '@carbon/icons/es/document--import/16';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgbNavModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbProgressbarModule,\n    NgbTooltipModule,\n    ModalModule,\n    InputModule,\n    CheckboxModule,\n    SelectModule,\n    GridModule,\n    ButtonModule,\n    IconModule\n  ],\n  declarations: [\n    BootstrapCreateModalComponent,\n    BootstrapImportModalComponent,\n    DaemonListComponent,\n    ImageListComponent,\n    OverviewComponent,\n    PoolEditModeModalComponent,\n    PoolEditPeerModalComponent,\n    PoolListComponent,\n    MirrorHealthColorPipe\n  ],\n  exports: [OverviewComponent]\n})\nexport class MirroringModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      EditIcon,\n      CheckMarkIcon,\n      ResetIcon,\n      DocumentAddIcon,\n      DocumentImportIcon\n    ]);\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Create Bootstrap Token</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"createBootstrapForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"createBootstrapForm\"\n          novalidate>\n      <p>\n        <ng-container i18n>To create a bootstrap token which can be imported\n        by a peer site cluster, provide the local site's name, select\n        which pools will have mirroring enabled, and click&nbsp;\n        <kbd>Generate</kbd>.</ng-container>\n      </p>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"siteName\"\n                        cdRequiredField=\"Site Name\"\n                        [invalid]=\"!createBootstrapForm.controls['siteName'].valid && (createBootstrapForm.controls['siteName'].dirty || createBootstrapForm.controls['siteName'].touched)\"\n                        [invalidText]=\"siteNameError\"\n                        i18n>Site Name\n          <input cdsText\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"siteName\"\n                 name=\"siteName\"\n                 formControlName=\"siteName\"\n                 [invalid]=\"!createBootstrapForm.controls['siteName'].valid && (createBootstrapForm.controls['siteName'].dirty || createBootstrapForm.controls['siteName'].touched)\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #siteNameError>\n          <span *ngIf=\"createBootstrapForm.showError('siteName', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\"\n           formGroupName=\"pools\">\n        <fieldset>\n          <label class=\"cds--label\"\n                 for=\"pools\"\n                 i18n>Pools</label>\n          <ng-container *ngFor=\"let pool of pools\">\n            <cds-checkbox i18n-label\n                          [id]=\"pool.name\"\n                          [name]=\"pool.name\"\n                          [formControlName]=\"pool.name\">\n              {{ pool.name }}\n            </cds-checkbox>\n          </ng-container>\n        </fieldset>\n        <span *ngIf=\"createBootstrapForm.showError('pools', formDir, 'requirePool')\"\n              class=\"invalid-feedback\"\n              i18n>At least one pool is required.</span>\n      </div>\n\n      <cd-submit-button i18n\n                        [form]=\"createBootstrapForm\"\n                        (submitAction)=\"generate()\">Generate</cd-submit-button>\n\n      <div class=\"form-item mt-2\">\n        <cds-textarea-label for=\"token\"\n                            i18n>Token\n          <textarea cdsTextArea\n                    placeholder=\"Generated token...\"\n                    i18n-placeholder\n                    id=\"token\"\n                    formControlName=\"token\"\n                    cols=\"200\"\n                    rows=\"5\"\n                    readonly>\n          </textarea>\n        </cds-textarea-label>\n        <cd-copy-2-clipboard-button source=\"token\">\n        </cd-copy-2-clipboard-button>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (backAction)=\"closeModal()\"\n                        [showSubmit]=\"false\"\n                        [modalForm]=\"true\"\n                        cancelText=\"Close\"></cd-form-button-panel>\n\n</cds-modal>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Optional\n} from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, ValidatorFn, Validators } from '@angular/forms';\n\nimport { BaseModal } from 'carbon-components-angular';\nimport _ from 'lodash';\nimport { concat, forkJoin, Subscription } from 'rxjs';\nimport { last, tap } from 'rxjs/operators';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-bootstrap-create-modal',\n  templateUrl: './bootstrap-create-modal.component.html',\n  styleUrls: ['./bootstrap-create-modal.component.scss']\n})\nexport class BootstrapCreateModalComponent\n  extends BaseModal\n  implements OnDestroy, OnInit, AfterViewInit {\n  pools: any[] = [];\n  token: string;\n\n  subs: Subscription;\n\n  createBootstrapForm: CdFormGroup;\n\n  constructor(\n    private rbdMirroringService: RbdMirroringService,\n    private taskWrapper: TaskWrapperService,\n    private changeDetectorRef: ChangeDetectorRef,\n\n    @Inject('siteName') @Optional() public siteName?: string\n  ) {\n    super();\n    this.createForm();\n  }\n\n  ngAfterViewInit(): void {\n    this.changeDetectorRef.detectChanges();\n  }\n\n  createForm() {\n    this.createBootstrapForm = new CdFormGroup({\n      siteName: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      pools: new UntypedFormGroup(\n        {},\n        {\n          validators: [this.validatePools()]\n        }\n      ),\n      token: new UntypedFormControl('', {})\n    });\n  }\n\n  ngOnInit() {\n    this.createBootstrapForm.get('siteName').setValue(this.siteName);\n    this.rbdMirroringService.getSiteName().subscribe((response: any) => {\n      this.createBootstrapForm.get('siteName').setValue(response.site_name);\n    });\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      const pools = data.content_data.pools;\n      this.pools = pools.reduce((acc: any[], pool: Pool) => {\n        acc.push({\n          name: pool['name'],\n          mirror_mode: pool['mirror_mode']\n        });\n        return acc;\n      }, []);\n\n      const poolsControl = this.createBootstrapForm.get('pools') as UntypedFormGroup;\n      _.each(this.pools, (pool) => {\n        const poolName = pool['name'];\n        const mirroring_disabled = pool['mirror_mode'] === 'disabled';\n        const control = poolsControl.controls[poolName];\n        if (control) {\n          if (mirroring_disabled && control.disabled) {\n            control.enable();\n          } else if (!mirroring_disabled && control.enabled) {\n            control.disable();\n            control.setValue(true);\n          }\n        } else {\n          poolsControl.addControl(\n            poolName,\n            new UntypedFormControl({ value: !mirroring_disabled, disabled: !mirroring_disabled })\n          );\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subs) {\n      this.subs.unsubscribe();\n    }\n  }\n\n  validatePools(): ValidatorFn {\n    return (poolsControl: UntypedFormGroup): { [key: string]: any } => {\n      let checkedCount = 0;\n      _.each(poolsControl.controls, (control) => {\n        if (control.value === true) {\n          ++checkedCount;\n        }\n      });\n\n      if (checkedCount > 0) {\n        return null;\n      }\n\n      return { requirePool: true };\n    };\n  }\n\n  generate() {\n    this.createBootstrapForm.get('token').setValue('');\n\n    let bootstrapPoolName = '';\n    const poolNames: string[] = [];\n    const poolsControl = this.createBootstrapForm.get('pools') as UntypedFormGroup;\n    _.each(poolsControl.controls, (control, poolName) => {\n      if (control.value === true) {\n        bootstrapPoolName = poolName;\n        if (!control.disabled) {\n          poolNames.push(poolName);\n        }\n      }\n    });\n\n    const poolModeRequest = {\n      mirror_mode: 'image'\n    };\n\n    const apiActionsObs = concat(\n      this.rbdMirroringService.setSiteName(this.createBootstrapForm.getValue('siteName')),\n      forkJoin(\n        poolNames.map((poolName) => this.rbdMirroringService.updatePool(poolName, poolModeRequest))\n      ),\n      this.rbdMirroringService\n        .createBootstrapToken(bootstrapPoolName)\n        .pipe(tap((data: any) => this.createBootstrapForm.get('token').setValue(data['token'])))\n    ).pipe(last());\n\n    const finishHandler = () => {\n      this.rbdMirroringService.refresh();\n      this.createBootstrapForm.setErrors({ cdSubmitButton: true });\n    };\n\n    const taskObs = this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/mirroring/bootstrap/create', {}),\n      call: apiActionsObs\n    });\n    taskObs.subscribe({ error: finishHandler, complete: finishHandler });\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Import Bootstrap Token</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"importBootstrapForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"importBootstrapForm\"\n          novalidate>\n      <p>\n        <ng-container i18n>To import a bootstrap token which was created\n        by a peer site cluster, provide the local site's name, select\n        which pools will have mirroring enabled, provide the generated\n        token, and click&nbsp;<kbd>Import</kbd>.</ng-container>\n      </p>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"siteName\"\n                        i18n\n                        cdRequiredField=\"Site Name\"\n                        [invalid]=\"!importBootstrapForm.controls['siteName'].valid && importBootstrapForm.controls['siteName'].dirty\"\n                        [invalidText]=\"siteNameError\"\n                        i18n-invalidText>Site Name\n          <input cdsText\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"siteName\"\n                 name=\"siteName\"\n                 formControlName=\"siteName\"\n                 [invalid]=\"!importBootstrapForm.controls['siteName'].valid && importBootstrapForm.controls['siteName'].dirty\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #siteNameError>\n          <span *ngIf=\"importBootstrapForm.showError('siteName', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-select label=\"Direction\"\n                    for=\"direction\"\n                    name=\"direction\"\n                    id=\"direction\"\n                    formControlName=\"direction\">\n          <option *ngFor=\"let direction of directions\"\n                  [value]=\"direction.key\">{{ direction.desc }}</option>\n        </cds-select>\n      </div>\n\n      <div class=\"form-item\"\n           formGroupName=\"pools\">\n        <fieldset>\n          <label class=\"cds--label\"\n                 for=\"pools\"\n                 i18n>Pools</label>\n          <ng-container *ngFor=\"let pool of pools\">\n            <cds-checkbox i18n-label\n                          [id]=\"pool.name\"\n                          [name]=\"pool.name\"\n                          [formControlName]=\"pool.name\">\n              {{ pool.name }}\n            </cds-checkbox>\n          </ng-container>\n        </fieldset>\n        <span *ngIf=\"importBootstrapForm.showError('pools', formDir, 'requirePool')\"\n              class=\"invalid-feedback\"\n              i18n>At least one pool is required.</span>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-textarea-label for=\"token\"\n                            [invalid]=\"importBootstrapForm.controls['token'].invalid && (importBootstrapForm.controls['token'].dirty)\"\n                            [invalidText]=\"tokenError\"\n                            cdRequiredField=\"Token\"\n                            i18n>Token\n          <textarea cdsTextArea\n                    placeholder=\"Generated token...\"\n                    i18n-placeholder\n                    id=\"token\"\n                    formControlName=\"token\"\n                    cols=\"200\"\n                    rows=\"5\"\n                    [invalid]=\"importBootstrapForm.controls['token'].invalid && (importBootstrapForm.controls['token'].dirty)\">\n          </textarea>\n        </cds-textarea-label>\n        <ng-template #tokenError>\n          <span *ngIf=\"importBootstrapForm.showError('token', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n          <span *ngIf=\"importBootstrapForm.showError('token', formDir, 'invalidToken')\"\n                class=\"invalid-feedback\"\n                i18n>The token is invalid.</span>\n        </ng-template>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"import()\"\n                        [form]=\"importBootstrapForm\"\n                        [submitText]=\"actionLabels.SUBMIT\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, ValidatorFn, Validators } from '@angular/forms';\n\nimport { BaseModal } from 'carbon-components-angular';\nimport _ from 'lodash';\nimport { concat, forkJoin, Observable, Subscription } from 'rxjs';\nimport { last } from 'rxjs/operators';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-bootstrap-import-modal',\n  templateUrl: './bootstrap-import-modal.component.html',\n  styleUrls: ['./bootstrap-import-modal.component.scss']\n})\nexport class BootstrapImportModalComponent extends BaseModal implements OnInit, OnDestroy {\n  pools: any[] = [];\n  token: string;\n\n  subs: Subscription;\n\n  importBootstrapForm: CdFormGroup;\n\n  directions: Array<any> = [\n    { key: 'rx-tx', desc: 'Bidirectional' },\n    { key: 'rx', desc: 'Unidirectional (receive-only)' }\n  ];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private rbdMirroringService: RbdMirroringService,\n    private taskWrapper: TaskWrapperService,\n\n    @Inject('siteName') @Optional() public siteName: string\n  ) {\n    super();\n    this.createForm();\n  }\n\n  createForm() {\n    this.importBootstrapForm = new CdFormGroup({\n      siteName: new UntypedFormControl('', {\n        validators: [Validators.required]\n      }),\n      direction: new UntypedFormControl('rx-tx', {}),\n      pools: new UntypedFormGroup(\n        {},\n        {\n          validators: [this.validatePools()]\n        }\n      ),\n      token: new UntypedFormControl('', {\n        validators: [Validators.required, this.validateToken()]\n      })\n    });\n  }\n\n  ngOnInit() {\n    this.rbdMirroringService.getSiteName().subscribe((response: any) => {\n      this.importBootstrapForm.get('siteName').setValue(response.site_name);\n    });\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      const pools = data.content_data.pools;\n      this.pools = pools.reduce((acc: any[], pool: Pool) => {\n        acc.push({\n          name: pool['name'],\n          mirror_mode: pool['mirror_mode']\n        });\n        return acc;\n      }, []);\n\n      const poolsControl = this.importBootstrapForm.get('pools') as UntypedFormGroup;\n      _.each(this.pools, (pool) => {\n        const poolName = pool['name'];\n        const mirroring_disabled = pool['mirror_mode'] === 'disabled';\n        const control = poolsControl.controls[poolName];\n        if (control) {\n          if (mirroring_disabled && control.disabled) {\n            control.enable();\n          } else if (!mirroring_disabled && control.enabled) {\n            control.disable();\n            control.setValue(true);\n          }\n        } else {\n          poolsControl.addControl(\n            poolName,\n            new UntypedFormControl({ value: !mirroring_disabled, disabled: !mirroring_disabled })\n          );\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subs) {\n      this.subs.unsubscribe();\n    }\n  }\n\n  validatePools(): ValidatorFn {\n    return (poolsControl: UntypedFormGroup): { [key: string]: any } => {\n      let checkedCount = 0;\n      _.each(poolsControl.controls, (control) => {\n        if (control.value === true) {\n          ++checkedCount;\n        }\n      });\n\n      if (checkedCount > 0) {\n        return null;\n      }\n\n      return { requirePool: true };\n    };\n  }\n\n  validateToken(): ValidatorFn {\n    return (token: UntypedFormControl): { [key: string]: any } => {\n      try {\n        if (JSON.parse(atob(token.value))) {\n          return null;\n        }\n      } catch (error) {}\n      return { invalidToken: true };\n    };\n  }\n\n  import() {\n    const bootstrapPoolNames: string[] = [];\n    const poolNames: string[] = [];\n    const poolsControl = this.importBootstrapForm.get('pools') as UntypedFormGroup;\n    _.each(poolsControl.controls, (control, poolName) => {\n      if (control.value === true) {\n        bootstrapPoolNames.push(poolName);\n        if (!control.disabled) {\n          poolNames.push(poolName);\n        }\n      }\n    });\n\n    const poolModeRequest = {\n      mirror_mode: 'image'\n    };\n\n    let apiActionsObs: Observable<any> = concat(\n      this.rbdMirroringService.setSiteName(this.importBootstrapForm.getValue('siteName')),\n      forkJoin(\n        poolNames.map((poolName) => this.rbdMirroringService.updatePool(poolName, poolModeRequest))\n      )\n    );\n\n    apiActionsObs = bootstrapPoolNames\n      .reduce((obs, poolName) => {\n        return concat(\n          obs,\n          this.rbdMirroringService.importBootstrapToken(\n            poolName,\n            this.importBootstrapForm.getValue('direction'),\n            this.importBootstrapForm.getValue('token')\n          )\n        );\n      }, apiActionsObs)\n      .pipe(last());\n\n    const finishHandler = () => {\n      this.rbdMirroringService.refresh();\n      this.importBootstrapForm.setErrors({ cdSubmitButton: true });\n    };\n\n    const taskObs = this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/mirroring/bootstrap/import', {}),\n      call: apiActionsObs\n    });\n    taskObs.subscribe({\n      error: finishHandler,\n      complete: () => {\n        finishHandler();\n        this.closeModal();\n      }\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'mirrorHealthColor'\n})\nexport class MirrorHealthColorPipe implements PipeTransform {\n  transform(value: any): any {\n    if (value === 'warning') {\n      return 'badge badge-warning';\n    } else if (value === 'error') {\n      return 'badge badge-danger';\n    } else if (value === 'success') {\n      return 'badge badge-success';\n    }\n    return 'badge badge-info';\n  }\n}\n","<cd-table [data]=\"data\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          [autoReload]=\"-1\"\n          (fetchData)=\"refresh()\"\n          [status]=\"tableStatus\">\n</cd-table>\n\n<ng-template #healthTmpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span [ngClass]=\"row.health_color | mirrorHealthColor\">{{ value }}</span>\n</ng-template>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { CephShortVersionPipe } from '~/app/shared/pipes/ceph-short-version.pipe';\n\n@Component({\n  selector: 'cd-mirroring-daemons',\n  templateUrl: './daemon-list.component.html',\n  styleUrls: ['./daemon-list.component.scss']\n})\nexport class DaemonListComponent implements OnInit, OnDestroy {\n  @ViewChild('healthTmpl', { static: true })\n  healthTmpl: TemplateRef<any>;\n\n  subs: Subscription;\n\n  data: [];\n  columns: {};\n\n  tableStatus = new TableStatusViewCache();\n\n  constructor(\n    private rbdMirroringService: RbdMirroringService,\n    private cephShortVersionPipe: CephShortVersionPipe\n  ) {}\n\n  ngOnInit() {\n    this.columns = [\n      { prop: 'instance_id', name: $localize`Instance`, flexGrow: 2 },\n      { prop: 'id', name: $localize`ID`, flexGrow: 2 },\n      { prop: 'server_hostname', name: $localize`Hostname`, flexGrow: 2 },\n      {\n        prop: 'version',\n        name: $localize`Version`,\n        pipe: this.cephShortVersionPipe,\n        flexGrow: 2\n      },\n      {\n        prop: 'health',\n        name: $localize`Health`,\n        cellTemplate: this.healthTmpl,\n        flexGrow: 1\n      }\n    ];\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      this.data = data.content_data.daemons;\n      this.tableStatus = new TableStatusViewCache(data.status);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  refresh() {\n    this.rbdMirroringService.refresh();\n  }\n}\n","<nav ngbNav\n     #nav=\"ngbNav\"\n     class=\"nav-tabs\"\n     cdStatefulTab=\"image-list\">\n  <ng-container ngbNavItem=\"issues\">\n    <a ngbNavLink\n       i18n>Issues ({{ image_error.data.length }})</a>\n    <ng-template ngbNavContent>\n      <cd-table [data]=\"image_error.data\"\n                columnMode=\"flex\"\n                [columns]=\"image_error.columns\"\n                [autoReload]=\"-1\"\n                (fetchData)=\"refresh()\"\n                [status]=\"tableStatus\">\n      </cd-table>\n    </ng-template>\n  </ng-container>\n  <ng-container ngbNavItem=\"syncing\">\n    <a ngbNavLink\n       i18n>Syncing ({{ image_syncing.data.length }})</a>\n    <ng-template ngbNavContent>\n      <cd-table [data]=\"image_syncing.data\"\n                columnMode=\"flex\"\n                [columns]=\"image_syncing.columns\"\n                [autoReload]=\"-1\"\n                (fetchData)=\"refresh()\"\n                [status]=\"tableStatus\">\n      </cd-table>\n    </ng-template>\n  </ng-container>\n  <ng-container ngbNavItem=\"ready\">\n    <a ngbNavLink\n       i18n>Ready ({{ image_ready.data.length }})</a>\n    <ng-template ngbNavContent>\n      <cd-table [data]=\"image_ready.data\"\n                columnMode=\"flex\"\n                [columns]=\"image_ready.columns\"\n                [autoReload]=\"-1\"\n                (fetchData)=\"refresh()\"\n                [status]=\"tableStatus\">\n      </cd-table>\n    </ng-template>\n  </ng-container>\n</nav>\n\n<div [ngbNavOutlet]=\"nav\"></div>\n\n<ng-template #stateTmpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span [ngClass]=\"row.state_color | mirrorHealthColor\">{{ value }}</span>\n</ng-template>\n\n<ng-template #progressTmpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <div *ngIf=\"row.state === 'Replaying'\">\n  </div>\n  <div class=\"w-100 h-100 d-flex justify-content-center align-items-center\">\n    <ngb-progressbar *ngIf=\"row.state === 'Replaying'\"\n                     type=\"info\"\n                     class=\"w-100\"\n                     [value]=\"value\"\n                     [showValue]=\"true\"></ngb-progressbar>\n  </div>\n</ng-template>\n\n<ng-template #entriesBehindPrimaryTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span *ngIf=\"row.mirror_mode === 'journal'\">\n    {{ value }}\n  </span>\n  <span *ngIf=\"row.mirror_mode === 'snapshot'\"\n        ngbTooltip=\"Not available with mirroring snapshot mode\">-</span>\n</ng-template>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\n\n@Component({\n  selector: 'cd-mirroring-images',\n  templateUrl: './image-list.component.html',\n  styleUrls: ['./image-list.component.scss']\n})\nexport class ImageListComponent implements OnInit, OnDestroy {\n  @ViewChild('stateTmpl', { static: true })\n  stateTmpl: TemplateRef<any>;\n  @ViewChild('syncTmpl', { static: true })\n  syncTmpl: TemplateRef<any>;\n  @ViewChild('progressTmpl', { static: true })\n  progressTmpl: TemplateRef<any>;\n  @ViewChild('entriesBehindPrimaryTpl', { static: true })\n  entriesBehindPrimaryTpl: TemplateRef<any>;\n\n  subs: Subscription;\n\n  image_error: Record<string, any> = {\n    data: [],\n    columns: {}\n  };\n  image_syncing: Record<string, any> = {\n    data: [],\n    columns: {}\n  };\n  image_ready: Record<string, any> = {\n    data: [],\n    columns: {}\n  };\n\n  tableStatus = new TableStatusViewCache();\n\n  constructor(private rbdMirroringService: RbdMirroringService) {}\n\n  ngOnInit() {\n    this.image_error.columns = [\n      { prop: 'pool_name', name: $localize`Pool`, flexGrow: 2 },\n      { prop: 'name', name: $localize`Image`, flexGrow: 2 },\n      {\n        prop: 'state',\n        name: $localize`State`,\n        cellTemplate: this.stateTmpl,\n        flexGrow: 1\n      },\n      { prop: 'description', name: $localize`Issue`, flexGrow: 4 }\n    ];\n\n    this.image_syncing.columns = [\n      { prop: 'pool_name', name: $localize`Pool`, flexGrow: 2 },\n      { prop: 'name', name: $localize`Image`, flexGrow: 2 },\n      {\n        prop: 'state',\n        name: $localize`State`,\n        cellTemplate: this.stateTmpl,\n        flexGrow: 1\n      },\n      {\n        prop: 'syncing_percent',\n        name: $localize`Progress`,\n        cellTemplate: this.progressTmpl,\n        flexGrow: 2\n      },\n      { prop: 'bytes_per_second', name: $localize`Bytes per second`, flexGrow: 2 },\n      {\n        prop: 'entries_behind_primary',\n        name: $localize`Entries behind primary`,\n        cellTemplate: this.entriesBehindPrimaryTpl,\n        flexGrow: 2\n      }\n    ];\n\n    this.image_ready.columns = [\n      { prop: 'pool_name', name: $localize`Pool`, flexGrow: 2 },\n      { prop: 'name', name: $localize`Image`, flexGrow: 2 },\n      {\n        prop: 'state',\n        name: $localize`State`,\n        cellTemplate: this.stateTmpl,\n        flexGrow: 1\n      },\n      { prop: 'description', name: $localize`Description`, flexGrow: 4 }\n    ];\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      this.image_error.data = data.content_data.image_error;\n      this.image_syncing.data = data.content_data.image_syncing;\n      this.image_ready.data = data.content_data.image_ready;\n      this.tableStatus = new TableStatusViewCache(data.status);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  refresh() {\n    this.rbdMirroringService.refresh();\n  }\n}\n","export class PoolEditPeerResponseModel {\n  cluster_name: string;\n  client_id: string;\n  mon_host: string;\n  key: string;\n  uuid: string;\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>\n      {mode, select, edit {Edit} other {Add}} pool mirror peer\n    </h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"editPeerForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"editPeerForm\"\n          novalidate>\n      <p>\n        <span i18n>{mode, select, edit {Edit} other {Add}} the pool\n        mirror peer attributes for pool <kbd>{{ poolName }}</kbd> and click\n        <kbd>Submit</kbd>.</span>\n      </p>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"clusterName\"\n                        [invalid]=\"editPeerForm.controls['clusterName'].invalid && (editPeerForm.controls['clusterName'].dirty)\"\n                        [invalidText]=\"clusterNameError\"\n                        cdRequiredField=\"Cluster Name\"\n                        i18n>Cluster Name\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Name...\"\n                 i18n-placeholder\n                 id=\"clusterName\"\n                 name=\"clusterName\"\n                 formControlName=\"clusterName\"\n                 [invalid]=\"editPeerForm.controls['clusterName'].invalid && (editPeerForm.controls['clusterName'].dirty)\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #clusterNameError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('clusterName', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('clusterName', formDir, 'invalidClusterName')\"\n                i18n>The cluster name is not valid.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"clientID\"\n                        [invalid]=\"editPeerForm.controls['clientID'].invalid && (editPeerForm.controls['clientID'].dirty)\"\n                        [invalidText]=\"clientIDError\"\n                        cdRequiredField=\"CephX ID\"\n                        i18n>CephX ID\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"CephX ID...\"\n                 i18n-placeholder\n                 id=\"clientID\"\n                 name=\"clientID\"\n                 formControlName=\"clientID\"\n                 [invalid]=\"editPeerForm.controls['clientID'].invalid && (editPeerForm.controls['clientID'].dirty)\">\n        </cds-text-label>\n        <ng-template #clientIDError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('clientID', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('clientID', formDir, 'invalidClientID')\"\n                i18n>The CephX ID is not valid.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"monAddr\"\n                        [invalid]=\"editPeerForm.controls['monAddr'].invalid && (editPeerForm.controls['monAddr'].dirty)\"\n                        [invalidText]=\"monAddrError\"\n                        i18n>Monitor Addresses\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Comma-delimited addresses...\"\n                 i18n-placeholder\n                 id=\"monAddr\"\n                 name=\"monAddr\"\n                 formControlName=\"monAddr\"\n                 [invalid]=\"editPeerForm.controls['monAddr'].invalid && (editPeerForm.controls['monAddr'].dirty)\">\n        </cds-text-label>\n        <ng-template #monAddrError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('monAddr', formDir, 'invalidMonAddr')\"\n                i18n>The monitory address is not valid.</span>\n        </ng-template>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"key\"\n                        [invalid]=\"editPeerForm.controls['key'].invalid && (editPeerForm.controls['key'].dirty)\"\n                        [invalidText]=\"keyError\"\n                        i18n>CephX Key\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Base64-encoded key...\"\n                 i18n-placeholder\n                 id=\"key\"\n                 name=\"key\"\n                 formControlName=\"key\"\n                 [invalid]=\"editPeerForm.controls['key'].invalid && (editPeerForm.controls['key'].dirty)\">\n        </cds-text-label>\n        <ng-template #keyError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editPeerForm.showError('key', formDir, 'invalidKey')\"\n                i18n>CephX key must be base64 encoded.</span>\n        </ng-template>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"update()\"\n                        [form]=\"editPeerForm\"\n                        [submitText]=\"actionLabels.SUBMIT\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { AbstractControl, UntypedFormControl, Validators } from '@angular/forms';\n\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { PoolEditPeerResponseModel } from './pool-edit-peer-response.model';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-pool-edit-peer-modal',\n  templateUrl: './pool-edit-peer-modal.component.html',\n  styleUrls: ['./pool-edit-peer-modal.component.scss']\n})\nexport class PoolEditPeerModalComponent extends BaseModal implements OnInit {\n  editPeerForm: CdFormGroup;\n  bsConfig = {\n    containerClass: 'theme-default'\n  };\n  pattern: string;\n\n  response: PoolEditPeerResponseModel;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private rbdMirroringService: RbdMirroringService,\n    private taskWrapper: TaskWrapperService,\n\n    @Inject('poolName') public poolName: string,\n    @Optional() @Inject('peerUUID') public peerUUID = '',\n    @Optional() @Inject('mode') public mode = ''\n  ) {\n    super();\n    this.createForm();\n  }\n\n  createForm() {\n    this.editPeerForm = new CdFormGroup({\n      clusterName: new UntypedFormControl('', {\n        validators: [Validators.required, this.validateClusterName]\n      }),\n      clientID: new UntypedFormControl('', {\n        validators: [Validators.required, this.validateClientID]\n      }),\n      monAddr: new UntypedFormControl('', {\n        validators: [this.validateMonAddr]\n      }),\n      key: new UntypedFormControl('', {\n        validators: [this.validateKey]\n      })\n    });\n  }\n\n  ngOnInit() {\n    this.pattern = `${this.poolName}/${this.peerUUID}`;\n    if (this.mode === 'edit') {\n      this.rbdMirroringService\n        .getPeer(this.poolName, this.peerUUID)\n        .subscribe((resp: PoolEditPeerResponseModel) => {\n          this.setResponse(resp);\n        });\n    }\n  }\n\n  validateClusterName(control: AbstractControl) {\n    if (!control.value.match(/^[\\w\\-_]*$/)) {\n      return { invalidClusterName: { value: control.value } };\n    }\n\n    return undefined;\n  }\n\n  validateClientID(control: AbstractControl) {\n    if (!control.value.match(/^(?!client\\.)[\\w\\-_.]*$/)) {\n      return { invalidClientID: { value: control.value } };\n    }\n\n    return undefined;\n  }\n\n  validateMonAddr(control: AbstractControl) {\n    if (!control.value.match(/^[,; ]*([\\w.\\-_\\[\\]]+(:[\\d]+)?[,; ]*)*$/)) {\n      return { invalidMonAddr: { value: control.value } };\n    }\n\n    return undefined;\n  }\n\n  validateKey(control: AbstractControl) {\n    try {\n      if (control.value === '' || !!atob(control.value)) {\n        return null;\n      }\n    } catch (error) {}\n    return { invalidKey: { value: control.value } };\n  }\n\n  setResponse(response: PoolEditPeerResponseModel) {\n    this.response = response;\n    this.editPeerForm.get('clusterName').setValue(response.cluster_name);\n    this.editPeerForm.get('clientID').setValue(response.client_id);\n    this.editPeerForm.get('monAddr').setValue(response.mon_host);\n    this.editPeerForm.get('key').setValue(response.key);\n  }\n\n  update() {\n    const request = new PoolEditPeerResponseModel();\n    request.cluster_name = this.editPeerForm.getValue('clusterName');\n    request.client_id = this.editPeerForm.getValue('clientID');\n    request.mon_host = this.editPeerForm.getValue('monAddr');\n    request.key = this.editPeerForm.getValue('key');\n\n    let action;\n    if (this.mode === 'edit') {\n      action = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('rbd/mirroring/peer/edit', {\n          pool_name: this.poolName\n        }),\n        call: this.rbdMirroringService.updatePeer(this.poolName, this.peerUUID, request)\n      });\n    } else {\n      action = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('rbd/mirroring/peer/add', {\n          pool_name: this.poolName\n        }),\n        call: this.rbdMirroringService.addPeer(this.poolName, request)\n      });\n    }\n\n    action.subscribe({\n      error: () => this.editPeerForm.setErrors({ cdSubmitButton: true }),\n      complete: () => {\n        this.rbdMirroringService.refresh();\n        this.closeModal();\n      }\n    });\n  }\n}\n","<cd-table [data]=\"data\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"name\"\n          forceIdentifier=\"true\"\n          [autoReload]=\"-1\"\n          (fetchData)=\"refresh()\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\"\n          [status]=\"tableStatus\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n\n<ng-template #healthTmpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <span [ngClass]=\"row.health_color | mirrorHealthColor\">{{ value }}</span>\n</ng-template>\n<ng-template #localTmpl>\n  <span i18n\n        i18n-ngbTooltip\n        ngbTooltip=\"Local image count\"># Local</span>\n</ng-template>\n<ng-template #remoteTmpl>\n  <span i18n\n        i18n-ngbTooltip\n        ngbTooltip=\"Remote image count\"># Remote</span>\n</ng-template>\n<router-outlet name=\"modal\"></router-outlet>\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Observable, Subscriber, Subscription } from 'rxjs';\n\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { PoolEditPeerModalComponent } from '../pool-edit-peer-modal/pool-edit-peer-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\nconst BASE_URL = '/block/mirroring';\n@Component({\n  selector: 'cd-mirroring-pools',\n  templateUrl: './pool-list.component.html',\n  styleUrls: ['./pool-list.component.scss']\n})\nexport class PoolListComponent implements OnInit, OnDestroy {\n  @ViewChild('healthTmpl', { static: true })\n  healthTmpl: TemplateRef<any>;\n  @ViewChild('localTmpl', { static: true })\n  localTmpl: TemplateRef<any>;\n  @ViewChild('remoteTmpl', { static: true })\n  remoteTmpl: TemplateRef<any>;\n\n  subs: Subscription;\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n\n  data: [];\n  columns: {};\n\n  tableStatus = new TableStatusViewCache();\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdMirroringService: RbdMirroringService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private router: Router\n  ) {\n    this.data = [];\n    this.permission = this.authStorageService.getPermissions().rbdMirroring;\n\n    const editModeAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.editModeModal(),\n      name: $localize`Edit Mode`,\n      canBePrimary: () => true\n    };\n    const addPeerAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      name: $localize`Add Peer`,\n      click: () => this.editPeersModal('add'),\n      disable: () => !this.selection.first() || this.selection.first().mirror_mode === 'disabled',\n      visible: () => !this.getPeerUUID(),\n      canBePrimary: () => false\n    };\n    const editPeerAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.exchange,\n      name: $localize`Edit Peer`,\n      click: () => this.editPeersModal('edit'),\n      visible: () => !!this.getPeerUUID()\n    };\n    const deletePeerAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      name: $localize`Delete Peer`,\n      click: () => this.deletePeersModal(),\n      visible: () => !!this.getPeerUUID()\n    };\n    this.tableActions = [editModeAction, addPeerAction, editPeerAction, deletePeerAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      { prop: 'name', name: $localize`Name`, flexGrow: 2 },\n      { prop: 'mirror_mode', name: $localize`Mode`, flexGrow: 2 },\n      { prop: 'leader_id', name: $localize`Leader`, flexGrow: 2 },\n      {\n        prop: 'image_local_count',\n        name: $localize`# Local`,\n        headerTemplate: this.localTmpl,\n        flexGrow: 2\n      },\n      {\n        prop: 'image_remote_count',\n        name: $localize`# Remote`,\n        headerTemplate: this.remoteTmpl,\n        flexGrow: 2\n      },\n      {\n        prop: 'health',\n        name: $localize`Health`,\n        cellTemplate: this.healthTmpl,\n        flexGrow: 1\n      }\n    ];\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      this.data = data.content_data.pools;\n      this.tableStatus = new TableStatusViewCache(data.status);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  refresh() {\n    this.rbdMirroringService.refresh();\n  }\n\n  editModeModal() {\n    this.router.navigate([\n      BASE_URL,\n      { outlets: { modal: [URLVerbs.EDIT, this.selection.first().name] } }\n    ]);\n  }\n\n  editPeersModal(mode: string) {\n    const initialState = {\n      poolName: this.selection.first().name,\n      mode: mode\n    };\n    if (mode === 'edit') {\n      initialState['peerUUID'] = this.getPeerUUID();\n    }\n    this.modalService.show(PoolEditPeerModalComponent, initialState);\n  }\n\n  deletePeersModal() {\n    const poolName = this.selection.first().name;\n    const peerUUID = this.getPeerUUID();\n\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: $localize`mirror peer`,\n      itemNames: [`${poolName} (${peerUUID})`],\n      submitActionObservable: () =>\n        new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rbd/mirroring/peer/delete', {\n                pool_name: poolName\n              }),\n              call: this.rbdMirroringService.deletePeer(poolName, peerUUID)\n            })\n            .subscribe({\n              error: (resp) => observer.error(resp),\n              complete: () => {\n                this.rbdMirroringService.refresh();\n                observer.complete();\n              }\n            });\n        })\n    });\n  }\n\n  getPeerUUID(): any {\n    const selection = this.selection.first();\n    const pool = this.data.find((o) => selection && selection.name === o['name']);\n    if (pool && pool['peer_uuids']) {\n      return pool['peer_uuids'][0];\n    }\n\n    return undefined;\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<form name=\"rbdmirroringForm\"\n      #formDir=\"ngForm\"\n      [formGroup]=\"rbdmirroringForm\"\n      novalidate>\n  <div class=\"form-item\">\n    <div cdsCol\n         [columnNumbers]=\"{md: 4}\"\n         class=\"d-flex\">\n      <cds-text-label for=\"siteName\"\n                      i18n>Site Name\n        <div class=\"cds-input-group\">\n          <input type=\"text\"\n                 id=\"siteName\"\n                 name=\"siteName\"\n                 formControlName=\"siteName\"\n                 [attr.disabled]=\"!editing ? true : null\"\n                 cdsText>\n          <cds-icon-button kind=\"ghost\"\n                           size=\"md\"\n                           (click)=\"updateSiteName()\"\n                           [title]=\"editing ? 'Save' : 'Edit'\">\n            <svg [cdsIcon]=\"icons.edit\"\n                 [size]=\"icons.size32\"\n                 class=\"cds--btn__icon\"\n                 *ngIf=\"!editing\"></svg>\n            <svg [cdsIcon]=\"icons.check\"\n                 [size]=\"icons.size32\"\n                 class=\"cds--btn__icon\"\n                 *ngIf=\"editing\"></svg>\n          </cds-icon-button>\n          <cd-copy-2-clipboard-button [source]=\"siteName\"\n                                      [byId]=\"false\">\n          </cd-copy-2-clipboard-button>\n        </div>\n      </cds-text-label>\n    </div>\n    <div cdsCol=\"{md:5}\">\n      <div class=\"d-flex flex-row-reverse gap-3\">\n        <ng-container *ngFor=\"let action of tableActions\">\n          <button type=\"button\"\n                  [cdsButton]=\"action.buttonKind\"\n                  [title]=\"action.name\"\n                  (click)=\"action.click($event)\"\n                  [disabled]=\"action.disable()\"\n                  [attr.aria-label]=\"action.name\"\n                  [attr.data-testid]=\"action.name\"\n                  [preserveFragment]=\"action.preserveFragment ? '' : null\">\n            <span i18n>{{ action.name }}</span>\n            <svg class=\"cds--btn__icon\"\n                 [cdsIcon]=\"action.icon\"\n                 size=\"16\"></svg>\n          </button>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</form>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <legend i18n>Daemons</legend>\n    <div>\n      <cd-mirroring-daemons>\n      </cd-mirroring-daemons>\n    </div>\n  </div>\n\n  <div class=\"col-sm-6\">\n    <legend i18n>Pools</legend>\n\n    <div>\n      <cd-mirroring-pools>\n      </cd-mirroring-pools>\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <legend i18n>Images</legend>\n    <div>\n      <cd-mirroring-images>\n      </cd-mirroring-images>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ViewCacheStatus } from '~/app/shared/enum/view-cache-status.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { BootstrapCreateModalComponent } from '../bootstrap-create-modal/bootstrap-create-modal.component';\nimport { BootstrapImportModalComponent } from '../bootstrap-import-modal/bootstrap-import-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-mirroring',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.scss']\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  rbdmirroringForm: CdFormGroup;\n  permission: Permission;\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  modalRef: any;\n  peersExist = true;\n  siteName: any;\n  status: ViewCacheStatus;\n  private subs = new Subscription();\n  editing = false;\n\n  icons = Icons;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdMirroringService: RbdMirroringService,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    this.permission = this.authStorageService.getPermissions().rbdMirroring;\n\n    const createBootstrapAction: CdTableAction = {\n      permission: 'update',\n      icon: 'document--add',\n      click: () => this.createBootstrapModal(),\n      name: $localize`Create Bootstrap Token`,\n      canBePrimary: () => true,\n      disable: () => false,\n      buttonKind: 'primary'\n    };\n    const importBootstrapAction: CdTableAction = {\n      permission: 'update',\n      icon: 'document--import',\n      click: () => this.importBootstrapModal(),\n      name: $localize`Import Bootstrap Token`,\n      disable: () => false,\n      buttonKind: 'tertiary'\n    };\n    this.tableActions = [createBootstrapAction, importBootstrapAction];\n  }\n\n  ngOnInit() {\n    this.createForm();\n    this.subs.add(this.rbdMirroringService.startPolling());\n    this.subs.add(\n      this.rbdMirroringService.subscribeSummary((data) => {\n        this.status = data.content_data.status;\n        this.peersExist = !!data.content_data.pools.find((o: Pool) => o['peer_uuids'].length > 0);\n      })\n    );\n    this.rbdMirroringService.getSiteName().subscribe((response: any) => {\n      this.siteName = response.site_name;\n      this.rbdmirroringForm.get('siteName').setValue(this.siteName);\n    });\n  }\n\n  private createForm() {\n    this.rbdmirroringForm = new CdFormGroup({\n      siteName: new UntypedFormControl({ value: '', disabled: true })\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  updateSiteName() {\n    if (this.editing) {\n      const action = this.taskWrapper.wrapTaskAroundCall({\n        task: new FinishedTask('rbd/mirroring/site_name/edit', {}),\n        call: this.rbdMirroringService.setSiteName(this.rbdmirroringForm.getValue('siteName'))\n      });\n\n      action.subscribe({\n        complete: () => {\n          this.rbdMirroringService.refresh();\n        }\n      });\n    }\n    this.editing = !this.editing;\n  }\n\n  createBootstrapModal() {\n    const initialState = {\n      siteName: this.siteName\n    };\n    this.modalRef = this.modalService.show(BootstrapCreateModalComponent, initialState);\n  }\n\n  importBootstrapModal() {\n    const initialState = {\n      siteName: this.siteName\n    };\n    this.modalRef = this.modalService.show(BootstrapImportModalComponent, initialState);\n  }\n}\n","export class PoolEditModeResponseModel {\n  mirror_mode: string;\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Edit pool mirror mode</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"editModeForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"editModeForm\"\n          novalidate>\n      <p>\n        <ng-container i18n>To edit the mirror mode for pool&nbsp;\n        <kbd>{{ poolName }}</kbd>, select a new mode from the list and click&nbsp;\n        <kbd>Update</kbd>.</ng-container>\n      </p>\n\n      <div class=\"form-item\">\n        <cds-select label=\"Mode\"\n                    for=\"mirrorMode\"\n                    formControlName=\"mirrorMode\"\n                    name=\"mirrorMode\"\n                    id=\"mirrorMode\"\n                    [invalid]=\"editModeForm.controls['mirrorMode'].invalid && (editModeForm.controls['mirrorMode'].dirty)\"\n                    [invalidText]=\"mirrorModeError\"\n                    cdRequiredField=\"Mode\"\n                    i18n>\n          <option *ngFor=\"let mirrorMode of mirrorModes\"\n                  [value]=\"mirrorMode.id\">{{ mirrorMode.name }}</option>\n        </cds-select>\n        <ng-template #mirrorModeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"editModeForm.showError('mirrorMode', formDir, 'cannotDisable')\"\n                i18n>Peer clusters must be removed prior to disabling mirror.</span>\n        </ng-template>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"update()\"\n                        [form]=\"editModeForm\"\n                        [submitText]=\"actionLabels.UPDATE\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Location } from '@angular/common';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { PoolEditModeResponseModel } from './pool-edit-mode-response.model';\nimport { BaseModal } from 'carbon-components-angular';\n\n@Component({\n  selector: 'cd-pool-edit-mode-modal',\n  templateUrl: './pool-edit-mode-modal.component.html',\n  styleUrls: ['./pool-edit-mode-modal.component.scss']\n})\nexport class PoolEditModeModalComponent extends BaseModal implements OnInit, OnDestroy {\n  poolName: string;\n  open = false;\n  subs: Subscription;\n\n  editModeForm: CdFormGroup;\n  bsConfig = {\n    containerClass: 'theme-default'\n  };\n  pattern: string;\n\n  response: PoolEditModeResponseModel;\n  peerExists = false;\n\n  mirrorModes: Array<{ id: string; name: string }> = [\n    { id: 'disabled', name: $localize`Disabled` },\n    { id: 'pool', name: $localize`Pool` },\n    { id: 'image', name: $localize`Image` }\n  ];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private rbdMirroringService: RbdMirroringService,\n    private taskWrapper: TaskWrapperService,\n    private route: ActivatedRoute,\n    private location: Location\n  ) {\n    super();\n    this.createForm();\n  }\n\n  createForm() {\n    this.editModeForm = new CdFormGroup({\n      mirrorMode: new UntypedFormControl('', {\n        validators: [Validators.required, this.validateMode.bind(this)]\n      })\n    });\n  }\n\n  ngOnInit() {\n    this.open = this.route.outlet === 'modal';\n    this.route.params.subscribe((params: { pool_name: string }) => {\n      this.poolName = params.pool_name;\n    });\n    this.pattern = `${this.poolName}`;\n    this.rbdMirroringService.getPool(this.poolName).subscribe((resp: PoolEditModeResponseModel) => {\n      this.setResponse(resp);\n    });\n\n    this.subs = this.rbdMirroringService.subscribeSummary((data) => {\n      this.peerExists = false;\n      const poolData = data.content_data.pools;\n      const pool = poolData.find((o: any) => this.poolName === o['name']);\n      this.peerExists = pool && pool['peer_uuids'].length;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  validateMode(control: AbstractControl) {\n    if (control.value === 'disabled' && this.peerExists) {\n      return { cannotDisable: { value: control.value } };\n    }\n    return null;\n  }\n\n  setResponse(response: PoolEditModeResponseModel) {\n    this.editModeForm.get('mirrorMode').setValue(response.mirror_mode);\n  }\n\n  update() {\n    const request = new PoolEditModeResponseModel();\n    request.mirror_mode = this.editModeForm.getValue('mirrorMode');\n\n    const action = this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/mirroring/pool/edit', {\n        pool_name: this.poolName\n      }),\n      call: this.rbdMirroringService.updatePool(this.poolName, request)\n    });\n\n    action.subscribe({\n      error: () => this.editModeForm.setErrors({ cdSubmitButton: true }),\n      complete: () => {\n        this.rbdMirroringService.refresh();\n        this.location.back();\n      }\n    });\n  }\n\n  closeModal(): void {\n    this.location.back();\n  }\n}\n","export class RbdModel {\n  id: string;\n  unique_id: string;\n  name: string;\n  pool_name: string;\n  namespace: string;\n  image_format: RBDImageFormat;\n\n  cdExecuting: string;\n}\n\nexport enum RBDImageFormat {\n  V1 = 1,\n  V2 = 2\n}\n","export enum RbdFormMode {\n  editing = 'editing',\n  cloning = 'cloning',\n  copying = 'copying'\n}\n","import { RbdConfigurationEntry } from '~/app/shared/models/configuration';\n\nexport class RbdFormCloneRequestModel {\n  child_pool_name: string;\n  child_namespace: string;\n  child_image_name: string;\n  obj_size: number;\n  features: Array<string> = [];\n  stripe_unit: number;\n  stripe_count: number;\n  data_pool: string;\n  configuration?: RbdConfigurationEntry[];\n}\n","import { RbdConfigurationEntry } from '~/app/shared/models/configuration';\n\nexport class RbdFormCopyRequestModel {\n  dest_pool_name: string;\n  dest_namespace: string;\n  dest_image_name: string;\n  snapshot_name: string;\n  obj_size: number;\n  features: Array<string> = [];\n  stripe_unit: number;\n  stripe_count: number;\n  data_pool: string;\n  configuration: RbdConfigurationEntry[];\n}\n","import { RbdConfigurationEntry } from '~/app/shared/models/configuration';\n\nexport class RbdFormModel {\n  name: string;\n  pool_name: string;\n  namespace: string;\n  data_pool: string;\n  size: number;\n\n  /* Striping */\n  obj_size: number;\n  stripe_unit: number;\n  stripe_count: number;\n\n  /* Configuration */\n  configuration: RbdConfigurationEntry[];\n\n  /* Deletion process */\n  source?: string;\n\n  enable_mirror?: boolean;\n  mirror_mode?: string;\n\n  schedule_interval: string;\n  start_time: string;\n}\n","import { RbdFormModel } from './rbd-form.model';\n\nexport class RbdFormCreateRequestModel extends RbdFormModel {\n  features: Array<string> = [];\n}\n","import { RbdConfigurationEntry } from '~/app/shared/models/configuration';\n\nexport class RbdFormEditRequestModel {\n  name: string;\n  size: number;\n  features: Array<string> = [];\n  configuration: RbdConfigurationEntry[];\n\n  enable_mirror?: boolean;\n  mirror_mode?: string;\n  primary?: boolean;\n  force?: boolean;\n  schedule_interval: string;\n  remove_scheduling? = false;\n  image_mirror_mode?: string;\n}\n","export const RBDActionHelpers = {\n  moveToTrash: $localize`Move an image to the trash. Images, even ones actively in-use by clones, can be moved to the trash and deleted at a later time.`,\n  delete: $localize`Delete an rbd image (including all data blocks). If the image has snapshots, this fails and nothing is deleted.`,\n  copy: $localize`Copy the content of a source image into the newly created destination image`,\n  flatten: $localize`If the image is a clone, copy all shared blocks from the parent snapshot and make the child independent of the parent, severing the link between parent snap and child. `,\n  enableMirroring: $localize`Mirroring needs to be enabled on the image to perform this action`,\n  clonedSnapshot: $localize`This RBD has cloned snapshots. Please delete related RBDs before deleting this RBD`,\n  secondayImageDelete: $localize`The image cannot be deleted as it is secondary`,\n  primaryImageResync: $localize`Primary RBD images cannot be resynced`,\n  invalidNameDisable: $localize`This RBD image has an invalid name and can't be managed by ceph.`,\n  removingStatus: $localize`Action not possible for an RBD in status 'Removing'`,\n  journalTooltipText: $localize`'Ensures reliable replication by logging changes before updating the image, but doubles write time, impacting performance. Not recommended for high-speed data processing tasks.`,\n  snapshotTooltipText: $localize`This mode replicates RBD images between clusters using snapshots, efficiently copying data changes but requiring complete delta syncing during failover. Ideal for less demanding tasks due to its less granular approach compared to journaling.`\n};\n","<div cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <ng-container *cdFormLoading=\"loading\">\n    <form name=\"rbdForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"rbdForm\"\n          novalidate>\n\n      <div i18n=\"form title\"\n           class=\"form-header\">{{ action | titlecase }} {{ resource | upperFirst }}\n        <cd-help-text>\n          <div *ngIf=\"action === 'Copy'\">{{copyMessage}}\n          </div>\n        </cd-help-text>\n      </div>\n\n      <!-- Parent -->\n      <div class=\"form-item\"\n           *ngIf=\"rbdForm.getValue('parent')\">\n        <cds-text-label for=\"parent\"\n                        i18n>{{ action | titlecase }} from\n          <input cdsText\n                 type=\"text\"\n                 id=\"parent\"\n                 name=\"parent\"\n                 formControlName=\"parent\"\n                 autofocus>\n        </cds-text-label>\n      </div>\n\n      <!-- Name -->\n      <div class=\"form-item\">\n        <cds-text-label [invalid]=\"!rbdForm.controls['name'].valid && (rbdForm.controls['name'].dirty)\"\n                        [invalidText]=\"nameError\"\n                        for=\"name\"\n                        i18n\n                        cdRequiredField=\"Name\">Name\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Name...\"\n                 id=\"name\"\n                 name=\"name\"\n                 formControlName=\"name\"\n                 [invalid]=\"!rbdForm.controls['name'].valid && (rbdForm.controls['name'].dirty)\"\n                 autofocus>\n        </cds-text-label>\n        <ng-template #nameError>\n          <span *ngIf=\"rbdForm.showError('name', formDir, 'required')\">\n            <ng-container i18n>This field is required.</ng-container>\n          </span>\n          <span *ngIf=\"rbdForm.showError('name', formDir, 'pattern')\">\n            <ng-container i18n>'/' and '&#64;' are not allowed.</ng-container>\n          </span>\n        </ng-template>\n      </div>\n\n      <!-- Pool -->\n      <div class=\"form-item\"\n           (change)=\"onPoolChange($event.target.value)\">\n        <cds-text-label for=\"pool\"\n                        i18n\n                        *ngIf=\"mode === 'editing' || !poolPermission.read\">Pool\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Pool name...\"\n                 id=\"pool\"\n                 name=\"pool\"\n                 formControlName=\"pool\">\n        </cds-text-label>\n        <cds-select label=\"Pool\"\n                    for=\"pool\"\n                    name=\"pool\"\n                    id=\"pool\"\n                    formControlName=\"pool\"\n                    cdRequiredField=\"Pool\"\n                    [invalid]=\"!rbdForm.controls['pool'].valid && (rbdForm.controls['pool'].dirty)\"\n                    [invalidText]=\"poolError\"\n                    *ngIf=\"mode !== 'editing' && poolPermission.read\">\n          <option *ngIf=\"pools === null\"\n                  [ngValue]=\"null\"\n                  i18n>Loading...</option>\n          <option *ngIf=\"pools !== null && pools.length === 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- No block pools available --</option>\n          <option *ngIf=\"pools !== null && pools.length > 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- Select a pool --</option>\n          <option *ngFor=\"let pool of pools\"\n                  [value]=\"pool.pool_name\">{{ pool.pool_name }}</option>\n        </cds-select>\n        <ng-template #poolError>\n          <span *ngIf=\"rbdForm.showError('pool', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Mirroring -->\n      <div class=\"form-item\">\n        <cds-checkbox id=\"mirroring\"\n                      name=\"mirroring\"\n                      formControlName=\"mirroring\"\n                      (checkedChange)=\"setMirrorMode()\"\n                      i18n>Mirroring\n          <cd-help-text>Allow data to be asynchronously mirrored between two Ceph clusters</cd-help-text>\n\n        </cds-checkbox>\n        <cd-alert-panel *ngIf=\"showMirrorDisableMessage\"\n                        spacingClass=\"mt-2\"\n                        [showTitle]=\"false\"\n                        type=\"info\">Mirroring can not be disabled on <b>&nbsp;Pool&nbsp;</b> mirror mode.\n                                    You need to change the mirror mode to enable this option.\n        </cd-alert-panel>\n        <cd-alert-panel *ngIf=\"currentPoolMirrorMode === 'disabled'\"\n                        type=\"info\"\n                        [showTitle]=\"false\"\n                        spacingClass=\"mt-2\"\n                        actionName=\"Set mode\"\n                        (action)=\"onAlertAction($event)\">\n            You need to set&nbsp;<b>mirror mode</b>&nbsp;in the selected pool to enable mirroring.\n        </cd-alert-panel>\n      </div>\n\n      <!-- Mirroring Modes -->\n      <div *ngIf=\"mirroring && currentPoolMirrorMode !== 'disabled'\"\n           class=\"form-item\">\n        <cds-radio-group formControlName=\"mirroringMode\"\n                         name=\"mirroringMode\">\n          <cds-radio *ngFor=\"let option of mirroringOptions\"\n                     [value]=\"option.value\"\n                     [id]=\"option.value\"\n                     (change)=\"setExclusiveLock()\"\n                     [disabled]=\"shouldDisable(option.value)\">\n            {{ option.value | titlecase }}\n            <cd-helper> {{ option.text}} </cd-helper>\n          </cds-radio>\n        </cds-radio-group>\n        <cd-alert-panel *ngIf=\"currentPoolMirrorMode === 'pool' && mode !== 'editing'\"\n                        type=\"info\"\n                        [showTitle]=\"false\"\n                        spacingClass=\"mt-2\"\n                        actionName=\"Set mode\"\n                        (action)=\"onAlertAction($event)\"\n                        i18n>\n          You need to set mode as&nbsp;<b>Image</b>&nbsp;in the selected pool to enable snapshot mirroring.\n        </cd-alert-panel>\n      </div>\n\n      <!-- Snapshot Schedule Interval -->\n      <div class=\"form-item\"\n           *ngIf=\"rbdForm.getValue('mirroringMode') === 'snapshot' && mirroring\">\n        <cds-text-label for=\"schedule\"\n                        helperText=\"Create Mirror-Snapshots automatically on a periodic basis. The interval can be specified in days, hours, or minutes using d, h, m suffix respectively. To create mirror snapshots, you must import or create and have available peers to mirror\"\n                        cdRequiredField=\"Schedule Interval\"\n                        [invalid]=\"!rbdForm.controls['schedule'].valid && (rbdForm.controls['schedule'].dirty)\"\n                        [invalidText]=\"scheduleError\"\n                        i18n>Schedule Interval\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"e.g., 12h or 1d or 10m\"\n                 id=\"schedule\"\n                 name=\"schedule\"\n                 formControlName=\"schedule\"\n                 [disabled]=\"(peerConfigured === false) ? true : null\"\n                 [invalid]=\"!rbdForm.controls['schedule'].valid && (rbdForm.controls['schedule'].dirty)\">\n        </cds-text-label>\n        <ng-template #scheduleError>\n          <span *ngIf=\"rbdForm.showError('schedule', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Use a dedicated pool -->\n      <div class=\"form-item\"\n           *ngIf=\"allDataPools.length > 1 || mode === 'editing'\">\n        <cds-checkbox id=\"useDataPool\"\n                      name=\"useDataPool\"\n                      formControlName=\"useDataPool\"\n                      (change)=\"onUseDataPoolChange()\"\n                      i18n>\n                      Use a dedicated data pool\n\n          <cd-help-text>Use a dedicated pool to store the image data. If not selected,\n            the image data will be stored in the same pool as the image metadata.\n          </cd-help-text>\n\n          <cd-helper *ngIf=\"allDataPools.length <= 1 && mode !== 'editing'\">\n            <span>You need more than one pool with the rbd application label use to use a dedicated data pool.</span>\n          </cd-helper>\n        </cds-checkbox>\n      </div>\n\n      <!-- Data pools -->\n      <div class=\"form-item\"\n           *ngIf=\"rbdForm.getValue('useDataPool')\">\n        <cds-select label=\"Data pool\"\n                    helperText=\"Dedicated pool that stores the object-data of the RBD\"\n                    for=\"dataPool\"\n                    name=\"dataPool\"\n                    id=\"dataPool\"\n                    [invalid]=\"!rbdForm.controls['dataPool'].valid && (rbdForm.controls['dataPool'].dirty)\"\n                    [invalidText]=\"dataPoolError\"\n                    formControlName=\"dataPool\"\n                    cdRequiredField=\"Data pool\"\n                    *ngIf=\"mode !== 'editing' && poolPermission.read\">\n          <option *ngIf=\"dataPools === null\"\n                  [ngValue]=\"null\"\n                  i18n>Loading...</option>\n          <option *ngIf=\"dataPools !== null && dataPools.length === 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- No data pools available --</option>\n          <option *ngIf=\"dataPools !== null && dataPools.length > 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- Select a data pool --</option>\n          <option *ngFor=\"let dataPool of dataPools\"\n                  [value]=\"dataPool.pool_name\">{{ dataPool.pool_name }}</option>\n        </cds-select>\n        <ng-template #dataPoolError>\n          <span *ngIf=\"rbdForm.showError('dataPool', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n        </ng-template>\n      </div>\n\n      <!-- Namespace -->\n      <!-- Skeleton-->\n      <div class=\"form-item\"\n           *ngIf=\"mode !== 'editing' && rbdForm.getValue('pool') && namespaces === null\">\n        <cds-select label=\"Namespace\"\n                    for=\"namespace\"\n                    name=\"namespace\"\n                    id=\"namespace\"\n                    [skeleton]=\"true\"\n                    formControlName=\"namespace\">\n          <option [ngValue]=\"null\"\n                  i18n>Loading...</option>\n        </cds-select>\n      </div>\n\n      <div class=\"form-item\">\n        <cds-select label=\"Namespace\"\n                    helperText=\"Namespace allows you to logically group RBD images within your Ceph Cluster.Choosing a namespace makes it easier to locate and manage related RBD images efficiently\"\n                    for=\"namespace\"\n                    name=\"namespace\"\n                    id=\"namespace\"\n                    formControlName=\"namespace\"\n                    *ngIf=\"(mode === 'editing' && rbdForm.getValue('namespace')) || mode !== 'editing' && (namespaces && namespaces.length > 0 || !poolPermission.read)\">\n          <option *ngIf=\"namespaces === null\"\n                  [ngValue]=\"null\"\n                  i18n>Loading...</option>\n          <option *ngIf=\"namespaces !== null && namespaces.length === 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- No namespaces available --</option>\n          <option *ngIf=\"namespaces !== null && namespaces.length > 0\"\n                  [ngValue]=\"null\"\n                  i18n>-- Select a namespace --</option>\n          <option *ngFor=\"let namespace of namespaces\"\n                  [value]=\"namespace\">{{ namespace }}</option>\n        </cds-select>\n      </div>\n\n      <!-- Size -->\n      <div class=\"form-item\">\n        <cds-text-label for=\"size\"\n                        i18n\n                        [invalid]=\"!rbdForm.controls['size'].valid && (rbdForm.controls['size'].dirty)\"\n                        [invalidText]=\"sizeError\"\n                        cdRequiredField=\"Size\">Size\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"e.g., 10GiB\"\n                 id=\"size\"\n                 name=\"size\"\n                 formControlName=\"size\"\n                 defaultUnit=\"GiB\"\n                 [invalid]=\"!rbdForm.controls['size'].valid && (rbdForm.controls['size'].dirty)\"\n                 cdDimlessBinary>\n        </cds-text-label>\n        <ng-template #sizeError>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"rbdForm.showError('size', formDir, 'required')\"\n                i18n>This field is required.</span>\n          <span class=\"invalid-feedback\"\n                *ngIf=\"rbdForm.showError('size', formDir, 'invalidSizeObject')\"\n                i18n>You have to increase the size.</span>\n          <span *ngIf=\"rbdForm.showError('size', formDir, 'pattern')\"\n                class=\"invalid-feedback\"\n                i18n>Size must be a number or in a valid format. eg: 5 GiB</span>\n        </ng-template>\n      </div>\n\n      <!-- Advanced Section -->\n      <cd-form-advanced-fieldset>\n        <!-- Features -->\n        <div class=\"form-item\"\n             formGroupName=\"features\">\n          <fieldset>\n            <label class=\"cds--label\"\n                   for=\"features\"\n                   i18n>Features</label>\n            <ng-container *ngFor=\"let feature of featuresList\">\n              <cds-checkbox [id]=\"feature.key\"\n                            [name]=\"feature.key\"\n                            [formControlName]=\"feature.key\"\n                            class=\"spacing-03\">\n                {{ feature.key | titlecase}}\n                <cd-help-text *ngIf=\"feature.helperText\">\n                  {{ feature.helperText}}\n                </cd-help-text>\n                <cd-alert-panel type=\"warning\"\n                                spacingClass=\"mt-2\"\n                                [showTitle]=\"false\"\n                                *ngIf=\"feature.helperHtml && rbdForm.getValue(feature.key) === false\">\n                {{ feature.helperHtml }}\n                </cd-alert-panel>\n              </cds-checkbox>\n            </ng-container>\n          </fieldset>\n        </div>\n\n        <legend class=\"cd-header\"\n                i18n>Striping</legend>\n        <!-- Object Size -->\n        <div class=\"form-item\">\n          <cds-select i18n\n                      for=\"obj_size\"\n                      label=\"Object size\"\n                      helperText=\"Objects in the Ceph Storage Cluster have a maximum configurable size (e.g., 2MB, 4MB, etc.). The object size should be large enough to accommodate many stripe units, and should be a multiple of the stripe unit.\"\n                      id=\"obj_size\"\n                      name=\"obj_size\"\n                      formControlName=\"obj_size\">\n            <option *ngFor=\"let objectSize of objectSizes\"\n                    [value]=\"objectSize\">{{ objectSize }}</option>\n          </cds-select>\n        </div>\n\n        <!-- stripingUnit -->\n        <div class=\"form-item\">\n          <cds-select i18n\n                      for=\"stripingUnit\"\n                      label=\"Stripe unit\"\n                      helperText=\"Stripes have a configurable unit size (e.g., 64kb). The Ceph Client divides the data it will write to objects into equally sized stripe units, except for the last stripe unit. A stripe width, should be a fraction of the Object Size so that an object may contain many stripe units\"\n                      id=\"stripingUnit\"\n                      name=\"stripingUnit\"\n                      formControlName=\"stripingUnit\"\n                      cdRequiredField=\"Striping Unit\"\n                      [invalid]=\"!rbdForm.controls['stripingUnit'].valid && (rbdForm.controls['stripingUnit'].dirty)\"\n                      [invalidText]=\"stripingUnitError\">\n            <option [ngValue]=\"null\">-- Select stripe unit --</option>\n            <option *ngFor=\"let objectSize of objectSizes\"\n                    [value]=\"objectSize\">{{ objectSize }}</option>\n          </cds-select>\n          <ng-template #stripingUnitError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"rbdForm.showError('stripingUnit', formDir, 'required')\"\n                  i18n>This field is required because stripe count is defined!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"rbdForm.showError('stripingUnit', formDir, 'invalidStripingUnit')\"\n                  i18n>Stripe unit is greater than object size.</span>\n          </ng-template>\n        </div>\n\n        <!-- Stripe Count -->\n        <div class=\"form-item\">\n          <cds-number i18n\n                      for=\"stripingCount\"\n                      label=\"Stripe count\"\n                      helperText=\"The Ceph Client writes a sequence of stripe units over a series of objects determined by the stripe count. The series of objects is called an object set. After the Ceph Client writes to the last object in the object set, it returns to the first object in the object set.\"\n                      id=\"stripingCount\"\n                      name=\"stripingCount\"\n                      formControlName=\"stripingCount\"\n                      cdRequiredField=\"Striping Count\"\n                      [min]=\"1\"\n                      [invalid]=\"!rbdForm.controls['stripingCount'].valid && (rbdForm.controls['stripingCount'].dirty)\"\n                      [invalidText]=\"stripingCountError\"\n                      [required]=\"true\"></cds-number>\n          <ng-template #stripingCountError>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"rbdForm.showError('stripingCount', formDir, 'required')\"\n                  i18n>This field is required because stripe unit is defined!</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"rbdForm.showError('stripingCount', formDir, 'min')\"\n                  i18n>Stripe count must be greater than 0.</span>\n          </ng-template>\n        </div>\n\n        <cd-rbd-configuration-form [form]=\"rbdForm\"\n                                   [initializeData]=\"initializeConfigData\"\n                                   (changes)=\"getDirtyConfigurationValues = $event\"></cd-rbd-configuration-form>\n      </cd-form-advanced-fieldset>\n\n      <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                            [form]=\"formDir\"\n                            [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                            wrappingClass=\"text-right\"></cd-form-button-panel>\n\n    </form>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, ValidatorFn, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport _ from 'lodash';\nimport { forkJoin, Observable, ReplaySubject } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdForm } from '~/app/shared/forms/cd-form';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport {\n  RbdConfigurationEntry,\n  RbdConfigurationSourceField\n} from '~/app/shared/models/configuration';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { RBDImageFormat, RbdModel } from '../rbd-list/rbd-model';\nimport { RbdImageFeature } from './rbd-feature.interface';\nimport { RbdFormCloneRequestModel } from './rbd-form-clone-request.model';\nimport { RbdFormCopyRequestModel } from './rbd-form-copy-request.model';\nimport { RbdFormCreateRequestModel } from './rbd-form-create-request.model';\nimport { RbdFormEditRequestModel } from './rbd-form-edit-request.model';\nimport { RbdFormMode } from './rbd-form-mode.enum';\nimport { RbdFormResponseModel } from './rbd-form-response.model';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { RBDActionHelpers } from '../rbd-contants';\n\nclass ExternalData {\n  rbd: RbdFormResponseModel;\n  defaultFeatures: string[];\n  pools: Pool[];\n}\n\n@Component({\n  selector: 'cd-rbd-form',\n  templateUrl: './rbd-form.component.html',\n  styleUrls: ['./rbd-form.component.scss']\n})\nexport class RbdFormComponent extends CdForm implements OnInit {\n  poolPermission: Permission;\n  rbdForm: CdFormGroup;\n  getDirtyConfigurationValues: (\n    includeLocalField?: boolean,\n    localField?: RbdConfigurationSourceField\n  ) => RbdConfigurationEntry[];\n\n  namespaces: Array<string> = [];\n  namespacesByPoolCache = {};\n  pools: Array<Pool> = null;\n  allPools: Array<Pool> = null;\n  dataPools: Array<Pool> = null;\n  allDataPools: Array<Pool> = [];\n  features: { [key: string]: RbdImageFeature };\n  featuresList: RbdImageFeature[] = [];\n  initializeConfigData = new ReplaySubject<{\n    initialData: RbdConfigurationEntry[];\n    sourceType: RbdConfigurationSourceField;\n  }>(1);\n\n  pool: string;\n  peerConfigured = false;\n  advancedEnabled = false;\n  public rbdFormMode = RbdFormMode;\n  mode: RbdFormMode;\n  response: RbdFormResponseModel;\n  snapName: string;\n  defaultObjectSize = '4 MiB';\n\n  mirroringOptions = [\n    {\n      value: 'journal',\n      text: RBDActionHelpers.journalTooltipText\n    },\n    {\n      value: 'snapshot',\n      text: RBDActionHelpers.snapshotTooltipText\n    }\n  ];\n  poolMirrorMode: string;\n  mirroring = false;\n  currentPoolName = '';\n  currentPoolMirrorMode = '';\n  copyMessage: string = RBDActionHelpers.copy;\n  objectSizes: Array<string> = [\n    '4 KiB',\n    '8 KiB',\n    '16 KiB',\n    '32 KiB',\n    '64 KiB',\n    '128 KiB',\n    '256 KiB',\n    '512 KiB',\n    '1 MiB',\n    '2 MiB',\n    '4 MiB',\n    '8 MiB',\n    '16 MiB',\n    '32 MiB'\n  ];\n\n  defaultStripingUnit = '4 MiB';\n\n  defaultStripingCount = 1;\n\n  action: string;\n  resource: string;\n  private rbdImage = new ReplaySubject(1);\n  private routerUrl: string;\n\n  icons = Icons;\n  currentImageMirrorMode = '';\n  showMirrorDisableMessage = false;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private route: ActivatedRoute,\n    private poolService: PoolService,\n    private rbdService: RbdService,\n    private formatter: FormatterService,\n    private taskWrapper: TaskWrapperService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    public actionLabels: ActionLabelsI18n,\n    private router: Router,\n    private rbdMirroringService: RbdMirroringService\n  ) {\n    super();\n    this.routerUrl = this.router.url;\n    this.poolPermission = this.authStorageService.getPermissions().pool;\n    this.resource = $localize`Image`;\n    this.features = {\n      'deep-flatten': {\n        desc: $localize`Deep flatten`,\n        requires: null,\n        allowEnable: false,\n        allowDisable: true,\n        helperHtml: $localize`Feature can be disabled but can't be re-enabled later`,\n        helperText: $localize`Speeds up the process of deleting a clone by removing the dependency on the parent image.`\n      },\n      layering: {\n        desc: $localize`Layering`,\n        requires: null,\n        allowEnable: false,\n        allowDisable: false,\n        helperHtml: $localize`Feature flag can't be manipulated after the image is created. Disabling this option will also disable the Protect and Clone actions on Snapshot`,\n        helperText: $localize`Allows the creation of snapshots and clones of an image.`\n      },\n      'exclusive-lock': {\n        desc: $localize`Exclusive lock`,\n        requires: null,\n        allowEnable: true,\n        allowDisable: true,\n        helperText: $localize`Ensures that only one client can write to the image at a time.`\n      },\n      'object-map': {\n        desc: $localize`Object map (requires exclusive-lock)`,\n        requires: 'exclusive-lock',\n        allowEnable: true,\n        allowDisable: true,\n        initDisabled: true,\n        helperText: $localize`Tracks which objects actually exist (have data stored on a device). Enabling object map support speeds up I/O operations for cloning, importing and exporting a sparsely populated image, and deleting.`\n      },\n      'fast-diff': {\n        desc: $localize`Fast diff (interlocked with object-map)`,\n        requires: 'object-map',\n        allowEnable: true,\n        allowDisable: true,\n        interlockedWith: 'object-map',\n        initDisabled: true,\n        helperText: $localize`Speeds up the process of comparing two images.`\n      }\n    };\n    this.featuresList = this.objToArray(this.features);\n    this.createForm();\n  }\n\n  objToArray(obj: { [key: string]: any }) {\n    return _.map(obj, (o, key) => Object.assign(o, { key: key }));\n  }\n\n  createForm() {\n    this.rbdForm = new CdFormGroup(\n      {\n        parent: new UntypedFormControl(''),\n        name: new UntypedFormControl('', {\n          validators: [Validators.required, Validators.pattern(/^[^@/]+?$/)]\n        }),\n        pool: new UntypedFormControl(null, {\n          validators: [Validators.required]\n        }),\n        namespace: new UntypedFormControl(null),\n        useDataPool: new UntypedFormControl(false),\n        dataPool: new UntypedFormControl(null),\n        size: new UntypedFormControl(null, {\n          updateOn: 'blur'\n        }),\n        obj_size: new UntypedFormControl(this.defaultObjectSize),\n        features: new CdFormGroup(\n          this.featuresList.reduce((acc: object, e) => {\n            acc[e.key] = new UntypedFormControl({ value: false, disabled: !!e.initDisabled });\n            return acc;\n          }, {})\n        ),\n        mirroring: new UntypedFormControl(false),\n        schedule: new UntypedFormControl('', {\n          validators: [\n            Validators.pattern(/^([0-9]+)d|([0-9]+)h|([0-9]+)m$/),\n            CdValidators.requiredIf({\n              mirroringMode: 'snapshot',\n              mirroring: true\n            })\n          ] // check schedule interval to be in format - 1d or 1h or 1m\n        }),\n        mirroringMode: new UntypedFormControl(''),\n        stripingUnit: new UntypedFormControl(this.defaultStripingUnit),\n        stripingCount: new UntypedFormControl(this.defaultStripingCount, {\n          updateOn: 'blur'\n        })\n      },\n      this.validateRbdForm(this.formatter)\n    );\n  }\n\n  disableForEdit() {\n    this.rbdForm.get('parent').disable();\n    this.rbdForm.get('pool').disable();\n    this.rbdForm.get('namespace').disable();\n    this.rbdForm.get('useDataPool').disable();\n    this.rbdForm.get('dataPool').disable();\n    this.rbdForm.get('obj_size').disable();\n    this.rbdForm.get('stripingUnit').disable();\n    this.rbdForm.get('stripingCount').disable();\n\n    /* RBD Image Format v1 */\n    this.rbdImage.subscribe((image: RbdModel) => {\n      if (image.image_format === RBDImageFormat.V1) {\n        this.rbdForm.get('deep-flatten').disable();\n        this.rbdForm.get('layering').disable();\n        this.rbdForm.get('exclusive-lock').disable();\n      } else {\n        if (!this.rbdForm.get('deep-flatten').value) {\n          this.rbdForm.get('deep-flatten').disable();\n        }\n        this.rbdForm.get('layering').disable();\n      }\n    });\n  }\n\n  disableForClone() {\n    this.rbdForm.get('parent').disable();\n    this.rbdForm.get('size').disable();\n  }\n\n  disableForCopy() {\n    this.rbdForm.get('parent').disable();\n    this.rbdForm.get('size').disable();\n  }\n\n  ngOnInit() {\n    this.prepareFormForAction();\n    this.gatherNeededData().subscribe(this.handleExternalData.bind(this));\n  }\n\n  setExclusiveLock() {\n    if (this.mirroring && this.rbdForm.get('mirroringMode').value === 'journal') {\n      this.rbdForm.get('exclusive-lock').setValue(true);\n      this.rbdForm.get('exclusive-lock').disable();\n    } else {\n      this.rbdForm.get('exclusive-lock').enable();\n    }\n  }\n\n  setMirrorMode() {\n    this.mirroring = !this.mirroring;\n    if (this.mirroring) {\n      this.rbdForm.get('mirroringMode').setValue(this.mirroringOptions[0].value);\n    }\n    this.setExclusiveLock();\n    this.checkPeersConfigured();\n  }\n\n  checkPeersConfigured(poolname?: string) {\n    var Poolname = poolname ? poolname : this.rbdForm.get('pool').value;\n    this.rbdMirroringService.getPeerForPool(Poolname).subscribe((resp: any) => {\n      if (resp.length > 0) {\n        this.peerConfigured = true;\n      }\n    });\n  }\n\n  setPoolMirrorMode() {\n    this.currentPoolName =\n      this.mode === this.rbdFormMode.editing\n        ? this.response?.pool_name\n        : this.rbdForm.getValue('pool');\n    if (this.currentPoolName) {\n      this.rbdMirroringService.refresh();\n      this.rbdMirroringService.subscribeSummary((data) => {\n        const pool = data.content_data.pools.find((o: any) => o.name === this.currentPoolName);\n        this.currentPoolMirrorMode = pool.mirror_mode;\n        if (this.mode === this.rbdFormMode.editing) {\n          if (this.currentPoolMirrorMode === 'pool') {\n            this.showMirrorDisableMessage = true;\n          } else {\n            this.showMirrorDisableMessage = false;\n          }\n          if (this.currentPoolMirrorMode !== 'image') {\n            this.rbdForm.get('mirroring').disable();\n            this.rbdForm.get('mirroringMode').disable();\n          }\n        } else {\n          if (pool.mirror_mode === 'disabled') {\n            this.mirroring = false;\n            this.rbdForm.get('mirroring').setValue(this.mirroring);\n            this.rbdForm.get('mirroring').disable();\n          } else {\n            this.mirroring = true;\n            this.rbdForm.get('mirroring').enable();\n            this.rbdForm.get('mirroring').setValue(this.mirroring);\n            this.rbdForm.get('mirroringMode').setValue(this.mirroringOptions[0].value);\n          }\n        }\n      });\n    } else {\n      if (this.mode !== this.rbdFormMode.editing) {\n        this.rbdForm.get('mirroring').disable();\n      }\n    }\n    this.setExclusiveLock();\n  }\n\n  private prepareFormForAction() {\n    const url = this.routerUrl;\n    if (url.startsWith('/block/rbd/edit')) {\n      this.mode = this.rbdFormMode.editing;\n      this.action = this.actionLabels.EDIT;\n      this.disableForEdit();\n    } else if (url.startsWith('/block/rbd/clone')) {\n      this.mode = this.rbdFormMode.cloning;\n      this.disableForClone();\n      this.action = this.actionLabels.CLONE;\n    } else if (url.startsWith('/block/rbd/copy')) {\n      this.mode = this.rbdFormMode.copying;\n      this.action = this.actionLabels.COPY;\n      this.disableForCopy();\n    } else {\n      this.action = this.actionLabels.CREATE;\n    }\n    _.each(this.features, (feature) => {\n      this.rbdForm\n        .get('features')\n        .get(feature.key)\n        .valueChanges.subscribe((value) => this.featureFormUpdate(feature.key, value));\n    });\n  }\n\n  private gatherNeededData(): Observable<object> {\n    const promises = {};\n    if (this.mode) {\n      // Mode is not set for creation\n      this.route.params.subscribe((params: { image_spec: string; snap: string }) => {\n        const imageSpec = ImageSpec.fromString(decodeURIComponent(params.image_spec));\n        if (params.snap) {\n          this.snapName = decodeURIComponent(params.snap);\n        }\n        promises['rbd'] = this.rbdService.get(imageSpec);\n        this.checkPeersConfigured(imageSpec.poolName);\n      });\n    } else {\n      // New image\n      promises['defaultFeatures'] = this.rbdService.defaultFeatures();\n    }\n    if (this.mode !== this.rbdFormMode.editing && this.poolPermission.read) {\n      promises['pools'] = this.poolService.list([\n        'pool_name',\n        'type',\n        'flags_names',\n        'application_metadata'\n      ]);\n    }\n    return forkJoin(promises);\n  }\n\n  private handleExternalData(data: ExternalData) {\n    this.handlePoolData(data.pools);\n    this.setPoolMirrorMode();\n\n    if (data.defaultFeatures) {\n      // Fetched only during creation\n      this.setFeatures(data.defaultFeatures);\n    }\n\n    if (data.rbd) {\n      // Not fetched for creation\n      const resp = data.rbd;\n      this.setResponse(resp, this.snapName);\n      this.rbdImage.next(resp);\n    }\n\n    this.loadingReady();\n  }\n\n  private handlePoolData(data: Pool[]) {\n    if (!data) {\n      // Not fetched while editing\n      return;\n    }\n    const pools: Pool[] = [];\n    const dataPools = [];\n    for (const pool of data) {\n      if (this.rbdService.isRBDPool(pool)) {\n        if (pool.type === 'replicated') {\n          pools.push(pool);\n          dataPools.push(pool);\n        } else if (pool.type === 'erasure' && pool.flags_names.indexOf('ec_overwrites') !== -1) {\n          dataPools.push(pool);\n        }\n      }\n    }\n    this.pools = pools;\n    this.allPools = pools;\n    this.dataPools = dataPools;\n    this.allDataPools = dataPools;\n    if (this.pools.length >= 1) {\n      const allPoolNames = this.pools.map((pool) => pool.pool_name);\n      const poolName = allPoolNames.includes('rbd') ? 'rbd' : this.pools[0].pool_name;\n      this.rbdForm.get('pool').setValue(poolName);\n      this.onPoolChange(poolName);\n    }\n    if (this.allDataPools.length <= 1) {\n      this.rbdForm.get('useDataPool').disable();\n    }\n  }\n\n  onPoolChange(selectedPoolName: string) {\n    const dataPoolControl = this.rbdForm.get('dataPool');\n    if (dataPoolControl.value === selectedPoolName) {\n      dataPoolControl.setValue(null);\n    }\n    this.dataPools = this.allDataPools\n      ? this.allDataPools.filter((dataPool: any) => {\n          return dataPool.pool_name !== selectedPoolName;\n        })\n      : [];\n    this.namespaces = null;\n    if (selectedPoolName in this.namespacesByPoolCache) {\n      this.namespaces = this.namespacesByPoolCache[selectedPoolName];\n    } else {\n      this.rbdService.listNamespaces(selectedPoolName).subscribe((namespaces: any[]) => {\n        namespaces = namespaces.map((namespace) => namespace.namespace);\n        this.namespacesByPoolCache[selectedPoolName] = namespaces;\n        this.namespaces = namespaces;\n      });\n    }\n    this.rbdForm.get('namespace').setValue(null);\n  }\n\n  onUseDataPoolChange() {\n    if (!this.rbdForm.getValue('useDataPool')) {\n      this.rbdForm.get('dataPool').setValue(null);\n      this.onDataPoolChange(null);\n    }\n  }\n\n  onDataPoolChange(selectedDataPoolName: string) {\n    const newPools = this.allPools.filter((pool: Pool) => {\n      return pool.pool_name !== selectedDataPoolName;\n    });\n    if (this.rbdForm.getValue('pool') === selectedDataPoolName) {\n      this.rbdForm.get('pool').setValue(null);\n    }\n    this.pools = newPools;\n  }\n\n  validateRbdForm(formatter: FormatterService): ValidatorFn {\n    return (formGroup: CdFormGroup) => {\n      // Data Pool\n      const useDataPoolControl = formGroup.get('useDataPool');\n      const dataPoolControl = formGroup.get('dataPool');\n      let dataPoolControlErrors = null;\n      if (useDataPoolControl.value && dataPoolControl.value == null) {\n        dataPoolControlErrors = { required: true };\n      }\n      dataPoolControl.setErrors(dataPoolControlErrors);\n      // Size\n      const sizeControl = formGroup.get('size');\n      const objectSizeControl = formGroup.get('obj_size');\n      const objectSizeInBytes = formatter.toBytes(\n        objectSizeControl.value != null ? objectSizeControl.value : this.defaultObjectSize\n      );\n      const stripingCountControl = formGroup.get('stripingCount');\n      const stripingCount =\n        stripingCountControl.value != null ? stripingCountControl.value : this.defaultStripingCount;\n      let sizeControlErrors = null;\n      if (sizeControl.value === null) {\n        sizeControlErrors = { required: true };\n      } else {\n        const sizeInBytes = formatter.toBytes(sizeControl.value);\n        if (stripingCount * objectSizeInBytes >= sizeInBytes) {\n          sizeControlErrors = { invalidSizeObject: true };\n        }\n      }\n      sizeControl.setErrors(sizeControlErrors);\n      // Striping Unit\n      const stripingUnitControl = formGroup.get('stripingUnit');\n      let stripingUnitControlErrors = null;\n      if (stripingUnitControl.value === null && stripingCountControl.value !== null) {\n        stripingUnitControlErrors = { required: true };\n      } else if (stripingUnitControl.value !== null) {\n        const stripingUnitInBytes = formatter.toBytes(stripingUnitControl.value);\n        if (stripingUnitInBytes > objectSizeInBytes) {\n          stripingUnitControlErrors = { invalidStripingUnit: true };\n        }\n      }\n      stripingUnitControl.setErrors(stripingUnitControlErrors);\n      // Striping Count\n      let stripingCountControlErrors = null;\n      if (stripingCountControl.value === null && stripingUnitControl.value !== null) {\n        stripingCountControlErrors = { required: true };\n      } else if (stripingCount < 1) {\n        stripingCountControlErrors = { min: true };\n      }\n      stripingCountControl.setErrors(stripingCountControlErrors);\n      return null;\n    };\n  }\n\n  deepBoxCheck(key: string, checked: boolean) {\n    const childFeatures = this.getDependentChildFeatures(key);\n    childFeatures.forEach((feature) => {\n      const featureControl = this.rbdForm.get(feature.key);\n      if (checked) {\n        featureControl.enable({ emitEvent: false });\n      } else {\n        featureControl.disable({ emitEvent: false });\n        featureControl.setValue(false, { emitEvent: false });\n        this.deepBoxCheck(feature.key, checked);\n      }\n\n      const featureFormGroup = this.rbdForm.get('features');\n      if (this.mode === this.rbdFormMode.editing && featureFormGroup.get(feature.key).enabled) {\n        if (this.response.features_name.indexOf(feature.key) !== -1 && !feature.allowDisable) {\n          featureFormGroup.get(feature.key).disable();\n        } else if (\n          this.response.features_name.indexOf(feature.key) === -1 &&\n          !feature.allowEnable\n        ) {\n          featureFormGroup.get(feature.key).disable();\n        }\n      }\n    });\n  }\n\n  protected getDependentChildFeatures(featureKey: string) {\n    return _.filter(this.features, (f) => f.requires === featureKey) || [];\n  }\n\n  interlockCheck(key: string, checked: boolean) {\n    // Adds a compatibility layer for Ceph cluster where the feature interlock of features hasn't\n    // been implemented yet. It disables the feature interlock for images which only have one of\n    // both interlocked features (at the time of this writing: object-map and fast-diff) enabled.\n    const feature = this.featuresList.find((f) => f.key === key);\n    if (this.response) {\n      // Ignore `create` page\n      const hasInterlockedFeature = feature.interlockedWith != null;\n      const dependentInterlockedFeature = this.featuresList.find(\n        (f) => f.interlockedWith === feature.key\n      );\n      const isOriginFeatureEnabled = !!this.response.features_name.find((e) => e === feature.key); // in this case: fast-diff\n      if (hasInterlockedFeature) {\n        const isLinkedEnabled = !!this.response.features_name.find(\n          (e) => e === feature.interlockedWith\n        ); // depends: object-map\n        if (isOriginFeatureEnabled !== isLinkedEnabled) {\n          return; // Ignore incompatible setting because it's from a previous cluster version\n        }\n      } else if (dependentInterlockedFeature) {\n        const isOtherInterlockedFeatureEnabled = !!this.response.features_name.find(\n          (e) => e === dependentInterlockedFeature.key\n        );\n        if (isOtherInterlockedFeatureEnabled !== isOriginFeatureEnabled) {\n          return; // Ignore incompatible setting because it's from a previous cluster version\n        }\n      }\n    }\n\n    if (checked) {\n      _.filter(this.features, (f) => f.interlockedWith === key).forEach((f) =>\n        this.rbdForm.get(f.key).setValue(true, { emitEvent: false })\n      );\n    } else {\n      if (feature.interlockedWith) {\n        // Don't skip emitting the event here, as it prevents `fast-diff` from\n        // becoming disabled when manually unchecked.  This is because it\n        // triggers an update on `object-map` and if `object-map` doesn't emit,\n        // `fast-diff` will not be automatically disabled.\n        this.rbdForm.get('features').get(feature.interlockedWith).setValue(false);\n      }\n    }\n  }\n\n  featureFormUpdate(key: string, checked: boolean) {\n    if (checked) {\n      const required = this.features[key].requires;\n      if (required && !this.rbdForm.getValue(required)) {\n        this.rbdForm.get(`features.${key}`).setValue(false);\n        return;\n      }\n    }\n    this.deepBoxCheck(key, checked);\n    this.interlockCheck(key, checked);\n  }\n\n  setFeatures(features: Array<string>) {\n    const featuresControl = this.rbdForm.get('features');\n    _.forIn(this.features, (feature) => {\n      if (features.indexOf(feature.key) !== -1) {\n        featuresControl.get(feature.key).setValue(true);\n      }\n      this.featureFormUpdate(feature.key, featuresControl.get(feature.key).value);\n    });\n  }\n\n  setResponse(response: RbdFormResponseModel, snapName: string) {\n    this.response = response;\n    const imageSpec = new ImageSpec(\n      response.pool_name,\n      response.namespace,\n      response.name\n    ).toString();\n    if (this.mode === this.rbdFormMode.cloning) {\n      this.rbdForm.get('parent').setValue(`${imageSpec}@${snapName}`);\n    } else if (this.mode === this.rbdFormMode.copying) {\n      if (snapName) {\n        this.rbdForm.get('parent').setValue(`${imageSpec}@${snapName}`);\n      } else {\n        this.rbdForm.get('parent').setValue(`${imageSpec}`);\n      }\n    } else if (response.parent) {\n      const parent = response.parent;\n      this.rbdForm\n        .get('parent')\n        .setValue(`${parent.pool_name}/${parent.image_name}@${parent.snap_name}`);\n    }\n    if (this.mode === this.rbdFormMode.editing) {\n      this.rbdForm.get('name').setValue(response.name);\n      if (response?.mirror_mode === 'snapshot' || response.features_name.includes('journaling')) {\n        this.mirroring = true;\n        this.rbdForm.get('mirroring').setValue(this.mirroring);\n        this.rbdForm.get('mirroringMode').setValue(response?.mirror_mode);\n        this.currentImageMirrorMode = response?.mirror_mode;\n        this.rbdForm.get('schedule').setValue(response?.schedule_interval);\n      } else {\n        this.mirroring = false;\n        this.rbdForm.get('mirroring').setValue(this.mirroring);\n      }\n      this.setPoolMirrorMode();\n    }\n    this.rbdForm.get('pool').setValue(response.pool_name);\n    this.onPoolChange(response.pool_name);\n    this.rbdForm.get('namespace').setValue(response.namespace);\n    if (response.data_pool) {\n      this.rbdForm.get('useDataPool').setValue(true);\n      this.rbdForm.get('dataPool').setValue(response.data_pool);\n    }\n    this.rbdForm.get('size').setValue(this.dimlessBinaryPipe.transform(response.size));\n    this.rbdForm.get('obj_size').setValue(this.dimlessBinaryPipe.transform(response.obj_size));\n    this.setFeatures(response.features_name);\n    this.rbdForm\n      .get('stripingUnit')\n      .setValue(this.dimlessBinaryPipe.transform(response.stripe_unit));\n    this.rbdForm.get('stripingCount').setValue(response.stripe_count);\n    /* Configuration */\n    this.initializeConfigData.next({\n      initialData: this.response.configuration,\n      sourceType: RbdConfigurationSourceField.image\n    });\n  }\n\n  createRequest() {\n    const request = new RbdFormCreateRequestModel();\n    request.pool_name = this.rbdForm.getValue('pool');\n    request.namespace = this.rbdForm.getValue('namespace');\n    request.name = this.rbdForm.getValue('name');\n    request.schedule_interval = this.rbdForm.getValue('schedule');\n    request.size = this.formatter.toBytes(this.rbdForm.getValue('size'));\n    this.addObjectSizeAndStripingToRequest(request);\n    request.configuration = this.getDirtyConfigurationValues();\n    if (this.mirroring && this.currentPoolMirrorMode === 'image') {\n      request.mirror_mode = this.rbdForm.getValue('mirroringMode');\n    }\n    return request;\n  }\n\n  private addObjectSizeAndStripingToRequest(\n    request: RbdFormCreateRequestModel | RbdFormCloneRequestModel | RbdFormCopyRequestModel\n  ) {\n    request.obj_size = this.formatter.toBytes(this.rbdForm.getValue('obj_size'));\n    _.forIn(this.features, (feature) => {\n      if (this.rbdForm.getValue(feature.key)) {\n        request.features.push(feature.key);\n      }\n    });\n\n    if (this.mirroring && this.rbdForm.getValue('mirroringMode') === 'journal') {\n      request.features.push('journaling');\n    }\n\n    /* Striping */\n    request.stripe_unit = this.formatter.toBytes(this.rbdForm.getValue('stripingUnit'));\n    request.stripe_count = this.rbdForm.getValue('stripingCount');\n    request.data_pool = this.rbdForm.getValue('dataPool');\n  }\n\n  createAction(): Observable<any> {\n    const request = this.createRequest();\n    return this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/create', {\n        pool_name: request.pool_name,\n        namespace: request.namespace,\n        image_name: request.name,\n        schedule_interval: request.schedule_interval,\n        start_time: request.start_time,\n        mirror_mode: request.mirror_mode\n      }),\n      call: this.rbdService.create(request)\n    });\n  }\n\n  editRequest() {\n    const request = new RbdFormEditRequestModel();\n    request.name = this.rbdForm.getValue('name');\n    request.schedule_interval = this.rbdForm.getValue('schedule');\n    request.enable_mirror = this.mirroring;\n    request.size = this.formatter.toBytes(this.rbdForm.getValue('size'));\n    _.forIn(this.features, (feature) => {\n      if (this.rbdForm.getValue(feature.key)) {\n        request.features.push(feature.key);\n      }\n    });\n    if (request.enable_mirror) {\n      request.image_mirror_mode = this.currentImageMirrorMode;\n      if (this.rbdForm.getValue('mirroringMode') === 'journal') {\n        request.mirror_mode = 'journal';\n        request.features.push('journaling');\n      }\n      if (this.currentPoolMirrorMode === 'image') {\n        request.mirror_mode = this.rbdForm.getValue('mirroringMode');\n      }\n    } else {\n      const index = request.features.indexOf('journaling', 0);\n      if (index > -1) {\n        request.features.splice(index, 1);\n      }\n    }\n    request.configuration = this.getDirtyConfigurationValues();\n    return request;\n  }\n\n  cloneRequest(): RbdFormCloneRequestModel {\n    const request = new RbdFormCloneRequestModel();\n    request.child_pool_name = this.rbdForm.getValue('pool');\n    request.child_namespace = this.rbdForm.getValue('namespace');\n    request.child_image_name = this.rbdForm.getValue('name');\n    this.addObjectSizeAndStripingToRequest(request);\n    request.configuration = this.getDirtyConfigurationValues(\n      true,\n      RbdConfigurationSourceField.image\n    );\n    return request;\n  }\n\n  editAction(): Observable<any> {\n    const imageSpec = new ImageSpec(\n      this.response.pool_name,\n      this.response.namespace,\n      this.response.name\n    );\n    return this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/edit', {\n        image_spec: imageSpec.toString()\n      }),\n      call: this.rbdService.update(imageSpec, this.editRequest())\n    });\n  }\n\n  cloneAction(): Observable<any> {\n    const request = this.cloneRequest();\n    const imageSpec = new ImageSpec(\n      this.response.pool_name,\n      this.response.namespace,\n      this.response.name\n    );\n    return this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/clone', {\n        parent_image_spec: imageSpec.toString(),\n        parent_snap_name: this.snapName,\n        child_pool_name: request.child_pool_name,\n        child_namespace: request.child_namespace,\n        child_image_name: request.child_image_name\n      }),\n      call: this.rbdService.cloneSnapshot(imageSpec, this.snapName, request)\n    });\n  }\n\n  copyRequest(): RbdFormCopyRequestModel {\n    const request = new RbdFormCopyRequestModel();\n    if (this.snapName) {\n      request.snapshot_name = this.snapName;\n    }\n    request.dest_pool_name = this.rbdForm.getValue('pool');\n    request.dest_namespace = this.rbdForm.getValue('namespace');\n    request.dest_image_name = this.rbdForm.getValue('name');\n    this.addObjectSizeAndStripingToRequest(request);\n    request.configuration = this.getDirtyConfigurationValues(\n      true,\n      RbdConfigurationSourceField.image\n    );\n    return request;\n  }\n\n  copyAction(): Observable<any> {\n    const request = this.copyRequest();\n    const imageSpec = new ImageSpec(\n      this.response.pool_name,\n      this.response.namespace,\n      this.response.name\n    );\n    return this.taskWrapper.wrapTaskAroundCall({\n      task: new FinishedTask('rbd/copy', {\n        src_image_spec: imageSpec.toString(),\n        dest_pool_name: request.dest_pool_name,\n        dest_namespace: request.dest_namespace,\n        dest_image_name: request.dest_image_name\n      }),\n      call: this.rbdService.copy(imageSpec, request)\n    });\n  }\n\n  shouldDisable(option: string): boolean {\n    return this.currentPoolMirrorMode === 'pool' && option === 'snapshot' ? true : null;\n  }\n\n  submit() {\n    if (!this.mode) {\n      this.rbdImage.next('create');\n    }\n    this.rbdImage\n      .pipe(\n        first(),\n        switchMap(() => {\n          if (this.mode === this.rbdFormMode.editing) {\n            return this.editAction();\n          } else if (this.mode === this.rbdFormMode.cloning) {\n            return this.cloneAction();\n          } else if (this.mode === this.rbdFormMode.copying) {\n            return this.copyAction();\n          } else {\n            return this.createAction();\n          }\n        })\n      )\n      .subscribe(\n        () => undefined,\n        () => this.rbdForm.setErrors({ cdSubmitButton: true }),\n        () => this.router.navigate(['/block/rbd'])\n      );\n  }\n\n  onAlertAction() {\n    this.router.navigate([\n      '/block/mirroring',\n      { outlets: { modal: ['edit', this.rbdForm.getValue('pool')] } }\n    ]);\n  }\n}\n","<cds-modal size=\"sm\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Move an image to trash</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"moveForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"moveForm\"\n          novalidate>\n      <cd-alert-panel type=\"warning\"\n                      *ngIf=\"hasSnapshots\"\n                      spacingClass=\"mb-2\">\n        <span i18n>This image contains snapshot(s), which will prevent it\n          from being removed after moved to trash.</span>\n      </cd-alert-panel>\n\n      <p i18n>To move <kbd>{{ imageSpecStr }}</kbd> to trash,\n        click <kbd>Move</kbd>. Optionally, you can pick an expiration date.</p>\n      <div class=\"form-item\">\n        <cds-checkbox formControlName=\"setExpiry\"\n                      id=\"setExpiry\"\n                      name=\"setExpiry\"\n                      (checkedChange)=\"toggleExpiration()\"\n                      modal-primary-focus\n                      i18n>Set expiration date</cds-checkbox>\n      </div>\n      <div class=\"form-item\"\n           *ngIf=\"setExpirationDate\">\n        <cd-date-time-picker [control]=\"moveForm.get('expiresAt')\"\n                             name=\"Protection expires at\"\n                             i18n-name></cd-date-time-picker>\n\n        <span class=\"invalid-feedback\"\n              *ngIf=\"moveForm.showError('expiresAt', formDir, 'format')\"\n              i18n>Wrong date format. Please use \"YYYY-MM-DD HH:mm:ss\".</span>\n        <span class=\"invalid-feedback\"\n              *ngIf=\"moveForm.showError('expiresAt', formDir, 'expired')\"\n              i18n>Protection has already expired. Please pick a future date or leave it empty.</span>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"moveImage()\"\n                        [form]=\"moveForm\"\n                        [submitText]=\"actionLabels.MOVE\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnInit } from '@angular/core';\n\nimport { BaseModal } from 'carbon-components-angular';\nimport moment from 'moment';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-rbd-trash-move-modal',\n  templateUrl: './rbd-trash-move-modal.component.html',\n  styleUrls: ['./rbd-trash-move-modal.component.scss']\n})\nexport class RbdTrashMoveModalComponent extends BaseModal implements OnInit {\n  imageSpec: ImageSpec;\n  imageSpecStr: string;\n  executingTasks: ExecutingTask[];\n\n  moveForm: CdFormGroup;\n  pattern: string;\n  setExpirationDate = false;\n\n  constructor(\n    private rbdService: RbdService,\n    public actionLabels: ActionLabelsI18n,\n    private fb: CdFormBuilder,\n    private taskWrapper: TaskWrapperService,\n    @Inject('poolName') public poolName: string,\n    @Inject('namespace') public namespace: string,\n    @Inject('imageName') public imageName: string,\n    @Inject('hasSnapshots') public hasSnapshots: boolean\n  ) {\n    super();\n    this.createForm();\n  }\n\n  createForm() {\n    this.moveForm = this.fb.group({\n      expiresAt: [\n        '',\n        [\n          CdValidators.custom('format', (expiresAt: string) => {\n            const result = expiresAt === '' || moment(expiresAt, 'YYYY-MM-DD HH:mm:ss').isValid();\n            return !result;\n          }),\n          CdValidators.custom('expired', (expiresAt: string) => {\n            const result = moment().isAfter(expiresAt);\n            return result;\n          })\n        ]\n      ],\n      setExpiry: [false]\n    });\n  }\n\n  ngOnInit() {\n    this.imageSpec = new ImageSpec(this.poolName, this.namespace, this.imageName);\n    this.imageSpecStr = this.imageSpec.toString();\n    this.pattern = `${this.poolName}/${this.imageName}`;\n  }\n\n  moveImage() {\n    let delay = 0;\n    const expiresAt = this.moveForm.getValue('expiresAt');\n\n    if (expiresAt) {\n      delay = moment(expiresAt, 'YYYY-MM-DD HH:mm:ss').diff(moment(), 'seconds', true);\n    }\n\n    if (delay < 0) {\n      delay = 0;\n    }\n\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('rbd/trash/move', {\n          image_spec: this.imageSpecStr\n        }),\n        call: this.rbdService.moveTrash(this.imageSpec, delay)\n      })\n      .subscribe({\n        complete: () => {\n          this.closeModal();\n        }\n      });\n  }\n\n  toggleExpiration() {\n    this.setExpirationDate = !this.setExpirationDate;\n    if (!this.setExpirationDate) {\n      this.moveForm.get('expiresAt').setValue('');\n      this.moveForm.get('expiresAt').markAsPristine();\n      this.moveForm.get('expiresAt').updateValueAndValidity();\n    }\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           (overalSelected)=\"closeModal()\">\n\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"snapshotForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"snapshotForm\"\n          novalidate>\n      <!-- Name -->\n      <div class=\"form-item\">\n        <cds-text-label label=\"Name\"\n                        i18n-label\n                        for=\"snapshotName\"\n                        i18n\n                        cdRequiredField=\"Name\"\n                        [invalid]=\"snapshotForm.controls['snapshotName'].invalid && (snapshotForm.controls['snapshotName'].dirty)\"\n                        [invalidText]=\"snapshotError\">\n          <input cdsText\n                 type=\"text\"\n                 placeholder=\"Snapshot name...\"\n                 id=\"snapshotName\"\n                 name=\"snapshotName\"\n                 formControlName=\"snapshotName\"\n                 [attr.disabled]=\"((mirroring === 'snapshot') ? true : null) && (snapshotForm.getValue('mirrorImageSnapshot') === true) ? true: null\"\n                 [invalid]=\"snapshotForm.controls['snapshotName'].invalid && (snapshotForm.controls['snapshotName'].dirty)\"\n                 autofocus>\n          <span *ngIf=\"((mirroring === 'snapshot') ? true : null) && (snapshotForm.getValue('mirrorImageSnapshot') === true) ? true: null\">\n            Snapshot mode is enabled on image <b>{{ imageName }}</b>: snapshot names are auto generated</span>\n        </cds-text-label>\n        <ng-template #snapshotError>\n          <span *ngIf=\"snapshotForm.showError('snapshotName', formDir, 'required')\"\n                class=\"invalid-feedback\"\n                i18n>This field is required.</span>\n          <span *ngIf=\"snapshotForm.showError('snapshotName', formDir, 'pattern')\"\n                class=\"invalid-feedback\"\n                i18n>The snapshot name cannot start with \".\" and cannot contain \"/\" and \"&#64;\".</span>\n        </ng-template>\n      </div>\n\n      <ng-container *ngIf=\"mirroring === 'snapshot'\">\n        <div class=\"form-item\"\n             *ngIf=\"peerConfigured$ | async as peerConfigured\">\n          <cds-checkbox id=\"mirrorImageSnapshot\"\n                        formControlName=\"mirrorImageSnapshot\"\n                        name=\"mirrorImageSnapshot\"\n                        (checkedChange)=\"onMirrorCheckBoxChange()\"\n                        [attr.disabled]=\"!peerConfigured.length > 0 ? true : null\"\n                        i18n>Mirror Image Snapshot\n          </cds-checkbox>\n        </div>\n      </ng-container>\n    </form>\n  </section>\n  <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                        [form]=\"snapshotForm\"\n                        [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n</cds-modal>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\n\nimport { BaseModal } from 'carbon-components-angular';\nimport { Observable, Subject } from 'rxjs';\nimport { RbdMirroringService } from '~/app/shared/api/rbd-mirroring.service';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TaskManagerService } from '~/app/shared/services/task-manager.service';\n\n@Component({\n  selector: 'cd-rbd-snapshot-form-modal',\n  templateUrl: './rbd-snapshot-form-modal.component.html',\n  styleUrls: ['./rbd-snapshot-form-modal.component.scss']\n})\nexport class RbdSnapshotFormModalComponent extends BaseModal implements OnInit {\n  snapshotForm: CdFormGroup;\n\n  editing = false;\n  action: string;\n  resource: string;\n\n  public onSubmit: Subject<string> = new Subject();\n\n  peerConfigured$: Observable<any>;\n\n  constructor(\n    private cdsModalService: ModalCdsService,\n    private rbdService: RbdService,\n    private taskManagerService: TaskManagerService,\n    private notificationService: NotificationService,\n    private actionLabels: ActionLabelsI18n,\n    private rbdMirrorService: RbdMirroringService,\n\n    @Inject('poolName') public poolName: string,\n    @Optional() @Inject('namespace') public namespace = '',\n    @Optional() @Inject('imageName') public imageName = '',\n    @Optional() @Inject('mirroring') public mirroring = '',\n    @Optional() @Inject('snapName') public snapName = ''\n  ) {\n    super();\n    this.action = this.actionLabels.CREATE;\n    this.resource = $localize`RBD Snapshot`;\n    this.createForm();\n  }\n\n  createForm() {\n    this.snapshotForm = new CdFormGroup({\n      snapshotName: new UntypedFormControl('', {\n        validators: [Validators.required, Validators.pattern(/^(?!\\.)[^/@]+$/)]\n      }),\n      mirrorImageSnapshot: new UntypedFormControl(false, {})\n    });\n  }\n\n  ngOnInit(): void {\n    this.peerConfigured$ = this.rbdMirrorService.getPeerForPool(this.poolName);\n  }\n\n  setSnapName(snapName: string) {\n    this.snapName = snapName;\n    this.snapshotForm.get('snapshotName').setValue(snapName);\n  }\n\n  onMirrorCheckBoxChange() {\n    if (this.snapshotForm.getValue('mirrorImageSnapshot') === true) {\n      this.snapshotForm.get('snapshotName').setValue('');\n      this.snapshotForm.get('snapshotName').clearValidators();\n    } else {\n      this.snapshotForm.get('snapshotName').setValue(this.snapName);\n      this.snapshotForm.get('snapshotName').setValidators([Validators.required]);\n      this.snapshotForm.get('snapshotName').updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Set the 'editing' flag. If set to TRUE, the modal dialog is in\n   * 'Edit' mode, otherwise in 'Create' mode.\n   * @param {boolean} editing\n   */\n  setEditing(editing: boolean = true) {\n    this.editing = editing;\n    this.action = this.editing ? this.actionLabels.RENAME : this.actionLabels.CREATE;\n  }\n\n  editAction() {\n    const snapshotName = this.snapshotForm.getValue('snapshotName');\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.imageName);\n    const finishedTask = new FinishedTask();\n    finishedTask.name = 'rbd/snap/edit';\n    finishedTask.metadata = {\n      image_spec: imageSpec.toString(),\n      snapshot_name: snapshotName\n    };\n    this.rbdService\n      .renameSnapshot(imageSpec, this.snapName, snapshotName)\n      .toPromise()\n      .then(() => {\n        this.taskManagerService.subscribe(\n          finishedTask.name,\n          finishedTask.metadata,\n          (asyncFinishedTask: FinishedTask) => {\n            this.notificationService.notifyTask(asyncFinishedTask);\n          }\n        );\n        this.cdsModalService.dismissAll();\n        this.onSubmit.next(this.snapName);\n      })\n      .catch(() => {\n        this.snapshotForm.setErrors({ cdSubmitButton: true });\n      });\n  }\n\n  createAction() {\n    const snapshotName = this.snapshotForm.getValue('snapshotName');\n    const mirrorImageSnapshot = this.snapshotForm.getValue('mirrorImageSnapshot');\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.imageName);\n    const finishedTask = new FinishedTask();\n    finishedTask.name = 'rbd/snap/create';\n    finishedTask.metadata = {\n      image_spec: imageSpec.toString(),\n      snapshot_name: snapshotName\n    };\n    this.rbdService\n      .createSnapshot(imageSpec, snapshotName, mirrorImageSnapshot)\n      .toPromise()\n      .then(() => {\n        this.taskManagerService.subscribe(\n          finishedTask.name,\n          finishedTask.metadata,\n          (asyncFinishedTask: FinishedTask) => {\n            this.notificationService.notifyTask(asyncFinishedTask);\n          }\n        );\n        this.cdsModalService.dismissAll();\n        this.onSubmit.next(snapshotName);\n      })\n      .catch(() => {\n        this.snapshotForm.setErrors({ cdSubmitButton: true });\n      });\n  }\n\n  submit() {\n    if (this.editing) {\n      this.editAction();\n    } else {\n      this.createAction();\n    }\n  }\n}\n","import { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\n\nexport class RbdSnapshotActionsModel {\n  create: CdTableAction;\n  rename: CdTableAction;\n  protect: CdTableAction;\n  unprotect: CdTableAction;\n  clone: CdTableAction;\n  copy: CdTableAction;\n  rollback: CdTableAction;\n  deleteSnap: CdTableAction;\n  ordering: CdTableAction[];\n\n  cloneFormatVersion = 1;\n\n  constructor(\n    actionLabels: ActionLabelsI18n,\n    public featuresName: string[],\n    rbdService: RbdService\n  ) {\n    rbdService.cloneFormatVersion().subscribe((version: number) => {\n      this.cloneFormatVersion = version;\n    });\n\n    this.create = {\n      permission: 'create',\n      icon: Icons.add,\n      name: actionLabels.CREATE\n    };\n    this.rename = {\n      permission: 'update',\n      icon: Icons.edit,\n      name: actionLabels.RENAME,\n      disable: (selection: CdTableSelection) =>\n        this.disableForMirrorSnapshot(selection) || !selection.hasSingleSelection\n    };\n    this.protect = {\n      permission: 'update',\n      icon: Icons.lock,\n      visible: (selection: CdTableSelection) =>\n        selection.hasSingleSelection && !selection.first().is_protected,\n      name: actionLabels.PROTECT,\n      disable: (selection: CdTableSelection) =>\n        this.disableForMirrorSnapshot(selection) ||\n        this.getProtectDisableDesc(selection, this.featuresName)\n    };\n    this.unprotect = {\n      permission: 'update',\n      icon: Icons.unlock,\n      visible: (selection: CdTableSelection) =>\n        selection.hasSingleSelection && selection.first().is_protected,\n      name: actionLabels.UNPROTECT,\n      disable: (selection: CdTableSelection) => this.disableForMirrorSnapshot(selection)\n    };\n    this.clone = {\n      permission: 'create',\n      canBePrimary: (selection: CdTableSelection) => selection.hasSingleSelection,\n      disable: (selection: CdTableSelection) =>\n        this.getCloneDisableDesc(selection) || this.disableForMirrorSnapshot(selection),\n      icon: Icons.clone,\n      name: actionLabels.CLONE\n    };\n    this.copy = {\n      permission: 'create',\n      canBePrimary: (selection: CdTableSelection) => selection.hasSingleSelection,\n      disable: (selection: CdTableSelection) =>\n        !selection.hasSingleSelection ||\n        selection.first().cdExecuting ||\n        this.disableForMirrorSnapshot(selection),\n      icon: Icons.copy,\n      name: actionLabels.COPY\n    };\n    this.rollback = {\n      permission: 'update',\n      icon: Icons.undo,\n      name: actionLabels.ROLLBACK,\n      disable: (selection: CdTableSelection) =>\n        this.disableForMirrorSnapshot(selection) || !selection.hasSingleSelection\n    };\n    this.deleteSnap = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      disable: (selection: CdTableSelection) => {\n        const first = selection.first();\n        return (\n          !selection.hasSingleSelection ||\n          first.cdExecuting ||\n          first.is_protected ||\n          this.disableForMirrorSnapshot(selection)\n        );\n      },\n      name: actionLabels.DELETE\n    };\n\n    this.ordering = [\n      this.create,\n      this.rename,\n      this.protect,\n      this.unprotect,\n      this.clone,\n      this.copy,\n      this.rollback,\n      this.deleteSnap\n    ];\n  }\n\n  getProtectDisableDesc(selection: CdTableSelection, featuresName: string[]): boolean | string {\n    if (selection.hasSingleSelection && !selection.first().cdExecuting) {\n      if (!featuresName?.includes('layering')) {\n        return $localize`The layering feature needs to be enabled on parent image`;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  getCloneDisableDesc(selection: CdTableSelection): boolean | string {\n    if (selection.hasSingleSelection && !selection.first().cdExecuting) {\n      if (this.cloneFormatVersion === 1 && !selection.first().is_protected) {\n        return $localize`Snapshot must be protected in order to clone.`;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  disableForMirrorSnapshot(selection: CdTableSelection) {\n    return (\n      selection.hasSingleSelection &&\n      selection.first().mirror_mode === 'snapshot' &&\n      selection.first().name.includes('.mirror.')\n    );\n  }\n}\n","export class RbdSnapshotModel {\n  id: number;\n  name: string;\n  size: number;\n  timestamp: string;\n  is_protected: boolean;\n\n  cdExecuting: string;\n}\n","<cd-table [data]=\"data\"\n          columnMode=\"flex\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\"\n          [columns]=\"columns\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n</cd-table>\n\n<ng-template #rollbackTpl\n             let-value>\n  <ng-container i18n>You are about to rollback</ng-container>\n  <strong> {{ value.snapName }}</strong>.\n</ng-template>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\n\nimport moment from 'moment';\nimport { of } from 'rxjs';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { CdHelperClass } from '~/app/shared/classes/cd-helper.class';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { Task } from '~/app/shared/models/task';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { SummaryService } from '~/app/shared/services/summary.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskManagerService } from '~/app/shared/services/task-manager.service';\nimport { RbdSnapshotFormModalComponent } from '../rbd-snapshot-form/rbd-snapshot-form-modal.component';\nimport { RbdSnapshotActionsModel } from './rbd-snapshot-actions.model';\nimport { RbdSnapshotModel } from './rbd-snapshot.model';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\n\n@Component({\n  selector: 'cd-rbd-snapshot-list',\n  templateUrl: './rbd-snapshot-list.component.html',\n  styleUrls: ['./rbd-snapshot-list.component.scss'],\n  providers: [TaskListService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RbdSnapshotListComponent implements OnInit, OnChanges {\n  @Input()\n  snapshots: RbdSnapshotModel[] = [];\n  @Input()\n  featuresName: string[];\n  @Input()\n  poolName: string;\n  @Input()\n  namespace: string;\n  @Input()\n  mirroring: string;\n  @Input()\n  primary: boolean;\n  @Input()\n  rbdName: string;\n  @ViewChild('nameTpl')\n  nameTpl: TemplateRef<any>;\n  @ViewChild('rollbackTpl', { static: true })\n  rollbackTpl: TemplateRef<any>;\n\n  permission: Permission;\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n  rbdTableActions: RbdSnapshotActionsModel;\n  imageSpec: ImageSpec;\n\n  data: RbdSnapshotModel[];\n\n  columns: CdTableColumn[];\n\n  modalRef: any;\n\n  builders = {\n    'rbd/snap/create': (metadata: any) => {\n      const model = new RbdSnapshotModel();\n      model.name = metadata['snapshot_name'];\n      return model;\n    }\n  };\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private cdDatePipe: CdDatePipe,\n    private rbdService: RbdService,\n    private taskManagerService: TaskManagerService,\n    private notificationService: NotificationService,\n    private summaryService: SummaryService,\n    private taskListService: TaskListService,\n    private actionLabels: ActionLabelsI18n,\n    private cdr: ChangeDetectorRef,\n    private cdsModalService: ModalCdsService\n  ) {\n    this.permission = this.authStorageService.getPermissions().rbdImage;\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        cellTransformation: CellTemplate.executing,\n        flexGrow: 2\n      },\n      {\n        name: $localize`Size`,\n        prop: 'size',\n        flexGrow: 1,\n        cellClass: 'text-right',\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`Used`,\n        prop: 'disk_usage',\n        flexGrow: 1,\n        cellClass: 'text-right',\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`State`,\n        prop: 'is_protected',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.badge,\n        customTemplateConfig: {\n          map: {\n            true: { value: $localize`PROTECTED`, class: 'badge-success' },\n            false: { value: $localize`UNPROTECTED`, class: 'badge-info' }\n          }\n        }\n      },\n      {\n        name: $localize`Created`,\n        prop: 'timestamp',\n        flexGrow: 1,\n        pipe: this.cdDatePipe\n      }\n    ];\n\n    this.imageSpec = new ImageSpec(this.poolName, this.namespace, this.rbdName);\n    this.rbdTableActions = new RbdSnapshotActionsModel(\n      this.actionLabels,\n      this.featuresName,\n      this.rbdService\n    );\n    this.rbdTableActions.create.click = () => this.openCreateSnapshotModal();\n    this.rbdTableActions.rename.click = () => this.openEditSnapshotModal();\n    this.rbdTableActions.protect.click = () => this.toggleProtection();\n    this.rbdTableActions.unprotect.click = () => this.toggleProtection();\n    const getImageUri = () =>\n      this.selection.first() &&\n      `${this.imageSpec.toStringEncoded()}/${encodeURIComponent(this.selection.first().name)}`;\n    this.rbdTableActions.clone.routerLink = () => `/block/rbd/clone/${getImageUri()}`;\n    this.rbdTableActions.copy.routerLink = () => `/block/rbd/copy/${getImageUri()}`;\n    this.rbdTableActions.rollback.click = () => this.rollbackModal();\n    this.rbdTableActions.deleteSnap.click = () => this.deleteSnapshotModal();\n\n    this.tableActions = this.rbdTableActions.ordering;\n\n    const itemFilter = (entry: any, task: Task) => {\n      return entry.name === task.metadata['snapshot_name'];\n    };\n\n    const taskFilter = (task: Task) => {\n      return (\n        ['rbd/snap/create', 'rbd/snap/delete', 'rbd/snap/edit', 'rbd/snap/rollback'].includes(\n          task.name\n        ) && this.imageSpec.toString() === task.metadata['image_spec']\n      );\n    };\n\n    this.taskListService.init(\n      () => of(this.snapshots),\n      null,\n      (items) => {\n        const hasChanges = CdHelperClass.updateChanged(this, {\n          data: items\n        });\n        if (hasChanges) {\n          this.cdr.detectChanges();\n          this.data = [...this.data];\n        }\n      },\n      () => {\n        const hasChanges = CdHelperClass.updateChanged(this, {\n          data: this.snapshots\n        });\n        if (hasChanges) {\n          this.cdr.detectChanges();\n          this.data = [...this.data];\n        }\n      },\n      taskFilter,\n      itemFilter,\n      this.builders\n    );\n  }\n\n  ngOnChanges() {\n    if (this.columns) {\n      this.imageSpec = new ImageSpec(this.poolName, this.namespace, this.rbdName);\n      if (this.rbdTableActions) {\n        this.rbdTableActions.featuresName = this.featuresName;\n      }\n      this.taskListService.fetch();\n    }\n  }\n\n  private openSnapshotModal(taskName: string, snapName: string = null) {\n    const modalVariables = {\n      poolName: this.poolName,\n      imageName: this.rbdName,\n      namespace: this.namespace,\n      mirroring: this.mirroring\n    };\n    this.modalRef = this.cdsModalService.show(RbdSnapshotFormModalComponent, modalVariables);\n    if (snapName) {\n      this.modalRef.setEditing();\n    } else {\n      // Auto-create a name for the snapshot: <image_name>_<timestamp_ISO_8601>\n      // https://en.wikipedia.org/wiki/ISO_8601\n      snapName = `${this.rbdName}_${moment().toISOString(true)}`;\n    }\n    this.modalRef.setSnapName(snapName);\n    this.modalRef.onSubmit.subscribe((snapshotName: string) => {\n      const executingTask = new ExecutingTask();\n      executingTask.name = taskName;\n      executingTask.metadata = {\n        image_spec: this.imageSpec.toString(),\n        snapshot_name: snapshotName\n      };\n      this.summaryService.addRunningTask(executingTask);\n    });\n  }\n\n  openCreateSnapshotModal() {\n    this.openSnapshotModal('rbd/snap/create');\n  }\n\n  openEditSnapshotModal() {\n    this.openSnapshotModal('rbd/snap/edit', this.selection.first().name);\n  }\n\n  toggleProtection() {\n    const snapshotName = this.selection.first().name;\n    const isProtected = this.selection.first().is_protected;\n    const finishedTask = new FinishedTask();\n    finishedTask.name = 'rbd/snap/edit';\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.rbdName);\n    finishedTask.metadata = {\n      image_spec: imageSpec.toString(),\n      snapshot_name: snapshotName\n    };\n    this.rbdService\n      .protectSnapshot(imageSpec, snapshotName, !isProtected)\n      .toPromise()\n      .then(() => {\n        const executingTask = new ExecutingTask();\n        executingTask.name = finishedTask.name;\n        executingTask.metadata = finishedTask.metadata;\n        this.summaryService.addRunningTask(executingTask);\n        this.taskManagerService.subscribe(\n          finishedTask.name,\n          finishedTask.metadata,\n          (asyncFinishedTask: FinishedTask) => {\n            this.notificationService.notifyTask(asyncFinishedTask);\n          }\n        );\n      });\n  }\n\n  _asyncTask(task: string, taskName: string, snapshotName: string) {\n    const finishedTask = new FinishedTask();\n    finishedTask.name = taskName;\n    finishedTask.metadata = {\n      image_spec: new ImageSpec(this.poolName, this.namespace, this.rbdName).toString(),\n      snapshot_name: snapshotName\n    };\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.rbdName);\n    this.rbdService[task](imageSpec, snapshotName)\n      .toPromise()\n      .then(() => {\n        const executingTask = new ExecutingTask();\n        executingTask.name = finishedTask.name;\n        executingTask.metadata = finishedTask.metadata;\n        this.summaryService.addRunningTask(executingTask);\n        this.cdsModalService.dismissAll();\n        this.taskManagerService.subscribe(\n          executingTask.name,\n          executingTask.metadata,\n          (asyncFinishedTask: FinishedTask) => {\n            this.notificationService.notifyTask(asyncFinishedTask);\n          }\n        );\n      })\n      .catch(() => {\n        this.cdsModalService.stopLoadingSpinner(this.modalRef.snapshotForm);\n      });\n  }\n\n  rollbackModal() {\n    const snapshotName = this.selection.selected[0].name;\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.rbdName).toString();\n    const initialState = {\n      titleText: $localize`RBD snapshot rollback`,\n      buttonText: $localize`Rollback`,\n      bodyTpl: this.rollbackTpl,\n      bodyData: {\n        snapName: `${imageSpec}@${snapshotName}`\n      },\n      onSubmit: () => {\n        this._asyncTask('rollbackSnapshot', 'rbd/snap/rollback', snapshotName);\n      }\n    };\n\n    this.modalRef = this.cdsModalService.show(ConfirmationModalComponent, initialState);\n  }\n\n  deleteSnapshotModal() {\n    const snapshotName = this.selection.selected[0].name;\n    this.modalRef = this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: $localize`RBD snapshot`,\n      itemNames: [snapshotName],\n      submitAction: () => this._asyncTask('deleteSnapshot', 'rbd/snap/delete', snapshotName)\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n}\n","<ng-template #usageNotAvailableTooltipTpl>\n  <ng-container i18n>Only available for RBD images with <strong>fast-diff</strong> enabled</ng-container>\n</ng-template>\n\n<ng-container *ngIf=\"selection && selection.source !== 'REMOVING'\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"rbd-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <table class=\"cds--data-table--sort cds--data-table--no-border cds--data-table cds--data-table--md\"\n               data-testid=\"rbd-details-table\">\n          <tbody>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold w-25\"\n                  cdstabledata>Name</td>\n              <td class=\"w-75\">{{ selection.name }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\"\n                  cdstabledata>Pool</td>\n              <td>{{ selection.pool_name }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Data Pool</td>\n              <td>{{ selection.data_pool | empty }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Created</td>\n              <td>{{ selection.timestamp | cdDate }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Size</td>\n              <td>{{ selection.size | dimlessBinary }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Objects</td>\n              <td>{{ selection.num_objs | dimless }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Object size</td>\n              <td>{{ selection.obj_size | dimlessBinary }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Features</td>\n              <td>\n                <span *ngFor=\"let feature of selection.features_name\">\n                  <span class=\"badge badge-dark me-2\">{{ feature }}</span>\n                </span>\n              </td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Provisioned</td>\n              <td>\n                <span *ngIf=\"selection.features_name?.indexOf('fast-diff') === -1\">\n                  <span class=\"form-text text-muted\"\n                        [ngbTooltip]=\"usageNotAvailableTooltipTpl\"\n                        placement=\"top\"\n                        i18n>N/A</span>\n                </span>\n                <span *ngIf=\"selection.features_name?.indexOf('fast-diff') !== -1\">\n                  {{ selection.disk_usage | dimlessBinary }}\n                </span>\n              </td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Total provisioned</td>\n              <td>\n                <span *ngIf=\"selection.features_name?.indexOf('fast-diff') === -1\">\n                  <span class=\"form-text text-muted\"\n                        [ngbTooltip]=\"usageNotAvailableTooltipTpl\"\n                        placement=\"top\"\n                        i18n>N/A</span>\n                </span>\n                <span *ngIf=\"selection.features_name?.indexOf('fast-diff') !== -1\">\n                  {{ selection.total_disk_usage | dimlessBinary }}\n                </span>\n              </td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Striping unit</td>\n              <td>{{ selection.stripe_unit | dimlessBinary }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Striping count</td>\n              <td>{{ selection.stripe_count }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Parent</td>\n              <td>\n                <span *ngIf=\"selection.parent\">{{ selection.parent.pool_name }}<span\n                        *ngIf=\"selection.parent.pool_namespace\">/{{ selection.parent.pool_namespace }}</span>/{{ selection.parent.image_name }}&#64;{{ selection.parent.snap_name }}</span>\n                <span *ngIf=\"!selection.parent\">-</span>\n              </td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Block name prefix</td>\n              <td>{{ selection.block_name_prefix }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Order</td>\n              <td>{{ selection.order }}</td>\n            </tr>\n            <tr cdstablerow>\n              <td i18n\n                  class=\"bold\">Format Version</td>\n              <td>{{ selection.image_format }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"snapshots\">\n      <a ngbNavLink\n         i18n>Snapshots</a>\n      <ng-template ngbNavContent>\n        <cd-rbd-snapshot-list [snapshots]=\"selection.snapshots\"\n                              [featuresName]=\"selection.features_name\"\n                              [poolName]=\"selection.pool_name\"\n                              [primary]=\"selection.primary\"\n                              [namespace]=\"selection.namespace\"\n                              [mirroring]=\"selection.mirror_mode\"\n                              [rbdName]=\"selection.name\"></cd-rbd-snapshot-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"configuration\">\n      <a ngbNavLink\n         i18n>Configuration</a>\n      <ng-template ngbNavContent>\n        <cd-rbd-configuration-table [data]=\"selection['configuration']\"></cd-rbd-configuration-table>\n      </ng-template>\n    </ng-container>\n\n    <ng-container ngbNavItem=\"performance\">\n      <a ngbNavLink\n         i18n>Performance</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"RBD details\"\n                    [grafanaPath]=\"rbdDashboardUrl\"\n                    [type]=\"'metrics'\"\n                    uid=\"YhCYGcuZz\"\n                    grafanaStyle=\"one\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n<ng-container *ngIf=\"selection && selection.source === 'REMOVING'\">\n  <cd-alert-panel type=\"warning\"\n                  i18n>Information can not be displayed for RBD in status 'Removing'.</cd-alert-panel>\n</ng-container>\n\n<ng-template #poolConfigurationSourceTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <ng-container *ngIf=\"+value; else global\">\n    <strong i18n\n            i18n-ngbTooltip\n            ngbTooltip=\"This setting overrides the global value\">Image</strong>\n  </ng-container>\n  <ng-template #global>\n    <span i18n\n          i18n-ngbTooltip\n          ngbTooltip=\"This is the global value. No value for this option has been set for this image.\">Global</span>\n  </ng-template>\n</ng-template>\n","import { Component, Input, OnChanges, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap';\n\nimport { RbdFormModel } from '../rbd-form/rbd-form.model';\n\n@Component({\n  selector: 'cd-rbd-details',\n  templateUrl: './rbd-details.component.html',\n  styleUrls: ['./rbd-details.component.scss']\n})\nexport class RbdDetailsComponent implements OnChanges {\n  @Input()\n  selection: RbdFormModel;\n  @Input()\n  images: any;\n\n  @ViewChild('poolConfigurationSourceTpl', { static: true })\n  poolConfigurationSourceTpl: TemplateRef<any>;\n\n  @ViewChild(NgbNav, { static: true })\n  nav: NgbNav;\n\n  rbdDashboardUrl: string;\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.rbdDashboardUrl = `rbd-details?var-pool=${this.selection['pool_name']}&var-image=${this.selection['name']}`;\n    }\n  }\n}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/rbd\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Images</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/rbd/namespaces\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Namespaces</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/rbd/trash\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Trash</a>\n  </li>\n  <li class=\"nav-item\"\n      *ngIf=\"grafanaPermission.read\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/rbd/performance\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       [routerLinkActiveOptions]=\"{exact: true}\"\n       i18n>Overall Performance</a>\n  </li>\n</ul>\n","import { Component } from '@angular/core';\n\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\n\n@Component({\n  selector: 'cd-rbd-tabs',\n  templateUrl: './rbd-tabs.component.html',\n  styleUrls: ['./rbd-tabs.component.scss']\n})\nexport class RbdTabsComponent {\n  grafanaPermission: Permission;\n  url: string;\n\n  constructor(private authStorageService: AuthStorageService) {\n    this.grafanaPermission = this.authStorageService.getPermissions().grafana;\n  }\n}\n","<cd-rbd-tabs></cd-rbd-tabs>\n\n<cd-table #table\n          [data]=\"images\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"unique_id\"\n          [searchableObjects]=\"true\"\n          [serverSide]=\"true\"\n          [count]=\"count\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          [status]=\"tableStatus\"\n          [maxLimit]=\"25\"\n          [autoReload]=\"-1\"\n          (fetchData)=\"taskListService.fetch($event)\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n  <cd-table-actions class=\"table-actions\"\n                    [permission]=\"permission\"\n                    [selection]=\"selection\"\n                    [tableActions]=\"tableActions\">\n  </cd-table-actions>\n  <cd-rbd-details *cdTableDetail\n                  [selection]=\"expandedRow\">\n  </cd-rbd-details>\n</cd-table>\n\n<ng-template #parentTpl\n             let-value=\"data.value\">\n  <span *ngIf=\"value\">{{ value.pool_name }}<span\n          *ngIf=\"value.pool_namespace\">/{{ value.pool_namespace }}</span>/{{ value.image_name }}&#64;{{ value.snap_name }}</span>\n  <span *ngIf=\"!value\">-</span>\n</ng-template>\n\n<ng-template #mirroringTpl\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <span *ngIf=\"value?.length === 3; else probb\"\n        class=\"badge badge-info\">{{ value[0] }}</span>&nbsp;\n  <span *ngIf=\"value?.length === 3\"\n        class=\"badge badge-info\">{{ value[1] }}</span>&nbsp;\n  <span *ngIf=\"row?.primary === true\"\n        class=\"badge badge-info\"\n        i18n>primary</span>\n  <span *ngIf=\"row?.primary === false\"\n        class=\"badge badge-info\"\n        i18n>secondary</span>\n  <ng-template #probb>\n    <span class=\"badge badge-info\">{{ value }}</span>\n  </ng-template>\n</ng-template>\n\n<ng-template #ScheduleTpl\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <span *ngIf=\"value?.length === 3\"\n        class=\"badge badge-info\">{{ value[2] | cdDate  }}</span>\n</ng-template>\n\n<ng-template #flattenTpl\n             let-value>\n  You are about to flatten\n  <strong>{{ value.child }}</strong>.\n  <br>\n  <br> All blocks will be copied from parent\n  <strong>{{ value.parent }}</strong> to child\n  <strong>{{ value.child }}</strong>.\n</ng-template>\n\n<ng-template #deleteTpl\n             let-hasSnapshots=\"hasSnapshots\"\n             let-snapshots=\"snapshots\">\n  <div class=\"alert alert-warning\"\n       *ngIf=\"hasSnapshots\"\n       role=\"alert\">\n    <span i18n>Deleting this image will also delete all its snapshots.</span>\n    <br>\n    <ng-container *ngIf=\"snapshots.length > 0\">\n      <span i18n>The following snapshots are currently protected and will be removed:</span>\n      <ul>\n        <li *ngFor=\"let snapshot of snapshots\">{{ snapshot }}</li>\n      </ul>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #removingStatTpl\n             let-column=\"data.column\"\n             let-value=\"data.value\"\n             let-row=\"data.row\">\n  <i [ngClass]=\"[icons.spinner, icons.spin]\"\n     *ngIf=\"row.cdExecuting\"></i>\n    <span [ngClass]=\"column?.customTemplateConfig?.valueClass\">\n    {{ value }}\n  </span>\n  <span *ngIf=\"row.cdExecuting\"\n        [ngClass]=\"column?.customTemplateConfig?.executingClass ?\n        column.customTemplateConfig.executingClass :\n        'text-muted italic'\">\n    ({{ row.cdExecuting }})\n  </span>\n  <svg  *ngIf=\"row.source && row.source === 'REMOVING'\"\n        i18n-title\n        title=\"RBD in status 'Removing'\"\n        [cdsIcon]=\"icons.warning\"\n        [size]=\"icons.size16\"\n        class=\"cds-warning-color\"></svg>\n</ng-template>\n\n<ng-template #forcePromoteConfirmation>\n  <cd-alert-panel type=\"warning\">{{ errorMessage }}</cd-alert-panel>\n  <div class=\"m-4\"\n       i18n>\n    <strong>\n       Do you want to force the operation?\n    </strong>\n  </div>\n</ng-template>\n\n<ng-template #imageUsageTpl\n             let-row=\"data.row\">\n  <span *ngIf=\"row.features_name && (!row.features_name.includes('fast-diff') || row.mirror_mode === 'snapshot') ; else usageBar\"\n        [ngbTooltip]=\"usageTooltip\">\n    <span>-</span>\n  </span>\n  <ng-template #usageBar>\n    <cd-usage-bar *ngIf=\"row\"\n                  [total]=\"row.size\"\n                  [used]=\"row.disk_usage\"\n                  [title]=\"row.name\"\n                  decimals=\"2\">\n  </cd-usage-bar>\n  </ng-template>\n</ng-template>\n\n<ng-template #usageTooltip>\n  <div i18n\n       [innerHtml]=\"'Only available for RBD images with <strong>fast-diff</strong> enabled and without snapshot mirroring'\"></div>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { TableStatus } from '~/app/shared/classes/table-status';\nimport { ConfirmationModalComponent } from '~/app/shared/components/confirmation-modal/confirmation-modal.component';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableFetchDataContext } from '~/app/shared/models/cd-table-fetch-data-context';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { Task } from '~/app/shared/models/task';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { DimlessPipe } from '~/app/shared/pipes/dimless.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { CdTableServerSideService } from '~/app/shared/services/cd-table-server-side.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { URLBuilderService } from '~/app/shared/services/url-builder.service';\nimport { RbdFormEditRequestModel } from '../rbd-form/rbd-form-edit-request.model';\nimport { RbdParentModel } from '../rbd-form/rbd-parent.model';\nimport { RbdTrashMoveModalComponent } from '../rbd-trash-move-modal/rbd-trash-move-modal.component';\nimport { RBDImageFormat, RbdModel } from './rbd-model';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { RBDActionHelpers } from '../rbd-contants';\nimport { DeletionImpact } from '~/app/shared/enum/delete-confirmation-modal-impact.enum';\nconst BASE_URL = 'block/rbd';\n\n@Component({\n  selector: 'cd-rbd-list',\n  templateUrl: './rbd-list.component.html',\n  styleUrls: ['./rbd-list.component.scss'],\n  providers: [\n    TaskListService,\n    { provide: URLBuilderService, useValue: new URLBuilderService(BASE_URL) }\n  ]\n})\nexport class RbdListComponent extends ListWithDetails implements OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('usageTpl')\n  usageTpl: TemplateRef<any>;\n  @ViewChild('parentTpl', { static: true })\n  parentTpl: TemplateRef<any>;\n  @ViewChild('nameTpl')\n  nameTpl: TemplateRef<any>;\n  @ViewChild('ScheduleTpl', { static: true })\n  ScheduleTpl: TemplateRef<any>;\n  @ViewChild('mirroringTpl', { static: true })\n  mirroringTpl: TemplateRef<any>;\n  @ViewChild('flattenTpl', { static: true })\n  flattenTpl: TemplateRef<any>;\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n  @ViewChild('removingStatTpl', { static: true })\n  removingStatTpl: TemplateRef<any>;\n  @ViewChild('forcePromoteConfirmation', { static: true })\n  forcePromoteConfirmation: TemplateRef<any>;\n  @ViewChild('usedTmpl', { static: true })\n  usedTmpl: TemplateRef<any>;\n  @ViewChild('totalUsedTmpl', { static: true })\n  totalUsedTmpl: TemplateRef<any>;\n  @ViewChild('imageUsageTpl', { static: true })\n  imageUsageTpl: TemplateRef<any>;\n\n  permission: Permission;\n  tableActions: CdTableAction[];\n  images: any;\n  columns: CdTableColumn[];\n  retries: number;\n  tableStatus = new TableStatus('ghost');\n  selection = new CdTableSelection();\n  icons = Icons;\n  count = 0;\n  private tableContext: CdTableFetchDataContext = null;\n  errorMessage: string;\n  builders = {\n    'rbd/create': (metadata: object) =>\n      this.createRbdFromTask(metadata['pool_name'], metadata['namespace'], metadata['image_name']),\n    'rbd/delete': (metadata: object) => this.createRbdFromTaskImageSpec(metadata['image_spec']),\n    'rbd/clone': (metadata: object) =>\n      this.createRbdFromTask(\n        metadata['child_pool_name'],\n        metadata['child_namespace'],\n        metadata['child_image_name']\n      ),\n    'rbd/copy': (metadata: object) =>\n      this.createRbdFromTask(\n        metadata['dest_pool_name'],\n        metadata['dest_namespace'],\n        metadata['dest_image_name']\n      )\n  };\n  remove_scheduling: boolean;\n\n  private createRbdFromTaskImageSpec(imageSpecStr: string): RbdModel {\n    const imageSpec = ImageSpec.fromString(imageSpecStr);\n    return this.createRbdFromTask(imageSpec.poolName, imageSpec.namespace, imageSpec.imageName);\n  }\n\n  private createRbdFromTask(pool: string, namespace: string, name: string): RbdModel {\n    const model = new RbdModel();\n    model.id = '-1';\n    model.unique_id = '-1';\n    model.name = name;\n    model.namespace = namespace;\n    model.pool_name = pool;\n    model.image_format = RBDImageFormat.V2;\n    return model;\n  }\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdService: RbdService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private dimlessPipe: DimlessPipe,\n    private taskWrapper: TaskWrapperService,\n    public taskListService: TaskListService,\n    private urlBuilder: URLBuilderService,\n    public actionLabels: ActionLabelsI18n,\n    protected cdsModalService: ModalCdsService\n  ) {\n    super();\n    this.permission = this.authStorageService.getPermissions().rbdImage;\n    const getImageUri = () =>\n      this.selection.first() &&\n      new ImageSpec(\n        this.selection.first().pool_name,\n        this.selection.first().namespace,\n        this.selection.first().name\n      ).toStringEncoded();\n    const addAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      routerLink: () => this.urlBuilder.getCreate(),\n      canBePrimary: (selection: CdTableSelection) => !selection.hasSingleSelection,\n      name: this.actionLabels.CREATE\n    };\n    const editAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      routerLink: () => this.urlBuilder.getEdit(getImageUri()),\n      name: this.actionLabels.EDIT,\n      disable: (selection: CdTableSelection) =>\n        this.getRemovingStatusDesc(selection) || this.getInvalidNameDisable(selection)\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteRbdModal(),\n      name: this.actionLabels.DELETE,\n      title: RBDActionHelpers.delete,\n      disable: (selection: CdTableSelection) => this.getDeleteDisableDesc(selection)\n    };\n    const moveAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.trash,\n      title: RBDActionHelpers.moveToTrash,\n      click: () => this.trashRbdModal(),\n      name: this.actionLabels.TRASH,\n      disable: (selection: CdTableSelection) =>\n        this.getRemovingStatusDesc(selection) ||\n        this.getInvalidNameDisable(selection) ||\n        selection.first().image_format === RBDImageFormat.V1\n    };\n    const resyncAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.refresh,\n      click: () => this.resyncRbdModal(),\n      name: this.actionLabels.RESYNC,\n      disable: (selection: CdTableSelection) => this.getResyncDisableDesc(selection)\n    };\n    const copyAction: CdTableAction = {\n      permission: 'create',\n      canBePrimary: (selection: CdTableSelection) => selection.hasSingleSelection,\n      disable: (selection: CdTableSelection) =>\n        this.getRemovingStatusDesc(selection) ||\n        this.getInvalidNameDisable(selection) ||\n        !!selection.first().cdExecuting,\n      icon: Icons.copy,\n      routerLink: () => `/block/rbd/copy/${getImageUri()}`,\n      name: this.actionLabels.COPY,\n      title: RBDActionHelpers.copy\n    };\n    const flattenAction: CdTableAction = {\n      permission: 'update',\n      disable: (selection: CdTableSelection) =>\n        this.getRemovingStatusDesc(selection) ||\n        this.getInvalidNameDisable(selection) ||\n        selection.first().cdExecuting ||\n        !selection.first().parent,\n      icon: Icons.flatten,\n      click: () => this.flattenRbdModal(),\n      name: this.actionLabels.FLATTEN,\n      title: RBDActionHelpers.flatten\n    };\n\n    const removeSchedulingAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.removeSchedulingModal(),\n      name: this.actionLabels.REMOVE_SCHEDULING,\n      disable: (selection: CdTableSelection) =>\n        this.getRemovingStatusDesc(selection) ||\n        this.getInvalidNameDisable(selection) ||\n        selection.first().schedule_info === undefined\n    };\n    const promoteAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.actionPrimary(true),\n      name: this.actionLabels.PROMOTE,\n      visible: () => this.selection.first() != null && !this.selection.first().primary,\n      disable: () =>\n        this.selection.first().mirror_mode === 'Disabled' ? RBDActionHelpers.enableMirroring : ''\n    };\n    const demoteAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.edit,\n      click: () => this.actionPrimary(false),\n      name: this.actionLabels.DEMOTE,\n      visible: () => this.selection.first() != null && this.selection.first().primary,\n      disable: () =>\n        this.selection.first().mirror_mode === 'Disabled' ? RBDActionHelpers.enableMirroring : ''\n    };\n    this.tableActions = [\n      addAction,\n      editAction,\n      copyAction,\n      flattenAction,\n      resyncAction,\n      removeSchedulingAction,\n      promoteAction,\n      demoteAction,\n      moveAction,\n      deleteAction\n    ];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 2,\n        cellTemplate: this.removingStatTpl\n      },\n      {\n        name: $localize`Pool`,\n        prop: 'pool_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Namespace`,\n        prop: 'namespace',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Size`,\n        prop: 'size',\n        flexGrow: 1,\n        cellClass: 'text-right',\n        sortable: false,\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`Usage`,\n        prop: 'usage',\n        cellTemplate: this.imageUsageTpl,\n        flexGrow: 1.5\n      },\n      {\n        name: $localize`Objects`,\n        prop: 'num_objs',\n        flexGrow: 1,\n        cellClass: 'text-right',\n        sortable: false,\n        pipe: this.dimlessPipe\n      },\n      {\n        name: $localize`Object size`,\n        prop: 'obj_size',\n        flexGrow: 1,\n        cellClass: 'text-right',\n        sortable: false,\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`Parent`,\n        prop: 'parent',\n        flexGrow: 2,\n        sortable: false,\n        cellTemplate: this.parentTpl\n      },\n      {\n        name: $localize`Mirroring`,\n        prop: 'mirror_mode',\n        flexGrow: 3,\n        sortable: false,\n        cellTemplate: this.mirroringTpl\n      },\n      {\n        name: $localize`Next Scheduled Snapshot`,\n        prop: 'mirror_mode',\n        flexGrow: 3,\n        sortable: false,\n        cellTemplate: this.ScheduleTpl\n      }\n    ];\n\n    const itemFilter = (entry: Record<string, any>, task: Task) => {\n      let taskImageSpec: string;\n      switch (task.name) {\n        case 'rbd/copy':\n          taskImageSpec = new ImageSpec(\n            task.metadata['dest_pool_name'],\n            task.metadata['dest_namespace'],\n            task.metadata['dest_image_name']\n          ).toString();\n          break;\n        case 'rbd/clone':\n          taskImageSpec = new ImageSpec(\n            task.metadata['child_pool_name'],\n            task.metadata['child_namespace'],\n            task.metadata['child_image_name']\n          ).toString();\n          break;\n        case 'rbd/create':\n          taskImageSpec = new ImageSpec(\n            task.metadata['pool_name'],\n            task.metadata['namespace'],\n            task.metadata['image_name']\n          ).toString();\n          break;\n        default:\n          taskImageSpec = task.metadata['image_spec'];\n          break;\n      }\n      return (\n        taskImageSpec === new ImageSpec(entry.pool_name, entry.namespace, entry.name).toString()\n      );\n    };\n\n    const taskFilter = (task: Task) => {\n      return [\n        'rbd/clone',\n        'rbd/copy',\n        'rbd/create',\n        'rbd/delete',\n        'rbd/edit',\n        'rbd/flatten',\n        'rbd/trash/move'\n      ].includes(task.name);\n    };\n\n    this.taskListService.init(\n      (context) => this.getRbdImages(context),\n      (resp) => this.prepareResponse(resp),\n      (images) => (this.images = images),\n      () => this.onFetchError(),\n      taskFilter,\n      itemFilter,\n      this.builders\n    );\n  }\n\n  onFetchError() {\n    this.table.reset(); // Disable loading indicator.\n    this.tableStatus = new TableStatus('danger');\n  }\n\n  getRbdImages(context: CdTableFetchDataContext) {\n    if (context !== null) {\n      this.tableContext = context;\n    }\n    if (this.tableContext == null) {\n      this.tableContext = new CdTableFetchDataContext(() => undefined);\n    }\n    return this.rbdService.list(this.tableContext?.toParams());\n  }\n\n  prepareResponse(resp: any[]): any[] {\n    let images: any[] = [];\n\n    resp.forEach((pool) => {\n      images = images.concat(pool.value);\n    });\n\n    images.forEach((image) => {\n      if (image.schedule_info !== undefined) {\n        let scheduling: any[] = [];\n        const scheduleStatus = 'scheduled';\n        let nextSnapshotDate = +new Date(image.schedule_info.schedule_time);\n        const offset = new Date().getTimezoneOffset();\n        nextSnapshotDate = (nextSnapshotDate + Math.abs(offset) * 60000) / 1000;\n        scheduling.push(image.mirror_mode, scheduleStatus, nextSnapshotDate);\n        image.mirror_mode = scheduling;\n        scheduling = [];\n      }\n    });\n\n    if (images.length > 0) {\n      this.count = CdTableServerSideService.getCount(resp[0]);\n    } else {\n      this.count = 0;\n    }\n    return images;\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  deleteRbdModal() {\n    const poolName = this.selection.first().pool_name;\n    const namespace = this.selection.first().namespace;\n    const imageName = this.selection.first().name;\n    const imageSpec = new ImageSpec(poolName, namespace, imageName);\n\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      impact: DeletionImpact.high,\n      itemDescription: 'RBD',\n      itemNames: [imageSpec.imageName],\n      bodyTemplate: this.deleteTpl,\n      bodyContext: {\n        hasSnapshots: this.hasSnapshots(),\n        snapshots: this.listProtectedSnapshots()\n      },\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('rbd/delete', {\n            image_spec: imageSpec.toString()\n          }),\n          call: this.rbdService.delete(imageSpec)\n        })\n    });\n  }\n\n  resyncRbdModal() {\n    const poolName = this.selection.first().pool_name;\n    const namespace = this.selection.first().namespace;\n    const imageName = this.selection.first().name;\n    const imageSpec = new ImageSpec(poolName, namespace, imageName);\n\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'RBD',\n      itemNames: [imageSpec],\n      actionDescription: 'resync',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('rbd/edit', {\n            image_spec: imageSpec.toString()\n          }),\n          call: this.rbdService.update(imageSpec, { resync: true })\n        })\n    });\n  }\n\n  trashRbdModal() {\n    const initialState = {\n      poolName: this.selection.first().pool_name,\n      namespace: this.selection.first().namespace,\n      imageName: this.selection.first().name,\n      hasSnapshots: this.hasSnapshots()\n    };\n    this.cdsModalService.show(RbdTrashMoveModalComponent, initialState);\n  }\n\n  flattenRbd(imageSpec: ImageSpec) {\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('rbd/flatten', {\n          image_spec: imageSpec.toString()\n        }),\n        call: this.rbdService.flatten(imageSpec)\n      })\n      .subscribe({\n        complete: () => {\n          this.cdsModalService.dismissAll();\n        }\n      });\n  }\n\n  flattenRbdModal() {\n    const poolName = this.selection.first().pool_name;\n    const namespace = this.selection.first().namespace;\n    const imageName = this.selection.first().name;\n    const parent: RbdParentModel = this.selection.first().parent;\n    const parentImageSpec = new ImageSpec(\n      parent.pool_name,\n      parent.pool_namespace,\n      parent.image_name\n    );\n    const childImageSpec = new ImageSpec(poolName, namespace, imageName);\n\n    const initialState = {\n      titleText: 'RBD flatten',\n      buttonText: 'Flatten',\n      bodyTpl: this.flattenTpl,\n      bodyData: {\n        parent: `${parentImageSpec}@${parent.snap_name}`,\n        child: childImageSpec.toString()\n      },\n      onSubmit: () => {\n        this.flattenRbd(childImageSpec);\n      }\n    };\n\n    this.cdsModalService.show(ConfirmationModalComponent, initialState);\n  }\n\n  editRequest() {\n    const request = new RbdFormEditRequestModel();\n    request.remove_scheduling = !request.remove_scheduling;\n    return request;\n  }\n\n  removeSchedulingModal() {\n    const imageName = this.selection.first().name;\n\n    const imageSpec = new ImageSpec(\n      this.selection.first().pool_name,\n      this.selection.first().namespace,\n      this.selection.first().name\n    );\n\n    this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      actionDescription: 'remove scheduling on',\n      itemDescription: $localize`image`,\n      itemNames: [`${imageName}`],\n      submitActionObservable: () =>\n        new Observable((observer: Subscriber<any>) => {\n          this.taskWrapper\n            .wrapTaskAroundCall({\n              task: new FinishedTask('rbd/edit', {\n                image_spec: imageSpec.toString()\n              }),\n              call: this.rbdService.update(imageSpec, this.editRequest())\n            })\n            .subscribe({\n              error: (resp) => observer.error(resp),\n              complete: () => {\n                this.cdsModalService.dismissAll();\n              }\n            });\n        })\n    });\n  }\n\n  actionPrimary(primary: boolean) {\n    const request = new RbdFormEditRequestModel();\n    request.primary = primary;\n    request.features = null;\n    const imageSpec = new ImageSpec(\n      this.selection.first().pool_name,\n      this.selection.first().namespace,\n      this.selection.first().name\n    );\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('rbd/edit', {\n          image_spec: imageSpec.toString()\n        }),\n        call: this.rbdService.update(imageSpec, request)\n      })\n      .subscribe(\n        () => {},\n        (error) => {\n          error.preventDefault();\n          if (primary) {\n            this.errorMessage = error.error['detail'].replace(/\\[.*?\\]\\s*/, '');\n            request.force = true;\n            this.cdsModalService.show(ConfirmationModalComponent, {\n              titleText: $localize`Warning`,\n              buttonText: $localize`Enforce`,\n              warning: true,\n              bodyTpl: this.forcePromoteConfirmation,\n              onSubmit: () => {\n                this.rbdService.update(imageSpec, request).subscribe(\n                  () => {\n                    this.cdsModalService.dismissAll();\n                  },\n                  () => {\n                    this.cdsModalService.dismissAll();\n                  }\n                );\n              }\n            });\n          }\n        }\n      );\n  }\n\n  hasSnapshots() {\n    const snapshots = this.selection.first()['snapshots'] || [];\n    return snapshots.length > 0;\n  }\n\n  hasClonedSnapshots(image: object) {\n    const snapshots = image['snapshots'] || [];\n    return snapshots.some((snap: object) => snap['children'] && snap['children'].length > 0);\n  }\n\n  listProtectedSnapshots() {\n    const first = this.selection.first();\n    const snapshots = first['snapshots'];\n    return snapshots.reduce((accumulator: string[], snap: object) => {\n      if (snap['is_protected']) {\n        accumulator.push(snap['name']);\n      }\n      return accumulator;\n    }, []);\n  }\n\n  getDeleteDisableDesc(selection: CdTableSelection): string | boolean {\n    const first = selection.first();\n\n    if (first && this.hasClonedSnapshots(first)) {\n      return RBDActionHelpers.clonedSnapshot;\n    }\n    if (first && first.primary === false) {\n      return RBDActionHelpers.secondayImageDelete;\n    }\n    return (\n      this.getInvalidNameDisable(selection) ||\n      this.hasClonedSnapshots(selection.first()) ||\n      first.primary === false\n    );\n  }\n\n  getResyncDisableDesc(selection: CdTableSelection): string | boolean {\n    const first = selection.first();\n\n    if (first && this.imageIsPrimary(first)) {\n      return RBDActionHelpers.primaryImageResync;\n    }\n\n    return this.getInvalidNameDisable(selection);\n  }\n\n  imageIsPrimary(image: object) {\n    return image['primary'];\n  }\n  getInvalidNameDisable(selection: CdTableSelection): string | boolean {\n    const first = selection.first();\n\n    if (first?.name?.match(/[@/]/)) {\n      return RBDActionHelpers.invalidNameDisable;\n    }\n\n    return !selection.first() || !selection.hasSingleSelection;\n  }\n\n  getRemovingStatusDesc(selection: CdTableSelection): string | boolean {\n    const first = selection.first();\n    if (first?.source === 'REMOVING') {\n      return RBDActionHelpers.removingStatus;\n    }\n    return false;\n  }\n}\n","<cds-modal size=\"md\"\n           [open]=\"open\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>\n      Create Namespace\n  </h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n\n    <form name=\"namespaceForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"namespaceForm\"\n          novalidate>\n\n    <!-- Pool -->\n    <div class=\"form-item\">\n      <cds-select label=\"Pool\"\n                  for=\"pool\"\n                  formControlName=\"pool\"\n                  name=\"pool\"\n                  id=\"pool\"\n                  [invalid]=\"namespaceForm.controls['pool'].invalid && (namespaceForm.controls['pool'].dirty)\"\n                  [invalidText]=\"poolError\"\n                  *ngIf=\"poolPermission.read\"\n                  cdRequiredField=\"Pool\"\n                  modal-primary-focus\n                  i18n>\n\n        <option *ngIf=\"pools === null\"\n                [ngValue]=\"null\">Loading...</option>\n        <option *ngIf=\"pools !== null && pools.length === 0\"\n                [ngValue]=\"null\">-- No rbd pools available --</option>\n        <option *ngIf=\"pools !== null && pools.length > 0\"\n                [ngValue]=\"null\">-- Select a pool --</option>\n        <option *ngFor=\"let pool of pools\"\n                [value]=\"pool.pool_name\">{{ pool.pool_name }}</option>\n      </cds-select>\n      <ng-template #poolError>\n        <span *ngIf=\"namespaceForm.showError('pool', formDir, 'required')\"\n              class=\"invalid-feedback\"\n              i18n>This field is required.</span>\n      </ng-template>\n    </div>\n\n    <!-- Name -->\n    <div class=\"form-item\">\n      <cds-text-label label=\"Name\"\n                      for=\"namespace\"\n                      [invalid]=\"namespaceForm.controls['namespace'].invalid && (namespaceForm.controls['namespace'].dirty)\"\n                      [invalidText]=\"namespaceError\"\n                      cdRequiredField=\"Namespace\"\n                      i18n>Namespace\n        <input cdsText\n               type=\"text\"\n               placeholder=\"Namespace name...\"\n               id=\"namespace\"\n               name=\"namespace\"\n               formControlName=\"namespace\"\n               [invalid]=\"namespaceForm.controls['namespace'].invalid && (namespaceForm.controls['namespace'].dirty)\"\n               autofocus>\n      </cds-text-label>\n      <ng-template #namespaceError>\n        <span *ngIf=\"namespaceForm.showError('namespace', formDir, 'required')\"\n              class=\"invalid-feedback\"\n              i18n>This field is required.</span>\n        <span *ngIf=\"namespaceForm.showError('namespace', formDir, 'namespaceExists')\"\n              class=\"invalid-feedback\"\n              i18n>The namespace already exists.</span>\n      </ng-template>\n    </div>\n\n\n    </form>\n  </section>\n  <cd-form-button-panel (submitActionEvent)=\"submit()\"\n                        [form]=\"namespaceForm\"\n                        [submitText]=\"actionLabels.CREATE\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n\n</cds-modal>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  UntypedFormControl,\n  ValidationErrors,\n  ValidatorFn\n} from '@angular/forms';\n\nimport { BaseModal, ModalService } from 'carbon-components-angular';\nimport { Subject } from 'rxjs';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\n\n@Component({\n  selector: 'cd-rbd-namespace-form-modal',\n  templateUrl: './rbd-namespace-form-modal.component.html',\n  styleUrls: ['./rbd-namespace-form-modal.component.scss']\n})\nexport class RbdNamespaceFormModalComponent extends BaseModal implements OnInit {\n  poolPermission: Permission;\n  pools: Array<Pool> = null;\n  pool: string;\n  namespace: string;\n\n  namespaceForm: CdFormGroup;\n\n  editing = false;\n\n  public onSubmit: Subject<void> = new Subject();\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private notificationService: NotificationService,\n    private poolService: PoolService,\n    private rbdService: RbdService,\n    protected modalService: ModalService\n  ) {\n    super();\n    this.poolPermission = this.authStorageService.getPermissions().pool;\n    this.createForm();\n  }\n\n  createForm() {\n    this.namespaceForm = new CdFormGroup(\n      {\n        pool: new UntypedFormControl(''),\n        namespace: new UntypedFormControl('')\n      },\n      this.validator(),\n      this.asyncValidator()\n    );\n  }\n\n  validator(): ValidatorFn {\n    return (control: AbstractControl) => {\n      const poolCtrl = control.get('pool');\n      const namespaceCtrl = control.get('namespace');\n      let poolErrors = null;\n      if (!poolCtrl.value) {\n        poolErrors = { required: true };\n      }\n      poolCtrl.setErrors(poolErrors);\n      let namespaceErrors = null;\n      if (!namespaceCtrl.value) {\n        namespaceErrors = { required: true };\n      }\n      namespaceCtrl.setErrors(namespaceErrors);\n      return null;\n    };\n  }\n\n  asyncValidator(): AsyncValidatorFn {\n    return (control: AbstractControl): Promise<ValidationErrors | null> => {\n      return new Promise((resolve) => {\n        const poolCtrl = control.get('pool');\n        const namespaceCtrl = control.get('namespace');\n        this.rbdService.listNamespaces(poolCtrl.value).subscribe((namespaces: any[]) => {\n          if (namespaces.some((ns) => ns.namespace === namespaceCtrl.value)) {\n            const error = { namespaceExists: true };\n            namespaceCtrl.setErrors(error);\n            resolve(error);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    };\n  }\n\n  ngOnInit() {\n    if (this.poolPermission.read) {\n      this.poolService.list(['pool_name', 'type', 'application_metadata']).then((resp) => {\n        const pools: Pool[] = [];\n        for (const pool of resp) {\n          if (this.rbdService.isRBDPool(pool) && pool.type === 'replicated') {\n            pools.push(pool);\n          }\n        }\n        this.pools = pools;\n        if (this.pools.length === 1) {\n          const poolName = this.pools[0]['pool_name'];\n          this.namespaceForm.get('pool').setValue(poolName);\n        }\n      });\n    }\n  }\n\n  submit() {\n    const pool = this.namespaceForm.getValue('pool');\n    const namespace = this.namespaceForm.getValue('namespace');\n    const finishedTask = new FinishedTask();\n    finishedTask.name = 'rbd/namespace/create';\n    finishedTask.metadata = {\n      pool: pool,\n      namespace: namespace\n    };\n    this.rbdService\n      .createNamespace(pool, namespace)\n      .toPromise()\n      .then(() => {\n        this.modalService.destroy();\n        this.notificationService.show(\n          NotificationType.success,\n          $localize`Created namespace '${pool}/${namespace}'`\n        );\n        this.onSubmit.next();\n      })\n      .catch(() => {\n        this.namespaceForm.setErrors({ cdSubmitButton: true });\n      });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { forkJoin, Observable } from 'rxjs';\n\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { NotificationType } from '~/app/shared/enum/notification-type.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { NotificationService } from '~/app/shared/services/notification.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { RbdNamespaceFormModalComponent } from '../rbd-namespace-form/rbd-namespace-form-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-rbd-namespace-list',\n  templateUrl: './rbd-namespace-list.component.html',\n  styleUrls: ['./rbd-namespace-list.component.scss'],\n  providers: [TaskListService]\n})\nexport class RbdNamespaceListComponent implements OnInit {\n  columns: CdTableColumn[];\n  namespaces: any;\n  modalRef: NgbModalRef;\n  permission: Permission;\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdService: RbdService,\n    private poolService: PoolService,\n    private notificationService: NotificationService,\n    public actionLabels: ActionLabelsI18n,\n    private cdsModalService: ModalCdsService\n  ) {\n    this.permission = this.authStorageService.getPermissions().rbdImage;\n    const createAction: CdTableAction = {\n      permission: 'create',\n      icon: Icons.add,\n      click: () => this.createModal(),\n      name: this.actionLabels.CREATE\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteModal(),\n      name: this.actionLabels.DELETE,\n      disable: () => this.getDeleteDisableDesc()\n    };\n    this.tableActions = [createAction, deleteAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`Namespace`,\n        prop: 'namespace',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Pool`,\n        prop: 'pool',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Total images`,\n        prop: 'num_images',\n        flexGrow: 1\n      }\n    ];\n    this.refresh();\n  }\n\n  refresh() {\n    this.poolService.list(['pool_name', 'type', 'application_metadata']).then((pools: any) => {\n      pools = pools.filter(\n        (pool: any) => this.rbdService.isRBDPool(pool) && pool.type === 'replicated'\n      );\n      const promises: Observable<any>[] = [];\n      pools.forEach((pool: any) => {\n        promises.push(this.rbdService.listNamespaces(pool['pool_name']));\n      });\n      if (promises.length > 0) {\n        forkJoin(promises).subscribe((data: Array<Array<string>>) => {\n          const result: any[] = [];\n          for (let i = 0; i < data.length; i++) {\n            const namespaces = data[i];\n            const pool_name = pools[i]['pool_name'];\n            namespaces.forEach((namespace: any) => {\n              result.push({\n                id: `${pool_name}/${namespace.namespace}`,\n                pool: pool_name,\n                namespace: namespace.namespace,\n                num_images: namespace.num_images\n              });\n            });\n          }\n          this.namespaces = result;\n        });\n      } else {\n        this.namespaces = [];\n      }\n    });\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  createModal() {\n    const modalRef = this.cdsModalService.show(RbdNamespaceFormModalComponent);\n    modalRef.onSubmit?.subscribe(() => this.refresh());\n  }\n\n  deleteModal() {\n    const pool = this.selection.first().pool;\n    const namespace = this.selection.first().namespace;\n    const modalRef = this.cdsModalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Namespace',\n      itemNames: [`${pool}/${namespace}`],\n      submitAction: () =>\n        this.rbdService.deleteNamespace(pool, namespace).subscribe(\n          () => {\n            this.notificationService.show(\n              NotificationType.success,\n              $localize`Deleted namespace '${pool}/${namespace}'`\n            );\n            this.cdsModalService.dismissAll();\n            this.refresh();\n          },\n          () => {\n            this.cdsModalService.stopLoadingSpinner(modalRef.deletionForm);\n          }\n        )\n    });\n  }\n\n  getDeleteDisableDesc(): string | boolean {\n    const first = this.selection.first();\n\n    if (first?.num_images > 0) {\n      return $localize`Namespace contains images`;\n    }\n\n    return !this.selection?.first();\n  }\n}\n","<cd-rbd-tabs></cd-rbd-tabs>\n\n<cd-table [data]=\"namespaces\"\n          (fetchData)=\"refresh()\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"id\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions class=\"btn-group\"\n                      [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n</cd-table>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-rbd-performance',\n  templateUrl: './rbd-performance.component.html',\n  styleUrls: ['./rbd-performance.component.scss']\n})\nexport class RbdPerformanceComponent {}\n","<cd-rbd-tabs></cd-rbd-tabs>\n\n<cd-grafana i18n-title\n            title=\"RBD overview\"\n            [grafanaPath]=\"'rbd-overview?'\"\n            [type]=\"'metrics'\"\n            uid=\"41FrpeUiz\"\n            grafanaStyle=\"two\">\n</cd-grafana>\n","<cds-modal size=\"md\"\n           [open]=\"true\"\n           [hasScrollingContent]=\"true\"\n           (overlaySelected)=\"closeModal()\">\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Purge Trash</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"purgeForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"purgeForm\"\n          novalidate>\n      <p i18n>To purge, select&nbsp;\n        <kbd>All</kbd>&nbsp;\n        or one pool and click&nbsp;\n        <kbd>Purge</kbd>.&nbsp;</p>\n\n      <div class=\"form-item\">\n        <cds-select label=\"Pool\"\n                    for=\"poolName\"\n                    id=\"poolName\"\n                    formControlName=\"poolName\"\n                    *ngIf=\"poolPermission.read\">\n          <option value=\"\"\n                  i18n>All</option>\n          <option *ngFor=\"let pool of pools\"\n                  [value]=\"pool\">{{ pool }}</option>\n        </cds-select>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"purge()\"\n                        [form]=\"purgeForm\"\n                        [submitText]=\"actionLabels.PURGE\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n\n</cds-modal>\n","import { Component, OnInit } from '@angular/core';\n\nimport { BaseModal } from 'carbon-components-angular';\n\nimport { Pool } from '~/app/ceph/pool/pool';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-rbd-trash-purge-modal',\n  templateUrl: './rbd-trash-purge-modal.component.html',\n  styleUrls: ['./rbd-trash-purge-modal.component.scss']\n})\nexport class RbdTrashPurgeModalComponent extends BaseModal implements OnInit {\n  poolPermission: Permission;\n  purgeForm: CdFormGroup;\n  pools: any[];\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdService: RbdService,\n    public actionLabels: ActionLabelsI18n,\n    private fb: CdFormBuilder,\n    private poolService: PoolService,\n    private taskWrapper: TaskWrapperService\n  ) {\n    super();\n    this.poolPermission = this.authStorageService.getPermissions().pool;\n  }\n\n  createForm() {\n    this.purgeForm = this.fb.group({\n      poolName: ''\n    });\n  }\n\n  ngOnInit() {\n    if (this.poolPermission.read) {\n      this.poolService.list(['pool_name', 'application_metadata']).then((resp) => {\n        this.pools = resp\n          .filter((pool: Pool) => pool.application_metadata.includes('rbd'))\n          .map((pool: Pool) => pool.pool_name);\n      });\n    }\n\n    this.createForm();\n  }\n\n  purge() {\n    const poolName = this.purgeForm.getValue('poolName') || '';\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('rbd/trash/purge', {\n          pool_name: poolName\n        }),\n        call: this.rbdService.purgeTrash(poolName)\n      })\n      .subscribe({\n        error: () => {\n          this.purgeForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.closeModal();\n        }\n      });\n  }\n}\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\n\nimport { BaseModal } from 'carbon-components-angular';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\n@Component({\n  selector: 'cd-rbd-trash-restore-modal',\n  templateUrl: './rbd-trash-restore-modal.component.html',\n  styleUrls: ['./rbd-trash-restore-modal.component.scss']\n})\nexport class RbdTrashRestoreModalComponent extends BaseModal implements OnInit {\n  executingTasks: ExecutingTask[];\n\n  restoreForm: CdFormGroup;\n\n  constructor(\n    private rbdService: RbdService,\n    public actionLabels: ActionLabelsI18n,\n    private fb: CdFormBuilder,\n    private taskWrapper: TaskWrapperService,\n\n    @Inject('poolName') public poolName: string,\n    @Inject('namespace') public namespace: string,\n    @Inject('imageName') public imageName: string,\n    @Inject('imageId') public imageId: string,\n    @Optional() @Inject('imageSpec') public imageSpec = ''\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.imageSpec = new ImageSpec(this.poolName, this.namespace, this.imageName).toString();\n    this.restoreForm = this.fb.group({\n      name: this.imageName\n    });\n  }\n\n  restore() {\n    const name = this.restoreForm.getValue('name');\n    const imageSpec = new ImageSpec(this.poolName, this.namespace, this.imageId);\n\n    this.taskWrapper\n      .wrapTaskAroundCall({\n        task: new FinishedTask('rbd/trash/restore', {\n          image_id_spec: imageSpec.toString(),\n          new_image_name: name\n        }),\n        call: this.rbdService.restoreTrash(imageSpec, name)\n      })\n      .subscribe({\n        error: () => {\n          this.restoreForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.closeModal();\n        }\n      });\n  }\n}\n","<cds-modal size=\"sm\"\n           [open]=\"open\"\n           (overlaySelected)=\"closeModal()\">\n\n  <cds-modal-header (closeSelect)=\"closeModal()\">\n    <h3 cdsModalHeaderHeading\n        i18n>Restore Image</h3>\n  </cds-modal-header>\n\n  <section cdsModalContent>\n    <form name=\"restoreForm\"\n          class=\"form\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"restoreForm\"\n          novalidate>\n      <p i18n>To restore&nbsp;\n        <kbd>{{ imageSpec }}&#64;{{ imageId }}</kbd>,&nbsp;\n        type the image's new name and click&nbsp;\n        <kbd>Restore</kbd>.</p>\n\n      <div class=\"form-item\">\n        <cds-text-label for=\"name\"\n                        i18n\n                        [invalid]=\"restoreForm.showError('name', formDir, 'required')\"\n                        invalidText=\"The field is required\"\n                        cdRequiredField=\"Name\">Name\n          <input cdsText\n                 name=\"name\"\n                 id=\"name\"\n                 formControlName=\"name\"\n                 autocomplete=\"off\"\n                 autofocus>\n        </cds-text-label>\n      </div>\n    </form>\n  </section>\n\n  <cd-form-button-panel (submitActionEvent)=\"restore()\"\n                        [form]=\"restoreForm\"\n                        [submitText]=\"actionLabels.RESTORE\"\n                        [modalForm]=\"true\"></cd-form-button-panel>\n\n</cds-modal>\n","<cd-rbd-tabs></cd-rbd-tabs>\n\n<cd-table [data]=\"images\"\n          columnMode=\"flex\"\n          [columns]=\"columns\"\n          identifier=\"id\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          [status]=\"tableStatus\"\n          [autoReload]=\"-1\"\n          (fetchData)=\"taskListService.fetch()\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions class=\"btn-group\"\n                      [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n    <button cdsButton=\"tertiary\"\n            type=\"button\"\n            (click)=\"purgeModal()\"\n            [disabled]=\"disablePurgeBtn\"\n            *ngIf=\"permission.delete\">\n      <ng-container i18n>Purge Trash</ng-container>\n      <svg class=\"cds--btn__icon\"\n           cdsIcon=\"close\"\n           size=\"16\"></svg>\n    </button>\n  </div>\n</cd-table>\n\n<ng-template #expiresTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <ng-container *ngIf=\"row.cdIsExpired\"\n                i18n>Expired at</ng-container>\n\n  <ng-container *ngIf=\"!row.cdIsExpired\"\n                i18n>Protected until</ng-container>\n\n  {{ value | cdDate }}\n</ng-template>\n\n<ng-template #deleteTpl\n             let-expiresAt=\"expiresAt\"\n             let-isExpired=\"isExpired\">\n  <p class=\"text-danger\"\n     *ngIf=\"!isExpired\">\n    <strong>\n      <ng-container i18n>This image is protected until {{ expiresAt | cdDate }}.</ng-container>\n    </strong>\n  </p>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { TableStatusViewCache } from '~/app/shared/classes/table-status-view-cache';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { ViewCacheStatus } from '~/app/shared/enum/view-cache-status.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { ExecutingTask } from '~/app/shared/models/executing-task';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ImageSpec } from '~/app/shared/models/image-spec';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { Task } from '~/app/shared/models/task';\nimport { CdDatePipe } from '~/app/shared/pipes/cd-date.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskListService } from '~/app/shared/services/task-list.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { RbdTrashPurgeModalComponent } from '../rbd-trash-purge-modal/rbd-trash-purge-modal.component';\nimport { RbdTrashRestoreModalComponent } from '../rbd-trash-restore-modal/rbd-trash-restore-modal.component';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\n\n@Component({\n  selector: 'cd-rbd-trash-list',\n  templateUrl: './rbd-trash-list.component.html',\n  styleUrls: ['./rbd-trash-list.component.scss'],\n  providers: [TaskListService]\n})\nexport class RbdTrashListComponent implements OnInit {\n  @ViewChild(TableComponent, { static: true })\n  table: TableComponent;\n  @ViewChild('expiresTpl', { static: true })\n  expiresTpl: TemplateRef<any>;\n  @ViewChild('deleteTpl', { static: true })\n  deleteTpl: TemplateRef<any>;\n\n  icons = Icons;\n\n  columns: CdTableColumn[];\n  executingTasks: ExecutingTask[] = [];\n  images: any;\n  modalRef: NgbModalRef;\n  permission: Permission;\n  retries: number;\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n  tableStatus = new TableStatusViewCache();\n  disablePurgeBtn = true;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    private rbdService: RbdService,\n    private modalService: ModalCdsService,\n    private cdDatePipe: CdDatePipe,\n    public taskListService: TaskListService,\n    private taskWrapper: TaskWrapperService,\n    public actionLabels: ActionLabelsI18n\n  ) {\n    this.permission = this.authStorageService.getPermissions().rbdImage;\n    const restoreAction: CdTableAction = {\n      permission: 'update',\n      icon: Icons.undo,\n      click: () => this.restoreModal(),\n      name: this.actionLabels.RESTORE\n    };\n    const deleteAction: CdTableAction = {\n      permission: 'delete',\n      icon: Icons.destroy,\n      click: () => this.deleteModal(),\n      name: this.actionLabels.DELETE\n    };\n    this.tableActions = [restoreAction, deleteAction];\n  }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: $localize`ID`,\n        prop: 'id',\n        flexGrow: 1,\n        cellTransformation: CellTemplate.executing\n      },\n      {\n        name: $localize`Name`,\n        prop: 'name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Pool`,\n        prop: 'pool_name',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Namespace`,\n        prop: 'namespace',\n        flexGrow: 1\n      },\n      {\n        name: $localize`Status`,\n        prop: 'deferment_end_time',\n        flexGrow: 1,\n        cellTemplate: this.expiresTpl\n      },\n      {\n        name: $localize`Deleted At`,\n        prop: 'deletion_time',\n        flexGrow: 1,\n        pipe: this.cdDatePipe\n      }\n    ];\n\n    const itemFilter = (entry: any, task: Task) => {\n      const imageSpec = new ImageSpec(entry.pool_name, entry.namespace, entry.id);\n      return imageSpec.toString() === task.metadata['image_id_spec'];\n    };\n\n    const taskFilter = (task: Task) => {\n      return ['rbd/trash/remove', 'rbd/trash/restore'].includes(task.name);\n    };\n\n    this.taskListService.init(\n      () => this.rbdService.listTrash(),\n      (resp) => this.prepareResponse(resp),\n      (images) => (this.images = images),\n      () => this.onFetchError(),\n      taskFilter,\n      itemFilter,\n      undefined\n    );\n  }\n\n  prepareResponse(resp: any[]): any[] {\n    let images: any[] = [];\n    const viewCacheStatusMap = {};\n\n    resp.forEach((pool: Record<string, any>) => {\n      if (_.isUndefined(viewCacheStatusMap[pool.status])) {\n        viewCacheStatusMap[pool.status] = [];\n      }\n      viewCacheStatusMap[pool.status].push(pool.pool_name);\n      images = images.concat(pool.value);\n      this.disablePurgeBtn = !images.length;\n    });\n\n    let status: number;\n    if (viewCacheStatusMap[3]) {\n      status = 3;\n    } else if (viewCacheStatusMap[1]) {\n      status = 1;\n    } else if (viewCacheStatusMap[2]) {\n      status = 2;\n    }\n\n    if (status) {\n      const statusFor =\n        (viewCacheStatusMap[status].length > 1 ? 'pools ' : 'pool ') +\n        viewCacheStatusMap[status].join();\n\n      this.tableStatus = new TableStatusViewCache(status, statusFor);\n    } else {\n      this.tableStatus = new TableStatusViewCache();\n    }\n\n    images.forEach((image) => {\n      image.cdIsExpired = moment().isAfter(image.deferment_end_time);\n    });\n\n    return images;\n  }\n\n  onFetchError() {\n    this.table.reset(); // Disable loading indicator.\n    this.tableStatus = new TableStatusViewCache(ViewCacheStatus.ValueException);\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  restoreModal() {\n    const initialState = {\n      poolName: this.selection.first().pool_name,\n      namespace: this.selection.first().namespace,\n      imageName: this.selection.first().name,\n      imageId: this.selection.first().id\n    };\n\n    this.modalRef = this.modalService.show(RbdTrashRestoreModalComponent, initialState);\n  }\n\n  deleteModal() {\n    const poolName = this.selection.first().pool_name;\n    const namespace = this.selection.first().namespace;\n    const imageId = this.selection.first().id;\n    const expiresAt = this.selection.first().deferment_end_time;\n    const isExpired = moment().isAfter(expiresAt);\n    const imageIdSpec = new ImageSpec(poolName, namespace, imageId);\n\n    this.modalRef = this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'RBD',\n      itemNames: [imageIdSpec],\n      bodyTemplate: this.deleteTpl,\n      bodyContext: { expiresAt, isExpired },\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('rbd/trash/remove', {\n            image_id_spec: imageIdSpec.toString()\n          }),\n          call: this.rbdService.removeTrash(imageIdSpec, true)\n        })\n    });\n  }\n\n  purgeModal() {\n    this.modalService.show(RbdTrashPurgeModalComponent);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport _ from 'lodash';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { catchError, mapTo } from 'rxjs/operators';\nimport { CephServiceSpec } from '../models/service.interface';\n\nexport const MAX_NAMESPACE = 4096;\n\nexport type GatewayGroup = CephServiceSpec;\n\nexport type GroupsComboboxItem = {\n  content: string;\n  serviceName?: string;\n  selected?: boolean;\n};\n\ntype NvmeofRequest = {\n  gw_group: string;\n};\n\nexport type ListenerRequest = NvmeofRequest & {\n  host_name: string;\n  traddr: string;\n  trsvcid: number;\n};\n\nexport type NamespaceCreateRequest = NvmeofRequest & {\n  rbd_image_name: string;\n  rbd_pool: string;\n  rbd_image_size?: number;\n  create_image: boolean;\n};\n\nexport type NamespaceUpdateRequest = NvmeofRequest & {\n  rbd_image_size: number;\n};\n\nexport type InitiatorRequest = NvmeofRequest & {\n  host_nqn: string;\n};\n\nconst API_PATH = 'api/nvmeof';\nconst UI_API_PATH = 'ui-api/nvmeof';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NvmeofService {\n  constructor(private http: HttpClient) {}\n\n  // formats the gateway groups to be consumed for combobox item\n  formatGwGroupsList(\n    data: CephServiceSpec[][],\n    isGatewayList: boolean = false\n  ): GroupsComboboxItem[] {\n    return data[0].reduce((gwGrpList: GroupsComboboxItem[], group: CephServiceSpec) => {\n      if (isGatewayList && group?.spec?.group && group?.service_name) {\n        gwGrpList.push({\n          content: group.spec.group,\n          serviceName: group.service_name\n        });\n      } else {\n        if (group?.spec?.group) {\n          gwGrpList.push({\n            content: group.spec.group\n          });\n        }\n      }\n      return gwGrpList;\n    }, []);\n  }\n\n  // Gateway groups\n  listGatewayGroups() {\n    return this.http.get<GatewayGroup[][]>(`${API_PATH}/gateway/group`);\n  }\n\n  // Gateways\n  listGateways() {\n    return this.http.get(`${API_PATH}/gateway`);\n  }\n\n  // Subsystems\n  listSubsystems(group: string) {\n    return this.http.get(`${API_PATH}/subsystem?gw_group=${group}`);\n  }\n\n  getSubsystem(subsystemNQN: string, group: string) {\n    return this.http.get(`${API_PATH}/subsystem/${subsystemNQN}?gw_group=${group}`);\n  }\n\n  createSubsystem(request: {\n    nqn: string;\n    enable_ha: boolean;\n    gw_group: string;\n    max_namespaces?: number;\n  }) {\n    return this.http.post(`${API_PATH}/subsystem`, request, { observe: 'response' });\n  }\n\n  deleteSubsystem(subsystemNQN: string, group: string) {\n    return this.http.delete(`${API_PATH}/subsystem/${subsystemNQN}?gw_group=${group}`, {\n      observe: 'response'\n    });\n  }\n\n  isSubsystemPresent(subsystemNqn: string, group: string): Observable<boolean> {\n    return this.getSubsystem(subsystemNqn, group).pipe(\n      mapTo(true),\n      catchError((e) => {\n        e?.preventDefault();\n        return observableOf(false);\n      })\n    );\n  }\n\n  // Initiators\n  getInitiators(subsystemNQN: string, group: string) {\n    return this.http.get(`${API_PATH}/subsystem/${subsystemNQN}/host?gw_group=${group}`);\n  }\n\n  addInitiators(subsystemNQN: string, request: InitiatorRequest) {\n    return this.http.post(`${UI_API_PATH}/subsystem/${subsystemNQN}/host`, request, {\n      observe: 'response'\n    });\n  }\n\n  removeInitiators(subsystemNQN: string, request: InitiatorRequest) {\n    return this.http.delete(\n      `${UI_API_PATH}/subsystem/${subsystemNQN}/host/${request.host_nqn}/${request.gw_group}`,\n      {\n        observe: 'response'\n      }\n    );\n  }\n\n  // Listeners\n  listListeners(subsystemNQN: string, group: string) {\n    return this.http.get(`${API_PATH}/subsystem/${subsystemNQN}/listener?gw_group=${group}`);\n  }\n\n  createListener(subsystemNQN: string, request: ListenerRequest) {\n    return this.http.post(`${API_PATH}/subsystem/${subsystemNQN}/listener`, request, {\n      observe: 'response'\n    });\n  }\n\n  deleteListener(\n    subsystemNQN: string,\n    group: string,\n    hostName: string,\n    traddr: string,\n    trsvcid: string\n  ) {\n    return this.http.delete(\n      `${API_PATH}/subsystem/${subsystemNQN}/listener/${hostName}/${traddr}`,\n      {\n        observe: 'response',\n        params: {\n          gw_group: group,\n          trsvcid,\n          force: 'true'\n        }\n      }\n    );\n  }\n\n  // Namespaces\n  listNamespaces(subsystemNQN: string, group: string) {\n    return this.http.get(`${API_PATH}/subsystem/${subsystemNQN}/namespace?gw_group=${group}`);\n  }\n\n  getNamespace(subsystemNQN: string, nsid: string, group: string) {\n    return this.http.get(\n      `${API_PATH}/subsystem/${subsystemNQN}/namespace/${nsid}?gw_group=${group}`\n    );\n  }\n\n  createNamespace(subsystemNQN: string, request: NamespaceCreateRequest) {\n    return this.http.post(`${API_PATH}/subsystem/${subsystemNQN}/namespace`, request, {\n      observe: 'response'\n    });\n  }\n\n  updateNamespace(subsystemNQN: string, nsid: string, request: NamespaceUpdateRequest) {\n    return this.http.patch(`${API_PATH}/subsystem/${subsystemNQN}/namespace/${nsid}`, request, {\n      observe: 'response'\n    });\n  }\n\n  deleteNamespace(subsystemNQN: string, nsid: string, group: string) {\n    return this.http.delete(\n      `${API_PATH}/subsystem/${subsystemNQN}/namespace/${nsid}?gw_group=${group}`,\n      {\n        observe: 'response'\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cd-nvmeof-tabs',\n  templateUrl: './nvmeof-tabs.component.html',\n  styleUrls: ['./nvmeof-tabs.component.scss']\n})\nexport class NvmeofTabsComponent {}\n","<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/nvmeof/subsystems\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Subsystems</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       routerLink=\"/block/nvmeof/gateways\"\n       routerLinkActive=\"active\"\n       ariaCurrentWhenActive=\"page\"\n       i18n>Gateways</a>\n  </li>\n</ul>\n","<cd-nvmeof-tabs></cd-nvmeof-tabs>\n\n<div class=\"pb-3\"\n     cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <cds-combo-box\n      type=\"single\"\n      label=\"Selected Gateway Group\"\n      i18n-label\n      [placeholder]=\"gwGroupPlaceholder\"\n      [items]=\"gwGroups\"\n      (selected)=\"onGroupSelection($event)\"\n      (clear)=\"onGroupClear()\"\n      [disabled]=\"gwGroupsEmpty\">\n    <cds-dropdown-list></cds-dropdown-list>\n  </cds-combo-box>\n</div>\n\n<ng-template #statusTpl\n             let-row=\"data.row\">\n  <span class=\"badge\"\n        [ngClass]=\"row | pipeFunction:getStatusClass\">\n    {{ row.status_desc }}\n  </span>\n</ng-template>\n\n<cds-tabs\n  type=\"contained\"\n  followFocus=\"true\"\n  isNavigation=\"true\"\n  [cacheActive]=\"false\">\n  <cds-tab\n    heading=\"Gateways\"\n    [tabContent]=\"gateways_content\"\n    i18n-heading\n    (selected)=\"onSelected(Tabs.gateways)\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Overview\"\n    [tabContent]=\"overview_content\"\n    i18n-heading\n    (selected)=\"onSelected(Tabs.overview)\">\n  </cds-tab>\n  <cds-tab\n    heading=\"Performance\"\n    [tabContent]=\"performance_content\"\n    i18n-heading\n    (selected)=\"onSelected(Tabs.overview)\">\n  </cds-tab>\n</cds-tabs>\n\n<ng-template #gateways_content>\n  <legend *ngIf=\"selectedTab === Tabs.gateways\"\n          i18n>\n    Gateways\n    <cd-help-text>\n      Ceph NVMe-oF gateways provide Ceph Block Device storage through NVMe/TCP. For VMware clients the NVMe/TCP volumes display as  VMFS Datastores. For Linux clients the NVMe/TCP volumes display as as block devices.\n    </cd-help-text>\n  </legend>\n  <div>\n    <cd-table [data]=\"gateways\"\n              (fetchData)=\"getGateways()\"\n              [columns]=\"gatewayColumns\">\n    </cd-table>\n  </div>\n</ng-template>\n\n<ng-template #overview_content>\n  <cd-grafana i18n-title\n              title=\"Gateway overview\"\n              grafanaPath=\"ceph-nvme-of-gateways-overview?var-group={{selectedGatewayGroup}}&var-gateway=All\"\n              [type]=\"'metrics'\"\n              uid=\"feeuv1dno43r4ddjhjssdd\"\n              grafanaStyle=\"three\">\n  </cd-grafana>\n</ng-template>\n\n<ng-template #performance_content>\n  <cd-grafana i18n-title\n              title=\"Gateway performance\"\n              grafanaPath=\"ceph-nvme-of-gateways-performance?var-group={{selectedGatewayGroup}}\"\n              [type]=\"'metrics'\"\n              uid=\"feeuv1dno43r4deed\"\n              grafanaStyle=\"three\">\n  </cd-grafana>\n</ng-template>\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport _ from 'lodash';\n\nimport { ActionLabelsI18n } from '~/app/shared/constants/app.constants';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\n\nimport { GroupsComboboxItem, NvmeofService } from '../../../shared/api/nvmeof.service';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\nimport { CephServiceService } from '~/app/shared/api/ceph-service.service';\nimport { Daemon } from '~/app/shared/models/daemon.interface';\n\ntype Gateway = {\n  id: string;\n  hostname: string;\n  status: number;\n  status_desc: string;\n};\n\nenum TABS {\n  'gateways',\n  'overview'\n}\n\nconst DEFAULT_PLACEHOLDER = $localize`Enter group name`;\n\n@Component({\n  selector: 'cd-nvmeof-gateway',\n  templateUrl: './nvmeof-gateway.component.html',\n  styleUrls: ['./nvmeof-gateway.component.scss']\n})\nexport class NvmeofGatewayComponent implements OnInit {\n  selectedTab: TABS;\n\n  onSelected(tab: TABS) {\n    this.selectedTab = tab;\n  }\n\n  public get Tabs(): typeof TABS {\n    return TABS;\n  }\n\n  @ViewChild('statusTpl', { static: true })\n  statusTpl: TemplateRef<any>;\n\n  gateways: Gateway[] = [];\n  gatewayColumns: any;\n  selection = new CdTableSelection();\n  gwGroups: GroupsComboboxItem[] = [];\n  groupService: string = null;\n  selectedGatewayGroup: string = null;\n  gwGroupsEmpty: boolean = false;\n  gwGroupPlaceholder: string = DEFAULT_PLACEHOLDER;\n\n  constructor(\n    private nvmeofService: NvmeofService,\n    private cephServiceService: CephServiceService,\n    public actionLabels: ActionLabelsI18n\n  ) {}\n\n  ngOnInit() {\n    this.setGatewayGroups();\n    this.gatewayColumns = [\n      {\n        name: $localize`Gateway ID`,\n        prop: 'id'\n      },\n      {\n        name: $localize`Hostname`,\n        prop: 'hostname'\n      },\n      {\n        name: $localize`Status`,\n        prop: 'status_desc',\n        cellTemplate: this.statusTpl\n      }\n    ];\n  }\n\n  // for Status column\n  getStatusClass(row: Gateway): string {\n    return _.get(\n      {\n        '-1': 'badge-danger',\n        '0': 'badge-warning',\n        '1': 'badge-success'\n      },\n      row.status,\n      'badge-dark'\n    );\n  }\n\n  // Gateways\n  getGateways() {\n    this.cephServiceService.getDaemons(this.groupService).subscribe((daemons: Daemon[]) => {\n      this.gateways = daemons.length\n        ? daemons.map((daemon: Daemon) => {\n            return {\n              id: `client.${daemon.daemon_name}`,\n              hostname: daemon.hostname,\n              status_desc: daemon.status_desc,\n              status: daemon.status\n            };\n          })\n        : [];\n    });\n  }\n\n  // Gateway groups\n  onGroupSelection(selected: GroupsComboboxItem) {\n    selected.selected = true;\n    this.groupService = selected.serviceName;\n    this.selectedGatewayGroup = selected.content;\n    this.getGateways();\n  }\n\n  onGroupClear() {\n    this.groupService = null;\n    this.getGateways();\n  }\n\n  setGatewayGroups() {\n    this.nvmeofService.listGatewayGroups().subscribe((response: CephServiceSpec[][]) => {\n      if (response?.[0]?.length) {\n        this.gwGroups = this.nvmeofService.formatGwGroupsList(response, true);\n      } else this.gwGroups = [];\n      // Select first group if no group is selected\n      if (!this.groupService && this.gwGroups.length) {\n        this.onGroupSelection(this.gwGroups[0]);\n        this.gwGroupsEmpty = false;\n        this.gwGroupPlaceholder = DEFAULT_PLACEHOLDER;\n      } else {\n        this.gwGroupsEmpty = true;\n        this.gwGroupPlaceholder = $localize`No groups available`;\n      }\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NvmeofService } from '~/app/shared/api/nvmeof.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CellTemplate } from '~/app/shared/enum/cell-template.enum';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NvmeofListener } from '~/app/shared/models/nvmeof';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst BASE_URL = 'block/nvmeof/subsystems';\n\n@Component({\n  selector: 'cd-nvmeof-listeners-list',\n  templateUrl: './nvmeof-listeners-list.component.html',\n  styleUrls: ['./nvmeof-listeners-list.component.scss']\n})\nexport class NvmeofListenersListComponent implements OnInit {\n  @Input()\n  subsystemNQN: string;\n  @Input()\n  group: string;\n\n  listenerColumns: any;\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permission: Permission;\n  listeners: NvmeofListener[];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private modalService: ModalCdsService,\n    private authStorageService: AuthStorageService,\n    private taskWrapper: TaskWrapperService,\n    private nvmeofService: NvmeofService,\n    private router: Router\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n  }\n\n  ngOnInit() {\n    this.listenerColumns = [\n      {\n        name: $localize`Host`,\n        prop: 'host_name'\n      },\n      {\n        name: $localize`Transport`,\n        prop: 'trtype'\n      },\n      {\n        name: $localize`Address`,\n        prop: 'full_addr',\n        cellTransformation: CellTemplate.copy\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () =>\n          this.router.navigate(\n            [BASE_URL, { outlets: { modal: [URLVerbs.CREATE, this.subsystemNQN, 'listener'] } }],\n            { queryParams: { group: this.group } }\n          ),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteListenerModal()\n      }\n    ];\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  listListeners() {\n    this.nvmeofService\n      .listListeners(this.subsystemNQN, this.group)\n      .subscribe((listResponse: NvmeofListener[]) => {\n        this.listeners = listResponse.map((listener, index) => {\n          listener['id'] = index;\n          listener['full_addr'] = `${listener.traddr}:${listener.trsvcid}`;\n          return listener;\n        });\n      });\n  }\n\n  deleteListenerModal() {\n    const listener = this.selection.first();\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: $localize`Listener`,\n      actionDescription: 'delete',\n      infoMessage: $localize`This action will delete listener despite any active connections.`,\n      itemNames: [\n        $localize`listener` + ' ' + `${listener.host_name} (${listener.traddr}:${listener.trsvcid})`\n      ],\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('nvmeof/listener/delete', {\n            nqn: this.subsystemNQN,\n            host_name: listener.host_name\n          }),\n          call: this.nvmeofService.deleteListener(\n            this.subsystemNQN,\n            this.group,\n            listener.host_name,\n            listener.traddr,\n            listener.trsvcid\n          )\n        })\n    });\n  }\n}\n","<legend>\n  <cd-help-text>\n    A listener defines the IP address and port on the gateway that is used to process NVMe/TCP admin and I/O commands to a subsystem.\n  </cd-help-text>\n</legend>\n<cd-table [data]=\"listeners\"\n          columnMode=\"flex\"\n          (fetchData)=\"listListeners()\"\n          [columns]=\"listenerColumns\"\n          identifier=\"id\"\n          forceIdentifier=\"true\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      class=\"btn-group\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n</cd-table>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NvmeofService } from '~/app/shared/api/nvmeof.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NvmeofSubsystemNamespace } from '~/app/shared/models/nvmeof';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { IopsPipe } from '~/app/shared/pipes/iops.pipe';\nimport { MbpersecondPipe } from '~/app/shared/pipes/mbpersecond.pipe';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst BASE_URL = 'block/nvmeof/subsystems';\n\n@Component({\n  selector: 'cd-nvmeof-namespaces-list',\n  templateUrl: './nvmeof-namespaces-list.component.html',\n  styleUrls: ['./nvmeof-namespaces-list.component.scss']\n})\nexport class NvmeofNamespacesListComponent implements OnInit {\n  @Input()\n  subsystemNQN: string;\n  @Input()\n  group: string;\n\n  namespacesColumns: any;\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permission: Permission;\n  namespaces: NvmeofSubsystemNamespace[];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private router: Router,\n    private modalService: ModalCdsService,\n    private authStorageService: AuthStorageService,\n    private taskWrapper: TaskWrapperService,\n    private nvmeofService: NvmeofService,\n    private dimlessBinaryPipe: DimlessBinaryPipe,\n    private mbPerSecondPipe: MbpersecondPipe,\n    private iopsPipe: IopsPipe\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n  }\n\n  ngOnInit() {\n    this.namespacesColumns = [\n      {\n        name: $localize`ID`,\n        prop: 'nsid'\n      },\n      {\n        name: $localize`Bdev Name`,\n        prop: 'bdev_name'\n      },\n      {\n        name: $localize`Pool `,\n        prop: 'rbd_pool_name',\n        flexGrow: 2\n      },\n      {\n        name: $localize`Image`,\n        prop: 'rbd_image_name',\n        flexGrow: 3\n      },\n      {\n        name: $localize`Image Size`,\n        prop: 'rbd_image_size',\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`Block Size`,\n        prop: 'block_size',\n        pipe: this.dimlessBinaryPipe\n      },\n      {\n        name: $localize`IOPS`,\n        prop: 'rw_ios_per_second',\n        sortable: false,\n        pipe: this.iopsPipe,\n        flexGrow: 1.5\n      },\n      {\n        name: $localize`R/W Throughput`,\n        prop: 'rw_mbytes_per_second',\n        sortable: false,\n        pipe: this.mbPerSecondPipe,\n        flexGrow: 1.5\n      },\n      {\n        name: $localize`Read Throughput`,\n        prop: 'r_mbytes_per_second',\n        sortable: false,\n        pipe: this.mbPerSecondPipe,\n        flexGrow: 1.5\n      },\n      {\n        name: $localize`Write Throughput`,\n        prop: 'w_mbytes_per_second',\n        sortable: false,\n        pipe: this.mbPerSecondPipe,\n        flexGrow: 1.5\n      },\n      {\n        name: $localize`Load Balancing Group`,\n        prop: 'load_balancing_group',\n        flexGrow: 1.5\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () =>\n          this.router.navigate(\n            [BASE_URL, { outlets: { modal: [URLVerbs.CREATE, this.subsystemNQN, 'namespace'] } }],\n            { queryParams: { group: this.group } }\n          ),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.EDIT,\n        permission: 'update',\n        icon: Icons.edit,\n        click: () =>\n          this.router.navigate(\n            [\n              BASE_URL,\n              {\n                outlets: {\n                  modal: [\n                    URLVerbs.EDIT,\n                    this.subsystemNQN,\n                    'namespace',\n                    this.selection.first().nsid\n                  ]\n                }\n              }\n            ],\n            { queryParams: { group: this.group } }\n          )\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteNamespaceModal()\n      }\n    ];\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  listNamespaces() {\n    this.nvmeofService\n      .listNamespaces(this.subsystemNQN, this.group)\n      .subscribe((res: NvmeofSubsystemNamespace[]) => {\n        this.namespaces = res;\n      });\n  }\n\n  deleteNamespaceModal() {\n    const namespace = this.selection.first();\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Namespace',\n      itemNames: [namespace.nsid],\n      actionDescription: 'delete',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('nvmeof/namespace/delete', {\n            nqn: this.subsystemNQN,\n            nsid: namespace.nsid\n          }),\n          call: this.nvmeofService.deleteNamespace(this.subsystemNQN, namespace.nsid, this.group)\n        })\n    });\n  }\n}\n","<legend>\n  <cd-help-text>\n    An NVMe namespace is a quantity of non-volatile storage that can be formatted into logical blocks and presented to a host as a standard block device.\n  </cd-help-text>\n</legend>\n<cd-table [data]=\"namespaces\"\n          columnMode=\"flex\"\n          (fetchData)=\"listNamespaces()\"\n          [columns]=\"namespacesColumns\"\n          selectionType=\"single\"\n          (updateSelection)=\"updateSelection($event)\">\n\n  <div class=\"table-actions\">\n    <cd-table-actions [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      class=\"btn-group\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n</cd-table>\n","<legend>\n  <cd-help-text>\n    An initiator (or host) is the client that connects to the NVMe-oF target to access NVMe storage.\n    The NVMe/TCP protocol allows initiators, to send NVMe-oF commands to storage devices, which are known as targets.\n  </cd-help-text>\n</legend>\n<cd-table [data]=\"initiators\"\n          columnMode=\"flex\"\n          (fetchData)=\"listInitiators()\"\n          [columns]=\"initiatorColumns\"\n          selectionType=\"multiClick\"\n          (updateSelection)=\"updateSelection($event)\">\n  <div class=\"table-actions\">\n    <cd-table-actions [permission]=\"permission\"\n                      [selection]=\"selection\"\n                      class=\"btn-group\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n</cd-table>\n<ng-template #hostTpl\n             let-value=\"data.value\">\n  <span *ngIf=\"value === '*'\"\n        i18n\n        class=\"font-monospace\">Any host allowed (*)</span>\n  <span *ngIf=\"value !== '*'\"\n        class=\"font-monospace\">{{value}}</span>\n</ng-template>\n","import { Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NvmeofService } from '~/app/shared/api/nvmeof.service';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NvmeofSubsystemInitiator } from '~/app/shared/models/nvmeof';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\n\nconst BASE_URL = 'block/nvmeof/subsystems';\n\n@Component({\n  selector: 'cd-nvmeof-initiators-list',\n  templateUrl: './nvmeof-initiators-list.component.html',\n  styleUrls: ['./nvmeof-initiators-list.component.scss']\n})\nexport class NvmeofInitiatorsListComponent implements OnInit {\n  @Input()\n  subsystemNQN: string;\n  @Input()\n  group: string;\n\n  @ViewChild('hostTpl', { static: true })\n  hostTpl: TemplateRef<any>;\n\n  initiatorColumns: any;\n  tableActions: CdTableAction[];\n  selection = new CdTableSelection();\n  permission: Permission;\n  initiators: NvmeofSubsystemInitiator[] = [];\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private nvmeofService: NvmeofService,\n    private modalService: ModalCdsService,\n    private router: Router,\n    private taskWrapper: TaskWrapperService\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n  }\n\n  ngOnInit() {\n    this.initiatorColumns = [\n      {\n        name: $localize`Initiator`,\n        prop: 'nqn',\n        cellTemplate: this.hostTpl\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.ADD,\n        permission: 'create',\n        icon: Icons.add,\n        click: () =>\n          this.router.navigate(\n            [BASE_URL, { outlets: { modal: [URLVerbs.ADD, this.subsystemNQN, 'initiator'] } }],\n            { queryParams: { group: this.group } }\n          ),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection\n      },\n      {\n        name: this.actionLabels.REMOVE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.removeInitiatorModal(),\n        disable: () => !this.selection.hasSelection,\n        canBePrimary: (selection: CdTableSelection) => selection.hasSelection\n      }\n    ];\n  }\n\n  getAllowAllHostIndex() {\n    return this.selection.selected.findIndex((selected) => selected.nqn === '*');\n  }\n\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  listInitiators() {\n    this.nvmeofService\n      .getInitiators(this.subsystemNQN, this.group)\n      .subscribe((initiators: NvmeofSubsystemInitiator[]) => {\n        this.initiators = initiators;\n      });\n  }\n\n  getSelectedNQNs() {\n    return this.selection.selected.map((selected) => selected.nqn);\n  }\n\n  removeInitiatorModal() {\n    const hostNQNs = this.getSelectedNQNs();\n    const allowAllHostIndex = this.getAllowAllHostIndex();\n    const host_nqn = hostNQNs.join(',');\n    let itemNames = hostNQNs;\n    if (allowAllHostIndex !== -1) {\n      hostNQNs.splice(allowAllHostIndex, 1);\n      itemNames = [...hostNQNs, $localize`Allow any host(*)`];\n    }\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Initiator',\n      itemNames,\n      actionDescription: 'remove',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('nvmeof/initiator/remove', {\n            nqn: this.subsystemNQN,\n            plural: itemNames.length > 1\n          }),\n          call: this.nvmeofService.removeInitiators(this.subsystemNQN, {\n            host_nqn,\n            gw_group: this.group\n          })\n        })\n    });\n  }\n}\n","<ng-container *ngIf=\"selection\">\n  <nav ngbNav\n       #nav=\"ngbNav\"\n       class=\"nav-tabs\"\n       cdStatefulTab=\"subsystem-details\">\n    <ng-container ngbNavItem=\"details\">\n      <a ngbNavLink\n         i18n>Details</a>\n      <ng-template ngbNavContent>\n        <cd-table-key-value [data]=\"data\">\n        </cd-table-key-value>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"listeners\">\n      <a ngbNavLink\n         i18n>Listeners</a>\n      <ng-template ngbNavContent>\n        <cd-nvmeof-listeners-list [subsystemNQN]=\"subsystemNQN\"\n                                  [group]=\"group\">\n        </cd-nvmeof-listeners-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"namespaces\">\n      <a ngbNavLink\n         i18n>Namespaces</a>\n      <ng-template ngbNavContent>\n        <cd-nvmeof-namespaces-list [subsystemNQN]=\"subsystemNQN\"\n                                   [group]=\"group\">\n        </cd-nvmeof-namespaces-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"initiators\">\n      <a ngbNavLink\n         i18n>Initiators</a>\n      <ng-template ngbNavContent>\n        <cd-nvmeof-initiators-list [subsystemNQN]=\"subsystemNQN\"\n                                   [group]=\"group\">\n        </cd-nvmeof-initiators-list>\n      </ng-template>\n    </ng-container>\n    <ng-container ngbNavItem=\"performance-details\"\n                  *ngIf=\"permissions.grafana.read\">\n      <a ngbNavLink\n         i18n>Performance Details</a>\n      <ng-template ngbNavContent>\n        <cd-grafana i18n-title\n                    title=\"Subsystem details\"\n                    grafanaPath=\"ceph-nvme-of-gateways-performance?var-group={{group}}&var-subsystem={{subsystemNQN}}\"\n                    [type]=\"'metrics'\"\n                    uid=\"feeuv1dno43r4deed\"\n                    grafanaStyle=\"three\">\n        </cd-grafana>\n      </ng-template>\n    </ng-container>\n  </nav>\n\n  <div [ngbNavOutlet]=\"nav\"></div>\n</ng-container>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { NvmeofSubsystem } from '~/app/shared/models/nvmeof';\nimport { Permissions } from '~/app/shared/models/permissions';\n\n@Component({\n  selector: 'cd-nvmeof-subsystems-details',\n  templateUrl: './nvmeof-subsystems-details.component.html',\n  styleUrls: ['./nvmeof-subsystems-details.component.scss']\n})\nexport class NvmeofSubsystemsDetailsComponent implements OnChanges {\n  @Input()\n  selection: NvmeofSubsystem;\n  @Input()\n  group: string;\n  @Input()\n  permissions: Permissions;\n\n  selectedItem: any;\n  data: any;\n  subsystemNQN: string;\n\n  ngOnChanges() {\n    if (this.selection) {\n      this.selectedItem = this.selection;\n      this.subsystemNQN = this.selectedItem.nqn;\n\n      this.data = {};\n      this.data[$localize`Serial Number`] = this.selectedItem.serial_number;\n      this.data[$localize`Model Number`] = this.selectedItem.model_number;\n      this.data[$localize`Minimum Controller Identifier`] = this.selectedItem.min_cntlid;\n      this.data[$localize`Maximum Controller Identifier`] = this.selectedItem.max_cntlid;\n      this.data[$localize`Subsystem Type`] = this.selectedItem.subtype;\n    }\n  }\n}\n","<cd-nvmeof-tabs></cd-nvmeof-tabs>\n\n<div class=\"pb-3\"\n     cdsCol\n     [columnNumbers]=\"{md: 4}\">\n  <cds-combo-box\n      type=\"single\"\n      label=\"Selected Gateway Group\"\n      i18n-label\n      [placeholder]=\"gwGroupPlaceholder\"\n      [items]=\"gwGroups\"\n      (selected)=\"onGroupSelection($event)\"\n      (clear)=\"onGroupClear()\"\n      [disabled]=\"gwGroupsEmpty\">\n    <cds-dropdown-list></cds-dropdown-list>\n  </cds-combo-box>\n</div>\n\n<legend i18n>\n  Subsystems\n  <cd-help-text>\n    A subsystem provides access control to which hosts can access the namespaces within the subsystem.\n  </cd-help-text>\n</legend>\n<cd-table [data]=\"subsystems\"\n          columnMode=\"flex\"\n          (fetchData)=\"getSubsystems()\"\n          [columns]=\"subsystemsColumns\"\n          selectionType=\"single\"\n          [hasDetails]=\"true\"\n          (setExpandedRow)=\"setExpandedRow($event)\"\n          (updateSelection)=\"updateSelection($event)\">\n\n  <div class=\"table-actions\">\n    <cd-table-actions [permission]=\"permissions.nvmeof\"\n                      [selection]=\"selection\"\n                      class=\"btn-group\"\n                      [tableActions]=\"tableActions\">\n    </cd-table-actions>\n  </div>\n\n  <cd-nvmeof-subsystems-details *cdTableDetail\n                                [selection]=\"expandedRow\"\n                                [permissions]=\"permissions\"\n                                [group]=\"group\">\n  </cd-nvmeof-subsystems-details>\n</cd-table>\n<router-outlet name=\"modal\"></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdTableSelection } from '~/app/shared/models/cd-table-selection';\nimport { NvmeofSubsystem } from '~/app/shared/models/nvmeof';\nimport { Permissions } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { ListWithDetails } from '~/app/shared/classes/list-with-details.class';\nimport { CdTableAction } from '~/app/shared/models/cd-table-action';\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { DeleteConfirmationModalComponent } from '~/app/shared/components/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { NvmeofService, GroupsComboboxItem } from '~/app/shared/api/nvmeof.service';\nimport { ModalCdsService } from '~/app/shared/services/modal-cds.service';\nimport { CephServiceSpec } from '~/app/shared/models/service.interface';\n\nconst BASE_URL = 'block/nvmeof/subsystems';\nconst DEFAULT_PLACEHOLDER = $localize`Enter group name`;\n\n@Component({\n  selector: 'cd-nvmeof-subsystems',\n  templateUrl: './nvmeof-subsystems.component.html',\n  styleUrls: ['./nvmeof-subsystems.component.scss']\n})\nexport class NvmeofSubsystemsComponent extends ListWithDetails implements OnInit {\n  subsystems: NvmeofSubsystem[] = [];\n  subsystemsColumns: any;\n  permissions: Permissions;\n  selection = new CdTableSelection();\n  tableActions: CdTableAction[];\n  subsystemDetails: any[];\n  gwGroups: GroupsComboboxItem[] = [];\n  group: string = null;\n  gwGroupsEmpty: boolean = false;\n  gwGroupPlaceholder: string = DEFAULT_PLACEHOLDER;\n\n  constructor(\n    private nvmeofService: NvmeofService,\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private router: Router,\n    private modalService: ModalCdsService,\n    private taskWrapper: TaskWrapperService,\n    private route: ActivatedRoute\n  ) {\n    super();\n    this.permissions = this.authStorageService.getPermissions();\n  }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe((params) => {\n      if (params?.['group']) this.onGroupSelection({ content: params?.['group'] });\n    });\n    this.setGatewayGroups();\n    this.subsystemsColumns = [\n      {\n        name: $localize`NQN`,\n        prop: 'nqn'\n      },\n      {\n        name: $localize`# Namespaces`,\n        prop: 'namespace_count'\n      },\n      {\n        name: $localize`# Maximum Allowed Namespaces`,\n        prop: 'max_namespaces'\n      }\n    ];\n    this.tableActions = [\n      {\n        name: this.actionLabels.CREATE,\n        permission: 'create',\n        icon: Icons.add,\n        click: () =>\n          this.router.navigate([BASE_URL, { outlets: { modal: [URLVerbs.CREATE] } }], {\n            queryParams: { group: this.group }\n          }),\n        canBePrimary: (selection: CdTableSelection) => !selection.hasSelection,\n        disable: () => !this.group\n      },\n      {\n        name: this.actionLabels.DELETE,\n        permission: 'delete',\n        icon: Icons.destroy,\n        click: () => this.deleteSubsystemModal()\n      }\n    ];\n  }\n\n  // Subsystems\n  updateSelection(selection: CdTableSelection) {\n    this.selection = selection;\n  }\n\n  getSubsystems() {\n    if (this.group) {\n      this.nvmeofService\n        .listSubsystems(this.group)\n        .subscribe((subsystems: NvmeofSubsystem[] | NvmeofSubsystem) => {\n          if (Array.isArray(subsystems)) this.subsystems = subsystems;\n          else this.subsystems = [subsystems];\n        });\n    } else {\n      this.subsystems = [];\n    }\n  }\n\n  deleteSubsystemModal() {\n    const subsystem = this.selection.first();\n    this.modalService.show(DeleteConfirmationModalComponent, {\n      itemDescription: 'Subsystem',\n      itemNames: [subsystem.nqn],\n      actionDescription: 'delete',\n      submitActionObservable: () =>\n        this.taskWrapper.wrapTaskAroundCall({\n          task: new FinishedTask('nvmeof/subsystem/delete', { nqn: subsystem.nqn }),\n          call: this.nvmeofService.deleteSubsystem(subsystem.nqn, this.group)\n        })\n    });\n  }\n\n  // Gateway groups\n  onGroupSelection(selected: GroupsComboboxItem) {\n    selected.selected = true;\n    this.group = selected.content;\n    this.getSubsystems();\n  }\n\n  onGroupClear() {\n    this.group = null;\n    this.getSubsystems();\n  }\n\n  setGatewayGroups() {\n    this.nvmeofService.listGatewayGroups().subscribe((response: CephServiceSpec[][]) => {\n      if (response?.[0]?.length) {\n        this.gwGroups = this.nvmeofService.formatGwGroupsList(response);\n      } else this.gwGroups = [];\n      // Select first group if no group is selected\n      if (!this.group && this.gwGroups.length) {\n        this.onGroupSelection(this.gwGroups[0]);\n        this.gwGroupsEmpty = false;\n        this.gwGroupPlaceholder = DEFAULT_PLACEHOLDER;\n      } else {\n        this.gwGroupsEmpty = true;\n        this.gwGroupPlaceholder = $localize`No groups available`;\n      }\n    });\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\"\n          [modalRef]=\"activeModal\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form name=\"subsystemForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"subsystemForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- NQN -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"nqn\">\n            <span class=\"required\"\n                  i18n>NQN</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input name=\"nqn\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   formControlName=\"nqn\">\n              <cd-help-text>\n                A unique and permanent name for the lifetime of the subsystem.\n              </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('nqn', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('nqn', formDir, 'unique')\"\n                  i18n>This NQN is already in use.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('nqn', formDir, 'pattern')\"\n                  i18n>Expected NQN format<br/>&lt;<code>nqn.$year-$month.$reverseDomainName:$utf8-string</code>\".&gt; or <br/>&lt;<code>nqn.2014-08.org.nvmexpress:uuid:$UUID-string</code>\".&gt;</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('nqn', formDir, 'maxLength')\"\n                  i18n>An NQN may not be more than 223 bytes in length.</span>\n          </div>\n        </div>\n        <!-- Maximum Namespaces -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"max_namespaces\">\n            <span i18n>Maximum Namespaces</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"max_namespaces\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   name=\"max_namespaces\"\n                   formControlName=\"max_namespaces\">\n            <cd-help-text i18n>The maximum namespaces per subsystem. Default is {{defaultMaxNamespace}}</cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('max_namespaces', formDir, 'min')\"\n                  i18n>The value must be at least 1.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('max_namespaces', formDir, 'max')\"\n                  i18n>The value cannot be greater than {{defaultMaxNamespace}}.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"subsystemForm.showError('max_namespaces', formDir, 'pattern')\"\n                  i18n>The value must be a positive integer.</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                [form]=\"subsystemForm\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MAX_NAMESPACE, NvmeofService } from '~/app/shared/api/nvmeof.service';\n\n@Component({\n  selector: 'cd-nvmeof-subsystems-form',\n  templateUrl: './nvmeof-subsystems-form.component.html',\n  styleUrls: ['./nvmeof-subsystems-form.component.scss']\n})\nexport class NvmeofSubsystemsFormComponent implements OnInit {\n  permission: Permission;\n  subsystemForm: CdFormGroup;\n  action: string;\n  resource: string;\n  pageURL: string;\n  defaultMaxNamespace: number = MAX_NAMESPACE;\n  group: string;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    public activeModal: NgbActiveModal,\n    private nvmeofService: NvmeofService,\n    private taskWrapperService: TaskWrapperService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n    this.resource = $localize`Subsystem`;\n    this.pageURL = 'block/nvmeof/subsystems';\n  }\n\n  DEFAULT_NQN = 'nqn.2001-07.com.ceph:' + Date.now();\n  NQN_REGEX = /^nqn\\.(19|20)\\d\\d-(0[1-9]|1[0-2])\\.\\D{2,3}(\\.[A-Za-z0-9-]+)+(:[A-Za-z0-9-\\.]+(:[A-Za-z0-9-\\.]+)*)$/;\n  NQN_REGEX_UUID = /^nqn\\.2014-08\\.org\\.nvmexpress:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n\n  customNQNValidator = CdValidators.custom(\n    'pattern',\n    (nqnInput: string) =>\n      !!nqnInput && !(this.NQN_REGEX.test(nqnInput) || this.NQN_REGEX_UUID.test(nqnInput))\n  );\n\n  ngOnInit() {\n    this.route.queryParams.subscribe((params) => {\n      this.group = params?.['group'];\n    });\n    this.createForm();\n    this.action = this.actionLabels.CREATE;\n  }\n\n  createForm() {\n    this.subsystemForm = new CdFormGroup({\n      nqn: new UntypedFormControl(this.DEFAULT_NQN, {\n        validators: [\n          this.customNQNValidator,\n          Validators.required,\n          this.customNQNValidator,\n          CdValidators.custom(\n            'maxLength',\n            (nqnInput: string) => new TextEncoder().encode(nqnInput).length > 223\n          )\n        ],\n        asyncValidators: [\n          CdValidators.unique(\n            this.nvmeofService.isSubsystemPresent,\n            this.nvmeofService,\n            null,\n            null,\n            this.group\n          )\n        ]\n      }),\n      max_namespaces: new UntypedFormControl(this.defaultMaxNamespace, {\n        validators: [\n          CdValidators.number(false),\n          Validators.max(this.defaultMaxNamespace),\n          Validators.min(1)\n        ]\n      })\n    });\n  }\n\n  onSubmit() {\n    const component = this;\n    const nqn: string = this.subsystemForm.getValue('nqn');\n    const max_namespaces: number = Number(this.subsystemForm.getValue('max_namespaces'));\n    let taskUrl = `nvmeof/subsystem/${URLVerbs.CREATE}`;\n\n    const request = {\n      nqn,\n      enable_ha: true,\n      gw_group: this.group,\n      max_namespaces\n    };\n\n    if (!max_namespaces) {\n      delete request.max_namespaces;\n    }\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          nqn: nqn\n        }),\n        call: this.nvmeofService.createSubsystem(request)\n      })\n      .subscribe({\n        error() {\n          component.subsystemForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.router.navigate([this.pageURL, { outlets: { modal: null } }]);\n        }\n      });\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form name=\"listenerForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"listenerForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- Host -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"host\">\n            <span class=\"required\"\n                  i18n>Hostname</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <select id=\"host\"\n                    name=\"host\"\n                    class=\"form-select\"\n                    formControlName=\"host\">\n              <option *ngIf=\"hosts === null\"\n                      [ngValue]=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"hosts && hosts.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No hosts available --</option>\n              <option *ngIf=\"hosts && hosts.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select a host --</option>\n              <option *ngFor=\"let hostsItem of hosts\"\n                      [ngValue]=\"hostsItem\">{{ hostsItem.hostname }}</option>\n            </select>\n            <cd-help-text i18n>\n                This hostname uniquely identifies the gateway on which the listener is being set up.\n            </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"listenerForm.showError('host', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n        <!-- Transport Service ID -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"trsvcid\">\n            <span i18n>Transport Service ID</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input id=\"trsvcid\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   name=\"trsvcid\"\n                   formControlName=\"trsvcid\">\n            <cd-help-text i18n>The IP port to use. Default is 4420.</cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"listenerForm.showError('trsvcid', formDir, 'required')\"\n                  i18n>This field is required.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"listenerForm.showError('trsvcid', formDir, 'max')\"\n                  i18n>The value cannot be greated than 65535.</span>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"listenerForm.showError('trsvcid', formDir, 'pattern')\"\n                  i18n>The value must be a positive integer.</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                [form]=\"listenerForm\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import _ from 'lodash';\nimport { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { GatewayGroup, ListenerRequest, NvmeofService } from '~/app/shared/api/nvmeof.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { HostService } from '~/app/shared/api/host.service';\nimport { map } from 'rxjs/operators';\nimport { forkJoin } from 'rxjs';\nimport { Host } from '~/app/shared/models/host.interface';\n\n@Component({\n  selector: 'cd-nvmeof-listeners-form',\n  templateUrl: './nvmeof-listeners-form.component.html',\n  styleUrls: ['./nvmeof-listeners-form.component.scss']\n})\nexport class NvmeofListenersFormComponent implements OnInit {\n  action: string;\n  permission: Permission;\n  hostPermission: Permission;\n  resource: string;\n  pageURL: string;\n  listenerForm: CdFormGroup;\n  subsystemNQN: string;\n  hosts: Array<object> = null;\n  group: string;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private taskWrapperService: TaskWrapperService,\n    private nvmeofService: NvmeofService,\n    private hostService: HostService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public activeModal: NgbActiveModal,\n    public formatterService: FormatterService,\n    public dimlessBinaryPipe: DimlessBinaryPipe\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n    this.hostPermission = this.authStorageService.getPermissions().hosts;\n    this.resource = $localize`Listener`;\n    this.pageURL = 'block/nvmeof/subsystems';\n  }\n\n  filterHostsByLabel(allHosts: Host[], gwNodesLabel: string | string[]) {\n    return allHosts.filter((host: Host) => {\n      const hostLabels: string[] = host?.labels;\n      if (typeof gwNodesLabel === 'string') {\n        return hostLabels.includes(gwNodesLabel);\n      }\n      return hostLabels?.length === gwNodesLabel?.length && _.isEqual(hostLabels, gwNodesLabel);\n    });\n  }\n\n  filterHostsByHostname(allHosts: Host[], gwNodes: string[]) {\n    return allHosts.filter((host: Host) => gwNodes.includes(host.hostname));\n  }\n\n  getGwGroupPlacement(gwGroups: GatewayGroup[][]) {\n    return (\n      gwGroups?.[0]?.find((gwGroup: GatewayGroup) => gwGroup?.spec?.group === this.group)\n        ?.placement || { hosts: [], label: [] }\n    );\n  }\n\n  setHosts() {\n    forkJoin({\n      gwGroups: this.nvmeofService.listGatewayGroups(),\n      allHosts: this.hostService.getAllHosts()\n    })\n      .pipe(\n        map(({ gwGroups, allHosts }) => {\n          const { hosts, label } = this.getGwGroupPlacement(gwGroups);\n          if (hosts?.length) return this.filterHostsByHostname(allHosts, hosts);\n          else if (label?.length) return this.filterHostsByLabel(allHosts, label);\n          return [];\n        })\n      )\n      .subscribe((nvmeofGwNodes: Host[]) => {\n        this.hosts = nvmeofGwNodes.map((h) => ({ hostname: h.hostname, addr: h.addr }));\n      });\n  }\n\n  ngOnInit() {\n    this.createForm();\n    this.action = this.actionLabels.CREATE;\n    this.route.params.subscribe((params: { subsystem_nqn: string }) => {\n      this.subsystemNQN = params?.subsystem_nqn;\n    });\n    this.route.queryParams.subscribe((params) => {\n      this.group = params?.['group'];\n    });\n    this.setHosts();\n  }\n\n  createForm() {\n    this.listenerForm = new CdFormGroup({\n      host: new UntypedFormControl(null, {\n        validators: [Validators.required]\n      }),\n      trsvcid: new UntypedFormControl(4420, [\n        Validators.required,\n        CdValidators.number(false),\n        Validators.max(65535)\n      ])\n    });\n  }\n\n  buildRequest(): ListenerRequest {\n    const host = this.listenerForm.getValue('host');\n    let trsvcid = Number(this.listenerForm.getValue('trsvcid'));\n    if (!trsvcid) trsvcid = 4420;\n    const request: ListenerRequest = {\n      gw_group: this.group,\n      host_name: host.hostname,\n      traddr: host.addr,\n      trsvcid\n    };\n    return request;\n  }\n\n  onSubmit() {\n    const component = this;\n    const taskUrl: string = `nvmeof/listener/${URLVerbs.CREATE}`;\n    const request = this.buildRequest();\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          nqn: this.subsystemNQN,\n          host_name: request.host_name\n        }),\n        call: this.nvmeofService.createListener(this.subsystemNQN, request)\n      })\n      .subscribe({\n        error() {\n          component.listenerForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.router.navigate([this.pageURL, { outlets: { modal: null } }]);\n        }\n      });\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\"\n          [modalRef]=\"activeModal\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form name=\"nsForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"nsForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- Block Pool -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"pool\">\n            <span [ngClass]=\"{'required': !edit}\"\n                  i18n>Pool</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <input *ngIf=\"edit\"\n                   class=\"form-control\"\n                   type=\"text\"\n                   id=\"pool-edit\"\n                   formControlName=\"pool\">\n            <select *ngIf=\"!edit\"\n                    id=\"pool-create\"\n                    class=\"form-select\"\n                    formControlName=\"pool\">\n              <option *ngIf=\"rbdPools === null\"\n                      [ngValue]=\"null\"\n                      i18n>Loading...</option>\n              <option *ngIf=\"rbdPools && rbdPools.length === 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- No block pools available --</option>\n              <option *ngIf=\"rbdPools && rbdPools.length > 0\"\n                      [ngValue]=\"null\"\n                      i18n>-- Select a pool --</option>\n              <option *ngFor=\"let pool of rbdPools\"\n                      [value]=\"pool.pool_name\">{{ pool.pool_name }}</option>\n            </select>\n            <cd-help-text i18n>\n              An RBD application-enabled pool where the image will be created.\n            </cd-help-text>\n            <span class=\"invalid-feedback\"\n                  *ngIf=\"nsForm.showError('pool', formDir, 'required')\"\n                  i18n>This field is required.</span>\n          </div>\n        </div>\n        <!-- Namespace Count -->\n        <div *ngIf=\"!edit\"\n             class=\"form-group row\"\n             id=\"namespace-count\">\n          <label class=\"cd-col-form-label\"\n                 for=\"nsCount\">\n            <span [ngClass]=\"{'required': !edit}\"\n                  i18n>Namespace Count</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <cds-number\n              formControlName=\"nsCount\"\n              helperText=\"The number of namespaces to create\"\n              i18n-helperText\n              [min]=\"MIN_NAMESPACE_CREATE\"\n              [max]=\"MAX_NAMESPACE_CREATE\"\n              [invalid]=\"nsForm.showError('nsCount', formDir, 'max') || nsForm.showError('nsCount', formDir, 'min') || nsForm.showError('nsCount', formDir, 'required')\"\n              [invalidText]=\"nsForm.get('nsCount').hasError('required') ? requiredInvalidText: nsCountInvalidText\"\n              size=\"sm\"></cds-number>\n          </div>\n        </div>\n        <!-- Image Size -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label\"\n                 for=\"image_size\">\n            <span [ngClass]=\"{'required': edit}\"\n                  i18n>Image Size</span>\n          </label>\n          <div class=\"cd-col-form-input\">\n            <div class=\"input-group\">\n              <input id=\"size\"\n                     class=\"form-control\"\n                     type=\"text\"\n                     formControlName=\"image_size\">\n              <select id=\"unit\"\n                      class=\"form-input form-select\"\n                      formControlName=\"unit\">\n                <option *ngFor=\"let u of units\"\n                        [value]=\"u\"\n                        i18n>{{ u }}</option>\n              </select>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"nsForm.showError('image_size', formDir, 'pattern')\">\n                <ng-container i18n>Enter a positive integer.</ng-container>\n              </span>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"edit && nsForm.showError('image_size', formDir, 'required')\">\n                <ng-container i18n>This field is required</ng-container>\n              </span>\n              <span class=\"invalid-feedback\"\n                    id=\"image-size-invalid\"\n                    *ngIf=\"edit && invalidSizeError\">\n                <ng-container i18n>Enter a value above than previous. A block device image can be expanded but not reduced.</ng-container>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                [form]=\"nsForm\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  NamespaceCreateRequest,\n  NamespaceUpdateRequest,\n  NvmeofService\n} from '~/app/shared/api/nvmeof.service';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { NvmeofSubsystemNamespace } from '~/app/shared/models/nvmeof';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { Pool } from '../../pool/pool';\nimport { PoolService } from '~/app/shared/api/pool.service';\nimport { RbdService } from '~/app/shared/api/rbd.service';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { forkJoin, Observable } from 'rxjs';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { DimlessBinaryPipe } from '~/app/shared/pipes/dimless-binary.pipe';\nimport { HttpResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'cd-nvmeof-namespaces-form',\n  templateUrl: './nvmeof-namespaces-form.component.html',\n  styleUrls: ['./nvmeof-namespaces-form.component.scss']\n})\nexport class NvmeofNamespacesFormComponent implements OnInit {\n  action: string;\n  permission: Permission;\n  poolPermission: Permission;\n  resource: string;\n  pageURL: string;\n  edit: boolean = false;\n  nsForm: CdFormGroup;\n  subsystemNQN: string;\n  rbdPools: Array<Pool> = null;\n  units: Array<string> = ['MiB', 'GiB', 'TiB'];\n  nsid: string;\n  currentBytes: number;\n  invalidSizeError: boolean;\n  group: string;\n  MAX_NAMESPACE_CREATE: number = 5;\n  MIN_NAMESPACE_CREATE: number = 1;\n  requiredInvalidText: string = $localize`This field is required`;\n  nsCountInvalidText: string = $localize`The namespace count should be between 1 and 5`;\n\n  constructor(\n    public actionLabels: ActionLabelsI18n,\n    private authStorageService: AuthStorageService,\n    private taskWrapperService: TaskWrapperService,\n    private nvmeofService: NvmeofService,\n    private poolService: PoolService,\n    private rbdService: RbdService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public activeModal: NgbActiveModal,\n    public formatterService: FormatterService,\n    public dimlessBinaryPipe: DimlessBinaryPipe\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n    this.poolPermission = this.authStorageService.getPermissions().pool;\n    this.resource = $localize`Namespace`;\n    this.pageURL = 'block/nvmeof/subsystems';\n  }\n\n  init() {\n    this.route.queryParams.subscribe((params) => {\n      this.group = params?.['group'];\n    });\n    this.createForm();\n    this.action = this.actionLabels.CREATE;\n    this.route.params.subscribe((params: { subsystem_nqn: string; nsid: string }) => {\n      this.subsystemNQN = params.subsystem_nqn;\n      this.nsid = params?.nsid;\n    });\n  }\n\n  initForEdit() {\n    this.edit = true;\n    this.action = this.actionLabels.EDIT;\n    this.nvmeofService\n      .getNamespace(this.subsystemNQN, this.nsid, this.group)\n      .subscribe((res: NvmeofSubsystemNamespace) => {\n        const convertedSize = this.dimlessBinaryPipe.transform(res.rbd_image_size).split(' ');\n        this.currentBytes = res.rbd_image_size;\n        this.nsForm.get('pool').setValue(res.rbd_pool_name);\n        this.nsForm.get('unit').setValue(convertedSize[1]);\n        this.nsForm.get('image_size').setValue(convertedSize[0]);\n        this.nsForm.get('image_size').addValidators(Validators.required);\n        this.nsForm.get('pool').disable();\n      });\n  }\n\n  initForCreate() {\n    this.poolService.getList().subscribe((resp: Pool[]) => {\n      this.rbdPools = resp.filter(this.rbdService.isRBDPool);\n      if (this.rbdPools?.length) {\n        this.nsForm.get('pool').setValue(this.rbdPools[0].pool_name);\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.init();\n    if (this.router.url.includes('subsystems/(modal:edit')) {\n      this.initForEdit();\n    } else {\n      this.initForCreate();\n    }\n  }\n\n  createForm() {\n    this.nsForm = new CdFormGroup({\n      pool: new UntypedFormControl(null, {\n        validators: [Validators.required]\n      }),\n      image_size: new UntypedFormControl(1, [CdValidators.number(false), Validators.min(1)]),\n      unit: new UntypedFormControl(this.units[1]),\n      nsCount: new UntypedFormControl(this.MAX_NAMESPACE_CREATE, [\n        Validators.required,\n        Validators.max(this.MAX_NAMESPACE_CREATE),\n        Validators.min(this.MIN_NAMESPACE_CREATE)\n      ])\n    });\n  }\n\n  buildUpdateRequest(rbdImageSize: number): Observable<HttpResponse<Object>> {\n    const request: NamespaceUpdateRequest = {\n      gw_group: this.group,\n      rbd_image_size: rbdImageSize\n    };\n    return this.nvmeofService.updateNamespace(\n      this.subsystemNQN,\n      this.nsid,\n      request as NamespaceUpdateRequest\n    );\n  }\n\n  randomString() {\n    return Math.random().toString(36).substring(2);\n  }\n\n  buildCreateRequest(rbdImageSize: number, nsCount: number): Observable<HttpResponse<Object>>[] {\n    const pool = this.nsForm.getValue('pool');\n    const requests: Observable<HttpResponse<Object>>[] = [];\n\n    for (let i = 1; i <= nsCount; i++) {\n      const request: NamespaceCreateRequest = {\n        gw_group: this.group,\n        rbd_image_name: `nvme_${pool}_${this.group}_${this.randomString()}`,\n        rbd_pool: pool,\n        create_image: true\n      };\n      if (rbdImageSize) {\n        request['rbd_image_size'] = rbdImageSize;\n      }\n      requests.push(this.nvmeofService.createNamespace(this.subsystemNQN, request));\n    }\n\n    return requests;\n  }\n\n  validateSize() {\n    const unit = this.nsForm.getValue('unit');\n    const image_size = this.nsForm.getValue('image_size');\n    if (image_size && unit) {\n      const bytes = this.formatterService.toBytes(image_size + unit);\n      return bytes <= this.currentBytes;\n    }\n    return null;\n  }\n\n  onSubmit() {\n    if (this.validateSize()) {\n      this.invalidSizeError = true;\n      this.nsForm.setErrors({ cdSubmitButton: true });\n    } else {\n      this.invalidSizeError = false;\n      const component = this;\n      const taskUrl: string = `nvmeof/namespace/${this.edit ? URLVerbs.EDIT : URLVerbs.CREATE}`;\n      const image_size = this.nsForm.getValue('image_size');\n      const nsCount = this.nsForm.getValue('nsCount');\n      let action: Observable<HttpResponse<Object>>;\n      let rbdImageSize: number = null;\n\n      if (image_size) {\n        const image_size_unit = this.nsForm.getValue('unit');\n        const value: number = this.formatterService.toBytes(image_size + image_size_unit);\n        rbdImageSize = value;\n      }\n      if (this.edit) {\n        action = this.taskWrapperService.wrapTaskAroundCall({\n          task: new FinishedTask(taskUrl, {\n            nqn: this.subsystemNQN,\n            nsid: this.nsid\n          }),\n          call: this.buildUpdateRequest(rbdImageSize)\n        });\n      } else {\n        action = this.taskWrapperService.wrapTaskAroundCall({\n          task: new FinishedTask(taskUrl, {\n            nqn: this.subsystemNQN,\n            nsCount\n          }),\n          call: forkJoin(this.buildCreateRequest(rbdImageSize, nsCount))\n        });\n      }\n\n      action.subscribe({\n        error() {\n          component.nsForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.router.navigate([this.pageURL, { outlets: { modal: null } }]);\n        }\n      });\n    }\n  }\n}\n","<cd-modal [pageURL]=\"pageURL\">\n  <span class=\"modal-title\"\n        i18n>{{ action | titlecase }} {{ resource | upperFirst }}</span>\n  <ng-container class=\"modal-content\">\n    <form name=\"initiatorForm\"\n          #formDir=\"ngForm\"\n          [formGroup]=\"initiatorForm\"\n          novalidate>\n      <div class=\"modal-body\">\n        <!-- Hosts -->\n        <div class=\"form-group row\">\n          <label class=\"cd-col-form-label required\"\n                 i18n>Hosts\n          </label>\n          <div class=\"cd-col-form-input\">\n            <!-- Add host -->\n            <div class=\"custom-control custom-checkbox\"\n                 formGroupName=\"addHost\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     id=\"addHostCheck\"\n                     name=\"addHostCheck\"\n                     formControlName=\"addHostCheck\"\n                     (change)=\"setAddHostCheck()\"/>\n              <label class=\"custom-control-label mb-0\"\n                     for=\"addHostCheck\"\n                     i18n>Add host</label>\n              <cd-help-text>\n                <span i18n>Allow specific hosts to run NVMe/TCP commands to the NVMe subsystem.</span>\n              </cd-help-text>\n              <div formArrayName=\"addedHosts\"\n                   *ngIf=\"initiatorForm.get('addHost.addHostCheck').value\"  >\n                <div *ngFor=\"let host of addedHosts.controls; let hi = index\"\n                     class=\"input-group cd-mb my-1\">\n                  <input class=\"cd-form-control\"\n                         type=\"text\"\n                         i18n-placeholder\n                         placeholder=\"Add host nqn\"\n                         [required]=\"!initiatorForm.getValue('allowAnyHost')\"\n                         [formControlName]=\"hi\"/>\n                  <button class=\"btn btn-light\"\n                          type=\"button\"\n                          id=\"add-button-{{hi}}\"\n                          [disabled]=\"initiatorForm.get('addHost.addedHosts').controls[hi].invalid\n                          || initiatorForm.get('addHost.addedHosts').errors?.duplicate\n                          || initiatorForm.get('addHost.addedHosts').controls.length === 32\n                          || (initiatorForm.get('addHost.addedHosts').controls.length !== 1 && initiatorForm.get('addHost.addedHosts').controls.length !== hi+1)\"\n                          (click)=\"addHost()\">\n                    <svg [cdsIcon]=\"icons.add\"\n                         [size]=\"icons.size16\"\n                         ></svg>\n                  </button>\n                  <button class=\"btn btn-light\"\n                          type=\"button\"\n                          id=\"delete-button-{{hi}}\"\n                          [disabled]=\"addedHosts.controls.length === 1\"\n                          (click)=\"removeHost(hi)\">\n                    <svg [cdsIcon]=\"icons.trash\"\n                         [size]=\"icons.size16\"\n                         ></svg>\n                  </button>\n                  <ng-container *ngIf=\"initiatorForm.get('addHost.addedHosts').controls[hi].invalid\n                                && (initiatorForm.get('addHost.addedHosts').controls[hi].dirty\n                                || initiatorForm.get('addHost.addedHosts').controls[hi].touched)\">\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiatorForm.get('addHost.addedHosts').controls[hi].errors?.required\"\n                          i18n>This field is required.</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiatorForm.get('addHost.addedHosts').controls[hi].errors?.pattern\"\n                          i18n>Expected NQN format<br/>&lt;<code>nqn.$year-$month.$reverseDomainName:$utf8-string</code>\".&gt; or <br/>&lt;<code>nqn.2014-08.org.nvmexpress:uuid:$UUID-string</code>\".&gt;</span>\n                    <span class=\"invalid-feedback\"\n                          *ngIf=\"initiatorForm.get('addHost.addedHosts').controls[hi].errors?.maxLength\"\n                          i18n>An NQN may not be more than 223 bytes in length.</span>\n                  </ng-container>\n                </div>\n                <span class=\"invalid-feedback\"\n                      *ngIf=\"initiatorForm.get('addHost.addedHosts').errors?.duplicate\"\n                      i18n>Duplicate entry detected. Enter a unique value.</span>\n              </div>\n            </div>\n            <!-- Allow any host -->\n            <div class=\"custom-control custom-checkbox pt-0\">\n              <input type=\"checkbox\"\n                     class=\"custom-control-input\"\n                     id=\"allowAnyHost\"\n                     name=\"allowAnyHost\"\n                     formControlName=\"allowAnyHost\"/>\n              <label class=\"custom-control-label\"\n                     for=\"allowAnyHost\"\n                     i18n>Allow any host</label>\n              <cd-alert-panel *ngIf=\"initiatorForm.getValue('allowAnyHost')\"\n                              [showTitle]=\"false\"\n                              type=\"warning\">Allowing any host to connect to the NVMe/TCP gateway may pose security risks.\n              </cd-alert-panel>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"text-right\">\n          <cd-form-button-panel (submitActionEvent)=\"onSubmit()\"\n                                [form]=\"initiatorForm\"\n                                [submitText]=\"(action | titlecase) + ' ' + (resource | upperFirst)\"></cd-form-button-panel>\n        </div>\n      </div>\n    </form>\n  </ng-container>\n</cd-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, Validators } from '@angular/forms';\n\nimport { CdFormBuilder } from '~/app/shared/forms/cd-form-builder';\nimport { ActionLabelsI18n, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport { CdValidators } from '~/app/shared/forms/cd-validators';\nimport { Permission } from '~/app/shared/models/permissions';\nimport { AuthStorageService } from '~/app/shared/services/auth-storage.service';\nimport { TaskWrapperService } from '~/app/shared/services/task-wrapper.service';\nimport { FinishedTask } from '~/app/shared/models/finished-task';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { InitiatorRequest, NvmeofService } from '~/app/shared/api/nvmeof.service';\n\n@Component({\n  selector: 'cd-nvmeof-initiators-form',\n  templateUrl: './nvmeof-initiators-form.component.html',\n  styleUrls: ['./nvmeof-initiators-form.component.scss']\n})\nexport class NvmeofInitiatorsFormComponent implements OnInit {\n  permission: Permission;\n  initiatorForm: CdFormGroup;\n  action: string;\n  resource: string;\n  pageURL: string;\n  remove: boolean = false;\n  subsystemNQN: string;\n  removeHosts: { name: string; value: boolean; id: number }[] = [];\n  group: string;\n\n  constructor(\n    private authStorageService: AuthStorageService,\n    public actionLabels: ActionLabelsI18n,\n    private nvmeofService: NvmeofService,\n    private taskWrapperService: TaskWrapperService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private formBuilder: CdFormBuilder\n  ) {\n    this.permission = this.authStorageService.getPermissions().nvmeof;\n    this.resource = $localize`Initiator`;\n    this.pageURL = 'block/nvmeof/subsystems';\n  }\n\n  NQN_REGEX = /^nqn\\.(19|20)\\d\\d-(0[1-9]|1[0-2])\\.\\D{2,3}(\\.[A-Za-z0-9-]+)+(:[A-Za-z0-9-\\.]+(:[A-Za-z0-9-\\.]+)*)$/;\n  NQN_REGEX_UUID = /^nqn\\.2014-08\\.org\\.nvmexpress:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n  ALLOW_ALL_HOST = '*';\n\n  customNQNValidator = CdValidators.custom(\n    'pattern',\n    (nqnInput: string) =>\n      !!nqnInput && !(this.NQN_REGEX.test(nqnInput) || this.NQN_REGEX_UUID.test(nqnInput))\n  );\n\n  ngOnInit() {\n    this.route.queryParams.subscribe((params) => {\n      this.group = params?.['group'];\n    });\n    this.createForm();\n    this.action = this.actionLabels.ADD;\n    this.route.params.subscribe((params: { subsystem_nqn: string }) => {\n      this.subsystemNQN = params.subsystem_nqn;\n    });\n  }\n\n  createForm() {\n    this.initiatorForm = new CdFormGroup({\n      allowAnyHost: new UntypedFormControl(false),\n      addHost: new CdFormGroup({\n        addHostCheck: new UntypedFormControl(false),\n        addedHosts: this.formBuilder.array(\n          [],\n          [\n            CdValidators.custom(\n              'duplicate',\n              (hosts: string[]) => !!hosts.length && new Set(hosts)?.size !== hosts.length\n            )\n          ]\n        )\n      })\n    });\n  }\n\n  get addedHosts(): UntypedFormArray {\n    return this.initiatorForm.get('addHost.addedHosts') as UntypedFormArray;\n  }\n\n  addHost() {\n    let newHostFormGroup;\n    newHostFormGroup = this.formBuilder.control('', [this.customNQNValidator, Validators.required]);\n    this.addedHosts.push(newHostFormGroup);\n  }\n\n  removeHost(index: number) {\n    this.addedHosts.removeAt(index);\n  }\n\n  setAddHostCheck() {\n    const addHostCheck = this.initiatorForm.get('addHost.addHostCheck').value;\n    if (!addHostCheck) {\n      while (this.addedHosts.length !== 0) {\n        this.addedHosts.removeAt(0);\n      }\n    } else {\n      this.addHost();\n    }\n  }\n\n  onSubmit() {\n    const component = this;\n    const allowAnyHost: boolean = this.initiatorForm.getValue('allowAnyHost');\n    const hosts: string[] = this.addedHosts.value;\n    let taskUrl = `nvmeof/initiator/${URLVerbs.ADD}`;\n\n    const request: InitiatorRequest = {\n      host_nqn: hosts.join(','),\n      gw_group: this.group\n    };\n\n    if (allowAnyHost) {\n      hosts.push('*');\n      request['host_nqn'] = hosts.join(',');\n    }\n    this.taskWrapperService\n      .wrapTaskAroundCall({\n        task: new FinishedTask(taskUrl, {\n          nqn: this.subsystemNQN\n        }),\n        call: this.nvmeofService.addInitiators(this.subsystemNQN, request)\n      })\n      .subscribe({\n        error() {\n          component.initiatorForm.setErrors({ cdSubmitButton: true });\n        },\n        complete: () => {\n          this.router.navigate([this.pageURL, { outlets: { modal: null } }]);\n        }\n      });\n  }\n}\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,2A14.1725,14.1725,0,0,0,2,16,14.1725,14.1725,0,0,0,16,30,14.1725,14.1725,0,0,0,30,16,14.1725,14.1725,0,0,0,16,2Zm8,15H17v7H15V17H8V15h7V8h2v7h7Z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"fill\": \"none\",\n      \"d\": \"M24 17L17 17 17 24 15 24 15 17 8 17 8 15 15 15 15 8 17 8 17 15 24 15 24 17z\",\n      \"data-icon-path\": \"inner-path\"\n    }\n  }],\n  \"name\": \"add--filled\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nvar _20 = {\n  \"elem\": \"svg\",\n  \"attrs\": {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 32 32\",\n    \"fill\": \"currentColor\",\n    \"width\": 20,\n    \"height\": 20\n  },\n  \"content\": [{\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M16,4c6.6,0,12,5.4,12,12s-5.4,12-12,12S4,22.6,4,16S9.4,4,16,4 M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14\\tS23.7,2,16,2z\"\n    }\n  }, {\n    \"elem\": \"path\",\n    \"attrs\": {\n      \"d\": \"M8 15H24V17H8z\"\n    }\n  }],\n  \"name\": \"subtract--alt\",\n  \"size\": 20\n};\n\nexport { _20 as default };\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgbNavModule, NgbPopoverModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PipesModule } from '~/app/shared/pipes/pipes.module';\n\nimport { ActionLabels, URLVerbs } from '~/app/shared/constants/app.constants';\nimport { FeatureTogglesGuardService } from '~/app/shared/services/feature-toggles-guard.service';\nimport { ModuleStatusGuardService } from '~/app/shared/services/module-status-guard.service';\nimport { SharedModule } from '~/app/shared/shared.module';\nimport { IscsiSettingComponent } from './iscsi-setting/iscsi-setting.component';\nimport { IscsiTabsComponent } from './iscsi-tabs/iscsi-tabs.component';\nimport { IscsiTargetDetailsComponent } from './iscsi-target-details/iscsi-target-details.component';\nimport { IscsiTargetDiscoveryModalComponent } from './iscsi-target-discovery-modal/iscsi-target-discovery-modal.component';\nimport { IscsiTargetFormComponent } from './iscsi-target-form/iscsi-target-form.component';\nimport { IscsiTargetImageSettingsModalComponent } from './iscsi-target-image-settings-modal/iscsi-target-image-settings-modal.component';\nimport { IscsiTargetIqnSettingsModalComponent } from './iscsi-target-iqn-settings-modal/iscsi-target-iqn-settings-modal.component';\nimport { IscsiTargetListComponent } from './iscsi-target-list/iscsi-target-list.component';\nimport { IscsiComponent } from './iscsi/iscsi.component';\nimport { MirroringModule } from './mirroring/mirroring.module';\nimport { OverviewComponent as RbdMirroringComponent } from './mirroring/overview/overview.component';\nimport { PoolEditModeModalComponent } from './mirroring/pool-edit-mode-modal/pool-edit-mode-modal.component';\nimport { RbdConfigurationFormComponent } from './rbd-configuration-form/rbd-configuration-form.component';\nimport { RbdConfigurationListComponent } from './rbd-configuration-list/rbd-configuration-list.component';\nimport { RbdDetailsComponent } from './rbd-details/rbd-details.component';\nimport { RbdFormComponent } from './rbd-form/rbd-form.component';\nimport { RbdListComponent } from './rbd-list/rbd-list.component';\nimport { RbdNamespaceFormModalComponent } from './rbd-namespace-form/rbd-namespace-form-modal.component';\nimport { RbdNamespaceListComponent } from './rbd-namespace-list/rbd-namespace-list.component';\nimport { RbdPerformanceComponent } from './rbd-performance/rbd-performance.component';\nimport { RbdSnapshotFormModalComponent } from './rbd-snapshot-form/rbd-snapshot-form-modal.component';\nimport { RbdSnapshotListComponent } from './rbd-snapshot-list/rbd-snapshot-list.component';\nimport { RbdTabsComponent } from './rbd-tabs/rbd-tabs.component';\nimport { RbdTrashListComponent } from './rbd-trash-list/rbd-trash-list.component';\nimport { RbdTrashMoveModalComponent } from './rbd-trash-move-modal/rbd-trash-move-modal.component';\nimport { RbdTrashPurgeModalComponent } from './rbd-trash-purge-modal/rbd-trash-purge-modal.component';\nimport { RbdTrashRestoreModalComponent } from './rbd-trash-restore-modal/rbd-trash-restore-modal.component';\nimport { NvmeofGatewayComponent } from './nvmeof-gateway/nvmeof-gateway.component';\nimport { NvmeofSubsystemsComponent } from './nvmeof-subsystems/nvmeof-subsystems.component';\nimport { NvmeofSubsystemsDetailsComponent } from './nvmeof-subsystems-details/nvmeof-subsystems-details.component';\nimport { NvmeofTabsComponent } from './nvmeof-tabs/nvmeof-tabs.component';\nimport { NvmeofSubsystemsFormComponent } from './nvmeof-subsystems-form/nvmeof-subsystems-form.component';\nimport { NvmeofListenersFormComponent } from './nvmeof-listeners-form/nvmeof-listeners-form.component';\nimport { NvmeofListenersListComponent } from './nvmeof-listeners-list/nvmeof-listeners-list.component';\nimport { NvmeofNamespacesListComponent } from './nvmeof-namespaces-list/nvmeof-namespaces-list.component';\nimport { NvmeofNamespacesFormComponent } from './nvmeof-namespaces-form/nvmeof-namespaces-form.component';\nimport { NvmeofInitiatorsListComponent } from './nvmeof-initiators-list/nvmeof-initiators-list.component';\nimport { NvmeofInitiatorsFormComponent } from './nvmeof-initiators-form/nvmeof-initiators-form.component';\n\nimport {\n  ButtonModule,\n  CheckboxModule,\n  ComboBoxModule,\n  DatePickerModule,\n  GridModule,\n  IconModule,\n  IconService,\n  InputModule,\n  ModalModule,\n  NumberModule,\n  RadioModule,\n  SelectModule,\n  UIShellModule,\n  TreeviewModule,\n  TabsModule\n} from 'carbon-components-angular';\n\n// Icons\nimport ChevronDown from '@carbon/icons/es/chevron--down/16';\nimport Close from '@carbon/icons/es/close/32';\nimport AddFilled from '@carbon/icons/es/add--filled/20';\nimport SubtractFilled from '@carbon/icons/es/subtract--filled/32';\nimport Reset from '@carbon/icons/es/reset/32';\nimport SubtractAlt from '@carbon/icons/es/subtract--alt/20';\nimport ProgressBarRound from '@carbon/icons/es/progress-bar--round/32';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MirroringModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbNavModule,\n    NgbPopoverModule,\n    NgbTooltipModule,\n    PipesModule,\n    SharedModule,\n    RouterModule,\n    TreeviewModule,\n    UIShellModule,\n    InputModule,\n    GridModule,\n    ButtonModule,\n    IconModule,\n    CheckboxModule,\n    RadioModule,\n    SelectModule,\n    NumberModule,\n    ModalModule,\n    DatePickerModule,\n    ComboBoxModule,\n    TabsModule\n  ],\n  declarations: [\n    RbdListComponent,\n    IscsiComponent,\n    IscsiSettingComponent,\n    IscsiTabsComponent,\n    IscsiTargetListComponent,\n    RbdDetailsComponent,\n    RbdFormComponent,\n    RbdNamespaceFormModalComponent,\n    RbdNamespaceListComponent,\n    RbdSnapshotListComponent,\n    RbdSnapshotFormModalComponent,\n    RbdTrashListComponent,\n    RbdTrashMoveModalComponent,\n    RbdTrashRestoreModalComponent,\n    RbdTrashPurgeModalComponent,\n    IscsiTargetDetailsComponent,\n    IscsiTargetFormComponent,\n    IscsiTargetImageSettingsModalComponent,\n    IscsiTargetIqnSettingsModalComponent,\n    IscsiTargetDiscoveryModalComponent,\n    RbdConfigurationListComponent,\n    RbdConfigurationFormComponent,\n    RbdTabsComponent,\n    RbdPerformanceComponent,\n    NvmeofGatewayComponent,\n    NvmeofSubsystemsComponent,\n    NvmeofSubsystemsDetailsComponent,\n    NvmeofTabsComponent,\n    NvmeofSubsystemsFormComponent,\n    NvmeofListenersFormComponent,\n    NvmeofListenersListComponent,\n    NvmeofNamespacesListComponent,\n    NvmeofNamespacesFormComponent,\n    NvmeofInitiatorsListComponent,\n    NvmeofInitiatorsFormComponent\n  ],\n  exports: [RbdConfigurationListComponent, RbdConfigurationFormComponent]\n})\nexport class BlockModule {\n  constructor(private iconService: IconService) {\n    this.iconService.registerAll([\n      ChevronDown,\n      Close,\n      AddFilled,\n      SubtractFilled,\n      Reset,\n      ProgressBarRound,\n      SubtractAlt\n    ]);\n  }\n}\n\n/* The following breakdown is needed to allow importing block.module without\n    the routes (e.g.: this module is imported by pool.module for RBD QoS\n    components)\n*/\nconst routes: Routes = [\n  { path: '', redirectTo: 'rbd', pathMatch: 'full' },\n  {\n    path: 'rbd',\n    canActivate: [FeatureTogglesGuardService, ModuleStatusGuardService],\n    data: {\n      moduleStatusGuardConfig: {\n        uiApiPath: 'block/rbd',\n        redirectTo: 'error',\n        header: $localize`Block Pool is not configured`,\n        button_name: $localize`Configure Default pool`,\n        button_route: '/pool/create',\n        component: 'Default Pool',\n        uiConfig: true\n      },\n      breadcrumbs: 'Images'\n    },\n    children: [\n      { path: '', component: RbdListComponent },\n      {\n        path: 'namespaces',\n        component: RbdNamespaceListComponent,\n        data: { breadcrumbs: 'Namespaces' }\n      },\n      {\n        path: 'trash',\n        component: RbdTrashListComponent,\n        data: { breadcrumbs: 'Trash' }\n      },\n      {\n        path: 'performance',\n        component: RbdPerformanceComponent,\n        data: { breadcrumbs: 'Overall Performance' }\n      },\n      {\n        path: URLVerbs.CREATE,\n        component: RbdFormComponent,\n        data: { breadcrumbs: ActionLabels.CREATE }\n      },\n      {\n        path: `${URLVerbs.EDIT}/:image_spec`,\n        component: RbdFormComponent,\n        data: { breadcrumbs: ActionLabels.EDIT }\n      },\n      {\n        path: `${URLVerbs.CLONE}/:image_spec/:snap`,\n        component: RbdFormComponent,\n        data: { breadcrumbs: ActionLabels.CLONE }\n      },\n      {\n        path: `${URLVerbs.COPY}/:image_spec`,\n        component: RbdFormComponent,\n        data: { breadcrumbs: ActionLabels.COPY }\n      },\n      {\n        path: `${URLVerbs.COPY}/:image_spec/:snap`,\n        component: RbdFormComponent,\n        data: { breadcrumbs: ActionLabels.COPY }\n      }\n    ]\n  },\n  {\n    path: 'mirroring',\n    component: RbdMirroringComponent,\n    canActivate: [FeatureTogglesGuardService, ModuleStatusGuardService],\n    data: {\n      moduleStatusGuardConfig: {\n        uiApiPath: 'block/mirroring',\n        redirectTo: 'error',\n        header: $localize`Block Mirroring is not configured`,\n        button_name: $localize`Configure Block Mirroring`,\n        button_title: $localize`This will create \\\"rbd-mirror\\\" service and a replicated Block pool`,\n        component: 'Block Mirroring',\n        uiConfig: true\n      },\n      breadcrumbs: 'Mirroring'\n    },\n    children: [\n      {\n        path: `${URLVerbs.EDIT}/:pool_name`,\n        component: PoolEditModeModalComponent,\n        outlet: 'modal'\n      }\n    ]\n  },\n  // iSCSI\n  {\n    path: 'iscsi',\n    canActivate: [FeatureTogglesGuardService],\n    data: { breadcrumbs: 'iSCSI' },\n    children: [\n      { path: '', redirectTo: 'overview', pathMatch: 'full' },\n      { path: 'overview', component: IscsiComponent, data: { breadcrumbs: 'Overview' } },\n      {\n        path: 'targets',\n        data: { breadcrumbs: 'Targets' },\n        children: [\n          { path: '', component: IscsiTargetListComponent },\n          {\n            path: URLVerbs.CREATE,\n            component: IscsiTargetFormComponent,\n            data: { breadcrumbs: ActionLabels.CREATE }\n          },\n          {\n            path: `${URLVerbs.EDIT}/:target_iqn`,\n            component: IscsiTargetFormComponent,\n            data: { breadcrumbs: ActionLabels.EDIT }\n          }\n        ]\n      }\n    ]\n  },\n  // NVMe/TCP\n  {\n    path: 'nvmeof',\n    canActivate: [ModuleStatusGuardService],\n    data: {\n      breadcrumbs: true,\n      text: 'NVMe/TCP',\n      path: 'nvmeof',\n      disableSplit: true,\n      moduleStatusGuardConfig: {\n        uiApiPath: 'nvmeof',\n        redirectTo: 'error',\n        header: $localize`NVMe/TCP Gateway not configured`,\n        button_name: $localize`Configure NVMe/TCP`,\n        button_route: ['/services', { outlets: { modal: ['create', 'nvmeof'] } }],\n        uiConfig: false\n      }\n    },\n    children: [\n      { path: '', redirectTo: 'subsystems', pathMatch: 'full' },\n      {\n        path: 'subsystems',\n        component: NvmeofSubsystemsComponent,\n        data: { breadcrumbs: 'Subsystems' },\n        children: [\n          // subsystems\n          { path: '', component: NvmeofSubsystemsComponent },\n          {\n            path: URLVerbs.CREATE,\n            component: NvmeofSubsystemsFormComponent,\n            outlet: 'modal'\n          },\n          // listeners\n          {\n            path: `${URLVerbs.CREATE}/:subsystem_nqn/listener`,\n            component: NvmeofListenersFormComponent,\n            outlet: 'modal'\n          },\n          // namespaces\n          {\n            path: `${URLVerbs.CREATE}/:subsystem_nqn/namespace`,\n            component: NvmeofNamespacesFormComponent,\n            outlet: 'modal'\n          },\n          {\n            path: `${URLVerbs.EDIT}/:subsystem_nqn/namespace/:nsid`,\n            component: NvmeofNamespacesFormComponent,\n            outlet: 'modal'\n          },\n          // initiators\n          {\n            path: `${URLVerbs.ADD}/:subsystem_nqn/initiator`,\n            component: NvmeofInitiatorsFormComponent,\n            outlet: 'modal'\n          }\n        ]\n      },\n      { path: 'gateways', component: NvmeofGatewayComponent, data: { breadcrumbs: 'Gateways' } }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [BlockModule, RouterModule.forChild(routes)]\n})\nexport class RoutedBlockModule {}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport _ from 'lodash';\n\nimport { DimlessBinaryPerSecondPipe } from '../pipes/dimless-binary-per-second.pipe';\nimport { FormatterService } from '../services/formatter.service';\n\n@Directive({\n  selector: '[cdDimlessBinaryPerSecond]'\n})\nexport class DimlessBinaryPerSecondDirective implements OnInit {\n  @Output()\n  ngModelChange: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Event emitter for letting this directive know that the data has (asynchronously) been loaded\n   * and the value needs to be adapted by this directive.\n   */\n  @Input()\n  ngDataReady: EventEmitter<any>;\n\n  /**\n   * Minimum size in bytes.\n   * If user enter a value lower than <minBytes>,\n   * the model will automatically be update to <minBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given minBytes=4096 (4KiB), if user type 1KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  minBytes: number;\n\n  /**\n   * Maximum size in bytes.\n   * If user enter a value greater than <maxBytes>,\n   * the model will automatically be update to <maxBytes>.\n   *\n   * If <roundPower> is used, this value should be a power of <roundPower>.\n   *\n   * Example:\n   *   Given maxBytes=3145728 (3MiB), if user type 4MiB, then model will be updated to 3MiB\n   */\n  @Input()\n  maxBytes: number;\n\n  /**\n   * Value will be rounded up the nearest power of <roundPower>\n   *\n   * Example:\n   *   Given roundPower=2, if user type 7KiB, then model will be updated to 8KiB\n   *   Given roundPower=2, if user type 5KiB, then model will be updated to 4KiB\n   */\n  @Input()\n  roundPower: number;\n\n  /**\n   * Default unit that should be used when user do not type a unit.\n   * By default, \"MiB\" will be used.\n   *\n   * Example:\n   *   Given defaultUnit=null, if user type 7, then model will be updated to 7MiB\n   *   Given defaultUnit=k, if user type 7, then model will be updated to 7KiB\n   */\n  @Input()\n  defaultUnit: string;\n\n  private el: HTMLInputElement;\n\n  constructor(\n    private elementRef: ElementRef,\n    private control: NgControl,\n    private dimlessBinaryPerSecondPipe: DimlessBinaryPerSecondPipe,\n    private formatter: FormatterService\n  ) {\n    this.el = this.elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    this.setValue(this.el.value);\n    if (this.ngDataReady) {\n      this.ngDataReady.subscribe(() => this.setValue(this.el.value));\n    }\n  }\n\n  setValue(value: string) {\n    if (/^[\\d.]+$/.test(value)) {\n      value += this.defaultUnit || 'm';\n    }\n    const size = this.formatter.toBytes(value, 0);\n    const roundedSize = this.round(size);\n    this.el.value = this.dimlessBinaryPerSecondPipe.transform(roundedSize);\n    if (size !== null) {\n      this.ngModelChange.emit(this.el.value);\n      this.control.control.setValue(this.el.value);\n    } else {\n      this.ngModelChange.emit(null);\n      this.control.control.setValue(null);\n    }\n  }\n\n  round(size: number) {\n    if (size !== null && size !== 0) {\n      if (!_.isUndefined(this.minBytes) && size < this.minBytes) {\n        return this.minBytes;\n      }\n      if (!_.isUndefined(this.maxBytes) && size > this.maxBytes) {\n        return this.maxBytes;\n      }\n      if (!_.isUndefined(this.roundPower)) {\n        const power = Math.round(Math.log(size) / Math.log(this.roundPower));\n        return Math.pow(this.roundPower, power);\n      }\n    }\n    return size;\n  }\n\n  @HostListener('blur', ['$event.target.value'])\n  onBlur(value: string) {\n    this.setValue(value);\n  }\n}\n","import { Directive, EventEmitter, HostListener, Input, OnInit } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Directive({\n  selector: '[cdMilliseconds]'\n})\nexport class MillisecondsDirective implements OnInit {\n  @Input()\n  ngDataReady: EventEmitter<any>;\n\n  constructor(private control: NgControl, private formatter: FormatterService) {}\n\n  setValue(value: string): void {\n    const ms = this.formatter.toMilliseconds(value);\n    this.control.control.setValue(`${ms} ms`);\n  }\n\n  ngOnInit(): void {\n    this.setValue(this.control.value);\n    if (this.ngDataReady) {\n      this.ngDataReady.subscribe(() => this.setValue(this.control.value));\n    }\n  }\n\n  @HostListener('blur', ['$event.target.value'])\n  onUpdate(value: string) {\n    this.setValue(value);\n  }\n}\n","import { Directive, EventEmitter, HostListener, Input, OnInit } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { FormatterService } from '../services/formatter.service';\n\n@Directive({\n  selector: '[cdIops]'\n})\nexport class IopsDirective implements OnInit {\n  @Input()\n  ngDataReady: EventEmitter<any>;\n\n  constructor(private formatter: FormatterService, private ngControl: NgControl) {}\n\n  setValue(value: string): void {\n    const iops = this.formatter.toIops(value);\n    this.ngControl.control.setValue(`${iops} IOPS`);\n  }\n\n  ngOnInit(): void {\n    this.setValue(this.ngControl.value);\n    if (this.ngDataReady) {\n      this.ngDataReady.subscribe(() => this.setValue(this.ngControl.value));\n    }\n  }\n\n  @HostListener('blur', ['$event.target.value'])\n  onUpdate(value: string) {\n    this.setValue(value);\n  }\n}\n","<fieldset #cfgFormGroup\n          [formGroup]=\"form.get('configuration')\">\n  <legend i18n>RBD Configuration</legend>\n\n  <div *ngFor=\"let section of rbdConfigurationService.sections\">\n    <h5 class=\"cd-header\">\n      <legend (click)=\"toggleSectionVisibility(section.class)\"\n              class=\"collapsible\">\n        {{ section.heading }}&nbsp;\n        <svg [cdsIcon]=\"!sectionVisibility[section.class] ? icons.addCircle : icons.minusCircle\"\n             [size]=\"icons.size20\"\n             ></svg>\n      </legend>\n    </h5>\n    <div class=\"{{ section.class }}\"\n         [hidden]=\"!sectionVisibility[section.class]\">\n      <div class=\"form-item\"\n           *ngFor=\"let option of section.options\">\n        <cds-text-label [helperText]=\"option.description\"\n                        [invalid]=\"form.get('configuration').controls[option.name].invalid && (form.get('configuration').controls[option.name].dirty)\"\n                        [invalidText]=\"formError\">\n          {{ option.displayName }}\n\n          <div class=\"cds-input-group\">\n            <ng-container [ngSwitch]=\"option.type\">\n              <ng-container *ngSwitchCase=\"configurationType.milliseconds\">\n                <input [id]=\"option.name\"\n                       [name]=\"option.name\"\n                       [formControlName]=\"option.name\"\n                       type=\"text\"\n                       cdsText\n                       [ngDataReady]=\"ngDataReady\"\n                       [invalid]=\"form.get('configuration').controls[option.name].invalid && (form.get('configuration').controls[option.name].dirty)\"\n                       cdMilliseconds>\n              </ng-container>\n              <ng-container *ngSwitchCase=\"configurationType.bps\">\n                <input [id]=\"option.name\"\n                       [name]=\"option.name\"\n                       [formControlName]=\"option.name\"\n                       type=\"text\"\n                       cdsText\n                       defaultUnit=\"b\"\n                       [ngDataReady]=\"ngDataReady\"\n                       [invalid]=\"form.get('configuration').controls[option.name].invalid && (form.get('configuration').controls[option.name].dirty)\"\n                       cdDimlessBinaryPerSecond>\n              </ng-container>\n              <ng-container *ngSwitchCase=\"configurationType.iops\">\n                <input [id]=\"option.name\"\n                       [name]=\"option.name\"\n                       [formControlName]=\"option.name\"\n                       type=\"text\"\n                       cdsText\n                       [ngDataReady]=\"ngDataReady\"\n                       [invalid]=\"form.get('configuration').controls[option.name].invalid && (form.get('configuration').controls[option.name].dirty)\"\n                       cdIops>\n              </ng-container>\n            </ng-container>\n            <cds-icon-button kind=\"ghost\"\n                             size=\"md\"\n                             (click)=\"reset(option.name)\"\n                             data-toggle=\"button\">\n              <svg cdsIcon=\"close\"\n                   size=\"32\"\n                   class=\"cds--btn__icon\"\n                   *ngIf=\"!form.get('configuration').get(option.name).disabled; else resetIcon\"></svg>\n              <ng-template #resetIcon>\n                <svg cdsIcon=\"reset\"\n                     size=\"32\"\n                     *ngIf=\"form.get('configuration').get(option.name).disabled\"></svg>\n              </ng-template>\n            </cds-icon-button>\n            <ng-template #formError>\n              <span class=\"invalid-feedback\"\n                    *ngIf=\"form.showError('configuration.' + option.name, cfgFormGroup, 'min')\"\n                    i18n>The minimum value is 0.</span>\n            </ng-template>\n          </div>\n        </cds-text-label>\n      </div>\n    </div>\n  </div>\n</fieldset>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { UntypedFormControl, Validators } from '@angular/forms';\n\nimport _ from 'lodash';\nimport { ReplaySubject } from 'rxjs';\n\nimport { Icons } from '~/app/shared/enum/icons.enum';\nimport { CdFormGroup } from '~/app/shared/forms/cd-form-group';\nimport {\n  RbdConfigurationEntry,\n  RbdConfigurationSourceField,\n  RbdConfigurationType\n} from '~/app/shared/models/configuration';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { RbdConfigurationService } from '~/app/shared/services/rbd-configuration.service';\n\n@Component({\n  selector: 'cd-rbd-configuration-form',\n  templateUrl: './rbd-configuration-form.component.html',\n  styleUrls: ['./rbd-configuration-form.component.scss']\n})\nexport class RbdConfigurationFormComponent implements OnInit {\n  @Input()\n  form: CdFormGroup;\n  @Input()\n  initializeData = new ReplaySubject<{\n    initialData: RbdConfigurationEntry[];\n    sourceType: RbdConfigurationSourceField;\n  }>(1);\n  @Output()\n  changes = new EventEmitter<any>();\n\n  icons = Icons;\n\n  ngDataReady = new EventEmitter<any>();\n  initialData: RbdConfigurationEntry[];\n  configurationType = RbdConfigurationType;\n  sectionVisibility: { [key: string]: boolean } = {};\n\n  constructor(\n    public formatterService: FormatterService,\n    public rbdConfigurationService: RbdConfigurationService\n  ) {}\n\n  ngOnInit() {\n    const configFormGroup = this.createConfigurationFormGroup();\n    this.form.addControl('configuration', configFormGroup);\n\n    // Listen to changes and emit the values to the parent component\n    configFormGroup.valueChanges.subscribe(() => {\n      this.changes.emit(this.getDirtyValues.bind(this));\n    });\n\n    if (this.initializeData) {\n      this.initializeData.subscribe((data: Record<string, any>) => {\n        this.initialData = data.initialData;\n        const dataType = data.sourceType;\n        this.rbdConfigurationService.getWritableOptionFields().forEach((option) => {\n          const optionData = data.initialData\n            .filter((entry: Record<string, any>) => entry.name === option.name)\n            .pop();\n          if (optionData && optionData['source'] === dataType) {\n            this.form.get(`configuration.${option.name}`).setValue(optionData['value']);\n          }\n        });\n        this.ngDataReady.emit();\n      });\n    }\n\n    this.rbdConfigurationService\n      .getWritableSections()\n      .forEach((section) => (this.sectionVisibility[section.class] = true));\n  }\n\n  getDirtyValues(includeLocalValues = false, localFieldType?: RbdConfigurationSourceField) {\n    if (includeLocalValues && !localFieldType) {\n      const msg =\n        'ProgrammingError: If local values shall be included, a proper localFieldType argument has to be provided, too';\n      throw new Error(msg);\n    }\n    const result = {};\n\n    this.rbdConfigurationService.getWritableOptionFields().forEach((config) => {\n      const control: any = this.form.get('configuration').get(config.name);\n      const dirty = control.dirty;\n\n      if (this.initialData && this.initialData[config.name] === control.value) {\n        return; // Skip controls with initial data loaded\n      }\n\n      if (dirty || (includeLocalValues && control['source'] === localFieldType)) {\n        if (control.value === null) {\n          result[config.name] = control.value;\n        } else if (config.type === RbdConfigurationType.bps) {\n          result[config.name] = this.formatterService.toBytes(control.value);\n        } else if (config.type === RbdConfigurationType.milliseconds) {\n          result[config.name] = this.formatterService.toMilliseconds(control.value);\n        } else if (config.type === RbdConfigurationType.iops) {\n          result[config.name] = this.formatterService.toIops(control.value);\n        } else {\n          result[config.name] = control.value;\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Dynamically create form controls.\n   */\n  private createConfigurationFormGroup() {\n    const configFormGroup = new CdFormGroup({});\n\n    this.rbdConfigurationService.getWritableOptionFields().forEach((c) => {\n      let control: UntypedFormControl;\n      if (\n        c.type === RbdConfigurationType.milliseconds ||\n        c.type === RbdConfigurationType.iops ||\n        c.type === RbdConfigurationType.bps\n      ) {\n        let initialValue = 0;\n        _.forEach(this.initialData, (configList) => {\n          if (configList['name'] === c.name) {\n            initialValue = configList['value'];\n          }\n        });\n        control = new UntypedFormControl(initialValue, Validators.min(0));\n      } else {\n        throw new Error(\n          `Type ${c.type} is unknown, you may need to add it to RbdConfiguration class`\n        );\n      }\n      configFormGroup.addControl(c.name, control);\n    });\n\n    return configFormGroup;\n  }\n\n  /**\n   * Reset the value. The inherited value will be used instead.\n   */\n  reset(optionName: string) {\n    const formControl: any = this.form.get('configuration').get(optionName);\n    if (formControl.disabled) {\n      formControl.setValue(formControl['previousValue'] || 0);\n      formControl.enable();\n      if (!formControl['previousValue']) {\n        formControl.markAsPristine();\n      }\n    } else {\n      formControl['previousValue'] = formControl.value;\n      formControl.setValue(null);\n      formControl.markAsDirty();\n      formControl.disable();\n    }\n  }\n\n  isDisabled(optionName: string) {\n    return this.form.get('configuration').get(optionName).disabled;\n  }\n\n  toggleSectionVisibility(className: string) {\n    this.sectionVisibility[className] = !this.sectionVisibility[className];\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'rbdConfigurationSource'\n})\nexport class RbdConfigurationSourcePipe implements PipeTransform {\n  transform(value: any): any {\n    const sourceMap = {\n      0: 'global',\n      1: 'pool',\n      2: 'image'\n    };\n    return sourceMap[value];\n  }\n}\n","<cd-table #poolConfTable\n          [data]=\"data\"\n          [columns]=\"poolConfigurationColumns\"\n          identifier=\"name\">\n</cd-table>\n\n<ng-template #configurationSourceTpl\n             let-value=\"data.value\">\n\n  <div [ngSwitch]=\"value\">\n    <span *ngSwitchCase=\"'global'\"\n          i18n>Global</span>\n    <strong *ngSwitchCase=\"'image'\"\n            i18n>Image</strong>\n    <strong *ngSwitchCase=\"'pool'\"\n            i18n>Pool</strong>\n  </div>\n</ng-template>\n\n<ng-template #configurationValueTpl\n             let-row=\"data.row\"\n             let-value=\"data.value\">\n  <div [ngSwitch]=\"row.type\">\n    <span *ngSwitchCase=\"typeField.bps\">{{ value | dimlessBinaryPerSecond }}</span>\n    <span *ngSwitchCase=\"typeField.milliseconds\">{{ value | milliseconds }}</span>\n    <span *ngSwitchCase=\"typeField.iops\">{{ value | iops }}</span>\n    <span *ngSwitchDefault>{{ value }}</span>\n  </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, TemplateRef, ViewChild } from '@angular/core';\n\nimport { TableComponent } from '~/app/shared/datatable/table/table.component';\nimport { CdTableColumn } from '~/app/shared/models/cd-table-column';\nimport {\n  RbdConfigurationEntry,\n  RbdConfigurationSourceField,\n  RbdConfigurationType\n} from '~/app/shared/models/configuration';\nimport { RbdConfigurationSourcePipe } from '~/app/shared/pipes/rbd-configuration-source.pipe';\nimport { FormatterService } from '~/app/shared/services/formatter.service';\nimport { RbdConfigurationService } from '~/app/shared/services/rbd-configuration.service';\n\n@Component({\n  selector: 'cd-rbd-configuration-table',\n  templateUrl: './rbd-configuration-list.component.html',\n  styleUrls: ['./rbd-configuration-list.component.scss']\n})\nexport class RbdConfigurationListComponent implements OnInit, OnChanges {\n  @Input()\n  data: RbdConfigurationEntry[];\n  poolConfigurationColumns: CdTableColumn[];\n  @ViewChild('configurationSourceTpl', { static: true })\n  configurationSourceTpl: TemplateRef<any>;\n  @ViewChild('configurationValueTpl', { static: true })\n  configurationValueTpl: TemplateRef<any>;\n  @ViewChild('poolConfTable', { static: true })\n  poolConfTable: TableComponent;\n\n  readonly sourceField = RbdConfigurationSourceField;\n  readonly typeField = RbdConfigurationType;\n\n  constructor(\n    public formatterService: FormatterService,\n    private rbdConfigurationService: RbdConfigurationService\n  ) {}\n\n  ngOnInit() {\n    this.poolConfigurationColumns = [\n      { prop: 'displayName', name: $localize`Name` },\n      { prop: 'description', name: $localize`Description` },\n      { prop: 'name', name: $localize`Key` },\n      {\n        prop: 'source',\n        name: $localize`Source`,\n        cellTemplate: this.configurationSourceTpl,\n        pipe: new RbdConfigurationSourcePipe()\n      },\n      { prop: 'value', name: $localize`Value`, cellTemplate: this.configurationValueTpl }\n    ];\n  }\n\n  ngOnChanges(): void {\n    if (!this.data) {\n      return;\n    }\n    // Filter settings out which are not listed in RbdConfigurationService\n    this.data = this.data.filter((row) =>\n      this.rbdConfigurationService\n        .getOptionFields()\n        .map((o) => o.name)\n        .includes(row.name)\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { cdEncode, cdEncodeNot } from '../decorators/cd-encode';\nimport { MirroringSummary } from '../models/mirroring-summary';\nimport { TimerService } from '../services/timer.service';\n\n@cdEncode\n@Injectable({\n  providedIn: 'root'\n})\nexport class RbdMirroringService {\n  readonly REFRESH_INTERVAL = 30000;\n  // Observable sources\n  private summaryDataSource = new BehaviorSubject<MirroringSummary>(null);\n  // Observable streams\n  summaryData$ = this.summaryDataSource.asObservable();\n\n  constructor(private http: HttpClient, private timerService: TimerService) {}\n\n  startPolling(): Subscription {\n    return this.timerService\n      .get(() => this.retrieveSummaryObservable(), this.REFRESH_INTERVAL)\n      .subscribe(this.retrieveSummaryObserver());\n  }\n\n  refresh(): Subscription {\n    return this.retrieveSummaryObservable().subscribe(this.retrieveSummaryObserver());\n  }\n\n  private retrieveSummaryObservable(): Observable<MirroringSummary> {\n    return this.http.get('api/block/mirroring/summary');\n  }\n\n  private retrieveSummaryObserver(): (data: MirroringSummary) => void {\n    return (data: any) => {\n      this.summaryDataSource.next(data);\n    };\n  }\n\n  /**\n   * Subscribes to the summaryData,\n   * which is updated periodically or when a new task is created.\n   */\n  subscribeSummary(\n    next: (summary: MirroringSummary) => void,\n    error?: (error: any) => void\n  ): Subscription {\n    return this.summaryData$.pipe(filter((value) => !!value)).subscribe(next, error);\n  }\n\n  getPool(poolName: string) {\n    return this.http.get(`api/block/mirroring/pool/${poolName}`);\n  }\n\n  updatePool(poolName: string, request: any) {\n    return this.http.put(`api/block/mirroring/pool/${poolName}`, request, { observe: 'response' });\n  }\n\n  getSiteName() {\n    return this.http.get(`api/block/mirroring/site_name`);\n  }\n\n  setSiteName(@cdEncodeNot siteName: string) {\n    return this.http.put(\n      `api/block/mirroring/site_name`,\n      { site_name: siteName },\n      { observe: 'response' }\n    );\n  }\n\n  createBootstrapToken(poolName: string) {\n    return this.http.post(`api/block/mirroring/pool/${poolName}/bootstrap/token`, {});\n  }\n\n  importBootstrapToken(\n    poolName: string,\n    @cdEncodeNot direction: string,\n    @cdEncodeNot token: string\n  ) {\n    const request = {\n      direction: direction,\n      token: token\n    };\n    return this.http.post(`api/block/mirroring/pool/${poolName}/bootstrap/peer`, request, {\n      observe: 'response'\n    });\n  }\n\n  getPeer(poolName: string, peerUUID: string) {\n    return this.http.get(`api/block/mirroring/pool/${poolName}/peer/${peerUUID}`);\n  }\n\n  getPeerForPool(poolName: string) {\n    return this.http.get(`api/block/mirroring/pool/${poolName}/peer`);\n  }\n\n  addPeer(poolName: string, request: any) {\n    return this.http.post(`api/block/mirroring/pool/${poolName}/peer`, request, {\n      observe: 'response'\n    });\n  }\n\n  updatePeer(poolName: string, peerUUID: string, request: any) {\n    return this.http.put(`api/block/mirroring/pool/${poolName}/peer/${peerUUID}`, request, {\n      observe: 'response'\n    });\n  }\n\n  deletePeer(poolName: string, peerUUID: string) {\n    return this.http.delete(`api/block/mirroring/pool/${poolName}/peer/${peerUUID}`, {\n      observe: 'response'\n    });\n  }\n}\n"],"x_google_ignoreList":[19,20,21,22,102,103]}