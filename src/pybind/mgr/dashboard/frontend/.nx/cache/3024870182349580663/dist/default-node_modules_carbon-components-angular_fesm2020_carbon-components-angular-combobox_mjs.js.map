{"version":3,"file":"default-node_modules_carbon-components-angular_fesm2020_carbon-components-angular-combobox_mjs.js","mappings":"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","names":["_c0","_c1","_c2","_c4","a0","a1","a2","_c5","a3","a4","a5","a6","a7","a8","a9","_c6","_c7","_c8","_c9","_c10","_c11","ComboBox_label_1_ng_container_1_Template","rf","ctx","i0","ctx_r1","label","ComboBox_label_1_2_ng_template_0_Template","ComboBox_label_1_2_Template","ComboBox_label_1_Template","id","labelId","disabled","hideLabel","isTemplate","ComboBox_div_5_Template","_r3","$event","clearSelected","onBlur","readonly","pills","length","clearSelectionsTitle","clearSelectionAria","ComboBox__svg_svg_8_Template","ComboBox__svg_svg_9_Template","ComboBox_div_10_Template","_r4","clearInput","clearSelectionTitle","ComboBox_ng_content_15_Template","ComboBox_hr_16_Template","ComboBox_div_17_ng_container_1_Template","helperText","ComboBox_div_17_2_ng_template_0_Template","ComboBox_div_17_2_Template","ComboBox_div_17_Template","ComboBox_div_18_ng_container_1_Template","invalidText","ComboBox_div_18_2_ng_template_0_Template","ComboBox_div_18_2_Template","ComboBox_div_18_Template","ComboBox_div_19_ng_container_1_Template","warnText","ComboBox_div_19_2_ng_template_0_Template","ComboBox_div_19_2_Template","ComboBox_div_19_Template","ComboBox","constructor","elementRef","dropdownService","i18n","this","comboBoxCount","items","type","size","appendInline","invalid","warn","maxLength","theme","selectionFeedback","autocomplete","fluid","selected","EventEmitter","submit","close","search","clear","hostClass","open","showClearButton","selectedValue","outsideClick","_outsideClick","bind","keyboardNav","_keyboardNav","_dropUp","noop","_noop","onTouchedCallback","propagateChangeCallback","_placeholder","getOverridable","_closeMenuAria","_openMenuAria","_clearSelectionsTitle","_clearSelectionsAria","_clearSelectionTitle","_clearSelectionAria","_isFocused","placeholder","value","override","openMenuAria","closeMenuAria","clearSelectionsAria","ngOnChanges","changes","view","currentValue","updateSelected","onSearch","input","nativeElement","ngAfterContentInit","isUpdate","event","select","subscribe","Array","isArray","updatePills","itemValueKey","getSelected","values","map","item","emit","content","querySelector","focus","filterBy","closeDropdown","setTimeout","blurIntent","pipe","filter","v","ngAfterViewInit","hasScrollableParents","ngOnDestroy","_appendToDropdown","hostkeys","ev","key","dropdownMenu","contains","target","preventDefault","openDropdown","initFocus","shiftKey","writeValue","newValue","Object","assign","getListItems","find","propagateSelected","newValues","push","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","checkForReorder","document","removeEventListener","_appendToBody","addEventListener","dropUp","undefined","_shouldDropUp","toggleDropdown","searchString","shouldEmitSearch","reorderSelected","some","toLowerCase","includes","onSubmit","index","stopPropagation","TemplateRef","stopImmediatePropagation","dispatchEvent","KeyboardEvent","bubbles","cancelable","appendToBody","listbox","className","appendToDropdown","menu","menuRect","getBoundingClientRect","getScrollableParents","reduce","shouldDropUp","parent","parentRect","isBelowParent","bottom","handleFocus","topAfterReopen","ɵfac","__ngFactoryType__","i1","i2","ɵcmp","selectors","contentQueries","dirIndex","AbstractDropdownView","_t","first","viewQuery","hostVars","hostBindings","inputs","outputs","features","provide","NG_VALUE_ACCESSOR","useExisting","multi","ngContentSelectors","decls","vars","consts","template","_r1","listId","dependencies","i3","i4","encapsulation","ComboBoxModule","ɵmod","ɵinj","providers","DropdownService","imports","CommonModule","DropdownModule","I18nModule","UtilsModule","IconModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/carbon-components-angular/fesm2020/carbon-components-angular-combobox.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, HostBinding, HostListener, NgModule } from '@angular/core';\nimport * as i1 from 'carbon-components-angular/dropdown';\nimport { AbstractDropdownView, DropdownModule, DropdownService } from 'carbon-components-angular/dropdown';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filter } from 'rxjs/operators';\nimport { hasScrollableParents, getScrollableParents, UtilsModule } from 'carbon-components-angular/utils';\nimport * as i2 from 'carbon-components-angular/i18n';\nimport { I18nModule } from 'carbon-components-angular/i18n';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from 'carbon-components-angular/icon';\nimport { IconModule } from 'carbon-components-angular/icon';\n\n/**\n * Get started with importing the module:\n *\n * ```typescript\n * import { ComboBoxModule } from 'carbon-components-angular';\n * ```\n *\n * ComboBoxes are similar to dropdowns, except a combobox provides an input field for users to search items and (optionally) add their own.\n * Multi-select comboboxes also provide \"pills\" of selected items.\n *\n * [See demo](../../?path=/story/components-combobox--basic)\n */\nclass ComboBox {\n    /**\n     * Creates an instance of ComboBox.\n     */\n    constructor(elementRef, dropdownService, i18n) {\n        this.elementRef = elementRef;\n        this.dropdownService = dropdownService;\n        this.i18n = i18n;\n        this.id = `combobox-${ComboBox.comboBoxCount++}`;\n        this.labelId = `combobox-label-${ComboBox.comboBoxCount++}`;\n        /**\n         * List of items to fill the content with.\n         *\n         * **Example:**\n         * ```javascript\n         * items = [\n         *\t\t{\n         *\t\t\tcontent: \"Abacus\",\n         *\t\t\tselected: false\n         *\t\t},\n         *\t\t{\n         *\t\t\tcontent: \"Byte\",\n         *\t\t\tselected: false,\n         *\t\t},\n         *\t\t{\n         *\t\t\tcontent: \"Computer\",\n         *\t\t\tselected: false\n         *\t\t},\n         *\t\t{\n         *\t\t\tcontent: \"Digital\",\n         *\t\t\tselected: false\n         *\t\t}\n         * ];\n         * ```\n         *\n         */\n        this.items = [];\n        /**\n         * Combo box type (supporting single or multi selection of items).\n         */\n        this.type = \"single\";\n        /**\n         * Combo box render size.\n         */\n        this.size = \"md\";\n        /**\n         * Hide label while keeping it accessible for screen readers\n         */\n        this.hideLabel = false;\n        /**\n         * set to `true` to place the dropdown view inline with the component\n         */\n        this.appendInline = null;\n        /**\n         * Set to `true` to show the invalid state.\n         */\n        this.invalid = false;\n        /**\n        * Set to `true` to show a warning (contents set by warnText)\n        */\n        this.warn = false;\n        /**\n         * Max length value to limit input characters\n         */\n        this.maxLength = null;\n        /**\n         * @deprecated since v5 - Use `cdsLayer` directive instead\n         */\n        this.theme = \"dark\";\n        /**\n         * Specify feedback (mode) of the selection.\n         * `top`: selected item jumps to top\n         * `fixed`: selected item stays at its position\n         * `top-after-reopen`: selected item jump to top after reopen dropdown\n         */\n        this.selectionFeedback = \"top-after-reopen\";\n        /**\n         * Specify aria-autocomplete attribute of text input.\n         * \"list\", is the expected value for a combobox that invokes a drop-down list\n         */\n        this.autocomplete = \"list\";\n        /**\n         * Set to `true` to disable combobox.\n         */\n        this.disabled = false;\n        /**\n         * Set to `true` for readonly state.\n         */\n        this.readonly = false;\n        /**\n         * Experimental: enable fluid state\n         */\n        this.fluid = false;\n        /**\n         * Emits a ListItem\n         *\n         * Example:\n         * ```javascript\n         * {\n         * \t\tcontent: \"one\",\n         * \t\tselected: true\n         * }\n         * ```\n         */\n        this.selected = new EventEmitter();\n        /**\n         * Intended to be used to add items to the list.\n         *\n         * Emits an event that includes the current item list, the suggested index for the new item, and a simple ListItem\n         *\n         * Example:\n         * ```javascript\n         *\t{\n         *\t\titems: [{content: \"one\", selected: true}, {content: \"two\", selected: true}],\n         *\t\tindex: 1,\n         *\t\tvalue: {\n         *\t\t\tcontent: \"some user string\",\n         *\t\t\tselected: false\n         *\t\t}\n         *\t}\n         * ```\n         *\n         *\n         * Example:\n         * ```javascript\n         * {\n         *\tafter: 1,\n         *\tvalue: \"some user string\"\n         * }\n         * ```\n         */\n        this.submit = new EventEmitter();\n        /** Emits an empty event when the menu is closed */\n        this.close = new EventEmitter();\n        /** Emits the search string from the input */\n        this.search = new EventEmitter();\n        /** Emits an event when the clear button is clicked. */\n        this.clear = new EventEmitter();\n        this.hostClass = true;\n        this.open = false;\n        this.showClearButton = false;\n        /** Selected items for multi-select combo-boxes. */\n        this.pills = [];\n        /** used to update the displayValue */\n        this.selectedValue = \"\";\n        this.outsideClick = this._outsideClick.bind(this);\n        this.keyboardNav = this._keyboardNav.bind(this);\n        /**\n         * controls whether the `drop-up` class is applied\n         */\n        this._dropUp = false;\n        this.noop = this._noop.bind(this);\n        this.onTouchedCallback = this._noop;\n        this.propagateChangeCallback = this._noop;\n        this._placeholder = this.i18n.getOverridable(\"COMBOBOX.PLACEHOLDER\");\n        this._closeMenuAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLOSE_MENU\");\n        this._openMenuAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.OPEN_MENU\");\n        this._clearSelectionsTitle = this.i18n.getOverridable(\"COMBOBOX.CLEAR_SELECTIONS\");\n        this._clearSelectionsAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLEAR_SELECTIONS\");\n        this._clearSelectionTitle = this.i18n.getOverridable(\"COMBOBOX.CLEAR_SELECTED\");\n        this._clearSelectionAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLEAR_SELECTED\");\n        this._isFocused = false;\n    }\n    /**\n     * Text to show when nothing is selected.\n     */\n    set placeholder(value) {\n        this._placeholder.override(value);\n    }\n    get placeholder() {\n        return this._placeholder.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when closed\n     */\n    set openMenuAria(value) {\n        this._openMenuAria.override(value);\n    }\n    get openMenuAria() {\n        return this._openMenuAria.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when opened\n     */\n    set closeMenuAria(value) {\n        this._closeMenuAria.override(value);\n    }\n    get closeMenuAria() {\n        return this._closeMenuAria.value;\n    }\n    /**\n     * Value to display on the clear selections icon, when multi is selected\n     */\n    set clearSelectionsTitle(value) {\n        this._clearSelectionsTitle.override(value);\n    }\n    get clearSelectionsTitle() {\n        return this._clearSelectionsTitle.value;\n    }\n    /**\n     * Value to display for accessibility purposes to clear selections, when multi is selected\n     */\n    set clearSelectionsAria(value) {\n        this._clearSelectionsAria.override(value);\n    }\n    get clearSelectionsAria() {\n        return this._clearSelectionsAria.value;\n    }\n    /**\n     * Value to display on the clear the selected item icon, when single is selected\n     */\n    set clearSelectionTitle(value) {\n        this._clearSelectionTitle.override(value);\n    }\n    get clearSelectionTitle() {\n        return this._clearSelectionTitle.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the clear the selected item icon, when single is selected\n     */\n    set clearSelectionAria(value) {\n        this._clearSelectionAria.override(value);\n    }\n    get clearSelectionAria() {\n        return this._clearSelectionAria.value;\n    }\n    /**\n     * Lifecycle hook.\n     * Updates pills if necessary.\n     *\n     */\n    ngOnChanges(changes) {\n        if (changes.items) {\n            this.view.items = changes.items.currentValue;\n            this.updateSelected();\n            // If new items are added into the combobox while there is search input,\n            // repeat the search. Search should only trigger for type 'single' when there is no value selected.\n            if (this.type === \"multi\" || (this.type === \"single\" && !this.selectedValue)) {\n                this.onSearch(this.input.nativeElement.value, false);\n            }\n        }\n    }\n    /**\n     * Sets initial state that depends on child components\n     * Subscribes to select events and handles focus/filtering/initial list updates\n     */\n    ngAfterContentInit() {\n        if (this.view) {\n            this.view.type = this.type;\n            // function to check if the event is organic (isUpdate === false) or programmatic\n            const isUpdate = event => event && event.isUpdate;\n            this.view.select.subscribe(event => {\n                if (Array.isArray(event)) {\n                    this.updatePills();\n                    if (!isUpdate(event)) {\n                        if (this.itemValueKey && this.view.getSelected()) {\n                            const values = this.view.getSelected().map(item => item[this.itemValueKey]);\n                            this.propagateChangeCallback(values);\n                            // otherwise just pass up the values from `getSelected`\n                        }\n                        else {\n                            this.propagateChangeCallback(this.view.getSelected());\n                        }\n                        this.selected.emit(event);\n                    }\n                }\n                else {\n                    // If type is single, dropdown list will emit an object\n                    if (event.item && event.item.selected) {\n                        this.showClearButton = true;\n                        this.selectedValue = event.item.content;\n                        if (!isUpdate(event)) {\n                            if (this.itemValueKey) {\n                                this.propagateChangeCallback(event.item[this.itemValueKey]);\n                            }\n                            else {\n                                this.propagateChangeCallback(event.item);\n                            }\n                        }\n                    }\n                    else {\n                        this.selectedValue = \"\";\n                        if (!isUpdate(event)) {\n                            this.propagateChangeCallback(null);\n                        }\n                    }\n                    // not guarding these since the nativeElement has to be loaded\n                    // for select to even fire\n                    // only focus for \"organic\" selections\n                    if (!isUpdate(event)) {\n                        this.elementRef.nativeElement.querySelector(\"input\").focus();\n                        this.view.filterBy(\"\");\n                        this.selected.emit(event.item);\n                    }\n                    this.closeDropdown();\n                }\n            });\n            // update the rest of combobox with any pre-selected items\n            // setTimeout just defers the call to the next check cycle\n            setTimeout(() => {\n                this.updateSelected();\n            });\n            this.view.blurIntent.pipe(filter(v => v === \"top\")).subscribe(() => {\n                this.elementRef.nativeElement.querySelector(\".cds--text-input\").focus();\n            });\n        }\n    }\n    /**\n     * Binds event handlers against the rendered view\n     */\n    ngAfterViewInit() {\n        // if appendInline is default valued (null) we should:\n        // 1. if there are scrollable parents (not including body) don't append inline\n        //    this should also cover the case where the dropdown is in a modal\n        //    (where we _do_ want to append to the placeholder)\n        if (this.appendInline === null && hasScrollableParents(this.elementRef.nativeElement)) {\n            this.appendInline = false;\n            // 2. otherwise we should append inline\n        }\n        else if (this.appendInline === null) {\n            this.appendInline = true;\n        }\n    }\n    /**\n     * Removing the `Dropdown` from the body if it is appended to the body.\n     */\n    ngOnDestroy() {\n        if (!this.appendInline) {\n            this._appendToDropdown();\n        }\n    }\n    /**\n     * Handles `Escape/Tab` key closing the dropdown, and arrow up/down focus to/from the dropdown list.\n     */\n    hostkeys(ev) {\n        if (ev.key === \"Escape\") {\n            this.closeDropdown();\n        }\n        else if ((ev.key === \"ArrowDown\")\n            && (!this.dropdownMenu || !this.dropdownMenu.nativeElement.contains(ev.target))) {\n            ev.preventDefault();\n            this.openDropdown();\n            setTimeout(() => { this.view.initFocus(); }, 0);\n        }\n        if (this.open && ev.key === \"Tab\" &&\n            (this.dropdownMenu.nativeElement.contains(ev.target) || ev.target === this.input.nativeElement)) {\n            this.closeDropdown();\n        }\n        if (this.open && ev.key === \"Tab\" && ev.shiftKey) {\n            this.closeDropdown();\n        }\n    }\n    /*\n     * no-op method for null event listeners, and other no op calls\n     */\n    _noop() { }\n    /*\n     * propagates the value provided from ngModel\n     */\n    writeValue(value) {\n        if (this.type === \"single\") {\n            if (this.itemValueKey) {\n                // clone the specified item and update its state\n                const newValue = Object.assign({}, this.view.getListItems().find(item => item[this.itemValueKey] === value));\n                newValue.selected = true;\n                this.view.propagateSelected([newValue]);\n            }\n            else {\n                // all items in propagateSelected must be iterable\n                this.view.propagateSelected([value || \"\"]);\n            }\n            this.showClearButton = !!(value && this.view.getSelected().length);\n        }\n        else {\n            if (this.itemValueKey) {\n                // clone the items and update their state based on the received value array\n                // this way we don't lose any additional metadata that may be passed in via the `items` Input\n                let newValues = [];\n                for (const v of value) {\n                    for (const item of this.view.getListItems()) {\n                        if (item[this.itemValueKey] === v) {\n                            newValues.push(Object.assign({}, item, { selected: true }));\n                        }\n                    }\n                }\n                this.view.propagateSelected(newValues);\n            }\n            else {\n                this.view.propagateSelected(value ? value : [\"\"]);\n            }\n        }\n        this.updateSelected();\n    }\n    onBlur() {\n        this.onTouchedCallback();\n    }\n    registerOnChange(fn) {\n        this.propagateChangeCallback = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the combobox.\n     *\n     * ex: `this.formGroup.get(\"myCoolCombobox\").disable();`\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Called by `n-pill-input` when the selected pills have changed.\n     */\n    updatePills() {\n        this.pills = this.view.getSelected() || [];\n        this.checkForReorder();\n    }\n    clearSelected(event) {\n        this.items = this.items.map(item => {\n            if (!item.disabled) {\n                item.selected = false;\n            }\n            return item;\n        });\n        this.view.items = this.items;\n        this.updatePills();\n        // clearSelected can only fire on type=multi\n        // so we just emit getSelected() (just in case there's any disabled but selected items)\n        const selected = this.view.getSelected();\n        // in case there are disabled items they should be mapped according to itemValueKey\n        if (this.itemValueKey && selected) {\n            const values = selected.map((item) => item[this.itemValueKey]);\n            this.propagateChangeCallback(values);\n        }\n        else {\n            this.propagateChangeCallback(selected);\n        }\n        this.selected.emit(selected);\n        this.clear.emit(event);\n    }\n    /**\n     * Closes the dropdown and emits the close event.\n     */\n    closeDropdown() {\n        this.open = false;\n        this.checkForReorder();\n        this.close.emit();\n        if (!this.appendInline) {\n            this._appendToDropdown();\n        }\n        document.removeEventListener(\"click\", this.outsideClick, true);\n    }\n    /**\n     * Opens the dropdown.\n     */\n    openDropdown() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.open = true;\n        this._dropUp = false;\n        if (!this.appendInline) {\n            this._appendToBody();\n        }\n        document.addEventListener(\"click\", this.outsideClick, true);\n        // set the dropdown menu to drop up if it is near the bottom of the screen\n        // setTimeout lets us do the calculations after it is visible in the DOM\n        setTimeout(() => {\n            if (this.dropUp === null || this.dropUp === undefined) {\n                this._dropUp = this._shouldDropUp();\n            }\n        }, 0);\n    }\n    /**\n     * Toggles the dropdown.\n     */\n    toggleDropdown() {\n        if (this.open) {\n            this.closeDropdown();\n        }\n        else {\n            this.openDropdown();\n        }\n    }\n    /**\n     * Sets the list group filter, and manages single select item selection.\n     */\n    onSearch(searchString, shouldEmitSearch = true) {\n        if (shouldEmitSearch) {\n            this.search.emit(searchString);\n        }\n        this.showClearButton = !!searchString;\n        this.view.filterBy(searchString);\n        if (searchString !== \"\") {\n            if (!this.open) {\n                this.openDropdown();\n            }\n        }\n        else {\n            this.selectedValue = \"\";\n            if (this.type === \"multi\" &&\n                (this.selectionFeedback === \"top\" || this.selectionFeedback === \"top-after-reopen\")) {\n                this.view.reorderSelected();\n            }\n        }\n        if (this.type === \"single\") {\n            // deselect if the input doesn't match the content\n            // of any given item\n            const matches = this.view.getListItems().some(item => item.content.toLowerCase().includes(searchString.toLowerCase()));\n            if (!matches) {\n                const selected = this.view.getSelected();\n                if (!selected || !selected[0]) {\n                    this.view.filterBy(searchString);\n                }\n            }\n        }\n    }\n    /**\n     * Intended to be used to add items to the list.\n     */\n    onSubmit(event) {\n        this.submit.emit({\n            items: this.view.getListItems(),\n            index: 0,\n            value: {\n                content: event.target.value,\n                selected: false\n            }\n        });\n    }\n    clearInput(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (this.type === \"single\") { // don't want to clear selected or close if multi\n            this.clearSelected(event);\n            this.closeDropdown();\n        }\n        this.selectedValue = \"\";\n        this.input.nativeElement.value = \"\";\n        this.showClearButton = false;\n        this.input.nativeElement.focus();\n        this.onSearch(this.input.nativeElement.value);\n    }\n    isTemplate(value) {\n        return value instanceof TemplateRef;\n    }\n    /**\n     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.\n     */\n    _keyboardNav(event) {\n        if ((event.key === \"Escape\") && this.open) {\n            event.stopImmediatePropagation(); // don't unintentionally close modal if inside of it\n        }\n        if (event.key === \"Escape\") {\n            event.preventDefault();\n            this.closeDropdown();\n            this.input.nativeElement.focus();\n        }\n        else if (this.open && event.key === \"Tab\") {\n            // this way focus will start on the next focusable item from the dropdown\n            // not the top of the body!\n            this.input.nativeElement.focus();\n            this.input.nativeElement.dispatchEvent(new KeyboardEvent(\"keydown\", { bubbles: true, cancelable: true, key: \"Tab\" }));\n            this.closeDropdown();\n        }\n    }\n    /**\n     * Creates the `Dropdown` list as an element that is appended to the DOM body.\n     */\n    _appendToBody() {\n        this.dropdownService.appendToBody(this.listbox.nativeElement, this.dropdownMenu.nativeElement, `${this.elementRef.nativeElement.className}${this.open ? \" cds--list-box--expanded\" : \"\"}`);\n        this.dropdownMenu.nativeElement.addEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.\n     */\n    _appendToDropdown() {\n        this.dropdownService.appendToDropdown(this.elementRef.nativeElement);\n        this.dropdownMenu.nativeElement.removeEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Detects whether or not the `Dropdown` list is visible within all scrollable parents.\n     * This can be overridden by passing in a value to the `dropUp` input.\n     */\n    _shouldDropUp() {\n        // check if dropdownMenu exists first.\n        const menu = this.dropdownMenu && this.dropdownMenu.nativeElement.querySelector(\".cds--list-box__menu\");\n        // check if menu exists first.\n        const menuRect = menu && menu.getBoundingClientRect();\n        if (menu && menuRect) {\n            const scrollableParents = getScrollableParents(menu);\n            return scrollableParents.reduce((shouldDropUp, parent) => {\n                const parentRect = parent.getBoundingClientRect();\n                const isBelowParent = !(menuRect.bottom <= parentRect.bottom);\n                return shouldDropUp || isBelowParent;\n            }, false);\n        }\n        return false;\n    }\n    /**\n     * Handles clicks outside of the `Dropdown` list.\n     */\n    _outsideClick(event) {\n        if (!this.elementRef.nativeElement.contains(event.target) &&\n            // if we're appendToBody the list isn't within the _elementRef,\n            // so we've got to check if our target is possibly in there too.\n            !this.dropdownMenu.nativeElement.contains(event.target)) {\n            this.closeDropdown();\n        }\n    }\n    handleFocus(event) {\n        this._isFocused = event.type === \"focus\";\n    }\n    updateSelected() {\n        const selected = this.view.getSelected();\n        if (this.type === \"multi\") {\n            this.updatePills();\n        }\n        else if (selected) {\n            const value = selected[0] ? selected[0].content : \"\";\n            const changeCallbackValue = selected[0] ? selected[0] : \"\";\n            this.selectedValue = value;\n            this.showClearButton = !!value;\n        }\n    }\n    checkForReorder() {\n        const topAfterReopen = !this.open && this.selectionFeedback === \"top-after-reopen\";\n        if ((this.type === \"multi\") && (topAfterReopen || this.selectionFeedback === \"top\")) {\n            this.view.reorderSelected(true);\n        }\n    }\n}\nComboBox.comboBoxCount = 0;\nComboBox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBox, deps: [{ token: i0.ElementRef }, { token: i1.DropdownService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });\nComboBox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.3.0\", type: ComboBox, selector: \"cds-combo-box, ibm-combo-box\", inputs: { placeholder: \"placeholder\", openMenuAria: \"openMenuAria\", closeMenuAria: \"closeMenuAria\", clearSelectionsTitle: \"clearSelectionsTitle\", clearSelectionsAria: \"clearSelectionsAria\", clearSelectionTitle: \"clearSelectionTitle\", clearSelectionAria: \"clearSelectionAria\", id: \"id\", labelId: \"labelId\", items: \"items\", type: \"type\", size: \"size\", itemValueKey: \"itemValueKey\", label: \"label\", hideLabel: \"hideLabel\", helperText: \"helperText\", appendInline: \"appendInline\", invalid: \"invalid\", invalidText: \"invalidText\", warn: \"warn\", warnText: \"warnText\", maxLength: \"maxLength\", theme: \"theme\", selectionFeedback: \"selectionFeedback\", autocomplete: \"autocomplete\", dropUp: \"dropUp\", disabled: \"disabled\", readonly: \"readonly\", fluid: \"fluid\" }, outputs: { selected: \"selected\", submit: \"submit\", close: \"close\", search: \"search\", clear: \"clear\" }, host: { listeners: { \"keydown\": \"hostkeys($event)\" }, properties: { \"class.cds--list-box__wrapper\": \"this.hostClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: ComboBox,\n            multi: true\n        }\n    ], queries: [{ propertyName: \"view\", first: true, predicate: AbstractDropdownView, descendants: true, static: true }], viewQueries: [{ propertyName: \"dropdownMenu\", first: true, predicate: [\"dropdownMenu\"], descendants: true }, { propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true, static: true }, { propertyName: \"listbox\", first: true, predicate: [\"listbox\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `\n\t\t<div\n\t\t\tclass=\"cds--list-box__wrapper\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--list-box__wrapper--fluid': fluid,\n\t\t\t\t'cds--list-box__wrapper--fluid--invalid': fluid && invalid,\n\t\t\t\t'cds--list-box__wrapper--fluid--focus': fluid && _isFocused\n\t\t\t}\">\n\t\t\t<label\n\t\t\t\t*ngIf=\"label\"\n\t\t\t\t[for]=\"id\"\n\t\t\t\t[id]=\"labelId\"\n\t\t\t\tclass=\"cds--label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--label--disabled': disabled,\n\t\t\t\t\t'cds--visually-hidden': hideLabel\n\t\t\t\t}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t</label>\n\t\t\t<div\n\t\t\t\t#listbox\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--multi-select cds--multi-select--filterable': type === 'multi',\n\t\t\t\t\t'cds--list-box--light': theme === 'light',\n\t\t\t\t\t'cds--list-box--expanded': open,\n\t\t\t\t\t'cds--list-box--sm': size === 'sm',\n\t\t\t\t\t'cds--list-box--md': size === 'md',\n\t\t\t\t\t'cds--list-box--lg': size === 'lg',\n\t\t\t\t\t'cds--list-box--disabled': disabled,\n\t\t\t\t\t'cds--combo-box--readonly': readonly,\n\t\t\t\t\t'cds--combo-box--warning cds--list-box--warning': warn,\n\t\t\t\t\t'cds--list-box--invalid': invalid\n\t\t\t\t}\"\n\t\t\t\tclass=\"cds--list-box cds--combo-box\"\n\t\t\t\t[attr.data-invalid]=\"(invalid ? true : null)\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"cds--list-box__field\"\n\t\t\t\t\t(click)=\"toggleDropdown()\"\n\t\t\t\t\t(blur)=\"onBlur()\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"type === 'multi' && pills.length > 0\"\n\t\t\t\t\t\tclass=\"cds--tag cds--tag--filter cds--tag--high-contrast\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--tag--disabled': disabled || readonly}\">\n\t\t\t\t\t\t<span class=\"cds--tag__label\">{{ pills.length }}</span>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t(click)=\"clearSelected($event)\"\n\t\t\t\t\t\t\t(blur)=\"onBlur()\"\n\t\t\t\t\t\t\t(keydown.enter)=\"clearSelected($event)\"\n\t\t\t\t\t\t\tclass=\"cds--tag__close-icon\"\n\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t[title]=\"clearSelectionsTitle\"\n\t\t\t\t\t\t\t[disabled]=\"disabled || readonly\"\n\t\t\t\t\t\t\t[attr.aria-label]=\"clearSelectionAria\">\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\twidth=\"16\"\n\t\t\t\t\t\t\t\theight=\"16\"\n\t\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t\t\t\t<path d=\"M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8z\"></path>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\t#input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\trole=\"combobox\"\n\t\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t\t[readOnly]=\"readonly\"\n\t\t\t\t\t\t(input)=\"onSearch($event.target.value)\"\n\t\t\t\t\t\t(focus)=\"fluid ? handleFocus($event) : null\"\n\t\t\t\t\t\t(blur)=\"fluid ? handleFocus($event) : onBlur()\"\n\t\t\t\t\t\t(keydown.enter)=\"onSubmit($event)\"\n\t\t\t\t\t\t[value]=\"selectedValue\"\n\t\t\t\t\t\tclass=\"cds--text-input\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--text-input--empty': !showClearButton}\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t[id]=\"id\"\n\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t[attr.aria-expanded]=\"open\"\n\t\t\t\t\t\taria-haspopup=\"listbox\"\n\t\t\t\t\t\t[attr.maxlength]=\"maxLength\"\n\t\t\t\t\t\t[attr.aria-controls]=\"open ? view?.listId : null\"\n\t\t\t\t\t\t[attr.aria-autocomplete]=\"autocomplete\"\n\t\t\t\t\t\t[placeholder]=\"placeholder\"/>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\t\t\tcdsIcon=\"warning--filled\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__invalid-icon\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"!invalid && warn\"\n\t\t\t\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__invalid-icon cds--list-box__invalid-icon--warning\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"showClearButton\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tclass=\"cds--list-box__selection\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t[attr.aria-label]=\"clearSelectionAria\"\n\t\t\t\t\t\t[title]=\"clearSelectionTitle\"\n\t\t\t\t\t\t(keyup.enter)=\"clearInput($event)\"\n\t\t\t\t\t\t(click)=\"clearInput($event)\"\n\t\t\t\t\t\t(blur)=\"onBlur()\">\n\t\t\t\t\t\t<svg cdsIcon=\"close\" size=\"16\"></svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tclass=\"cds--list-box__menu-icon\"\n\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t[title]=\"open ? closeMenuAria : openMenuAria\"\n\t\t\t\t\t\t[attr.aria-label]=\"open ? closeMenuAria : openMenuAria\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--list-box__menu-icon--open': open}\">\n\t\t\t\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\"></svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\t#dropdownMenu\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--list-box--up': this.dropUp !== null && this.dropUp !== undefined ? dropUp : _dropUp\n\t\t\t\t\t}\">\n\t\t\t\t\t<ng-content *ngIf=\"open\"></ng-content>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<hr *ngIf=\"fluid\" class=\"cds--list-box__divider\" />\n\t\t\t<div\n\t\t\t\t*ngIf=\"helperText && !invalid && !warn && !fluid\"\n\t\t\t\tclass=\"cds--form__helper-text\"\n\t\t\t\t[ngClass]=\"{'cds--form__helper-text--disabled': disabled}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"invalid\" class=\"cds--form-requirement\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"!invalid && warn\" class=\"cds--form-requirement\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t\t\t</div>\n\t\t</div>\n\t`, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i4.IconDirective, selector: \"[cdsIcon], [ibmIcon]\", inputs: [\"ibmIcon\", \"cdsIcon\", \"size\", \"title\", \"ariaLabel\", \"ariaLabelledBy\", \"ariaHidden\", \"isFocusable\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"cds-combo-box, ibm-combo-box\",\n                    template: `\n\t\t<div\n\t\t\tclass=\"cds--list-box__wrapper\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'cds--list-box__wrapper--fluid': fluid,\n\t\t\t\t'cds--list-box__wrapper--fluid--invalid': fluid && invalid,\n\t\t\t\t'cds--list-box__wrapper--fluid--focus': fluid && _isFocused\n\t\t\t}\">\n\t\t\t<label\n\t\t\t\t*ngIf=\"label\"\n\t\t\t\t[for]=\"id\"\n\t\t\t\t[id]=\"labelId\"\n\t\t\t\tclass=\"cds--label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--label--disabled': disabled,\n\t\t\t\t\t'cds--visually-hidden': hideLabel\n\t\t\t\t}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t</label>\n\t\t\t<div\n\t\t\t\t#listbox\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'cds--multi-select cds--multi-select--filterable': type === 'multi',\n\t\t\t\t\t'cds--list-box--light': theme === 'light',\n\t\t\t\t\t'cds--list-box--expanded': open,\n\t\t\t\t\t'cds--list-box--sm': size === 'sm',\n\t\t\t\t\t'cds--list-box--md': size === 'md',\n\t\t\t\t\t'cds--list-box--lg': size === 'lg',\n\t\t\t\t\t'cds--list-box--disabled': disabled,\n\t\t\t\t\t'cds--combo-box--readonly': readonly,\n\t\t\t\t\t'cds--combo-box--warning cds--list-box--warning': warn,\n\t\t\t\t\t'cds--list-box--invalid': invalid\n\t\t\t\t}\"\n\t\t\t\tclass=\"cds--list-box cds--combo-box\"\n\t\t\t\t[attr.data-invalid]=\"(invalid ? true : null)\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"cds--list-box__field\"\n\t\t\t\t\t(click)=\"toggleDropdown()\"\n\t\t\t\t\t(blur)=\"onBlur()\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"type === 'multi' && pills.length > 0\"\n\t\t\t\t\t\tclass=\"cds--tag cds--tag--filter cds--tag--high-contrast\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--tag--disabled': disabled || readonly}\">\n\t\t\t\t\t\t<span class=\"cds--tag__label\">{{ pills.length }}</span>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t(click)=\"clearSelected($event)\"\n\t\t\t\t\t\t\t(blur)=\"onBlur()\"\n\t\t\t\t\t\t\t(keydown.enter)=\"clearSelected($event)\"\n\t\t\t\t\t\t\tclass=\"cds--tag__close-icon\"\n\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\t[title]=\"clearSelectionsTitle\"\n\t\t\t\t\t\t\t[disabled]=\"disabled || readonly\"\n\t\t\t\t\t\t\t[attr.aria-label]=\"clearSelectionAria\">\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\twidth=\"16\"\n\t\t\t\t\t\t\t\theight=\"16\"\n\t\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t\t\t\t<path d=\"M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8z\"></path>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\t#input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\trole=\"combobox\"\n\t\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t\t[readOnly]=\"readonly\"\n\t\t\t\t\t\t(input)=\"onSearch($event.target.value)\"\n\t\t\t\t\t\t(focus)=\"fluid ? handleFocus($event) : null\"\n\t\t\t\t\t\t(blur)=\"fluid ? handleFocus($event) : onBlur()\"\n\t\t\t\t\t\t(keydown.enter)=\"onSubmit($event)\"\n\t\t\t\t\t\t[value]=\"selectedValue\"\n\t\t\t\t\t\tclass=\"cds--text-input\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--text-input--empty': !showClearButton}\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t[id]=\"id\"\n\t\t\t\t\t\t[attr.aria-labelledby]=\"labelId\"\n\t\t\t\t\t\t[attr.aria-expanded]=\"open\"\n\t\t\t\t\t\taria-haspopup=\"listbox\"\n\t\t\t\t\t\t[attr.maxlength]=\"maxLength\"\n\t\t\t\t\t\t[attr.aria-controls]=\"open ? view?.listId : null\"\n\t\t\t\t\t\t[attr.aria-autocomplete]=\"autocomplete\"\n\t\t\t\t\t\t[placeholder]=\"placeholder\"/>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\t\t\tcdsIcon=\"warning--filled\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__invalid-icon\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"!invalid && warn\"\n\t\t\t\t\t\tcdsIcon=\"warning--alt--filled\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"cds--list-box__invalid-icon cds--list-box__invalid-icon--warning\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"showClearButton\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tclass=\"cds--list-box__selection\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t[attr.aria-label]=\"clearSelectionAria\"\n\t\t\t\t\t\t[title]=\"clearSelectionTitle\"\n\t\t\t\t\t\t(keyup.enter)=\"clearInput($event)\"\n\t\t\t\t\t\t(click)=\"clearInput($event)\"\n\t\t\t\t\t\t(blur)=\"onBlur()\">\n\t\t\t\t\t\t<svg cdsIcon=\"close\" size=\"16\"></svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tclass=\"cds--list-box__menu-icon\"\n\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t[title]=\"open ? closeMenuAria : openMenuAria\"\n\t\t\t\t\t\t[attr.aria-label]=\"open ? closeMenuAria : openMenuAria\"\n\t\t\t\t\t\t[ngClass]=\"{'cds--list-box__menu-icon--open': open}\">\n\t\t\t\t\t\t<svg cdsIcon=\"chevron--down\" size=\"16\"></svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\t#dropdownMenu\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'cds--list-box--up': this.dropUp !== null && this.dropUp !== undefined ? dropUp : _dropUp\n\t\t\t\t\t}\">\n\t\t\t\t\t<ng-content *ngIf=\"open\"></ng-content>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<hr *ngIf=\"fluid\" class=\"cds--list-box__divider\" />\n\t\t\t<div\n\t\t\t\t*ngIf=\"helperText && !invalid && !warn && !fluid\"\n\t\t\t\tclass=\"cds--form__helper-text\"\n\t\t\t\t[ngClass]=\"{'cds--form__helper-text--disabled': disabled}\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"invalid\" class=\"cds--form-requirement\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{ invalidText }}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"!invalid && warn\" class=\"cds--form-requirement\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t\t\t</div>\n\t\t</div>\n\t`,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: ComboBox,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DropdownService }, { type: i2.I18n }]; }, propDecorators: { placeholder: [{\n                type: Input\n            }], openMenuAria: [{\n                type: Input\n            }], closeMenuAria: [{\n                type: Input\n            }], clearSelectionsTitle: [{\n                type: Input\n            }], clearSelectionsAria: [{\n                type: Input\n            }], clearSelectionTitle: [{\n                type: Input\n            }], clearSelectionAria: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], labelId: [{\n                type: Input\n            }], items: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], itemValueKey: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], hideLabel: [{\n                type: Input\n            }], helperText: [{\n                type: Input\n            }], appendInline: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], invalidText: [{\n                type: Input\n            }], warn: [{\n                type: Input\n            }], warnText: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], selectionFeedback: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], dropUp: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], fluid: [{\n                type: Input\n            }], selected: [{\n                type: Output\n            }], submit: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }], search: [{\n                type: Output\n            }], clear: [{\n                type: Output\n            }], view: [{\n                type: ContentChild,\n                args: [AbstractDropdownView, { static: true }]\n            }], dropdownMenu: [{\n                type: ViewChild,\n                args: [\"dropdownMenu\"]\n            }], input: [{\n                type: ViewChild,\n                args: [\"input\", { static: true }]\n            }], listbox: [{\n                type: ViewChild,\n                args: [\"listbox\", { static: true }]\n            }], hostClass: [{\n                type: HostBinding,\n                args: [\"class.cds--list-box__wrapper\"]\n            }], hostkeys: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\nclass ComboBoxModule {\n}\nComboBoxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nComboBoxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBoxModule, declarations: [ComboBox], imports: [CommonModule,\n        DropdownModule,\n        I18nModule,\n        UtilsModule,\n        IconModule], exports: [ComboBox,\n        DropdownModule] });\nComboBoxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBoxModule, providers: [DropdownService], imports: [CommonModule,\n        DropdownModule,\n        I18nModule,\n        UtilsModule,\n        IconModule, DropdownModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComboBoxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ComboBox\n                    ],\n                    exports: [\n                        ComboBox,\n                        DropdownModule\n                    ],\n                    imports: [\n                        CommonModule,\n                        DropdownModule,\n                        I18nModule,\n                        UtilsModule,\n                        IconModule\n                    ],\n                    providers: [DropdownService]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComboBox, ComboBoxModule };\n"],"x_google_ignoreList":[0]}